//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// :nodoc:
public class TestIntfException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return TestIntfException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_TestIntfException() -> Ice.UserExceptionTypeResolver {
        return TestIntfException_TypeResolver()
    }
}

open class TestIntfException: Ice.UserException {
    public required init() {}

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String {
        return "::Test::TestIntfException"
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: TestIntfException.ice_staticId(), compactId: -1, last: true)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }
}

public enum CloseMode: Swift.UInt8 {
    /// Forcefully
    case Forcefully = 0
    /// Gracefully
    case Gracefully = 1
    /// GracefullyWithWait
    case GracefullyWithWait = 2
    public init() {
        self = .Forcefully
    }
}

/// An `Ice.InputStream` extension to read `CloseMode` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: `CloseMode` - The enumarated value.
    func read() throws -> CloseMode {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 2)
        guard let val = CloseMode(rawValue: rawValue) else {
            throw Ice.MarshalException(reason: "invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: `CloseMode` - The enumerated value.
    func read(tag: Swift.Int32) throws -> CloseMode? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as CloseMode
    }
}

/// An `Ice.OutputStream` extension to write `CloseMode` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: `CloseMode` - The enumerator to write.
    func write(_ v: CloseMode) {
        write(enum: v.rawValue, maxValue: 2)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: `CloseMode` - The enumerator to write.
    func write(tag: Swift.Int32, value: CloseMode?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 2)
    }
}

/// Traits for Slice interface `PingReply`.
public struct PingReplyTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::PingReply"]
    public static let staticId = "::Test::PingReply"
}

/// Traits for Slice interface `TestIntf`.
public struct TestIntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntf"]
    public static let staticId = "::Test::TestIntf"
}

/// Traits for Slice interface `TestIntfController`.
public struct TestIntfControllerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntfController"]
    public static let staticId = "::Test::TestIntfController"
}

/// PingReplyPrx overview.
///
/// PingReplyPrx Methods:
///
///  - reply: 
///
///  - replyAsync: 
public protocol PingReplyPrx: Ice.ObjectPrx {}

private final class PingReplyPrxI: Ice.ObjectPrxI, PingReplyPrx {
    public override class func ice_staticId() -> Swift.String {
        return PingReplyTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `PingReplyPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `PingReplyPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: PingReplyPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> PingReplyPrx? {
    return try PingReplyPrxI.checkedCast(prx: prx, facet: facet, context: context) as PingReplyPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `PingReplyPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `PingReplyPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: PingReplyPrx.Protocol, facet: Swift.String? = nil) -> PingReplyPrx {
    return PingReplyPrxI.uncheckedCast(prx: prx, facet: facet) as PingReplyPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `PingReplyPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: PingReplyPrx.Protocol) -> Swift.String {
    return PingReplyTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `PingReplyPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `PingReplyPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `PingReplyPrx?` - The extracted proxy
    func read(_ type: PingReplyPrx.Protocol) throws -> PingReplyPrx? {
        return try read() as PingReplyPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `PingReplyPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `PingReplyPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: PingReplyPrx.Protocol) throws -> PingReplyPrx? {
        return try read(tag: tag) as PingReplyPrxI?
    }
}

/// PingReplyPrx overview.
///
/// PingReplyPrx Methods:
///
///  - reply: 
///
///  - replyAsync: 
public extension PingReplyPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func reply(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "reply",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func replyAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "reply",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - op: 
///
///  - opAsync: 
///
///  - opWithPayload: 
///
///  - opWithPayloadAsync: 
///
///  - opWithResult: 
///
///  - opWithResultAsync: 
///
///  - opWithUE: 
///
///  - opWithUEAsync: 
///
///  - opBatch: 
///
///  - opBatchAsync: 
///
///  - opBatchCount: 
///
///  - opBatchCountAsync: 
///
///  - waitForBatch: 
///
///  - waitForBatchAsync: 
///
///  - close: 
///
///  - closeAsync: 
///
///  - sleep: 
///
///  - sleepAsync: 
///
///  - startDispatch: 
///
///  - startDispatchAsync: 
///
///  - finishDispatch: 
///
///  - finishDispatchAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - supportsAMD: 
///
///  - supportsAMDAsync: 
///
///  - supportsFunctionalTests: 
///
///  - supportsFunctionalTestsAsync: 
///
///  - pingBidDir: 
///
///  - pingBidDirAsync: 
public protocol TestIntfPrx: Ice.ObjectPrx {}

private final class TestIntfPrxI: Ice.ObjectPrxI, TestIntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> TestIntfPrx? {
    return try TestIntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil) -> TestIntfPrx {
    return TestIntfPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `TestIntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: TestIntfPrx.Protocol) -> Swift.String {
    return TestIntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx?` - The extracted proxy
    func read(_ type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read() as TestIntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read(tag: tag) as TestIntfPrxI?
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - op: 
///
///  - opAsync: 
///
///  - opWithPayload: 
///
///  - opWithPayloadAsync: 
///
///  - opWithResult: 
///
///  - opWithResultAsync: 
///
///  - opWithUE: 
///
///  - opWithUEAsync: 
///
///  - opBatch: 
///
///  - opBatchAsync: 
///
///  - opBatchCount: 
///
///  - opBatchCountAsync: 
///
///  - waitForBatch: 
///
///  - waitForBatchAsync: 
///
///  - close: 
///
///  - closeAsync: 
///
///  - sleep: 
///
///  - sleepAsync: 
///
///  - startDispatch: 
///
///  - startDispatchAsync: 
///
///  - finishDispatch: 
///
///  - finishDispatchAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - supportsAMD: 
///
///  - supportsAMDAsync: 
///
///  - supportsFunctionalTests: 
///
///  - supportsFunctionalTestsAsync: 
///
///  - pingBidDir: 
///
///  - pingBidDirAsync: 
public extension TestIntfPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func op(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "op",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func opAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "op",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Ice.ByteSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func opWithPayload(_ iceP_seq: Ice.ByteSeq, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "opWithPayload",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_seq)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Ice.ByteSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func opWithPayloadAsync(_ iceP_seq: Ice.ByteSeq, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "opWithPayload",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_seq)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func opWithResult(context: Ice.Context? = nil) throws -> Swift.Int32 {
        return try _impl._invoke(operation: "opWithResult",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: Swift.Int32 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Int32>` - The result of the operation
    func opWithResultAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Int32> {
        return _impl._invokeAsync(operation: "opWithResult",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: Swift.Int32 = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func opWithUE(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "opWithUE",
                          mode: .Normal,
                          userException:{ ex in
                              do  {
                                  throw ex
                              } catch let error as TestIntfException {
                                  throw error
                              } catch is Ice.UserException {}
                          },
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func opWithUEAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "opWithUE",
                                  mode: .Normal,
                                  userException:{ ex in
                                      do  {
                                          throw ex
                                      } catch let error as TestIntfException {
                                          throw error
                                      } catch is Ice.UserException {}
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func opBatch(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "opBatch",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func opBatchAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "opBatch",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func opBatchCount(context: Ice.Context? = nil) throws -> Swift.Int32 {
        return try _impl._invoke(operation: "opBatchCount",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: Swift.Int32 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Int32>` - The result of the operation
    func opBatchCountAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Int32> {
        return _impl._invokeAsync(operation: "opBatchCount",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: Swift.Int32 = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Bool`
    func waitForBatch(_ iceP_count: Swift.Int32, context: Ice.Context? = nil) throws -> Swift.Bool {
        return try _impl._invoke(operation: "waitForBatch",
                                 mode: .Normal,
                                 write: { ostr in
                                     ostr.write(iceP_count)
                                 },
                                 read: { istr in
                                     let iceP_returnValue: Swift.Bool = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Bool>` - The result of the operation
    func waitForBatchAsync(_ iceP_count: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Bool> {
        return _impl._invokeAsync(operation: "waitForBatch",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_count)
                                  },
                                  read: { istr in
                                      let iceP_returnValue: Swift.Bool = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `CloseMode`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func close(_ iceP_mode: CloseMode, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "close",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_mode)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `CloseMode`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func closeAsync(_ iceP_mode: CloseMode, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "close",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_mode)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func sleep(_ iceP_ms: Swift.Int32, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "sleep",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_ms)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func sleepAsync(_ iceP_ms: Swift.Int32, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "sleep",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_ms)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func startDispatch(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "startDispatch",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func startDispatchAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "startDispatch",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func finishDispatch(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "finishDispatch",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func finishDispatchAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "finishDispatch",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "shutdown",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Bool`
    func supportsAMD(context: Ice.Context? = nil) throws -> Swift.Bool {
        return try _impl._invoke(operation: "supportsAMD",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: Swift.Bool = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Bool>` - The result of the operation
    func supportsAMDAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Bool> {
        return _impl._invokeAsync(operation: "supportsAMD",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: Swift.Bool = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Bool`
    func supportsFunctionalTests(context: Ice.Context? = nil) throws -> Swift.Bool {
        return try _impl._invoke(operation: "supportsFunctionalTests",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: Swift.Bool = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Bool>` - The result of the operation
    func supportsFunctionalTestsAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Bool> {
        return _impl._invokeAsync(operation: "supportsFunctionalTests",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: Swift.Bool = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter _: `Ice.Identity`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func pingBidDir(_ iceP_id: Ice.Identity, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "pingBidDir",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_id)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Ice.Identity`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func pingBidDirAsync(_ iceP_id: Ice.Identity, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "pingBidDir",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_id)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// TestIntfControllerPrx overview.
///
/// TestIntfControllerPrx Methods:
///
///  - holdAdapter: 
///
///  - holdAdapterAsync: 
///
///  - resumeAdapter: 
///
///  - resumeAdapterAsync: 
public protocol TestIntfControllerPrx: Ice.ObjectPrx {}

private final class TestIntfControllerPrxI: Ice.ObjectPrxI, TestIntfControllerPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfControllerTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfControllerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfControllerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfControllerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> TestIntfControllerPrx? {
    return try TestIntfControllerPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfControllerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfControllerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfControllerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfControllerPrx.Protocol, facet: Swift.String? = nil) -> TestIntfControllerPrx {
    return TestIntfControllerPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfControllerPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `TestIntfControllerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: TestIntfControllerPrx.Protocol) -> Swift.String {
    return TestIntfControllerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfControllerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfControllerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfControllerPrx?` - The extracted proxy
    func read(_ type: TestIntfControllerPrx.Protocol) throws -> TestIntfControllerPrx? {
        return try read() as TestIntfControllerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfControllerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfControllerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfControllerPrx.Protocol) throws -> TestIntfControllerPrx? {
        return try read(tag: tag) as TestIntfControllerPrxI?
    }
}

/// TestIntfControllerPrx overview.
///
/// TestIntfControllerPrx Methods:
///
///  - holdAdapter: 
///
///  - holdAdapterAsync: 
///
///  - resumeAdapter: 
///
///  - resumeAdapterAsync: 
public extension TestIntfControllerPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func holdAdapter(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "holdAdapter",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func holdAdapterAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "holdAdapter",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func resumeAdapter(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "resumeAdapter",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func resumeAdapterAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "resumeAdapter",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `PingReply` servants.
public struct PingReplyDisp: Ice.Disp {
    public let servant: PingReply
    private static let defaultObject = Ice.ObjectI<PingReplyTraits>()

    public init(_ servant: PingReply) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "ice_id":
            return try (servant as? Object ?? PingReplyDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? PingReplyDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? PingReplyDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? PingReplyDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "reply":
            return try servant._iceD_reply(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol PingReply {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func reply(current: Ice.Current) throws
}


/// Dispatcher for `TestIntf` servants.
public struct TestIntfDisp: Ice.Disp {
    public let servant: TestIntf
    private static let defaultObject = Ice.ObjectI<TestIntfTraits>()

    public init(_ servant: TestIntf) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "close":
            return try servant._iceD_close(incoming: request, current: current)
        case "finishDispatch":
            return try servant._iceD_finishDispatch(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? TestIntfDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? TestIntfDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? TestIntfDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? TestIntfDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "op":
            return try servant._iceD_op(incoming: request, current: current)
        case "opBatch":
            return try servant._iceD_opBatch(incoming: request, current: current)
        case "opBatchCount":
            return try servant._iceD_opBatchCount(incoming: request, current: current)
        case "opWithPayload":
            return try servant._iceD_opWithPayload(incoming: request, current: current)
        case "opWithResult":
            return try servant._iceD_opWithResult(incoming: request, current: current)
        case "opWithUE":
            return try servant._iceD_opWithUE(incoming: request, current: current)
        case "pingBidDir":
            return try servant._iceD_pingBidDir(incoming: request, current: current)
        case "shutdown":
            return try servant._iceD_shutdown(incoming: request, current: current)
        case "sleep":
            return try servant._iceD_sleep(incoming: request, current: current)
        case "startDispatch":
            return try servant._iceD_startDispatch(incoming: request, current: current)
        case "supportsAMD":
            return try servant._iceD_supportsAMD(incoming: request, current: current)
        case "supportsFunctionalTests":
            return try servant._iceD_supportsFunctionalTests(incoming: request, current: current)
        case "waitForBatch":
            return try servant._iceD_waitForBatch(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol TestIntf {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func op(current: Ice.Current) throws

    ///
    /// - parameter seq: `Ice.ByteSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func opWithPayload(seq: Ice.ByteSeq, current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func opWithResult(current: Ice.Current) throws -> Swift.Int32

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func opWithUE(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func opBatch(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func opBatchCount(current: Ice.Current) throws -> Swift.Int32

    ///
    /// - parameter count: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Bool`
    func waitForBatch(count: Swift.Int32, current: Ice.Current) throws -> Swift.Bool

    ///
    /// - parameter mode: `CloseMode`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func close(mode: CloseMode, current: Ice.Current) throws

    ///
    /// - parameter ms: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func sleep(ms: Swift.Int32, current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func startDispatchAsync(current: Ice.Current) -> PromiseKit.Promise<Swift.Void>

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func finishDispatch(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Bool`
    func supportsAMD(current: Ice.Current) throws -> Swift.Bool

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Bool`
    func supportsFunctionalTests(current: Ice.Current) throws -> Swift.Bool

    ///
    /// - parameter id: `Ice.Identity`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func pingBidDir(id: Ice.Identity, current: Ice.Current) throws
}


/// Dispatcher for `TestIntfController` servants.
public struct TestIntfControllerDisp: Ice.Disp {
    public let servant: TestIntfController
    private static let defaultObject = Ice.ObjectI<TestIntfControllerTraits>()

    public init(_ servant: TestIntfController) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "holdAdapter":
            return try servant._iceD_holdAdapter(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? TestIntfControllerDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? TestIntfControllerDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? TestIntfControllerDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? TestIntfControllerDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "resumeAdapter":
            return try servant._iceD_resumeAdapter(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol TestIntfController {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func holdAdapter(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func resumeAdapter(current: Ice.Current) throws
}

/// PingReply overview.
///
/// PingReply Methods:
///
///  - reply: 
public extension PingReply {
    func _iceD_reply(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.reply(current: current)

        return inS.setResult()
    }
}

/// TestIntf overview.
///
/// TestIntf Methods:
///
///  - op: 
///
///  - opWithPayload: 
///
///  - opWithResult: 
///
///  - opWithUE: 
///
///  - opBatch: 
///
///  - opBatchCount: 
///
///  - waitForBatch: 
///
///  - close: 
///
///  - sleep: 
///
///  - startDispatch: 
///
///  - finishDispatch: 
///
///  - shutdown: 
///
///  - supportsAMD: 
///
///  - supportsFunctionalTests: 
///
///  - pingBidDir: 
public extension TestIntf {
    func _iceD_op(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.op(current: current)

        return inS.setResult()
    }

    func _iceD_opWithPayload(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_seq: Ice.ByteSeq = try inS.read { istr in
            let iceP_seq: Ice.ByteSeq = try istr.read()
            return iceP_seq
        }

        try self.opWithPayload(seq: iceP_seq, current: current)

        return inS.setResult()
    }

    func _iceD_opWithResult(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.opWithResult(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_opWithUE(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.opWithUE(current: current)

        return inS.setResult()
    }

    func _iceD_opBatch(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.opBatch(current: current)

        return inS.setResult()
    }

    func _iceD_opBatchCount(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.opBatchCount(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_waitForBatch(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_count: Swift.Int32 = try inS.read { istr in
            let iceP_count: Swift.Int32 = try istr.read()
            return iceP_count
        }

        let iceP_returnValue = try self.waitForBatch(count: iceP_count, current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_close(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_mode: CloseMode = try inS.read { istr in
            let iceP_mode: CloseMode = try istr.read()
            return iceP_mode
        }

        try self.close(mode: iceP_mode, current: current)

        return inS.setResult()
    }

    func _iceD_sleep(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_ms: Swift.Int32 = try inS.read { istr in
            let iceP_ms: Swift.Int32 = try istr.read()
            return iceP_ms
        }

        try self.sleep(ms: iceP_ms, current: current)

        return inS.setResult()
    }

    func _iceD_startDispatch(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        return inS.setResultPromise(startDispatchAsync(current: current))
    }

    func _iceD_finishDispatch(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.finishDispatch(current: current)

        return inS.setResult()
    }

    func _iceD_shutdown(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.shutdown(current: current)

        return inS.setResult()
    }

    func _iceD_supportsAMD(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.supportsAMD(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_supportsFunctionalTests(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.supportsFunctionalTests(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_pingBidDir(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_id: Ice.Identity = try inS.read { istr in
            let iceP_id: Ice.Identity = try istr.read()
            return iceP_id
        }

        try self.pingBidDir(id: iceP_id, current: current)

        return inS.setResult()
    }
}

/// TestIntfController overview.
///
/// TestIntfController Methods:
///
///  - holdAdapter: 
///
///  - resumeAdapter: 
public extension TestIntfController {
    func _iceD_holdAdapter(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.holdAdapter(current: current)

        return inS.setResult()
    }

    func _iceD_resumeAdapter(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.resumeAdapter(current: current)

        return inS.setResult()
    }
}
