//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

/// :nodoc:
public class TestIntfException_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return TestIntfException.self
    }
}

public extension Ice.ClassResolver {
    @objc static func Test_TestIntfException() -> Ice.UserExceptionTypeResolver {
        return TestIntfException_TypeResolver()
    }
}

open class TestIntfException: Ice.UserException, @unchecked Sendable {
    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::Test::TestIntfException" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: TestIntfException.ice_staticId(), compactId: -1, last: true)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        try istr.endSlice()
    }
}

/// Traits for Slice interface`PingReply`.
public struct PingReplyTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::PingReply"]
    public static let staticId = "::Test::PingReply"
}

/// Traits for Slice interface`TestIntf`.
public struct TestIntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntf"]
    public static let staticId = "::Test::TestIntf"
}

/// Traits for Slice interface`TestIntfController`.
public struct TestIntfControllerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntfController"]
    public static let staticId = "::Test::TestIntfController"
}

/// PingReplyPrx overview.
///
/// PingReplyPrx Methods:
///
///  - reply: 
///
///  - replyAsync: 
public protocol PingReplyPrx: Ice.ObjectPrx {}

private final class PingReplyPrxI: Ice.ObjectPrxI, PingReplyPrx {
    public override class func ice_staticId() -> Swift.String {
        return PingReplyTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: PingReplyPrx.Protocol) throws -> PingReplyPrx {
    try communicator.makeProxyImpl(proxyString) as PingReplyPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `PingReplyPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `PingReplyPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: PingReplyPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> PingReplyPrx? {
    return try await PingReplyPrxI.checkedCast(prx: prx, facet: facet, context: context) as PingReplyPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `PingReplyPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `PingReplyPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: PingReplyPrx.Protocol, facet: Swift.String? = nil) -> PingReplyPrx {
    return PingReplyPrxI.uncheckedCast(prx: prx, facet: facet) as PingReplyPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `PingReplyPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: PingReplyPrx.Protocol) -> Swift.String {
    return PingReplyTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `PingReplyPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `PingReplyPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `PingReplyPrx?` - The extracted proxy
    func read(_ type: PingReplyPrx.Protocol) throws -> PingReplyPrx? {
        return try read() as PingReplyPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `PingReplyPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `PingReplyPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: PingReplyPrx.Protocol) throws -> PingReplyPrx? {
        return try read(tag: tag) as PingReplyPrxI?
    }
}

/// PingReplyPrx overview.
///
/// PingReplyPrx Methods:
///
///  - reply: 
///
///  - replyAsync: 
public extension PingReplyPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func reply(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "reply",
                                       mode: .Normal,
                                       context: context)
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - op: 
///
///  - opAsync: 
///
///  - opWithPayload: 
///
///  - opWithPayloadAsync: 
///
///  - opWithResult: 
///
///  - opWithResultAsync: 
///
///  - opWithUE: 
///
///  - opWithUEAsync: 
///
///  - opBatch: 
///
///  - opBatchAsync: 
///
///  - opBatchCount: 
///
///  - opBatchCountAsync: 
///
///  - waitForBatch: 
///
///  - waitForBatchAsync: 
///
///  - closeConnection: 
///
///  - closeConnectionAsync: 
///
///  - abortConnection: 
///
///  - abortConnectionAsync: 
///
///  - sleep: 
///
///  - sleepAsync: 
///
///  - startDispatch: 
///
///  - startDispatchAsync: 
///
///  - finishDispatch: 
///
///  - finishDispatchAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - supportsFunctionalTests: 
///
///  - supportsFunctionalTestsAsync: 
///
///  - pingBiDir: 
///
///  - pingBiDirAsync: 
public protocol TestIntfPrx: Ice.ObjectPrx {}

private final class TestIntfPrxI: Ice.ObjectPrxI, TestIntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestIntfPrx.Protocol) throws -> TestIntfPrx {
    try communicator.makeProxyImpl(proxyString) as TestIntfPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> TestIntfPrx? {
    return try await TestIntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil) -> TestIntfPrx {
    return TestIntfPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `TestIntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TestIntfPrx.Protocol) -> Swift.String {
    return TestIntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx?` - The extracted proxy
    func read(_ type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read() as TestIntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read(tag: tag) as TestIntfPrxI?
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - op: 
///
///  - opAsync: 
///
///  - opWithPayload: 
///
///  - opWithPayloadAsync: 
///
///  - opWithResult: 
///
///  - opWithResultAsync: 
///
///  - opWithUE: 
///
///  - opWithUEAsync: 
///
///  - opBatch: 
///
///  - opBatchAsync: 
///
///  - opBatchCount: 
///
///  - opBatchCountAsync: 
///
///  - waitForBatch: 
///
///  - waitForBatchAsync: 
///
///  - closeConnection: 
///
///  - closeConnectionAsync: 
///
///  - abortConnection: 
///
///  - abortConnectionAsync: 
///
///  - sleep: 
///
///  - sleepAsync: 
///
///  - startDispatch: 
///
///  - startDispatchAsync: 
///
///  - finishDispatch: 
///
///  - finishDispatchAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - supportsFunctionalTests: 
///
///  - supportsFunctionalTestsAsync: 
///
///  - pingBiDir: 
///
///  - pingBiDirAsync: 
public extension TestIntfPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func op(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "op",
                                       mode: .Normal,
                                       context: context)
    }

    ///
    /// - parameter _: `Ice.ByteSeq`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func opWithPayload(_ iceP_seq: Ice.ByteSeq, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "opWithPayload",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_seq)
                                       },
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func opWithResult(context: Ice.Context? = nil) async throws -> Swift.Int32 {
        return try await _impl._invoke(operation: "opWithResult",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: Swift.Int32 = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func opWithUE(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "opWithUE",
                                       mode: .Normal,
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as TestIntfException {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func opBatch(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "opBatch",
                                       mode: .Normal,
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func opBatchCount(context: Ice.Context? = nil) async throws -> Swift.Int32 {
        return try await _impl._invoke(operation: "opBatchCount",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: Swift.Int32 = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Bool`
    func waitForBatch(_ iceP_count: Swift.Int32, context: Ice.Context? = nil) async throws -> Swift.Bool {
        return try await _impl._invoke(operation: "waitForBatch",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_count)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: Swift.Bool = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func closeConnection(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "closeConnection",
                                       mode: .Normal,
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func abortConnection(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "abortConnection",
                                       mode: .Normal,
                                       context: context)
    }

    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func sleep(_ iceP_ms: Swift.Int32, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "sleep",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_ms)
                                       },
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func startDispatch(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "startDispatch",
                                       mode: .Normal,
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func finishDispatch(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "finishDispatch",
                                       mode: .Normal,
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "shutdown",
                                       mode: .Normal,
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Bool`
    func supportsFunctionalTests(context: Ice.Context? = nil) async throws -> Swift.Bool {
        return try await _impl._invoke(operation: "supportsFunctionalTests",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: Swift.Bool = try istr.read()
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    ///
    /// - parameter _: `PingReplyPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func pingBiDir(_ iceP_reply: PingReplyPrx?, context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "pingBiDir",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_reply)
                                       },
                                       context: context)
    }
}

/// TestIntfControllerPrx overview.
///
/// TestIntfControllerPrx Methods:
///
///  - holdAdapter: 
///
///  - holdAdapterAsync: 
///
///  - resumeAdapter: 
///
///  - resumeAdapterAsync: 
public protocol TestIntfControllerPrx: Ice.ObjectPrx {}

private final class TestIntfControllerPrxI: Ice.ObjectPrxI, TestIntfControllerPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfControllerTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestIntfControllerPrx.Protocol) throws -> TestIntfControllerPrx {
    try communicator.makeProxyImpl(proxyString) as TestIntfControllerPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfControllerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfControllerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfControllerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> TestIntfControllerPrx? {
    return try await TestIntfControllerPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfControllerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfControllerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfControllerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfControllerPrx.Protocol, facet: Swift.String? = nil) -> TestIntfControllerPrx {
    return TestIntfControllerPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfControllerPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `TestIntfControllerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TestIntfControllerPrx.Protocol) -> Swift.String {
    return TestIntfControllerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfControllerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfControllerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfControllerPrx?` - The extracted proxy
    func read(_ type: TestIntfControllerPrx.Protocol) throws -> TestIntfControllerPrx? {
        return try read() as TestIntfControllerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfControllerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfControllerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfControllerPrx.Protocol) throws -> TestIntfControllerPrx? {
        return try read(tag: tag) as TestIntfControllerPrxI?
    }
}

/// TestIntfControllerPrx overview.
///
/// TestIntfControllerPrx Methods:
///
///  - holdAdapter: 
///
///  - holdAdapterAsync: 
///
///  - resumeAdapter: 
///
///  - resumeAdapterAsync: 
public extension TestIntfControllerPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func holdAdapter(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "holdAdapter",
                                       mode: .Normal,
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func resumeAdapter(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "resumeAdapter",
                                       mode: .Normal,
                                       context: context)
    }
}


/// Dispatcher for `PingReply` servants.
public struct PingReplyDisp: Ice.Dispatcher {
    public let servant: PingReply
    private static let defaultObject = Ice.ObjectI<PingReplyTraits>()

    public init(_ servant: PingReply) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? PingReplyDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? PingReplyDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? PingReplyDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? PingReplyDisp.defaultObject)._iceD_ice_ping(request)
        case "reply":
            try await servant._iceD_reply(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol PingReply {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func reply(current: Ice.Current) async throws
}


/// Dispatcher for `TestIntf` servants.
public struct TestIntfDisp: Ice.Dispatcher {
    public let servant: TestIntf
    private static let defaultObject = Ice.ObjectI<TestIntfTraits>()

    public init(_ servant: TestIntf) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "abortConnection":
            try await servant._iceD_abortConnection(request)
        case "closeConnection":
            try await servant._iceD_closeConnection(request)
        case "finishDispatch":
            try await servant._iceD_finishDispatch(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? TestIntfDisp.defaultObject)._iceD_ice_ping(request)
        case "op":
            try await servant._iceD_op(request)
        case "opBatch":
            try await servant._iceD_opBatch(request)
        case "opBatchCount":
            try await servant._iceD_opBatchCount(request)
        case "opWithPayload":
            try await servant._iceD_opWithPayload(request)
        case "opWithResult":
            try await servant._iceD_opWithResult(request)
        case "opWithUE":
            try await servant._iceD_opWithUE(request)
        case "pingBiDir":
            try await servant._iceD_pingBiDir(request)
        case "shutdown":
            try await servant._iceD_shutdown(request)
        case "sleep":
            try await servant._iceD_sleep(request)
        case "startDispatch":
            try await servant._iceD_startDispatch(request)
        case "supportsFunctionalTests":
            try await servant._iceD_supportsFunctionalTests(request)
        case "waitForBatch":
            try await servant._iceD_waitForBatch(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol TestIntf {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func op(current: Ice.Current) async throws

    ///
    /// - parameter seq: `Ice.ByteSeq`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func opWithPayload(seq: Ice.ByteSeq, current: Ice.Current) async throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func opWithResult(current: Ice.Current) async throws -> Swift.Int32

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func opWithUE(current: Ice.Current) async throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func opBatch(current: Ice.Current) async throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func opBatchCount(current: Ice.Current) async throws -> Swift.Int32

    ///
    /// - parameter count: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Bool`
    func waitForBatch(count: Swift.Int32, current: Ice.Current) async throws -> Swift.Bool

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func closeConnection(current: Ice.Current) async throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func abortConnection(current: Ice.Current) async throws

    ///
    /// - parameter ms: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func sleep(ms: Swift.Int32, current: Ice.Current) async throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func startDispatch(current: Ice.Current) async throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func finishDispatch(current: Ice.Current) async throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) async throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Bool`
    func supportsFunctionalTests(current: Ice.Current) async throws -> Swift.Bool

    ///
    /// - parameter reply: `PingReplyPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func pingBiDir(reply: PingReplyPrx?, current: Ice.Current) async throws
}


/// Dispatcher for `TestIntfController` servants.
public struct TestIntfControllerDisp: Ice.Dispatcher {
    public let servant: TestIntfController
    private static let defaultObject = Ice.ObjectI<TestIntfControllerTraits>()

    public init(_ servant: TestIntfController) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "holdAdapter":
            try await servant._iceD_holdAdapter(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? TestIntfControllerDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? TestIntfControllerDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? TestIntfControllerDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? TestIntfControllerDisp.defaultObject)._iceD_ice_ping(request)
        case "resumeAdapter":
            try await servant._iceD_resumeAdapter(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol TestIntfController {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func holdAdapter(current: Ice.Current) async throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func resumeAdapter(current: Ice.Current) async throws
}

/// PingReply overview.
///
/// PingReply Methods:
///
///  - reply: 
extension PingReply {
    public func _iceD_reply(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.reply(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

/// TestIntf overview.
///
/// TestIntf Methods:
///
///  - op: 
///
///  - opWithPayload: 
///
///  - opWithResult: 
///
///  - opWithUE: 
///
///  - opBatch: 
///
///  - opBatchCount: 
///
///  - waitForBatch: 
///
///  - closeConnection: 
///
///  - abortConnection: 
///
///  - sleep: 
///
///  - startDispatch: 
///
///  - finishDispatch: 
///
///  - shutdown: 
///
///  - supportsFunctionalTests: 
///
///  - pingBiDir: 
extension TestIntf {
    public func _iceD_op(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.op(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_opWithPayload(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_seq: Ice.ByteSeq = try istr.read()
        try await self.opWithPayload(seq: iceP_seq, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_opWithResult(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opWithResult(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_opWithUE(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.opWithUE(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_opBatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.opBatch(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_opBatchCount(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.opBatchCount(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_waitForBatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_count: Swift.Int32 = try istr.read()
        let result = try await self.waitForBatch(count: iceP_count, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_closeConnection(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.closeConnection(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_abortConnection(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.abortConnection(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_sleep(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_ms: Swift.Int32 = try istr.read()
        try await self.sleep(ms: iceP_ms, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_startDispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.startDispatch(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_finishDispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.finishDispatch(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_shutdown(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.shutdown(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_supportsFunctionalTests(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.supportsFunctionalTests(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }

    public func _iceD_pingBiDir(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_reply: PingReplyPrx? = try istr.read(PingReplyPrx.self)
        try await self.pingBiDir(reply: iceP_reply, current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

/// TestIntfController overview.
///
/// TestIntfController Methods:
///
///  - holdAdapter: 
///
///  - resumeAdapter: 
extension TestIntfController {
    public func _iceD_holdAdapter(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.holdAdapter(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }

    public func _iceD_resumeAdapter(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.resumeAdapter(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
