//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice
import PromiseKit

/// Traits for Slice interface`TestLocatorRegistry`.
public struct TestLocatorRegistryTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::LocatorRegistry", "::Ice::Object", "::Test::TestLocatorRegistry"]
    public static let staticId = "::Test::TestLocatorRegistry"
}

/// Traits for Slice interface`TestLocator`.
public struct TestLocatorTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Locator", "::Ice::Object", "::Test::TestLocator"]
    public static let staticId = "::Test::TestLocator"
}

/// Traits for Slice interface`ServerManager`.
public struct ServerManagerTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::ServerManager"]
    public static let staticId = "::Test::ServerManager"
}

/// Traits for Slice interface`Hello`.
public struct HelloTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::Hello"]
    public static let staticId = "::Test::Hello"
}

/// Traits for Slice interface`TestIntf`.
public struct TestIntfTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::Test::TestIntf"]
    public static let staticId = "::Test::TestIntf"
}

/// TestLocatorRegistryPrx overview.
///
/// TestLocatorRegistryPrx Methods:
///
///  - addObject: 
///
///  - addObjectAsync: 
public protocol TestLocatorRegistryPrx: Ice.LocatorRegistryPrx {}

private final class TestLocatorRegistryPrxI: Ice.ObjectPrxI, TestLocatorRegistryPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestLocatorRegistryTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestLocatorRegistryPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestLocatorRegistryPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestLocatorRegistryPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> TestLocatorRegistryPrx? {
    return try TestLocatorRegistryPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestLocatorRegistryPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestLocatorRegistryPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestLocatorRegistryPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestLocatorRegistryPrx.Protocol, facet: Swift.String? = nil) -> TestLocatorRegistryPrx {
    return TestLocatorRegistryPrxI.uncheckedCast(prx: prx, facet: facet) as TestLocatorRegistryPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `TestLocatorRegistryPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: TestLocatorRegistryPrx.Protocol) -> Swift.String {
    return TestLocatorRegistryTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestLocatorRegistryPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestLocatorRegistryPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestLocatorRegistryPrx?` - The extracted proxy
    func read(_ type: TestLocatorRegistryPrx.Protocol) throws -> TestLocatorRegistryPrx? {
        return try read() as TestLocatorRegistryPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestLocatorRegistryPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestLocatorRegistryPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestLocatorRegistryPrx.Protocol) throws -> TestLocatorRegistryPrx? {
        return try read(tag: tag) as TestLocatorRegistryPrxI?
    }
}

/// TestLocatorRegistryPrx overview.
///
/// TestLocatorRegistryPrx Methods:
///
///  - addObject: 
///
///  - addObjectAsync: 
public extension TestLocatorRegistryPrx {
    ///
    /// - parameter _: `Ice.ObjectPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func addObject(_ iceP_obj: Ice.ObjectPrx?, context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "addObject",
                          mode: .Normal,
                          write: { ostr in
                              ostr.write(iceP_obj)
                          },
                          context: context)
    }

    ///
    /// - parameter _: `Ice.ObjectPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func addObjectAsync(_ iceP_obj: Ice.ObjectPrx?, context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "addObject",
                                  mode: .Normal,
                                  write: { ostr in
                                      ostr.write(iceP_obj)
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// TestLocatorPrx overview.
///
/// TestLocatorPrx Methods:
///
///  - getRequestCount: 
///
///  - getRequestCountAsync: 
public protocol TestLocatorPrx: Ice.LocatorPrx {}

private final class TestLocatorPrxI: Ice.ObjectPrxI, TestLocatorPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestLocatorTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestLocatorPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestLocatorPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestLocatorPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> TestLocatorPrx? {
    return try TestLocatorPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestLocatorPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestLocatorPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestLocatorPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestLocatorPrx.Protocol, facet: Swift.String? = nil) -> TestLocatorPrx {
    return TestLocatorPrxI.uncheckedCast(prx: prx, facet: facet) as TestLocatorPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `TestLocatorPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: TestLocatorPrx.Protocol) -> Swift.String {
    return TestLocatorTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestLocatorPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestLocatorPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestLocatorPrx?` - The extracted proxy
    func read(_ type: TestLocatorPrx.Protocol) throws -> TestLocatorPrx? {
        return try read() as TestLocatorPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestLocatorPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestLocatorPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestLocatorPrx.Protocol) throws -> TestLocatorPrx? {
        return try read(tag: tag) as TestLocatorPrxI?
    }
}

/// TestLocatorPrx overview.
///
/// TestLocatorPrx Methods:
///
///  - getRequestCount: 
///
///  - getRequestCountAsync: 
public extension TestLocatorPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func getRequestCount(context: Ice.Context? = nil) throws -> Swift.Int32 {
        return try _impl._invoke(operation: "getRequestCount",
                                 mode: .Nonmutating,
                                 read: { istr in
                                     let iceP_returnValue: Swift.Int32 = try istr.read()
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<Swift.Int32>` - The result of the operation
    func getRequestCountAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Int32> {
        return _impl._invokeAsync(operation: "getRequestCount",
                                  mode: .Nonmutating,
                                  read: { istr in
                                      let iceP_returnValue: Swift.Int32 = try istr.read()
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// ServerManagerPrx overview.
///
/// ServerManagerPrx Methods:
///
///  - startServer: 
///
///  - startServerAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public protocol ServerManagerPrx: Ice.ObjectPrx {}

private final class ServerManagerPrxI: Ice.ObjectPrxI, ServerManagerPrx {
    public override class func ice_staticId() -> Swift.String {
        return ServerManagerTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `ServerManagerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `ServerManagerPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: ServerManagerPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> ServerManagerPrx? {
    return try ServerManagerPrxI.checkedCast(prx: prx, facet: facet, context: context) as ServerManagerPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `ServerManagerPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `ServerManagerPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: ServerManagerPrx.Protocol, facet: Swift.String? = nil) -> ServerManagerPrx {
    return ServerManagerPrxI.uncheckedCast(prx: prx, facet: facet) as ServerManagerPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `ServerManagerPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: ServerManagerPrx.Protocol) -> Swift.String {
    return ServerManagerTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `ServerManagerPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `ServerManagerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `ServerManagerPrx?` - The extracted proxy
    func read(_ type: ServerManagerPrx.Protocol) throws -> ServerManagerPrx? {
        return try read() as ServerManagerPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `ServerManagerPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `ServerManagerPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: ServerManagerPrx.Protocol) throws -> ServerManagerPrx? {
        return try read(tag: tag) as ServerManagerPrxI?
    }
}

/// ServerManagerPrx overview.
///
/// ServerManagerPrx Methods:
///
///  - startServer: 
///
///  - startServerAsync: 
///
///  - shutdown: 
///
///  - shutdownAsync: 
public extension ServerManagerPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func startServer(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "startServer",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func startServerAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "startServer",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "shutdown",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// HelloPrx overview.
///
/// HelloPrx Methods:
///
///  - sayHello: 
///
///  - sayHelloAsync: 
public protocol HelloPrx: Ice.ObjectPrx {}

private final class HelloPrxI: Ice.ObjectPrxI, HelloPrx {
    public override class func ice_staticId() -> Swift.String {
        return HelloTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `HelloPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `HelloPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: HelloPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> HelloPrx? {
    return try HelloPrxI.checkedCast(prx: prx, facet: facet, context: context) as HelloPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `HelloPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `HelloPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: HelloPrx.Protocol, facet: Swift.String? = nil) -> HelloPrx {
    return HelloPrxI.uncheckedCast(prx: prx, facet: facet) as HelloPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `HelloPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: HelloPrx.Protocol) -> Swift.String {
    return HelloTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `HelloPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `HelloPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `HelloPrx?` - The extracted proxy
    func read(_ type: HelloPrx.Protocol) throws -> HelloPrx? {
        return try read() as HelloPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `HelloPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `HelloPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: HelloPrx.Protocol) throws -> HelloPrx? {
        return try read(tag: tag) as HelloPrxI?
    }
}

/// HelloPrx overview.
///
/// HelloPrx Methods:
///
///  - sayHello: 
///
///  - sayHelloAsync: 
public extension HelloPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func sayHello(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "sayHello",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func sayHelloAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "sayHello",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - getHello: 
///
///  - getHelloAsync: 
///
///  - getReplicatedHello: 
///
///  - getReplicatedHelloAsync: 
///
///  - migrateHello: 
///
///  - migrateHelloAsync: 
public protocol TestIntfPrx: Ice.ObjectPrx {}

private final class TestIntfPrxI: Ice.ObjectPrxI, TestIntfPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestIntfTraits.staticId
    }
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestIntfPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) throws -> TestIntfPrx? {
    return try TestIntfPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestIntfPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestIntfPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestIntfPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestIntfPrx.Protocol, facet: Swift.String? = nil) -> TestIntfPrx {
    return TestIntfPrxI.uncheckedCast(prx: prx, facet: facet) as TestIntfPrxI
}

/// Returns the Slice type id of the interface or class associated with this proxy type.
///
/// parameter type: `TestIntfPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface or class associated with this proxy type.
public func ice_staticId(_ type: TestIntfPrx.Protocol) -> Swift.String {
    return TestIntfTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestIntfPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx?` - The extracted proxy
    func read(_ type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read() as TestIntfPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestIntfPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestIntfPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestIntfPrx.Protocol) throws -> TestIntfPrx? {
        return try read(tag: tag) as TestIntfPrxI?
    }
}

/// TestIntfPrx overview.
///
/// TestIntfPrx Methods:
///
///  - shutdown: 
///
///  - shutdownAsync: 
///
///  - getHello: 
///
///  - getHelloAsync: 
///
///  - getReplicatedHello: 
///
///  - getReplicatedHelloAsync: 
///
///  - migrateHello: 
///
///  - migrateHelloAsync: 
public extension TestIntfPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func shutdown(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "shutdown",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func shutdownAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "shutdown",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `HelloPrx?`
    func getHello(context: Ice.Context? = nil) throws -> HelloPrx? {
        return try _impl._invoke(operation: "getHello",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: HelloPrx? = try istr.read(HelloPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<HelloPrx?>` - The result of the operation
    func getHelloAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<HelloPrx?> {
        return _impl._invokeAsync(operation: "getHello",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: HelloPrx? = try istr.read(HelloPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `HelloPrx?`
    func getReplicatedHello(context: Ice.Context? = nil) throws -> HelloPrx? {
        return try _impl._invoke(operation: "getReplicatedHello",
                                 mode: .Normal,
                                 read: { istr in
                                     let iceP_returnValue: HelloPrx? = try istr.read(HelloPrx.self)
                                     return iceP_returnValue
                                 },
                                 context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<HelloPrx?>` - The result of the operation
    func getReplicatedHelloAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<HelloPrx?> {
        return _impl._invokeAsync(operation: "getReplicatedHello",
                                  mode: .Normal,
                                  read: { istr in
                                      let iceP_returnValue: HelloPrx? = try istr.read(HelloPrx.self)
                                      return iceP_returnValue
                                  },
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func migrateHello(context: Ice.Context? = nil) throws {
        try _impl._invoke(operation: "migrateHello",
                          mode: .Normal,
                          context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - parameter sentOn: `Dispatch.DispatchQueue?` - Optional dispatch queue used to
    ///   dispatch the sent callback.
    ///
    /// - parameter sentFlags: `Dispatch.DispatchWorkItemFlags?` - Optional dispatch flags used
    ///   to dispatch the sent callback
    ///
    /// - parameter sent: `((Swift.Bool) -> Swift.Void)` - Optional sent callback.
    ///
    /// - returns: `PromiseKit.Promise<>` - The result of the operation
    func migrateHelloAsync(context: Ice.Context? = nil, sentOn: Dispatch.DispatchQueue? = nil, sentFlags: Dispatch.DispatchWorkItemFlags? = nil, sent: ((Swift.Bool) -> Swift.Void)? = nil) -> PromiseKit.Promise<Swift.Void> {
        return _impl._invokeAsync(operation: "migrateHello",
                                  mode: .Normal,
                                  context: context,
                                  sentOn: sentOn,
                                  sentFlags: sentFlags,
                                  sent: sent)
    }
}


/// Dispatcher for `TestLocatorRegistry` servants.
public struct TestLocatorRegistryDisp: Ice.Disp {
    public let servant: TestLocatorRegistry
    private static let defaultObject = Ice.ObjectI<TestLocatorRegistryTraits>()

    public init(_ servant: TestLocatorRegistry) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "addObject":
            return try servant._iceD_addObject(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? TestLocatorRegistryDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? TestLocatorRegistryDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? TestLocatorRegistryDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? TestLocatorRegistryDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "setAdapterDirectProxy":
            return try servant._iceD_setAdapterDirectProxy(incoming: request, current: current)
        case "setReplicatedAdapterDirectProxy":
            return try servant._iceD_setReplicatedAdapterDirectProxy(incoming: request, current: current)
        case "setServerProcessProxy":
            return try servant._iceD_setServerProcessProxy(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol TestLocatorRegistry: Ice.LocatorRegistry {
    ///
    /// - parameter obj: `Ice.ObjectPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func addObject(obj: Ice.ObjectPrx?, current: Ice.Current) throws
}


/// Dispatcher for `TestLocator` servants.
public struct TestLocatorDisp: Ice.Disp {
    public let servant: TestLocator
    private static let defaultObject = Ice.ObjectI<TestLocatorTraits>()

    public init(_ servant: TestLocator) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "findAdapterById":
            return try servant._iceD_findAdapterById(incoming: request, current: current)
        case "findObjectById":
            return try servant._iceD_findObjectById(incoming: request, current: current)
        case "getRegistry":
            return try servant._iceD_getRegistry(incoming: request, current: current)
        case "getRequestCount":
            return try servant._iceD_getRequestCount(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? TestLocatorDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? TestLocatorDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? TestLocatorDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? TestLocatorDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol TestLocator: Ice.Locator {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func getRequestCount(current: Ice.Current) throws -> Swift.Int32
}


/// Dispatcher for `ServerManager` servants.
public struct ServerManagerDisp: Ice.Disp {
    public let servant: ServerManager
    private static let defaultObject = Ice.ObjectI<ServerManagerTraits>()

    public init(_ servant: ServerManager) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "ice_id":
            return try (servant as? Object ?? ServerManagerDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? ServerManagerDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? ServerManagerDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? ServerManagerDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "shutdown":
            return try servant._iceD_shutdown(incoming: request, current: current)
        case "startServer":
            return try servant._iceD_startServer(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol ServerManager {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func startServer(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws
}


/// Dispatcher for `Hello` servants.
public struct HelloDisp: Ice.Disp {
    public let servant: Hello
    private static let defaultObject = Ice.ObjectI<HelloTraits>()

    public init(_ servant: Hello) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "ice_id":
            return try (servant as? Object ?? HelloDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? HelloDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? HelloDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? HelloDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "sayHello":
            return try servant._iceD_sayHello(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol Hello {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func sayHello(current: Ice.Current) throws
}


/// Dispatcher for `TestIntf` servants.
public struct TestIntfDisp: Ice.Disp {
    public let servant: TestIntf
    private static let defaultObject = Ice.ObjectI<TestIntfTraits>()

    public init(_ servant: TestIntf) {
        self.servant = servant
    }

    public func dispatch(request: Ice.Request, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        request.startOver()
        switch current.operation {
        case "getHello":
            return try servant._iceD_getHello(incoming: request, current: current)
        case "getReplicatedHello":
            return try servant._iceD_getReplicatedHello(incoming: request, current: current)
        case "ice_id":
            return try (servant as? Object ?? TestIntfDisp.defaultObject)._iceD_ice_id(incoming: request, current: current)
        case "ice_ids":
            return try (servant as? Object ?? TestIntfDisp.defaultObject)._iceD_ice_ids(incoming: request, current: current)
        case "ice_isA":
            return try (servant as? Object ?? TestIntfDisp.defaultObject)._iceD_ice_isA(incoming: request, current: current)
        case "ice_ping":
            return try (servant as? Object ?? TestIntfDisp.defaultObject)._iceD_ice_ping(incoming: request, current: current)
        case "migrateHello":
            return try servant._iceD_migrateHello(incoming: request, current: current)
        case "shutdown":
            return try servant._iceD_shutdown(incoming: request, current: current)
        default:
            throw Ice.OperationNotExistException(id: current.id, facet: current.facet, operation: current.operation)
        }
    }
}

public protocol TestIntf {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func shutdown(current: Ice.Current) throws

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `HelloPrx?`
    func getHello(current: Ice.Current) throws -> HelloPrx?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `HelloPrx?`
    func getReplicatedHello(current: Ice.Current) throws -> HelloPrx?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func migrateHello(current: Ice.Current) throws
}

/// TestLocatorRegistry overview.
///
/// TestLocatorRegistry Methods:
///
///  - addObject: 
public extension TestLocatorRegistry {
    func _iceD_addObject(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        let iceP_obj: Ice.ObjectPrx? = try inS.read { istr in
            let iceP_obj: Ice.ObjectPrx? = try istr.read(Ice.ObjectPrx.self)
            return iceP_obj
        }

        try self.addObject(obj: iceP_obj, current: current)

        return inS.setResult()
    }
}

/// TestLocator overview.
///
/// TestLocator Methods:
///
///  - getRequestCount: 
public extension TestLocator {
    func _iceD_getRequestCount(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.getRequestCount(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }
}

/// ServerManager overview.
///
/// ServerManager Methods:
///
///  - startServer: 
///
///  - shutdown: 
public extension ServerManager {
    func _iceD_startServer(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.startServer(current: current)

        return inS.setResult()
    }

    func _iceD_shutdown(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.shutdown(current: current)

        return inS.setResult()
    }
}

/// Hello overview.
///
/// Hello Methods:
///
///  - sayHello: 
public extension Hello {
    func _iceD_sayHello(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.sayHello(current: current)

        return inS.setResult()
    }
}

/// TestIntf overview.
///
/// TestIntf Methods:
///
///  - shutdown: 
///
///  - getHello: 
///
///  - getReplicatedHello: 
///
///  - migrateHello: 
public extension TestIntf {
    func _iceD_shutdown(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.shutdown(current: current)

        return inS.setResult()
    }

    func _iceD_getHello(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.getHello(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_getReplicatedHello(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        let iceP_returnValue = try self.getReplicatedHello(current: current)

        return inS.setResult{ ostr in
            ostr.write(iceP_returnValue)
        }
    }

    func _iceD_migrateHello(incoming inS: Ice.Incoming, current: Ice.Current) throws -> PromiseKit.Promise<Ice.OutputStream>? {
        try inS.readEmptyParams()

        try self.migrateHello(current: current)

        return inS.setResult()
    }
}
