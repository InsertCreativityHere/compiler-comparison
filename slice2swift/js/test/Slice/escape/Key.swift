//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

import Foundation
import Ice

public enum `var`: Swift.UInt8 {
    /// base
    case base = 0
    public init() {
        self = .base
    }
}

/// An `Ice.InputStream` extension to read ``var`` enumerated values from the stream.
public extension Ice.InputStream {
    /// Read an enumerated value.
    ///
    /// - returns: ``var`` - The enumarated value.
    func read() throws -> `var` {
        let rawValue: Swift.UInt8 = try read(enumMaxValue: 0)
        guard let val = `var`(rawValue: rawValue) else {
            throw Ice.MarshalException("invalid enum value")
        }
        return val
    }

    /// Read an optional enumerated value from the stream.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: ``var`` - The enumerated value.
    func read(tag: Swift.Int32) throws -> `var`? {
        guard try readOptional(tag: tag, expectedFormat: .Size) else {
            return nil
        }
        return try read() as `var`
    }
}

/// An `Ice.OutputStream` extension to write ``var`` enumerated values to the stream.
public extension Ice.OutputStream {
    /// Writes an enumerated value to the stream.
    ///
    /// parameter _: ``var`` - The enumerator to write.
    func write(_ v: `var`) {
        write(enum: v.rawValue, maxValue: 0)
    }

    /// Writes an optional enumerated value to the stream.
    ///
    /// parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// parameter _: ``var`` - The enumerator to write.
    func write(tag: Swift.Int32, value: `var`?) {
        guard let v = value else {
            return
        }
        write(tag: tag, val: v.rawValue, maxValue: 0)
    }
}

public struct `break`: Swift.Hashable {
    public var `while`: Swift.Int32 = 0
    public var clone: Swift.String = ""
    public var equals: Swift.String = ""
    public var hashCode: Swift.String = ""
    public var constructor: Swift.String = ""

    public init() {}

    public init(`while`: Swift.Int32, clone: Swift.String, equals: Swift.String, hashCode: Swift.String, constructor: Swift.String) {
        self.`while` = `while`
        self.clone = clone
        self.equals = equals
        self.hashCode = hashCode
        self.constructor = constructor
    }
}

/// An `Ice.InputStream` extension to read ``break`` structured values from the stream.
public extension Ice.InputStream {
    /// Read a ``break`` structured value from the stream.
    ///
    /// - returns: ``break`` - The structured value read from the stream.
    func read() throws -> `break` {
        var v = `break`()
        v.`while` = try self.read()
        v.clone = try self.read()
        v.equals = try self.read()
        v.hashCode = try self.read()
        v.constructor = try self.read()
        return v
    }

    /// Read an optional ``break`?` structured value from the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - returns: ``break`?` - The structured value read from the stream.
    func read(tag: Swift.Int32) throws -> `break`? {
        guard try readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try skip(4)
        return try read() as `break`
    }
}

/// An `Ice.OutputStream` extension to write ``break`` structured values from the stream.
public extension Ice.OutputStream {
    /// Write a ``break`` structured value to the stream.
    ///
    /// - parameter _: ``break`` - The value to write to the stream.
    func write(_ v: `break`) {
        self.write(v.`while`)
        self.write(v.clone)
        self.write(v.equals)
        self.write(v.hashCode)
        self.write(v.constructor)
    }

    /// Write an optional ``break`?` structured value to the stream.
    ///
    /// - parameter tag: `Swift.Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: ``break`?` - The value to write to the stream.
    func write(tag: Swift.Int32, value: `break`?) {
        if let v = value {
            if writeOptional(tag: tag, format: .FSize) {
                let pos = startSize()
                write(v)
                endSize(position: pos)
            }
        }
    }
}

/// Traits for Slice interface``case``.
public struct caseTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::await::case"]
    public static let staticId = "::await::case"
}

/// Traits for Slice interface`typeof`.
public struct typeofTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::await::typeof"]
    public static let staticId = "::await::typeof"
}

/// Traits for Slice interface`explicit`.
public struct explicitTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::await::case", "::await::explicit", "::await::typeof"]
    public static let staticId = "::await::explicit"
}

public typealias `while` = [Swift.String: `break`]

/// Helper class to read and write ``while`` dictionary values from
/// `Ice.InputStream` and `Ice.OutputStream`.
public struct whileHelper {
    /// Read a ``while`` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - returns: ``while`` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream) throws -> `while` {
        let sz = try Swift.Int(istr.readSize())
        var v = `while`()
        for _ in 0 ..< sz {
            let key: Swift.String = try istr.read()
            let value: `break` = try istr.read()
            v[key] = value
        }
        return v
    }
    /// Read an optional ``while`?` dictionary from the stream.
    ///
    /// - parameter istr: `Ice.InputStream` - The stream to read from.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - returns: ``while`` - The dictionary read from the stream.
    public static func read(from istr: Ice.InputStream, tag: Swift.Int32) throws -> `while`? {
        guard try istr.readOptional(tag: tag, expectedFormat: .FSize) else {
            return nil
        }
        try istr.skip(4)
        return try read(from: istr)
    }

    /// Wite a ``while`` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter value: ``while`` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, value v: `while`) {
        ostr.write(size: v.count)
        for (key, value) in v {
            ostr.write(key)
            ostr.write(value)
        }
    }

    /// Wite an optional ``while`?` dictionary to the stream.
    ///
    /// - parameter ostr: `Ice.OuputStream` - The stream to write to.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter value: ``while`` - The dictionary value to write to the stream.
    public static func write(to ostr: Ice.OutputStream, tag: Swift.Int32, value v: `while`?) {
        guard let val = v else {
            return
        }
        if ostr.writeOptional(tag: tag, format: .FSize) {
            let pos = ostr.startSize()
            write(to: ostr, value: val)
            ostr.endSize(position: pos)
        }
    }
}

/// Traits for Slice interface`optionalParams`.
public struct optionalParamsTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::await::optionalParams"]
    public static let staticId = "::await::optionalParams"
}

/// :nodoc:
public class fixed_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return fixed.self
    }
}

public extension Ice.ClassResolver {
    @objc static func await_fixed() -> Ice.UserExceptionTypeResolver {
        return fixed_TypeResolver()
    }
}

open class fixed: Ice.UserException, @unchecked Sendable {
    public var `for`: Swift.Int32 = 0

    public required init() {}

    public init(`for`: Swift.Int32) {
        self.`for` = `for`
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::await::fixed" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: fixed.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.`for`)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.`for` = try istr.read()
        try istr.endSlice()
    }
}

/// :nodoc:
public class foreach_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return foreach.self
    }
}

public extension Ice.ClassResolver {
    @objc static func await_foreach() -> Ice.UserExceptionTypeResolver {
        return foreach_TypeResolver()
    }
}

open class foreach: fixed, @unchecked Sendable {
    public var goto: Swift.Int32 = 0
    public var `if`: Swift.Int32 = 0

    public required init() {
        super.init()
    }

    public init(`for`: Swift.Int32, goto: Swift.Int32, `if`: Swift.Int32) {
        self.goto = goto
        self.`if` = `if`
        super.init(`for`: `for`)
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::await::foreach" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: foreach.ice_staticId(), compactId: -1, last: false)
        ostr.write(self.goto)
        ostr.write(self.`if`)
        ostr.endSlice()
        super._iceWriteImpl(to: ostr);
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.goto = try istr.read()
        self.`if` = try istr.read()
        try istr.endSlice()
        try super._iceReadImpl(from: istr);
    }
}

/// :nodoc:
public class BaseMethods_TypeResolver: Ice.UserExceptionTypeResolver {
    public override func type() -> Ice.UserException.Type {
        return BaseMethods.self
    }
}

public extension Ice.ClassResolver {
    @objc static func await_BaseMethods() -> Ice.UserExceptionTypeResolver {
        return BaseMethods_TypeResolver()
    }
}

open class BaseMethods: Ice.UserException, @unchecked Sendable {
    public var Data: Swift.Int32 = 0
    public var HelpLink: Swift.Int32 = 0
    public var InnerException: Swift.Int32 = 0
    public var Message: Swift.Int32 = 0
    public var Source: Swift.Int32 = 0
    public var StackTrace: Swift.Int32 = 0
    public var TargetSite: Swift.Int32 = 0
    public var HResult: Swift.Int32 = 0
    public var Equals: Swift.Int32 = 0
    public var GetBaseException: Swift.Int32 = 0
    public var GetHashCode: Swift.Int32 = 0
    public var GetObjectData: Swift.Int32 = 0
    public var GetType: Swift.Int32 = 0
    public var ReferenceEquals: Swift.Int32 = 0
    public var ToString: Swift.Int32 = 0

    public required init() {}

    public init(Data: Swift.Int32, HelpLink: Swift.Int32, InnerException: Swift.Int32, Message: Swift.Int32, Source: Swift.Int32, StackTrace: Swift.Int32, TargetSite: Swift.Int32, HResult: Swift.Int32, Equals: Swift.Int32, GetBaseException: Swift.Int32, GetHashCode: Swift.Int32, GetObjectData: Swift.Int32, GetType: Swift.Int32, ReferenceEquals: Swift.Int32, ToString: Swift.Int32) {
        self.Data = Data
        self.HelpLink = HelpLink
        self.InnerException = InnerException
        self.Message = Message
        self.Source = Source
        self.StackTrace = StackTrace
        self.TargetSite = TargetSite
        self.HResult = HResult
        self.Equals = Equals
        self.GetBaseException = GetBaseException
        self.GetHashCode = GetHashCode
        self.GetObjectData = GetObjectData
        self.GetType = GetType
        self.ReferenceEquals = ReferenceEquals
        self.ToString = ToString
    }

    /// Returns the Slice type ID of this exception.
    ///
    /// - returns: `Swift.String` - the Slice type ID of this exception.
    open override class func ice_staticId() -> Swift.String { "::await::BaseMethods" }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: BaseMethods.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.Data)
        ostr.write(self.HelpLink)
        ostr.write(self.InnerException)
        ostr.write(self.Message)
        ostr.write(self.Source)
        ostr.write(self.StackTrace)
        ostr.write(self.TargetSite)
        ostr.write(self.HResult)
        ostr.write(self.Equals)
        ostr.write(self.GetBaseException)
        ostr.write(self.GetHashCode)
        ostr.write(self.GetObjectData)
        ostr.write(self.GetType)
        ostr.write(self.ReferenceEquals)
        ostr.write(self.ToString)
        ostr.endSlice()
    }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.Data = try istr.read()
        self.HelpLink = try istr.read()
        self.InnerException = try istr.read()
        self.Message = try istr.read()
        self.Source = try istr.read()
        self.StackTrace = try istr.read()
        self.TargetSite = try istr.read()
        self.HResult = try istr.read()
        self.Equals = try istr.read()
        self.GetBaseException = try istr.read()
        self.GetHashCode = try istr.read()
        self.GetObjectData = try istr.read()
        self.GetType = try istr.read()
        self.ReferenceEquals = try istr.read()
        self.ToString = try istr.read()
        try istr.endSlice()
    }
}

/// Traits for Slice interface`implicit`.
public struct implicitTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::await::implicit"]
    public static let staticId = "::await::implicit"
}
public let protected: Swift.Int32 = 0

public let `public`: Swift.Int32 = 0


/// Traits for Slice interface`SystemTest`.
public struct SystemTestTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::await::System::Test"]
    public static let staticId = "::await::System::Test"
}

/// Traits for Slice interface`Test`.
public struct TestTraits: Ice.SliceTraits {
    public static let staticIds = ["::Ice::Object", "::System::Test"]
    public static let staticId = "::System::Test"
}

/// casePrx overview.
///
/// casePrx Methods:
///
///  - `catch`: 
///
///  - catchAsync: 
public protocol casePrx: Ice.ObjectPrx {}

private final class casePrxI: Ice.ObjectPrxI, casePrx {
    public override class func ice_staticId() -> Swift.String {
        return caseTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: casePrx.Protocol) throws -> casePrx {
    try communicator.makeProxyImpl(proxyString) as casePrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `casePrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `casePrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: casePrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> casePrx? {
    return try await casePrxI.checkedCast(prx: prx, facet: facet, context: context) as casePrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `casePrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `casePrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: casePrx.Protocol, facet: Swift.String? = nil) -> casePrx {
    return casePrxI.uncheckedCast(prx: prx, facet: facet) as casePrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `casePrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: casePrx.Protocol) -> Swift.String {
    return caseTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `casePrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `casePrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `casePrx?` - The extracted proxy
    func read(_ type: casePrx.Protocol) throws -> casePrx? {
        return try read() as casePrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `casePrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `casePrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: casePrx.Protocol) throws -> casePrx? {
        return try read(tag: tag) as casePrxI?
    }
}

/// casePrx overview.
///
/// casePrx Methods:
///
///  - `catch`: 
///
///  - catchAsync: 
public extension casePrx {
    ///
    /// - parameter _: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `Swift.Int32`
    func `catch`(_ iceP_checked: Swift.Int32, context: Ice.Context? = nil) async throws -> Swift.Int32 {
        return try await _impl._invoke(operation: "catch",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_checked)
                                       },
                                       read: { istr in
                                           let iceP_continue: Swift.Int32 = try istr.read()
                                           return iceP_continue
                                       },
                                       context: context)
    }
}

/// typeofPrx overview.
///
/// typeofPrx Methods:
///
///  - `default`: 
///
///  - defaultAsync: 
public protocol typeofPrx: Ice.ObjectPrx {}

private final class typeofPrxI: Ice.ObjectPrxI, typeofPrx {
    public override class func ice_staticId() -> Swift.String {
        return typeofTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: typeofPrx.Protocol) throws -> typeofPrx {
    try communicator.makeProxyImpl(proxyString) as typeofPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `typeofPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `typeofPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: typeofPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> typeofPrx? {
    return try await typeofPrxI.checkedCast(prx: prx, facet: facet, context: context) as typeofPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `typeofPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `typeofPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: typeofPrx.Protocol, facet: Swift.String? = nil) -> typeofPrx {
    return typeofPrxI.uncheckedCast(prx: prx, facet: facet) as typeofPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `typeofPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: typeofPrx.Protocol) -> Swift.String {
    return typeofTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `typeofPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `typeofPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `typeofPrx?` - The extracted proxy
    func read(_ type: typeofPrx.Protocol) throws -> typeofPrx? {
        return try read() as typeofPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `typeofPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `typeofPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: typeofPrx.Protocol) throws -> typeofPrx? {
        return try read(tag: tag) as typeofPrxI?
    }
}

/// typeofPrx overview.
///
/// typeofPrx Methods:
///
///  - `default`: 
///
///  - defaultAsync: 
public extension typeofPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func `default`(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "default",
                                       mode: .Normal,
                                       context: context)
    }
}

/// explicitPrx overview.
public protocol explicitPrx: typeofPrx, casePrx {}

private final class explicitPrxI: Ice.ObjectPrxI, explicitPrx {
    public override class func ice_staticId() -> Swift.String {
        return explicitTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: explicitPrx.Protocol) throws -> explicitPrx {
    try communicator.makeProxyImpl(proxyString) as explicitPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `explicitPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `explicitPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: explicitPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> explicitPrx? {
    return try await explicitPrxI.checkedCast(prx: prx, facet: facet, context: context) as explicitPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `explicitPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `explicitPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: explicitPrx.Protocol, facet: Swift.String? = nil) -> explicitPrx {
    return explicitPrxI.uncheckedCast(prx: prx, facet: facet) as explicitPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `explicitPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: explicitPrx.Protocol) -> Swift.String {
    return explicitTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `explicitPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `explicitPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `explicitPrx?` - The extracted proxy
    func read(_ type: explicitPrx.Protocol) throws -> explicitPrx? {
        return try read() as explicitPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `explicitPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `explicitPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: explicitPrx.Protocol) throws -> explicitPrx? {
        return try read(tag: tag) as explicitPrxI?
    }
}

/// explicitPrx overview.
public extension explicitPrx {}

/// optionalParamsPrx overview.
///
/// optionalParamsPrx Methods:
///
///  - `for`: 
///
///  - forAsync: 
///
///  - `continue`: 
///
///  - continueAsync: 
///
///  - `in`: 
///
///  - inAsync: 
///
///  - foreach: 
///
///  - foreachAsync: 
public protocol optionalParamsPrx: Ice.ObjectPrx {}

private final class optionalParamsPrxI: Ice.ObjectPrxI, optionalParamsPrx {
    public override class func ice_staticId() -> Swift.String {
        return optionalParamsTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: optionalParamsPrx.Protocol) throws -> optionalParamsPrx {
    try communicator.makeProxyImpl(proxyString) as optionalParamsPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `optionalParamsPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `optionalParamsPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: optionalParamsPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> optionalParamsPrx? {
    return try await optionalParamsPrxI.checkedCast(prx: prx, facet: facet, context: context) as optionalParamsPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `optionalParamsPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `optionalParamsPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: optionalParamsPrx.Protocol, facet: Swift.String? = nil) -> optionalParamsPrx {
    return optionalParamsPrxI.uncheckedCast(prx: prx, facet: facet) as optionalParamsPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `optionalParamsPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: optionalParamsPrx.Protocol) -> Swift.String {
    return optionalParamsTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `optionalParamsPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `optionalParamsPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `optionalParamsPrx?` - The extracted proxy
    func read(_ type: optionalParamsPrx.Protocol) throws -> optionalParamsPrx? {
        return try read() as optionalParamsPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `optionalParamsPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `optionalParamsPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: optionalParamsPrx.Protocol) throws -> optionalParamsPrx? {
        return try read(tag: tag) as optionalParamsPrxI?
    }
}

/// optionalParamsPrx overview.
///
/// optionalParamsPrx Methods:
///
///  - `for`: 
///
///  - forAsync: 
///
///  - `continue`: 
///
///  - continueAsync: 
///
///  - `in`: 
///
///  - inAsync: 
///
///  - foreach: 
///
///  - foreachAsync: 
public extension optionalParamsPrx {
    ///
    /// - parameter goto: ``var`?`
    ///
    /// - parameter if: `explicitPrx?`
    ///
    /// - parameter internal: ``while`?`
    ///
    /// - parameter namespace: `Swift.String?`
    ///
    /// - parameter null: `explicitPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: ``break`?`
    func `for`(goto iceP_goto: `var`? = nil, if iceP_if: explicitPrx? = nil, internal iceP_internal: `while`? = nil, namespace iceP_namespace: Swift.String? = nil, null iceP_null: explicitPrx? = nil, context: Ice.Context? = nil) async throws -> `break`? {
        return try await _impl._invoke(operation: "for",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(tag: 2, value: iceP_goto)
                                           ostr.write(tag: 3, value: iceP_if)
                                           whileHelper.write(to: ostr, tag: 5, value: iceP_internal)
                                           ostr.write(tag: 7, value: iceP_namespace)
                                           ostr.write(tag: 8, value: iceP_null)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: `break`? = try istr.read(tag: 1)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    ///
    /// - parameter goto: ``var`?`
    ///
    /// - parameter if: `explicitPrx?`
    ///
    /// - parameter internal: ``while`?`
    ///
    /// - parameter namespace: `Swift.String?`
    ///
    /// - parameter null: `explicitPrx?`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: ``break`?`
    func `continue`(goto iceP_goto: `var`? = nil, if iceP_if: explicitPrx? = nil, internal iceP_internal: `while`? = nil, namespace iceP_namespace: Swift.String? = nil, null iceP_null: explicitPrx? = nil, context: Ice.Context? = nil) async throws -> `break`? {
        return try await _impl._invoke(operation: "continue",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(tag: 2, value: iceP_goto)
                                           ostr.write(tag: 3, value: iceP_if)
                                           whileHelper.write(to: ostr, tag: 5, value: iceP_internal)
                                           ostr.write(tag: 7, value: iceP_namespace)
                                           ostr.write(tag: 8, value: iceP_null)
                                       },
                                       read: { istr in
                                           let iceP_returnValue: `break`? = try istr.read(tag: 1)
                                           return iceP_returnValue
                                       },
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: `break`?, goto: `var`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?, null: explicitPrx?)`:
    ///
    ///   - returnValue: ``break`?`
    ///
    ///   - goto: ``var`?`
    ///
    ///   - if: `explicitPrx?`
    ///
    ///   - internal: ``while`?`
    ///
    ///   - namespace: `Swift.String?`
    ///
    ///   - null: `explicitPrx?`
    func `in`(context: Ice.Context? = nil) async throws -> (returnValue: `break`?, goto: `var`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?, null: explicitPrx?) {
        return try await _impl._invoke(operation: "in",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: `break`? = try istr.read(tag: 1)
                                           let iceP_goto: `var`? = try istr.read(tag: 2)
                                           let iceP_if: explicitPrx? = try istr.read(tag: 3, type: explicitPrx.self)
                                           let iceP_internal: `while`? = try whileHelper.read(from: istr, tag: 5)
                                           let iceP_namespace: Swift.String? = try istr.read(tag: 7)
                                           let iceP_null: explicitPrx? = try istr.read(tag: 8, type: explicitPrx.self)
                                           return (iceP_returnValue, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null)
                                       },
                                       context: context)
    }

    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: `(returnValue: `break`?, goto: `var`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?, null: explicitPrx?)`:
    ///
    ///   - returnValue: ``break`?`
    ///
    ///   - goto: ``var`?`
    ///
    ///   - if: `explicitPrx?`
    ///
    ///   - internal: ``while`?`
    ///
    ///   - namespace: `Swift.String?`
    ///
    ///   - null: `explicitPrx?`
    func foreach(context: Ice.Context? = nil) async throws -> (returnValue: `break`?, goto: `var`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?, null: explicitPrx?) {
        return try await _impl._invoke(operation: "foreach",
                                       mode: .Normal,
                                       read: { istr in
                                           let iceP_returnValue: `break`? = try istr.read(tag: 1)
                                           let iceP_goto: `var`? = try istr.read(tag: 2)
                                           let iceP_if: explicitPrx? = try istr.read(tag: 3, type: explicitPrx.self)
                                           let iceP_internal: `while`? = try whileHelper.read(from: istr, tag: 5)
                                           let iceP_namespace: Swift.String? = try istr.read(tag: 7)
                                           let iceP_null: explicitPrx? = try istr.read(tag: 8, type: explicitPrx.self)
                                           return (iceP_returnValue, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null)
                                       },
                                       context: context)
    }
}

/// implicitPrx overview.
///
/// implicitPrx Methods:
///
///  - `in`: 
///
///  - inAsync: 
public protocol implicitPrx: Ice.ObjectPrx {}

private final class implicitPrxI: Ice.ObjectPrxI, implicitPrx {
    public override class func ice_staticId() -> Swift.String {
        return implicitTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: implicitPrx.Protocol) throws -> implicitPrx {
    try communicator.makeProxyImpl(proxyString) as implicitPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `implicitPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `implicitPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: implicitPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> implicitPrx? {
    return try await implicitPrxI.checkedCast(prx: prx, facet: facet, context: context) as implicitPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `implicitPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `implicitPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: implicitPrx.Protocol, facet: Swift.String? = nil) -> implicitPrx {
    return implicitPrxI.uncheckedCast(prx: prx, facet: facet) as implicitPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `implicitPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: implicitPrx.Protocol) -> Swift.String {
    return implicitTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `implicitPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `implicitPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `implicitPrx?` - The extracted proxy
    func read(_ type: implicitPrx.Protocol) throws -> implicitPrx? {
        return try read() as implicitPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `implicitPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `implicitPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: implicitPrx.Protocol) throws -> implicitPrx? {
        return try read(tag: tag) as implicitPrxI?
    }
}

/// implicitPrx overview.
///
/// implicitPrx Methods:
///
///  - `in`: 
///
///  - inAsync: 
public extension implicitPrx {
    ///
    /// - parameter internal: ``break``
    ///
    /// - parameter is: `delete?`
    ///
    /// - parameter lock: `explicitPrx?`
    ///
    /// - parameter namespace: `casePrx?`
    ///
    /// - parameter new: `typeofPrx?`
    ///
    /// - parameter null: `delete?`
    ///
    /// - parameter operator: `explicitPrx?`
    ///
    /// - parameter override: `Swift.Int32`
    ///
    /// - parameter params: `Swift.Int32`
    ///
    /// - parameter private: `Swift.Int32`
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    ///
    /// - returns: ``var``
    func `in`(internal iceP_internal: `break`, is iceP_is: delete?, lock iceP_lock: explicitPrx?, namespace iceP_namespace: casePrx?, new iceP_new: typeofPrx?, null iceP_null: delete?, operator iceP_operator: explicitPrx?, override iceP_override: Swift.Int32, params iceP_params: Swift.Int32, private iceP_private: Swift.Int32, context: Ice.Context? = nil) async throws -> `var` {
        return try await _impl._invoke(operation: "in",
                                       mode: .Normal,
                                       write: { ostr in
                                           ostr.write(iceP_internal)
                                           ostr.write(iceP_is)
                                           ostr.write(iceP_lock)
                                           ostr.write(iceP_namespace)
                                           ostr.write(iceP_new)
                                           ostr.write(iceP_null)
                                           ostr.write(iceP_operator)
                                           ostr.write(iceP_override)
                                           ostr.write(iceP_params)
                                           ostr.write(iceP_private)
                                           ostr.writePendingValues()
                                       },
                                       read: { istr in
                                           let iceP_returnValue: `var` = try istr.read()
                                           return iceP_returnValue
                                       },
                                       userException:{ ex in
                                           do  {
                                               throw ex
                                           } catch let error as fixed {
                                               throw error
                                           } catch let error as foreach {
                                               throw error
                                           } catch is Ice.UserException {}
                                       },
                                       context: context)
    }
}

/// SystemTestPrx overview.
///
/// SystemTestPrx Methods:
///
///  - op: 
///
///  - opAsync: 
public protocol SystemTestPrx: Ice.ObjectPrx {}

private final class SystemTestPrxI: Ice.ObjectPrxI, SystemTestPrx {
    public override class func ice_staticId() -> Swift.String {
        return SystemTestTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: SystemTestPrx.Protocol) throws -> SystemTestPrx {
    try communicator.makeProxyImpl(proxyString) as SystemTestPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `SystemTestPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `SystemTestPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: SystemTestPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> SystemTestPrx? {
    return try await SystemTestPrxI.checkedCast(prx: prx, facet: facet, context: context) as SystemTestPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `SystemTestPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `SystemTestPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: SystemTestPrx.Protocol, facet: Swift.String? = nil) -> SystemTestPrx {
    return SystemTestPrxI.uncheckedCast(prx: prx, facet: facet) as SystemTestPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `SystemTestPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: SystemTestPrx.Protocol) -> Swift.String {
    return SystemTestTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `SystemTestPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `SystemTestPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SystemTestPrx?` - The extracted proxy
    func read(_ type: SystemTestPrx.Protocol) throws -> SystemTestPrx? {
        return try read() as SystemTestPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `SystemTestPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `SystemTestPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: SystemTestPrx.Protocol) throws -> SystemTestPrx? {
        return try read(tag: tag) as SystemTestPrxI?
    }
}

/// SystemTestPrx overview.
///
/// SystemTestPrx Methods:
///
///  - op: 
///
///  - opAsync: 
public extension SystemTestPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func op(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "op",
                                       mode: .Normal,
                                       context: context)
    }
}

/// TestPrx overview.
///
/// TestPrx Methods:
///
///  - op: 
///
///  - opAsync: 
public protocol TestPrx: Ice.ObjectPrx {}

private final class TestPrxI: Ice.ObjectPrxI, TestPrx {
    public override class func ice_staticId() -> Swift.String {
        return TestTraits.staticId
    }
}

/// Makes a new proxy from a communicator and a proxy string.
///
/// - Parameters:
///    - communicator: The communicator of the new proxy.
///    - proxyString: The proxy string to parse.
///    - type: The type of the new proxy.
/// - Throws: `Ice.ParseException` if the proxy string is invalid.
/// - Returns: A new proxy with the requested type.
public func makeProxy(communicator: Ice.Communicator, proxyString: String, type: TestPrx.Protocol) throws -> TestPrx {
    try communicator.makeProxyImpl(proxyString) as TestPrxI
}

/// Casts a proxy to the requested type. This call contacts the server and verifies that the object
/// implements this type.
///
/// It will throw a local exception if a communication error occurs. You can optionally supply a
/// facet name and a context map.
///
/// - parameter prx: `Ice.ObjectPrx` - The proxy to be cast.
///
/// - parameter type: `TestPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet.
///
/// - parameter context: `Ice.Context` The optional context dictionary for the remote invocation.
///
/// - returns: `TestPrx` - A proxy with the requested type or nil if the objet does not
///   support this type.
///
/// - throws: `Ice.LocalException` if a communication error occurs.
public func checkedCast(prx: Ice.ObjectPrx, type: TestPrx.Protocol, facet: Swift.String? = nil, context: Ice.Context? = nil) async throws -> TestPrx? {
    return try await TestPrxI.checkedCast(prx: prx, facet: facet, context: context) as TestPrxI?
}

/// Downcasts the given proxy to this type without contacting the remote server.
///
/// - parameter prx: `Ice.ObjectPrx` The proxy to be cast.
///
/// - parameter type: `TestPrx.Protocol` - The proxy type to cast to.
///
/// - parameter facet: `String` - The optional name of the desired facet
///
/// - returns: `TestPrx` - A proxy with the requested type
public func uncheckedCast(prx: Ice.ObjectPrx, type: TestPrx.Protocol, facet: Swift.String? = nil) -> TestPrx {
    return TestPrxI.uncheckedCast(prx: prx, facet: facet) as TestPrxI
}

/// Returns the Slice type id of the interface associated with this proxy type.
///
/// parameter type: `TestPrx.Protocol` -  The proxy type to retrieve the type id.
///
/// returns: `String` - The type id of the interface associated with this proxy type.
public func ice_staticId(_ type: TestPrx.Protocol) -> Swift.String {
    return TestTraits.staticId
}

/// Extension to `Ice.InputStream` class to support reading proxy of type
/// `TestPrx`.
public extension Ice.InputStream {
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter type: `TestPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestPrx?` - The extracted proxy
    func read(_ type: TestPrx.Protocol) throws -> TestPrx? {
        return try read() as TestPrxI?
    }
    /// Extracts a proxy from the stream. The stream must have been initialized with a communicator.
    ///
    /// - parameter tag: `Int32` - The numeric tag associated with the value.
    ///
    /// - parameter type: `TestPrx.Protocol` - The type of the proxy to be extracted.
    ///
    /// - returns: `TestPrx` - The extracted proxy.
    func read(tag: Swift.Int32, type: TestPrx.Protocol) throws -> TestPrx? {
        return try read(tag: tag) as TestPrxI?
    }
}

/// TestPrx overview.
///
/// TestPrx Methods:
///
///  - op: 
///
///  - opAsync: 
public extension TestPrx {
    ///
    /// - parameter context: `Ice.Context` - Optional request context.
    func op(context: Ice.Context? = nil) async throws -> Swift.Void {
        return try await _impl._invoke(operation: "op",
                                       mode: .Normal,
                                       context: context)
    }
}

/// :nodoc:
public class delete_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return delete.self
    }
}

public extension Ice.ClassResolver {
    @objc static func await_delete() -> Ice.ValueTypeResolver {
        return delete_TypeResolver()
    }
}

open class delete: Ice.Value {
    public var `if`: Swift.Int32 = 0
    public var `else`: casePrx? = nil
    public var export: Swift.Int32 = 0
    public var clone: Swift.String = ""
    public var equals: Swift.String = ""
    public var hashCode: Swift.String = ""
    public var constructor: Swift.String = ""

    public required init() {}

    public init(`if`: Swift.Int32, `else`: casePrx?, export: Swift.Int32, clone: Swift.String, equals: Swift.String, hashCode: Swift.String, constructor: Swift.String) {
        self.`if` = `if`
        self.`else` = `else`
        self.export = export
        self.clone = clone
        self.equals = equals
        self.hashCode = hashCode
        self.constructor = constructor
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::await::delete" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.`if` = try istr.read()
        self.`else` = try istr.read(casePrx.self)
        self.export = try istr.read()
        self.clone = try istr.read()
        self.equals = try istr.read()
        self.hashCode = try istr.read()
        self.constructor = try istr.read()
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: delete.ice_staticId(), compactId: -1, last: true)
        ostr.write(self.`if`)
        ostr.write(self.`else`)
        ostr.write(self.export)
        ostr.write(self.clone)
        ostr.write(self.equals)
        ostr.write(self.hashCode)
        ostr.write(self.constructor)
        ostr.endSlice()
    }
}

/// :nodoc:
public class package_TypeResolver: Ice.ValueTypeResolver {
    public override func type() -> Ice.Value.Type {
        return `package`.self
    }
}

public extension Ice.ClassResolver {
    @objc static func await_package() -> Ice.ValueTypeResolver {
        return package_TypeResolver()
    }
}

open class `package`: Ice.Value {
    public var `for`: `break`? = nil
    public var goto: `var`? = nil
    public var `if`: explicitPrx? = nil
    public var `internal`: `while`? = nil
    public var debugger: Swift.String? = nil
    public var null: explicitPrx? = nil

    public required init() {}

    public init(`for`: `break`?, goto: `var`?, `if`: explicitPrx?, `internal`: `while`?, debugger: Swift.String?, null: explicitPrx?) {
        self.`for` = `for`
        self.goto = goto
        self.`if` = `if`
        self.`internal` = `internal`
        self.debugger = debugger
        self.null = null
    }

    /// Returns the Slice type ID of the interface supported by this object.
    ///
    /// - returns: `String` - The Slice type ID of the interface supported by this object.
    open override class func ice_staticId() -> Swift.String { "::await::package" }

    open override func _iceReadImpl(from istr: Ice.InputStream) throws {
        _ = try istr.startSlice()
        self.`for` = try istr.read(tag: 1)
        self.goto = try istr.read(tag: 2)
        self.`if` = try istr.read(tag: 3, type: explicitPrx.self)
        self.`internal` = try whileHelper.read(from: istr, tag: 5)
        self.debugger = try istr.read(tag: 7)
        self.null = try istr.read(tag: 8, type: explicitPrx.self)
        try istr.endSlice()
    }

    open override func _iceWriteImpl(to ostr: Ice.OutputStream) {
        ostr.startSlice(typeId: `package`.ice_staticId(), compactId: -1, last: true)
        ostr.write(tag: 1, value: self.`for`)
        ostr.write(tag: 2, value: self.goto)
        ostr.write(tag: 3, value: self.`if`)
        whileHelper.write(to: ostr, tag: 5, value: self.`internal`)
        ostr.write(tag: 7, value: self.debugger)
        ostr.write(tag: 8, value: self.null)
        ostr.endSlice()
    }
}


/// Dispatcher for ``case`` servants.
public struct caseDisp: Ice.Dispatcher {
    public let servant: `case`
    private static let defaultObject = Ice.ObjectI<caseTraits>()

    public init(_ servant: `case`) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "catch":
            try await servant._iceD_catch(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? caseDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? caseDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? caseDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? caseDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol `case` {
    ///
    /// - parameter checked: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `Swift.Int32`
    func `catch`(checked: Swift.Int32, current: Ice.Current) async throws -> Swift.Int32
}


/// Dispatcher for `typeof` servants.
public struct typeofDisp: Ice.Dispatcher {
    public let servant: typeof
    private static let defaultObject = Ice.ObjectI<typeofTraits>()

    public init(_ servant: typeof) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "default":
            try await servant._iceD_default(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? typeofDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? typeofDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? typeofDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? typeofDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol typeof {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func `default`(current: Ice.Current) async throws
}


/// Dispatcher for `explicit` servants.
public struct explicitDisp: Ice.Dispatcher {
    public let servant: explicit
    private static let defaultObject = Ice.ObjectI<explicitTraits>()

    public init(_ servant: explicit) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "catch":
            try await servant._iceD_catch(request)
        case "default":
            try await servant._iceD_default(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? explicitDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? explicitDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? explicitDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? explicitDisp.defaultObject)._iceD_ice_ping(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol explicit: typeof, `case` {}


/// Dispatcher for `optionalParams` servants.
public struct optionalParamsDisp: Ice.Dispatcher {
    public let servant: optionalParams
    private static let defaultObject = Ice.ObjectI<optionalParamsTraits>()

    public init(_ servant: optionalParams) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "continue":
            try await servant._iceD_continue(request)
        case "for":
            try await servant._iceD_for(request)
        case "foreach":
            try await servant._iceD_foreach(request)
        case "ice_id":
            try await (servant as? Ice.Object ?? optionalParamsDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? optionalParamsDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? optionalParamsDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? optionalParamsDisp.defaultObject)._iceD_ice_ping(request)
        case "in":
            try await servant._iceD_in(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol optionalParams {
    ///
    /// - parameter goto: ``var`?`
    ///
    /// - parameter if: `explicitPrx?`
    ///
    /// - parameter internal: ``while`?`
    ///
    /// - parameter namespace: `Swift.String?`
    ///
    /// - parameter null: `explicitPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: ``break`?`
    func `for`(goto: `var`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?, null: explicitPrx?, current: Ice.Current) async throws -> `break`?

    ///
    /// - parameter goto: ``var`?`
    ///
    /// - parameter if: `explicitPrx?`
    ///
    /// - parameter internal: ``while`?`
    ///
    /// - parameter namespace: `Swift.String?`
    ///
    /// - parameter null: `explicitPrx?`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: ``break`?`
    func `continue`(goto: `var`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?, null: explicitPrx?, current: Ice.Current) async throws -> `break`?

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: `break`?, goto: `var`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?, null: explicitPrx?)`:
    ///
    ///   - returnValue: ``break`?`
    ///
    ///   - goto: ``var`?`
    ///
    ///   - if: `explicitPrx?`
    ///
    ///   - internal: ``while`?`
    ///
    ///   - namespace: `Swift.String?`
    ///
    ///   - null: `explicitPrx?`
    func `in`(current: Ice.Current) async throws -> (returnValue: `break`?, goto: `var`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?, null: explicitPrx?)

    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: `(returnValue: `break`?, goto: `var`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?, null: explicitPrx?)`:
    ///
    ///   - returnValue: ``break`?`
    ///
    ///   - goto: ``var`?`
    ///
    ///   - if: `explicitPrx?`
    ///
    ///   - internal: ``while`?`
    ///
    ///   - namespace: `Swift.String?`
    ///
    ///   - null: `explicitPrx?`
    func foreach(current: Ice.Current) async throws -> (returnValue: `break`?, goto: `var`?, if: explicitPrx?, internal: `while`?, namespace: Swift.String?, null: explicitPrx?)
}


/// Dispatcher for `implicit` servants.
public struct implicitDisp: Ice.Dispatcher {
    public let servant: implicit
    private static let defaultObject = Ice.ObjectI<implicitTraits>()

    public init(_ servant: implicit) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? implicitDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? implicitDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? implicitDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? implicitDisp.defaultObject)._iceD_ice_ping(request)
        case "in":
            try await servant._iceD_in(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol implicit {
    ///
    /// - parameter internal: ``break``
    ///
    /// - parameter is: `delete?`
    ///
    /// - parameter lock: `explicitPrx?`
    ///
    /// - parameter namespace: `casePrx?`
    ///
    /// - parameter new: `typeofPrx?`
    ///
    /// - parameter null: `delete?`
    ///
    /// - parameter operator: `explicitPrx?`
    ///
    /// - parameter override: `Swift.Int32`
    ///
    /// - parameter params: `Swift.Int32`
    ///
    /// - parameter private: `Swift.Int32`
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    ///
    /// - returns: ``var``
    func `in`(internal: `break`, is: delete?, lock: explicitPrx?, namespace: casePrx?, new: typeofPrx?, null: delete?, operator: explicitPrx?, override: Swift.Int32, params: Swift.Int32, private: Swift.Int32, current: Ice.Current) async throws -> `var`
}


/// Dispatcher for `SystemTest` servants.
public struct SystemTestDisp: Ice.Dispatcher {
    public let servant: SystemTest
    private static let defaultObject = Ice.ObjectI<SystemTestTraits>()

    public init(_ servant: SystemTest) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? SystemTestDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? SystemTestDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? SystemTestDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? SystemTestDisp.defaultObject)._iceD_ice_ping(request)
        case "op":
            try await servant._iceD_op(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol SystemTest {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func op(current: Ice.Current) async throws
}


/// Dispatcher for `Test` servants.
public struct TestDisp: Ice.Dispatcher {
    public let servant: Test
    private static let defaultObject = Ice.ObjectI<TestTraits>()

    public init(_ servant: Test) {
        self.servant = servant
    }

    public func dispatch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        switch request.current.operation {
        case "ice_id":
            try await (servant as? Ice.Object ?? TestDisp.defaultObject)._iceD_ice_id(request)
        case "ice_ids":
            try await (servant as? Ice.Object ?? TestDisp.defaultObject)._iceD_ice_ids(request)
        case "ice_isA":
            try await (servant as? Ice.Object ?? TestDisp.defaultObject)._iceD_ice_isA(request)
        case "ice_ping":
            try await (servant as? Ice.Object ?? TestDisp.defaultObject)._iceD_ice_ping(request)
        case "op":
            try await servant._iceD_op(request)
        default:
            throw Ice.OperationNotExistException()
        }
    }
}

public protocol Test {
    ///
    /// - parameter current: `Ice.Current` - The Current object for the dispatch.
    func op(current: Ice.Current) async throws
}

/// case overview.
///
/// case Methods:
///
///  - `catch`: 
extension `case` {
    public func _iceD_catch(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_checked: Swift.Int32 = try istr.read()
        let result = try await self.`catch`(checked: iceP_checked, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_continue = value
            ostr.write(iceP_continue)
        }
    }
}

/// typeof overview.
///
/// typeof Methods:
///
///  - `default`: 
extension typeof {
    public func _iceD_default(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.`default`(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

/// explicit overview.
extension explicit {}

/// optionalParams overview.
///
/// optionalParams Methods:
///
///  - `for`: 
///
///  - `continue`: 
///
///  - `in`: 
///
///  - foreach: 
extension optionalParams {
    public func _iceD_for(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_goto: `var`? = try istr.read(tag: 2)
        let iceP_if: explicitPrx? = try istr.read(tag: 3, type: explicitPrx.self)
        let iceP_internal: `while`? = try whileHelper.read(from: istr, tag: 5)
        let iceP_namespace: Swift.String? = try istr.read(tag: 7)
        let iceP_null: explicitPrx? = try istr.read(tag: 8, type: explicitPrx.self)
        let result = try await self.`for`(goto: iceP_goto, if: iceP_if, internal: iceP_internal, namespace: iceP_namespace, null: iceP_null, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(tag: 1, value: iceP_returnValue)
        }
    }

    public func _iceD_continue(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_goto: `var`? = try istr.read(tag: 2)
        let iceP_if: explicitPrx? = try istr.read(tag: 3, type: explicitPrx.self)
        let iceP_internal: `while`? = try whileHelper.read(from: istr, tag: 5)
        let iceP_namespace: Swift.String? = try istr.read(tag: 7)
        let iceP_null: explicitPrx? = try istr.read(tag: 8, type: explicitPrx.self)
        let result = try await self.`continue`(goto: iceP_goto, if: iceP_if, internal: iceP_internal, namespace: iceP_namespace, null: iceP_null, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(tag: 1, value: iceP_returnValue)
        }
    }

    public func _iceD_in(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.`in`(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null) = value
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 2, value: iceP_goto)
            ostr.write(tag: 3, value: iceP_if)
            whileHelper.write(to: ostr, tag: 5, value: iceP_internal)
            ostr.write(tag: 7, value: iceP_namespace)
            ostr.write(tag: 8, value: iceP_null)
        }
    }

    public func _iceD_foreach(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        let result = try await self.foreach(current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let (iceP_returnValue, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null) = value
            ostr.write(tag: 1, value: iceP_returnValue)
            ostr.write(tag: 2, value: iceP_goto)
            ostr.write(tag: 3, value: iceP_if)
            whileHelper.write(to: ostr, tag: 5, value: iceP_internal)
            ostr.write(tag: 7, value: iceP_namespace)
            ostr.write(tag: 8, value: iceP_null)
        }
    }
}

/// implicit overview.
///
/// implicit Methods:
///
///  - `in`: 
extension implicit {
    public func _iceD_in(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        let istr = request.inputStream
        _ = try istr.startEncapsulation()
        let iceP_internal: `break` = try istr.read()
        var iceP_is: delete?
        try istr.read(delete.self) { iceP_is = $0 }
        let iceP_lock: explicitPrx? = try istr.read(explicitPrx.self)
        let iceP_namespace: casePrx? = try istr.read(casePrx.self)
        let iceP_new: typeofPrx? = try istr.read(typeofPrx.self)
        var iceP_null: delete?
        try istr.read(delete.self) { iceP_null = $0 }
        let iceP_operator: explicitPrx? = try istr.read(explicitPrx.self)
        let iceP_override: Swift.Int32 = try istr.read()
        let iceP_params: Swift.Int32 = try istr.read()
        let iceP_private: Swift.Int32 = try istr.read()
        try istr.readPendingValues()
        let result = try await self.`in`(internal: iceP_internal, is: iceP_is, lock: iceP_lock, namespace: iceP_namespace, new: iceP_new, null: iceP_null, operator: iceP_operator, override: iceP_override, params: iceP_params, private: iceP_private, current: request.current)
        return request.current.makeOutgoingResponse(result, formatType: nil) { ostr, value in 
            let iceP_returnValue = value
            ostr.write(iceP_returnValue)
        }
    }
}

/// SystemTest overview.
///
/// SystemTest Methods:
///
///  - op: 
extension SystemTest {
    public func _iceD_op(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.op(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}

/// Test overview.
///
/// Test Methods:
///
///  - op: 
extension Test {
    public func _iceD_op(_ request: Ice.IncomingRequest) async throws -> Ice.OutgoingResponse {
        
        _ = try request.inputStream.skipEmptyEncapsulation()
        try await self.op(current: request.current)
        return request.current.makeEmptyOutgoingResponse()
    }
}
