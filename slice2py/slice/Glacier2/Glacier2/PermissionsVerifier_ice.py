# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `PermissionsVerifier.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins
import Glacier2.SSLInfo_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Glacier2
_M_Glacier2 = Ice.openModule('Glacier2')

# Start of module Glacier2
__name__ = 'Glacier2'

if 'PermissionDeniedException' not in _M_Glacier2.__dict__:
    _M_Glacier2.PermissionDeniedException = None
    class PermissionDeniedException(Ice.UserException):
        """
         This exception is raised if a client is denied the ability to create a session with the router.
        Members:
        reason --  The reason why permission was denied.
        """
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Glacier2::PermissionDeniedException'

    _M_Glacier2._t_PermissionDeniedException = IcePy.defineException('::Glacier2::PermissionDeniedException', PermissionDeniedException, (), None, (('reason', (), IcePy._t_string, False, 0),))
    PermissionDeniedException._ice_type = _M_Glacier2._t_PermissionDeniedException

    _M_Glacier2.PermissionDeniedException = PermissionDeniedException
    del PermissionDeniedException

if 'PermissionsVerifierPrx' not in _M_Glacier2.__dict__:
    _M_Glacier2.PermissionsVerifierPrx = None
    class PermissionsVerifierPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new PermissionsVerifierPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def checkPermissions(self, userId, password, context=None):
            """
            Check whether a user has permission to access the router.
            
            Parameters
            ----------
            userId : str
                The user id for which to check permission.
            password : str
                The user's password.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Returns a tuple of (bool, str)
                A tuple containing:
                - bool
                    True if access is granted, or false otherwise.
                - str
                    The reason why access was denied.
            
            Raises
            ------
            PermissionDeniedException
                Raised if the user access is denied. This can be raised in place of returning false with a reason set in the reason out parameter.
            """
            return _M_Glacier2.PermissionsVerifier._op_checkPermissions.invoke(self, ((userId, password), context))

        def checkPermissionsAsync(self, userId, password, context=None):
            """
            Check whether a user has permission to access the router.
            
            Parameters
            ----------
            userId : str
                The user id for which to check permission.
            password : str
                The user's password.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.PermissionsVerifier._op_checkPermissions.invokeAsync(self, ((userId, password), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Glacier2.PermissionsVerifierPrx.ice_checkedCast(proxy, '::Glacier2::PermissionsVerifier', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Glacier2.PermissionsVerifierPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Glacier2::PermissionsVerifier'
    _M_Glacier2._t_PermissionsVerifierPrx = IcePy.defineProxy('::Glacier2::PermissionsVerifier', PermissionsVerifierPrx)

    _M_Glacier2.PermissionsVerifierPrx = PermissionsVerifierPrx
    del PermissionsVerifierPrx

    _M_Glacier2.PermissionsVerifier = None
    class PermissionsVerifier(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Glacier2::PermissionsVerifier', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Glacier2::PermissionsVerifier'

        @staticmethod
        def ice_staticId():
            return '::Glacier2::PermissionsVerifier'

        def checkPermissions(self, userId, password, current=None):
            """
            Check whether a user has permission to access the router.
            
            Parameters
            ----------
            userId : str
                The user id for which to check permission.
            password : str
                The user's password.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            PermissionDeniedException
                Raised if the user access is denied. This can be raised in place of returning false with a reason set in the reason out parameter.
            """
            raise NotImplementedError("servant method 'checkPermissions' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Glacier2._t_PermissionsVerifierDisp)

        __repr__ = __str__

    _M_Glacier2._t_PermissionsVerifierDisp = IcePy.defineClass('::Glacier2::PermissionsVerifier', PermissionsVerifier, (), None, ())
    PermissionsVerifier._ice_type = _M_Glacier2._t_PermissionsVerifierDisp

    PermissionsVerifier._op_checkPermissions = IcePy.Operation('checkPermissions', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (((), IcePy._t_string, False, 0),), ((), IcePy._t_bool, False, 0), (_M_Glacier2._t_PermissionDeniedException,))

    _M_Glacier2.PermissionsVerifier = PermissionsVerifier
    del PermissionsVerifier

if 'SSLPermissionsVerifierPrx' not in _M_Glacier2.__dict__:
    _M_Glacier2.SSLPermissionsVerifierPrx = None
    class SSLPermissionsVerifierPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new SSLPermissionsVerifierPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def authorize(self, info, context=None):
            """
            Check whether a user has permission to access the router.
            
            Parameters
            ----------
            info : Glacier2.SSLInfo
                The SSL information.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Returns a tuple of (bool, str)
                A tuple containing:
                - bool
                    True if access is granted, or false otherwise.
                - str
                    The reason why access was denied.
            
            Raises
            ------
            PermissionDeniedException
                Raised if the user access is denied. This can be raised in place of returning false with a reason set in the reason out parameter.
            """
            return _M_Glacier2.SSLPermissionsVerifier._op_authorize.invoke(self, ((info, ), context))

        def authorizeAsync(self, info, context=None):
            """
            Check whether a user has permission to access the router.
            
            Parameters
            ----------
            info : Glacier2.SSLInfo
                The SSL information.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.SSLPermissionsVerifier._op_authorize.invokeAsync(self, ((info, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Glacier2.SSLPermissionsVerifierPrx.ice_checkedCast(proxy, '::Glacier2::SSLPermissionsVerifier', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Glacier2.SSLPermissionsVerifierPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Glacier2::SSLPermissionsVerifier'
    _M_Glacier2._t_SSLPermissionsVerifierPrx = IcePy.defineProxy('::Glacier2::SSLPermissionsVerifier', SSLPermissionsVerifierPrx)

    _M_Glacier2.SSLPermissionsVerifierPrx = SSLPermissionsVerifierPrx
    del SSLPermissionsVerifierPrx

    _M_Glacier2.SSLPermissionsVerifier = None
    class SSLPermissionsVerifier(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Glacier2::SSLPermissionsVerifier', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Glacier2::SSLPermissionsVerifier'

        @staticmethod
        def ice_staticId():
            return '::Glacier2::SSLPermissionsVerifier'

        def authorize(self, info, current=None):
            """
            Check whether a user has permission to access the router.
            
            Parameters
            ----------
            info : Glacier2.SSLInfo
                The SSL information.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            PermissionDeniedException
                Raised if the user access is denied. This can be raised in place of returning false with a reason set in the reason out parameter.
            """
            raise NotImplementedError("servant method 'authorize' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Glacier2._t_SSLPermissionsVerifierDisp)

        __repr__ = __str__

    _M_Glacier2._t_SSLPermissionsVerifierDisp = IcePy.defineClass('::Glacier2::SSLPermissionsVerifier', SSLPermissionsVerifier, (), None, ())
    SSLPermissionsVerifier._ice_type = _M_Glacier2._t_SSLPermissionsVerifierDisp

    SSLPermissionsVerifier._op_authorize = IcePy.Operation('authorize', Ice.OperationMode.Idempotent, False, None, (), (((), _M_Glacier2._t_SSLInfo, False, 0),), (((), IcePy._t_string, False, 0),), ((), IcePy._t_bool, False, 0), (_M_Glacier2._t_PermissionDeniedException,))

    _M_Glacier2.SSLPermissionsVerifier = SSLPermissionsVerifier
    del SSLPermissionsVerifier

# End of module Glacier2
