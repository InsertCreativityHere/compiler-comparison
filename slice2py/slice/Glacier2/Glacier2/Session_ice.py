# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Session.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins
import Ice.BuiltinSequences_ice
import Ice.Identity_ice
import Glacier2.SSLInfo_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Glacier2
_M_Glacier2 = Ice.openModule('Glacier2')

# Start of module Glacier2
__name__ = 'Glacier2'

if 'CannotCreateSessionException' not in _M_Glacier2.__dict__:
    _M_Glacier2.CannotCreateSessionException = None
    class CannotCreateSessionException(Ice.UserException):
        """
        This exception is raised if an attempt to create a new session failed.
        
        Attributes
        ----------
        reason : str
            The reason why session creation has failed.
        """
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Glacier2::CannotCreateSessionException'

    _M_Glacier2._t_CannotCreateSessionException = IcePy.defineException('::Glacier2::CannotCreateSessionException', CannotCreateSessionException, (), None, (('reason', (), IcePy._t_string, False, 0),))
    CannotCreateSessionException._ice_type = _M_Glacier2._t_CannotCreateSessionException

    _M_Glacier2.CannotCreateSessionException = CannotCreateSessionException
    del CannotCreateSessionException

if 'Session' not in _M_Glacier2.__dict__:
    _M_Glacier2._t_SessionPrx = IcePy.declareProxy('::Glacier2::Session')

if 'SessionPrx' not in _M_Glacier2.__dict__:
    _M_Glacier2.SessionPrx = None
    class SessionPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new SessionPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def destroy(self, context=None):
            """
            Destroy the session. This is called automatically when the router is destroyed.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_Glacier2.Session._op_destroy.invoke(self, ((), context))

        def destroyAsync(self, context=None):
            """
            Destroy the session. This is called automatically when the router is destroyed.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.Session._op_destroy.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Glacier2.SessionPrx.ice_checkedCast(proxy, '::Glacier2::Session', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Glacier2.SessionPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Glacier2::Session'
    _M_Glacier2._t_SessionPrx = IcePy.defineProxy('::Glacier2::Session', SessionPrx)

    _M_Glacier2.SessionPrx = SessionPrx
    del SessionPrx

    _M_Glacier2.Session = None
    class Session(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Glacier2::Session', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Glacier2::Session'

        @staticmethod
        def ice_staticId():
            return '::Glacier2::Session'

        def destroy(self, current=None):
            """
            Destroy the session. This is called automatically when the router is destroyed.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'destroy' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Glacier2._t_SessionDisp)

        __repr__ = __str__

    Session._op_destroy = IcePy.Operation('destroy', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Glacier2.Session = Session
    del Session

if 'StringSet' not in _M_Glacier2.__dict__:
    _M_Glacier2._t_StringSetPrx = IcePy.declareProxy('::Glacier2::StringSet')

if 'StringSetPrx' not in _M_Glacier2.__dict__:
    _M_Glacier2.StringSetPrx = None
    class StringSetPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new StringSetPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def add(self, additions, context=None):
            """
            Add a sequence of strings to this set of constraints. Order is not preserved and duplicates are implicitly
            removed.
            
            Parameters
            ----------
            additions : str[]
                The sequence of strings to be added.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_Glacier2.StringSet._op_add.invoke(self, ((additions, ), context))

        def addAsync(self, additions, context=None):
            """
            Add a sequence of strings to this set of constraints. Order is not preserved and duplicates are implicitly
            removed.
            
            Parameters
            ----------
            additions : str[]
                The sequence of strings to be added.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.StringSet._op_add.invokeAsync(self, ((additions, ), context))

        def remove(self, deletions, context=None):
            """
            Remove a sequence of strings from this set of constraints. No errors are returned if an entry is not found.
            
            Parameters
            ----------
            deletions : str[]
                The sequence of strings to be removed.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_Glacier2.StringSet._op_remove.invoke(self, ((deletions, ), context))

        def removeAsync(self, deletions, context=None):
            """
            Remove a sequence of strings from this set of constraints. No errors are returned if an entry is not found.
            
            Parameters
            ----------
            deletions : str[]
                The sequence of strings to be removed.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.StringSet._op_remove.invokeAsync(self, ((deletions, ), context))

        def get(self, context=None):
            """
            Returns a sequence of strings describing the constraints in this set.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            str[]
                The sequence of strings for this set.
            """
            return _M_Glacier2.StringSet._op_get.invoke(self, ((), context))

        def getAsync(self, context=None):
            """
            Returns a sequence of strings describing the constraints in this set.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.StringSet._op_get.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Glacier2.StringSetPrx.ice_checkedCast(proxy, '::Glacier2::StringSet', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Glacier2.StringSetPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Glacier2::StringSet'
    _M_Glacier2._t_StringSetPrx = IcePy.defineProxy('::Glacier2::StringSet', StringSetPrx)

    _M_Glacier2.StringSetPrx = StringSetPrx
    del StringSetPrx

    _M_Glacier2.StringSet = None
    class StringSet(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Glacier2::StringSet', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Glacier2::StringSet'

        @staticmethod
        def ice_staticId():
            return '::Glacier2::StringSet'

        def add(self, additions, current=None):
            """
            Add a sequence of strings to this set of constraints. Order is not preserved and duplicates are implicitly
            removed.
            
            Parameters
            ----------
            additions : str[]
                The sequence of strings to be added.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'add' not implemented")

        def remove(self, deletions, current=None):
            """
            Remove a sequence of strings from this set of constraints. No errors are returned if an entry is not found.
            
            Parameters
            ----------
            deletions : str[]
                The sequence of strings to be removed.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'remove' not implemented")

        def get(self, current=None):
            """
            Returns a sequence of strings describing the constraints in this set.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'get' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Glacier2._t_StringSetDisp)

        __repr__ = __str__

    StringSet._op_add = IcePy.Operation('add', Ice.OperationMode.Idempotent, False, None, (), (((), _M_Ice._t_StringSeq, False, 0),), (), None, ())
    StringSet._op_remove = IcePy.Operation('remove', Ice.OperationMode.Idempotent, False, None, (), (((), _M_Ice._t_StringSeq, False, 0),), (), None, ())
    StringSet._op_get = IcePy.Operation('get', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Ice._t_StringSeq, False, 0), ())

    _M_Glacier2.StringSet = StringSet
    del StringSet

if 'IdentitySet' not in _M_Glacier2.__dict__:
    _M_Glacier2._t_IdentitySetPrx = IcePy.declareProxy('::Glacier2::IdentitySet')

if 'IdentitySetPrx' not in _M_Glacier2.__dict__:
    _M_Glacier2.IdentitySetPrx = None
    class IdentitySetPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new IdentitySetPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def add(self, additions, context=None):
            """
            Add a sequence of Ice identities to this set of constraints. Order is not preserved and duplicates are
            implicitly removed.
            
            Parameters
            ----------
            additions : Ice.Identity[]
                The sequence of Ice identities to be added.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_Glacier2.IdentitySet._op_add.invoke(self, ((additions, ), context))

        def addAsync(self, additions, context=None):
            """
            Add a sequence of Ice identities to this set of constraints. Order is not preserved and duplicates are
            implicitly removed.
            
            Parameters
            ----------
            additions : Ice.Identity[]
                The sequence of Ice identities to be added.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.IdentitySet._op_add.invokeAsync(self, ((additions, ), context))

        def remove(self, deletions, context=None):
            """
            Remove a sequence of identities from this set of constraints. No errors are returned if an entry is not
            found.
            
            Parameters
            ----------
            deletions : Ice.Identity[]
                The sequence of Ice identities to be removed.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_Glacier2.IdentitySet._op_remove.invoke(self, ((deletions, ), context))

        def removeAsync(self, deletions, context=None):
            """
            Remove a sequence of identities from this set of constraints. No errors are returned if an entry is not
            found.
            
            Parameters
            ----------
            deletions : Ice.Identity[]
                The sequence of Ice identities to be removed.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.IdentitySet._op_remove.invokeAsync(self, ((deletions, ), context))

        def get(self, context=None):
            """
            Returns a sequence of identities describing the constraints in this set.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Identity[]
                The sequence of Ice identities for this set.
            """
            return _M_Glacier2.IdentitySet._op_get.invoke(self, ((), context))

        def getAsync(self, context=None):
            """
            Returns a sequence of identities describing the constraints in this set.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.IdentitySet._op_get.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Glacier2.IdentitySetPrx.ice_checkedCast(proxy, '::Glacier2::IdentitySet', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Glacier2.IdentitySetPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Glacier2::IdentitySet'
    _M_Glacier2._t_IdentitySetPrx = IcePy.defineProxy('::Glacier2::IdentitySet', IdentitySetPrx)

    _M_Glacier2.IdentitySetPrx = IdentitySetPrx
    del IdentitySetPrx

    _M_Glacier2.IdentitySet = None
    class IdentitySet(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Glacier2::IdentitySet', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Glacier2::IdentitySet'

        @staticmethod
        def ice_staticId():
            return '::Glacier2::IdentitySet'

        def add(self, additions, current=None):
            """
            Add a sequence of Ice identities to this set of constraints. Order is not preserved and duplicates are
            implicitly removed.
            
            Parameters
            ----------
            additions : Ice.Identity[]
                The sequence of Ice identities to be added.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'add' not implemented")

        def remove(self, deletions, current=None):
            """
            Remove a sequence of identities from this set of constraints. No errors are returned if an entry is not
            found.
            
            Parameters
            ----------
            deletions : Ice.Identity[]
                The sequence of Ice identities to be removed.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'remove' not implemented")

        def get(self, current=None):
            """
            Returns a sequence of identities describing the constraints in this set.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'get' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Glacier2._t_IdentitySetDisp)

        __repr__ = __str__

    IdentitySet._op_add = IcePy.Operation('add', Ice.OperationMode.Idempotent, False, None, (), (((), _M_Ice._t_IdentitySeq, False, 0),), (), None, ())
    IdentitySet._op_remove = IcePy.Operation('remove', Ice.OperationMode.Idempotent, False, None, (), (((), _M_Ice._t_IdentitySeq, False, 0),), (), None, ())
    IdentitySet._op_get = IcePy.Operation('get', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Ice._t_IdentitySeq, False, 0), ())

    _M_Glacier2.IdentitySet = IdentitySet
    del IdentitySet

if 'SessionControl' not in _M_Glacier2.__dict__:
    _M_Glacier2._t_SessionControlPrx = IcePy.declareProxy('::Glacier2::SessionControl')

if 'SessionControlPrx' not in _M_Glacier2.__dict__:
    _M_Glacier2.SessionControlPrx = None
    class SessionControlPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new SessionControlPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def categories(self, context=None):
            """
            Access the object that manages the allowable categories for object identities for this session.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Glacier2.StringSetPrx or None)
                A StringSet object. The returned proxy is never null.
            """
            return _M_Glacier2.SessionControl._op_categories.invoke(self, ((), context))

        def categoriesAsync(self, context=None):
            """
            Access the object that manages the allowable categories for object identities for this session.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.SessionControl._op_categories.invokeAsync(self, ((), context))

        def adapterIds(self, context=None):
            """
            Access the object that manages the allowable adapter identities for objects for this session.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Glacier2.StringSetPrx or None)
                A StringSet object. The returned proxy is never null.
            """
            return _M_Glacier2.SessionControl._op_adapterIds.invoke(self, ((), context))

        def adapterIdsAsync(self, context=None):
            """
            Access the object that manages the allowable adapter identities for objects for this session.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.SessionControl._op_adapterIds.invokeAsync(self, ((), context))

        def identities(self, context=None):
            """
            Access the object that manages the allowable object identities for this session.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Glacier2.IdentitySetPrx or None)
                An IdentitySet object. The returned proxy is never null.
            """
            return _M_Glacier2.SessionControl._op_identities.invoke(self, ((), context))

        def identitiesAsync(self, context=None):
            """
            Access the object that manages the allowable object identities for this session.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.SessionControl._op_identities.invokeAsync(self, ((), context))

        def getSessionTimeout(self, context=None):
            """
            Get the session timeout.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            int
                The timeout.
            """
            return _M_Glacier2.SessionControl._op_getSessionTimeout.invoke(self, ((), context))

        def getSessionTimeoutAsync(self, context=None):
            """
            Get the session timeout.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.SessionControl._op_getSessionTimeout.invokeAsync(self, ((), context))

        def destroy(self, context=None):
            """
            Destroy the associated session.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_Glacier2.SessionControl._op_destroy.invoke(self, ((), context))

        def destroyAsync(self, context=None):
            """
            Destroy the associated session.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.SessionControl._op_destroy.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Glacier2.SessionControlPrx.ice_checkedCast(proxy, '::Glacier2::SessionControl', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Glacier2.SessionControlPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Glacier2::SessionControl'
    _M_Glacier2._t_SessionControlPrx = IcePy.defineProxy('::Glacier2::SessionControl', SessionControlPrx)

    _M_Glacier2.SessionControlPrx = SessionControlPrx
    del SessionControlPrx

    _M_Glacier2.SessionControl = None
    class SessionControl(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Glacier2::SessionControl', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Glacier2::SessionControl'

        @staticmethod
        def ice_staticId():
            return '::Glacier2::SessionControl'

        def categories(self, current=None):
            """
            Access the object that manages the allowable categories for object identities for this session.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'categories' not implemented")

        def adapterIds(self, current=None):
            """
            Access the object that manages the allowable adapter identities for objects for this session.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'adapterIds' not implemented")

        def identities(self, current=None):
            """
            Access the object that manages the allowable object identities for this session.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'identities' not implemented")

        def getSessionTimeout(self, current=None):
            """
            Get the session timeout.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getSessionTimeout' not implemented")

        def destroy(self, current=None):
            """
            Destroy the associated session.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'destroy' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Glacier2._t_SessionControlDisp)

        __repr__ = __str__

    SessionControl._op_categories = IcePy.Operation('categories', Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Glacier2._t_StringSetPrx, False, 0), ())
    SessionControl._op_adapterIds = IcePy.Operation('adapterIds', Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Glacier2._t_StringSetPrx, False, 0), ())
    SessionControl._op_identities = IcePy.Operation('identities', Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Glacier2._t_IdentitySetPrx, False, 0), ())
    SessionControl._op_getSessionTimeout = IcePy.Operation('getSessionTimeout', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    SessionControl._op_destroy = IcePy.Operation('destroy', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Glacier2.SessionControl = SessionControl
    del SessionControl

if 'SessionManager' not in _M_Glacier2.__dict__:
    _M_Glacier2._t_SessionManagerPrx = IcePy.declareProxy('::Glacier2::SessionManager')

if 'SessionManagerPrx' not in _M_Glacier2.__dict__:
    _M_Glacier2.SessionManagerPrx = None
    class SessionManagerPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new SessionManagerPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def create(self, userId, control, context=None):
            """
            Create a new session. The implementation must return a non-null proxy or raise
            `CannotCreateSessionException` if the session cannot be created.
            
            Parameters
            ----------
            userId : str
                The user id for the session.
            control : (Glacier2.SessionControlPrx or None)
                A proxy to the session control object. The control proxy is null if Glacier2.Server.Endpoints
                are not configured.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Glacier2.SessionPrx or None)
                A proxy to the newly created session.
            
            Raises
            ------
            CannotCreateSessionException
                Raised if the session cannot be created.
            """
            return _M_Glacier2.SessionManager._op_create.invoke(self, ((userId, control), context))

        def createAsync(self, userId, control, context=None):
            """
            Create a new session. The implementation must return a non-null proxy or raise
            `CannotCreateSessionException` if the session cannot be created.
            
            Parameters
            ----------
            userId : str
                The user id for the session.
            control : (Glacier2.SessionControlPrx or None)
                A proxy to the session control object. The control proxy is null if Glacier2.Server.Endpoints
                are not configured.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.SessionManager._op_create.invokeAsync(self, ((userId, control), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Glacier2.SessionManagerPrx.ice_checkedCast(proxy, '::Glacier2::SessionManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Glacier2.SessionManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Glacier2::SessionManager'
    _M_Glacier2._t_SessionManagerPrx = IcePy.defineProxy('::Glacier2::SessionManager', SessionManagerPrx)

    _M_Glacier2.SessionManagerPrx = SessionManagerPrx
    del SessionManagerPrx

    _M_Glacier2.SessionManager = None
    class SessionManager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Glacier2::SessionManager', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Glacier2::SessionManager'

        @staticmethod
        def ice_staticId():
            return '::Glacier2::SessionManager'

        def create(self, userId, control, current=None):
            """
            Create a new session. The implementation must return a non-null proxy or raise
            `CannotCreateSessionException` if the session cannot be created.
            
            Parameters
            ----------
            userId : str
                The user id for the session.
            control : (Glacier2.SessionControlPrx or None)
                A proxy to the session control object. The control proxy is null if Glacier2.Server.Endpoints
                are not configured.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            CannotCreateSessionException
                Raised if the session cannot be created.
            """
            raise NotImplementedError("servant method 'create' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Glacier2._t_SessionManagerDisp)

        __repr__ = __str__

    SessionManager._op_create = IcePy.Operation('create', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Glacier2._t_SessionControlPrx, False, 0)), (), ((), _M_Glacier2._t_SessionPrx, False, 0), (_M_Glacier2._t_CannotCreateSessionException,))

    _M_Glacier2.SessionManager = SessionManager
    del SessionManager

if 'SSLSessionManager' not in _M_Glacier2.__dict__:
    _M_Glacier2._t_SSLSessionManagerPrx = IcePy.declareProxy('::Glacier2::SSLSessionManager')

if 'SSLSessionManagerPrx' not in _M_Glacier2.__dict__:
    _M_Glacier2.SSLSessionManagerPrx = None
    class SSLSessionManagerPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new SSLSessionManagerPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def create(self, info, control, context=None):
            """
            Create a new session.
            
            Parameters
            ----------
            info : Glacier2.SSLInfo
                The SSL info.
            control : (Glacier2.SessionControlPrx or None)
                A proxy to the session control object.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Glacier2.SessionPrx or None)
                A proxy to the newly created session.
            
            Raises
            ------
            CannotCreateSessionException
                Raised if the session cannot be created.
            """
            return _M_Glacier2.SSLSessionManager._op_create.invoke(self, ((info, control), context))

        def createAsync(self, info, control, context=None):
            """
            Create a new session.
            
            Parameters
            ----------
            info : Glacier2.SSLInfo
                The SSL info.
            control : (Glacier2.SessionControlPrx or None)
                A proxy to the session control object.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Glacier2.SSLSessionManager._op_create.invokeAsync(self, ((info, control), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Glacier2.SSLSessionManagerPrx.ice_checkedCast(proxy, '::Glacier2::SSLSessionManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Glacier2.SSLSessionManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Glacier2::SSLSessionManager'
    _M_Glacier2._t_SSLSessionManagerPrx = IcePy.defineProxy('::Glacier2::SSLSessionManager', SSLSessionManagerPrx)

    _M_Glacier2.SSLSessionManagerPrx = SSLSessionManagerPrx
    del SSLSessionManagerPrx

    _M_Glacier2.SSLSessionManager = None
    class SSLSessionManager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Glacier2::SSLSessionManager', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Glacier2::SSLSessionManager'

        @staticmethod
        def ice_staticId():
            return '::Glacier2::SSLSessionManager'

        def create(self, info, control, current=None):
            """
            Create a new session.
            
            Parameters
            ----------
            info : Glacier2.SSLInfo
                The SSL info.
            control : (Glacier2.SessionControlPrx or None)
                A proxy to the session control object.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            CannotCreateSessionException
                Raised if the session cannot be created.
            """
            raise NotImplementedError("servant method 'create' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Glacier2._t_SSLSessionManagerDisp)

        __repr__ = __str__

    SSLSessionManager._op_create = IcePy.Operation('create', Ice.OperationMode.Normal, False, None, (), (((), _M_Glacier2._t_SSLInfo, False, 0), ((), _M_Glacier2._t_SessionControlPrx, False, 0)), (), ((), _M_Glacier2._t_SessionPrx, False, 0), (_M_Glacier2._t_CannotCreateSessionException,))

    _M_Glacier2.SSLSessionManager = SSLSessionManager
    del SSLSessionManager

# End of module Glacier2
