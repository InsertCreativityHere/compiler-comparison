# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `EndpointInfo.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Ice.Endpoint_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module IceBT
_M_IceBT = Ice.openModule('IceBT')
__name__ = 'IceBT'
_M_IceBT.__doc__ = """
 IceBT provides a Bluetooth transport for Ice.
"""

if 'EndpointInfo' not in _M_IceBT.__dict__:
    _M_IceBT.EndpointInfo = Ice.createTempClass()
    class EndpointInfo(_M_Ice.EndpointInfo):
        """
         Provides access to Bluetooth endpoint information.
        Members:
        addr --  The address configured with the endpoint.
        uuid --  The UUID configured with the endpoint.
        """
        def __init__(self, underlying=None, timeout=0, compress=False, addr='', uuid=''):
            if Ice.getType(self) == _M_IceBT.EndpointInfo:
                raise RuntimeError('IceBT.EndpointInfo is an abstract class')
            _M_Ice.EndpointInfo.__init__(self, underlying, timeout, compress)
            self.addr = addr
            self.uuid = uuid

        def __str__(self):
            return IcePy.stringify(self, _M_IceBT._t_EndpointInfo)

        __repr__ = __str__

    _M_IceBT._t_EndpointInfo = IcePy.declareValue('::IceBT::EndpointInfo')

    _M_IceBT._t_EndpointInfo = IcePy.defineValue('::IceBT::EndpointInfo', EndpointInfo, -1, (), False, False, _M_Ice._t_EndpointInfo, (
        ('addr', (), IcePy._t_string, False, 0),
        ('uuid', (), IcePy._t_string, False, 0)
    ))
    EndpointInfo._ice_type = _M_IceBT._t_EndpointInfo

    _M_IceBT.EndpointInfo = EndpointInfo
    del EndpointInfo

# End of module IceBT
