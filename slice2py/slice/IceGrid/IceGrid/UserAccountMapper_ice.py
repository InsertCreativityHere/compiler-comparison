# -*- coding: utf-8 -*-
# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'UserAccountMapper.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice
import IcePy
import builtins as _builtins

# Start of module IceGrid
_M_IceGrid = Ice.openModule('IceGrid')
__name__ = 'IceGrid'

if 'UserAccountNotFoundException' not in _M_IceGrid.__dict__:
    _M_IceGrid.UserAccountNotFoundException = None
    class UserAccountNotFoundException(Ice.UserException):
        """
        This exception is raised if a user account for a given session identifier can't be found.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceGrid::UserAccountNotFoundException'

    _M_IceGrid._t_UserAccountNotFoundException = IcePy.defineException('::IceGrid::UserAccountNotFoundException', UserAccountNotFoundException, (), None, ())
    UserAccountNotFoundException._ice_type = _M_IceGrid._t_UserAccountNotFoundException

    _M_IceGrid.UserAccountNotFoundException = UserAccountNotFoundException
    del UserAccountNotFoundException

if 'UserAccountMapper' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_UserAccountMapperPrx = IcePy.declareProxy('::IceGrid::UserAccountMapper')

if 'UserAccountMapperPrx' not in _M_IceGrid.__dict__:
    _M_IceGrid.UserAccountMapperPrx = None
    class UserAccountMapperPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new UserAccountMapperPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def getUserAccount(self, user, context=None):
            """
            Get the name of the user account for the given user. This is used by IceGrid nodes to figure out the user
            account to use to run servers.
            
            Parameters
            ----------
            user : str
                The value of the server descriptor's user attribute. If this attribute is not
                defined, and the server's activation mode is session, the default value of user
                is the session identifier.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            str
                The user account name.
            
            Raises
            ------
            UserAccountNotFoundException
                Raised if no user account is found for the given user.
            """
            return _M_IceGrid.UserAccountMapper._op_getUserAccount.invoke(self, ((user, ), context))

        def getUserAccountAsync(self, user, context=None):
            """
            Get the name of the user account for the given user. This is used by IceGrid nodes to figure out the user
            account to use to run servers.
            
            Parameters
            ----------
            user : str
                The value of the server descriptor's user attribute. If this attribute is not
                defined, and the server's activation mode is session, the default value of user
                is the session identifier.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.UserAccountMapper._op_getUserAccount.invokeAsync(self, ((user, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceGrid.UserAccountMapperPrx.ice_checkedCast(proxy, '::IceGrid::UserAccountMapper', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceGrid.UserAccountMapperPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceGrid::UserAccountMapper'
    _M_IceGrid._t_UserAccountMapperPrx = IcePy.defineProxy('::IceGrid::UserAccountMapper', UserAccountMapperPrx)

    _M_IceGrid.UserAccountMapperPrx = UserAccountMapperPrx
    del UserAccountMapperPrx

    _M_IceGrid.UserAccountMapper = None
    class UserAccountMapper(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceGrid::UserAccountMapper')

        def ice_id(self, current=None):
            return '::IceGrid::UserAccountMapper'

        @staticmethod
        def ice_staticId():
            return '::IceGrid::UserAccountMapper'

        def getUserAccount(self, user, current=None):
            """
            Get the name of the user account for the given user. This is used by IceGrid nodes to figure out the user
            account to use to run servers.
            
            Parameters
            ----------
            user : str
                The value of the server descriptor's user attribute. If this attribute is not
                defined, and the server's activation mode is session, the default value of user
                is the session identifier.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            UserAccountNotFoundException
                Raised if no user account is found for the given user.
            """
            raise NotImplementedError("servant method 'getUserAccount' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_UserAccountMapperDisp)

        __repr__ = __str__

    UserAccountMapper._op_getUserAccount = IcePy.Operation('getUserAccount', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_IceGrid._t_UserAccountNotFoundException,))

    _M_IceGrid.UserAccountMapper = UserAccountMapper
    del UserAccountMapper

# End of module IceGrid
