# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `Admin.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins
import Ice.Identity_ice
import Ice.BuiltinSequences_ice
import Glacier2.Session_ice
import IceGrid.Exception_ice
import IceGrid.Descriptor_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Glacier2
_M_Glacier2 = Ice.openModule('Glacier2')

# Included module IceGrid
_M_IceGrid = Ice.openModule('IceGrid')

# Start of module IceGrid
__name__ = 'IceGrid'

if 'ServerState' not in _M_IceGrid.__dict__:
    _M_IceGrid.ServerState = None
    class ServerState(Ice.EnumBase):
        """
        An enumeration representing the state of the server.
        Enumerators:
        Inactive -- The server is not running.
        Activating -- The server is being activated and will change to the active state when the registered server object adapters
        are activated or to the activation timed out state if the activation timeout expires.
        ActivationTimedOut -- The activation timed out state indicates that the server activation timed out.
        Active -- The server is running.
        Deactivating -- The server is being deactivated.
        Destroying -- The server is being destroyed.
        Destroyed -- The server is destroyed.
        """

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    ServerState.Inactive = ServerState("Inactive", 0)
    ServerState.Activating = ServerState("Activating", 1)
    ServerState.ActivationTimedOut = ServerState("ActivationTimedOut", 2)
    ServerState.Active = ServerState("Active", 3)
    ServerState.Deactivating = ServerState("Deactivating", 4)
    ServerState.Destroying = ServerState("Destroying", 5)
    ServerState.Destroyed = ServerState("Destroyed", 6)
    ServerState._enumerators = { 0:ServerState.Inactive, 1:ServerState.Activating, 2:ServerState.ActivationTimedOut, 3:ServerState.Active, 4:ServerState.Deactivating, 5:ServerState.Destroying, 6:ServerState.Destroyed }

    _M_IceGrid._t_ServerState = IcePy.defineEnum('::IceGrid::ServerState', ServerState, (), ServerState._enumerators)

    _M_IceGrid.ServerState = ServerState
    del ServerState

if '_t_StringObjectProxyDict' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_StringObjectProxyDict = IcePy.defineDictionary('::IceGrid::StringObjectProxyDict', (), IcePy._t_string, IcePy._t_ObjectPrx)

if 'ObjectInfo' not in _M_IceGrid.__dict__:
    _M_IceGrid.ObjectInfo = None
    class ObjectInfo(object):
        """
        Information about an Ice object.
        
        Attributes
        ----------
        proxy : (Ice.ObjectPrx or None)
            The proxy of the object.
        _type : str
            The type of the object.
        """
        def __init__(self, proxy=None, _type=''):
            self.proxy = proxy
            self._type = _type

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_IceGrid.ObjectInfo):
                return NotImplemented
            else:
                if self.proxy != other.proxy:
                    return False
                if self._type != other._type:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_ObjectInfo)

        __repr__ = __str__

    _M_IceGrid._t_ObjectInfo = IcePy.defineStruct('::IceGrid::ObjectInfo', ObjectInfo, (), (
        ('proxy', (), IcePy._t_ObjectPrx),
        ('_type', (), IcePy._t_string)
    ))

    _M_IceGrid.ObjectInfo = ObjectInfo
    del ObjectInfo

if '_t_ObjectInfoSeq' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_ObjectInfoSeq = IcePy.defineSequence('::IceGrid::ObjectInfoSeq', (), _M_IceGrid._t_ObjectInfo)

if 'AdapterInfo' not in _M_IceGrid.__dict__:
    _M_IceGrid.AdapterInfo = None
    class AdapterInfo(object):
        """
        Information about an adapter registered with the IceGrid registry.
        
        Attributes
        ----------
        id : str
            The id of the adapter.
        proxy : (Ice.ObjectPrx or None)
            A dummy direct proxy that contains the adapter endpoints.
        replicaGroupId : str
            The replica group id of the object adapter, or empty if the adapter doesn't belong to a replica group.
        """
        def __init__(self, id='', proxy=None, replicaGroupId=''):
            self.id = id
            self.proxy = proxy
            self.replicaGroupId = replicaGroupId

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_IceGrid.AdapterInfo):
                return NotImplemented
            else:
                if self.id != other.id:
                    return False
                if self.proxy != other.proxy:
                    return False
                if self.replicaGroupId != other.replicaGroupId:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_AdapterInfo)

        __repr__ = __str__

    _M_IceGrid._t_AdapterInfo = IcePy.defineStruct('::IceGrid::AdapterInfo', AdapterInfo, (), (
        ('id', (), IcePy._t_string),
        ('proxy', (), IcePy._t_ObjectPrx),
        ('replicaGroupId', (), IcePy._t_string)
    ))

    _M_IceGrid.AdapterInfo = AdapterInfo
    del AdapterInfo

if '_t_AdapterInfoSeq' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_AdapterInfoSeq = IcePy.defineSequence('::IceGrid::AdapterInfoSeq', (), _M_IceGrid._t_AdapterInfo)

if 'ServerInfo' not in _M_IceGrid.__dict__:
    _M_IceGrid.ServerInfo = None
    class ServerInfo(object):
        """
        Information about a server managed by an IceGrid node.
        
        Attributes
        ----------
        application : str
            The server application.
        uuid : str
            The application uuid.
        revision : int
            The application revision.
        node : str
            The server node.
        descriptor : IceGrid.ServerDescriptor
            The server descriptor.
        sessionId : str
            The id of the session which allocated the server.
        """
        def __init__(self, application='', uuid='', revision=0, node='', descriptor=None, sessionId=''):
            self.application = application
            self.uuid = uuid
            self.revision = revision
            self.node = node
            self.descriptor = descriptor
            self.sessionId = sessionId

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_IceGrid.ServerInfo):
                return NotImplemented
            else:
                if self.application != other.application:
                    return False
                if self.uuid != other.uuid:
                    return False
                if self.revision != other.revision:
                    return False
                if self.node != other.node:
                    return False
                if self.descriptor != other.descriptor:
                    return False
                if self.sessionId != other.sessionId:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_ServerInfo)

        __repr__ = __str__

    _M_IceGrid._t_ServerInfo = IcePy.defineStruct('::IceGrid::ServerInfo', ServerInfo, (), (
        ('application', (), IcePy._t_string),
        ('uuid', (), IcePy._t_string),
        ('revision', (), IcePy._t_int),
        ('node', (), IcePy._t_string),
        ('descriptor', (), _M_IceGrid._t_ServerDescriptor),
        ('sessionId', (), IcePy._t_string)
    ))

    _M_IceGrid.ServerInfo = ServerInfo
    del ServerInfo

if 'NodeInfo' not in _M_IceGrid.__dict__:
    _M_IceGrid.NodeInfo = None
    class NodeInfo(object):
        """
        Information about an IceGrid node.
        
        Attributes
        ----------
        name : str
            The name of the node.
        os : str
            The operating system name.
        hostname : str
            The network name of the host running this node (as defined in uname()).
        release : str
            The operation system release level (as defined in uname()).
        version : str
            The operation system version (as defined in uname()).
        machine : str
            The machine hardware type (as defined in uname()).
        nProcessors : int
            The number of processor threads on the node. For example, nProcessors is 8 on a computer with a single
            quad-core processor and two HT threads per core.
        dataDir : str
            The path to the node data directory.
        """
        def __init__(self, name='', os='', hostname='', release='', version='', machine='', nProcessors=0, dataDir=''):
            self.name = name
            self.os = os
            self.hostname = hostname
            self.release = release
            self.version = version
            self.machine = machine
            self.nProcessors = nProcessors
            self.dataDir = dataDir

        def __hash__(self):
            _h = 0
            _h = 5 * _h + _builtins.hash(self.name)
            _h = 5 * _h + _builtins.hash(self.os)
            _h = 5 * _h + _builtins.hash(self.hostname)
            _h = 5 * _h + _builtins.hash(self.release)
            _h = 5 * _h + _builtins.hash(self.version)
            _h = 5 * _h + _builtins.hash(self.machine)
            _h = 5 * _h + _builtins.hash(self.nProcessors)
            _h = 5 * _h + _builtins.hash(self.dataDir)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_IceGrid.NodeInfo):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.os is None or other.os is None:
                    if self.os != other.os:
                        return (-1 if self.os is None else 1)
                else:
                    if self.os < other.os:
                        return -1
                    elif self.os > other.os:
                        return 1
                if self.hostname is None or other.hostname is None:
                    if self.hostname != other.hostname:
                        return (-1 if self.hostname is None else 1)
                else:
                    if self.hostname < other.hostname:
                        return -1
                    elif self.hostname > other.hostname:
                        return 1
                if self.release is None or other.release is None:
                    if self.release != other.release:
                        return (-1 if self.release is None else 1)
                else:
                    if self.release < other.release:
                        return -1
                    elif self.release > other.release:
                        return 1
                if self.version is None or other.version is None:
                    if self.version != other.version:
                        return (-1 if self.version is None else 1)
                else:
                    if self.version < other.version:
                        return -1
                    elif self.version > other.version:
                        return 1
                if self.machine is None or other.machine is None:
                    if self.machine != other.machine:
                        return (-1 if self.machine is None else 1)
                else:
                    if self.machine < other.machine:
                        return -1
                    elif self.machine > other.machine:
                        return 1
                if self.nProcessors is None or other.nProcessors is None:
                    if self.nProcessors != other.nProcessors:
                        return (-1 if self.nProcessors is None else 1)
                else:
                    if self.nProcessors < other.nProcessors:
                        return -1
                    elif self.nProcessors > other.nProcessors:
                        return 1
                if self.dataDir is None or other.dataDir is None:
                    if self.dataDir != other.dataDir:
                        return (-1 if self.dataDir is None else 1)
                else:
                    if self.dataDir < other.dataDir:
                        return -1
                    elif self.dataDir > other.dataDir:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_NodeInfo)

        __repr__ = __str__

    _M_IceGrid._t_NodeInfo = IcePy.defineStruct('::IceGrid::NodeInfo', NodeInfo, (), (
        ('name', (), IcePy._t_string),
        ('os', (), IcePy._t_string),
        ('hostname', (), IcePy._t_string),
        ('release', (), IcePy._t_string),
        ('version', (), IcePy._t_string),
        ('machine', (), IcePy._t_string),
        ('nProcessors', (), IcePy._t_int),
        ('dataDir', (), IcePy._t_string)
    ))

    _M_IceGrid.NodeInfo = NodeInfo
    del NodeInfo

if 'RegistryInfo' not in _M_IceGrid.__dict__:
    _M_IceGrid.RegistryInfo = None
    class RegistryInfo(object):
        """
        Information about an IceGrid registry replica.
        
        Attributes
        ----------
        name : str
            The name of the registry.
        hostname : str
            The network name of the host running this registry (as defined in uname()).
        """
        def __init__(self, name='', hostname=''):
            self.name = name
            self.hostname = hostname

        def __hash__(self):
            _h = 0
            _h = 5 * _h + _builtins.hash(self.name)
            _h = 5 * _h + _builtins.hash(self.hostname)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_IceGrid.RegistryInfo):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.hostname is None or other.hostname is None:
                    if self.hostname != other.hostname:
                        return (-1 if self.hostname is None else 1)
                else:
                    if self.hostname < other.hostname:
                        return -1
                    elif self.hostname > other.hostname:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_RegistryInfo)

        __repr__ = __str__

    _M_IceGrid._t_RegistryInfo = IcePy.defineStruct('::IceGrid::RegistryInfo', RegistryInfo, (), (
        ('name', (), IcePy._t_string),
        ('hostname', (), IcePy._t_string)
    ))

    _M_IceGrid.RegistryInfo = RegistryInfo
    del RegistryInfo

if '_t_RegistryInfoSeq' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_RegistryInfoSeq = IcePy.defineSequence('::IceGrid::RegistryInfoSeq', (), _M_IceGrid._t_RegistryInfo)

if 'LoadInfo' not in _M_IceGrid.__dict__:
    _M_IceGrid.LoadInfo = None
    class LoadInfo(object):
        """
        Information about the load of a node.
        
        Attributes
        ----------
        avg1 : float
            The load average over the past minute.
        avg5 : float
            The load average over the past 5 minutes.
        avg15 : float
            The load average over the past 15 minutes.
        """
        def __init__(self, avg1=0.0, avg5=0.0, avg15=0.0):
            self.avg1 = avg1
            self.avg5 = avg5
            self.avg15 = avg15

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_IceGrid.LoadInfo):
                return NotImplemented
            else:
                if self.avg1 != other.avg1:
                    return False
                if self.avg5 != other.avg5:
                    return False
                if self.avg15 != other.avg15:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_LoadInfo)

        __repr__ = __str__

    _M_IceGrid._t_LoadInfo = IcePy.defineStruct('::IceGrid::LoadInfo', LoadInfo, (), (
        ('avg1', (), IcePy._t_float),
        ('avg5', (), IcePy._t_float),
        ('avg15', (), IcePy._t_float)
    ))

    _M_IceGrid.LoadInfo = LoadInfo
    del LoadInfo

if 'ApplicationInfo' not in _M_IceGrid.__dict__:
    _M_IceGrid.ApplicationInfo = None
    class ApplicationInfo(object):
        """
        Information about an IceGrid application.
        
        Attributes
        ----------
        uuid : str
            Unique application identifier.
        createTime : int
            The creation time.
        createUser : str
            The user who created the application.
        updateTime : int
            The update time.
        updateUser : str
            The user who updated the application.
        revision : int
            The application revision number.
        descriptor : IceGrid.ApplicationDescriptor
            The application descriptor
        """
        def __init__(self, uuid='', createTime=0, createUser='', updateTime=0, updateUser='', revision=0, descriptor=None):
            self.uuid = uuid
            self.createTime = createTime
            self.createUser = createUser
            self.updateTime = updateTime
            self.updateUser = updateUser
            self.revision = revision
            self.descriptor = descriptor if descriptor is not None else _M_IceGrid.ApplicationDescriptor()

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_IceGrid.ApplicationInfo):
                return NotImplemented
            else:
                if self.uuid != other.uuid:
                    return False
                if self.createTime != other.createTime:
                    return False
                if self.createUser != other.createUser:
                    return False
                if self.updateTime != other.updateTime:
                    return False
                if self.updateUser != other.updateUser:
                    return False
                if self.revision != other.revision:
                    return False
                if self.descriptor != other.descriptor:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_ApplicationInfo)

        __repr__ = __str__

    _M_IceGrid._t_ApplicationInfo = IcePy.defineStruct('::IceGrid::ApplicationInfo', ApplicationInfo, (), (
        ('uuid', (), IcePy._t_string),
        ('createTime', (), IcePy._t_long),
        ('createUser', (), IcePy._t_string),
        ('updateTime', (), IcePy._t_long),
        ('updateUser', (), IcePy._t_string),
        ('revision', (), IcePy._t_int),
        ('descriptor', (), _M_IceGrid._t_ApplicationDescriptor)
    ))

    _M_IceGrid.ApplicationInfo = ApplicationInfo
    del ApplicationInfo

if '_t_ApplicationInfoSeq' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_ApplicationInfoSeq = IcePy.defineSequence('::IceGrid::ApplicationInfoSeq', (), _M_IceGrid._t_ApplicationInfo)

if 'ApplicationUpdateInfo' not in _M_IceGrid.__dict__:
    _M_IceGrid.ApplicationUpdateInfo = None
    class ApplicationUpdateInfo(object):
        """
        Information about updates to an IceGrid application.
        
        Attributes
        ----------
        updateTime : int
            The update time.
        updateUser : str
            The user who updated the application.
        revision : int
            The application revision number.
        descriptor : IceGrid.ApplicationUpdateDescriptor
            The update descriptor.
        """
        def __init__(self, updateTime=0, updateUser='', revision=0, descriptor=None):
            self.updateTime = updateTime
            self.updateUser = updateUser
            self.revision = revision
            self.descriptor = descriptor if descriptor is not None else _M_IceGrid.ApplicationUpdateDescriptor()

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_IceGrid.ApplicationUpdateInfo):
                return NotImplemented
            else:
                if self.updateTime != other.updateTime:
                    return False
                if self.updateUser != other.updateUser:
                    return False
                if self.revision != other.revision:
                    return False
                if self.descriptor != other.descriptor:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_ApplicationUpdateInfo)

        __repr__ = __str__

    _M_IceGrid._t_ApplicationUpdateInfo = IcePy.defineStruct('::IceGrid::ApplicationUpdateInfo', ApplicationUpdateInfo, (), (
        ('updateTime', (), IcePy._t_long),
        ('updateUser', (), IcePy._t_string),
        ('revision', (), IcePy._t_int),
        ('descriptor', (), _M_IceGrid._t_ApplicationUpdateDescriptor)
    ))

    _M_IceGrid.ApplicationUpdateInfo = ApplicationUpdateInfo
    del ApplicationUpdateInfo

if 'AdminPrx' not in _M_IceGrid.__dict__:
    _M_IceGrid.AdminPrx = None
    class AdminPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new AdminPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def addApplication(self, descriptor, context=None):
            """
            Add an application to IceGrid.
            
            Parameters
            ----------
            descriptor : IceGrid.ApplicationDescriptor
                The application descriptor.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock or if another session is
                holding the lock.
            DeploymentException
                Raised if application deployment failed.
            """
            return _M_IceGrid.Admin._op_addApplication.invoke(self, ((descriptor, ), context))

        def addApplicationAsync(self, descriptor, context=None):
            """
            Add an application to IceGrid.
            
            Parameters
            ----------
            descriptor : IceGrid.ApplicationDescriptor
                The application descriptor.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_addApplication.invokeAsync(self, ((descriptor, ), context))

        def syncApplication(self, descriptor, context=None):
            """
            Synchronize a deployed application with the given application descriptor. This operation will replace the
            current descriptor with this new descriptor.
            
            Parameters
            ----------
            descriptor : IceGrid.ApplicationDescriptor
                The application descriptor.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock or if another session is
                holding the lock.
            ApplicationNotExistException
                Raised if the application doesn't exist.
            DeploymentException
                Raised if application deployment failed.
            """
            return _M_IceGrid.Admin._op_syncApplication.invoke(self, ((descriptor, ), context))

        def syncApplicationAsync(self, descriptor, context=None):
            """
            Synchronize a deployed application with the given application descriptor. This operation will replace the
            current descriptor with this new descriptor.
            
            Parameters
            ----------
            descriptor : IceGrid.ApplicationDescriptor
                The application descriptor.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_syncApplication.invokeAsync(self, ((descriptor, ), context))

        def updateApplication(self, descriptor, context=None):
            """
            Update a deployed application with the given update application descriptor.
            
            Parameters
            ----------
            descriptor : IceGrid.ApplicationUpdateDescriptor
                The update descriptor.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock or if another session is
                holding the lock.
            ApplicationNotExistException
                Raised if the application doesn't exist.
            DeploymentException
                Raised if application deployment failed.
            """
            return _M_IceGrid.Admin._op_updateApplication.invoke(self, ((descriptor, ), context))

        def updateApplicationAsync(self, descriptor, context=None):
            """
            Update a deployed application with the given update application descriptor.
            
            Parameters
            ----------
            descriptor : IceGrid.ApplicationUpdateDescriptor
                The update descriptor.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_updateApplication.invokeAsync(self, ((descriptor, ), context))

        def syncApplicationWithoutRestart(self, descriptor, context=None):
            """
            Synchronize a deployed application with the given application descriptor. This operation will replace the
            current descriptor with this new descriptor only if no server restarts are necessary for the update of the
            application. If some servers need to be restarted, the synchronization is rejected with a
            DeploymentException.
            
            Parameters
            ----------
            descriptor : IceGrid.ApplicationDescriptor
                The application descriptor.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock or if another session is
                holding the lock.
            ApplicationNotExistException
                Raised if the application doesn't exist.
            DeploymentException
                Raised if application deployment failed.
            """
            return _M_IceGrid.Admin._op_syncApplicationWithoutRestart.invoke(self, ((descriptor, ), context))

        def syncApplicationWithoutRestartAsync(self, descriptor, context=None):
            """
            Synchronize a deployed application with the given application descriptor. This operation will replace the
            current descriptor with this new descriptor only if no server restarts are necessary for the update of the
            application. If some servers need to be restarted, the synchronization is rejected with a
            DeploymentException.
            
            Parameters
            ----------
            descriptor : IceGrid.ApplicationDescriptor
                The application descriptor.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_syncApplicationWithoutRestart.invokeAsync(self, ((descriptor, ), context))

        def updateApplicationWithoutRestart(self, descriptor, context=None):
            """
            Update a deployed application with the given update application descriptor only if no server restarts are
            necessary for the update of the application. If some servers need to be restarted, the synchronization is
            rejected with a DeploymentException.
            
            Parameters
            ----------
            descriptor : IceGrid.ApplicationUpdateDescriptor
                The update descriptor.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock or if another session is
                holding the lock.
            ApplicationNotExistException
                Raised if the application doesn't exist.
            DeploymentException
                Raised if application deployment failed.
            """
            return _M_IceGrid.Admin._op_updateApplicationWithoutRestart.invoke(self, ((descriptor, ), context))

        def updateApplicationWithoutRestartAsync(self, descriptor, context=None):
            """
            Update a deployed application with the given update application descriptor only if no server restarts are
            necessary for the update of the application. If some servers need to be restarted, the synchronization is
            rejected with a DeploymentException.
            
            Parameters
            ----------
            descriptor : IceGrid.ApplicationUpdateDescriptor
                The update descriptor.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_updateApplicationWithoutRestart.invokeAsync(self, ((descriptor, ), context))

        def removeApplication(self, name, context=None):
            """
            Remove an application from IceGrid.
            
            Parameters
            ----------
            name : str
                The application name.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock or if another session is
                holding the lock.
            ApplicationNotExistException
                Raised if the application doesn't exist.
            DeploymentException
                Raised if application deployment failed.
            """
            return _M_IceGrid.Admin._op_removeApplication.invoke(self, ((name, ), context))

        def removeApplicationAsync(self, name, context=None):
            """
            Remove an application from IceGrid.
            
            Parameters
            ----------
            name : str
                The application name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_removeApplication.invokeAsync(self, ((name, ), context))

        def instantiateServer(self, application, node, desc, context=None):
            """
            Instantiate a server template from an application on the given node.
            
            Parameters
            ----------
            application : str
                The application name.
            node : str
                The name of the node where the server will be deployed.
            desc : IceGrid.ServerInstanceDescriptor
                The descriptor of the server instance to deploy.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock or if another session is
                holding the lock.
            ApplicationNotExistException
                Raised if the application doesn't exist.
            DeploymentException
                Raised if server instantiation failed.
            """
            return _M_IceGrid.Admin._op_instantiateServer.invoke(self, ((application, node, desc), context))

        def instantiateServerAsync(self, application, node, desc, context=None):
            """
            Instantiate a server template from an application on the given node.
            
            Parameters
            ----------
            application : str
                The application name.
            node : str
                The name of the node where the server will be deployed.
            desc : IceGrid.ServerInstanceDescriptor
                The descriptor of the server instance to deploy.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_instantiateServer.invokeAsync(self, ((application, node, desc), context))

        def getApplicationInfo(self, name, context=None):
            """
            Get an application descriptor.
            
            Parameters
            ----------
            name : str
                The application name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            IceGrid.ApplicationInfo
                The application descriptor.
            
            Raises
            ------
            ApplicationNotExistException
                Raised if the application doesn't exist.
            """
            return _M_IceGrid.Admin._op_getApplicationInfo.invoke(self, ((name, ), context))

        def getApplicationInfoAsync(self, name, context=None):
            """
            Get an application descriptor.
            
            Parameters
            ----------
            name : str
                The application name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getApplicationInfo.invokeAsync(self, ((name, ), context))

        def getDefaultApplicationDescriptor(self, context=None):
            """
            Get the default application descriptor.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            IceGrid.ApplicationDescriptor
                The default application descriptor.
            
            Raises
            ------
            DeploymentException
                Raised if the default application descriptor can't be accessed or is invalid.
            """
            return _M_IceGrid.Admin._op_getDefaultApplicationDescriptor.invoke(self, ((), context))

        def getDefaultApplicationDescriptorAsync(self, context=None):
            """
            Get the default application descriptor.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getDefaultApplicationDescriptor.invokeAsync(self, ((), context))

        def getAllApplicationNames(self, context=None):
            """
            Get all the IceGrid applications currently registered.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            str[]
                The application names.
            """
            return _M_IceGrid.Admin._op_getAllApplicationNames.invoke(self, ((), context))

        def getAllApplicationNamesAsync(self, context=None):
            """
            Get all the IceGrid applications currently registered.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getAllApplicationNames.invokeAsync(self, ((), context))

        def getServerInfo(self, id, context=None):
            """
            Get the server information for the server with the given id.
            
            Parameters
            ----------
            id : str
                The server id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            IceGrid.ServerInfo
                The server information.
            
            Raises
            ------
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            return _M_IceGrid.Admin._op_getServerInfo.invoke(self, ((id, ), context))

        def getServerInfoAsync(self, id, context=None):
            """
            Get the server information for the server with the given id.
            
            Parameters
            ----------
            id : str
                The server id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getServerInfo.invokeAsync(self, ((id, ), context))

        def getServerState(self, id, context=None):
            """
            Get a server's state.
            
            Parameters
            ----------
            id : str
                The server id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            IceGrid.ServerState
                The server state.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            return _M_IceGrid.Admin._op_getServerState.invoke(self, ((id, ), context))

        def getServerStateAsync(self, id, context=None):
            """
            Get a server's state.
            
            Parameters
            ----------
            id : str
                The server id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getServerState.invokeAsync(self, ((id, ), context))

        def getServerPid(self, id, context=None):
            """
            Get a server's system process id. The process id is operating system dependent.
            
            Parameters
            ----------
            id : str
                The server id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            int
                The server's process id.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            return _M_IceGrid.Admin._op_getServerPid.invoke(self, ((id, ), context))

        def getServerPidAsync(self, id, context=None):
            """
            Get a server's system process id. The process id is operating system dependent.
            
            Parameters
            ----------
            id : str
                The server id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getServerPid.invokeAsync(self, ((id, ), context))

        def getServerAdminCategory(self, context=None):
            """
            Get the category for server admin objects. You can manufacture a server admin proxy from the admin proxy by
            changing its identity: use the server ID as name and the returned category as category.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            str
                The category for server admin objects.
            """
            return _M_IceGrid.Admin._op_getServerAdminCategory.invoke(self, ((), context))

        def getServerAdminCategoryAsync(self, context=None):
            """
            Get the category for server admin objects. You can manufacture a server admin proxy from the admin proxy by
            changing its identity: use the server ID as name and the returned category as category.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getServerAdminCategory.invokeAsync(self, ((), context))

        def getServerAdmin(self, id, context=None):
            """
            Get a proxy to the server's admin object.
            
            Parameters
            ----------
            id : str
                The server id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Ice.ObjectPrx or None)
                A proxy to the server's admin object. The returned proxy is never null.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            return _M_IceGrid.Admin._op_getServerAdmin.invoke(self, ((id, ), context))

        def getServerAdminAsync(self, id, context=None):
            """
            Get a proxy to the server's admin object.
            
            Parameters
            ----------
            id : str
                The server id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getServerAdmin.invokeAsync(self, ((id, ), context))

        def enableServer(self, id, enabled, context=None):
            """
            Enable or disable a server. A disabled server can't be started on demand or administratively. The enable
            state of the server is not persistent: if the node is shut down and restarted, the server will be enabled by
            default.
            
            Parameters
            ----------
            id : str
                The server id.
            enabled : bool
                True to enable the server, false to disable it.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            return _M_IceGrid.Admin._op_enableServer.invoke(self, ((id, enabled), context))

        def enableServerAsync(self, id, enabled, context=None):
            """
            Enable or disable a server. A disabled server can't be started on demand or administratively. The enable
            state of the server is not persistent: if the node is shut down and restarted, the server will be enabled by
            default.
            
            Parameters
            ----------
            id : str
                The server id.
            enabled : bool
                True to enable the server, false to disable it.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_enableServer.invokeAsync(self, ((id, enabled), context))

        def isServerEnabled(self, id, context=None):
            """
            Check if the server is enabled or disabled.
            
            Parameters
            ----------
            id : str
                The server id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            bool
                True if the server is enabled.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            return _M_IceGrid.Admin._op_isServerEnabled.invoke(self, ((id, ), context))

        def isServerEnabledAsync(self, id, context=None):
            """
            Check if the server is enabled or disabled.
            
            Parameters
            ----------
            id : str
                The server id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_isServerEnabled.invokeAsync(self, ((id, ), context))

        def startServer(self, id, context=None):
            """
            Start a server and wait for its activation.
            
            Parameters
            ----------
            id : str
                The server id.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            ServerStartException
                Raised if the server couldn't be started.
            """
            return _M_IceGrid.Admin._op_startServer.invoke(self, ((id, ), context))

        def startServerAsync(self, id, context=None):
            """
            Start a server and wait for its activation.
            
            Parameters
            ----------
            id : str
                The server id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_startServer.invokeAsync(self, ((id, ), context))

        def stopServer(self, id, context=None):
            """
            Stop a server.
            
            Parameters
            ----------
            id : str
                The server id.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            ServerStopException
                Raised if the server couldn't be stopped.
            """
            return _M_IceGrid.Admin._op_stopServer.invoke(self, ((id, ), context))

        def stopServerAsync(self, id, context=None):
            """
            Stop a server.
            
            Parameters
            ----------
            id : str
                The server id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_stopServer.invokeAsync(self, ((id, ), context))

        def sendSignal(self, id, signal, context=None):
            """
            Send signal to a server.
            
            Parameters
            ----------
            id : str
                The server id.
            signal : str
                The signal, for example SIGTERM or 15.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            BadSignalException
                Raised if the signal is not recognized by the target server.
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            return _M_IceGrid.Admin._op_sendSignal.invoke(self, ((id, signal), context))

        def sendSignalAsync(self, id, signal, context=None):
            """
            Send signal to a server.
            
            Parameters
            ----------
            id : str
                The server id.
            signal : str
                The signal, for example SIGTERM or 15.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_sendSignal.invokeAsync(self, ((id, signal), context))

        def getAllServerIds(self, context=None):
            """
            Get all the server ids registered with IceGrid.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            str[]
                The server ids.
            """
            return _M_IceGrid.Admin._op_getAllServerIds.invoke(self, ((), context))

        def getAllServerIdsAsync(self, context=None):
            """
            Get all the server ids registered with IceGrid.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getAllServerIds.invokeAsync(self, ((), context))

        def getAdapterInfo(self, id, context=None):
            """
            Get the adapter information for the replica group or adapter with the given id.
            
            Parameters
            ----------
            id : str
                The adapter id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            IceGrid.AdapterInfo[]
                A sequence of adapter information structures. If the given id refers to an adapter, this sequencewill contain only one element. If the given id refers to a replica group, the sequence will contain theadapter information of each member of the replica group.
            
            Raises
            ------
            AdapterNotExistException
                Raised if the adapter or replica group doesn't exist.
            """
            return _M_IceGrid.Admin._op_getAdapterInfo.invoke(self, ((id, ), context))

        def getAdapterInfoAsync(self, id, context=None):
            """
            Get the adapter information for the replica group or adapter with the given id.
            
            Parameters
            ----------
            id : str
                The adapter id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getAdapterInfo.invokeAsync(self, ((id, ), context))

        def removeAdapter(self, id, context=None):
            """
            Remove the adapter with the given id.
            
            Parameters
            ----------
            id : str
                The adapter id.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            AdapterNotExistException
                Raised if the adapter doesn't exist.
            DeploymentException
                Raised if application deployment failed.
            """
            return _M_IceGrid.Admin._op_removeAdapter.invoke(self, ((id, ), context))

        def removeAdapterAsync(self, id, context=None):
            """
            Remove the adapter with the given id.
            
            Parameters
            ----------
            id : str
                The adapter id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_removeAdapter.invokeAsync(self, ((id, ), context))

        def getAllAdapterIds(self, context=None):
            """
            Get all the adapter ids registered with IceGrid.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            str[]
                The adapter ids.
            """
            return _M_IceGrid.Admin._op_getAllAdapterIds.invoke(self, ((), context))

        def getAllAdapterIdsAsync(self, context=None):
            """
            Get all the adapter ids registered with IceGrid.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getAllAdapterIds.invokeAsync(self, ((), context))

        def addObject(self, obj, context=None):
            """
            Add an object to the object registry. IceGrid will get the object type by calling ice_id on the
            given proxy. The object must be reachable.
            
            Parameters
            ----------
            obj : (Ice.ObjectPrx or None)
                The object to be added to the registry.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            DeploymentException
                Raised if the object can't be added. This might be raised if the invocation on
                the proxy to get the object type failed.
            ObjectExistsException
                Raised if the object is already registered.
            """
            return _M_IceGrid.Admin._op_addObject.invoke(self, ((obj, ), context))

        def addObjectAsync(self, obj, context=None):
            """
            Add an object to the object registry. IceGrid will get the object type by calling ice_id on the
            given proxy. The object must be reachable.
            
            Parameters
            ----------
            obj : (Ice.ObjectPrx or None)
                The object to be added to the registry.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_addObject.invokeAsync(self, ((obj, ), context))

        def updateObject(self, obj, context=None):
            """
            Update an object in the object registry. Only objects added with this interface can be updated with this
            operation. Objects added with deployment descriptors should be updated with the deployment mechanism.
            
            Parameters
            ----------
            obj : (Ice.ObjectPrx or None)
                The object to be updated to the registry.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            DeploymentException
                Raised if the object can't be updated. This might happen if the object was added
                with a deployment descriptor.
            ObjectNotRegisteredException
                Raised if the object isn't registered with the registry.
            """
            return _M_IceGrid.Admin._op_updateObject.invoke(self, ((obj, ), context))

        def updateObjectAsync(self, obj, context=None):
            """
            Update an object in the object registry. Only objects added with this interface can be updated with this
            operation. Objects added with deployment descriptors should be updated with the deployment mechanism.
            
            Parameters
            ----------
            obj : (Ice.ObjectPrx or None)
                The object to be updated to the registry.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_updateObject.invokeAsync(self, ((obj, ), context))

        def addObjectWithType(self, obj, _type, context=None):
            """
            Add an object to the object registry and explicitly specify its type.
            
            Parameters
            ----------
            obj : (Ice.ObjectPrx or None)
                The object to be added to the registry. The proxy is never null.
            _type : str
                The object type.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            DeploymentException
                Raised if application deployment failed.
            ObjectExistsException
                Raised if the object is already registered.
            """
            return _M_IceGrid.Admin._op_addObjectWithType.invoke(self, ((obj, _type), context))

        def addObjectWithTypeAsync(self, obj, _type, context=None):
            """
            Add an object to the object registry and explicitly specify its type.
            
            Parameters
            ----------
            obj : (Ice.ObjectPrx or None)
                The object to be added to the registry. The proxy is never null.
            _type : str
                The object type.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_addObjectWithType.invokeAsync(self, ((obj, _type), context))

        def removeObject(self, id, context=None):
            """
            Remove an object from the object registry. Only objects added with this interface can be removed with this
            operation. Objects added with deployment descriptors should be removed with the deployment mechanism.
            
            Parameters
            ----------
            id : Ice.Identity
                The identity of the object to be removed from the registry.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            DeploymentException
                Raised if the object can't be removed. This might happen if the object was added
                with a deployment descriptor.
            ObjectNotRegisteredException
                Raised if the object isn't registered with the registry.
            """
            return _M_IceGrid.Admin._op_removeObject.invoke(self, ((id, ), context))

        def removeObjectAsync(self, id, context=None):
            """
            Remove an object from the object registry. Only objects added with this interface can be removed with this
            operation. Objects added with deployment descriptors should be removed with the deployment mechanism.
            
            Parameters
            ----------
            id : Ice.Identity
                The identity of the object to be removed from the registry.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_removeObject.invokeAsync(self, ((id, ), context))

        def getObjectInfo(self, id, context=None):
            """
            Get the object info for the object with the given identity.
            
            Parameters
            ----------
            id : Ice.Identity
                The identity of the object.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            IceGrid.ObjectInfo
                The object info.
            
            Raises
            ------
            ObjectNotRegisteredException
                Raised if the object isn't registered with the registry.
            """
            return _M_IceGrid.Admin._op_getObjectInfo.invoke(self, ((id, ), context))

        def getObjectInfoAsync(self, id, context=None):
            """
            Get the object info for the object with the given identity.
            
            Parameters
            ----------
            id : Ice.Identity
                The identity of the object.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getObjectInfo.invokeAsync(self, ((id, ), context))

        def getObjectInfosByType(self, _type, context=None):
            """
            Get the object info of all the registered objects with the given type.
            
            Parameters
            ----------
            _type : str
                The type of the object.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            IceGrid.ObjectInfo[]
                The object infos.
            """
            return _M_IceGrid.Admin._op_getObjectInfosByType.invoke(self, ((_type, ), context))

        def getObjectInfosByTypeAsync(self, _type, context=None):
            """
            Get the object info of all the registered objects with the given type.
            
            Parameters
            ----------
            _type : str
                The type of the object.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getObjectInfosByType.invokeAsync(self, ((_type, ), context))

        def getAllObjectInfos(self, expr, context=None):
            """
            Get the object info of all the registered objects whose stringified identities match the given expression.
            
            Parameters
            ----------
            expr : str
                The expression to match against the stringified identities of registered objects. The expression
                may contain a trailing wildcard (*) character.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            IceGrid.ObjectInfo[]
                All the object infos with a stringified identity matching the given expression.
            """
            return _M_IceGrid.Admin._op_getAllObjectInfos.invoke(self, ((expr, ), context))

        def getAllObjectInfosAsync(self, expr, context=None):
            """
            Get the object info of all the registered objects whose stringified identities match the given expression.
            
            Parameters
            ----------
            expr : str
                The expression to match against the stringified identities of registered objects. The expression
                may contain a trailing wildcard (*) character.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getAllObjectInfos.invokeAsync(self, ((expr, ), context))

        def pingNode(self, name, context=None):
            """
            Ping an IceGrid node to see if it is active.
            
            Parameters
            ----------
            name : str
                The node name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            bool
                true if the node ping succeeded, false otherwise.
            
            Raises
            ------
            NodeNotExistException
                Raised if the node doesn't exist.
            """
            return _M_IceGrid.Admin._op_pingNode.invoke(self, ((name, ), context))

        def pingNodeAsync(self, name, context=None):
            """
            Ping an IceGrid node to see if it is active.
            
            Parameters
            ----------
            name : str
                The node name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_pingNode.invokeAsync(self, ((name, ), context))

        def getNodeLoad(self, name, context=None):
            """
            Get the load averages of the node.
            
            Parameters
            ----------
            name : str
                The node name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            IceGrid.LoadInfo
                The node load information.
            
            Raises
            ------
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            return _M_IceGrid.Admin._op_getNodeLoad.invoke(self, ((name, ), context))

        def getNodeLoadAsync(self, name, context=None):
            """
            Get the load averages of the node.
            
            Parameters
            ----------
            name : str
                The node name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getNodeLoad.invokeAsync(self, ((name, ), context))

        def getNodeInfo(self, name, context=None):
            """
            Get the node information for the node with the given name.
            
            Parameters
            ----------
            name : str
                The node name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            IceGrid.NodeInfo
                The node information.
            
            Raises
            ------
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            return _M_IceGrid.Admin._op_getNodeInfo.invoke(self, ((name, ), context))

        def getNodeInfoAsync(self, name, context=None):
            """
            Get the node information for the node with the given name.
            
            Parameters
            ----------
            name : str
                The node name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getNodeInfo.invokeAsync(self, ((name, ), context))

        def getNodeAdmin(self, name, context=None):
            """
            Get a proxy to the IceGrid node's admin object.
            
            Parameters
            ----------
            name : str
                The IceGrid node name
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Ice.ObjectPrx or None)
                A proxy to the IceGrid node's admin object. The returned proxy is never null.
            
            Raises
            ------
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            return _M_IceGrid.Admin._op_getNodeAdmin.invoke(self, ((name, ), context))

        def getNodeAdminAsync(self, name, context=None):
            """
            Get a proxy to the IceGrid node's admin object.
            
            Parameters
            ----------
            name : str
                The IceGrid node name
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getNodeAdmin.invokeAsync(self, ((name, ), context))

        def getNodeProcessorSocketCount(self, name, context=None):
            """
            Get the number of physical processor sockets for the machine running the node with the given name.
            Note that this method will return 1 on operating systems where this can't be automatically determined and
            where the IceGrid.Node.ProcessorSocketCount property for the node is not set.
            
            Parameters
            ----------
            name : str
                The node name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            int
                The number of processor sockets or 1 if the number of sockets can't determined.
            
            Raises
            ------
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            return _M_IceGrid.Admin._op_getNodeProcessorSocketCount.invoke(self, ((name, ), context))

        def getNodeProcessorSocketCountAsync(self, name, context=None):
            """
            Get the number of physical processor sockets for the machine running the node with the given name.
            Note that this method will return 1 on operating systems where this can't be automatically determined and
            where the IceGrid.Node.ProcessorSocketCount property for the node is not set.
            
            Parameters
            ----------
            name : str
                The node name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getNodeProcessorSocketCount.invokeAsync(self, ((name, ), context))

        def shutdownNode(self, name, context=None):
            """
            Shutdown an IceGrid node.
            
            Parameters
            ----------
            name : str
                The node name.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            return _M_IceGrid.Admin._op_shutdownNode.invoke(self, ((name, ), context))

        def shutdownNodeAsync(self, name, context=None):
            """
            Shutdown an IceGrid node.
            
            Parameters
            ----------
            name : str
                The node name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_shutdownNode.invokeAsync(self, ((name, ), context))

        def getNodeHostname(self, name, context=None):
            """
            Get the hostname of this node.
            
            Parameters
            ----------
            name : str
                The node name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            str
                The node hostname.
            
            Raises
            ------
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            return _M_IceGrid.Admin._op_getNodeHostname.invoke(self, ((name, ), context))

        def getNodeHostnameAsync(self, name, context=None):
            """
            Get the hostname of this node.
            
            Parameters
            ----------
            name : str
                The node name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getNodeHostname.invokeAsync(self, ((name, ), context))

        def getAllNodeNames(self, context=None):
            """
            Get all the IceGrid nodes currently registered.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            str[]
                The node names.
            """
            return _M_IceGrid.Admin._op_getAllNodeNames.invoke(self, ((), context))

        def getAllNodeNamesAsync(self, context=None):
            """
            Get all the IceGrid nodes currently registered.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getAllNodeNames.invokeAsync(self, ((), context))

        def pingRegistry(self, name, context=None):
            """
            Ping an IceGrid registry to see if it is active.
            
            Parameters
            ----------
            name : str
                The registry name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            bool
                true if the registry ping succeeded, false otherwise.
            
            Raises
            ------
            RegistryNotExistException
                Raised if the registry doesn't exist.
            """
            return _M_IceGrid.Admin._op_pingRegistry.invoke(self, ((name, ), context))

        def pingRegistryAsync(self, name, context=None):
            """
            Ping an IceGrid registry to see if it is active.
            
            Parameters
            ----------
            name : str
                The registry name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_pingRegistry.invokeAsync(self, ((name, ), context))

        def getRegistryInfo(self, name, context=None):
            """
            Get the registry information for the registry with the given name.
            
            Parameters
            ----------
            name : str
                The registry name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            IceGrid.RegistryInfo
                The registry information.
            
            Raises
            ------
            RegistryNotExistException
                Raised if the registry doesn't exist.
            RegistryUnreachableException
                Raised if the registry could not be reached.
            """
            return _M_IceGrid.Admin._op_getRegistryInfo.invoke(self, ((name, ), context))

        def getRegistryInfoAsync(self, name, context=None):
            """
            Get the registry information for the registry with the given name.
            
            Parameters
            ----------
            name : str
                The registry name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getRegistryInfo.invokeAsync(self, ((name, ), context))

        def getRegistryAdmin(self, name, context=None):
            """
            Get a proxy to the IceGrid registry's admin object.
            
            Parameters
            ----------
            name : str
                The registry name
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Ice.ObjectPrx or None)
                A proxy to the IceGrid registry's admin object. The returned proxy is never null.
            
            Raises
            ------
            RegistryNotExistException
                Raised if the registry doesn't exist.
            """
            return _M_IceGrid.Admin._op_getRegistryAdmin.invoke(self, ((name, ), context))

        def getRegistryAdminAsync(self, name, context=None):
            """
            Get a proxy to the IceGrid registry's admin object.
            
            Parameters
            ----------
            name : str
                The registry name
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getRegistryAdmin.invokeAsync(self, ((name, ), context))

        def shutdownRegistry(self, name, context=None):
            """
            Shutdown an IceGrid registry.
            
            Parameters
            ----------
            name : str
                The registry name.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            RegistryNotExistException
                Raised if the registry doesn't exist.
            RegistryUnreachableException
                Raised if the registry could not be reached.
            """
            return _M_IceGrid.Admin._op_shutdownRegistry.invoke(self, ((name, ), context))

        def shutdownRegistryAsync(self, name, context=None):
            """
            Shutdown an IceGrid registry.
            
            Parameters
            ----------
            name : str
                The registry name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_shutdownRegistry.invokeAsync(self, ((name, ), context))

        def getAllRegistryNames(self, context=None):
            """
            Get all the IceGrid registries currently registered.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            str[]
                The registry names.
            """
            return _M_IceGrid.Admin._op_getAllRegistryNames.invoke(self, ((), context))

        def getAllRegistryNamesAsync(self, context=None):
            """
            Get all the IceGrid registries currently registered.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_getAllRegistryNames.invokeAsync(self, ((), context))

        def shutdown(self, context=None):
            """
            Shut down the IceGrid registry.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.Admin._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            """
            Shut down the IceGrid registry.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Admin._op_shutdown.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceGrid.AdminPrx.ice_checkedCast(proxy, '::IceGrid::Admin', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceGrid.AdminPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceGrid::Admin'
    _M_IceGrid._t_AdminPrx = IcePy.defineProxy('::IceGrid::Admin', AdminPrx)

    _M_IceGrid.AdminPrx = AdminPrx
    del AdminPrx

    _M_IceGrid.Admin = None
    class Admin(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceGrid::Admin')

        def ice_id(self, current=None):
            return '::IceGrid::Admin'

        @staticmethod
        def ice_staticId():
            return '::IceGrid::Admin'

        def addApplication(self, descriptor, current=None):
            """
            Add an application to IceGrid.
            
            Parameters
            ----------
            descriptor : IceGrid.ApplicationDescriptor
                The application descriptor.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock or if another session is
                holding the lock.
            DeploymentException
                Raised if application deployment failed.
            """
            raise NotImplementedError("servant method 'addApplication' not implemented")

        def syncApplication(self, descriptor, current=None):
            """
            Synchronize a deployed application with the given application descriptor. This operation will replace the
            current descriptor with this new descriptor.
            
            Parameters
            ----------
            descriptor : IceGrid.ApplicationDescriptor
                The application descriptor.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock or if another session is
                holding the lock.
            ApplicationNotExistException
                Raised if the application doesn't exist.
            DeploymentException
                Raised if application deployment failed.
            """
            raise NotImplementedError("servant method 'syncApplication' not implemented")

        def updateApplication(self, descriptor, current=None):
            """
            Update a deployed application with the given update application descriptor.
            
            Parameters
            ----------
            descriptor : IceGrid.ApplicationUpdateDescriptor
                The update descriptor.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock or if another session is
                holding the lock.
            ApplicationNotExistException
                Raised if the application doesn't exist.
            DeploymentException
                Raised if application deployment failed.
            """
            raise NotImplementedError("servant method 'updateApplication' not implemented")

        def syncApplicationWithoutRestart(self, descriptor, current=None):
            """
            Synchronize a deployed application with the given application descriptor. This operation will replace the
            current descriptor with this new descriptor only if no server restarts are necessary for the update of the
            application. If some servers need to be restarted, the synchronization is rejected with a
            DeploymentException.
            
            Parameters
            ----------
            descriptor : IceGrid.ApplicationDescriptor
                The application descriptor.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock or if another session is
                holding the lock.
            ApplicationNotExistException
                Raised if the application doesn't exist.
            DeploymentException
                Raised if application deployment failed.
            """
            raise NotImplementedError("servant method 'syncApplicationWithoutRestart' not implemented")

        def updateApplicationWithoutRestart(self, descriptor, current=None):
            """
            Update a deployed application with the given update application descriptor only if no server restarts are
            necessary for the update of the application. If some servers need to be restarted, the synchronization is
            rejected with a DeploymentException.
            
            Parameters
            ----------
            descriptor : IceGrid.ApplicationUpdateDescriptor
                The update descriptor.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock or if another session is
                holding the lock.
            ApplicationNotExistException
                Raised if the application doesn't exist.
            DeploymentException
                Raised if application deployment failed.
            """
            raise NotImplementedError("servant method 'updateApplicationWithoutRestart' not implemented")

        def removeApplication(self, name, current=None):
            """
            Remove an application from IceGrid.
            
            Parameters
            ----------
            name : str
                The application name.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock or if another session is
                holding the lock.
            ApplicationNotExistException
                Raised if the application doesn't exist.
            DeploymentException
                Raised if application deployment failed.
            """
            raise NotImplementedError("servant method 'removeApplication' not implemented")

        def instantiateServer(self, application, node, desc, current=None):
            """
            Instantiate a server template from an application on the given node.
            
            Parameters
            ----------
            application : str
                The application name.
            node : str
                The name of the node where the server will be deployed.
            desc : IceGrid.ServerInstanceDescriptor
                The descriptor of the server instance to deploy.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock or if another session is
                holding the lock.
            ApplicationNotExistException
                Raised if the application doesn't exist.
            DeploymentException
                Raised if server instantiation failed.
            """
            raise NotImplementedError("servant method 'instantiateServer' not implemented")

        def getApplicationInfo(self, name, current=None):
            """
            Get an application descriptor.
            
            Parameters
            ----------
            name : str
                The application name.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            ApplicationNotExistException
                Raised if the application doesn't exist.
            """
            raise NotImplementedError("servant method 'getApplicationInfo' not implemented")

        def getDefaultApplicationDescriptor(self, current=None):
            """
            Get the default application descriptor.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            DeploymentException
                Raised if the default application descriptor can't be accessed or is invalid.
            """
            raise NotImplementedError("servant method 'getDefaultApplicationDescriptor' not implemented")

        def getAllApplicationNames(self, current=None):
            """
            Get all the IceGrid applications currently registered.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getAllApplicationNames' not implemented")

        def getServerInfo(self, id, current=None):
            """
            Get the server information for the server with the given id.
            
            Parameters
            ----------
            id : str
                The server id.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            raise NotImplementedError("servant method 'getServerInfo' not implemented")

        def getServerState(self, id, current=None):
            """
            Get a server's state.
            
            Parameters
            ----------
            id : str
                The server id.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            raise NotImplementedError("servant method 'getServerState' not implemented")

        def getServerPid(self, id, current=None):
            """
            Get a server's system process id. The process id is operating system dependent.
            
            Parameters
            ----------
            id : str
                The server id.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            raise NotImplementedError("servant method 'getServerPid' not implemented")

        def getServerAdminCategory(self, current=None):
            """
            Get the category for server admin objects. You can manufacture a server admin proxy from the admin proxy by
            changing its identity: use the server ID as name and the returned category as category.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getServerAdminCategory' not implemented")

        def getServerAdmin(self, id, current=None):
            """
            Get a proxy to the server's admin object.
            
            Parameters
            ----------
            id : str
                The server id.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            raise NotImplementedError("servant method 'getServerAdmin' not implemented")

        def enableServer(self, id, enabled, current=None):
            """
            Enable or disable a server. A disabled server can't be started on demand or administratively. The enable
            state of the server is not persistent: if the node is shut down and restarted, the server will be enabled by
            default.
            
            Parameters
            ----------
            id : str
                The server id.
            enabled : bool
                True to enable the server, false to disable it.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            raise NotImplementedError("servant method 'enableServer' not implemented")

        def isServerEnabled(self, id, current=None):
            """
            Check if the server is enabled or disabled.
            
            Parameters
            ----------
            id : str
                The server id.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            raise NotImplementedError("servant method 'isServerEnabled' not implemented")

        def startServer(self, id, current=None):
            """
            Start a server and wait for its activation.
            
            Parameters
            ----------
            id : str
                The server id.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            ServerStartException
                Raised if the server couldn't be started.
            """
            raise NotImplementedError("servant method 'startServer' not implemented")

        def stopServer(self, id, current=None):
            """
            Stop a server.
            
            Parameters
            ----------
            id : str
                The server id.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            ServerStopException
                Raised if the server couldn't be stopped.
            """
            raise NotImplementedError("servant method 'stopServer' not implemented")

        def sendSignal(self, id, signal, current=None):
            """
            Send signal to a server.
            
            Parameters
            ----------
            id : str
                The server id.
            signal : str
                The signal, for example SIGTERM or 15.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            BadSignalException
                Raised if the signal is not recognized by the target server.
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            raise NotImplementedError("servant method 'sendSignal' not implemented")

        def getAllServerIds(self, current=None):
            """
            Get all the server ids registered with IceGrid.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getAllServerIds' not implemented")

        def getAdapterInfo(self, id, current=None):
            """
            Get the adapter information for the replica group or adapter with the given id.
            
            Parameters
            ----------
            id : str
                The adapter id.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AdapterNotExistException
                Raised if the adapter or replica group doesn't exist.
            """
            raise NotImplementedError("servant method 'getAdapterInfo' not implemented")

        def removeAdapter(self, id, current=None):
            """
            Remove the adapter with the given id.
            
            Parameters
            ----------
            id : str
                The adapter id.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AdapterNotExistException
                Raised if the adapter doesn't exist.
            DeploymentException
                Raised if application deployment failed.
            """
            raise NotImplementedError("servant method 'removeAdapter' not implemented")

        def getAllAdapterIds(self, current=None):
            """
            Get all the adapter ids registered with IceGrid.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getAllAdapterIds' not implemented")

        def addObject(self, obj, current=None):
            """
            Add an object to the object registry. IceGrid will get the object type by calling ice_id on the
            given proxy. The object must be reachable.
            
            Parameters
            ----------
            obj : (Ice.ObjectPrx or None)
                The object to be added to the registry.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            DeploymentException
                Raised if the object can't be added. This might be raised if the invocation on
                the proxy to get the object type failed.
            ObjectExistsException
                Raised if the object is already registered.
            """
            raise NotImplementedError("servant method 'addObject' not implemented")

        def updateObject(self, obj, current=None):
            """
            Update an object in the object registry. Only objects added with this interface can be updated with this
            operation. Objects added with deployment descriptors should be updated with the deployment mechanism.
            
            Parameters
            ----------
            obj : (Ice.ObjectPrx or None)
                The object to be updated to the registry.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            DeploymentException
                Raised if the object can't be updated. This might happen if the object was added
                with a deployment descriptor.
            ObjectNotRegisteredException
                Raised if the object isn't registered with the registry.
            """
            raise NotImplementedError("servant method 'updateObject' not implemented")

        def addObjectWithType(self, obj, _type, current=None):
            """
            Add an object to the object registry and explicitly specify its type.
            
            Parameters
            ----------
            obj : (Ice.ObjectPrx or None)
                The object to be added to the registry. The proxy is never null.
            _type : str
                The object type.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            DeploymentException
                Raised if application deployment failed.
            ObjectExistsException
                Raised if the object is already registered.
            """
            raise NotImplementedError("servant method 'addObjectWithType' not implemented")

        def removeObject(self, id, current=None):
            """
            Remove an object from the object registry. Only objects added with this interface can be removed with this
            operation. Objects added with deployment descriptors should be removed with the deployment mechanism.
            
            Parameters
            ----------
            id : Ice.Identity
                The identity of the object to be removed from the registry.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            DeploymentException
                Raised if the object can't be removed. This might happen if the object was added
                with a deployment descriptor.
            ObjectNotRegisteredException
                Raised if the object isn't registered with the registry.
            """
            raise NotImplementedError("servant method 'removeObject' not implemented")

        def getObjectInfo(self, id, current=None):
            """
            Get the object info for the object with the given identity.
            
            Parameters
            ----------
            id : Ice.Identity
                The identity of the object.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            ObjectNotRegisteredException
                Raised if the object isn't registered with the registry.
            """
            raise NotImplementedError("servant method 'getObjectInfo' not implemented")

        def getObjectInfosByType(self, _type, current=None):
            """
            Get the object info of all the registered objects with the given type.
            
            Parameters
            ----------
            _type : str
                The type of the object.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getObjectInfosByType' not implemented")

        def getAllObjectInfos(self, expr, current=None):
            """
            Get the object info of all the registered objects whose stringified identities match the given expression.
            
            Parameters
            ----------
            expr : str
                The expression to match against the stringified identities of registered objects. The expression
                may contain a trailing wildcard (*) character.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getAllObjectInfos' not implemented")

        def pingNode(self, name, current=None):
            """
            Ping an IceGrid node to see if it is active.
            
            Parameters
            ----------
            name : str
                The node name.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            NodeNotExistException
                Raised if the node doesn't exist.
            """
            raise NotImplementedError("servant method 'pingNode' not implemented")

        def getNodeLoad(self, name, current=None):
            """
            Get the load averages of the node.
            
            Parameters
            ----------
            name : str
                The node name.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            raise NotImplementedError("servant method 'getNodeLoad' not implemented")

        def getNodeInfo(self, name, current=None):
            """
            Get the node information for the node with the given name.
            
            Parameters
            ----------
            name : str
                The node name.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            raise NotImplementedError("servant method 'getNodeInfo' not implemented")

        def getNodeAdmin(self, name, current=None):
            """
            Get a proxy to the IceGrid node's admin object.
            
            Parameters
            ----------
            name : str
                The IceGrid node name
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            raise NotImplementedError("servant method 'getNodeAdmin' not implemented")

        def getNodeProcessorSocketCount(self, name, current=None):
            """
            Get the number of physical processor sockets for the machine running the node with the given name.
            Note that this method will return 1 on operating systems where this can't be automatically determined and
            where the IceGrid.Node.ProcessorSocketCount property for the node is not set.
            
            Parameters
            ----------
            name : str
                The node name.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            raise NotImplementedError("servant method 'getNodeProcessorSocketCount' not implemented")

        def shutdownNode(self, name, current=None):
            """
            Shutdown an IceGrid node.
            
            Parameters
            ----------
            name : str
                The node name.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            raise NotImplementedError("servant method 'shutdownNode' not implemented")

        def getNodeHostname(self, name, current=None):
            """
            Get the hostname of this node.
            
            Parameters
            ----------
            name : str
                The node name.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            raise NotImplementedError("servant method 'getNodeHostname' not implemented")

        def getAllNodeNames(self, current=None):
            """
            Get all the IceGrid nodes currently registered.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getAllNodeNames' not implemented")

        def pingRegistry(self, name, current=None):
            """
            Ping an IceGrid registry to see if it is active.
            
            Parameters
            ----------
            name : str
                The registry name.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            RegistryNotExistException
                Raised if the registry doesn't exist.
            """
            raise NotImplementedError("servant method 'pingRegistry' not implemented")

        def getRegistryInfo(self, name, current=None):
            """
            Get the registry information for the registry with the given name.
            
            Parameters
            ----------
            name : str
                The registry name.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            RegistryNotExistException
                Raised if the registry doesn't exist.
            RegistryUnreachableException
                Raised if the registry could not be reached.
            """
            raise NotImplementedError("servant method 'getRegistryInfo' not implemented")

        def getRegistryAdmin(self, name, current=None):
            """
            Get a proxy to the IceGrid registry's admin object.
            
            Parameters
            ----------
            name : str
                The registry name
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            RegistryNotExistException
                Raised if the registry doesn't exist.
            """
            raise NotImplementedError("servant method 'getRegistryAdmin' not implemented")

        def shutdownRegistry(self, name, current=None):
            """
            Shutdown an IceGrid registry.
            
            Parameters
            ----------
            name : str
                The registry name.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            RegistryNotExistException
                Raised if the registry doesn't exist.
            RegistryUnreachableException
                Raised if the registry could not be reached.
            """
            raise NotImplementedError("servant method 'shutdownRegistry' not implemented")

        def getAllRegistryNames(self, current=None):
            """
            Get all the IceGrid registries currently registered.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getAllRegistryNames' not implemented")

        def shutdown(self, current=None):
            """
            Shut down the IceGrid registry.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_AdminDisp)

        __repr__ = __str__

    _M_IceGrid._t_AdminDisp = IcePy.defineClass('::IceGrid::Admin', Admin, (), None, ())
    Admin._ice_type = _M_IceGrid._t_AdminDisp

    Admin._op_addApplication = IcePy.Operation('addApplication', Ice.OperationMode.Normal, False, None, (), (((), _M_IceGrid._t_ApplicationDescriptor, False, 0),), (), None, (_M_IceGrid._t_AccessDeniedException, _M_IceGrid._t_DeploymentException))
    Admin._op_syncApplication = IcePy.Operation('syncApplication', Ice.OperationMode.Normal, False, None, (), (((), _M_IceGrid._t_ApplicationDescriptor, False, 0),), (), None, (_M_IceGrid._t_AccessDeniedException, _M_IceGrid._t_DeploymentException, _M_IceGrid._t_ApplicationNotExistException))
    Admin._op_updateApplication = IcePy.Operation('updateApplication', Ice.OperationMode.Normal, False, None, (), (((), _M_IceGrid._t_ApplicationUpdateDescriptor, False, 0),), (), None, (_M_IceGrid._t_AccessDeniedException, _M_IceGrid._t_DeploymentException, _M_IceGrid._t_ApplicationNotExistException))
    Admin._op_syncApplicationWithoutRestart = IcePy.Operation('syncApplicationWithoutRestart', Ice.OperationMode.Normal, False, None, (), (((), _M_IceGrid._t_ApplicationDescriptor, False, 0),), (), None, (_M_IceGrid._t_AccessDeniedException, _M_IceGrid._t_DeploymentException, _M_IceGrid._t_ApplicationNotExistException))
    Admin._op_updateApplicationWithoutRestart = IcePy.Operation('updateApplicationWithoutRestart', Ice.OperationMode.Normal, False, None, (), (((), _M_IceGrid._t_ApplicationUpdateDescriptor, False, 0),), (), None, (_M_IceGrid._t_AccessDeniedException, _M_IceGrid._t_DeploymentException, _M_IceGrid._t_ApplicationNotExistException))
    Admin._op_removeApplication = IcePy.Operation('removeApplication', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_IceGrid._t_AccessDeniedException, _M_IceGrid._t_DeploymentException, _M_IceGrid._t_ApplicationNotExistException))
    Admin._op_instantiateServer = IcePy.Operation('instantiateServer', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_IceGrid._t_ServerInstanceDescriptor, False, 0)), (), None, (_M_IceGrid._t_AccessDeniedException, _M_IceGrid._t_ApplicationNotExistException, _M_IceGrid._t_DeploymentException))
    Admin._op_getApplicationInfo = IcePy.Operation('getApplicationInfo', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceGrid._t_ApplicationInfo, False, 0), (_M_IceGrid._t_ApplicationNotExistException,))
    Admin._op_getDefaultApplicationDescriptor = IcePy.Operation('getDefaultApplicationDescriptor', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_IceGrid._t_ApplicationDescriptor, False, 0), (_M_IceGrid._t_DeploymentException,))
    Admin._op_getAllApplicationNames = IcePy.Operation('getAllApplicationNames', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Ice._t_StringSeq, False, 0), ())
    Admin._op_getServerInfo = IcePy.Operation('getServerInfo', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceGrid._t_ServerInfo, False, 0), (_M_IceGrid._t_ServerNotExistException,))
    Admin._op_getServerState = IcePy.Operation('getServerState', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceGrid._t_ServerState, False, 0), (_M_IceGrid._t_ServerNotExistException, _M_IceGrid._t_NodeUnreachableException, _M_IceGrid._t_DeploymentException))
    Admin._op_getServerPid = IcePy.Operation('getServerPid', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), (_M_IceGrid._t_ServerNotExistException, _M_IceGrid._t_NodeUnreachableException, _M_IceGrid._t_DeploymentException))
    Admin._op_getServerAdminCategory = IcePy.Operation('getServerAdminCategory', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Admin._op_getServerAdmin = IcePy.Operation('getServerAdmin', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_ObjectPrx, False, 0), (_M_IceGrid._t_ServerNotExistException, _M_IceGrid._t_NodeUnreachableException, _M_IceGrid._t_DeploymentException))
    Admin._op_enableServer = IcePy.Operation('enableServer', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0)), (), None, (_M_IceGrid._t_ServerNotExistException, _M_IceGrid._t_NodeUnreachableException, _M_IceGrid._t_DeploymentException))
    Admin._op_isServerEnabled = IcePy.Operation('isServerEnabled', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_IceGrid._t_ServerNotExistException, _M_IceGrid._t_NodeUnreachableException, _M_IceGrid._t_DeploymentException))
    Admin._op_startServer = IcePy.Operation('startServer', Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_IceGrid._t_ServerNotExistException, _M_IceGrid._t_ServerStartException, _M_IceGrid._t_NodeUnreachableException, _M_IceGrid._t_DeploymentException))
    Admin._op_stopServer = IcePy.Operation('stopServer', Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_IceGrid._t_ServerNotExistException, _M_IceGrid._t_ServerStopException, _M_IceGrid._t_NodeUnreachableException, _M_IceGrid._t_DeploymentException))
    Admin._op_sendSignal = IcePy.Operation('sendSignal', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_IceGrid._t_ServerNotExistException, _M_IceGrid._t_NodeUnreachableException, _M_IceGrid._t_DeploymentException, _M_IceGrid._t_BadSignalException))
    Admin._op_getAllServerIds = IcePy.Operation('getAllServerIds', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Ice._t_StringSeq, False, 0), ())
    Admin._op_getAdapterInfo = IcePy.Operation('getAdapterInfo', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceGrid._t_AdapterInfoSeq, False, 0), (_M_IceGrid._t_AdapterNotExistException,))
    Admin._op_removeAdapter = IcePy.Operation('removeAdapter', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_IceGrid._t_AdapterNotExistException, _M_IceGrid._t_DeploymentException))
    Admin._op_getAllAdapterIds = IcePy.Operation('getAllAdapterIds', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Ice._t_StringSeq, False, 0), ())
    Admin._op_addObject = IcePy.Operation('addObject', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_ObjectPrx, False, 0),), (), None, (_M_IceGrid._t_ObjectExistsException, _M_IceGrid._t_DeploymentException))
    Admin._op_updateObject = IcePy.Operation('updateObject', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_ObjectPrx, False, 0),), (), None, (_M_IceGrid._t_ObjectNotRegisteredException, _M_IceGrid._t_DeploymentException))
    Admin._op_addObjectWithType = IcePy.Operation('addObjectWithType', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_ObjectPrx, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_IceGrid._t_ObjectExistsException, _M_IceGrid._t_DeploymentException))
    Admin._op_removeObject = IcePy.Operation('removeObject', Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), None, (_M_IceGrid._t_ObjectNotRegisteredException, _M_IceGrid._t_DeploymentException))
    Admin._op_getObjectInfo = IcePy.Operation('getObjectInfo', Ice.OperationMode.Idempotent, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), ((), _M_IceGrid._t_ObjectInfo, False, 0), (_M_IceGrid._t_ObjectNotRegisteredException,))
    Admin._op_getObjectInfosByType = IcePy.Operation('getObjectInfosByType', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceGrid._t_ObjectInfoSeq, False, 0), ())
    Admin._op_getAllObjectInfos = IcePy.Operation('getAllObjectInfos', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceGrid._t_ObjectInfoSeq, False, 0), ())
    Admin._op_pingNode = IcePy.Operation('pingNode', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_IceGrid._t_NodeNotExistException,))
    Admin._op_getNodeLoad = IcePy.Operation('getNodeLoad', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceGrid._t_LoadInfo, False, 0), (_M_IceGrid._t_NodeNotExistException, _M_IceGrid._t_NodeUnreachableException))
    Admin._op_getNodeInfo = IcePy.Operation('getNodeInfo', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceGrid._t_NodeInfo, False, 0), (_M_IceGrid._t_NodeNotExistException, _M_IceGrid._t_NodeUnreachableException))
    Admin._op_getNodeAdmin = IcePy.Operation('getNodeAdmin', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_ObjectPrx, False, 0), (_M_IceGrid._t_NodeNotExistException, _M_IceGrid._t_NodeUnreachableException))
    Admin._op_getNodeProcessorSocketCount = IcePy.Operation('getNodeProcessorSocketCount', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), (_M_IceGrid._t_NodeNotExistException, _M_IceGrid._t_NodeUnreachableException))
    Admin._op_shutdownNode = IcePy.Operation('shutdownNode', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_IceGrid._t_NodeNotExistException, _M_IceGrid._t_NodeUnreachableException))
    Admin._op_getNodeHostname = IcePy.Operation('getNodeHostname', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_IceGrid._t_NodeNotExistException, _M_IceGrid._t_NodeUnreachableException))
    Admin._op_getAllNodeNames = IcePy.Operation('getAllNodeNames', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Ice._t_StringSeq, False, 0), ())
    Admin._op_pingRegistry = IcePy.Operation('pingRegistry', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_IceGrid._t_RegistryNotExistException,))
    Admin._op_getRegistryInfo = IcePy.Operation('getRegistryInfo', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceGrid._t_RegistryInfo, False, 0), (_M_IceGrid._t_RegistryNotExistException, _M_IceGrid._t_RegistryUnreachableException))
    Admin._op_getRegistryAdmin = IcePy.Operation('getRegistryAdmin', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_ObjectPrx, False, 0), (_M_IceGrid._t_RegistryNotExistException,))
    Admin._op_shutdownRegistry = IcePy.Operation('shutdownRegistry', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_IceGrid._t_RegistryNotExistException, _M_IceGrid._t_RegistryUnreachableException))
    Admin._op_getAllRegistryNames = IcePy.Operation('getAllRegistryNames', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Ice._t_StringSeq, False, 0), ())
    Admin._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_IceGrid.Admin = Admin
    del Admin

if 'FileIteratorPrx' not in _M_IceGrid.__dict__:
    _M_IceGrid.FileIteratorPrx = None
    class FileIteratorPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new FileIteratorPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def read(self, size, context=None):
            """
            Read lines from the log file.
            
            Parameters
            ----------
            size : int
                Specifies the maximum number of bytes to be received. The server will ensure that the returned
                message doesn't exceed the given size.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Returns a tuple of (bool, str[])
                A tuple containing:
                - bool
                    True if EOF is encountered.
                - str[]
                    The lines read from the file. If there was nothing to read from the file since the last call to
                    read, an empty sequence is returned. The last line of the sequence is always incomplete (and therefore no
                    '\n' should be added when writing the last line to the to the output device).
            
            Raises
            ------
            FileNotAvailableException
                Raised if there was a problem to read lines from the file.
            """
            return _M_IceGrid.FileIterator._op_read.invoke(self, ((size, ), context))

        def readAsync(self, size, context=None):
            """
            Read lines from the log file.
            
            Parameters
            ----------
            size : int
                Specifies the maximum number of bytes to be received. The server will ensure that the returned
                message doesn't exceed the given size.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.FileIterator._op_read.invokeAsync(self, ((size, ), context))

        def destroy(self, context=None):
            """
            Destroy the iterator.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.FileIterator._op_destroy.invoke(self, ((), context))

        def destroyAsync(self, context=None):
            """
            Destroy the iterator.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.FileIterator._op_destroy.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceGrid.FileIteratorPrx.ice_checkedCast(proxy, '::IceGrid::FileIterator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceGrid.FileIteratorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceGrid::FileIterator'
    _M_IceGrid._t_FileIteratorPrx = IcePy.defineProxy('::IceGrid::FileIterator', FileIteratorPrx)

    _M_IceGrid.FileIteratorPrx = FileIteratorPrx
    del FileIteratorPrx

    _M_IceGrid.FileIterator = None
    class FileIterator(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceGrid::FileIterator')

        def ice_id(self, current=None):
            return '::IceGrid::FileIterator'

        @staticmethod
        def ice_staticId():
            return '::IceGrid::FileIterator'

        def read(self, size, current=None):
            """
            Read lines from the log file.
            
            Parameters
            ----------
            size : int
                Specifies the maximum number of bytes to be received. The server will ensure that the returned
                message doesn't exceed the given size.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            FileNotAvailableException
                Raised if there was a problem to read lines from the file.
            """
            raise NotImplementedError("servant method 'read' not implemented")

        def destroy(self, current=None):
            """
            Destroy the iterator.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'destroy' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_FileIteratorDisp)

        __repr__ = __str__

    _M_IceGrid._t_FileIteratorDisp = IcePy.defineClass('::IceGrid::FileIterator', FileIterator, (), None, ())
    FileIterator._ice_type = _M_IceGrid._t_FileIteratorDisp

    FileIterator._op_read = IcePy.Operation('read', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), _M_Ice._t_StringSeq, False, 0),), ((), IcePy._t_bool, False, 0), (_M_IceGrid._t_FileNotAvailableException,))
    FileIterator._op_destroy = IcePy.Operation('destroy', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_IceGrid.FileIterator = FileIterator
    del FileIterator

if 'ServerDynamicInfo' not in _M_IceGrid.__dict__:
    _M_IceGrid.ServerDynamicInfo = None
    class ServerDynamicInfo(object):
        """
        Dynamic information about the state of a server.
        
        Attributes
        ----------
        id : str
            The id of the server.
        state : IceGrid.ServerState
            The state of the server.
        pid : int
            The process id of the server.
        enabled : bool
            Indicates whether the server is enabled.
        """
        def __init__(self, id='', state=_M_IceGrid.ServerState.Inactive, pid=0, enabled=False):
            self.id = id
            self.state = state
            self.pid = pid
            self.enabled = enabled

        def __hash__(self):
            _h = 0
            _h = 5 * _h + _builtins.hash(self.id)
            _h = 5 * _h + _builtins.hash(self.state)
            _h = 5 * _h + _builtins.hash(self.pid)
            _h = 5 * _h + _builtins.hash(self.enabled)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_IceGrid.ServerDynamicInfo):
                return NotImplemented
            else:
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.state is None or other.state is None:
                    if self.state != other.state:
                        return (-1 if self.state is None else 1)
                else:
                    if self.state < other.state:
                        return -1
                    elif self.state > other.state:
                        return 1
                if self.pid is None or other.pid is None:
                    if self.pid != other.pid:
                        return (-1 if self.pid is None else 1)
                else:
                    if self.pid < other.pid:
                        return -1
                    elif self.pid > other.pid:
                        return 1
                if self.enabled is None or other.enabled is None:
                    if self.enabled != other.enabled:
                        return (-1 if self.enabled is None else 1)
                else:
                    if self.enabled < other.enabled:
                        return -1
                    elif self.enabled > other.enabled:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_ServerDynamicInfo)

        __repr__ = __str__

    _M_IceGrid._t_ServerDynamicInfo = IcePy.defineStruct('::IceGrid::ServerDynamicInfo', ServerDynamicInfo, (), (
        ('id', (), IcePy._t_string),
        ('state', (), _M_IceGrid._t_ServerState),
        ('pid', (), IcePy._t_int),
        ('enabled', (), IcePy._t_bool)
    ))

    _M_IceGrid.ServerDynamicInfo = ServerDynamicInfo
    del ServerDynamicInfo

if '_t_ServerDynamicInfoSeq' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_ServerDynamicInfoSeq = IcePy.defineSequence('::IceGrid::ServerDynamicInfoSeq', (), _M_IceGrid._t_ServerDynamicInfo)

if 'AdapterDynamicInfo' not in _M_IceGrid.__dict__:
    _M_IceGrid.AdapterDynamicInfo = None
    class AdapterDynamicInfo(object):
        """
        Dynamic information about the state of an adapter.
        
        Attributes
        ----------
        id : str
            The id of the adapter.
        proxy : (Ice.ObjectPrx or None)
            The direct proxy containing the adapter endpoints. This proxy is never null.
        """
        def __init__(self, id='', proxy=None):
            self.id = id
            self.proxy = proxy

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_IceGrid.AdapterDynamicInfo):
                return NotImplemented
            else:
                if self.id != other.id:
                    return False
                if self.proxy != other.proxy:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_AdapterDynamicInfo)

        __repr__ = __str__

    _M_IceGrid._t_AdapterDynamicInfo = IcePy.defineStruct('::IceGrid::AdapterDynamicInfo', AdapterDynamicInfo, (), (
        ('id', (), IcePy._t_string),
        ('proxy', (), IcePy._t_ObjectPrx)
    ))

    _M_IceGrid.AdapterDynamicInfo = AdapterDynamicInfo
    del AdapterDynamicInfo

if '_t_AdapterDynamicInfoSeq' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_AdapterDynamicInfoSeq = IcePy.defineSequence('::IceGrid::AdapterDynamicInfoSeq', (), _M_IceGrid._t_AdapterDynamicInfo)

if 'NodeDynamicInfo' not in _M_IceGrid.__dict__:
    _M_IceGrid.NodeDynamicInfo = None
    class NodeDynamicInfo(object):
        """
        Dynamic information about the state of a node.
        
        Attributes
        ----------
        info : IceGrid.NodeInfo
            Some static information about the node.
        servers : IceGrid.ServerDynamicInfo[]
            The dynamic information of the servers deployed on this node.
        adapters : IceGrid.AdapterDynamicInfo[]
            The dynamic information of the adapters deployed on this node.
        """
        def __init__(self, info=None, servers=None, adapters=None):
            self.info = info if info is not None else _M_IceGrid.NodeInfo()
            self.servers = servers
            self.adapters = adapters

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_IceGrid.NodeDynamicInfo):
                return NotImplemented
            else:
                if self.info != other.info:
                    return False
                if self.servers != other.servers:
                    return False
                if self.adapters != other.adapters:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_NodeDynamicInfo)

        __repr__ = __str__

    _M_IceGrid._t_NodeDynamicInfo = IcePy.defineStruct('::IceGrid::NodeDynamicInfo', NodeDynamicInfo, (), (
        ('info', (), _M_IceGrid._t_NodeInfo),
        ('servers', (), _M_IceGrid._t_ServerDynamicInfoSeq),
        ('adapters', (), _M_IceGrid._t_AdapterDynamicInfoSeq)
    ))

    _M_IceGrid.NodeDynamicInfo = NodeDynamicInfo
    del NodeDynamicInfo

if 'RegistryObserverPrx' not in _M_IceGrid.__dict__:
    _M_IceGrid.RegistryObserverPrx = None
    class RegistryObserverPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new RegistryObserverPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def registryInit(self, registries, context=None):
            """
            The registryInit operation is called after registration of an observer to indicate the state of
            the registries.
            
            Parameters
            ----------
            registries : IceGrid.RegistryInfo[]
                The current state of the registries.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.RegistryObserver._op_registryInit.invoke(self, ((registries, ), context))

        def registryInitAsync(self, registries, context=None):
            """
            The registryInit operation is called after registration of an observer to indicate the state of
            the registries.
            
            Parameters
            ----------
            registries : IceGrid.RegistryInfo[]
                The current state of the registries.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.RegistryObserver._op_registryInit.invokeAsync(self, ((registries, ), context))

        def registryUp(self, registryReplica, context=None):
            """
            The registryUp operation is called to notify an observer that a registry replica came up.
            
            Parameters
            ----------
            registryReplica : IceGrid.RegistryInfo
                The registry state.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.RegistryObserver._op_registryUp.invoke(self, ((registryReplica, ), context))

        def registryUpAsync(self, registryReplica, context=None):
            """
            The registryUp operation is called to notify an observer that a registry replica came up.
            
            Parameters
            ----------
            registryReplica : IceGrid.RegistryInfo
                The registry state.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.RegistryObserver._op_registryUp.invokeAsync(self, ((registryReplica, ), context))

        def registryDown(self, name, context=None):
            """
            The registryDown operation is called to notify an observer that a registry replica went down.
            
            Parameters
            ----------
            name : str
                The registry name.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.RegistryObserver._op_registryDown.invoke(self, ((name, ), context))

        def registryDownAsync(self, name, context=None):
            """
            The registryDown operation is called to notify an observer that a registry replica went down.
            
            Parameters
            ----------
            name : str
                The registry name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.RegistryObserver._op_registryDown.invokeAsync(self, ((name, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceGrid.RegistryObserverPrx.ice_checkedCast(proxy, '::IceGrid::RegistryObserver', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceGrid.RegistryObserverPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceGrid::RegistryObserver'
    _M_IceGrid._t_RegistryObserverPrx = IcePy.defineProxy('::IceGrid::RegistryObserver', RegistryObserverPrx)

    _M_IceGrid.RegistryObserverPrx = RegistryObserverPrx
    del RegistryObserverPrx

    _M_IceGrid.RegistryObserver = None
    class RegistryObserver(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceGrid::RegistryObserver')

        def ice_id(self, current=None):
            return '::IceGrid::RegistryObserver'

        @staticmethod
        def ice_staticId():
            return '::IceGrid::RegistryObserver'

        def registryInit(self, registries, current=None):
            """
            The registryInit operation is called after registration of an observer to indicate the state of
            the registries.
            
            Parameters
            ----------
            registries : IceGrid.RegistryInfo[]
                The current state of the registries.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'registryInit' not implemented")

        def registryUp(self, registryReplica, current=None):
            """
            The registryUp operation is called to notify an observer that a registry replica came up.
            
            Parameters
            ----------
            registryReplica : IceGrid.RegistryInfo
                The registry state.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'registryUp' not implemented")

        def registryDown(self, name, current=None):
            """
            The registryDown operation is called to notify an observer that a registry replica went down.
            
            Parameters
            ----------
            name : str
                The registry name.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'registryDown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_RegistryObserverDisp)

        __repr__ = __str__

    _M_IceGrid._t_RegistryObserverDisp = IcePy.defineClass('::IceGrid::RegistryObserver', RegistryObserver, (), None, ())
    RegistryObserver._ice_type = _M_IceGrid._t_RegistryObserverDisp

    RegistryObserver._op_registryInit = IcePy.Operation('registryInit', Ice.OperationMode.Normal, False, None, (), (((), _M_IceGrid._t_RegistryInfoSeq, False, 0),), (), None, ())
    RegistryObserver._op_registryUp = IcePy.Operation('registryUp', Ice.OperationMode.Normal, False, None, (), (((), _M_IceGrid._t_RegistryInfo, False, 0),), (), None, ())
    RegistryObserver._op_registryDown = IcePy.Operation('registryDown', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_IceGrid.RegistryObserver = RegistryObserver
    del RegistryObserver

if '_t_NodeDynamicInfoSeq' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_NodeDynamicInfoSeq = IcePy.defineSequence('::IceGrid::NodeDynamicInfoSeq', (), _M_IceGrid._t_NodeDynamicInfo)

if 'NodeObserverPrx' not in _M_IceGrid.__dict__:
    _M_IceGrid.NodeObserverPrx = None
    class NodeObserverPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new NodeObserverPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def nodeInit(self, nodes, context=None):
            """
            The nodeInit operation indicates the current state of nodes. It is called after the
            registration of an observer.
            
            Parameters
            ----------
            nodes : IceGrid.NodeDynamicInfo[]
                The current state of the nodes.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.NodeObserver._op_nodeInit.invoke(self, ((nodes, ), context))

        def nodeInitAsync(self, nodes, context=None):
            """
            The nodeInit operation indicates the current state of nodes. It is called after the
            registration of an observer.
            
            Parameters
            ----------
            nodes : IceGrid.NodeDynamicInfo[]
                The current state of the nodes.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.NodeObserver._op_nodeInit.invokeAsync(self, ((nodes, ), context))

        def nodeUp(self, node, context=None):
            """
            The nodeUp operation is called to notify an observer that a node came up.
            
            Parameters
            ----------
            node : IceGrid.NodeDynamicInfo
                The node state.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.NodeObserver._op_nodeUp.invoke(self, ((node, ), context))

        def nodeUpAsync(self, node, context=None):
            """
            The nodeUp operation is called to notify an observer that a node came up.
            
            Parameters
            ----------
            node : IceGrid.NodeDynamicInfo
                The node state.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.NodeObserver._op_nodeUp.invokeAsync(self, ((node, ), context))

        def nodeDown(self, name, context=None):
            """
            The nodeDown operation is called to notify an observer that a node went down.
            
            Parameters
            ----------
            name : str
                The node name.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.NodeObserver._op_nodeDown.invoke(self, ((name, ), context))

        def nodeDownAsync(self, name, context=None):
            """
            The nodeDown operation is called to notify an observer that a node went down.
            
            Parameters
            ----------
            name : str
                The node name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.NodeObserver._op_nodeDown.invokeAsync(self, ((name, ), context))

        def updateServer(self, node, updatedInfo, context=None):
            """
            The updateServer operation is called to notify an observer that the state of a server changed.
            
            Parameters
            ----------
            node : str
                The node hosting the server.
            updatedInfo : IceGrid.ServerDynamicInfo
                The new server state.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.NodeObserver._op_updateServer.invoke(self, ((node, updatedInfo), context))

        def updateServerAsync(self, node, updatedInfo, context=None):
            """
            The updateServer operation is called to notify an observer that the state of a server changed.
            
            Parameters
            ----------
            node : str
                The node hosting the server.
            updatedInfo : IceGrid.ServerDynamicInfo
                The new server state.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.NodeObserver._op_updateServer.invokeAsync(self, ((node, updatedInfo), context))

        def updateAdapter(self, node, updatedInfo, context=None):
            """
            The updateAdapter operation is called to notify an observer that the state of an adapter
            changed.
            
            Parameters
            ----------
            node : str
                The node hosting the adapter.
            updatedInfo : IceGrid.AdapterDynamicInfo
                The new adapter state.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.NodeObserver._op_updateAdapter.invoke(self, ((node, updatedInfo), context))

        def updateAdapterAsync(self, node, updatedInfo, context=None):
            """
            The updateAdapter operation is called to notify an observer that the state of an adapter
            changed.
            
            Parameters
            ----------
            node : str
                The node hosting the adapter.
            updatedInfo : IceGrid.AdapterDynamicInfo
                The new adapter state.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.NodeObserver._op_updateAdapter.invokeAsync(self, ((node, updatedInfo), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceGrid.NodeObserverPrx.ice_checkedCast(proxy, '::IceGrid::NodeObserver', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceGrid.NodeObserverPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceGrid::NodeObserver'
    _M_IceGrid._t_NodeObserverPrx = IcePy.defineProxy('::IceGrid::NodeObserver', NodeObserverPrx)

    _M_IceGrid.NodeObserverPrx = NodeObserverPrx
    del NodeObserverPrx

    _M_IceGrid.NodeObserver = None
    class NodeObserver(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceGrid::NodeObserver')

        def ice_id(self, current=None):
            return '::IceGrid::NodeObserver'

        @staticmethod
        def ice_staticId():
            return '::IceGrid::NodeObserver'

        def nodeInit(self, nodes, current=None):
            """
            The nodeInit operation indicates the current state of nodes. It is called after the
            registration of an observer.
            
            Parameters
            ----------
            nodes : IceGrid.NodeDynamicInfo[]
                The current state of the nodes.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'nodeInit' not implemented")

        def nodeUp(self, node, current=None):
            """
            The nodeUp operation is called to notify an observer that a node came up.
            
            Parameters
            ----------
            node : IceGrid.NodeDynamicInfo
                The node state.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'nodeUp' not implemented")

        def nodeDown(self, name, current=None):
            """
            The nodeDown operation is called to notify an observer that a node went down.
            
            Parameters
            ----------
            name : str
                The node name.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'nodeDown' not implemented")

        def updateServer(self, node, updatedInfo, current=None):
            """
            The updateServer operation is called to notify an observer that the state of a server changed.
            
            Parameters
            ----------
            node : str
                The node hosting the server.
            updatedInfo : IceGrid.ServerDynamicInfo
                The new server state.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'updateServer' not implemented")

        def updateAdapter(self, node, updatedInfo, current=None):
            """
            The updateAdapter operation is called to notify an observer that the state of an adapter
            changed.
            
            Parameters
            ----------
            node : str
                The node hosting the adapter.
            updatedInfo : IceGrid.AdapterDynamicInfo
                The new adapter state.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'updateAdapter' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_NodeObserverDisp)

        __repr__ = __str__

    _M_IceGrid._t_NodeObserverDisp = IcePy.defineClass('::IceGrid::NodeObserver', NodeObserver, (), None, ())
    NodeObserver._ice_type = _M_IceGrid._t_NodeObserverDisp

    NodeObserver._op_nodeInit = IcePy.Operation('nodeInit', Ice.OperationMode.Normal, False, None, (), (((), _M_IceGrid._t_NodeDynamicInfoSeq, False, 0),), (), None, ())
    NodeObserver._op_nodeUp = IcePy.Operation('nodeUp', Ice.OperationMode.Normal, False, None, (), (((), _M_IceGrid._t_NodeDynamicInfo, False, 0),), (), None, ())
    NodeObserver._op_nodeDown = IcePy.Operation('nodeDown', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    NodeObserver._op_updateServer = IcePy.Operation('updateServer', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_IceGrid._t_ServerDynamicInfo, False, 0)), (), None, ())
    NodeObserver._op_updateAdapter = IcePy.Operation('updateAdapter', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_IceGrid._t_AdapterDynamicInfo, False, 0)), (), None, ())

    _M_IceGrid.NodeObserver = NodeObserver
    del NodeObserver

if 'ApplicationObserverPrx' not in _M_IceGrid.__dict__:
    _M_IceGrid.ApplicationObserverPrx = None
    class ApplicationObserverPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new ApplicationObserverPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def applicationInit(self, serial, applications, context=None):
            """
            applicationInit is called after the registration of an observer to indicate the state of the
            registry.
            
            Parameters
            ----------
            serial : int
                The current serial number of the registry database. This serial number allows observers to
                make sure that their internal state is synchronized with the registry.
            applications : IceGrid.ApplicationInfo[]
                The applications currently registered with the registry.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.ApplicationObserver._op_applicationInit.invoke(self, ((serial, applications), context))

        def applicationInitAsync(self, serial, applications, context=None):
            """
            applicationInit is called after the registration of an observer to indicate the state of the
            registry.
            
            Parameters
            ----------
            serial : int
                The current serial number of the registry database. This serial number allows observers to
                make sure that their internal state is synchronized with the registry.
            applications : IceGrid.ApplicationInfo[]
                The applications currently registered with the registry.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.ApplicationObserver._op_applicationInit.invokeAsync(self, ((serial, applications), context))

        def applicationAdded(self, serial, desc, context=None):
            """
            The applicationAdded operation is called to notify an observer that an application was added.
            
            Parameters
            ----------
            serial : int
                The new serial number of the registry database.
            desc : IceGrid.ApplicationInfo
                The descriptor of the new application.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.ApplicationObserver._op_applicationAdded.invoke(self, ((serial, desc), context))

        def applicationAddedAsync(self, serial, desc, context=None):
            """
            The applicationAdded operation is called to notify an observer that an application was added.
            
            Parameters
            ----------
            serial : int
                The new serial number of the registry database.
            desc : IceGrid.ApplicationInfo
                The descriptor of the new application.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.ApplicationObserver._op_applicationAdded.invokeAsync(self, ((serial, desc), context))

        def applicationRemoved(self, serial, name, context=None):
            """
            The applicationRemoved operation is called to notify an observer that an application was
            removed.
            
            Parameters
            ----------
            serial : int
                The new serial number of the registry database.
            name : str
                The name of the application that was removed.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.ApplicationObserver._op_applicationRemoved.invoke(self, ((serial, name), context))

        def applicationRemovedAsync(self, serial, name, context=None):
            """
            The applicationRemoved operation is called to notify an observer that an application was
            removed.
            
            Parameters
            ----------
            serial : int
                The new serial number of the registry database.
            name : str
                The name of the application that was removed.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.ApplicationObserver._op_applicationRemoved.invokeAsync(self, ((serial, name), context))

        def applicationUpdated(self, serial, desc, context=None):
            """
            The applicationUpdated operation is called to notify an observer that an application was
            updated.
            
            Parameters
            ----------
            serial : int
                The new serial number of the registry database.
            desc : IceGrid.ApplicationUpdateInfo
                The descriptor of the update.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.ApplicationObserver._op_applicationUpdated.invoke(self, ((serial, desc), context))

        def applicationUpdatedAsync(self, serial, desc, context=None):
            """
            The applicationUpdated operation is called to notify an observer that an application was
            updated.
            
            Parameters
            ----------
            serial : int
                The new serial number of the registry database.
            desc : IceGrid.ApplicationUpdateInfo
                The descriptor of the update.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.ApplicationObserver._op_applicationUpdated.invokeAsync(self, ((serial, desc), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceGrid.ApplicationObserverPrx.ice_checkedCast(proxy, '::IceGrid::ApplicationObserver', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceGrid.ApplicationObserverPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceGrid::ApplicationObserver'
    _M_IceGrid._t_ApplicationObserverPrx = IcePy.defineProxy('::IceGrid::ApplicationObserver', ApplicationObserverPrx)

    _M_IceGrid.ApplicationObserverPrx = ApplicationObserverPrx
    del ApplicationObserverPrx

    _M_IceGrid.ApplicationObserver = None
    class ApplicationObserver(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceGrid::ApplicationObserver')

        def ice_id(self, current=None):
            return '::IceGrid::ApplicationObserver'

        @staticmethod
        def ice_staticId():
            return '::IceGrid::ApplicationObserver'

        def applicationInit(self, serial, applications, current=None):
            """
            applicationInit is called after the registration of an observer to indicate the state of the
            registry.
            
            Parameters
            ----------
            serial : int
                The current serial number of the registry database. This serial number allows observers to
                make sure that their internal state is synchronized with the registry.
            applications : IceGrid.ApplicationInfo[]
                The applications currently registered with the registry.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'applicationInit' not implemented")

        def applicationAdded(self, serial, desc, current=None):
            """
            The applicationAdded operation is called to notify an observer that an application was added.
            
            Parameters
            ----------
            serial : int
                The new serial number of the registry database.
            desc : IceGrid.ApplicationInfo
                The descriptor of the new application.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'applicationAdded' not implemented")

        def applicationRemoved(self, serial, name, current=None):
            """
            The applicationRemoved operation is called to notify an observer that an application was
            removed.
            
            Parameters
            ----------
            serial : int
                The new serial number of the registry database.
            name : str
                The name of the application that was removed.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'applicationRemoved' not implemented")

        def applicationUpdated(self, serial, desc, current=None):
            """
            The applicationUpdated operation is called to notify an observer that an application was
            updated.
            
            Parameters
            ----------
            serial : int
                The new serial number of the registry database.
            desc : IceGrid.ApplicationUpdateInfo
                The descriptor of the update.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'applicationUpdated' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_ApplicationObserverDisp)

        __repr__ = __str__

    _M_IceGrid._t_ApplicationObserverDisp = IcePy.defineClass('::IceGrid::ApplicationObserver', ApplicationObserver, (), None, ())
    ApplicationObserver._ice_type = _M_IceGrid._t_ApplicationObserverDisp

    ApplicationObserver._op_applicationInit = IcePy.Operation('applicationInit', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_IceGrid._t_ApplicationInfoSeq, False, 0)), (), None, ())
    ApplicationObserver._op_applicationAdded = IcePy.Operation('applicationAdded', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_IceGrid._t_ApplicationInfo, False, 0)), (), None, ())
    ApplicationObserver._op_applicationRemoved = IcePy.Operation('applicationRemoved', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    ApplicationObserver._op_applicationUpdated = IcePy.Operation('applicationUpdated', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_IceGrid._t_ApplicationUpdateInfo, False, 0)), (), None, ())

    _M_IceGrid.ApplicationObserver = ApplicationObserver
    del ApplicationObserver

if 'AdapterObserverPrx' not in _M_IceGrid.__dict__:
    _M_IceGrid.AdapterObserverPrx = None
    class AdapterObserverPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new AdapterObserverPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def adapterInit(self, adpts, context=None):
            """
            adapterInit is called after registration of an observer to indicate the state of the registry.
            
            Parameters
            ----------
            adpts : IceGrid.AdapterInfo[]
                The adapters that were dynamically registered with the registry (not through the deployment
                mechanism).
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.AdapterObserver._op_adapterInit.invoke(self, ((adpts, ), context))

        def adapterInitAsync(self, adpts, context=None):
            """
            adapterInit is called after registration of an observer to indicate the state of the registry.
            
            Parameters
            ----------
            adpts : IceGrid.AdapterInfo[]
                The adapters that were dynamically registered with the registry (not through the deployment
                mechanism).
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdapterObserver._op_adapterInit.invokeAsync(self, ((adpts, ), context))

        def adapterAdded(self, info, context=None):
            """
            The adapterAdded operation is called to notify an observer when a dynamically-registered
            adapter was added.
            
            Parameters
            ----------
            info : IceGrid.AdapterInfo
                The details of the new adapter.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.AdapterObserver._op_adapterAdded.invoke(self, ((info, ), context))

        def adapterAddedAsync(self, info, context=None):
            """
            The adapterAdded operation is called to notify an observer when a dynamically-registered
            adapter was added.
            
            Parameters
            ----------
            info : IceGrid.AdapterInfo
                The details of the new adapter.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdapterObserver._op_adapterAdded.invokeAsync(self, ((info, ), context))

        def adapterUpdated(self, info, context=None):
            """
            The adapterUpdated operation is called to notify an observer when a dynamically-registered adapter was
            updated.
            
            Parameters
            ----------
            info : IceGrid.AdapterInfo
                The details of the updated adapter.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.AdapterObserver._op_adapterUpdated.invoke(self, ((info, ), context))

        def adapterUpdatedAsync(self, info, context=None):
            """
            The adapterUpdated operation is called to notify an observer when a dynamically-registered adapter was
            updated.
            
            Parameters
            ----------
            info : IceGrid.AdapterInfo
                The details of the updated adapter.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdapterObserver._op_adapterUpdated.invokeAsync(self, ((info, ), context))

        def adapterRemoved(self, id, context=None):
            """
            The adapterRemoved operation is called to notify an observer when a dynamically-registered adapter was
            removed.
            
            Parameters
            ----------
            id : str
                The ID of the removed adapter.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.AdapterObserver._op_adapterRemoved.invoke(self, ((id, ), context))

        def adapterRemovedAsync(self, id, context=None):
            """
            The adapterRemoved operation is called to notify an observer when a dynamically-registered adapter was
            removed.
            
            Parameters
            ----------
            id : str
                The ID of the removed adapter.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdapterObserver._op_adapterRemoved.invokeAsync(self, ((id, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceGrid.AdapterObserverPrx.ice_checkedCast(proxy, '::IceGrid::AdapterObserver', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceGrid.AdapterObserverPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceGrid::AdapterObserver'
    _M_IceGrid._t_AdapterObserverPrx = IcePy.defineProxy('::IceGrid::AdapterObserver', AdapterObserverPrx)

    _M_IceGrid.AdapterObserverPrx = AdapterObserverPrx
    del AdapterObserverPrx

    _M_IceGrid.AdapterObserver = None
    class AdapterObserver(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceGrid::AdapterObserver')

        def ice_id(self, current=None):
            return '::IceGrid::AdapterObserver'

        @staticmethod
        def ice_staticId():
            return '::IceGrid::AdapterObserver'

        def adapterInit(self, adpts, current=None):
            """
            adapterInit is called after registration of an observer to indicate the state of the registry.
            
            Parameters
            ----------
            adpts : IceGrid.AdapterInfo[]
                The adapters that were dynamically registered with the registry (not through the deployment
                mechanism).
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'adapterInit' not implemented")

        def adapterAdded(self, info, current=None):
            """
            The adapterAdded operation is called to notify an observer when a dynamically-registered
            adapter was added.
            
            Parameters
            ----------
            info : IceGrid.AdapterInfo
                The details of the new adapter.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'adapterAdded' not implemented")

        def adapterUpdated(self, info, current=None):
            """
            The adapterUpdated operation is called to notify an observer when a dynamically-registered adapter was
            updated.
            
            Parameters
            ----------
            info : IceGrid.AdapterInfo
                The details of the updated adapter.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'adapterUpdated' not implemented")

        def adapterRemoved(self, id, current=None):
            """
            The adapterRemoved operation is called to notify an observer when a dynamically-registered adapter was
            removed.
            
            Parameters
            ----------
            id : str
                The ID of the removed adapter.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'adapterRemoved' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_AdapterObserverDisp)

        __repr__ = __str__

    _M_IceGrid._t_AdapterObserverDisp = IcePy.defineClass('::IceGrid::AdapterObserver', AdapterObserver, (), None, ())
    AdapterObserver._ice_type = _M_IceGrid._t_AdapterObserverDisp

    AdapterObserver._op_adapterInit = IcePy.Operation('adapterInit', Ice.OperationMode.Normal, False, None, (), (((), _M_IceGrid._t_AdapterInfoSeq, False, 0),), (), None, ())
    AdapterObserver._op_adapterAdded = IcePy.Operation('adapterAdded', Ice.OperationMode.Normal, False, None, (), (((), _M_IceGrid._t_AdapterInfo, False, 0),), (), None, ())
    AdapterObserver._op_adapterUpdated = IcePy.Operation('adapterUpdated', Ice.OperationMode.Normal, False, None, (), (((), _M_IceGrid._t_AdapterInfo, False, 0),), (), None, ())
    AdapterObserver._op_adapterRemoved = IcePy.Operation('adapterRemoved', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_IceGrid.AdapterObserver = AdapterObserver
    del AdapterObserver

if 'ObjectObserverPrx' not in _M_IceGrid.__dict__:
    _M_IceGrid.ObjectObserverPrx = None
    class ObjectObserverPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new ObjectObserverPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def objectInit(self, objects, context=None):
            """
            objectInit is called after the registration of an observer to indicate the state of the
            registry.
            
            Parameters
            ----------
            objects : IceGrid.ObjectInfo[]
                The objects registered with the Admin interface (not through the deployment
                mechanism).
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.ObjectObserver._op_objectInit.invoke(self, ((objects, ), context))

        def objectInitAsync(self, objects, context=None):
            """
            objectInit is called after the registration of an observer to indicate the state of the
            registry.
            
            Parameters
            ----------
            objects : IceGrid.ObjectInfo[]
                The objects registered with the Admin interface (not through the deployment
                mechanism).
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.ObjectObserver._op_objectInit.invokeAsync(self, ((objects, ), context))

        def objectAdded(self, info, context=None):
            """
            The objectAdded operation is called to notify an observer when an object was added to the
            Admin interface.
            
            Parameters
            ----------
            info : IceGrid.ObjectInfo
                The details of the added object.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.ObjectObserver._op_objectAdded.invoke(self, ((info, ), context))

        def objectAddedAsync(self, info, context=None):
            """
            The objectAdded operation is called to notify an observer when an object was added to the
            Admin interface.
            
            Parameters
            ----------
            info : IceGrid.ObjectInfo
                The details of the added object.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.ObjectObserver._op_objectAdded.invokeAsync(self, ((info, ), context))

        def objectUpdated(self, info, context=None):
            """
            objectUpdated is called to notify an observer when an object registered with the Admin
            interface was updated.
            
            Parameters
            ----------
            info : IceGrid.ObjectInfo
                The details of the updated object.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.ObjectObserver._op_objectUpdated.invoke(self, ((info, ), context))

        def objectUpdatedAsync(self, info, context=None):
            """
            objectUpdated is called to notify an observer when an object registered with the Admin
            interface was updated.
            
            Parameters
            ----------
            info : IceGrid.ObjectInfo
                The details of the updated object.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.ObjectObserver._op_objectUpdated.invokeAsync(self, ((info, ), context))

        def objectRemoved(self, id, context=None):
            """
            objectRemoved is called to notify an observer when an object registered with the Admin
            interface was removed.
            
            Parameters
            ----------
            id : Ice.Identity
                The identity of the removed object.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.ObjectObserver._op_objectRemoved.invoke(self, ((id, ), context))

        def objectRemovedAsync(self, id, context=None):
            """
            objectRemoved is called to notify an observer when an object registered with the Admin
            interface was removed.
            
            Parameters
            ----------
            id : Ice.Identity
                The identity of the removed object.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.ObjectObserver._op_objectRemoved.invokeAsync(self, ((id, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceGrid.ObjectObserverPrx.ice_checkedCast(proxy, '::IceGrid::ObjectObserver', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceGrid.ObjectObserverPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceGrid::ObjectObserver'
    _M_IceGrid._t_ObjectObserverPrx = IcePy.defineProxy('::IceGrid::ObjectObserver', ObjectObserverPrx)

    _M_IceGrid.ObjectObserverPrx = ObjectObserverPrx
    del ObjectObserverPrx

    _M_IceGrid.ObjectObserver = None
    class ObjectObserver(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceGrid::ObjectObserver')

        def ice_id(self, current=None):
            return '::IceGrid::ObjectObserver'

        @staticmethod
        def ice_staticId():
            return '::IceGrid::ObjectObserver'

        def objectInit(self, objects, current=None):
            """
            objectInit is called after the registration of an observer to indicate the state of the
            registry.
            
            Parameters
            ----------
            objects : IceGrid.ObjectInfo[]
                The objects registered with the Admin interface (not through the deployment
                mechanism).
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'objectInit' not implemented")

        def objectAdded(self, info, current=None):
            """
            The objectAdded operation is called to notify an observer when an object was added to the
            Admin interface.
            
            Parameters
            ----------
            info : IceGrid.ObjectInfo
                The details of the added object.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'objectAdded' not implemented")

        def objectUpdated(self, info, current=None):
            """
            objectUpdated is called to notify an observer when an object registered with the Admin
            interface was updated.
            
            Parameters
            ----------
            info : IceGrid.ObjectInfo
                The details of the updated object.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'objectUpdated' not implemented")

        def objectRemoved(self, id, current=None):
            """
            objectRemoved is called to notify an observer when an object registered with the Admin
            interface was removed.
            
            Parameters
            ----------
            id : Ice.Identity
                The identity of the removed object.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'objectRemoved' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_ObjectObserverDisp)

        __repr__ = __str__

    _M_IceGrid._t_ObjectObserverDisp = IcePy.defineClass('::IceGrid::ObjectObserver', ObjectObserver, (), None, ())
    ObjectObserver._ice_type = _M_IceGrid._t_ObjectObserverDisp

    ObjectObserver._op_objectInit = IcePy.Operation('objectInit', Ice.OperationMode.Normal, False, None, (), (((), _M_IceGrid._t_ObjectInfoSeq, False, 0),), (), None, ())
    ObjectObserver._op_objectAdded = IcePy.Operation('objectAdded', Ice.OperationMode.Normal, False, None, (), (((), _M_IceGrid._t_ObjectInfo, False, 0),), (), None, ())
    ObjectObserver._op_objectUpdated = IcePy.Operation('objectUpdated', Ice.OperationMode.Normal, False, None, (), (((), _M_IceGrid._t_ObjectInfo, False, 0),), (), None, ())
    ObjectObserver._op_objectRemoved = IcePy.Operation('objectRemoved', Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), None, ())

    _M_IceGrid.ObjectObserver = ObjectObserver
    del ObjectObserver

if 'AdminSessionPrx' not in _M_IceGrid.__dict__:
    _M_IceGrid.AdminSessionPrx = None
    class AdminSessionPrx(_M_Glacier2.SessionPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new AdminSessionPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def keepAlive(self, context=None):
            """
            Keep the session alive. This operation is provided for backwards compatibility. As of Ice 3.8, there is no
            need to call this operation and its implementation does nothing.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceGrid.AdminSession._op_keepAlive.invoke(self, ((), context))

        def keepAliveAsync(self, context=None):
            """
            Keep the session alive. This operation is provided for backwards compatibility. As of Ice 3.8, there is no
            need to call this operation and its implementation does nothing.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdminSession._op_keepAlive.invokeAsync(self, ((), context))

        def getAdmin(self, context=None):
            """
            Get the admin interface. The admin object returned by this operation can only be accessed by the session.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (IceGrid.AdminPrx or None)
                The admin interface proxy. The returned proxy is never null.
            """
            return _M_IceGrid.AdminSession._op_getAdmin.invoke(self, ((), context))

        def getAdminAsync(self, context=None):
            """
            Get the admin interface. The admin object returned by this operation can only be accessed by the session.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdminSession._op_getAdmin.invokeAsync(self, ((), context))

        def getAdminCallbackTemplate(self, context=None):
            """
            Get a "template" proxy for admin callback objects. An Admin client uses this proxy to set the category of
            its callback objects, and the published endpoints of the object adapter hosting the admin callback objects.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Ice.ObjectPrx or None)
                A template proxy. The returned proxy is null when the Admin session was established using Glacier2.
            """
            return _M_IceGrid.AdminSession._op_getAdminCallbackTemplate.invoke(self, ((), context))

        def getAdminCallbackTemplateAsync(self, context=None):
            """
            Get a "template" proxy for admin callback objects. An Admin client uses this proxy to set the category of
            its callback objects, and the published endpoints of the object adapter hosting the admin callback objects.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdminSession._op_getAdminCallbackTemplate.invokeAsync(self, ((), context))

        def setObservers(self, registryObs, nodeObs, appObs, adptObs, objObs, context=None):
            """
            Set the observer proxies that receive notifications when the state of the registry or nodes changes.
            
            Parameters
            ----------
            registryObs : (IceGrid.RegistryObserverPrx or None)
                The registry observer.
            nodeObs : (IceGrid.NodeObserverPrx or None)
                The node observer.
            appObs : (IceGrid.ApplicationObserverPrx or None)
                The application observer.
            adptObs : (IceGrid.AdapterObserverPrx or None)
                The adapter observer.
            objObs : (IceGrid.ObjectObserverPrx or None)
                The object observer.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            ObserverAlreadyRegisteredException
                Raised if an observer is already registered with this registry.
            """
            return _M_IceGrid.AdminSession._op_setObservers.invoke(self, ((registryObs, nodeObs, appObs, adptObs, objObs), context))

        def setObserversAsync(self, registryObs, nodeObs, appObs, adptObs, objObs, context=None):
            """
            Set the observer proxies that receive notifications when the state of the registry or nodes changes.
            
            Parameters
            ----------
            registryObs : (IceGrid.RegistryObserverPrx or None)
                The registry observer.
            nodeObs : (IceGrid.NodeObserverPrx or None)
                The node observer.
            appObs : (IceGrid.ApplicationObserverPrx or None)
                The application observer.
            adptObs : (IceGrid.AdapterObserverPrx or None)
                The adapter observer.
            objObs : (IceGrid.ObjectObserverPrx or None)
                The object observer.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdminSession._op_setObservers.invokeAsync(self, ((registryObs, nodeObs, appObs, adptObs, objObs), context))

        def setObserversByIdentity(self, registryObs, nodeObs, appObs, adptObs, objObs, context=None):
            """
            Set the observer identities that receive notifications the state of the registry or nodes changes. This
            operation should be used by clients that are using a bidirectional connection to communicate with the
            session.
            
            Parameters
            ----------
            registryObs : Ice.Identity
                The registry observer identity.
            nodeObs : Ice.Identity
                The node observer identity.
            appObs : Ice.Identity
                The application observer.
            adptObs : Ice.Identity
                The adapter observer.
            objObs : Ice.Identity
                The object observer.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            ObserverAlreadyRegisteredException
                Raised if an observer is already registered with this registry.
            """
            return _M_IceGrid.AdminSession._op_setObserversByIdentity.invoke(self, ((registryObs, nodeObs, appObs, adptObs, objObs), context))

        def setObserversByIdentityAsync(self, registryObs, nodeObs, appObs, adptObs, objObs, context=None):
            """
            Set the observer identities that receive notifications the state of the registry or nodes changes. This
            operation should be used by clients that are using a bidirectional connection to communicate with the
            session.
            
            Parameters
            ----------
            registryObs : Ice.Identity
                The registry observer identity.
            nodeObs : Ice.Identity
                The node observer identity.
            appObs : Ice.Identity
                The application observer.
            adptObs : Ice.Identity
                The adapter observer.
            objObs : Ice.Identity
                The object observer.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdminSession._op_setObserversByIdentity.invokeAsync(self, ((registryObs, nodeObs, appObs, adptObs, objObs), context))

        def startUpdate(self, context=None):
            """
            Acquires an exclusive lock to start updating the registry applications.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            int
                The current serial.
            
            Raises
            ------
            AccessDeniedException
                Raised if the exclusive lock can't be acquired. This might happen if the lock
                is currently acquired by another session.
            """
            return _M_IceGrid.AdminSession._op_startUpdate.invoke(self, ((), context))

        def startUpdateAsync(self, context=None):
            """
            Acquires an exclusive lock to start updating the registry applications.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdminSession._op_startUpdate.invokeAsync(self, ((), context))

        def finishUpdate(self, context=None):
            """
            Finish updating the registry and release the exclusive lock.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock.
            """
            return _M_IceGrid.AdminSession._op_finishUpdate.invoke(self, ((), context))

        def finishUpdateAsync(self, context=None):
            """
            Finish updating the registry and release the exclusive lock.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdminSession._op_finishUpdate.invokeAsync(self, ((), context))

        def getReplicaName(self, context=None):
            """
            Get the name of the registry replica hosting this session.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            str
                The replica name of the registry.
            """
            return _M_IceGrid.AdminSession._op_getReplicaName.invoke(self, ((), context))

        def getReplicaNameAsync(self, context=None):
            """
            Get the name of the registry replica hosting this session.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdminSession._op_getReplicaName.invokeAsync(self, ((), context))

        def openServerLog(self, id, path, count, context=None):
            """
            Open the given server log file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            id : str
                The server id.
            path : str
                The path of the log file. A log file can be opened only if it's declared in the server or
                service deployment descriptor.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (IceGrid.FileIteratorPrx or None)
                An iterator to read the file. The returned proxy is never null.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            FileNotAvailableException
                Raised if the file can't be read.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            return _M_IceGrid.AdminSession._op_openServerLog.invoke(self, ((id, path, count), context))

        def openServerLogAsync(self, id, path, count, context=None):
            """
            Open the given server log file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            id : str
                The server id.
            path : str
                The path of the log file. A log file can be opened only if it's declared in the server or
                service deployment descriptor.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdminSession._op_openServerLog.invokeAsync(self, ((id, path, count), context))

        def openServerStdErr(self, id, count, context=None):
            """
            Open the given server stderr file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            id : str
                The server id.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (IceGrid.FileIteratorPrx or None)
                An iterator to read the file. The returned proxy is never null.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            FileNotAvailableException
                Raised if the file can't be read.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            return _M_IceGrid.AdminSession._op_openServerStdErr.invoke(self, ((id, count), context))

        def openServerStdErrAsync(self, id, count, context=None):
            """
            Open the given server stderr file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            id : str
                The server id.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdminSession._op_openServerStdErr.invokeAsync(self, ((id, count), context))

        def openServerStdOut(self, id, count, context=None):
            """
            Open the given server stdout file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            id : str
                The server id.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining.
                If 0 or positive, the file is read from the last count lines.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (IceGrid.FileIteratorPrx or None)
                An iterator to read the file. The returned proxy is never null.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            FileNotAvailableException
                Raised if the file can't be read.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            return _M_IceGrid.AdminSession._op_openServerStdOut.invoke(self, ((id, count), context))

        def openServerStdOutAsync(self, id, count, context=None):
            """
            Open the given server stdout file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            id : str
                The server id.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining.
                If 0 or positive, the file is read from the last count lines.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdminSession._op_openServerStdOut.invokeAsync(self, ((id, count), context))

        def openNodeStdErr(self, name, count, context=None):
            """
            Open the given node stderr file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            name : str
                The node name.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (IceGrid.FileIteratorPrx or None)
                An iterator to read the file. The returned proxy is never null.
            
            Raises
            ------
            FileNotAvailableException
                Raised if the file can't be read.
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            return _M_IceGrid.AdminSession._op_openNodeStdErr.invoke(self, ((name, count), context))

        def openNodeStdErrAsync(self, name, count, context=None):
            """
            Open the given node stderr file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            name : str
                The node name.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdminSession._op_openNodeStdErr.invokeAsync(self, ((name, count), context))

        def openNodeStdOut(self, name, count, context=None):
            """
            Open the given node stdout file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            name : str
                The node name.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (IceGrid.FileIteratorPrx or None)
                An iterator to read the file. The returned proxy is never null.
            
            Raises
            ------
            FileNotAvailableException
                Raised if the file can't be read.
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            return _M_IceGrid.AdminSession._op_openNodeStdOut.invoke(self, ((name, count), context))

        def openNodeStdOutAsync(self, name, count, context=None):
            """
            Open the given node stdout file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            name : str
                The node name.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdminSession._op_openNodeStdOut.invokeAsync(self, ((name, count), context))

        def openRegistryStdErr(self, name, count, context=None):
            """
            Open the given registry stderr file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            name : str
                The registry name.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (IceGrid.FileIteratorPrx or None)
                An iterator to read the file. The returned proxy is never null.
            
            Raises
            ------
            FileNotAvailableException
                Raised if the file can't be read.
            RegistryNotExistException
                Raised if the registry doesn't exist.
            RegistryUnreachableException
                Raised if the registry could not be reached.
            """
            return _M_IceGrid.AdminSession._op_openRegistryStdErr.invoke(self, ((name, count), context))

        def openRegistryStdErrAsync(self, name, count, context=None):
            """
            Open the given registry stderr file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            name : str
                The registry name.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdminSession._op_openRegistryStdErr.invokeAsync(self, ((name, count), context))

        def openRegistryStdOut(self, name, count, context=None):
            """
            Open the given registry stdout file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            name : str
                The registry name.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (IceGrid.FileIteratorPrx or None)
                An iterator to read the file. The returned proxy is never null.
            
            Raises
            ------
            FileNotAvailableException
                Raised if the file can't be read.
            RegistryNotExistException
                Raised if the registry doesn't exist.
            RegistryUnreachableException
                Raised if the registry could not be reached.
            """
            return _M_IceGrid.AdminSession._op_openRegistryStdOut.invoke(self, ((name, count), context))

        def openRegistryStdOutAsync(self, name, count, context=None):
            """
            Open the given registry stdout file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            name : str
                The registry name.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.AdminSession._op_openRegistryStdOut.invokeAsync(self, ((name, count), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceGrid.AdminSessionPrx.ice_checkedCast(proxy, '::IceGrid::AdminSession', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceGrid.AdminSessionPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceGrid::AdminSession'
    _M_IceGrid._t_AdminSessionPrx = IcePy.defineProxy('::IceGrid::AdminSession', AdminSessionPrx)

    _M_IceGrid.AdminSessionPrx = AdminSessionPrx
    del AdminSessionPrx

    _M_IceGrid.AdminSession = None
    class AdminSession(_M_Glacier2.Session):

        def ice_ids(self, current=None):
            return ('::Glacier2::Session', '::Ice::Object', '::IceGrid::AdminSession')

        def ice_id(self, current=None):
            return '::IceGrid::AdminSession'

        @staticmethod
        def ice_staticId():
            return '::IceGrid::AdminSession'

        def keepAlive(self, current=None):
            """
            Keep the session alive. This operation is provided for backwards compatibility. As of Ice 3.8, there is no
            need to call this operation and its implementation does nothing.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'keepAlive' not implemented")

        def getAdmin(self, current=None):
            """
            Get the admin interface. The admin object returned by this operation can only be accessed by the session.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getAdmin' not implemented")

        def getAdminCallbackTemplate(self, current=None):
            """
            Get a "template" proxy for admin callback objects. An Admin client uses this proxy to set the category of
            its callback objects, and the published endpoints of the object adapter hosting the admin callback objects.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getAdminCallbackTemplate' not implemented")

        def setObservers(self, registryObs, nodeObs, appObs, adptObs, objObs, current=None):
            """
            Set the observer proxies that receive notifications when the state of the registry or nodes changes.
            
            Parameters
            ----------
            registryObs : (IceGrid.RegistryObserverPrx or None)
                The registry observer.
            nodeObs : (IceGrid.NodeObserverPrx or None)
                The node observer.
            appObs : (IceGrid.ApplicationObserverPrx or None)
                The application observer.
            adptObs : (IceGrid.AdapterObserverPrx or None)
                The adapter observer.
            objObs : (IceGrid.ObjectObserverPrx or None)
                The object observer.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            ObserverAlreadyRegisteredException
                Raised if an observer is already registered with this registry.
            """
            raise NotImplementedError("servant method 'setObservers' not implemented")

        def setObserversByIdentity(self, registryObs, nodeObs, appObs, adptObs, objObs, current=None):
            """
            Set the observer identities that receive notifications the state of the registry or nodes changes. This
            operation should be used by clients that are using a bidirectional connection to communicate with the
            session.
            
            Parameters
            ----------
            registryObs : Ice.Identity
                The registry observer identity.
            nodeObs : Ice.Identity
                The node observer identity.
            appObs : Ice.Identity
                The application observer.
            adptObs : Ice.Identity
                The adapter observer.
            objObs : Ice.Identity
                The object observer.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            ObserverAlreadyRegisteredException
                Raised if an observer is already registered with this registry.
            """
            raise NotImplementedError("servant method 'setObserversByIdentity' not implemented")

        def startUpdate(self, current=None):
            """
            Acquires an exclusive lock to start updating the registry applications.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AccessDeniedException
                Raised if the exclusive lock can't be acquired. This might happen if the lock
                is currently acquired by another session.
            """
            raise NotImplementedError("servant method 'startUpdate' not implemented")

        def finishUpdate(self, current=None):
            """
            Finish updating the registry and release the exclusive lock.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AccessDeniedException
                Raised if the session doesn't hold the exclusive lock.
            """
            raise NotImplementedError("servant method 'finishUpdate' not implemented")

        def getReplicaName(self, current=None):
            """
            Get the name of the registry replica hosting this session.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getReplicaName' not implemented")

        def openServerLog(self, id, path, count, current=None):
            """
            Open the given server log file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            id : str
                The server id.
            path : str
                The path of the log file. A log file can be opened only if it's declared in the server or
                service deployment descriptor.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            FileNotAvailableException
                Raised if the file can't be read.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            raise NotImplementedError("servant method 'openServerLog' not implemented")

        def openServerStdErr(self, id, count, current=None):
            """
            Open the given server stderr file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            id : str
                The server id.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            FileNotAvailableException
                Raised if the file can't be read.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            raise NotImplementedError("servant method 'openServerStdErr' not implemented")

        def openServerStdOut(self, id, count, current=None):
            """
            Open the given server stdout file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            id : str
                The server id.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining.
                If 0 or positive, the file is read from the last count lines.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            DeploymentException
                Raised if the server couldn't be deployed on the node.
            FileNotAvailableException
                Raised if the file can't be read.
            NodeUnreachableException
                Raised if the node could not be reached.
            ServerNotExistException
                Raised if the server doesn't exist.
            """
            raise NotImplementedError("servant method 'openServerStdOut' not implemented")

        def openNodeStdErr(self, name, count, current=None):
            """
            Open the given node stderr file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            name : str
                The node name.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            FileNotAvailableException
                Raised if the file can't be read.
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            raise NotImplementedError("servant method 'openNodeStdErr' not implemented")

        def openNodeStdOut(self, name, count, current=None):
            """
            Open the given node stdout file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            name : str
                The node name.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            FileNotAvailableException
                Raised if the file can't be read.
            NodeNotExistException
                Raised if the node doesn't exist.
            NodeUnreachableException
                Raised if the node could not be reached.
            """
            raise NotImplementedError("servant method 'openNodeStdOut' not implemented")

        def openRegistryStdErr(self, name, count, current=None):
            """
            Open the given registry stderr file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            name : str
                The registry name.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            FileNotAvailableException
                Raised if the file can't be read.
            RegistryNotExistException
                Raised if the registry doesn't exist.
            RegistryUnreachableException
                Raised if the registry could not be reached.
            """
            raise NotImplementedError("servant method 'openRegistryStdErr' not implemented")

        def openRegistryStdOut(self, name, count, current=None):
            """
            Open the given registry stdout file for reading. The file can be read with the returned file iterator.
            
            Parameters
            ----------
            name : str
                The registry name.
            count : int
                Specifies where to start reading the file. If negative, the file is read from the begining. If
                0 or positive, the file is read from the last count lines.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            FileNotAvailableException
                Raised if the file can't be read.
            RegistryNotExistException
                Raised if the registry doesn't exist.
            RegistryUnreachableException
                Raised if the registry could not be reached.
            """
            raise NotImplementedError("servant method 'openRegistryStdOut' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_AdminSessionDisp)

        __repr__ = __str__

    _M_IceGrid._t_AdminSessionDisp = IcePy.defineClass('::IceGrid::AdminSession', AdminSession, (), None, (_M_Glacier2._t_SessionDisp,))
    AdminSession._ice_type = _M_IceGrid._t_AdminSessionDisp

    AdminSession._op_keepAlive = IcePy.Operation('keepAlive', Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    AdminSession._op_getAdmin = IcePy.Operation('getAdmin', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_IceGrid._t_AdminPrx, False, 0), ())
    AdminSession._op_getAdminCallbackTemplate = IcePy.Operation('getAdminCallbackTemplate', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_ObjectPrx, False, 0), ())
    AdminSession._op_setObservers = IcePy.Operation('setObservers', Ice.OperationMode.Idempotent, False, None, (), (((), _M_IceGrid._t_RegistryObserverPrx, False, 0), ((), _M_IceGrid._t_NodeObserverPrx, False, 0), ((), _M_IceGrid._t_ApplicationObserverPrx, False, 0), ((), _M_IceGrid._t_AdapterObserverPrx, False, 0), ((), _M_IceGrid._t_ObjectObserverPrx, False, 0)), (), None, (_M_IceGrid._t_ObserverAlreadyRegisteredException,))
    AdminSession._op_setObserversByIdentity = IcePy.Operation('setObserversByIdentity', Ice.OperationMode.Idempotent, False, None, (), (((), _M_Ice._t_Identity, False, 0), ((), _M_Ice._t_Identity, False, 0), ((), _M_Ice._t_Identity, False, 0), ((), _M_Ice._t_Identity, False, 0), ((), _M_Ice._t_Identity, False, 0)), (), None, (_M_IceGrid._t_ObserverAlreadyRegisteredException,))
    AdminSession._op_startUpdate = IcePy.Operation('startUpdate', Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), (_M_IceGrid._t_AccessDeniedException,))
    AdminSession._op_finishUpdate = IcePy.Operation('finishUpdate', Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_IceGrid._t_AccessDeniedException,))
    AdminSession._op_getReplicaName = IcePy.Operation('getReplicaName', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    AdminSession._op_openServerLog = IcePy.Operation('openServerLog', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_IceGrid._t_FileIteratorPrx, False, 0), (_M_IceGrid._t_FileNotAvailableException, _M_IceGrid._t_ServerNotExistException, _M_IceGrid._t_NodeUnreachableException, _M_IceGrid._t_DeploymentException))
    AdminSession._op_openServerStdErr = IcePy.Operation('openServerStdErr', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_IceGrid._t_FileIteratorPrx, False, 0), (_M_IceGrid._t_FileNotAvailableException, _M_IceGrid._t_ServerNotExistException, _M_IceGrid._t_NodeUnreachableException, _M_IceGrid._t_DeploymentException))
    AdminSession._op_openServerStdOut = IcePy.Operation('openServerStdOut', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_IceGrid._t_FileIteratorPrx, False, 0), (_M_IceGrid._t_FileNotAvailableException, _M_IceGrid._t_ServerNotExistException, _M_IceGrid._t_NodeUnreachableException, _M_IceGrid._t_DeploymentException))
    AdminSession._op_openNodeStdErr = IcePy.Operation('openNodeStdErr', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_IceGrid._t_FileIteratorPrx, False, 0), (_M_IceGrid._t_FileNotAvailableException, _M_IceGrid._t_NodeNotExistException, _M_IceGrid._t_NodeUnreachableException))
    AdminSession._op_openNodeStdOut = IcePy.Operation('openNodeStdOut', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_IceGrid._t_FileIteratorPrx, False, 0), (_M_IceGrid._t_FileNotAvailableException, _M_IceGrid._t_NodeNotExistException, _M_IceGrid._t_NodeUnreachableException))
    AdminSession._op_openRegistryStdErr = IcePy.Operation('openRegistryStdErr', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_IceGrid._t_FileIteratorPrx, False, 0), (_M_IceGrid._t_FileNotAvailableException, _M_IceGrid._t_RegistryNotExistException, _M_IceGrid._t_RegistryUnreachableException))
    AdminSession._op_openRegistryStdOut = IcePy.Operation('openRegistryStdOut', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_IceGrid._t_FileIteratorPrx, False, 0), (_M_IceGrid._t_FileNotAvailableException, _M_IceGrid._t_RegistryNotExistException, _M_IceGrid._t_RegistryUnreachableException))

    _M_IceGrid.AdminSession = AdminSession
    del AdminSession

# End of module IceGrid
