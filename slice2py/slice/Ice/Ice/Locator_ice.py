# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Locator.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins
import Ice.Identity_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module Ice
__name__ = 'Ice'

if 'Process' not in _M_Ice.__dict__:
    _M_Ice._t_ProcessPrx = IcePy.declareProxy('::Ice::Process')

if 'AdapterNotFoundException' not in _M_Ice.__dict__:
    _M_Ice.AdapterNotFoundException = None
    class AdapterNotFoundException(Ice.UserException):
        """
        This exception is raised if an adapter cannot be found.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Ice::AdapterNotFoundException'

    _M_Ice._t_AdapterNotFoundException = IcePy.defineException('::Ice::AdapterNotFoundException', AdapterNotFoundException, (), None, ())
    AdapterNotFoundException._ice_type = _M_Ice._t_AdapterNotFoundException

    _M_Ice.AdapterNotFoundException = AdapterNotFoundException
    del AdapterNotFoundException

if 'InvalidReplicaGroupIdException' not in _M_Ice.__dict__:
    _M_Ice.InvalidReplicaGroupIdException = None
    class InvalidReplicaGroupIdException(Ice.UserException):
        """
        This exception is raised if the replica group provided by the server is invalid.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Ice::InvalidReplicaGroupIdException'

    _M_Ice._t_InvalidReplicaGroupIdException = IcePy.defineException('::Ice::InvalidReplicaGroupIdException', InvalidReplicaGroupIdException, (), None, ())
    InvalidReplicaGroupIdException._ice_type = _M_Ice._t_InvalidReplicaGroupIdException

    _M_Ice.InvalidReplicaGroupIdException = InvalidReplicaGroupIdException
    del InvalidReplicaGroupIdException

if 'AdapterAlreadyActiveException' not in _M_Ice.__dict__:
    _M_Ice.AdapterAlreadyActiveException = None
    class AdapterAlreadyActiveException(Ice.UserException):
        """
        This exception is raised if a server tries to set endpoints for an adapter that is already active.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Ice::AdapterAlreadyActiveException'

    _M_Ice._t_AdapterAlreadyActiveException = IcePy.defineException('::Ice::AdapterAlreadyActiveException', AdapterAlreadyActiveException, (), None, ())
    AdapterAlreadyActiveException._ice_type = _M_Ice._t_AdapterAlreadyActiveException

    _M_Ice.AdapterAlreadyActiveException = AdapterAlreadyActiveException
    del AdapterAlreadyActiveException

if 'ObjectNotFoundException' not in _M_Ice.__dict__:
    _M_Ice.ObjectNotFoundException = None
    class ObjectNotFoundException(Ice.UserException):
        """
        This exception is raised if an object cannot be found.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Ice::ObjectNotFoundException'

    _M_Ice._t_ObjectNotFoundException = IcePy.defineException('::Ice::ObjectNotFoundException', ObjectNotFoundException, (), None, ())
    ObjectNotFoundException._ice_type = _M_Ice._t_ObjectNotFoundException

    _M_Ice.ObjectNotFoundException = ObjectNotFoundException
    del ObjectNotFoundException

if 'ServerNotFoundException' not in _M_Ice.__dict__:
    _M_Ice.ServerNotFoundException = None
    class ServerNotFoundException(Ice.UserException):
        """
        This exception is raised if a server cannot be found.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Ice::ServerNotFoundException'

    _M_Ice._t_ServerNotFoundException = IcePy.defineException('::Ice::ServerNotFoundException', ServerNotFoundException, (), None, ())
    ServerNotFoundException._ice_type = _M_Ice._t_ServerNotFoundException

    _M_Ice.ServerNotFoundException = ServerNotFoundException
    del ServerNotFoundException

if 'LocatorRegistry' not in _M_Ice.__dict__:
    _M_Ice._t_LocatorRegistryPrx = IcePy.declareProxy('::Ice::LocatorRegistry')

if 'Locator' not in _M_Ice.__dict__:
    _M_Ice._t_LocatorPrx = IcePy.declareProxy('::Ice::Locator')

if 'LocatorPrx' not in _M_Ice.__dict__:
    _M_Ice.LocatorPrx = None
    class LocatorPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new LocatorPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def findObjectById(self, id, context=None):
            """
            Find an object by identity and return a proxy that contains the adapter ID or endpoints which can be used to
            access the object.
            
            Parameters
            ----------
            id : Ice.Identity
                The identity.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Ice.ObjectPrx or None)
                The proxy, or null if the object is not active.
            
            Raises
            ------
            ObjectNotFoundException
                Raised if the object cannot be found.
            """
            return _M_Ice.Locator._op_findObjectById.invoke(self, ((id, ), context))

        def findObjectByIdAsync(self, id, context=None):
            """
            Find an object by identity and return a proxy that contains the adapter ID or endpoints which can be used to
            access the object.
            
            Parameters
            ----------
            id : Ice.Identity
                The identity.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Ice.Locator._op_findObjectById.invokeAsync(self, ((id, ), context))

        def findAdapterById(self, id, context=None):
            """
            Find an adapter by id and return a proxy that contains its endpoints.
            
            Parameters
            ----------
            id : str
                The adapter id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Ice.ObjectPrx or None)
                The adapter proxy, or null if the adapter is not active.
            
            Raises
            ------
            AdapterNotFoundException
                Raised if the adapter cannot be found.
            """
            return _M_Ice.Locator._op_findAdapterById.invoke(self, ((id, ), context))

        def findAdapterByIdAsync(self, id, context=None):
            """
            Find an adapter by id and return a proxy that contains its endpoints.
            
            Parameters
            ----------
            id : str
                The adapter id.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Ice.Locator._op_findAdapterById.invokeAsync(self, ((id, ), context))

        def getRegistry(self, context=None):
            """
            Get the locator registry.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Ice.LocatorRegistryPrx or None)
                The locator registry.
            """
            return _M_Ice.Locator._op_getRegistry.invoke(self, ((), context))

        def getRegistryAsync(self, context=None):
            """
            Get the locator registry.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Ice.Locator._op_getRegistry.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Ice.LocatorPrx.ice_checkedCast(proxy, '::Ice::Locator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Ice.LocatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Ice::Locator'
    _M_Ice._t_LocatorPrx = IcePy.defineProxy('::Ice::Locator', LocatorPrx)

    _M_Ice.LocatorPrx = LocatorPrx
    del LocatorPrx

    _M_Ice.Locator = None
    class Locator(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Locator', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Ice::Locator'

        @staticmethod
        def ice_staticId():
            return '::Ice::Locator'

        def findObjectById(self, id, current=None):
            """
            Find an object by identity and return a proxy that contains the adapter ID or endpoints which can be used to
            access the object.
            
            Parameters
            ----------
            id : Ice.Identity
                The identity.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            ObjectNotFoundException
                Raised if the object cannot be found.
            """
            raise NotImplementedError("servant method 'findObjectById' not implemented")

        def findAdapterById(self, id, current=None):
            """
            Find an adapter by id and return a proxy that contains its endpoints.
            
            Parameters
            ----------
            id : str
                The adapter id.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AdapterNotFoundException
                Raised if the adapter cannot be found.
            """
            raise NotImplementedError("servant method 'findAdapterById' not implemented")

        def getRegistry(self, current=None):
            """
            Get the locator registry.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getRegistry' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Ice._t_LocatorDisp)

        __repr__ = __str__

    Locator._op_findObjectById = IcePy.Operation('findObjectById', Ice.OperationMode.Idempotent, True, None, (), (((), _M_Ice._t_Identity, False, 0),), (), ((), IcePy._t_ObjectPrx, False, 0), (_M_Ice._t_ObjectNotFoundException,))
    Locator._op_findAdapterById = IcePy.Operation('findAdapterById', Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_ObjectPrx, False, 0), (_M_Ice._t_AdapterNotFoundException,))
    Locator._op_getRegistry = IcePy.Operation('getRegistry', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Ice._t_LocatorRegistryPrx, False, 0), ())

    _M_Ice.Locator = Locator
    del Locator

if 'LocatorRegistryPrx' not in _M_Ice.__dict__:
    _M_Ice.LocatorRegistryPrx = None
    class LocatorRegistryPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new LocatorRegistryPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def setAdapterDirectProxy(self, id, proxy, context=None):
            """
            Set the adapter endpoints with the locator registry.
            
            Parameters
            ----------
            id : str
                The adapter id.
            proxy : (Ice.ObjectPrx or None)
                The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
                adapter endpoints. The proxy can be null, typically during adapter deactivation.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            AdapterAlreadyActiveException
                Raised if an adapter with the same id is already active.
            AdapterNotFoundException
                Raised if the adapter cannot be found, or if the locator only allows
                registered adapters to set their active proxy and the adapter is not registered with the locator.
            """
            return _M_Ice.LocatorRegistry._op_setAdapterDirectProxy.invoke(self, ((id, proxy), context))

        def setAdapterDirectProxyAsync(self, id, proxy, context=None):
            """
            Set the adapter endpoints with the locator registry.
            
            Parameters
            ----------
            id : str
                The adapter id.
            proxy : (Ice.ObjectPrx or None)
                The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
                adapter endpoints. The proxy can be null, typically during adapter deactivation.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Ice.LocatorRegistry._op_setAdapterDirectProxy.invokeAsync(self, ((id, proxy), context))

        def setReplicatedAdapterDirectProxy(self, adapterId, replicaGroupId, proxy, context=None):
            """
            Set the adapter endpoints with the locator registry.
            
            Parameters
            ----------
            adapterId : str
                The adapter id.
            replicaGroupId : str
                The replica group id.
            proxy : (Ice.ObjectPrx or None)
                The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
                adapter endpoints. The proxy can be null, typically during adapter deactivation.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            AdapterAlreadyActiveException
                Raised if an adapter with the same id is already active.
            AdapterNotFoundException
                Raised if the adapter cannot be found, or if the locator only allows
                registered adapters to set their active proxy and the adapter is not registered with the locator.
            InvalidReplicaGroupIdException
                Raised if the given replica group doesn't match the one registered
                with the locator registry for this object adapter.
            """
            return _M_Ice.LocatorRegistry._op_setReplicatedAdapterDirectProxy.invoke(self, ((adapterId, replicaGroupId, proxy), context))

        def setReplicatedAdapterDirectProxyAsync(self, adapterId, replicaGroupId, proxy, context=None):
            """
            Set the adapter endpoints with the locator registry.
            
            Parameters
            ----------
            adapterId : str
                The adapter id.
            replicaGroupId : str
                The replica group id.
            proxy : (Ice.ObjectPrx or None)
                The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
                adapter endpoints. The proxy can be null, typically during adapter deactivation.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Ice.LocatorRegistry._op_setReplicatedAdapterDirectProxy.invokeAsync(self, ((adapterId, replicaGroupId, proxy), context))

        def setServerProcessProxy(self, id, proxy, context=None):
            """
            Set the process proxy for a server.
            
            Parameters
            ----------
            id : str
                The server id.
            proxy : (Ice.ProcessPrx or None)
                The process proxy. The proxy is never null.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            ServerNotFoundException
                Raised if the server cannot be found.
            """
            return _M_Ice.LocatorRegistry._op_setServerProcessProxy.invoke(self, ((id, proxy), context))

        def setServerProcessProxyAsync(self, id, proxy, context=None):
            """
            Set the process proxy for a server.
            
            Parameters
            ----------
            id : str
                The server id.
            proxy : (Ice.ProcessPrx or None)
                The process proxy. The proxy is never null.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Ice.LocatorRegistry._op_setServerProcessProxy.invokeAsync(self, ((id, proxy), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Ice.LocatorRegistryPrx.ice_checkedCast(proxy, '::Ice::LocatorRegistry', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Ice.LocatorRegistryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Ice::LocatorRegistry'
    _M_Ice._t_LocatorRegistryPrx = IcePy.defineProxy('::Ice::LocatorRegistry', LocatorRegistryPrx)

    _M_Ice.LocatorRegistryPrx = LocatorRegistryPrx
    del LocatorRegistryPrx

    _M_Ice.LocatorRegistry = None
    class LocatorRegistry(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::LocatorRegistry', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Ice::LocatorRegistry'

        @staticmethod
        def ice_staticId():
            return '::Ice::LocatorRegistry'

        def setAdapterDirectProxy(self, id, proxy, current=None):
            """
            Set the adapter endpoints with the locator registry.
            
            Parameters
            ----------
            id : str
                The adapter id.
            proxy : (Ice.ObjectPrx or None)
                The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
                adapter endpoints. The proxy can be null, typically during adapter deactivation.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AdapterAlreadyActiveException
                Raised if an adapter with the same id is already active.
            AdapterNotFoundException
                Raised if the adapter cannot be found, or if the locator only allows
                registered adapters to set their active proxy and the adapter is not registered with the locator.
            """
            raise NotImplementedError("servant method 'setAdapterDirectProxy' not implemented")

        def setReplicatedAdapterDirectProxy(self, adapterId, replicaGroupId, proxy, current=None):
            """
            Set the adapter endpoints with the locator registry.
            
            Parameters
            ----------
            adapterId : str
                The adapter id.
            replicaGroupId : str
                The replica group id.
            proxy : (Ice.ObjectPrx or None)
                The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the
                adapter endpoints. The proxy can be null, typically during adapter deactivation.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AdapterAlreadyActiveException
                Raised if an adapter with the same id is already active.
            AdapterNotFoundException
                Raised if the adapter cannot be found, or if the locator only allows
                registered adapters to set their active proxy and the adapter is not registered with the locator.
            InvalidReplicaGroupIdException
                Raised if the given replica group doesn't match the one registered
                with the locator registry for this object adapter.
            """
            raise NotImplementedError("servant method 'setReplicatedAdapterDirectProxy' not implemented")

        def setServerProcessProxy(self, id, proxy, current=None):
            """
            Set the process proxy for a server.
            
            Parameters
            ----------
            id : str
                The server id.
            proxy : (Ice.ProcessPrx or None)
                The process proxy. The proxy is never null.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            ServerNotFoundException
                Raised if the server cannot be found.
            """
            raise NotImplementedError("servant method 'setServerProcessProxy' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Ice._t_LocatorRegistryDisp)

        __repr__ = __str__

    LocatorRegistry._op_setAdapterDirectProxy = IcePy.Operation('setAdapterDirectProxy', Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_ObjectPrx, False, 0)), (), None, (_M_Ice._t_AdapterNotFoundException, _M_Ice._t_AdapterAlreadyActiveException))
    LocatorRegistry._op_setReplicatedAdapterDirectProxy = IcePy.Operation('setReplicatedAdapterDirectProxy', Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_ObjectPrx, False, 0)), (), None, (_M_Ice._t_AdapterNotFoundException, _M_Ice._t_AdapterAlreadyActiveException, _M_Ice._t_InvalidReplicaGroupIdException))
    LocatorRegistry._op_setServerProcessProxy = IcePy.Operation('setServerProcessProxy', Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_string, False, 0), ((), _M_Ice._t_ProcessPrx, False, 0)), (), None, (_M_Ice._t_ServerNotFoundException,))

    _M_Ice.LocatorRegistry = LocatorRegistry
    del LocatorRegistry

if 'LocatorFinder' not in _M_Ice.__dict__:
    _M_Ice._t_LocatorFinderPrx = IcePy.declareProxy('::Ice::LocatorFinder')

if 'LocatorFinderPrx' not in _M_Ice.__dict__:
    _M_Ice.LocatorFinderPrx = None
    class LocatorFinderPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new LocatorFinderPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def getLocator(self, context=None):
            """
            Get the locator proxy implemented by the process hosting this finder object. The proxy might point to
            several replicas. This proxy is never null.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Ice.LocatorPrx or None)
                The locator proxy.
            """
            return _M_Ice.LocatorFinder._op_getLocator.invoke(self, ((), context))

        def getLocatorAsync(self, context=None):
            """
            Get the locator proxy implemented by the process hosting this finder object. The proxy might point to
            several replicas. This proxy is never null.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Ice.LocatorFinder._op_getLocator.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Ice.LocatorFinderPrx.ice_checkedCast(proxy, '::Ice::LocatorFinder', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Ice.LocatorFinderPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Ice::LocatorFinder'
    _M_Ice._t_LocatorFinderPrx = IcePy.defineProxy('::Ice::LocatorFinder', LocatorFinderPrx)

    _M_Ice.LocatorFinderPrx = LocatorFinderPrx
    del LocatorFinderPrx

    _M_Ice.LocatorFinder = None
    class LocatorFinder(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::LocatorFinder', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Ice::LocatorFinder'

        @staticmethod
        def ice_staticId():
            return '::Ice::LocatorFinder'

        def getLocator(self, current=None):
            """
            Get the locator proxy implemented by the process hosting this finder object. The proxy might point to
            several replicas. This proxy is never null.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getLocator' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Ice._t_LocatorFinderDisp)

        __repr__ = __str__

    LocatorFinder._op_getLocator = IcePy.Operation('getLocator', Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Ice._t_LocatorPrx, False, 0), ())

    _M_Ice.LocatorFinder = LocatorFinder
    del LocatorFinder

# End of module Ice
