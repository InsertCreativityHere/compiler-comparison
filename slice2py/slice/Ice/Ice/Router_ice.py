# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `Router.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins
import Ice.BuiltinSequences_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module Ice
__name__ = 'Ice'

if 'RouterPrx' not in _M_Ice.__dict__:
    _M_Ice.RouterPrx = None
    class RouterPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new RouterPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def getClientProxy(self, context=None):
            """
            Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
            If a null proxy is returned, the client will forward requests to the router's endpoints.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Returns a tuple of ((Ice.ObjectPrx or None), (bool or None))
                A tuple containing:
                - (Ice.ObjectPrx or None)
                    The router's client proxy.
                - (bool or None)
                    Indicates whether or not the router supports a routing table. If it is supported, the
                    Ice runtime will call addProxies to populate the routing table. This out parameter is only supported
                    starting with Ice 3.7.
                    The Ice runtime assumes the router has a routing table if the hasRoutingTable is not set.
            """
            return _M_Ice.Router._op_getClientProxy.invoke(self, ((), context))

        def getClientProxyAsync(self, context=None):
            """
            Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
            If a null proxy is returned, the client will forward requests to the router's endpoints.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Ice.Router._op_getClientProxy.invokeAsync(self, ((), context))

        def getServerProxy(self, context=None):
            """
            Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Ice.ObjectPrx or None)
                The router's server proxy.
            """
            return _M_Ice.Router._op_getServerProxy.invoke(self, ((), context))

        def getServerProxyAsync(self, context=None):
            """
            Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Ice.Router._op_getServerProxy.invokeAsync(self, ((), context))

        def addProxies(self, proxies, context=None):
            """
            Add new proxy information to the router's routing table.
            
            Parameters
            ----------
            proxies : (Ice.ObjectPrx or None)[]
                The proxies to add. Adding a null proxy is an error.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Ice.ObjectPrx or None)[]
                Proxies discarded by the router. These proxies are all non-null.
            """
            return _M_Ice.Router._op_addProxies.invoke(self, ((proxies, ), context))

        def addProxiesAsync(self, proxies, context=None):
            """
            Add new proxy information to the router's routing table.
            
            Parameters
            ----------
            proxies : (Ice.ObjectPrx or None)[]
                The proxies to add. Adding a null proxy is an error.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Ice.Router._op_addProxies.invokeAsync(self, ((proxies, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Ice.RouterPrx.ice_checkedCast(proxy, '::Ice::Router', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Ice.RouterPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Ice::Router'
    _M_Ice._t_RouterPrx = IcePy.defineProxy('::Ice::Router', RouterPrx)

    _M_Ice.RouterPrx = RouterPrx
    del RouterPrx

    _M_Ice.Router = None
    class Router(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Ice::Router')

        def ice_id(self, current=None):
            return '::Ice::Router'

        @staticmethod
        def ice_staticId():
            return '::Ice::Router'

        def getClientProxy(self, current=None):
            """
            Get the router's client proxy, i.e., the proxy to use for forwarding requests from the client to the router.
            If a null proxy is returned, the client will forward requests to the router's endpoints.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getClientProxy' not implemented")

        def getServerProxy(self, current=None):
            """
            Get the router's server proxy, i.e., the proxy to use for forwarding requests from the server to the router.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getServerProxy' not implemented")

        def addProxies(self, proxies, current=None):
            """
            Add new proxy information to the router's routing table.
            
            Parameters
            ----------
            proxies : (Ice.ObjectPrx or None)[]
                The proxies to add. Adding a null proxy is an error.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'addProxies' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Ice._t_RouterDisp)

        __repr__ = __str__

    Router._op_getClientProxy = IcePy.Operation('getClientProxy', Ice.OperationMode.Idempotent, False, None, (), (), (((), IcePy._t_bool, True, 1),), ((), IcePy._t_ObjectPrx, False, 0), ())
    Router._op_getServerProxy = IcePy.Operation('getServerProxy', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_ObjectPrx, False, 0), ())
    Router._op_addProxies = IcePy.Operation('addProxies', Ice.OperationMode.Idempotent, False, None, (), (((), _M_Ice._t_ObjectProxySeq, False, 0),), (), ((), _M_Ice._t_ObjectProxySeq, False, 0), ())

    _M_Ice.Router = Router
    del Router

if 'RouterFinderPrx' not in _M_Ice.__dict__:
    _M_Ice.RouterFinderPrx = None
    class RouterFinderPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new RouterFinderPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def getRouter(self, context=None):
            """
            Get the router proxy implemented by the process hosting this finder object. The proxy might point to several
            replicas. This proxy is never null.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Ice.RouterPrx or None)
                The router proxy.
            """
            return _M_Ice.RouterFinder._op_getRouter.invoke(self, ((), context))

        def getRouterAsync(self, context=None):
            """
            Get the router proxy implemented by the process hosting this finder object. The proxy might point to several
            replicas. This proxy is never null.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Ice.RouterFinder._op_getRouter.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Ice.RouterFinderPrx.ice_checkedCast(proxy, '::Ice::RouterFinder', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Ice.RouterFinderPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Ice::RouterFinder'
    _M_Ice._t_RouterFinderPrx = IcePy.defineProxy('::Ice::RouterFinder', RouterFinderPrx)

    _M_Ice.RouterFinderPrx = RouterFinderPrx
    del RouterFinderPrx

    _M_Ice.RouterFinder = None
    class RouterFinder(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Ice::RouterFinder')

        def ice_id(self, current=None):
            return '::Ice::RouterFinder'

        @staticmethod
        def ice_staticId():
            return '::Ice::RouterFinder'

        def getRouter(self, current=None):
            """
            Get the router proxy implemented by the process hosting this finder object. The proxy might point to several
            replicas. This proxy is never null.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getRouter' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Ice._t_RouterFinderDisp)

        __repr__ = __str__

    RouterFinder._op_getRouter = IcePy.Operation('getRouter', Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Ice._t_RouterPrx, False, 0), ())

    _M_Ice.RouterFinder = RouterFinder
    del RouterFinder

# End of module Ice
