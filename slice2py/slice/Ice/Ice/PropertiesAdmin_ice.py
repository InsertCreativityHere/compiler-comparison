# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'PropertiesAdmin.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins
import Ice.PropertyDict_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module Ice
__name__ = 'Ice'

if 'PropertiesAdminPrx' not in _M_Ice.__dict__:
    _M_Ice.PropertiesAdminPrx = None
    class PropertiesAdminPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new PropertiesAdminPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def getProperty(self, key, context=None):
            """
            Get a property by key. If the property is not set, an empty string is returned.
            
            Parameters
            ----------
            key : str
                The property key.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            str
                The property value.
            """
            return _M_Ice.PropertiesAdmin._op_getProperty.invoke(self, ((key, ), context))

        def getPropertyAsync(self, key, context=None):
            """
            Get a property by key. If the property is not set, an empty string is returned.
            
            Parameters
            ----------
            key : str
                The property key.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Ice.PropertiesAdmin._op_getProperty.invokeAsync(self, ((key, ), context))

        def getPropertiesForPrefix(self, prefix, context=None):
            """
            Get all properties whose keys begin with prefix. If prefix is an empty string then all
            properties are returned.
            
            Parameters
            ----------
            prefix : str
                The prefix to search for (empty string if none).
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            dict where keys are str and values are str
                The matching property set.
            """
            return _M_Ice.PropertiesAdmin._op_getPropertiesForPrefix.invoke(self, ((prefix, ), context))

        def getPropertiesForPrefixAsync(self, prefix, context=None):
            """
            Get all properties whose keys begin with prefix. If prefix is an empty string then all
            properties are returned.
            
            Parameters
            ----------
            prefix : str
                The prefix to search for (empty string if none).
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Ice.PropertiesAdmin._op_getPropertiesForPrefix.invokeAsync(self, ((prefix, ), context))

        def setProperties(self, newProperties, context=None):
            """
            Update the communicator's properties with the given property set. If an entry in newProperties
            matches the name of an existing property, that property's value is replaced with the new value. If the new
            value is an empty string, the property is removed. Any existing properties that are not modified or removed
            by the entries in newProperties are retained with their original values.
            
            Parameters
            ----------
            newProperties : dict where keys are str and values are str
                Properties to be added, changed, or removed.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_Ice.PropertiesAdmin._op_setProperties.invoke(self, ((newProperties, ), context))

        def setPropertiesAsync(self, newProperties, context=None):
            """
            Update the communicator's properties with the given property set. If an entry in newProperties
            matches the name of an existing property, that property's value is replaced with the new value. If the new
            value is an empty string, the property is removed. Any existing properties that are not modified or removed
            by the entries in newProperties are retained with their original values.
            
            Parameters
            ----------
            newProperties : dict where keys are str and values are str
                Properties to be added, changed, or removed.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_Ice.PropertiesAdmin._op_setProperties.invokeAsync(self, ((newProperties, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Ice.PropertiesAdminPrx.ice_checkedCast(proxy, '::Ice::PropertiesAdmin', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Ice.PropertiesAdminPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Ice::PropertiesAdmin'
    _M_Ice._t_PropertiesAdminPrx = IcePy.defineProxy('::Ice::PropertiesAdmin', PropertiesAdminPrx)

    _M_Ice.PropertiesAdminPrx = PropertiesAdminPrx
    del PropertiesAdminPrx

    _M_Ice.PropertiesAdmin = None
    class PropertiesAdmin(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Ice::PropertiesAdmin')

        def ice_id(self, current=None):
            return '::Ice::PropertiesAdmin'

        @staticmethod
        def ice_staticId():
            return '::Ice::PropertiesAdmin'

        def getProperty(self, key, current=None):
            """
            Get a property by key. If the property is not set, an empty string is returned.
            
            Parameters
            ----------
            key : str
                The property key.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getProperty' not implemented")

        def getPropertiesForPrefix(self, prefix, current=None):
            """
            Get all properties whose keys begin with prefix. If prefix is an empty string then all
            properties are returned.
            
            Parameters
            ----------
            prefix : str
                The prefix to search for (empty string if none).
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getPropertiesForPrefix' not implemented")

        def setProperties(self, newProperties, current=None):
            """
            Update the communicator's properties with the given property set. If an entry in newProperties
            matches the name of an existing property, that property's value is replaced with the new value. If the new
            value is an empty string, the property is removed. Any existing properties that are not modified or removed
            by the entries in newProperties are retained with their original values.
            
            Parameters
            ----------
            newProperties : dict where keys are str and values are str
                Properties to be added, changed, or removed.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'setProperties' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Ice._t_PropertiesAdminDisp)

        __repr__ = __str__

    PropertiesAdmin._op_getProperty = IcePy.Operation('getProperty', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    PropertiesAdmin._op_getPropertiesForPrefix = IcePy.Operation('getPropertiesForPrefix', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Ice._t_PropertyDict, False, 0), ())
    PropertiesAdmin._op_setProperties = IcePy.Operation('setProperties', Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_PropertyDict, False, 0),), (), None, ())

    _M_Ice.PropertiesAdmin = PropertiesAdmin
    del PropertiesAdmin

# End of module Ice
