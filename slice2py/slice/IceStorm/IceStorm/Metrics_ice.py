# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Metrics.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins
import Ice.Metrics_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module IceMX
_M_IceMX = Ice.openModule('IceMX')

# Start of module IceMX
__name__ = 'IceMX'

if 'TopicMetrics' not in _M_IceMX.__dict__:
    _M_IceMX.TopicMetrics = None
    class TopicMetrics(_M_IceMX.Metrics):
        """
        Provides information on IceStorm topics.
        
        Attributes
        ----------
        published : int
            Number of events published on the topic by publishers.
        forwarded : int
            Number of events forwarded on the topic by IceStorm topic links.
        """
        def __init__(self, id='', total=0, current=0, totalLifetime=0, failures=0, published=0, forwarded=0):
            _M_IceMX.Metrics.__init__(self, id, total, current, totalLifetime, failures)
            self.published = published
            self.forwarded = forwarded

        def ice_id(self):
            return '::IceMX::TopicMetrics'

        @staticmethod
        def ice_staticId():
            return '::IceMX::TopicMetrics'

        def __str__(self):
            return IcePy.stringify(self, _M_IceMX._t_TopicMetrics)

        __repr__ = __str__

    _M_IceMX._t_TopicMetrics = IcePy.defineValue('::IceMX::TopicMetrics', TopicMetrics, -1, (), False, _M_IceMX._t_Metrics, (
        ('published', (), IcePy._t_long, False, 0),
        ('forwarded', (), IcePy._t_long, False, 0)
    ))
    TopicMetrics._ice_type = _M_IceMX._t_TopicMetrics

    _M_IceMX.TopicMetrics = TopicMetrics
    del TopicMetrics

if 'SubscriberMetrics' not in _M_IceMX.__dict__:
    _M_IceMX.SubscriberMetrics = None
    class SubscriberMetrics(_M_IceMX.Metrics):
        """
        Provides information on IceStorm subscribers.
        
        Attributes
        ----------
        queued : int
            Number of queued events.
        outstanding : int
            Number of outstanding events.
        delivered : int
            Number of forwarded events.
        """
        def __init__(self, id='', total=0, current=0, totalLifetime=0, failures=0, queued=0, outstanding=0, delivered=0):
            _M_IceMX.Metrics.__init__(self, id, total, current, totalLifetime, failures)
            self.queued = queued
            self.outstanding = outstanding
            self.delivered = delivered

        def ice_id(self):
            return '::IceMX::SubscriberMetrics'

        @staticmethod
        def ice_staticId():
            return '::IceMX::SubscriberMetrics'

        def __str__(self):
            return IcePy.stringify(self, _M_IceMX._t_SubscriberMetrics)

        __repr__ = __str__

    _M_IceMX._t_SubscriberMetrics = IcePy.defineValue('::IceMX::SubscriberMetrics', SubscriberMetrics, -1, (), False, _M_IceMX._t_Metrics, (
        ('queued', (), IcePy._t_int, False, 0),
        ('outstanding', (), IcePy._t_int, False, 0),
        ('delivered', (), IcePy._t_long, False, 0)
    ))
    SubscriberMetrics._ice_type = _M_IceMX._t_SubscriberMetrics

    _M_IceMX.SubscriberMetrics = SubscriberMetrics
    del SubscriberMetrics

# End of module IceMX
