# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `IceStorm.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins
import Ice.Identity_ice
import IceStorm.Metrics_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module IceMX
_M_IceMX = Ice.openModule('IceMX')

# Start of module IceStorm
_M_IceStorm = Ice.openModule('IceStorm')
__name__ = 'IceStorm'
_M_IceStorm.__doc__ = """
A messaging service with support for federation. In contrast to most other messaging or event services, IceStorm
supports typed events, meaning that broadcasting a message over a federation is as easy as invoking a method on an
interface.
"""

if 'Topic' not in _M_IceStorm.__dict__:
    _M_IceStorm._t_TopicPrx = IcePy.declareProxy('::IceStorm::Topic')

if 'LinkInfo' not in _M_IceStorm.__dict__:
    _M_IceStorm.LinkInfo = None
    class LinkInfo(object):
        """
        Information on the topic links.
        
        Attributes
        ----------
        theTopic : (IceStorm.TopicPrx or None)
            The linked topic. It is never null.
        name : str
            The name of the linked topic.
        cost : int
            The cost of traversing this link.
        """
        def __init__(self, theTopic=None, name='', cost=0):
            self.theTopic = theTopic
            self.name = name
            self.cost = cost

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_IceStorm.LinkInfo):
                return NotImplemented
            else:
                if self.theTopic != other.theTopic:
                    return False
                if self.name != other.name:
                    return False
                if self.cost != other.cost:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_IceStorm._t_LinkInfo)

        __repr__ = __str__

    _M_IceStorm._t_LinkInfo = IcePy.defineStruct('::IceStorm::LinkInfo', LinkInfo, (), (
        ('theTopic', (), _M_IceStorm._t_TopicPrx),
        ('name', (), IcePy._t_string),
        ('cost', (), IcePy._t_int)
    ))

    _M_IceStorm.LinkInfo = LinkInfo
    del LinkInfo

if '_t_LinkInfoSeq' not in _M_IceStorm.__dict__:
    _M_IceStorm._t_LinkInfoSeq = IcePy.defineSequence('::IceStorm::LinkInfoSeq', (), _M_IceStorm._t_LinkInfo)

if '_t_QoS' not in _M_IceStorm.__dict__:
    _M_IceStorm._t_QoS = IcePy.defineDictionary('::IceStorm::QoS', (), IcePy._t_string, IcePy._t_string)

if 'LinkExists' not in _M_IceStorm.__dict__:
    _M_IceStorm.LinkExists = None
    class LinkExists(Ice.UserException):
        """
        This exception indicates that an attempt was made to create a link that already exists.
        
        Attributes
        ----------
        name : str
            The name of the linked topic.
        """
        def __init__(self, name=''):
            self.name = name

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceStorm::LinkExists'

    _M_IceStorm._t_LinkExists = IcePy.defineException('::IceStorm::LinkExists', LinkExists, (), None, (('name', (), IcePy._t_string, False, 0),))
    LinkExists._ice_type = _M_IceStorm._t_LinkExists

    _M_IceStorm.LinkExists = LinkExists
    del LinkExists

if 'NoSuchLink' not in _M_IceStorm.__dict__:
    _M_IceStorm.NoSuchLink = None
    class NoSuchLink(Ice.UserException):
        """
        This exception indicates that an attempt was made to remove a link that does not exist.
        
        Attributes
        ----------
        name : str
            The name of the link that does not exist.
        """
        def __init__(self, name=''):
            self.name = name

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceStorm::NoSuchLink'

    _M_IceStorm._t_NoSuchLink = IcePy.defineException('::IceStorm::NoSuchLink', NoSuchLink, (), None, (('name', (), IcePy._t_string, False, 0),))
    NoSuchLink._ice_type = _M_IceStorm._t_NoSuchLink

    _M_IceStorm.NoSuchLink = NoSuchLink
    del NoSuchLink

if 'AlreadySubscribed' not in _M_IceStorm.__dict__:
    _M_IceStorm.AlreadySubscribed = None
    class AlreadySubscribed(Ice.UserException):
        """
        This exception indicates that an attempt was made to subscribe a proxy for which a subscription already exists.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceStorm::AlreadySubscribed'

    _M_IceStorm._t_AlreadySubscribed = IcePy.defineException('::IceStorm::AlreadySubscribed', AlreadySubscribed, (), None, ())
    AlreadySubscribed._ice_type = _M_IceStorm._t_AlreadySubscribed

    _M_IceStorm.AlreadySubscribed = AlreadySubscribed
    del AlreadySubscribed

if 'InvalidSubscriber' not in _M_IceStorm.__dict__:
    _M_IceStorm.InvalidSubscriber = None
    class InvalidSubscriber(Ice.UserException):
        """
        This exception indicates that an attempt was made to subscribe a proxy that is null.
        
        Attributes
        ----------
        reason : str
            The reason for the failure.
        """
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceStorm::InvalidSubscriber'

    _M_IceStorm._t_InvalidSubscriber = IcePy.defineException('::IceStorm::InvalidSubscriber', InvalidSubscriber, (), None, (('reason', (), IcePy._t_string, False, 0),))
    InvalidSubscriber._ice_type = _M_IceStorm._t_InvalidSubscriber

    _M_IceStorm.InvalidSubscriber = InvalidSubscriber
    del InvalidSubscriber

if 'BadQoS' not in _M_IceStorm.__dict__:
    _M_IceStorm.BadQoS = None
    class BadQoS(Ice.UserException):
        """
        This exception indicates that a subscription failed due to an invalid QoS.
        
        Attributes
        ----------
        reason : str
            The reason for the failure.
        """
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceStorm::BadQoS'

    _M_IceStorm._t_BadQoS = IcePy.defineException('::IceStorm::BadQoS', BadQoS, (), None, (('reason', (), IcePy._t_string, False, 0),))
    BadQoS._ice_type = _M_IceStorm._t_BadQoS

    _M_IceStorm.BadQoS = BadQoS
    del BadQoS

if 'TopicPrx' not in _M_IceStorm.__dict__:
    _M_IceStorm.TopicPrx = None
    class TopicPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new TopicPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def getName(self, context=None):
            """
            Get the name of this topic.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            str
                The name of the topic.
            """
            return _M_IceStorm.Topic._op_getName.invoke(self, ((), context))

        def getNameAsync(self, context=None):
            """
            Get the name of this topic.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.Topic._op_getName.invokeAsync(self, ((), context))

        def getPublisher(self, context=None):
            """
            Get a proxy to a publisher object for this topic. To publish data to a topic, the publisher calls getPublisher
            and then creates a proxy with the publisher type from this proxy. If a replicated IceStorm
            deployment is used this call may return a replicated proxy. The returned proxy is never null.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Ice.ObjectPrx or None)
                A proxy to publish data on this topic.
            """
            return _M_IceStorm.Topic._op_getPublisher.invoke(self, ((), context))

        def getPublisherAsync(self, context=None):
            """
            Get a proxy to a publisher object for this topic. To publish data to a topic, the publisher calls getPublisher
            and then creates a proxy with the publisher type from this proxy. If a replicated IceStorm
            deployment is used this call may return a replicated proxy. The returned proxy is never null.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.Topic._op_getPublisher.invokeAsync(self, ((), context))

        def getNonReplicatedPublisher(self, context=None):
            """
            Get a non-replicated proxy to a publisher object for this topic. To publish data to a topic, the publisher
            calls getPublisher and then creates a proxy with the publisher type from this proxy. The returned proxy is
            never null.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Ice.ObjectPrx or None)
                A proxy to publish data on this topic.
            """
            return _M_IceStorm.Topic._op_getNonReplicatedPublisher.invoke(self, ((), context))

        def getNonReplicatedPublisherAsync(self, context=None):
            """
            Get a non-replicated proxy to a publisher object for this topic. To publish data to a topic, the publisher
            calls getPublisher and then creates a proxy with the publisher type from this proxy. The returned proxy is
            never null.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.Topic._op_getNonReplicatedPublisher.invokeAsync(self, ((), context))

        def subscribeAndGetPublisher(self, theQoS, subscriber, context=None):
            """
            Subscribe with the given qos to this topic. A per-subscriber publisher object is returned.
            
            Parameters
            ----------
            theQoS : dict where keys are str and values are str
                The quality of service parameters for this subscription.
            subscriber : (Ice.ObjectPrx or None)
                The subscriber's proxy. This proxy is never null.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Ice.ObjectPrx or None)
                The per-subscriber publisher object. The returned object is never null.
            
            Raises
            ------
            AlreadySubscribed
                Raised if the subscriber object is already subscribed.
            BadQoS
                Raised if the requested quality of service is unavailable or invalid.
            InvalidSubscriber
                Raised if the subscriber object is null.
            """
            return _M_IceStorm.Topic._op_subscribeAndGetPublisher.invoke(self, ((theQoS, subscriber), context))

        def subscribeAndGetPublisherAsync(self, theQoS, subscriber, context=None):
            """
            Subscribe with the given qos to this topic. A per-subscriber publisher object is returned.
            
            Parameters
            ----------
            theQoS : dict where keys are str and values are str
                The quality of service parameters for this subscription.
            subscriber : (Ice.ObjectPrx or None)
                The subscriber's proxy. This proxy is never null.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.Topic._op_subscribeAndGetPublisher.invokeAsync(self, ((theQoS, subscriber), context))

        def unsubscribe(self, subscriber, context=None):
            """
            Unsubscribe the given subscriber.
            
            Parameters
            ----------
            subscriber : (Ice.ObjectPrx or None)
                The proxy of an existing subscriber. This proxy is never null.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceStorm.Topic._op_unsubscribe.invoke(self, ((subscriber, ), context))

        def unsubscribeAsync(self, subscriber, context=None):
            """
            Unsubscribe the given subscriber.
            
            Parameters
            ----------
            subscriber : (Ice.ObjectPrx or None)
                The proxy of an existing subscriber. This proxy is never null.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.Topic._op_unsubscribe.invokeAsync(self, ((subscriber, ), context))

        def link(self, linkTo, cost, context=None):
            """
            Create a link to the given topic. All events originating on this topic will also be sent to
            linkTo.
            
            Parameters
            ----------
            linkTo : (IceStorm.TopicPrx or None)
                The topic to link to. This proxy is never null.
            cost : int
                The cost to the linked topic.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            LinkExists
                Raised if a link to the same topic already exists.
            """
            return _M_IceStorm.Topic._op_link.invoke(self, ((linkTo, cost), context))

        def linkAsync(self, linkTo, cost, context=None):
            """
            Create a link to the given topic. All events originating on this topic will also be sent to
            linkTo.
            
            Parameters
            ----------
            linkTo : (IceStorm.TopicPrx or None)
                The topic to link to. This proxy is never null.
            cost : int
                The cost to the linked topic.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.Topic._op_link.invokeAsync(self, ((linkTo, cost), context))

        def unlink(self, linkTo, context=None):
            """
            Destroy the link from this topic to the given topic linkTo.
            
            Parameters
            ----------
            linkTo : (IceStorm.TopicPrx or None)
                The topic to destroy the link to. This proxy is never null.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            NoSuchLink
                Raised if a link to the topic does not exist.
            """
            return _M_IceStorm.Topic._op_unlink.invoke(self, ((linkTo, ), context))

        def unlinkAsync(self, linkTo, context=None):
            """
            Destroy the link from this topic to the given topic linkTo.
            
            Parameters
            ----------
            linkTo : (IceStorm.TopicPrx or None)
                The topic to destroy the link to. This proxy is never null.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.Topic._op_unlink.invokeAsync(self, ((linkTo, ), context))

        def getLinkInfoSeq(self, context=None):
            """
            Retrieve information on the current links.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            IceStorm.LinkInfo[]
                A sequence of LinkInfo objects.
            """
            return _M_IceStorm.Topic._op_getLinkInfoSeq.invoke(self, ((), context))

        def getLinkInfoSeqAsync(self, context=None):
            """
            Retrieve information on the current links.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.Topic._op_getLinkInfoSeq.invokeAsync(self, ((), context))

        def getSubscribers(self, context=None):
            """
            Retrieve the list of subscribers for this topic.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Identity[]
                The sequence of Ice identities for the subscriber objects.
            """
            return _M_IceStorm.Topic._op_getSubscribers.invoke(self, ((), context))

        def getSubscribersAsync(self, context=None):
            """
            Retrieve the list of subscribers for this topic.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.Topic._op_getSubscribers.invokeAsync(self, ((), context))

        def destroy(self, context=None):
            """
            Destroy the topic.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceStorm.Topic._op_destroy.invoke(self, ((), context))

        def destroyAsync(self, context=None):
            """
            Destroy the topic.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.Topic._op_destroy.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceStorm.TopicPrx.ice_checkedCast(proxy, '::IceStorm::Topic', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceStorm.TopicPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceStorm::Topic'
    _M_IceStorm._t_TopicPrx = IcePy.defineProxy('::IceStorm::Topic', TopicPrx)

    _M_IceStorm.TopicPrx = TopicPrx
    del TopicPrx

    _M_IceStorm.Topic = None
    class Topic(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceStorm::Topic')

        def ice_id(self, current=None):
            return '::IceStorm::Topic'

        @staticmethod
        def ice_staticId():
            return '::IceStorm::Topic'

        def getName(self, current=None):
            """
            Get the name of this topic.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getName' not implemented")

        def getPublisher(self, current=None):
            """
            Get a proxy to a publisher object for this topic. To publish data to a topic, the publisher calls getPublisher
            and then creates a proxy with the publisher type from this proxy. If a replicated IceStorm
            deployment is used this call may return a replicated proxy. The returned proxy is never null.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getPublisher' not implemented")

        def getNonReplicatedPublisher(self, current=None):
            """
            Get a non-replicated proxy to a publisher object for this topic. To publish data to a topic, the publisher
            calls getPublisher and then creates a proxy with the publisher type from this proxy. The returned proxy is
            never null.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getNonReplicatedPublisher' not implemented")

        def subscribeAndGetPublisher(self, theQoS, subscriber, current=None):
            """
            Subscribe with the given qos to this topic. A per-subscriber publisher object is returned.
            
            Parameters
            ----------
            theQoS : dict where keys are str and values are str
                The quality of service parameters for this subscription.
            subscriber : (Ice.ObjectPrx or None)
                The subscriber's proxy. This proxy is never null.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AlreadySubscribed
                Raised if the subscriber object is already subscribed.
            BadQoS
                Raised if the requested quality of service is unavailable or invalid.
            InvalidSubscriber
                Raised if the subscriber object is null.
            """
            raise NotImplementedError("servant method 'subscribeAndGetPublisher' not implemented")

        def unsubscribe(self, subscriber, current=None):
            """
            Unsubscribe the given subscriber.
            
            Parameters
            ----------
            subscriber : (Ice.ObjectPrx or None)
                The proxy of an existing subscriber. This proxy is never null.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'unsubscribe' not implemented")

        def link(self, linkTo, cost, current=None):
            """
            Create a link to the given topic. All events originating on this topic will also be sent to
            linkTo.
            
            Parameters
            ----------
            linkTo : (IceStorm.TopicPrx or None)
                The topic to link to. This proxy is never null.
            cost : int
                The cost to the linked topic.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            LinkExists
                Raised if a link to the same topic already exists.
            """
            raise NotImplementedError("servant method 'link' not implemented")

        def unlink(self, linkTo, current=None):
            """
            Destroy the link from this topic to the given topic linkTo.
            
            Parameters
            ----------
            linkTo : (IceStorm.TopicPrx or None)
                The topic to destroy the link to. This proxy is never null.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            NoSuchLink
                Raised if a link to the topic does not exist.
            """
            raise NotImplementedError("servant method 'unlink' not implemented")

        def getLinkInfoSeq(self, current=None):
            """
            Retrieve information on the current links.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getLinkInfoSeq' not implemented")

        def getSubscribers(self, current=None):
            """
            Retrieve the list of subscribers for this topic.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getSubscribers' not implemented")

        def destroy(self, current=None):
            """
            Destroy the topic.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'destroy' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceStorm._t_TopicDisp)

        __repr__ = __str__

    Topic._op_getName = IcePy.Operation('getName', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Topic._op_getPublisher = IcePy.Operation('getPublisher', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_ObjectPrx, False, 0), ())
    Topic._op_getNonReplicatedPublisher = IcePy.Operation('getNonReplicatedPublisher', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_ObjectPrx, False, 0), ())
    Topic._op_subscribeAndGetPublisher = IcePy.Operation('subscribeAndGetPublisher', Ice.OperationMode.Normal, False, None, (), (((), _M_IceStorm._t_QoS, False, 0), ((), IcePy._t_ObjectPrx, False, 0)), (), ((), IcePy._t_ObjectPrx, False, 0), (_M_IceStorm._t_AlreadySubscribed, _M_IceStorm._t_InvalidSubscriber, _M_IceStorm._t_BadQoS))
    Topic._op_unsubscribe = IcePy.Operation('unsubscribe', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_ObjectPrx, False, 0),), (), None, ())
    Topic._op_link = IcePy.Operation('link', Ice.OperationMode.Normal, False, None, (), (((), _M_IceStorm._t_TopicPrx, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_IceStorm._t_LinkExists,))
    Topic._op_unlink = IcePy.Operation('unlink', Ice.OperationMode.Normal, False, None, (), (((), _M_IceStorm._t_TopicPrx, False, 0),), (), None, (_M_IceStorm._t_NoSuchLink,))
    Topic._op_getLinkInfoSeq = IcePy.Operation('getLinkInfoSeq', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_IceStorm._t_LinkInfoSeq, False, 0), ())
    Topic._op_getSubscribers = IcePy.Operation('getSubscribers', Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Ice._t_IdentitySeq, False, 0), ())
    Topic._op_destroy = IcePy.Operation('destroy', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_IceStorm.Topic = Topic
    del Topic

if '_t_TopicDict' not in _M_IceStorm.__dict__:
    _M_IceStorm._t_TopicDict = IcePy.defineDictionary('::IceStorm::TopicDict', (), IcePy._t_string, _M_IceStorm._t_TopicPrx)

if 'TopicExists' not in _M_IceStorm.__dict__:
    _M_IceStorm.TopicExists = None
    class TopicExists(Ice.UserException):
        """
        This exception indicates that an attempt was made to create a topic that already exists.
        
        Attributes
        ----------
        name : str
            The name of the topic that already exists.
        """
        def __init__(self, name=''):
            self.name = name

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceStorm::TopicExists'

    _M_IceStorm._t_TopicExists = IcePy.defineException('::IceStorm::TopicExists', TopicExists, (), None, (('name', (), IcePy._t_string, False, 0),))
    TopicExists._ice_type = _M_IceStorm._t_TopicExists

    _M_IceStorm.TopicExists = TopicExists
    del TopicExists

if 'NoSuchTopic' not in _M_IceStorm.__dict__:
    _M_IceStorm.NoSuchTopic = None
    class NoSuchTopic(Ice.UserException):
        """
        This exception indicates that an attempt was made to retrieve a topic that does not exist.
        
        Attributes
        ----------
        name : str
            The name of the topic that does not exist.
        """
        def __init__(self, name=''):
            self.name = name

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceStorm::NoSuchTopic'

    _M_IceStorm._t_NoSuchTopic = IcePy.defineException('::IceStorm::NoSuchTopic', NoSuchTopic, (), None, (('name', (), IcePy._t_string, False, 0),))
    NoSuchTopic._ice_type = _M_IceStorm._t_NoSuchTopic

    _M_IceStorm.NoSuchTopic = NoSuchTopic
    del NoSuchTopic

if 'TopicManagerPrx' not in _M_IceStorm.__dict__:
    _M_IceStorm.TopicManagerPrx = None
    class TopicManagerPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new TopicManagerPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def create(self, name, context=None):
            """
            Create a new topic. The topic name must be unique.
            
            Parameters
            ----------
            name : str
                The name of the topic.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (IceStorm.TopicPrx or None)
                A proxy to the topic instance. The returned proxy is never null.
            
            Raises
            ------
            TopicExists
                Raised if a topic with the same name already exists.
            """
            return _M_IceStorm.TopicManager._op_create.invoke(self, ((name, ), context))

        def createAsync(self, name, context=None):
            """
            Create a new topic. The topic name must be unique.
            
            Parameters
            ----------
            name : str
                The name of the topic.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.TopicManager._op_create.invokeAsync(self, ((name, ), context))

        def retrieve(self, name, context=None):
            """
            Retrieve a topic by name.
            
            Parameters
            ----------
            name : str
                The name of the topic.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (IceStorm.TopicPrx or None)
                A proxy to the topic instance. The returned proxy is never null.
            
            Raises
            ------
            NoSuchTopic
                Raised if the topic does not exist.
            """
            return _M_IceStorm.TopicManager._op_retrieve.invoke(self, ((name, ), context))

        def retrieveAsync(self, name, context=None):
            """
            Retrieve a topic by name.
            
            Parameters
            ----------
            name : str
                The name of the topic.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.TopicManager._op_retrieve.invokeAsync(self, ((name, ), context))

        def retrieveAll(self, context=None):
            """
            Retrieve all topics managed by this topic manager.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            dict where keys are str and values are (IceStorm.TopicPrx or None)
                A dictionary of string, topic proxy pairs.
            """
            return _M_IceStorm.TopicManager._op_retrieveAll.invoke(self, ((), context))

        def retrieveAllAsync(self, context=None):
            """
            Retrieve all topics managed by this topic manager.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.TopicManager._op_retrieveAll.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceStorm.TopicManagerPrx.ice_checkedCast(proxy, '::IceStorm::TopicManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceStorm.TopicManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceStorm::TopicManager'
    _M_IceStorm._t_TopicManagerPrx = IcePy.defineProxy('::IceStorm::TopicManager', TopicManagerPrx)

    _M_IceStorm.TopicManagerPrx = TopicManagerPrx
    del TopicManagerPrx

    _M_IceStorm.TopicManager = None
    class TopicManager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceStorm::TopicManager')

        def ice_id(self, current=None):
            return '::IceStorm::TopicManager'

        @staticmethod
        def ice_staticId():
            return '::IceStorm::TopicManager'

        def create(self, name, current=None):
            """
            Create a new topic. The topic name must be unique.
            
            Parameters
            ----------
            name : str
                The name of the topic.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            TopicExists
                Raised if a topic with the same name already exists.
            """
            raise NotImplementedError("servant method 'create' not implemented")

        def retrieve(self, name, current=None):
            """
            Retrieve a topic by name.
            
            Parameters
            ----------
            name : str
                The name of the topic.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            NoSuchTopic
                Raised if the topic does not exist.
            """
            raise NotImplementedError("servant method 'retrieve' not implemented")

        def retrieveAll(self, current=None):
            """
            Retrieve all topics managed by this topic manager.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'retrieveAll' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceStorm._t_TopicManagerDisp)

        __repr__ = __str__

    TopicManager._op_create = IcePy.Operation('create', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceStorm._t_TopicPrx, False, 0), (_M_IceStorm._t_TopicExists,))
    TopicManager._op_retrieve = IcePy.Operation('retrieve', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceStorm._t_TopicPrx, False, 0), (_M_IceStorm._t_NoSuchTopic,))
    TopicManager._op_retrieveAll = IcePy.Operation('retrieveAll', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_IceStorm._t_TopicDict, False, 0), ())

    _M_IceStorm.TopicManager = TopicManager
    del TopicManager

if 'FinderPrx' not in _M_IceStorm.__dict__:
    _M_IceStorm.FinderPrx = None
    class FinderPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new FinderPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def getTopicManager(self, context=None):
            """
            Get the topic manager proxy. The proxy might point to several replicas.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (IceStorm.TopicManagerPrx or None)
                The topic manager proxy. The returned proxy is never null.
            """
            return _M_IceStorm.Finder._op_getTopicManager.invoke(self, ((), context))

        def getTopicManagerAsync(self, context=None):
            """
            Get the topic manager proxy. The proxy might point to several replicas.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.Finder._op_getTopicManager.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceStorm.FinderPrx.ice_checkedCast(proxy, '::IceStorm::Finder', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceStorm.FinderPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceStorm::Finder'
    _M_IceStorm._t_FinderPrx = IcePy.defineProxy('::IceStorm::Finder', FinderPrx)

    _M_IceStorm.FinderPrx = FinderPrx
    del FinderPrx

    _M_IceStorm.Finder = None
    class Finder(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceStorm::Finder')

        def ice_id(self, current=None):
            return '::IceStorm::Finder'

        @staticmethod
        def ice_staticId():
            return '::IceStorm::Finder'

        def getTopicManager(self, current=None):
            """
            Get the topic manager proxy. The proxy might point to several replicas.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getTopicManager' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceStorm._t_FinderDisp)

        __repr__ = __str__

    Finder._op_getTopicManager = IcePy.Operation('getTopicManager', Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_IceStorm._t_TopicManagerPrx, False, 0), ())

    _M_IceStorm.Finder = Finder
    del Finder

# End of module IceStorm
