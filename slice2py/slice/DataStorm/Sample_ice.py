# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Sample.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins

# Start of module DataStorm
_M_DataStorm = Ice.openModule('DataStorm')
__name__ = 'DataStorm'

if 'SampleEvent' not in _M_DataStorm.__dict__:
    _M_DataStorm.SampleEvent = None
    class SampleEvent(Ice.EnumBase):
        """
        The sample event matches the operation used by the DataWriter to update the data element. It also provides
        information on what to expect from the sample. A sample with the Add or Update event always provide a value
        while a sample with the Remove type doesn't.
        Enumerators:
        Add -- The element has been added.
        Update -- The element has been updated.
        PartialUpdate -- The element has been partially updated.
        Remove -- The element has been removed.
        """

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    SampleEvent.Add = SampleEvent("Add", 0)
    SampleEvent.Update = SampleEvent("Update", 1)
    SampleEvent.PartialUpdate = SampleEvent("PartialUpdate", 2)
    SampleEvent.Remove = SampleEvent("Remove", 3)
    SampleEvent._enumerators = { 0:SampleEvent.Add, 1:SampleEvent.Update, 2:SampleEvent.PartialUpdate, 3:SampleEvent.Remove }

    _M_DataStorm._t_SampleEvent = IcePy.defineEnum('::DataStorm::SampleEvent', SampleEvent, (), SampleEvent._enumerators)

    _M_DataStorm.SampleEvent = SampleEvent
    del SampleEvent

if '_t_SampleEventSeq' not in _M_DataStorm.__dict__:
    _M_DataStorm._t_SampleEventSeq = IcePy.defineSequence('::DataStorm::SampleEventSeq', (), _M_DataStorm._t_SampleEvent)

# End of module DataStorm
