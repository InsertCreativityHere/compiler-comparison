# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `IceDiscovery.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins
import Ice.Identity_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module IceDiscovery
_M_IceDiscovery = Ice.openModule('IceDiscovery')
__name__ = 'IceDiscovery'

if 'LookupReplyPrx' not in _M_IceDiscovery.__dict__:
    _M_IceDiscovery.LookupReplyPrx = None
    class LookupReplyPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new LookupReplyPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def foundObjectById(self, id, prx, context=None):
            """
            Reply to the findObjectById request.
            
            Parameters
            ----------
            id : Ice.Identity
                The identity of the object.
            prx : Ice.ObjectPrx or None
                The proxy of the object. This proxy is never null.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceDiscovery.LookupReply._op_foundObjectById.invoke(self, ((id, prx), context))

        def foundObjectByIdAsync(self, id, prx, context=None):
            """
            Reply to the findObjectById request.
            
            Parameters
            ----------
            id : Ice.Identity
                The identity of the object.
            prx : Ice.ObjectPrx or None
                The proxy of the object. This proxy is never null.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceDiscovery.LookupReply._op_foundObjectById.invokeAsync(self, ((id, prx), context))

        def foundAdapterById(self, id, prx, isReplicaGroup, context=None):
            """
            Reply to the findAdpaterById request.
            
            Parameters
            ----------
            id : str
                The adapter ID.
            prx : Ice.ObjectPrx or None
                The adapter proxy (a dummy proxy created by the adapter). The proxy provides the adapter endpoints. This proxy is never null.
            isReplicaGroup : bool
                True if the adapter is also a member of a replica group.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceDiscovery.LookupReply._op_foundAdapterById.invoke(self, ((id, prx, isReplicaGroup), context))

        def foundAdapterByIdAsync(self, id, prx, isReplicaGroup, context=None):
            """
            Reply to the findAdpaterById request.
            
            Parameters
            ----------
            id : str
                The adapter ID.
            prx : Ice.ObjectPrx or None
                The adapter proxy (a dummy proxy created by the adapter). The proxy provides the adapter endpoints. This proxy is never null.
            isReplicaGroup : bool
                True if the adapter is also a member of a replica group.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceDiscovery.LookupReply._op_foundAdapterById.invokeAsync(self, ((id, prx, isReplicaGroup), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceDiscovery.LookupReplyPrx.ice_checkedCast(proxy, '::IceDiscovery::LookupReply', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceDiscovery.LookupReplyPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceDiscovery::LookupReply'
    _M_IceDiscovery._t_LookupReplyPrx = IcePy.defineProxy('::IceDiscovery::LookupReply', LookupReplyPrx)

    _M_IceDiscovery.LookupReplyPrx = LookupReplyPrx
    del LookupReplyPrx

    _M_IceDiscovery.LookupReply = None
    class LookupReply(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceDiscovery::LookupReply')

        def ice_id(self, current=None):
            return '::IceDiscovery::LookupReply'

        @staticmethod
        def ice_staticId():
            return '::IceDiscovery::LookupReply'

        def foundObjectById(self, id, prx, current=None):
            """
            Reply to the findObjectById request.
            
            Parameters
            ----------
            id : Ice.Identity
                The identity of the object.
            prx : Ice.ObjectPrx or None
                The proxy of the object. This proxy is never null.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'foundObjectById' not implemented")

        def foundAdapterById(self, id, prx, isReplicaGroup, current=None):
            """
            Reply to the findAdpaterById request.
            
            Parameters
            ----------
            id : str
                The adapter ID.
            prx : Ice.ObjectPrx or None
                The adapter proxy (a dummy proxy created by the adapter). The proxy provides the adapter endpoints. This proxy is never null.
            isReplicaGroup : bool
                True if the adapter is also a member of a replica group.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'foundAdapterById' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceDiscovery._t_LookupReplyDisp)

        __repr__ = __str__

    _M_IceDiscovery._t_LookupReplyDisp = IcePy.defineClass('::IceDiscovery::LookupReply', LookupReply, (), None, ())
    LookupReply._ice_type = _M_IceDiscovery._t_LookupReplyDisp

    LookupReply._op_foundObjectById = IcePy.Operation('foundObjectById', Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0), ((), IcePy._t_ObjectPrx, False, 0)), (), None, ())
    LookupReply._op_foundAdapterById = IcePy.Operation('foundAdapterById', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_ObjectPrx, False, 0), ((), IcePy._t_bool, False, 0)), (), None, ())

    _M_IceDiscovery.LookupReply = LookupReply
    del LookupReply

if 'LookupPrx' not in _M_IceDiscovery.__dict__:
    _M_IceDiscovery.LookupPrx = None
    class LookupPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new LookupPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def findObjectById(self, domainId, id, reply, context=None):
            """
            Request to find an Ice object
            
            Parameters
            ----------
            domainId : str
                The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a matching domain identifier.
            id : Ice.Identity
                The object identity.
            reply : IceDiscovery.LookupReplyPrx or None
                The proxy of the LookupReply interface that should be used to send the reply if a matching object is found. The reply proxy is never null.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceDiscovery.Lookup._op_findObjectById.invoke(self, ((domainId, id, reply), context))

        def findObjectByIdAsync(self, domainId, id, reply, context=None):
            """
            Request to find an Ice object
            
            Parameters
            ----------
            domainId : str
                The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a matching domain identifier.
            id : Ice.Identity
                The object identity.
            reply : IceDiscovery.LookupReplyPrx or None
                The proxy of the LookupReply interface that should be used to send the reply if a matching object is found. The reply proxy is never null.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceDiscovery.Lookup._op_findObjectById.invokeAsync(self, ((domainId, id, reply), context))

        def findAdapterById(self, domainId, id, reply, context=None):
            """
            Request to find an object adapter
            
            Parameters
            ----------
            domainId : str
                The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a matching domain identifier.
            id : str
                The adapter ID.
            reply : IceDiscovery.LookupReplyPrx or None
                The proxy of the LookupReply interface that should be used to send the reply if a matching adapter is found. The reply proxy is never null.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceDiscovery.Lookup._op_findAdapterById.invoke(self, ((domainId, id, reply), context))

        def findAdapterByIdAsync(self, domainId, id, reply, context=None):
            """
            Request to find an object adapter
            
            Parameters
            ----------
            domainId : str
                The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a matching domain identifier.
            id : str
                The adapter ID.
            reply : IceDiscovery.LookupReplyPrx or None
                The proxy of the LookupReply interface that should be used to send the reply if a matching adapter is found. The reply proxy is never null.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceDiscovery.Lookup._op_findAdapterById.invokeAsync(self, ((domainId, id, reply), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceDiscovery.LookupPrx.ice_checkedCast(proxy, '::IceDiscovery::Lookup', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceDiscovery.LookupPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceDiscovery::Lookup'
    _M_IceDiscovery._t_LookupPrx = IcePy.defineProxy('::IceDiscovery::Lookup', LookupPrx)

    _M_IceDiscovery.LookupPrx = LookupPrx
    del LookupPrx

    _M_IceDiscovery.Lookup = None
    class Lookup(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceDiscovery::Lookup')

        def ice_id(self, current=None):
            return '::IceDiscovery::Lookup'

        @staticmethod
        def ice_staticId():
            return '::IceDiscovery::Lookup'

        def findObjectById(self, domainId, id, reply, current=None):
            """
            Request to find an Ice object
            
            Parameters
            ----------
            domainId : str
                The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a matching domain identifier.
            id : Ice.Identity
                The object identity.
            reply : IceDiscovery.LookupReplyPrx or None
                The proxy of the LookupReply interface that should be used to send the reply if a matching object is found. The reply proxy is never null.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'findObjectById' not implemented")

        def findAdapterById(self, domainId, id, reply, current=None):
            """
            Request to find an object adapter
            
            Parameters
            ----------
            domainId : str
                The IceDiscovery domain identifier. An IceDiscovery client only replies to requests with a matching domain identifier.
            id : str
                The adapter ID.
            reply : IceDiscovery.LookupReplyPrx or None
                The proxy of the LookupReply interface that should be used to send the reply if a matching adapter is found. The reply proxy is never null.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'findAdapterById' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceDiscovery._t_LookupDisp)

        __repr__ = __str__

    _M_IceDiscovery._t_LookupDisp = IcePy.defineClass('::IceDiscovery::Lookup', Lookup, (), None, ())
    Lookup._ice_type = _M_IceDiscovery._t_LookupDisp

    Lookup._op_findObjectById = IcePy.Operation('findObjectById', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Ice._t_Identity, False, 0), ((), _M_IceDiscovery._t_LookupReplyPrx, False, 0)), (), None, ())
    Lookup._op_findAdapterById = IcePy.Operation('findAdapterById', Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_IceDiscovery._t_LookupReplyPrx, False, 0)), (), None, ())

    _M_IceDiscovery.Lookup = Lookup
    del Lookup

# End of module IceDiscovery
