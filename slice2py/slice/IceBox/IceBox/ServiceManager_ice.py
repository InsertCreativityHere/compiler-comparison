# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'ServiceManager.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins
import Ice.BuiltinSequences_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module IceBox
_M_IceBox = Ice.openModule('IceBox')
__name__ = 'IceBox'
_M_IceBox.__doc__ = """
IceBox is an application server specifically for Ice applications. IceBox can easily run and administer Ice
services that are dynamically loaded as a DLL, shared library, or Java class.
"""

if 'AlreadyStartedException' not in _M_IceBox.__dict__:
    _M_IceBox.AlreadyStartedException = None
    class AlreadyStartedException(Ice.UserException):
        """
        This exception is thrown if an attempt is made to start an already-started service.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceBox::AlreadyStartedException'

    _M_IceBox._t_AlreadyStartedException = IcePy.defineException('::IceBox::AlreadyStartedException', AlreadyStartedException, (), None, ())
    AlreadyStartedException._ice_type = _M_IceBox._t_AlreadyStartedException

    _M_IceBox.AlreadyStartedException = AlreadyStartedException
    del AlreadyStartedException

if 'AlreadyStoppedException' not in _M_IceBox.__dict__:
    _M_IceBox.AlreadyStoppedException = None
    class AlreadyStoppedException(Ice.UserException):
        """
        This exception is thrown if an attempt is made to stop an already-stopped service.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceBox::AlreadyStoppedException'

    _M_IceBox._t_AlreadyStoppedException = IcePy.defineException('::IceBox::AlreadyStoppedException', AlreadyStoppedException, (), None, ())
    AlreadyStoppedException._ice_type = _M_IceBox._t_AlreadyStoppedException

    _M_IceBox.AlreadyStoppedException = AlreadyStoppedException
    del AlreadyStoppedException

if 'NoSuchServiceException' not in _M_IceBox.__dict__:
    _M_IceBox.NoSuchServiceException = None
    class NoSuchServiceException(Ice.UserException):
        """
        This exception is thrown if a service name does not refer to an existing service.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceBox::NoSuchServiceException'

    _M_IceBox._t_NoSuchServiceException = IcePy.defineException('::IceBox::NoSuchServiceException', NoSuchServiceException, (), None, ())
    NoSuchServiceException._ice_type = _M_IceBox._t_NoSuchServiceException

    _M_IceBox.NoSuchServiceException = NoSuchServiceException
    del NoSuchServiceException

if 'ServiceObserver' not in _M_IceBox.__dict__:
    _M_IceBox._t_ServiceObserverPrx = IcePy.declareProxy('::IceBox::ServiceObserver')

if 'ServiceObserverPrx' not in _M_IceBox.__dict__:
    _M_IceBox.ServiceObserverPrx = None
    class ServiceObserverPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new ServiceObserverPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def servicesStarted(self, services, context=None):
            """
            Receives the names of the services that were started.
            
            Parameters
            ----------
            services : str[]
                The names of the services.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceBox.ServiceObserver._op_servicesStarted.invoke(self, ((services, ), context))

        def servicesStartedAsync(self, services, context=None):
            """
            Receives the names of the services that were started.
            
            Parameters
            ----------
            services : str[]
                The names of the services.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceBox.ServiceObserver._op_servicesStarted.invokeAsync(self, ((services, ), context))

        def servicesStopped(self, services, context=None):
            """
            Receives the names of the services that were stopped.
            
            Parameters
            ----------
            services : str[]
                The names of the services.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceBox.ServiceObserver._op_servicesStopped.invoke(self, ((services, ), context))

        def servicesStoppedAsync(self, services, context=None):
            """
            Receives the names of the services that were stopped.
            
            Parameters
            ----------
            services : str[]
                The names of the services.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceBox.ServiceObserver._op_servicesStopped.invokeAsync(self, ((services, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceBox.ServiceObserverPrx.ice_checkedCast(proxy, '::IceBox::ServiceObserver', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceBox.ServiceObserverPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceBox::ServiceObserver'
    _M_IceBox._t_ServiceObserverPrx = IcePy.defineProxy('::IceBox::ServiceObserver', ServiceObserverPrx)

    _M_IceBox.ServiceObserverPrx = ServiceObserverPrx
    del ServiceObserverPrx

    _M_IceBox.ServiceObserver = None
    class ServiceObserver(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceBox::ServiceObserver')

        def ice_id(self, current=None):
            return '::IceBox::ServiceObserver'

        @staticmethod
        def ice_staticId():
            return '::IceBox::ServiceObserver'

        def servicesStarted(self, services, current=None):
            """
            Receives the names of the services that were started.
            
            Parameters
            ----------
            services : str[]
                The names of the services.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'servicesStarted' not implemented")

        def servicesStopped(self, services, current=None):
            """
            Receives the names of the services that were stopped.
            
            Parameters
            ----------
            services : str[]
                The names of the services.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'servicesStopped' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceBox._t_ServiceObserverDisp)

        __repr__ = __str__

    ServiceObserver._op_servicesStarted = IcePy.Operation('servicesStarted', Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_StringSeq, False, 0),), (), None, ())
    ServiceObserver._op_servicesStopped = IcePy.Operation('servicesStopped', Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_StringSeq, False, 0),), (), None, ())

    _M_IceBox.ServiceObserver = ServiceObserver
    del ServiceObserver

if 'ServiceManager' not in _M_IceBox.__dict__:
    _M_IceBox._t_ServiceManagerPrx = IcePy.declareProxy('::IceBox::ServiceManager')

if 'ServiceManagerPrx' not in _M_IceBox.__dict__:
    _M_IceBox.ServiceManagerPrx = None
    class ServiceManagerPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new ServiceManagerPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def startService(self, service, context=None):
            """
            Start an individual service.
            
            Parameters
            ----------
            service : str
                The service name.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            AlreadyStartedException
                If the service is already running.
            NoSuchServiceException
                If no service could be found with the given name.
            """
            return _M_IceBox.ServiceManager._op_startService.invoke(self, ((service, ), context))

        def startServiceAsync(self, service, context=None):
            """
            Start an individual service.
            
            Parameters
            ----------
            service : str
                The service name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceBox.ServiceManager._op_startService.invokeAsync(self, ((service, ), context))

        def stopService(self, service, context=None):
            """
            Stop an individual service.
            
            Parameters
            ----------
            service : str
                The service name.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            AlreadyStoppedException
                If the service is already stopped.
            NoSuchServiceException
                If no service could be found with the given name.
            """
            return _M_IceBox.ServiceManager._op_stopService.invoke(self, ((service, ), context))

        def stopServiceAsync(self, service, context=None):
            """
            Stop an individual service.
            
            Parameters
            ----------
            service : str
                The service name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceBox.ServiceManager._op_stopService.invokeAsync(self, ((service, ), context))

        def addObserver(self, observer, context=None):
            """
            Registers a new observer with the ServiceManager.
            
            Parameters
            ----------
            observer : (IceBox.ServiceObserverPrx or None)
                The new observer
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceBox.ServiceManager._op_addObserver.invoke(self, ((observer, ), context))

        def addObserverAsync(self, observer, context=None):
            """
            Registers a new observer with the ServiceManager.
            
            Parameters
            ----------
            observer : (IceBox.ServiceObserverPrx or None)
                The new observer
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceBox.ServiceManager._op_addObserver.invokeAsync(self, ((observer, ), context))

        def shutdown(self, context=None):
            """
            Shut down all services. This causes stop to be invoked on all configured services.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceBox.ServiceManager._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            """
            Shut down all services. This causes stop to be invoked on all configured services.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceBox.ServiceManager._op_shutdown.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceBox.ServiceManagerPrx.ice_checkedCast(proxy, '::IceBox::ServiceManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceBox.ServiceManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceBox::ServiceManager'
    _M_IceBox._t_ServiceManagerPrx = IcePy.defineProxy('::IceBox::ServiceManager', ServiceManagerPrx)

    _M_IceBox.ServiceManagerPrx = ServiceManagerPrx
    del ServiceManagerPrx

    _M_IceBox.ServiceManager = None
    class ServiceManager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceBox::ServiceManager')

        def ice_id(self, current=None):
            return '::IceBox::ServiceManager'

        @staticmethod
        def ice_staticId():
            return '::IceBox::ServiceManager'

        def startService(self, service, current=None):
            """
            Start an individual service.
            
            Parameters
            ----------
            service : str
                The service name.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AlreadyStartedException
                If the service is already running.
            NoSuchServiceException
                If no service could be found with the given name.
            """
            raise NotImplementedError("servant method 'startService' not implemented")

        def stopService(self, service, current=None):
            """
            Stop an individual service.
            
            Parameters
            ----------
            service : str
                The service name.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            AlreadyStoppedException
                If the service is already stopped.
            NoSuchServiceException
                If no service could be found with the given name.
            """
            raise NotImplementedError("servant method 'stopService' not implemented")

        def addObserver(self, observer, current=None):
            """
            Registers a new observer with the ServiceManager.
            
            Parameters
            ----------
            observer : (IceBox.ServiceObserverPrx or None)
                The new observer
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'addObserver' not implemented")

        def shutdown(self, current=None):
            """
            Shut down all services. This causes stop to be invoked on all configured services.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceBox._t_ServiceManagerDisp)

        __repr__ = __str__

    ServiceManager._op_startService = IcePy.Operation('startService', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_IceBox._t_AlreadyStartedException, _M_IceBox._t_NoSuchServiceException))
    ServiceManager._op_stopService = IcePy.Operation('stopService', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_IceBox._t_AlreadyStoppedException, _M_IceBox._t_NoSuchServiceException))
    ServiceManager._op_addObserver = IcePy.Operation('addObserver', Ice.OperationMode.Normal, False, None, (), (((), _M_IceBox._t_ServiceObserverPrx, False, 0),), (), None, ())
    ServiceManager._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_IceBox.ServiceManager = ServiceManager
    del ServiceManager

# End of module IceBox
