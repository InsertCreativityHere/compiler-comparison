# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `FaultToleranceTest.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

_M_Test._t_TestIntf = IcePy.defineValue('::Test::TestIntf', Ice.Value, -1, (), False, True, None, ())

if 'TestIntfPrx' not in _M_Test.__dict__:
    _M_Test.TestIntfPrx = Ice.createTempClass()
    class TestIntfPrx(Ice.ObjectPrx):

        def shutdown(self, context=None):
            return _M_Test.TestIntf._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.TestIntf._op_shutdown.invokeAsync(self, ((), context))

        def begin_shutdown(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_shutdown.begin(self, ((), _response, _ex, _sent, context))

        def end_shutdown(self, _r):
            return _M_Test.TestIntf._op_shutdown.end(self, _r)

        def abort(self, context=None):
            return _M_Test.TestIntf._op_abort.invoke(self, ((), context))

        def abortAsync(self, context=None):
            return _M_Test.TestIntf._op_abort.invokeAsync(self, ((), context))

        def begin_abort(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_abort.begin(self, ((), _response, _ex, _sent, context))

        def end_abort(self, _r):
            return _M_Test.TestIntf._op_abort.end(self, _r)

        def idempotentAbort(self, context=None):
            return _M_Test.TestIntf._op_idempotentAbort.invoke(self, ((), context))

        def idempotentAbortAsync(self, context=None):
            return _M_Test.TestIntf._op_idempotentAbort.invokeAsync(self, ((), context))

        def begin_idempotentAbort(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_idempotentAbort.begin(self, ((), _response, _ex, _sent, context))

        def end_idempotentAbort(self, _r):
            return _M_Test.TestIntf._op_idempotentAbort.end(self, _r)

        def pid(self, context=None):
            return _M_Test.TestIntf._op_pid.invoke(self, ((), context))

        def pidAsync(self, context=None):
            return _M_Test.TestIntf._op_pid.invokeAsync(self, ((), context))

        def begin_pid(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_pid.begin(self, ((), _response, _ex, _sent, context))

        def end_pid(self, _r):
            return _M_Test.TestIntf._op_pid.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.TestIntfPrx.ice_checkedCast(proxy, '::Test::TestIntf', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.TestIntfPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'
    _M_Test._t_TestIntfPrx = IcePy.defineProxy('::Test::TestIntf', TestIntfPrx)

    _M_Test.TestIntfPrx = TestIntfPrx
    del TestIntfPrx

    _M_Test.TestIntf = Ice.createTempClass()
    class TestIntf(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::TestIntf')

        def ice_id(self, current=None):
            return '::Test::TestIntf'

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def abort(self, current=None):
            raise NotImplementedError("servant method 'abort' not implemented")

        def idempotentAbort(self, current=None):
            raise NotImplementedError("servant method 'idempotentAbort' not implemented")

        def pid(self, current=None):
            raise NotImplementedError("servant method 'pid' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_TestIntfDisp)

        __repr__ = __str__

    _M_Test._t_TestIntfDisp = IcePy.defineClass('::Test::TestIntf', TestIntf, (), None, ())
    TestIntf._ice_type = _M_Test._t_TestIntfDisp

    TestIntf._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    TestIntf._op_abort = IcePy.Operation('abort', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    TestIntf._op_idempotentAbort = IcePy.Operation('idempotentAbort', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    TestIntf._op_pid = IcePy.Operation('pid', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_Test.TestIntf = TestIntf
    del TestIntf

# End of module Test
