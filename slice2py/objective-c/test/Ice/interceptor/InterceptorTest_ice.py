# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `InterceptorTest.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'InvalidInputException' not in _M_Test.__dict__:
    _M_Test.InvalidInputException = Ice.createTempClass()
    class InvalidInputException(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::InvalidInputException'

    _M_Test._t_InvalidInputException = IcePy.defineException('::Test::InvalidInputException', InvalidInputException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    InvalidInputException._ice_type = _M_Test._t_InvalidInputException

    _M_Test.InvalidInputException = InvalidInputException
    del InvalidInputException

if 'RetryException' not in _M_Test.__dict__:
    _M_Test.RetryException = Ice.createTempClass()
    class RetryException(Ice.LocalException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::RetryException'

    _M_Test._t_RetryException = IcePy.defineException('::Test::RetryException', RetryException, (), False, None, ())
    RetryException._ice_type = _M_Test._t_RetryException

    _M_Test.RetryException = RetryException
    del RetryException

_M_Test._t_MyObject = IcePy.defineValue('::Test::MyObject', Ice.Value, -1, (), False, True, None, ())

if 'MyObjectPrx' not in _M_Test.__dict__:
    _M_Test.MyObjectPrx = Ice.createTempClass()
    class MyObjectPrx(Ice.ObjectPrx):

        def add(self, x, y, context=None):
            return _M_Test.MyObject._op_add.invoke(self, ((x, y), context))

        def addAsync(self, x, y, context=None):
            return _M_Test.MyObject._op_add.invokeAsync(self, ((x, y), context))

        def begin_add(self, x, y, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyObject._op_add.begin(self, ((x, y), _response, _ex, _sent, context))

        def end_add(self, _r):
            return _M_Test.MyObject._op_add.end(self, _r)

        def addWithRetry(self, x, y, context=None):
            return _M_Test.MyObject._op_addWithRetry.invoke(self, ((x, y), context))

        def addWithRetryAsync(self, x, y, context=None):
            return _M_Test.MyObject._op_addWithRetry.invokeAsync(self, ((x, y), context))

        def begin_addWithRetry(self, x, y, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyObject._op_addWithRetry.begin(self, ((x, y), _response, _ex, _sent, context))

        def end_addWithRetry(self, _r):
            return _M_Test.MyObject._op_addWithRetry.end(self, _r)

        def badAdd(self, x, y, context=None):
            return _M_Test.MyObject._op_badAdd.invoke(self, ((x, y), context))

        def badAddAsync(self, x, y, context=None):
            return _M_Test.MyObject._op_badAdd.invokeAsync(self, ((x, y), context))

        def begin_badAdd(self, x, y, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyObject._op_badAdd.begin(self, ((x, y), _response, _ex, _sent, context))

        def end_badAdd(self, _r):
            return _M_Test.MyObject._op_badAdd.end(self, _r)

        def notExistAdd(self, x, y, context=None):
            return _M_Test.MyObject._op_notExistAdd.invoke(self, ((x, y), context))

        def notExistAddAsync(self, x, y, context=None):
            return _M_Test.MyObject._op_notExistAdd.invokeAsync(self, ((x, y), context))

        def begin_notExistAdd(self, x, y, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyObject._op_notExistAdd.begin(self, ((x, y), _response, _ex, _sent, context))

        def end_notExistAdd(self, _r):
            return _M_Test.MyObject._op_notExistAdd.end(self, _r)

        def badSystemAdd(self, x, y, context=None):
            return _M_Test.MyObject._op_badSystemAdd.invoke(self, ((x, y), context))

        def badSystemAddAsync(self, x, y, context=None):
            return _M_Test.MyObject._op_badSystemAdd.invokeAsync(self, ((x, y), context))

        def begin_badSystemAdd(self, x, y, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyObject._op_badSystemAdd.begin(self, ((x, y), _response, _ex, _sent, context))

        def end_badSystemAdd(self, _r):
            return _M_Test.MyObject._op_badSystemAdd.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.MyObjectPrx.ice_checkedCast(proxy, '::Test::MyObject', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.MyObjectPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::MyObject'
    _M_Test._t_MyObjectPrx = IcePy.defineProxy('::Test::MyObject', MyObjectPrx)

    _M_Test.MyObjectPrx = MyObjectPrx
    del MyObjectPrx

    _M_Test.MyObject = Ice.createTempClass()
    class MyObject(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::MyObject')

        def ice_id(self, current=None):
            return '::Test::MyObject'

        @staticmethod
        def ice_staticId():
            return '::Test::MyObject'

        def add(self, x, y, current=None):
            raise NotImplementedError("servant method 'add' not implemented")

        def addWithRetry(self, x, y, current=None):
            raise NotImplementedError("servant method 'addWithRetry' not implemented")

        def badAdd(self, x, y, current=None):
            raise NotImplementedError("servant method 'badAdd' not implemented")

        def notExistAdd(self, x, y, current=None):
            raise NotImplementedError("servant method 'notExistAdd' not implemented")

        def badSystemAdd(self, x, y, current=None):
            raise NotImplementedError("servant method 'badSystemAdd' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_MyObjectDisp)

        __repr__ = __str__

    _M_Test._t_MyObjectDisp = IcePy.defineClass('::Test::MyObject', MyObject, (), None, ())
    MyObject._ice_type = _M_Test._t_MyObjectDisp

    MyObject._op_add = IcePy.Operation('add', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    MyObject._op_addWithRetry = IcePy.Operation('addWithRetry', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    MyObject._op_badAdd = IcePy.Operation('badAdd', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Test._t_InvalidInputException,))
    MyObject._op_notExistAdd = IcePy.Operation('notExistAdd', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    MyObject._op_badSystemAdd = IcePy.Operation('badSystemAdd', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())

    _M_Test.MyObject = MyObject
    del MyObject

# End of module Test
