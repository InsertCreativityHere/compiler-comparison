# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `RetryTest.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

_M_Test._t_Retry = IcePy.defineValue('::Test::Retry', Ice.Value, -1, (), False, True, None, ())

if 'RetryPrx' not in _M_Test.__dict__:
    _M_Test.RetryPrx = Ice.createTempClass()
    class RetryPrx(Ice.ObjectPrx):

        def op(self, kill, context=None):
            return _M_Test.Retry._op_op.invoke(self, ((kill, ), context))

        def opAsync(self, kill, context=None):
            return _M_Test.Retry._op_op.invokeAsync(self, ((kill, ), context))

        def begin_op(self, kill, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Retry._op_op.begin(self, ((kill, ), _response, _ex, _sent, context))

        def end_op(self, _r):
            return _M_Test.Retry._op_op.end(self, _r)

        def opIdempotent(self, c, context=None):
            return _M_Test.Retry._op_opIdempotent.invoke(self, ((c, ), context))

        def opIdempotentAsync(self, c, context=None):
            return _M_Test.Retry._op_opIdempotent.invokeAsync(self, ((c, ), context))

        def begin_opIdempotent(self, c, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Retry._op_opIdempotent.begin(self, ((c, ), _response, _ex, _sent, context))

        def end_opIdempotent(self, _r):
            return _M_Test.Retry._op_opIdempotent.end(self, _r)

        def opNotIdempotent(self, context=None):
            return _M_Test.Retry._op_opNotIdempotent.invoke(self, ((), context))

        def opNotIdempotentAsync(self, context=None):
            return _M_Test.Retry._op_opNotIdempotent.invokeAsync(self, ((), context))

        def begin_opNotIdempotent(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Retry._op_opNotIdempotent.begin(self, ((), _response, _ex, _sent, context))

        def end_opNotIdempotent(self, _r):
            return _M_Test.Retry._op_opNotIdempotent.end(self, _r)

        def opSystemException(self, context=None):
            return _M_Test.Retry._op_opSystemException.invoke(self, ((), context))

        def opSystemExceptionAsync(self, context=None):
            return _M_Test.Retry._op_opSystemException.invokeAsync(self, ((), context))

        def begin_opSystemException(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Retry._op_opSystemException.begin(self, ((), _response, _ex, _sent, context))

        def end_opSystemException(self, _r):
            return _M_Test.Retry._op_opSystemException.end(self, _r)

        def sleep(self, delay, context=None):
            return _M_Test.Retry._op_sleep.invoke(self, ((delay, ), context))

        def sleepAsync(self, delay, context=None):
            return _M_Test.Retry._op_sleep.invokeAsync(self, ((delay, ), context))

        def begin_sleep(self, delay, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Retry._op_sleep.begin(self, ((delay, ), _response, _ex, _sent, context))

        def end_sleep(self, _r):
            return _M_Test.Retry._op_sleep.end(self, _r)

        def shutdown(self, context=None):
            return _M_Test.Retry._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.Retry._op_shutdown.invokeAsync(self, ((), context))

        def begin_shutdown(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Retry._op_shutdown.begin(self, ((), _response, _ex, _sent, context))

        def end_shutdown(self, _r):
            return _M_Test.Retry._op_shutdown.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.RetryPrx.ice_checkedCast(proxy, '::Test::Retry', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.RetryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Retry'
    _M_Test._t_RetryPrx = IcePy.defineProxy('::Test::Retry', RetryPrx)

    _M_Test.RetryPrx = RetryPrx
    del RetryPrx

    _M_Test.Retry = Ice.createTempClass()
    class Retry(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Retry')

        def ice_id(self, current=None):
            return '::Test::Retry'

        @staticmethod
        def ice_staticId():
            return '::Test::Retry'

        def op(self, kill, current=None):
            raise NotImplementedError("servant method 'op' not implemented")

        def opIdempotent(self, c, current=None):
            raise NotImplementedError("servant method 'opIdempotent' not implemented")

        def opNotIdempotent(self, current=None):
            raise NotImplementedError("servant method 'opNotIdempotent' not implemented")

        def opSystemException(self, current=None):
            raise NotImplementedError("servant method 'opSystemException' not implemented")

        def sleep(self, delay, current=None):
            raise NotImplementedError("servant method 'sleep' not implemented")

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_RetryDisp)

        __repr__ = __str__

    _M_Test._t_RetryDisp = IcePy.defineClass('::Test::Retry', Retry, (), None, ())
    Retry._ice_type = _M_Test._t_RetryDisp

    Retry._op_op = IcePy.Operation('op', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())
    Retry._op_opIdempotent = IcePy.Operation('opIdempotent', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    Retry._op_opNotIdempotent = IcePy.Operation('opNotIdempotent', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Retry._op_opSystemException = IcePy.Operation('opSystemException', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Retry._op_sleep = IcePy.Operation('sleep', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Retry._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())

    _M_Test.Retry = Retry
    del Retry

# End of module Test
