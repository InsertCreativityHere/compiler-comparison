# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `MetricsTest.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'UserEx' not in _M_Test.__dict__:
    _M_Test.UserEx = Ice.createTempClass()
    class UserEx(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::UserEx'

    _M_Test._t_UserEx = IcePy.defineException('::Test::UserEx', UserEx, (), False, None, ())
    UserEx._ice_type = _M_Test._t_UserEx

    _M_Test.UserEx = UserEx
    del UserEx

if '_t_ByteSeq' not in _M_Test.__dict__:
    _M_Test._t_ByteSeq = IcePy.defineSequence('::Test::ByteSeq', (), IcePy._t_byte)

_M_Test._t_Metrics = IcePy.defineValue('::Test::Metrics', Ice.Value, -1, (), False, True, None, ())

if 'MetricsPrx' not in _M_Test.__dict__:
    _M_Test.MetricsPrx = Ice.createTempClass()
    class MetricsPrx(Ice.ObjectPrx):

        def op(self, context=None):
            return _M_Test.Metrics._op_op.invoke(self, ((), context))

        def opAsync(self, context=None):
            return _M_Test.Metrics._op_op.invokeAsync(self, ((), context))

        def begin_op(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Metrics._op_op.begin(self, ((), _response, _ex, _sent, context))

        def end_op(self, _r):
            return _M_Test.Metrics._op_op.end(self, _r)

        def fail(self, context=None):
            return _M_Test.Metrics._op_fail.invoke(self, ((), context))

        def failAsync(self, context=None):
            return _M_Test.Metrics._op_fail.invokeAsync(self, ((), context))

        def begin_fail(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Metrics._op_fail.begin(self, ((), _response, _ex, _sent, context))

        def end_fail(self, _r):
            return _M_Test.Metrics._op_fail.end(self, _r)

        def opWithUserException(self, context=None):
            return _M_Test.Metrics._op_opWithUserException.invoke(self, ((), context))

        def opWithUserExceptionAsync(self, context=None):
            return _M_Test.Metrics._op_opWithUserException.invokeAsync(self, ((), context))

        def begin_opWithUserException(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Metrics._op_opWithUserException.begin(self, ((), _response, _ex, _sent, context))

        def end_opWithUserException(self, _r):
            return _M_Test.Metrics._op_opWithUserException.end(self, _r)

        def opWithRequestFailedException(self, context=None):
            return _M_Test.Metrics._op_opWithRequestFailedException.invoke(self, ((), context))

        def opWithRequestFailedExceptionAsync(self, context=None):
            return _M_Test.Metrics._op_opWithRequestFailedException.invokeAsync(self, ((), context))

        def begin_opWithRequestFailedException(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Metrics._op_opWithRequestFailedException.begin(self, ((), _response, _ex, _sent, context))

        def end_opWithRequestFailedException(self, _r):
            return _M_Test.Metrics._op_opWithRequestFailedException.end(self, _r)

        def opWithLocalException(self, context=None):
            return _M_Test.Metrics._op_opWithLocalException.invoke(self, ((), context))

        def opWithLocalExceptionAsync(self, context=None):
            return _M_Test.Metrics._op_opWithLocalException.invokeAsync(self, ((), context))

        def begin_opWithLocalException(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Metrics._op_opWithLocalException.begin(self, ((), _response, _ex, _sent, context))

        def end_opWithLocalException(self, _r):
            return _M_Test.Metrics._op_opWithLocalException.end(self, _r)

        def opWithUnknownException(self, context=None):
            return _M_Test.Metrics._op_opWithUnknownException.invoke(self, ((), context))

        def opWithUnknownExceptionAsync(self, context=None):
            return _M_Test.Metrics._op_opWithUnknownException.invokeAsync(self, ((), context))

        def begin_opWithUnknownException(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Metrics._op_opWithUnknownException.begin(self, ((), _response, _ex, _sent, context))

        def end_opWithUnknownException(self, _r):
            return _M_Test.Metrics._op_opWithUnknownException.end(self, _r)

        def opByteS(self, bs, context=None):
            return _M_Test.Metrics._op_opByteS.invoke(self, ((bs, ), context))

        def opByteSAsync(self, bs, context=None):
            return _M_Test.Metrics._op_opByteS.invokeAsync(self, ((bs, ), context))

        def begin_opByteS(self, bs, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Metrics._op_opByteS.begin(self, ((bs, ), _response, _ex, _sent, context))

        def end_opByteS(self, _r):
            return _M_Test.Metrics._op_opByteS.end(self, _r)

        def getAdmin(self, context=None):
            return _M_Test.Metrics._op_getAdmin.invoke(self, ((), context))

        def getAdminAsync(self, context=None):
            return _M_Test.Metrics._op_getAdmin.invokeAsync(self, ((), context))

        def begin_getAdmin(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Metrics._op_getAdmin.begin(self, ((), _response, _ex, _sent, context))

        def end_getAdmin(self, _r):
            return _M_Test.Metrics._op_getAdmin.end(self, _r)

        def shutdown(self, context=None):
            return _M_Test.Metrics._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.Metrics._op_shutdown.invokeAsync(self, ((), context))

        def begin_shutdown(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Metrics._op_shutdown.begin(self, ((), _response, _ex, _sent, context))

        def end_shutdown(self, _r):
            return _M_Test.Metrics._op_shutdown.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.MetricsPrx.ice_checkedCast(proxy, '::Test::Metrics', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.MetricsPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Metrics'
    _M_Test._t_MetricsPrx = IcePy.defineProxy('::Test::Metrics', MetricsPrx)

    _M_Test.MetricsPrx = MetricsPrx
    del MetricsPrx

    _M_Test.Metrics = Ice.createTempClass()
    class Metrics(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Metrics')

        def ice_id(self, current=None):
            return '::Test::Metrics'

        @staticmethod
        def ice_staticId():
            return '::Test::Metrics'

        def op(self, current=None):
            raise NotImplementedError("servant method 'op' not implemented")

        def fail(self, current=None):
            raise NotImplementedError("servant method 'fail' not implemented")

        def opWithUserException(self, current=None):
            raise NotImplementedError("servant method 'opWithUserException' not implemented")

        def opWithRequestFailedException(self, current=None):
            raise NotImplementedError("servant method 'opWithRequestFailedException' not implemented")

        def opWithLocalException(self, current=None):
            raise NotImplementedError("servant method 'opWithLocalException' not implemented")

        def opWithUnknownException(self, current=None):
            raise NotImplementedError("servant method 'opWithUnknownException' not implemented")

        def opByteS(self, bs, current=None):
            raise NotImplementedError("servant method 'opByteS' not implemented")

        def getAdmin(self, current=None):
            raise NotImplementedError("servant method 'getAdmin' not implemented")

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_MetricsDisp)

        __repr__ = __str__

    _M_Test._t_MetricsDisp = IcePy.defineClass('::Test::Metrics', Metrics, (), None, ())
    Metrics._ice_type = _M_Test._t_MetricsDisp

    Metrics._op_op = IcePy.Operation('op', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Metrics._op_fail = IcePy.Operation('fail', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    Metrics._op_opWithUserException = IcePy.Operation('opWithUserException', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_Test._t_UserEx,))
    Metrics._op_opWithRequestFailedException = IcePy.Operation('opWithRequestFailedException', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Metrics._op_opWithLocalException = IcePy.Operation('opWithLocalException', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Metrics._op_opWithUnknownException = IcePy.Operation('opWithUnknownException', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Metrics._op_opByteS = IcePy.Operation('opByteS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ByteSeq, False, 0),), (), None, ())
    Metrics._op_getAdmin = IcePy.Operation('getAdmin', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_ObjectPrx, False, 0), ())
    Metrics._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.Metrics = Metrics
    del Metrics

_M_Test._t_Controller = IcePy.defineValue('::Test::Controller', Ice.Value, -1, (), False, True, None, ())

if 'ControllerPrx' not in _M_Test.__dict__:
    _M_Test.ControllerPrx = Ice.createTempClass()
    class ControllerPrx(Ice.ObjectPrx):

        def hold(self, context=None):
            return _M_Test.Controller._op_hold.invoke(self, ((), context))

        def holdAsync(self, context=None):
            return _M_Test.Controller._op_hold.invokeAsync(self, ((), context))

        def begin_hold(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Controller._op_hold.begin(self, ((), _response, _ex, _sent, context))

        def end_hold(self, _r):
            return _M_Test.Controller._op_hold.end(self, _r)

        def resume(self, context=None):
            return _M_Test.Controller._op_resume.invoke(self, ((), context))

        def resumeAsync(self, context=None):
            return _M_Test.Controller._op_resume.invokeAsync(self, ((), context))

        def begin_resume(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Controller._op_resume.begin(self, ((), _response, _ex, _sent, context))

        def end_resume(self, _r):
            return _M_Test.Controller._op_resume.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.ControllerPrx.ice_checkedCast(proxy, '::Test::Controller', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.ControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Controller'
    _M_Test._t_ControllerPrx = IcePy.defineProxy('::Test::Controller', ControllerPrx)

    _M_Test.ControllerPrx = ControllerPrx
    del ControllerPrx

    _M_Test.Controller = Ice.createTempClass()
    class Controller(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Controller')

        def ice_id(self, current=None):
            return '::Test::Controller'

        @staticmethod
        def ice_staticId():
            return '::Test::Controller'

        def hold(self, current=None):
            raise NotImplementedError("servant method 'hold' not implemented")

        def resume(self, current=None):
            raise NotImplementedError("servant method 'resume' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_ControllerDisp)

        __repr__ = __str__

    _M_Test._t_ControllerDisp = IcePy.defineClass('::Test::Controller', Controller, (), None, ())
    Controller._ice_type = _M_Test._t_ControllerDisp

    Controller._op_hold = IcePy.Operation('hold', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Controller._op_resume = IcePy.Operation('resume', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.Controller = Controller
    del Controller

# End of module Test
