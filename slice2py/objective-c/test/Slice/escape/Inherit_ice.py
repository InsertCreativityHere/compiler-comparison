# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Inherit.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'Struct1' not in _M_Test.__dict__:
    _M_Test.Struct1 = Ice.createTempClass()
    class Struct1(object):
        def __init__(self, isa=0, retainCount=0):
            self.isa = isa
            self.retainCount = retainCount

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.isa)
            _h = 5 * _h + Ice.getHash(self.retainCount)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Test.Struct1):
                return NotImplemented
            else:
                if self.isa is None or other.isa is None:
                    if self.isa != other.isa:
                        return (-1 if self.isa is None else 1)
                else:
                    if self.isa < other.isa:
                        return -1
                    elif self.isa > other.isa:
                        return 1
                if self.retainCount is None or other.retainCount is None:
                    if self.retainCount != other.retainCount:
                        return (-1 if self.retainCount is None else 1)
                else:
                    if self.retainCount < other.retainCount:
                        return -1
                    elif self.retainCount > other.retainCount:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Struct1)

        __repr__ = __str__

    _M_Test._t_Struct1 = IcePy.defineStruct('::Test::Struct1', Struct1, (), (
        ('isa', (), IcePy._t_int),
        ('retainCount', (), IcePy._t_int)
    ))

    _M_Test.Struct1 = Struct1
    del Struct1

if 'Exception1' not in _M_Test.__dict__:
    _M_Test.Exception1 = Ice.createTempClass()
    class Exception1(Ice.UserException):
        def __init__(self, isa=0, reason=0, _raise=0, name=0, callStackReturnAddresses=0, userInfo=0, reserved=0):
            self.isa = isa
            self.reason = reason
            self._raise = _raise
            self.name = name
            self.callStackReturnAddresses = callStackReturnAddresses
            self.userInfo = userInfo
            self.reserved = reserved

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::Exception1'

    _M_Test._t_Exception1 = IcePy.defineException('::Test::Exception1', Exception1, (), False, None, (
        ('isa', (), IcePy._t_int, False, 0),
        ('reason', (), IcePy._t_int, False, 0),
        ('_raise', (), IcePy._t_int, False, 0),
        ('name', (), IcePy._t_int, False, 0),
        ('callStackReturnAddresses', (), IcePy._t_int, False, 0),
        ('userInfo', (), IcePy._t_int, False, 0),
        ('reserved', (), IcePy._t_int, False, 0)
    ))
    Exception1._ice_type = _M_Test._t_Exception1

    _M_Test.Exception1 = Exception1
    del Exception1

if 'Class1' not in _M_Test.__dict__:
    _M_Test.Class1 = Ice.createTempClass()
    class Class1(Ice.Value):
        def __init__(self, reason=0, isa=0, autorelease=0, classForCoder=0, copy=0, dealloc=0, description=0, hash=0, init=0, isProxy=0, mutableCopy=0, release=0, retain=0, retainCount=0, self=0, superclass=0, zone=0):
            self.reason = reason
            self.isa = isa
            self.autorelease = autorelease
            self.classForCoder = classForCoder
            self.copy = copy
            self.dealloc = dealloc
            self.description = description
            self.hash = hash
            self.init = init
            self.isProxy = isProxy
            self.mutableCopy = mutableCopy
            self.release = release
            self.retain = retain
            self.retainCount = retainCount
            self.self = self
            self.superclass = superclass
            self.zone = zone

        def ice_id(self):
            return '::Test::Class1'

        @staticmethod
        def ice_staticId():
            return '::Test::Class1'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Class1)

        __repr__ = __str__

    _M_Test._t_Class1 = IcePy.defineValue('::Test::Class1', Class1, -1, (), False, False, None, (
        ('reason', (), IcePy._t_int, False, 0),
        ('isa', (), IcePy._t_int, False, 0),
        ('autorelease', (), IcePy._t_int, False, 0),
        ('classForCoder', (), IcePy._t_int, False, 0),
        ('copy', (), IcePy._t_int, False, 0),
        ('dealloc', (), IcePy._t_int, False, 0),
        ('description', (), IcePy._t_int, False, 0),
        ('hash', (), IcePy._t_int, False, 0),
        ('init', (), IcePy._t_int, False, 0),
        ('isProxy', (), IcePy._t_int, False, 0),
        ('mutableCopy', (), IcePy._t_int, False, 0),
        ('release', (), IcePy._t_int, False, 0),
        ('retain', (), IcePy._t_int, False, 0),
        ('retainCount', (), IcePy._t_int, False, 0),
        ('self', (), IcePy._t_int, False, 0),
        ('superclass', (), IcePy._t_int, False, 0),
        ('zone', (), IcePy._t_int, False, 0)
    ))
    Class1._ice_type = _M_Test._t_Class1

    _M_Test.Class1 = Class1
    del Class1

_M_Test._t_Intf1 = IcePy.defineValue('::Test::Intf1', Ice.Value, -1, (), False, True, None, ())

if 'Intf1Prx' not in _M_Test.__dict__:
    _M_Test.Intf1Prx = Ice.createTempClass()
    class Intf1Prx(Ice.ObjectPrx):

        def isa(self, context=None):
            return _M_Test.Intf1._op_isa.invoke(self, ((), context))

        def isaAsync(self, context=None):
            return _M_Test.Intf1._op_isa.invokeAsync(self, ((), context))

        def reason(self, context=None):
            return _M_Test.Intf1._op_reason.invoke(self, ((), context))

        def reasonAsync(self, context=None):
            return _M_Test.Intf1._op_reason.invokeAsync(self, ((), context))

        def autorelease(self, context=None):
            return _M_Test.Intf1._op_autorelease.invoke(self, ((), context))

        def autoreleaseAsync(self, context=None):
            return _M_Test.Intf1._op_autorelease.invokeAsync(self, ((), context))

        def classForCoder(self, context=None):
            return _M_Test.Intf1._op_classForCoder.invoke(self, ((), context))

        def classForCoderAsync(self, context=None):
            return _M_Test.Intf1._op_classForCoder.invokeAsync(self, ((), context))

        def copy(self, context=None):
            return _M_Test.Intf1._op_copy.invoke(self, ((), context))

        def copyAsync(self, context=None):
            return _M_Test.Intf1._op_copy.invokeAsync(self, ((), context))

        def dealloc(self, context=None):
            return _M_Test.Intf1._op_dealloc.invoke(self, ((), context))

        def deallocAsync(self, context=None):
            return _M_Test.Intf1._op_dealloc.invokeAsync(self, ((), context))

        def description(self, context=None):
            return _M_Test.Intf1._op_description.invoke(self, ((), context))

        def descriptionAsync(self, context=None):
            return _M_Test.Intf1._op_description.invokeAsync(self, ((), context))

        def hash(self, context=None):
            return _M_Test.Intf1._op_hash.invoke(self, ((), context))

        def hashAsync(self, context=None):
            return _M_Test.Intf1._op_hash.invokeAsync(self, ((), context))

        def init(self, context=None):
            return _M_Test.Intf1._op_init.invoke(self, ((), context))

        def initAsync(self, context=None):
            return _M_Test.Intf1._op_init.invokeAsync(self, ((), context))

        def isProxy(self, context=None):
            return _M_Test.Intf1._op_isProxy.invoke(self, ((), context))

        def isProxyAsync(self, context=None):
            return _M_Test.Intf1._op_isProxy.invokeAsync(self, ((), context))

        def mutableCopy(self, context=None):
            return _M_Test.Intf1._op_mutableCopy.invoke(self, ((), context))

        def mutableCopyAsync(self, context=None):
            return _M_Test.Intf1._op_mutableCopy.invokeAsync(self, ((), context))

        def release(self, context=None):
            return _M_Test.Intf1._op_release.invoke(self, ((), context))

        def releaseAsync(self, context=None):
            return _M_Test.Intf1._op_release.invokeAsync(self, ((), context))

        def retain(self, context=None):
            return _M_Test.Intf1._op_retain.invoke(self, ((), context))

        def retainAsync(self, context=None):
            return _M_Test.Intf1._op_retain.invokeAsync(self, ((), context))

        def retainCount(self, context=None):
            return _M_Test.Intf1._op_retainCount.invoke(self, ((), context))

        def retainCountAsync(self, context=None):
            return _M_Test.Intf1._op_retainCount.invokeAsync(self, ((), context))

        def self(self, context=None):
            return _M_Test.Intf1._op_self.invoke(self, ((), context))

        def selfAsync(self, context=None):
            return _M_Test.Intf1._op_self.invokeAsync(self, ((), context))

        def superclass(self, context=None):
            return _M_Test.Intf1._op_superclass.invoke(self, ((), context))

        def superclassAsync(self, context=None):
            return _M_Test.Intf1._op_superclass.invokeAsync(self, ((), context))

        def zone(self, context=None):
            return _M_Test.Intf1._op_zone.invoke(self, ((), context))

        def zoneAsync(self, context=None):
            return _M_Test.Intf1._op_zone.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.Intf1Prx.ice_checkedCast(proxy, '::Test::Intf1', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.Intf1Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Intf1'
    _M_Test._t_Intf1Prx = IcePy.defineProxy('::Test::Intf1', Intf1Prx)

    _M_Test.Intf1Prx = Intf1Prx
    del Intf1Prx

    _M_Test.Intf1 = Ice.createTempClass()
    class Intf1(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Intf1')

        def ice_id(self, current=None):
            return '::Test::Intf1'

        @staticmethod
        def ice_staticId():
            return '::Test::Intf1'

        def isa(self, current=None):
            raise NotImplementedError("servant method 'isa' not implemented")

        def reason(self, current=None):
            raise NotImplementedError("servant method 'reason' not implemented")

        def autorelease(self, current=None):
            raise NotImplementedError("servant method 'autorelease' not implemented")

        def classForCoder(self, current=None):
            raise NotImplementedError("servant method 'classForCoder' not implemented")

        def copy(self, current=None):
            raise NotImplementedError("servant method 'copy' not implemented")

        def dealloc(self, current=None):
            raise NotImplementedError("servant method 'dealloc' not implemented")

        def description(self, current=None):
            raise NotImplementedError("servant method 'description' not implemented")

        def hash(self, current=None):
            raise NotImplementedError("servant method 'hash' not implemented")

        def init(self, current=None):
            raise NotImplementedError("servant method 'init' not implemented")

        def isProxy(self, current=None):
            raise NotImplementedError("servant method 'isProxy' not implemented")

        def mutableCopy(self, current=None):
            raise NotImplementedError("servant method 'mutableCopy' not implemented")

        def release(self, current=None):
            raise NotImplementedError("servant method 'release' not implemented")

        def retain(self, current=None):
            raise NotImplementedError("servant method 'retain' not implemented")

        def retainCount(self, current=None):
            raise NotImplementedError("servant method 'retainCount' not implemented")

        def self(self, current=None):
            raise NotImplementedError("servant method 'self' not implemented")

        def superclass(self, current=None):
            raise NotImplementedError("servant method 'superclass' not implemented")

        def zone(self, current=None):
            raise NotImplementedError("servant method 'zone' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Intf1Disp)

        __repr__ = __str__

    _M_Test._t_Intf1Disp = IcePy.defineClass('::Test::Intf1', Intf1, (), None, ())
    Intf1._ice_type = _M_Test._t_Intf1Disp

    Intf1._op_isa = IcePy.Operation('isa', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_reason = IcePy.Operation('reason', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_autorelease = IcePy.Operation('autorelease', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_classForCoder = IcePy.Operation('classForCoder', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_copy = IcePy.Operation('copy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_dealloc = IcePy.Operation('dealloc', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_description = IcePy.Operation('description', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_hash = IcePy.Operation('hash', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_init = IcePy.Operation('init', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_isProxy = IcePy.Operation('isProxy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_mutableCopy = IcePy.Operation('mutableCopy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_release = IcePy.Operation('release', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_retain = IcePy.Operation('retain', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_retainCount = IcePy.Operation('retainCount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_self = IcePy.Operation('self', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_superclass = IcePy.Operation('superclass', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Intf1._op_zone = IcePy.Operation('zone', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.Intf1 = Intf1
    del Intf1

_M_Test._t_Intf2 = IcePy.defineValue('::Test::Intf2', Ice.Value, -1, (), False, True, None, ())

if 'Intf2Prx' not in _M_Test.__dict__:
    _M_Test.Intf2Prx = Ice.createTempClass()
    class Intf2Prx(Ice.ObjectPrx):

        def isa(self, a, context=None):
            return _M_Test.Intf2._op_isa.invoke(self, ((a, ), context))

        def isaAsync(self, a, context=None):
            return _M_Test.Intf2._op_isa.invokeAsync(self, ((a, ), context))

        def reason(self, a, context=None):
            return _M_Test.Intf2._op_reason.invoke(self, ((a, ), context))

        def reasonAsync(self, a, context=None):
            return _M_Test.Intf2._op_reason.invokeAsync(self, ((a, ), context))

        def autorelease(self, a, context=None):
            return _M_Test.Intf2._op_autorelease.invoke(self, ((a, ), context))

        def autoreleaseAsync(self, a, context=None):
            return _M_Test.Intf2._op_autorelease.invokeAsync(self, ((a, ), context))

        def classForCoder(self, a, context=None):
            return _M_Test.Intf2._op_classForCoder.invoke(self, ((a, ), context))

        def classForCoderAsync(self, a, context=None):
            return _M_Test.Intf2._op_classForCoder.invokeAsync(self, ((a, ), context))

        def copy(self, a, context=None):
            return _M_Test.Intf2._op_copy.invoke(self, ((a, ), context))

        def copyAsync(self, a, context=None):
            return _M_Test.Intf2._op_copy.invokeAsync(self, ((a, ), context))

        def dealloc(self, a, context=None):
            return _M_Test.Intf2._op_dealloc.invoke(self, ((a, ), context))

        def deallocAsync(self, a, context=None):
            return _M_Test.Intf2._op_dealloc.invokeAsync(self, ((a, ), context))

        def description(self, a, context=None):
            return _M_Test.Intf2._op_description.invoke(self, ((a, ), context))

        def descriptionAsync(self, a, context=None):
            return _M_Test.Intf2._op_description.invokeAsync(self, ((a, ), context))

        def hash(self, a, context=None):
            return _M_Test.Intf2._op_hash.invoke(self, ((a, ), context))

        def hashAsync(self, a, context=None):
            return _M_Test.Intf2._op_hash.invokeAsync(self, ((a, ), context))

        def init(self, a, context=None):
            return _M_Test.Intf2._op_init.invoke(self, ((a, ), context))

        def initAsync(self, a, context=None):
            return _M_Test.Intf2._op_init.invokeAsync(self, ((a, ), context))

        def isProxy(self, a, context=None):
            return _M_Test.Intf2._op_isProxy.invoke(self, ((a, ), context))

        def isProxyAsync(self, a, context=None):
            return _M_Test.Intf2._op_isProxy.invokeAsync(self, ((a, ), context))

        def mutableCopy(self, a, context=None):
            return _M_Test.Intf2._op_mutableCopy.invoke(self, ((a, ), context))

        def mutableCopyAsync(self, a, context=None):
            return _M_Test.Intf2._op_mutableCopy.invokeAsync(self, ((a, ), context))

        def release(self, a, context=None):
            return _M_Test.Intf2._op_release.invoke(self, ((a, ), context))

        def releaseAsync(self, a, context=None):
            return _M_Test.Intf2._op_release.invokeAsync(self, ((a, ), context))

        def retain(self, a, context=None):
            return _M_Test.Intf2._op_retain.invoke(self, ((a, ), context))

        def retainAsync(self, a, context=None):
            return _M_Test.Intf2._op_retain.invokeAsync(self, ((a, ), context))

        def retainCount(self, a, context=None):
            return _M_Test.Intf2._op_retainCount.invoke(self, ((a, ), context))

        def retainCountAsync(self, a, context=None):
            return _M_Test.Intf2._op_retainCount.invokeAsync(self, ((a, ), context))

        def self(self, a, context=None):
            return _M_Test.Intf2._op_self.invoke(self, ((a, ), context))

        def selfAsync(self, a, context=None):
            return _M_Test.Intf2._op_self.invokeAsync(self, ((a, ), context))

        def superclass(self, a, context=None):
            return _M_Test.Intf2._op_superclass.invoke(self, ((a, ), context))

        def superclassAsync(self, a, context=None):
            return _M_Test.Intf2._op_superclass.invokeAsync(self, ((a, ), context))

        def zone(self, a, context=None):
            return _M_Test.Intf2._op_zone.invoke(self, ((a, ), context))

        def zoneAsync(self, a, context=None):
            return _M_Test.Intf2._op_zone.invokeAsync(self, ((a, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.Intf2Prx.ice_checkedCast(proxy, '::Test::Intf2', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.Intf2Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Intf2'
    _M_Test._t_Intf2Prx = IcePy.defineProxy('::Test::Intf2', Intf2Prx)

    _M_Test.Intf2Prx = Intf2Prx
    del Intf2Prx

    _M_Test.Intf2 = Ice.createTempClass()
    class Intf2(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Intf2')

        def ice_id(self, current=None):
            return '::Test::Intf2'

        @staticmethod
        def ice_staticId():
            return '::Test::Intf2'

        def isa(self, a, current=None):
            raise NotImplementedError("servant method 'isa' not implemented")

        def reason(self, a, current=None):
            raise NotImplementedError("servant method 'reason' not implemented")

        def autorelease(self, a, current=None):
            raise NotImplementedError("servant method 'autorelease' not implemented")

        def classForCoder(self, a, current=None):
            raise NotImplementedError("servant method 'classForCoder' not implemented")

        def copy(self, a, current=None):
            raise NotImplementedError("servant method 'copy' not implemented")

        def dealloc(self, a, current=None):
            raise NotImplementedError("servant method 'dealloc' not implemented")

        def description(self, a, current=None):
            raise NotImplementedError("servant method 'description' not implemented")

        def hash(self, a, current=None):
            raise NotImplementedError("servant method 'hash' not implemented")

        def init(self, a, current=None):
            raise NotImplementedError("servant method 'init' not implemented")

        def isProxy(self, a, current=None):
            raise NotImplementedError("servant method 'isProxy' not implemented")

        def mutableCopy(self, a, current=None):
            raise NotImplementedError("servant method 'mutableCopy' not implemented")

        def release(self, a, current=None):
            raise NotImplementedError("servant method 'release' not implemented")

        def retain(self, a, current=None):
            raise NotImplementedError("servant method 'retain' not implemented")

        def retainCount(self, a, current=None):
            raise NotImplementedError("servant method 'retainCount' not implemented")

        def self(self, a, current=None):
            raise NotImplementedError("servant method 'self' not implemented")

        def superclass(self, a, current=None):
            raise NotImplementedError("servant method 'superclass' not implemented")

        def zone(self, a, current=None):
            raise NotImplementedError("servant method 'zone' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Intf2Disp)

        __repr__ = __str__

    _M_Test._t_Intf2Disp = IcePy.defineClass('::Test::Intf2', Intf2, (), None, ())
    Intf2._ice_type = _M_Test._t_Intf2Disp

    Intf2._op_isa = IcePy.Operation('isa', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_reason = IcePy.Operation('reason', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_autorelease = IcePy.Operation('autorelease', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_classForCoder = IcePy.Operation('classForCoder', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_copy = IcePy.Operation('copy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_dealloc = IcePy.Operation('dealloc', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_description = IcePy.Operation('description', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_hash = IcePy.Operation('hash', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_init = IcePy.Operation('init', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_isProxy = IcePy.Operation('isProxy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_mutableCopy = IcePy.Operation('mutableCopy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_release = IcePy.Operation('release', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_retain = IcePy.Operation('retain', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_retainCount = IcePy.Operation('retainCount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_self = IcePy.Operation('self', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_superclass = IcePy.Operation('superclass', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Intf2._op_zone = IcePy.Operation('zone', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())

    _M_Test.Intf2 = Intf2
    del Intf2

# End of module Test
