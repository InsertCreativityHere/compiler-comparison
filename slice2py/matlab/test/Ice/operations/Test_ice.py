# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Ice.Current_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'MyEnum' not in _M_Test.__dict__:
    _M_Test.MyEnum = Ice.createTempClass()
    class MyEnum(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    MyEnum.enum1 = MyEnum("enum1", 0)
    MyEnum.enum2 = MyEnum("enum2", 1)
    MyEnum.enum3 = MyEnum("enum3", 2)
    MyEnum._enumerators = { 0:MyEnum.enum1, 1:MyEnum.enum2, 2:MyEnum.enum3 }

    _M_Test._t_MyEnum = IcePy.defineEnum('::Test::MyEnum', MyEnum, (), MyEnum._enumerators)

    _M_Test.MyEnum = MyEnum
    del MyEnum

if 'MyClass' not in _M_Test.__dict__:
    _M_Test._t_MyClassDisp = IcePy.declareClass('::Test::MyClass')
    _M_Test._t_MyClassPrx = IcePy.declareProxy('::Test::MyClass')

if 'AnotherStruct' not in _M_Test.__dict__:
    _M_Test.AnotherStruct = Ice.createTempClass()
    class AnotherStruct(object):
        def __init__(self, s=''):
            self.s = s

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.s)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Test.AnotherStruct):
                return NotImplemented
            else:
                if self.s is None or other.s is None:
                    if self.s != other.s:
                        return (-1 if self.s is None else 1)
                else:
                    if self.s < other.s:
                        return -1
                    elif self.s > other.s:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_AnotherStruct)

        __repr__ = __str__

    _M_Test._t_AnotherStruct = IcePy.defineStruct('::Test::AnotherStruct', AnotherStruct, (), (('s', (), IcePy._t_string),))

    _M_Test.AnotherStruct = AnotherStruct
    del AnotherStruct

if 'Structure' not in _M_Test.__dict__:
    _M_Test.Structure = Ice.createTempClass()
    class Structure(object):
        def __init__(self, p=None, e=_M_Test.MyEnum.enum1, s=Ice._struct_marker):
            self.p = p
            self.e = e
            if s is Ice._struct_marker:
                self.s = _M_Test.AnotherStruct()
            else:
                self.s = s

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Test.Structure):
                return NotImplemented
            else:
                if self.p != other.p:
                    return False
                if self.e != other.e:
                    return False
                if self.s != other.s:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Structure)

        __repr__ = __str__

    _M_Test._t_Structure = IcePy.defineStruct('::Test::Structure', Structure, (), (
        ('p', (), _M_Test._t_MyClassPrx),
        ('e', (), _M_Test._t_MyEnum),
        ('s', (), _M_Test._t_AnotherStruct)
    ))

    _M_Test.Structure = Structure
    del Structure

if '_t_ByteS' not in _M_Test.__dict__:
    _M_Test._t_ByteS = IcePy.defineSequence('::Test::ByteS', (), IcePy._t_byte)

if '_t_BoolS' not in _M_Test.__dict__:
    _M_Test._t_BoolS = IcePy.defineSequence('::Test::BoolS', (), IcePy._t_bool)

if '_t_ShortS' not in _M_Test.__dict__:
    _M_Test._t_ShortS = IcePy.defineSequence('::Test::ShortS', (), IcePy._t_short)

if '_t_IntS' not in _M_Test.__dict__:
    _M_Test._t_IntS = IcePy.defineSequence('::Test::IntS', (), IcePy._t_int)

if '_t_LongS' not in _M_Test.__dict__:
    _M_Test._t_LongS = IcePy.defineSequence('::Test::LongS', (), IcePy._t_long)

if '_t_FloatS' not in _M_Test.__dict__:
    _M_Test._t_FloatS = IcePy.defineSequence('::Test::FloatS', (), IcePy._t_float)

if '_t_DoubleS' not in _M_Test.__dict__:
    _M_Test._t_DoubleS = IcePy.defineSequence('::Test::DoubleS', (), IcePy._t_double)

if '_t_StringS' not in _M_Test.__dict__:
    _M_Test._t_StringS = IcePy.defineSequence('::Test::StringS', (), IcePy._t_string)

if '_t_MyEnumS' not in _M_Test.__dict__:
    _M_Test._t_MyEnumS = IcePy.defineSequence('::Test::MyEnumS', (), _M_Test._t_MyEnum)

if '_t_MyClassS' not in _M_Test.__dict__:
    _M_Test._t_MyClassS = IcePy.defineSequence('::Test::MyClassS', (), _M_Test._t_MyClassPrx)

if '_t_ByteSS' not in _M_Test.__dict__:
    _M_Test._t_ByteSS = IcePy.defineSequence('::Test::ByteSS', (), _M_Test._t_ByteS)

if '_t_BoolSS' not in _M_Test.__dict__:
    _M_Test._t_BoolSS = IcePy.defineSequence('::Test::BoolSS', (), _M_Test._t_BoolS)

if '_t_ShortSS' not in _M_Test.__dict__:
    _M_Test._t_ShortSS = IcePy.defineSequence('::Test::ShortSS', (), _M_Test._t_ShortS)

if '_t_IntSS' not in _M_Test.__dict__:
    _M_Test._t_IntSS = IcePy.defineSequence('::Test::IntSS', (), _M_Test._t_IntS)

if '_t_LongSS' not in _M_Test.__dict__:
    _M_Test._t_LongSS = IcePy.defineSequence('::Test::LongSS', (), _M_Test._t_LongS)

if '_t_FloatSS' not in _M_Test.__dict__:
    _M_Test._t_FloatSS = IcePy.defineSequence('::Test::FloatSS', (), _M_Test._t_FloatS)

if '_t_DoubleSS' not in _M_Test.__dict__:
    _M_Test._t_DoubleSS = IcePy.defineSequence('::Test::DoubleSS', (), _M_Test._t_DoubleS)

if '_t_StringSS' not in _M_Test.__dict__:
    _M_Test._t_StringSS = IcePy.defineSequence('::Test::StringSS', (), _M_Test._t_StringS)

if '_t_MyEnumSS' not in _M_Test.__dict__:
    _M_Test._t_MyEnumSS = IcePy.defineSequence('::Test::MyEnumSS', (), _M_Test._t_MyEnumS)

if '_t_MyClassSS' not in _M_Test.__dict__:
    _M_Test._t_MyClassSS = IcePy.defineSequence('::Test::MyClassSS', (), _M_Test._t_MyClassS)

if '_t_StringSSS' not in _M_Test.__dict__:
    _M_Test._t_StringSSS = IcePy.defineSequence('::Test::StringSSS', (), _M_Test._t_StringSS)

if 'MyStruct' not in _M_Test.__dict__:
    _M_Test.MyStruct = Ice.createTempClass()
    class MyStruct(object):
        def __init__(self, i=0, j=0):
            self.i = i
            self.j = j

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.i)
            _h = 5 * _h + Ice.getHash(self.j)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Test.MyStruct):
                return NotImplemented
            else:
                if self.i is None or other.i is None:
                    if self.i != other.i:
                        return (-1 if self.i is None else 1)
                else:
                    if self.i < other.i:
                        return -1
                    elif self.i > other.i:
                        return 1
                if self.j is None or other.j is None:
                    if self.j != other.j:
                        return (-1 if self.j is None else 1)
                else:
                    if self.j < other.j:
                        return -1
                    elif self.j > other.j:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_MyStruct)

        __repr__ = __str__

    _M_Test._t_MyStruct = IcePy.defineStruct('::Test::MyStruct', MyStruct, (), (
        ('i', (), IcePy._t_int),
        ('j', (), IcePy._t_int)
    ))

    _M_Test.MyStruct = MyStruct
    del MyStruct

if '_t_ByteBoolD' not in _M_Test.__dict__:
    _M_Test._t_ByteBoolD = IcePy.defineDictionary('::Test::ByteBoolD', (), IcePy._t_byte, IcePy._t_bool)

if '_t_ShortIntD' not in _M_Test.__dict__:
    _M_Test._t_ShortIntD = IcePy.defineDictionary('::Test::ShortIntD', (), IcePy._t_short, IcePy._t_int)

if '_t_LongFloatD' not in _M_Test.__dict__:
    _M_Test._t_LongFloatD = IcePy.defineDictionary('::Test::LongFloatD', (), IcePy._t_long, IcePy._t_float)

if '_t_StringStringD' not in _M_Test.__dict__:
    _M_Test._t_StringStringD = IcePy.defineDictionary('::Test::StringStringD', (), IcePy._t_string, IcePy._t_string)

if '_t_StringMyEnumD' not in _M_Test.__dict__:
    _M_Test._t_StringMyEnumD = IcePy.defineDictionary('::Test::StringMyEnumD', (), IcePy._t_string, _M_Test._t_MyEnum)

if '_t_MyEnumStringD' not in _M_Test.__dict__:
    _M_Test._t_MyEnumStringD = IcePy.defineDictionary('::Test::MyEnumStringD', (), _M_Test._t_MyEnum, IcePy._t_string)

if '_t_MyStructMyEnumD' not in _M_Test.__dict__:
    _M_Test._t_MyStructMyEnumD = IcePy.defineDictionary('::Test::MyStructMyEnumD', (), _M_Test._t_MyStruct, _M_Test._t_MyEnum)

if '_t_ByteBoolDS' not in _M_Test.__dict__:
    _M_Test._t_ByteBoolDS = IcePy.defineSequence('::Test::ByteBoolDS', (), _M_Test._t_ByteBoolD)

if '_t_ShortIntDS' not in _M_Test.__dict__:
    _M_Test._t_ShortIntDS = IcePy.defineSequence('::Test::ShortIntDS', (), _M_Test._t_ShortIntD)

if '_t_LongFloatDS' not in _M_Test.__dict__:
    _M_Test._t_LongFloatDS = IcePy.defineSequence('::Test::LongFloatDS', (), _M_Test._t_LongFloatD)

if '_t_StringStringDS' not in _M_Test.__dict__:
    _M_Test._t_StringStringDS = IcePy.defineSequence('::Test::StringStringDS', (), _M_Test._t_StringStringD)

if '_t_StringMyEnumDS' not in _M_Test.__dict__:
    _M_Test._t_StringMyEnumDS = IcePy.defineSequence('::Test::StringMyEnumDS', (), _M_Test._t_StringMyEnumD)

if '_t_MyEnumStringDS' not in _M_Test.__dict__:
    _M_Test._t_MyEnumStringDS = IcePy.defineSequence('::Test::MyEnumStringDS', (), _M_Test._t_MyEnumStringD)

if '_t_MyStructMyEnumDS' not in _M_Test.__dict__:
    _M_Test._t_MyStructMyEnumDS = IcePy.defineSequence('::Test::MyStructMyEnumDS', (), _M_Test._t_MyStructMyEnumD)

if '_t_ByteByteSD' not in _M_Test.__dict__:
    _M_Test._t_ByteByteSD = IcePy.defineDictionary('::Test::ByteByteSD', (), IcePy._t_byte, _M_Test._t_ByteS)

if '_t_BoolBoolSD' not in _M_Test.__dict__:
    _M_Test._t_BoolBoolSD = IcePy.defineDictionary('::Test::BoolBoolSD', (), IcePy._t_bool, _M_Test._t_BoolS)

if '_t_ShortShortSD' not in _M_Test.__dict__:
    _M_Test._t_ShortShortSD = IcePy.defineDictionary('::Test::ShortShortSD', (), IcePy._t_short, _M_Test._t_ShortS)

if '_t_IntIntSD' not in _M_Test.__dict__:
    _M_Test._t_IntIntSD = IcePy.defineDictionary('::Test::IntIntSD', (), IcePy._t_int, _M_Test._t_IntS)

if '_t_LongLongSD' not in _M_Test.__dict__:
    _M_Test._t_LongLongSD = IcePy.defineDictionary('::Test::LongLongSD', (), IcePy._t_long, _M_Test._t_LongS)

if '_t_StringFloatSD' not in _M_Test.__dict__:
    _M_Test._t_StringFloatSD = IcePy.defineDictionary('::Test::StringFloatSD', (), IcePy._t_string, _M_Test._t_FloatS)

if '_t_StringDoubleSD' not in _M_Test.__dict__:
    _M_Test._t_StringDoubleSD = IcePy.defineDictionary('::Test::StringDoubleSD', (), IcePy._t_string, _M_Test._t_DoubleS)

if '_t_StringStringSD' not in _M_Test.__dict__:
    _M_Test._t_StringStringSD = IcePy.defineDictionary('::Test::StringStringSD', (), IcePy._t_string, _M_Test._t_StringS)

if '_t_MyEnumMyEnumSD' not in _M_Test.__dict__:
    _M_Test._t_MyEnumMyEnumSD = IcePy.defineDictionary('::Test::MyEnumMyEnumSD', (), _M_Test._t_MyEnum, _M_Test._t_MyEnumS)

if 'SomeException' not in _M_Test.__dict__:
    _M_Test.SomeException = Ice.createTempClass()
    class SomeException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::SomeException'

    _M_Test._t_SomeException = IcePy.defineException('::Test::SomeException', SomeException, (), False, None, ())
    SomeException._ice_type = _M_Test._t_SomeException

    _M_Test.SomeException = SomeException
    del SomeException

_M_Test._t_MyClass = IcePy.defineValue('::Test::MyClass', Ice.Value, -1, (), False, True, None, ())

if 'MyClassPrx' not in _M_Test.__dict__:
    _M_Test.MyClassPrx = Ice.createTempClass()
    class MyClassPrx(Ice.ObjectPrx):

        def shutdown(self, context=None):
            return _M_Test.MyClass._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.MyClass._op_shutdown.invokeAsync(self, ((), context))

        def begin_shutdown(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_shutdown.begin(self, ((), _response, _ex, _sent, context))

        def end_shutdown(self, _r):
            return _M_Test.MyClass._op_shutdown.end(self, _r)

        def supportsCompress(self, context=None):
            return _M_Test.MyClass._op_supportsCompress.invoke(self, ((), context))

        def supportsCompressAsync(self, context=None):
            return _M_Test.MyClass._op_supportsCompress.invokeAsync(self, ((), context))

        def begin_supportsCompress(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_supportsCompress.begin(self, ((), _response, _ex, _sent, context))

        def end_supportsCompress(self, _r):
            return _M_Test.MyClass._op_supportsCompress.end(self, _r)

        def opVoid(self, context=None):
            return _M_Test.MyClass._op_opVoid.invoke(self, ((), context))

        def opVoidAsync(self, context=None):
            return _M_Test.MyClass._op_opVoid.invokeAsync(self, ((), context))

        def begin_opVoid(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opVoid.begin(self, ((), _response, _ex, _sent, context))

        def end_opVoid(self, _r):
            return _M_Test.MyClass._op_opVoid.end(self, _r)

        def opByte(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opByte.invoke(self, ((p1, p2), context))

        def opByteAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opByte.invokeAsync(self, ((p1, p2), context))

        def begin_opByte(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opByte.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opByte(self, _r):
            return _M_Test.MyClass._op_opByte.end(self, _r)

        def opBool(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opBool.invoke(self, ((p1, p2), context))

        def opBoolAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opBool.invokeAsync(self, ((p1, p2), context))

        def begin_opBool(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opBool.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opBool(self, _r):
            return _M_Test.MyClass._op_opBool.end(self, _r)

        def opShortIntLong(self, p1, p2, p3, context=None):
            return _M_Test.MyClass._op_opShortIntLong.invoke(self, ((p1, p2, p3), context))

        def opShortIntLongAsync(self, p1, p2, p3, context=None):
            return _M_Test.MyClass._op_opShortIntLong.invokeAsync(self, ((p1, p2, p3), context))

        def begin_opShortIntLong(self, p1, p2, p3, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opShortIntLong.begin(self, ((p1, p2, p3), _response, _ex, _sent, context))

        def end_opShortIntLong(self, _r):
            return _M_Test.MyClass._op_opShortIntLong.end(self, _r)

        def opFloatDouble(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opFloatDouble.invoke(self, ((p1, p2), context))

        def opFloatDoubleAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opFloatDouble.invokeAsync(self, ((p1, p2), context))

        def begin_opFloatDouble(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opFloatDouble.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opFloatDouble(self, _r):
            return _M_Test.MyClass._op_opFloatDouble.end(self, _r)

        def opString(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opString.invoke(self, ((p1, p2), context))

        def opStringAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opString.invokeAsync(self, ((p1, p2), context))

        def begin_opString(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opString.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opString(self, _r):
            return _M_Test.MyClass._op_opString.end(self, _r)

        def opMyEnum(self, p1, context=None):
            return _M_Test.MyClass._op_opMyEnum.invoke(self, ((p1, ), context))

        def opMyEnumAsync(self, p1, context=None):
            return _M_Test.MyClass._op_opMyEnum.invokeAsync(self, ((p1, ), context))

        def begin_opMyEnum(self, p1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opMyEnum.begin(self, ((p1, ), _response, _ex, _sent, context))

        def end_opMyEnum(self, _r):
            return _M_Test.MyClass._op_opMyEnum.end(self, _r)

        def opMyClass(self, p1, context=None):
            return _M_Test.MyClass._op_opMyClass.invoke(self, ((p1, ), context))

        def opMyClassAsync(self, p1, context=None):
            return _M_Test.MyClass._op_opMyClass.invokeAsync(self, ((p1, ), context))

        def begin_opMyClass(self, p1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opMyClass.begin(self, ((p1, ), _response, _ex, _sent, context))

        def end_opMyClass(self, _r):
            return _M_Test.MyClass._op_opMyClass.end(self, _r)

        def opStruct(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStruct.invoke(self, ((p1, p2), context))

        def opStructAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStruct.invokeAsync(self, ((p1, p2), context))

        def begin_opStruct(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opStruct.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opStruct(self, _r):
            return _M_Test.MyClass._op_opStruct.end(self, _r)

        def opByteS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opByteS.invoke(self, ((p1, p2), context))

        def opByteSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opByteS.invokeAsync(self, ((p1, p2), context))

        def begin_opByteS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opByteS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opByteS(self, _r):
            return _M_Test.MyClass._op_opByteS.end(self, _r)

        def opBoolS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opBoolS.invoke(self, ((p1, p2), context))

        def opBoolSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opBoolS.invokeAsync(self, ((p1, p2), context))

        def begin_opBoolS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opBoolS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opBoolS(self, _r):
            return _M_Test.MyClass._op_opBoolS.end(self, _r)

        def opShortIntLongS(self, p1, p2, p3, context=None):
            return _M_Test.MyClass._op_opShortIntLongS.invoke(self, ((p1, p2, p3), context))

        def opShortIntLongSAsync(self, p1, p2, p3, context=None):
            return _M_Test.MyClass._op_opShortIntLongS.invokeAsync(self, ((p1, p2, p3), context))

        def begin_opShortIntLongS(self, p1, p2, p3, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opShortIntLongS.begin(self, ((p1, p2, p3), _response, _ex, _sent, context))

        def end_opShortIntLongS(self, _r):
            return _M_Test.MyClass._op_opShortIntLongS.end(self, _r)

        def opFloatDoubleS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opFloatDoubleS.invoke(self, ((p1, p2), context))

        def opFloatDoubleSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opFloatDoubleS.invokeAsync(self, ((p1, p2), context))

        def begin_opFloatDoubleS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opFloatDoubleS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opFloatDoubleS(self, _r):
            return _M_Test.MyClass._op_opFloatDoubleS.end(self, _r)

        def opStringS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringS.invoke(self, ((p1, p2), context))

        def opStringSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringS.invokeAsync(self, ((p1, p2), context))

        def begin_opStringS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opStringS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opStringS(self, _r):
            return _M_Test.MyClass._op_opStringS.end(self, _r)

        def opByteSS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opByteSS.invoke(self, ((p1, p2), context))

        def opByteSSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opByteSS.invokeAsync(self, ((p1, p2), context))

        def begin_opByteSS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opByteSS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opByteSS(self, _r):
            return _M_Test.MyClass._op_opByteSS.end(self, _r)

        def opBoolSS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opBoolSS.invoke(self, ((p1, p2), context))

        def opBoolSSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opBoolSS.invokeAsync(self, ((p1, p2), context))

        def begin_opBoolSS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opBoolSS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opBoolSS(self, _r):
            return _M_Test.MyClass._op_opBoolSS.end(self, _r)

        def opShortIntLongSS(self, p1, p2, p3, context=None):
            return _M_Test.MyClass._op_opShortIntLongSS.invoke(self, ((p1, p2, p3), context))

        def opShortIntLongSSAsync(self, p1, p2, p3, context=None):
            return _M_Test.MyClass._op_opShortIntLongSS.invokeAsync(self, ((p1, p2, p3), context))

        def begin_opShortIntLongSS(self, p1, p2, p3, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opShortIntLongSS.begin(self, ((p1, p2, p3), _response, _ex, _sent, context))

        def end_opShortIntLongSS(self, _r):
            return _M_Test.MyClass._op_opShortIntLongSS.end(self, _r)

        def opFloatDoubleSS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opFloatDoubleSS.invoke(self, ((p1, p2), context))

        def opFloatDoubleSSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opFloatDoubleSS.invokeAsync(self, ((p1, p2), context))

        def begin_opFloatDoubleSS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opFloatDoubleSS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opFloatDoubleSS(self, _r):
            return _M_Test.MyClass._op_opFloatDoubleSS.end(self, _r)

        def opStringSS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringSS.invoke(self, ((p1, p2), context))

        def opStringSSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringSS.invokeAsync(self, ((p1, p2), context))

        def begin_opStringSS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opStringSS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opStringSS(self, _r):
            return _M_Test.MyClass._op_opStringSS.end(self, _r)

        def opStringSSS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringSSS.invoke(self, ((p1, p2), context))

        def opStringSSSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringSSS.invokeAsync(self, ((p1, p2), context))

        def begin_opStringSSS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opStringSSS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opStringSSS(self, _r):
            return _M_Test.MyClass._op_opStringSSS.end(self, _r)

        def opByteBoolD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opByteBoolD.invoke(self, ((p1, p2), context))

        def opByteBoolDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opByteBoolD.invokeAsync(self, ((p1, p2), context))

        def begin_opByteBoolD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opByteBoolD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opByteBoolD(self, _r):
            return _M_Test.MyClass._op_opByteBoolD.end(self, _r)

        def opShortIntD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opShortIntD.invoke(self, ((p1, p2), context))

        def opShortIntDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opShortIntD.invokeAsync(self, ((p1, p2), context))

        def begin_opShortIntD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opShortIntD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opShortIntD(self, _r):
            return _M_Test.MyClass._op_opShortIntD.end(self, _r)

        def opLongFloatD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opLongFloatD.invoke(self, ((p1, p2), context))

        def opLongFloatDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opLongFloatD.invokeAsync(self, ((p1, p2), context))

        def begin_opLongFloatD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opLongFloatD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opLongFloatD(self, _r):
            return _M_Test.MyClass._op_opLongFloatD.end(self, _r)

        def opStringStringD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringStringD.invoke(self, ((p1, p2), context))

        def opStringStringDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringStringD.invokeAsync(self, ((p1, p2), context))

        def begin_opStringStringD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opStringStringD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opStringStringD(self, _r):
            return _M_Test.MyClass._op_opStringStringD.end(self, _r)

        def opStringMyEnumD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringMyEnumD.invoke(self, ((p1, p2), context))

        def opStringMyEnumDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringMyEnumD.invokeAsync(self, ((p1, p2), context))

        def begin_opStringMyEnumD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opStringMyEnumD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opStringMyEnumD(self, _r):
            return _M_Test.MyClass._op_opStringMyEnumD.end(self, _r)

        def opMyEnumStringD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opMyEnumStringD.invoke(self, ((p1, p2), context))

        def opMyEnumStringDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opMyEnumStringD.invokeAsync(self, ((p1, p2), context))

        def begin_opMyEnumStringD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opMyEnumStringD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opMyEnumStringD(self, _r):
            return _M_Test.MyClass._op_opMyEnumStringD.end(self, _r)

        def opMyStructMyEnumD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opMyStructMyEnumD.invoke(self, ((p1, p2), context))

        def opMyStructMyEnumDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opMyStructMyEnumD.invokeAsync(self, ((p1, p2), context))

        def begin_opMyStructMyEnumD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opMyStructMyEnumD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opMyStructMyEnumD(self, _r):
            return _M_Test.MyClass._op_opMyStructMyEnumD.end(self, _r)

        def opByteBoolDS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opByteBoolDS.invoke(self, ((p1, p2), context))

        def opByteBoolDSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opByteBoolDS.invokeAsync(self, ((p1, p2), context))

        def begin_opByteBoolDS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opByteBoolDS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opByteBoolDS(self, _r):
            return _M_Test.MyClass._op_opByteBoolDS.end(self, _r)

        def opShortIntDS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opShortIntDS.invoke(self, ((p1, p2), context))

        def opShortIntDSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opShortIntDS.invokeAsync(self, ((p1, p2), context))

        def begin_opShortIntDS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opShortIntDS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opShortIntDS(self, _r):
            return _M_Test.MyClass._op_opShortIntDS.end(self, _r)

        def opLongFloatDS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opLongFloatDS.invoke(self, ((p1, p2), context))

        def opLongFloatDSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opLongFloatDS.invokeAsync(self, ((p1, p2), context))

        def begin_opLongFloatDS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opLongFloatDS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opLongFloatDS(self, _r):
            return _M_Test.MyClass._op_opLongFloatDS.end(self, _r)

        def opStringStringDS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringStringDS.invoke(self, ((p1, p2), context))

        def opStringStringDSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringStringDS.invokeAsync(self, ((p1, p2), context))

        def begin_opStringStringDS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opStringStringDS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opStringStringDS(self, _r):
            return _M_Test.MyClass._op_opStringStringDS.end(self, _r)

        def opStringMyEnumDS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringMyEnumDS.invoke(self, ((p1, p2), context))

        def opStringMyEnumDSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringMyEnumDS.invokeAsync(self, ((p1, p2), context))

        def begin_opStringMyEnumDS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opStringMyEnumDS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opStringMyEnumDS(self, _r):
            return _M_Test.MyClass._op_opStringMyEnumDS.end(self, _r)

        def opMyEnumStringDS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opMyEnumStringDS.invoke(self, ((p1, p2), context))

        def opMyEnumStringDSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opMyEnumStringDS.invokeAsync(self, ((p1, p2), context))

        def begin_opMyEnumStringDS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opMyEnumStringDS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opMyEnumStringDS(self, _r):
            return _M_Test.MyClass._op_opMyEnumStringDS.end(self, _r)

        def opMyStructMyEnumDS(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opMyStructMyEnumDS.invoke(self, ((p1, p2), context))

        def opMyStructMyEnumDSAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opMyStructMyEnumDS.invokeAsync(self, ((p1, p2), context))

        def begin_opMyStructMyEnumDS(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opMyStructMyEnumDS.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opMyStructMyEnumDS(self, _r):
            return _M_Test.MyClass._op_opMyStructMyEnumDS.end(self, _r)

        def opByteByteSD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opByteByteSD.invoke(self, ((p1, p2), context))

        def opByteByteSDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opByteByteSD.invokeAsync(self, ((p1, p2), context))

        def begin_opByteByteSD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opByteByteSD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opByteByteSD(self, _r):
            return _M_Test.MyClass._op_opByteByteSD.end(self, _r)

        def opBoolBoolSD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opBoolBoolSD.invoke(self, ((p1, p2), context))

        def opBoolBoolSDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opBoolBoolSD.invokeAsync(self, ((p1, p2), context))

        def begin_opBoolBoolSD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opBoolBoolSD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opBoolBoolSD(self, _r):
            return _M_Test.MyClass._op_opBoolBoolSD.end(self, _r)

        def opShortShortSD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opShortShortSD.invoke(self, ((p1, p2), context))

        def opShortShortSDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opShortShortSD.invokeAsync(self, ((p1, p2), context))

        def begin_opShortShortSD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opShortShortSD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opShortShortSD(self, _r):
            return _M_Test.MyClass._op_opShortShortSD.end(self, _r)

        def opIntIntSD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opIntIntSD.invoke(self, ((p1, p2), context))

        def opIntIntSDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opIntIntSD.invokeAsync(self, ((p1, p2), context))

        def begin_opIntIntSD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opIntIntSD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opIntIntSD(self, _r):
            return _M_Test.MyClass._op_opIntIntSD.end(self, _r)

        def opLongLongSD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opLongLongSD.invoke(self, ((p1, p2), context))

        def opLongLongSDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opLongLongSD.invokeAsync(self, ((p1, p2), context))

        def begin_opLongLongSD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opLongLongSD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opLongLongSD(self, _r):
            return _M_Test.MyClass._op_opLongLongSD.end(self, _r)

        def opStringFloatSD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringFloatSD.invoke(self, ((p1, p2), context))

        def opStringFloatSDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringFloatSD.invokeAsync(self, ((p1, p2), context))

        def begin_opStringFloatSD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opStringFloatSD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opStringFloatSD(self, _r):
            return _M_Test.MyClass._op_opStringFloatSD.end(self, _r)

        def opStringDoubleSD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringDoubleSD.invoke(self, ((p1, p2), context))

        def opStringDoubleSDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringDoubleSD.invokeAsync(self, ((p1, p2), context))

        def begin_opStringDoubleSD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opStringDoubleSD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opStringDoubleSD(self, _r):
            return _M_Test.MyClass._op_opStringDoubleSD.end(self, _r)

        def opStringStringSD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringStringSD.invoke(self, ((p1, p2), context))

        def opStringStringSDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opStringStringSD.invokeAsync(self, ((p1, p2), context))

        def begin_opStringStringSD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opStringStringSD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opStringStringSD(self, _r):
            return _M_Test.MyClass._op_opStringStringSD.end(self, _r)

        def opMyEnumMyEnumSD(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opMyEnumMyEnumSD.invoke(self, ((p1, p2), context))

        def opMyEnumMyEnumSDAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opMyEnumMyEnumSD.invokeAsync(self, ((p1, p2), context))

        def begin_opMyEnumMyEnumSD(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opMyEnumMyEnumSD.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opMyEnumMyEnumSD(self, _r):
            return _M_Test.MyClass._op_opMyEnumMyEnumSD.end(self, _r)

        def opIntS(self, s, context=None):
            return _M_Test.MyClass._op_opIntS.invoke(self, ((s, ), context))

        def opIntSAsync(self, s, context=None):
            return _M_Test.MyClass._op_opIntS.invokeAsync(self, ((s, ), context))

        def begin_opIntS(self, s, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opIntS.begin(self, ((s, ), _response, _ex, _sent, context))

        def end_opIntS(self, _r):
            return _M_Test.MyClass._op_opIntS.end(self, _r)

        def opByteSOneway(self, s, context=None):
            return _M_Test.MyClass._op_opByteSOneway.invoke(self, ((s, ), context))

        def opByteSOnewayAsync(self, s, context=None):
            return _M_Test.MyClass._op_opByteSOneway.invokeAsync(self, ((s, ), context))

        def begin_opByteSOneway(self, s, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opByteSOneway.begin(self, ((s, ), _response, _ex, _sent, context))

        def end_opByteSOneway(self, _r):
            return _M_Test.MyClass._op_opByteSOneway.end(self, _r)

        def opByteSOnewayCallCount(self, context=None):
            return _M_Test.MyClass._op_opByteSOnewayCallCount.invoke(self, ((), context))

        def opByteSOnewayCallCountAsync(self, context=None):
            return _M_Test.MyClass._op_opByteSOnewayCallCount.invokeAsync(self, ((), context))

        def begin_opByteSOnewayCallCount(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opByteSOnewayCallCount.begin(self, ((), _response, _ex, _sent, context))

        def end_opByteSOnewayCallCount(self, _r):
            return _M_Test.MyClass._op_opByteSOnewayCallCount.end(self, _r)

        def opContext(self, context=None):
            return _M_Test.MyClass._op_opContext.invoke(self, ((), context))

        def opContextAsync(self, context=None):
            return _M_Test.MyClass._op_opContext.invokeAsync(self, ((), context))

        def begin_opContext(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opContext.begin(self, ((), _response, _ex, _sent, context))

        def end_opContext(self, _r):
            return _M_Test.MyClass._op_opContext.end(self, _r)

        def opDoubleMarshaling(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opDoubleMarshaling.invoke(self, ((p1, p2), context))

        def opDoubleMarshalingAsync(self, p1, p2, context=None):
            return _M_Test.MyClass._op_opDoubleMarshaling.invokeAsync(self, ((p1, p2), context))

        def begin_opDoubleMarshaling(self, p1, p2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opDoubleMarshaling.begin(self, ((p1, p2), _response, _ex, _sent, context))

        def end_opDoubleMarshaling(self, _r):
            return _M_Test.MyClass._op_opDoubleMarshaling.end(self, _r)

        def opIdempotent(self, context=None):
            return _M_Test.MyClass._op_opIdempotent.invoke(self, ((), context))

        def opIdempotentAsync(self, context=None):
            return _M_Test.MyClass._op_opIdempotent.invokeAsync(self, ((), context))

        def begin_opIdempotent(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opIdempotent.begin(self, ((), _response, _ex, _sent, context))

        def end_opIdempotent(self, _r):
            return _M_Test.MyClass._op_opIdempotent.end(self, _r)

        def opNonmutating(self, context=None):
            return _M_Test.MyClass._op_opNonmutating.invoke(self, ((), context))

        def opNonmutatingAsync(self, context=None):
            return _M_Test.MyClass._op_opNonmutating.invokeAsync(self, ((), context))

        def begin_opNonmutating(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opNonmutating.begin(self, ((), _response, _ex, _sent, context))

        def end_opNonmutating(self, _r):
            return _M_Test.MyClass._op_opNonmutating.end(self, _r)

        def opByte1(self, opByte1, context=None):
            return _M_Test.MyClass._op_opByte1.invoke(self, ((opByte1, ), context))

        def opByte1Async(self, opByte1, context=None):
            return _M_Test.MyClass._op_opByte1.invokeAsync(self, ((opByte1, ), context))

        def begin_opByte1(self, opByte1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opByte1.begin(self, ((opByte1, ), _response, _ex, _sent, context))

        def end_opByte1(self, _r):
            return _M_Test.MyClass._op_opByte1.end(self, _r)

        def opShort1(self, opShort1, context=None):
            return _M_Test.MyClass._op_opShort1.invoke(self, ((opShort1, ), context))

        def opShort1Async(self, opShort1, context=None):
            return _M_Test.MyClass._op_opShort1.invokeAsync(self, ((opShort1, ), context))

        def begin_opShort1(self, opShort1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opShort1.begin(self, ((opShort1, ), _response, _ex, _sent, context))

        def end_opShort1(self, _r):
            return _M_Test.MyClass._op_opShort1.end(self, _r)

        def opInt1(self, opInt1, context=None):
            return _M_Test.MyClass._op_opInt1.invoke(self, ((opInt1, ), context))

        def opInt1Async(self, opInt1, context=None):
            return _M_Test.MyClass._op_opInt1.invokeAsync(self, ((opInt1, ), context))

        def begin_opInt1(self, opInt1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opInt1.begin(self, ((opInt1, ), _response, _ex, _sent, context))

        def end_opInt1(self, _r):
            return _M_Test.MyClass._op_opInt1.end(self, _r)

        def opLong1(self, opLong1, context=None):
            return _M_Test.MyClass._op_opLong1.invoke(self, ((opLong1, ), context))

        def opLong1Async(self, opLong1, context=None):
            return _M_Test.MyClass._op_opLong1.invokeAsync(self, ((opLong1, ), context))

        def begin_opLong1(self, opLong1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opLong1.begin(self, ((opLong1, ), _response, _ex, _sent, context))

        def end_opLong1(self, _r):
            return _M_Test.MyClass._op_opLong1.end(self, _r)

        def opFloat1(self, opFloat1, context=None):
            return _M_Test.MyClass._op_opFloat1.invoke(self, ((opFloat1, ), context))

        def opFloat1Async(self, opFloat1, context=None):
            return _M_Test.MyClass._op_opFloat1.invokeAsync(self, ((opFloat1, ), context))

        def begin_opFloat1(self, opFloat1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opFloat1.begin(self, ((opFloat1, ), _response, _ex, _sent, context))

        def end_opFloat1(self, _r):
            return _M_Test.MyClass._op_opFloat1.end(self, _r)

        def opDouble1(self, opDouble1, context=None):
            return _M_Test.MyClass._op_opDouble1.invoke(self, ((opDouble1, ), context))

        def opDouble1Async(self, opDouble1, context=None):
            return _M_Test.MyClass._op_opDouble1.invokeAsync(self, ((opDouble1, ), context))

        def begin_opDouble1(self, opDouble1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opDouble1.begin(self, ((opDouble1, ), _response, _ex, _sent, context))

        def end_opDouble1(self, _r):
            return _M_Test.MyClass._op_opDouble1.end(self, _r)

        def opString1(self, opString1, context=None):
            return _M_Test.MyClass._op_opString1.invoke(self, ((opString1, ), context))

        def opString1Async(self, opString1, context=None):
            return _M_Test.MyClass._op_opString1.invokeAsync(self, ((opString1, ), context))

        def begin_opString1(self, opString1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opString1.begin(self, ((opString1, ), _response, _ex, _sent, context))

        def end_opString1(self, _r):
            return _M_Test.MyClass._op_opString1.end(self, _r)

        def opStringS1(self, opStringS1, context=None):
            return _M_Test.MyClass._op_opStringS1.invoke(self, ((opStringS1, ), context))

        def opStringS1Async(self, opStringS1, context=None):
            return _M_Test.MyClass._op_opStringS1.invokeAsync(self, ((opStringS1, ), context))

        def begin_opStringS1(self, opStringS1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opStringS1.begin(self, ((opStringS1, ), _response, _ex, _sent, context))

        def end_opStringS1(self, _r):
            return _M_Test.MyClass._op_opStringS1.end(self, _r)

        def opByteBoolD1(self, opByteBoolD1, context=None):
            return _M_Test.MyClass._op_opByteBoolD1.invoke(self, ((opByteBoolD1, ), context))

        def opByteBoolD1Async(self, opByteBoolD1, context=None):
            return _M_Test.MyClass._op_opByteBoolD1.invokeAsync(self, ((opByteBoolD1, ), context))

        def begin_opByteBoolD1(self, opByteBoolD1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opByteBoolD1.begin(self, ((opByteBoolD1, ), _response, _ex, _sent, context))

        def end_opByteBoolD1(self, _r):
            return _M_Test.MyClass._op_opByteBoolD1.end(self, _r)

        def opStringS2(self, stringS, context=None):
            return _M_Test.MyClass._op_opStringS2.invoke(self, ((stringS, ), context))

        def opStringS2Async(self, stringS, context=None):
            return _M_Test.MyClass._op_opStringS2.invokeAsync(self, ((stringS, ), context))

        def begin_opStringS2(self, stringS, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opStringS2.begin(self, ((stringS, ), _response, _ex, _sent, context))

        def end_opStringS2(self, _r):
            return _M_Test.MyClass._op_opStringS2.end(self, _r)

        def opByteBoolD2(self, byteBoolD, context=None):
            return _M_Test.MyClass._op_opByteBoolD2.invoke(self, ((byteBoolD, ), context))

        def opByteBoolD2Async(self, byteBoolD, context=None):
            return _M_Test.MyClass._op_opByteBoolD2.invokeAsync(self, ((byteBoolD, ), context))

        def begin_opByteBoolD2(self, byteBoolD, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opByteBoolD2.begin(self, ((byteBoolD, ), _response, _ex, _sent, context))

        def end_opByteBoolD2(self, _r):
            return _M_Test.MyClass._op_opByteBoolD2.end(self, _r)

        def opStringLiterals(self, context=None):
            return _M_Test.MyClass._op_opStringLiterals.invoke(self, ((), context))

        def opStringLiteralsAsync(self, context=None):
            return _M_Test.MyClass._op_opStringLiterals.invokeAsync(self, ((), context))

        def begin_opStringLiterals(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opStringLiterals.begin(self, ((), _response, _ex, _sent, context))

        def end_opStringLiterals(self, _r):
            return _M_Test.MyClass._op_opStringLiterals.end(self, _r)

        def opMStruct1(self, context=None):
            return _M_Test.MyClass._op_opMStruct1.invoke(self, ((), context))

        def opMStruct1Async(self, context=None):
            return _M_Test.MyClass._op_opMStruct1.invokeAsync(self, ((), context))

        def begin_opMStruct1(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opMStruct1.begin(self, ((), _response, _ex, _sent, context))

        def end_opMStruct1(self, _r):
            return _M_Test.MyClass._op_opMStruct1.end(self, _r)

        def opMStruct2(self, p1, context=None):
            return _M_Test.MyClass._op_opMStruct2.invoke(self, ((p1, ), context))

        def opMStruct2Async(self, p1, context=None):
            return _M_Test.MyClass._op_opMStruct2.invokeAsync(self, ((p1, ), context))

        def begin_opMStruct2(self, p1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opMStruct2.begin(self, ((p1, ), _response, _ex, _sent, context))

        def end_opMStruct2(self, _r):
            return _M_Test.MyClass._op_opMStruct2.end(self, _r)

        def opMSeq1(self, context=None):
            return _M_Test.MyClass._op_opMSeq1.invoke(self, ((), context))

        def opMSeq1Async(self, context=None):
            return _M_Test.MyClass._op_opMSeq1.invokeAsync(self, ((), context))

        def begin_opMSeq1(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opMSeq1.begin(self, ((), _response, _ex, _sent, context))

        def end_opMSeq1(self, _r):
            return _M_Test.MyClass._op_opMSeq1.end(self, _r)

        def opMSeq2(self, p1, context=None):
            return _M_Test.MyClass._op_opMSeq2.invoke(self, ((p1, ), context))

        def opMSeq2Async(self, p1, context=None):
            return _M_Test.MyClass._op_opMSeq2.invokeAsync(self, ((p1, ), context))

        def begin_opMSeq2(self, p1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opMSeq2.begin(self, ((p1, ), _response, _ex, _sent, context))

        def end_opMSeq2(self, _r):
            return _M_Test.MyClass._op_opMSeq2.end(self, _r)

        def opMDict1(self, context=None):
            return _M_Test.MyClass._op_opMDict1.invoke(self, ((), context))

        def opMDict1Async(self, context=None):
            return _M_Test.MyClass._op_opMDict1.invokeAsync(self, ((), context))

        def begin_opMDict1(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opMDict1.begin(self, ((), _response, _ex, _sent, context))

        def end_opMDict1(self, _r):
            return _M_Test.MyClass._op_opMDict1.end(self, _r)

        def opMDict2(self, p1, context=None):
            return _M_Test.MyClass._op_opMDict2.invoke(self, ((p1, ), context))

        def opMDict2Async(self, p1, context=None):
            return _M_Test.MyClass._op_opMDict2.invokeAsync(self, ((p1, ), context))

        def begin_opMDict2(self, p1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyClass._op_opMDict2.begin(self, ((p1, ), _response, _ex, _sent, context))

        def end_opMDict2(self, _r):
            return _M_Test.MyClass._op_opMDict2.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.MyClassPrx.ice_checkedCast(proxy, '::Test::MyClass', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.MyClassPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::MyClass'
    _M_Test._t_MyClassPrx = IcePy.defineProxy('::Test::MyClass', MyClassPrx)

    _M_Test.MyClassPrx = MyClassPrx
    del MyClassPrx

    _M_Test.MyClass = Ice.createTempClass()
    class MyClass(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::MyClass')

        def ice_id(self, current=None):
            return '::Test::MyClass'

        @staticmethod
        def ice_staticId():
            return '::Test::MyClass'

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def supportsCompress(self, current=None):
            raise NotImplementedError("servant method 'supportsCompress' not implemented")

        def opVoid(self, current=None):
            raise NotImplementedError("servant method 'opVoid' not implemented")

        def opByte(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opByte' not implemented")

        def opBool(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opBool' not implemented")

        def opShortIntLong(self, p1, p2, p3, current=None):
            raise NotImplementedError("servant method 'opShortIntLong' not implemented")

        def opFloatDouble(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opFloatDouble' not implemented")

        def opString(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opString' not implemented")

        def opMyEnum(self, p1, current=None):
            raise NotImplementedError("servant method 'opMyEnum' not implemented")

        def opMyClass(self, p1, current=None):
            raise NotImplementedError("servant method 'opMyClass' not implemented")

        def opStruct(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opStruct' not implemented")

        def opByteS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opByteS' not implemented")

        def opBoolS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opBoolS' not implemented")

        def opShortIntLongS(self, p1, p2, p3, current=None):
            raise NotImplementedError("servant method 'opShortIntLongS' not implemented")

        def opFloatDoubleS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opFloatDoubleS' not implemented")

        def opStringS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opStringS' not implemented")

        def opByteSS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opByteSS' not implemented")

        def opBoolSS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opBoolSS' not implemented")

        def opShortIntLongSS(self, p1, p2, p3, current=None):
            raise NotImplementedError("servant method 'opShortIntLongSS' not implemented")

        def opFloatDoubleSS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opFloatDoubleSS' not implemented")

        def opStringSS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opStringSS' not implemented")

        def opStringSSS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opStringSSS' not implemented")

        def opByteBoolD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opByteBoolD' not implemented")

        def opShortIntD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opShortIntD' not implemented")

        def opLongFloatD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opLongFloatD' not implemented")

        def opStringStringD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opStringStringD' not implemented")

        def opStringMyEnumD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opStringMyEnumD' not implemented")

        def opMyEnumStringD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opMyEnumStringD' not implemented")

        def opMyStructMyEnumD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opMyStructMyEnumD' not implemented")

        def opByteBoolDS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opByteBoolDS' not implemented")

        def opShortIntDS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opShortIntDS' not implemented")

        def opLongFloatDS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opLongFloatDS' not implemented")

        def opStringStringDS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opStringStringDS' not implemented")

        def opStringMyEnumDS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opStringMyEnumDS' not implemented")

        def opMyEnumStringDS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opMyEnumStringDS' not implemented")

        def opMyStructMyEnumDS(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opMyStructMyEnumDS' not implemented")

        def opByteByteSD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opByteByteSD' not implemented")

        def opBoolBoolSD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opBoolBoolSD' not implemented")

        def opShortShortSD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opShortShortSD' not implemented")

        def opIntIntSD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opIntIntSD' not implemented")

        def opLongLongSD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opLongLongSD' not implemented")

        def opStringFloatSD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opStringFloatSD' not implemented")

        def opStringDoubleSD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opStringDoubleSD' not implemented")

        def opStringStringSD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opStringStringSD' not implemented")

        def opMyEnumMyEnumSD(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opMyEnumMyEnumSD' not implemented")

        def opIntS(self, s, current=None):
            raise NotImplementedError("servant method 'opIntS' not implemented")

        def opByteSOneway(self, s, current=None):
            raise NotImplementedError("servant method 'opByteSOneway' not implemented")

        def opByteSOnewayCallCount(self, current=None):
            raise NotImplementedError("servant method 'opByteSOnewayCallCount' not implemented")

        def opContext(self, current=None):
            raise NotImplementedError("servant method 'opContext' not implemented")

        def opDoubleMarshaling(self, p1, p2, current=None):
            raise NotImplementedError("servant method 'opDoubleMarshaling' not implemented")

        def opIdempotent(self, current=None):
            raise NotImplementedError("servant method 'opIdempotent' not implemented")

        def opNonmutating(self, current=None):
            raise NotImplementedError("servant method 'opNonmutating' not implemented")

        def opByte1(self, opByte1, current=None):
            raise NotImplementedError("servant method 'opByte1' not implemented")

        def opShort1(self, opShort1, current=None):
            raise NotImplementedError("servant method 'opShort1' not implemented")

        def opInt1(self, opInt1, current=None):
            raise NotImplementedError("servant method 'opInt1' not implemented")

        def opLong1(self, opLong1, current=None):
            raise NotImplementedError("servant method 'opLong1' not implemented")

        def opFloat1(self, opFloat1, current=None):
            raise NotImplementedError("servant method 'opFloat1' not implemented")

        def opDouble1(self, opDouble1, current=None):
            raise NotImplementedError("servant method 'opDouble1' not implemented")

        def opString1(self, opString1, current=None):
            raise NotImplementedError("servant method 'opString1' not implemented")

        def opStringS1(self, opStringS1, current=None):
            raise NotImplementedError("servant method 'opStringS1' not implemented")

        def opByteBoolD1(self, opByteBoolD1, current=None):
            raise NotImplementedError("servant method 'opByteBoolD1' not implemented")

        def opStringS2(self, stringS, current=None):
            raise NotImplementedError("servant method 'opStringS2' not implemented")

        def opByteBoolD2(self, byteBoolD, current=None):
            raise NotImplementedError("servant method 'opByteBoolD2' not implemented")

        def opStringLiterals(self, current=None):
            raise NotImplementedError("servant method 'opStringLiterals' not implemented")

        """
        Immediately marshals the result of an invocation of opMStruct1
        and returns an object that the servant implementation must return
        as its result.
        Arguments:
        result -- The result (or result tuple) of the invocation.
        current -- The Current object passed to the invocation.
        Returns: An object containing the marshaled result.
        """
        @staticmethod
        def OpMStruct1MarshaledResult(result, current):
            return IcePy.MarshaledResult(result, _M_Test.MyClass._op_opMStruct1, current.adapter.getCommunicator().getImpl(), current.encoding)

        def opMStruct1(self, current=None):
            raise NotImplementedError("servant method 'opMStruct1' not implemented")

        """
        Immediately marshals the result of an invocation of opMStruct2
        and returns an object that the servant implementation must return
        as its result.
        Arguments:
        result -- The result (or result tuple) of the invocation.
        current -- The Current object passed to the invocation.
        Returns: An object containing the marshaled result.
        """
        @staticmethod
        def OpMStruct2MarshaledResult(result, current):
            return IcePy.MarshaledResult(result, _M_Test.MyClass._op_opMStruct2, current.adapter.getCommunicator().getImpl(), current.encoding)

        def opMStruct2(self, p1, current=None):
            raise NotImplementedError("servant method 'opMStruct2' not implemented")

        """
        Immediately marshals the result of an invocation of opMSeq1
        and returns an object that the servant implementation must return
        as its result.
        Arguments:
        result -- The result (or result tuple) of the invocation.
        current -- The Current object passed to the invocation.
        Returns: An object containing the marshaled result.
        """
        @staticmethod
        def OpMSeq1MarshaledResult(result, current):
            return IcePy.MarshaledResult(result, _M_Test.MyClass._op_opMSeq1, current.adapter.getCommunicator().getImpl(), current.encoding)

        def opMSeq1(self, current=None):
            raise NotImplementedError("servant method 'opMSeq1' not implemented")

        """
        Immediately marshals the result of an invocation of opMSeq2
        and returns an object that the servant implementation must return
        as its result.
        Arguments:
        result -- The result (or result tuple) of the invocation.
        current -- The Current object passed to the invocation.
        Returns: An object containing the marshaled result.
        """
        @staticmethod
        def OpMSeq2MarshaledResult(result, current):
            return IcePy.MarshaledResult(result, _M_Test.MyClass._op_opMSeq2, current.adapter.getCommunicator().getImpl(), current.encoding)

        def opMSeq2(self, p1, current=None):
            raise NotImplementedError("servant method 'opMSeq2' not implemented")

        """
        Immediately marshals the result of an invocation of opMDict1
        and returns an object that the servant implementation must return
        as its result.
        Arguments:
        result -- The result (or result tuple) of the invocation.
        current -- The Current object passed to the invocation.
        Returns: An object containing the marshaled result.
        """
        @staticmethod
        def OpMDict1MarshaledResult(result, current):
            return IcePy.MarshaledResult(result, _M_Test.MyClass._op_opMDict1, current.adapter.getCommunicator().getImpl(), current.encoding)

        def opMDict1(self, current=None):
            raise NotImplementedError("servant method 'opMDict1' not implemented")

        """
        Immediately marshals the result of an invocation of opMDict2
        and returns an object that the servant implementation must return
        as its result.
        Arguments:
        result -- The result (or result tuple) of the invocation.
        current -- The Current object passed to the invocation.
        Returns: An object containing the marshaled result.
        """
        @staticmethod
        def OpMDict2MarshaledResult(result, current):
            return IcePy.MarshaledResult(result, _M_Test.MyClass._op_opMDict2, current.adapter.getCommunicator().getImpl(), current.encoding)

        def opMDict2(self, p1, current=None):
            raise NotImplementedError("servant method 'opMDict2' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_MyClassDisp)

        __repr__ = __str__

    _M_Test._t_MyClassDisp = IcePy.defineClass('::Test::MyClass', MyClass, (), None, ())
    MyClass._ice_type = _M_Test._t_MyClassDisp

    MyClass._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    MyClass._op_supportsCompress = IcePy.Operation('supportsCompress', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    MyClass._op_opVoid = IcePy.Operation('opVoid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    MyClass._op_opByte = IcePy.Operation('opByte', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_byte, False, 0), ((), IcePy._t_byte, False, 0)), (((), IcePy._t_byte, False, 0),), ((), IcePy._t_byte, False, 0), ())
    MyClass._op_opBool = IcePy.Operation('opBool', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0)), (((), IcePy._t_bool, False, 0),), ((), IcePy._t_bool, False, 0), ())
    MyClass._op_opShortIntLong = IcePy.Operation('opShortIntLong', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_short, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_long, False, 0)), (((), IcePy._t_short, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_long, False, 0)), ((), IcePy._t_long, False, 0), ())
    MyClass._op_opFloatDouble = IcePy.Operation('opFloatDouble', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0), ((), IcePy._t_double, False, 0)), (((), IcePy._t_float, False, 0), ((), IcePy._t_double, False, 0)), ((), IcePy._t_double, False, 0), ())
    MyClass._op_opString = IcePy.Operation('opString', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (((), IcePy._t_string, False, 0),), ((), IcePy._t_string, False, 0), ())
    MyClass._op_opMyEnum = IcePy.Operation('opMyEnum', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_MyEnum, False, 0),), (((), _M_Test._t_MyEnum, False, 0),), ((), _M_Test._t_MyEnum, False, 0), ())
    MyClass._op_opMyClass = IcePy.Operation('opMyClass', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_MyClassPrx, False, 0),), (((), _M_Test._t_MyClassPrx, False, 0), ((), _M_Test._t_MyClassPrx, False, 0)), ((), _M_Test._t_MyClassPrx, False, 0), ())
    MyClass._op_opStruct = IcePy.Operation('opStruct', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_Structure, False, 0), ((), _M_Test._t_Structure, False, 0)), (((), _M_Test._t_Structure, False, 0),), ((), _M_Test._t_Structure, False, 0), ())
    MyClass._op_opByteS = IcePy.Operation('opByteS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ByteS, False, 0), ((), _M_Test._t_ByteS, False, 0)), (((), _M_Test._t_ByteS, False, 0),), ((), _M_Test._t_ByteS, False, 0), ())
    MyClass._op_opBoolS = IcePy.Operation('opBoolS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_BoolS, False, 0), ((), _M_Test._t_BoolS, False, 0)), (((), _M_Test._t_BoolS, False, 0),), ((), _M_Test._t_BoolS, False, 0), ())
    MyClass._op_opShortIntLongS = IcePy.Operation('opShortIntLongS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ShortS, False, 0), ((), _M_Test._t_IntS, False, 0), ((), _M_Test._t_LongS, False, 0)), (((), _M_Test._t_ShortS, False, 0), ((), _M_Test._t_IntS, False, 0), ((), _M_Test._t_LongS, False, 0)), ((), _M_Test._t_LongS, False, 0), ())
    MyClass._op_opFloatDoubleS = IcePy.Operation('opFloatDoubleS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_FloatS, False, 0), ((), _M_Test._t_DoubleS, False, 0)), (((), _M_Test._t_FloatS, False, 0), ((), _M_Test._t_DoubleS, False, 0)), ((), _M_Test._t_DoubleS, False, 0), ())
    MyClass._op_opStringS = IcePy.Operation('opStringS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringS, False, 0), ((), _M_Test._t_StringS, False, 0)), (((), _M_Test._t_StringS, False, 0),), ((), _M_Test._t_StringS, False, 0), ())
    MyClass._op_opByteSS = IcePy.Operation('opByteSS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ByteSS, False, 0), ((), _M_Test._t_ByteSS, False, 0)), (((), _M_Test._t_ByteSS, False, 0),), ((), _M_Test._t_ByteSS, False, 0), ())
    MyClass._op_opBoolSS = IcePy.Operation('opBoolSS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_BoolSS, False, 0), ((), _M_Test._t_BoolSS, False, 0)), (((), _M_Test._t_BoolSS, False, 0),), ((), _M_Test._t_BoolSS, False, 0), ())
    MyClass._op_opShortIntLongSS = IcePy.Operation('opShortIntLongSS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ShortSS, False, 0), ((), _M_Test._t_IntSS, False, 0), ((), _M_Test._t_LongSS, False, 0)), (((), _M_Test._t_ShortSS, False, 0), ((), _M_Test._t_IntSS, False, 0), ((), _M_Test._t_LongSS, False, 0)), ((), _M_Test._t_LongSS, False, 0), ())
    MyClass._op_opFloatDoubleSS = IcePy.Operation('opFloatDoubleSS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_FloatSS, False, 0), ((), _M_Test._t_DoubleSS, False, 0)), (((), _M_Test._t_FloatSS, False, 0), ((), _M_Test._t_DoubleSS, False, 0)), ((), _M_Test._t_DoubleSS, False, 0), ())
    MyClass._op_opStringSS = IcePy.Operation('opStringSS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringSS, False, 0), ((), _M_Test._t_StringSS, False, 0)), (((), _M_Test._t_StringSS, False, 0),), ((), _M_Test._t_StringSS, False, 0), ())
    MyClass._op_opStringSSS = IcePy.Operation('opStringSSS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringSSS, False, 0), ((), _M_Test._t_StringSSS, False, 0)), (((), _M_Test._t_StringSSS, False, 0),), ((), _M_Test._t_StringSSS, False, 0), ())
    MyClass._op_opByteBoolD = IcePy.Operation('opByteBoolD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ByteBoolD, False, 0), ((), _M_Test._t_ByteBoolD, False, 0)), (((), _M_Test._t_ByteBoolD, False, 0),), ((), _M_Test._t_ByteBoolD, False, 0), ())
    MyClass._op_opShortIntD = IcePy.Operation('opShortIntD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ShortIntD, False, 0), ((), _M_Test._t_ShortIntD, False, 0)), (((), _M_Test._t_ShortIntD, False, 0),), ((), _M_Test._t_ShortIntD, False, 0), ())
    MyClass._op_opLongFloatD = IcePy.Operation('opLongFloatD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_LongFloatD, False, 0), ((), _M_Test._t_LongFloatD, False, 0)), (((), _M_Test._t_LongFloatD, False, 0),), ((), _M_Test._t_LongFloatD, False, 0), ())
    MyClass._op_opStringStringD = IcePy.Operation('opStringStringD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringStringD, False, 0), ((), _M_Test._t_StringStringD, False, 0)), (((), _M_Test._t_StringStringD, False, 0),), ((), _M_Test._t_StringStringD, False, 0), ())
    MyClass._op_opStringMyEnumD = IcePy.Operation('opStringMyEnumD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringMyEnumD, False, 0), ((), _M_Test._t_StringMyEnumD, False, 0)), (((), _M_Test._t_StringMyEnumD, False, 0),), ((), _M_Test._t_StringMyEnumD, False, 0), ())
    MyClass._op_opMyEnumStringD = IcePy.Operation('opMyEnumStringD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_MyEnumStringD, False, 0), ((), _M_Test._t_MyEnumStringD, False, 0)), (((), _M_Test._t_MyEnumStringD, False, 0),), ((), _M_Test._t_MyEnumStringD, False, 0), ())
    MyClass._op_opMyStructMyEnumD = IcePy.Operation('opMyStructMyEnumD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_MyStructMyEnumD, False, 0), ((), _M_Test._t_MyStructMyEnumD, False, 0)), (((), _M_Test._t_MyStructMyEnumD, False, 0),), ((), _M_Test._t_MyStructMyEnumD, False, 0), ())
    MyClass._op_opByteBoolDS = IcePy.Operation('opByteBoolDS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ByteBoolDS, False, 0), ((), _M_Test._t_ByteBoolDS, False, 0)), (((), _M_Test._t_ByteBoolDS, False, 0),), ((), _M_Test._t_ByteBoolDS, False, 0), ())
    MyClass._op_opShortIntDS = IcePy.Operation('opShortIntDS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ShortIntDS, False, 0), ((), _M_Test._t_ShortIntDS, False, 0)), (((), _M_Test._t_ShortIntDS, False, 0),), ((), _M_Test._t_ShortIntDS, False, 0), ())
    MyClass._op_opLongFloatDS = IcePy.Operation('opLongFloatDS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_LongFloatDS, False, 0), ((), _M_Test._t_LongFloatDS, False, 0)), (((), _M_Test._t_LongFloatDS, False, 0),), ((), _M_Test._t_LongFloatDS, False, 0), ())
    MyClass._op_opStringStringDS = IcePy.Operation('opStringStringDS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringStringDS, False, 0), ((), _M_Test._t_StringStringDS, False, 0)), (((), _M_Test._t_StringStringDS, False, 0),), ((), _M_Test._t_StringStringDS, False, 0), ())
    MyClass._op_opStringMyEnumDS = IcePy.Operation('opStringMyEnumDS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringMyEnumDS, False, 0), ((), _M_Test._t_StringMyEnumDS, False, 0)), (((), _M_Test._t_StringMyEnumDS, False, 0),), ((), _M_Test._t_StringMyEnumDS, False, 0), ())
    MyClass._op_opMyEnumStringDS = IcePy.Operation('opMyEnumStringDS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_MyEnumStringDS, False, 0), ((), _M_Test._t_MyEnumStringDS, False, 0)), (((), _M_Test._t_MyEnumStringDS, False, 0),), ((), _M_Test._t_MyEnumStringDS, False, 0), ())
    MyClass._op_opMyStructMyEnumDS = IcePy.Operation('opMyStructMyEnumDS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_MyStructMyEnumDS, False, 0), ((), _M_Test._t_MyStructMyEnumDS, False, 0)), (((), _M_Test._t_MyStructMyEnumDS, False, 0),), ((), _M_Test._t_MyStructMyEnumDS, False, 0), ())
    MyClass._op_opByteByteSD = IcePy.Operation('opByteByteSD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ByteByteSD, False, 0), ((), _M_Test._t_ByteByteSD, False, 0)), (((), _M_Test._t_ByteByteSD, False, 0),), ((), _M_Test._t_ByteByteSD, False, 0), ())
    MyClass._op_opBoolBoolSD = IcePy.Operation('opBoolBoolSD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_BoolBoolSD, False, 0), ((), _M_Test._t_BoolBoolSD, False, 0)), (((), _M_Test._t_BoolBoolSD, False, 0),), ((), _M_Test._t_BoolBoolSD, False, 0), ())
    MyClass._op_opShortShortSD = IcePy.Operation('opShortShortSD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ShortShortSD, False, 0), ((), _M_Test._t_ShortShortSD, False, 0)), (((), _M_Test._t_ShortShortSD, False, 0),), ((), _M_Test._t_ShortShortSD, False, 0), ())
    MyClass._op_opIntIntSD = IcePy.Operation('opIntIntSD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_IntIntSD, False, 0), ((), _M_Test._t_IntIntSD, False, 0)), (((), _M_Test._t_IntIntSD, False, 0),), ((), _M_Test._t_IntIntSD, False, 0), ())
    MyClass._op_opLongLongSD = IcePy.Operation('opLongLongSD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_LongLongSD, False, 0), ((), _M_Test._t_LongLongSD, False, 0)), (((), _M_Test._t_LongLongSD, False, 0),), ((), _M_Test._t_LongLongSD, False, 0), ())
    MyClass._op_opStringFloatSD = IcePy.Operation('opStringFloatSD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringFloatSD, False, 0), ((), _M_Test._t_StringFloatSD, False, 0)), (((), _M_Test._t_StringFloatSD, False, 0),), ((), _M_Test._t_StringFloatSD, False, 0), ())
    MyClass._op_opStringDoubleSD = IcePy.Operation('opStringDoubleSD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringDoubleSD, False, 0), ((), _M_Test._t_StringDoubleSD, False, 0)), (((), _M_Test._t_StringDoubleSD, False, 0),), ((), _M_Test._t_StringDoubleSD, False, 0), ())
    MyClass._op_opStringStringSD = IcePy.Operation('opStringStringSD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringStringSD, False, 0), ((), _M_Test._t_StringStringSD, False, 0)), (((), _M_Test._t_StringStringSD, False, 0),), ((), _M_Test._t_StringStringSD, False, 0), ())
    MyClass._op_opMyEnumMyEnumSD = IcePy.Operation('opMyEnumMyEnumSD', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_MyEnumMyEnumSD, False, 0), ((), _M_Test._t_MyEnumMyEnumSD, False, 0)), (((), _M_Test._t_MyEnumMyEnumSD, False, 0),), ((), _M_Test._t_MyEnumMyEnumSD, False, 0), ())
    MyClass._op_opIntS = IcePy.Operation('opIntS', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_IntS, False, 0),), (), ((), _M_Test._t_IntS, False, 0), ())
    MyClass._op_opByteSOneway = IcePy.Operation('opByteSOneway', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ByteS, False, 0),), (), None, ())
    MyClass._op_opByteSOnewayCallCount = IcePy.Operation('opByteSOnewayCallCount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    MyClass._op_opContext = IcePy.Operation('opContext', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Ice._t_Context, False, 0), ())
    MyClass._op_opDoubleMarshaling = IcePy.Operation('opDoubleMarshaling', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0), ((), _M_Test._t_DoubleS, False, 0)), (), None, ())
    MyClass._op_opIdempotent = IcePy.Operation('opIdempotent', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    MyClass._op_opNonmutating = IcePy.Operation('opNonmutating', Ice.OperationMode.Idempotent, Ice.OperationMode.Nonmutating, False, None, (), (), (), None, ())
    MyClass._op_opByte1 = IcePy.Operation('opByte1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_byte, False, 0),), (), ((), IcePy._t_byte, False, 0), ())
    MyClass._op_opShort1 = IcePy.Operation('opShort1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_short, False, 0),), (), ((), IcePy._t_short, False, 0), ())
    MyClass._op_opInt1 = IcePy.Operation('opInt1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    MyClass._op_opLong1 = IcePy.Operation('opLong1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0),), (), ((), IcePy._t_long, False, 0), ())
    MyClass._op_opFloat1 = IcePy.Operation('opFloat1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), ((), IcePy._t_float, False, 0), ())
    MyClass._op_opDouble1 = IcePy.Operation('opDouble1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0),), (), ((), IcePy._t_double, False, 0), ())
    MyClass._op_opString1 = IcePy.Operation('opString1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    MyClass._op_opStringS1 = IcePy.Operation('opStringS1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringS, False, 0),), (), ((), _M_Test._t_StringS, False, 0), ())
    MyClass._op_opByteBoolD1 = IcePy.Operation('opByteBoolD1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ByteBoolD, False, 0),), (), ((), _M_Test._t_ByteBoolD, False, 0), ())
    MyClass._op_opStringS2 = IcePy.Operation('opStringS2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringS, False, 0),), (), ((), _M_Test._t_StringS, False, 0), ())
    MyClass._op_opByteBoolD2 = IcePy.Operation('opByteBoolD2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ByteBoolD, False, 0),), (), ((), _M_Test._t_ByteBoolD, False, 0), ())
    MyClass._op_opStringLiterals = IcePy.Operation('opStringLiterals', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Test._t_StringS, False, 0), ())
    MyClass._op_opMStruct1 = IcePy.Operation('opMStruct1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Test._t_Structure, False, 0), ())
    MyClass._op_opMStruct2 = IcePy.Operation('opMStruct2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_Structure, False, 0),), (((), _M_Test._t_Structure, False, 0),), ((), _M_Test._t_Structure, False, 0), ())
    MyClass._op_opMSeq1 = IcePy.Operation('opMSeq1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Test._t_StringS, False, 0), ())
    MyClass._op_opMSeq2 = IcePy.Operation('opMSeq2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringS, False, 0),), (((), _M_Test._t_StringS, False, 0),), ((), _M_Test._t_StringS, False, 0), ())
    MyClass._op_opMDict1 = IcePy.Operation('opMDict1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Test._t_StringStringD, False, 0), ())
    MyClass._op_opMDict2 = IcePy.Operation('opMDict2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringStringD, False, 0),), (((), _M_Test._t_StringStringD, False, 0),), ((), _M_Test._t_StringStringD, False, 0), ())

    _M_Test.MyClass = MyClass
    del MyClass

if 'MyStruct1' not in _M_Test.__dict__:
    _M_Test.MyStruct1 = Ice.createTempClass()
    class MyStruct1(object):
        def __init__(self, tesT='', myClass=None, myStruct1=''):
            self.tesT = tesT
            self.myClass = myClass
            self.myStruct1 = myStruct1

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Test.MyStruct1):
                return NotImplemented
            else:
                if self.tesT != other.tesT:
                    return False
                if self.myClass != other.myClass:
                    return False
                if self.myStruct1 != other.myStruct1:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_MyStruct1)

        __repr__ = __str__

    _M_Test._t_MyStruct1 = IcePy.defineStruct('::Test::MyStruct1', MyStruct1, (), (
        ('tesT', (), IcePy._t_string),
        ('myClass', (), _M_Test._t_MyClassPrx),
        ('myStruct1', (), IcePy._t_string)
    ))

    _M_Test.MyStruct1 = MyStruct1
    del MyStruct1

if 'MyClass1' not in _M_Test.__dict__:
    _M_Test.MyClass1 = Ice.createTempClass()
    class MyClass1(Ice.Value):
        def __init__(self, tesT='', myClass=None, myClass1=''):
            self.tesT = tesT
            self.myClass = myClass
            self.myClass1 = myClass1

        def ice_id(self):
            return '::Test::MyClass1'

        @staticmethod
        def ice_staticId():
            return '::Test::MyClass1'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_MyClass1)

        __repr__ = __str__

    _M_Test._t_MyClass1 = IcePy.defineValue('::Test::MyClass1', MyClass1, -1, (), False, False, None, (
        ('tesT', (), IcePy._t_string, False, 0),
        ('myClass', (), _M_Test._t_MyClassPrx, False, 0),
        ('myClass1', (), IcePy._t_string, False, 0)
    ))
    MyClass1._ice_type = _M_Test._t_MyClass1

    _M_Test.MyClass1 = MyClass1
    del MyClass1

_M_Test._t_MyDerivedClass = IcePy.defineValue('::Test::MyDerivedClass', Ice.Value, -1, (), False, True, None, ())

if 'MyDerivedClassPrx' not in _M_Test.__dict__:
    _M_Test.MyDerivedClassPrx = Ice.createTempClass()
    class MyDerivedClassPrx(_M_Test.MyClassPrx):

        def opDerived(self, context=None):
            return _M_Test.MyDerivedClass._op_opDerived.invoke(self, ((), context))

        def opDerivedAsync(self, context=None):
            return _M_Test.MyDerivedClass._op_opDerived.invokeAsync(self, ((), context))

        def begin_opDerived(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyDerivedClass._op_opDerived.begin(self, ((), _response, _ex, _sent, context))

        def end_opDerived(self, _r):
            return _M_Test.MyDerivedClass._op_opDerived.end(self, _r)

        def opMyClass1(self, opMyClass1, context=None):
            return _M_Test.MyDerivedClass._op_opMyClass1.invoke(self, ((opMyClass1, ), context))

        def opMyClass1Async(self, opMyClass1, context=None):
            return _M_Test.MyDerivedClass._op_opMyClass1.invokeAsync(self, ((opMyClass1, ), context))

        def begin_opMyClass1(self, opMyClass1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyDerivedClass._op_opMyClass1.begin(self, ((opMyClass1, ), _response, _ex, _sent, context))

        def end_opMyClass1(self, _r):
            return _M_Test.MyDerivedClass._op_opMyClass1.end(self, _r)

        def opMyStruct1(self, opMyStruct1, context=None):
            return _M_Test.MyDerivedClass._op_opMyStruct1.invoke(self, ((opMyStruct1, ), context))

        def opMyStruct1Async(self, opMyStruct1, context=None):
            return _M_Test.MyDerivedClass._op_opMyStruct1.invokeAsync(self, ((opMyStruct1, ), context))

        def begin_opMyStruct1(self, opMyStruct1, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.MyDerivedClass._op_opMyStruct1.begin(self, ((opMyStruct1, ), _response, _ex, _sent, context))

        def end_opMyStruct1(self, _r):
            return _M_Test.MyDerivedClass._op_opMyStruct1.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.MyDerivedClassPrx.ice_checkedCast(proxy, '::Test::MyDerivedClass', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.MyDerivedClassPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::MyDerivedClass'
    _M_Test._t_MyDerivedClassPrx = IcePy.defineProxy('::Test::MyDerivedClass', MyDerivedClassPrx)

    _M_Test.MyDerivedClassPrx = MyDerivedClassPrx
    del MyDerivedClassPrx

    _M_Test.MyDerivedClass = Ice.createTempClass()
    class MyDerivedClass(_M_Test.MyClass):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::MyClass', '::Test::MyDerivedClass')

        def ice_id(self, current=None):
            return '::Test::MyDerivedClass'

        @staticmethod
        def ice_staticId():
            return '::Test::MyDerivedClass'

        def opDerived(self, current=None):
            raise NotImplementedError("servant method 'opDerived' not implemented")

        def opMyClass1(self, opMyClass1, current=None):
            raise NotImplementedError("servant method 'opMyClass1' not implemented")

        def opMyStruct1(self, opMyStruct1, current=None):
            raise NotImplementedError("servant method 'opMyStruct1' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_MyDerivedClassDisp)

        __repr__ = __str__

    _M_Test._t_MyDerivedClassDisp = IcePy.defineClass('::Test::MyDerivedClass', MyDerivedClass, (), None, (_M_Test._t_MyClassDisp,))
    MyDerivedClass._ice_type = _M_Test._t_MyDerivedClassDisp

    MyDerivedClass._op_opDerived = IcePy.Operation('opDerived', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    MyDerivedClass._op_opMyClass1 = IcePy.Operation('opMyClass1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_MyClass1, False, 0),), (), ((), _M_Test._t_MyClass1, False, 0), ())
    MyDerivedClass._op_opMyStruct1 = IcePy.Operation('opMyStruct1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_MyStruct1, False, 0),), (), ((), _M_Test._t_MyStruct1, False, 0), ())

    _M_Test.MyDerivedClass = MyDerivedClass
    del MyDerivedClass

_M_Test.s0 = "\\"

_M_Test.s1 = "A"

_M_Test.s2 = "Ice"

_M_Test.s3 = "A21"

_M_Test.s4 = "\\u0041 \\U00000041"

_M_Test.s5 = "\303\277" if _version_info_[0] < 3 else "\u00FF"

_M_Test.s6 = "\317\277" if _version_info_[0] < 3 else "\u03FF"

_M_Test.s7 = "\327\260" if _version_info_[0] < 3 else "\u05F0"

_M_Test.s8 = "\360\220\200\200" if _version_info_[0] < 3 else "\U00010000"

_M_Test.s9 = "\360\237\215\214" if _version_info_[0] < 3 else "\U0001F34C"

_M_Test.s10 = "\340\266\247" if _version_info_[0] < 3 else "\u0DA7"

_M_Test.s11 = "\342\202\254\342\202\254\342\202\254" if _version_info_[0] < 3 else "\u20ac\u20ac\u20ac"

_M_Test.s12 = "\\101"

_M_Test.s13 = "\360\237\215\2140123" if _version_info_[0] < 3 else "\U0001F34C0123"

_M_Test.s14 = "\360\237\215\214abcd" if _version_info_[0] < 3 else "\U0001F34Cabcd"

_M_Test.s15 = "\360\237\215\214ABCD" if _version_info_[0] < 3 else "\U0001F34CABCD"

_M_Test.s16 = "\177abcd" if _version_info_[0] < 3 else "\u007fabcd"

_M_Test.s17 = "\177ABCD" if _version_info_[0] < 3 else "\u007fABCD"

_M_Test.s18 = "\0011238" if _version_info_[0] < 3 else "\u00011238"

_M_Test.s19 = "abc\0011238\babcd" if _version_info_[0] < 3 else "abc\u00011238\babcd"

_M_Test.sw0 = "\\"

_M_Test.sw1 = "A"

_M_Test.sw2 = "Ice"

_M_Test.sw3 = "A21"

_M_Test.sw4 = "\\u0041 \\U00000041"

_M_Test.sw5 = "\303\277" if _version_info_[0] < 3 else "\U000000FF"

_M_Test.sw6 = "\317\277" if _version_info_[0] < 3 else "\U000003FF"

_M_Test.sw7 = "\327\260" if _version_info_[0] < 3 else "\U000005F0"

_M_Test.sw8 = "\360\220\200\200" if _version_info_[0] < 3 else "\U00010000"

_M_Test.sw9 = "\360\237\215\214" if _version_info_[0] < 3 else "\U0001F34C"

_M_Test.sw10 = "\340\266\247" if _version_info_[0] < 3 else "\U00000DA7"

_M_Test.ss0 = "'\"?\\\a\b\f\n\r\t\v\006" if _version_info_[0] < 3 else "'\"?\\\a\b\f\n\r\t\v\u0006"

_M_Test.ss1 = "'\"?\\\a\b\f\n\r\t\v\006" if _version_info_[0] < 3 else "'\"?\\\a\b\f\n\r\t\v\u0006"

_M_Test.ss2 = "'\"?\\\a\b\f\n\r\t\v\006" if _version_info_[0] < 3 else "'\"?\\\a\b\f\n\r\t\v\u0006"

_M_Test.ss3 = "\\\\U\\u\\"

_M_Test.ss4 = "\\A\\"

_M_Test.ss5 = "\\u0041\\"

_M_Test.su0 = "\304\250\305\270\303\277\304\200\341\274\200\360\220\206\224\360\220\205\252\360\220\206\230\360\237\215\200\360\237\215\201\360\237\215\202\360\237\215\203" if _version_info_[0] < 3 else "\u0128\u0178\u00ff\u0100\u1f00\U00010194\U0001016a\U00010198\U0001f340\U0001f341\U0001f342\U0001f343"

_M_Test.su1 = "\304\250\305\270\303\277\304\200\341\274\200\360\220\206\224\360\220\205\252\360\220\206\230\360\237\215\200\360\237\215\201\360\237\215\202\360\237\215\203" if _version_info_[0] < 3 else "\u0128\u0178\u00FF\u0100\u1F00\U00010194\U0001016A\U00010198\U0001F340\U0001F341\U0001F342\U0001F343"

_M_Test.su2 = "\304\250\305\270\303\277\304\200\341\274\200\360\220\206\224\360\220\205\252\360\220\206\230\360\237\215\200\360\237\215\201\360\237\215\202\360\237\215\203" if _version_info_[0] < 3 else "\U00000128\U00000178\U000000FF\U00000100\U00001F00\U00010194\U0001016A\U00010198\U0001F340\U0001F341\U0001F342\U0001F343"

# End of module Test

# Start of module Test2
_M_Test2 = Ice.openModule('Test2')
__name__ = 'Test2'

_M_Test2._t_MyDerivedClass = IcePy.defineValue('::Test2::MyDerivedClass', Ice.Value, -1, (), False, True, None, ())

if 'MyDerivedClassPrx' not in _M_Test2.__dict__:
    _M_Test2.MyDerivedClassPrx = Ice.createTempClass()
    class MyDerivedClassPrx(_M_Test.MyClassPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test2.MyDerivedClassPrx.ice_checkedCast(proxy, '::Test2::MyDerivedClass', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test2.MyDerivedClassPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test2::MyDerivedClass'
    _M_Test2._t_MyDerivedClassPrx = IcePy.defineProxy('::Test2::MyDerivedClass', MyDerivedClassPrx)

    _M_Test2.MyDerivedClassPrx = MyDerivedClassPrx
    del MyDerivedClassPrx

    _M_Test2.MyDerivedClass = Ice.createTempClass()
    class MyDerivedClass(_M_Test.MyClass):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test2::MyDerivedClass', '::Test::MyClass')

        def ice_id(self, current=None):
            return '::Test2::MyDerivedClass'

        @staticmethod
        def ice_staticId():
            return '::Test2::MyDerivedClass'

        def __str__(self):
            return IcePy.stringify(self, _M_Test2._t_MyDerivedClassDisp)

        __repr__ = __str__

    _M_Test2._t_MyDerivedClassDisp = IcePy.defineClass('::Test2::MyDerivedClass', MyDerivedClass, (), None, (_M_Test._t_MyClassDisp,))
    MyDerivedClass._ice_type = _M_Test2._t_MyDerivedClassDisp

    _M_Test2.MyDerivedClass = MyDerivedClass
    del MyDerivedClass

# End of module Test2

# Start of module M
_M_M = Ice.openModule('M')
__name__ = 'M'

if 'A' not in _M_M.__dict__:
    _M_M.A = Ice.createTempClass()
    class A(Ice.Value):
        def __init__(self, x=0):
            self.x = x

        def ice_id(self):
            return '::M::A'

        @staticmethod
        def ice_staticId():
            return '::M::A'

        def __str__(self):
            return IcePy.stringify(self, _M_M._t_A)

        __repr__ = __str__

    _M_M._t_A = IcePy.defineValue('::M::A', A, -1, (), False, False, None, (('x', (), IcePy._t_int, False, 0),))
    A._ice_type = _M_M._t_A

    _M_M.A = A
    del A

_M_M._t_Intf = IcePy.defineValue('::M::Intf', Ice.Value, -1, (), False, True, None, ())

if 'IntfPrx' not in _M_M.__dict__:
    _M_M.IntfPrx = Ice.createTempClass()
    class IntfPrx(Ice.ObjectPrx):

        def opIntf(self, context=None):
            return _M_M.Intf._op_opIntf.invoke(self, ((), context))

        def opIntfAsync(self, context=None):
            return _M_M.Intf._op_opIntf.invokeAsync(self, ((), context))

        def begin_opIntf(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_M.Intf._op_opIntf.begin(self, ((), _response, _ex, _sent, context))

        def end_opIntf(self, _r):
            return _M_M.Intf._op_opIntf.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_M.IntfPrx.ice_checkedCast(proxy, '::M::Intf', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_M.IntfPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::M::Intf'
    _M_M._t_IntfPrx = IcePy.defineProxy('::M::Intf', IntfPrx)

    _M_M.IntfPrx = IntfPrx
    del IntfPrx

    _M_M.Intf = Ice.createTempClass()
    class Intf(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::M::Intf')

        def ice_id(self, current=None):
            return '::M::Intf'

        @staticmethod
        def ice_staticId():
            return '::M::Intf'

        def opIntf(self, current=None):
            raise NotImplementedError("servant method 'opIntf' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_M._t_IntfDisp)

        __repr__ = __str__

    _M_M._t_IntfDisp = IcePy.defineClass('::M::Intf', Intf, (), None, ())
    Intf._ice_type = _M_M._t_IntfDisp

    Intf._op_opIntf = IcePy.Operation('opIntf', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_M.Intf = Intf
    del Intf

if 'B' not in _M_M.__dict__:
    _M_M.B = Ice.createTempClass()
    class B(_M_M.A):
        def __init__(self, x=0):
            _M_M.A.__init__(self, x)

        def ice_id(self):
            return '::M::B'

        @staticmethod
        def ice_staticId():
            return '::M::B'

        def __str__(self):
            return IcePy.stringify(self, _M_M._t_B)

        __repr__ = __str__

    _M_M._t_B = IcePy.defineValue('::M::B', B, -1, (), False, False, _M_M._t_A, ())
    B._ice_type = _M_M._t_B

    _M_M.B = B
    del B

if 'BPrx' not in _M_M.__dict__:
    _M_M.BPrx = Ice.createTempClass()
    class BPrx(_M_M.IntfPrx):

        def opB(self, context=None):
            return _M_M.BDisp._op_opB.invoke(self, ((), context))

        def opBAsync(self, context=None):
            return _M_M.BDisp._op_opB.invokeAsync(self, ((), context))

        def begin_opB(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_M.BDisp._op_opB.begin(self, ((), _response, _ex, _sent, context))

        def end_opB(self, _r):
            return _M_M.BDisp._op_opB.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_M.BPrx.ice_checkedCast(proxy, '::M::B', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_M.BPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::M::B'
    _M_M._t_BPrx = IcePy.defineProxy('::M::B', BPrx)

    _M_M.BPrx = BPrx
    del BPrx

    _M_M.BDisp = Ice.createTempClass()
    class BDisp(_M_M.Intf):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::M::A', '::M::B', '::M::Intf')

        def ice_id(self, current=None):
            return '::M::B'

        @staticmethod
        def ice_staticId():
            return '::M::B'

        def opB(self, current=None):
            raise NotImplementedError("servant method 'opB' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_M._t_BDisp)

        __repr__ = __str__

    _M_M._t_BDisp = IcePy.defineClass('::M::B', BDisp, (), None, (_M_M._t_IntfDisp,))
    BDisp._ice_type = _M_M._t_BDisp

    BDisp._op_opB = IcePy.Operation('opB', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_M.BDisp = BDisp
    del BDisp

# End of module M
