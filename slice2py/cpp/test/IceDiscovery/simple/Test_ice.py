# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

_M_Test._t_TestIntf = IcePy.defineValue('::Test::TestIntf', Ice.Value, -1, (), False, True, None, ())

if 'TestIntfPrx' not in _M_Test.__dict__:
    _M_Test.TestIntfPrx = Ice.createTempClass()
    class TestIntfPrx(Ice.ObjectPrx):

        def getAdapterId(self, context=None):
            return _M_Test.TestIntf._op_getAdapterId.invoke(self, ((), context))

        def getAdapterIdAsync(self, context=None):
            return _M_Test.TestIntf._op_getAdapterId.invokeAsync(self, ((), context))

        def begin_getAdapterId(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_getAdapterId.begin(self, ((), _response, _ex, _sent, context))

        def end_getAdapterId(self, _r):
            return _M_Test.TestIntf._op_getAdapterId.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.TestIntfPrx.ice_checkedCast(proxy, '::Test::TestIntf', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.TestIntfPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'
    _M_Test._t_TestIntfPrx = IcePy.defineProxy('::Test::TestIntf', TestIntfPrx)

    _M_Test.TestIntfPrx = TestIntfPrx
    del TestIntfPrx

    _M_Test.TestIntf = Ice.createTempClass()
    class TestIntf(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::TestIntf')

        def ice_id(self, current=None):
            return '::Test::TestIntf'

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'

        def getAdapterId(self, current=None):
            raise NotImplementedError("servant method 'getAdapterId' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_TestIntfDisp)

        __repr__ = __str__

    _M_Test._t_TestIntfDisp = IcePy.defineClass('::Test::TestIntf', TestIntf, (), None, ())
    TestIntf._ice_type = _M_Test._t_TestIntfDisp

    TestIntf._op_getAdapterId = IcePy.Operation('getAdapterId', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_Test.TestIntf = TestIntf
    del TestIntf

_M_Test._t_Controller = IcePy.defineValue('::Test::Controller', Ice.Value, -1, (), False, True, None, ())

if 'ControllerPrx' not in _M_Test.__dict__:
    _M_Test.ControllerPrx = Ice.createTempClass()
    class ControllerPrx(Ice.ObjectPrx):

        def activateObjectAdapter(self, name, adapterId, replicaGroupId, context=None):
            return _M_Test.Controller._op_activateObjectAdapter.invoke(self, ((name, adapterId, replicaGroupId), context))

        def activateObjectAdapterAsync(self, name, adapterId, replicaGroupId, context=None):
            return _M_Test.Controller._op_activateObjectAdapter.invokeAsync(self, ((name, adapterId, replicaGroupId), context))

        def begin_activateObjectAdapter(self, name, adapterId, replicaGroupId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Controller._op_activateObjectAdapter.begin(self, ((name, adapterId, replicaGroupId), _response, _ex, _sent, context))

        def end_activateObjectAdapter(self, _r):
            return _M_Test.Controller._op_activateObjectAdapter.end(self, _r)

        def deactivateObjectAdapter(self, name, context=None):
            return _M_Test.Controller._op_deactivateObjectAdapter.invoke(self, ((name, ), context))

        def deactivateObjectAdapterAsync(self, name, context=None):
            return _M_Test.Controller._op_deactivateObjectAdapter.invokeAsync(self, ((name, ), context))

        def begin_deactivateObjectAdapter(self, name, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Controller._op_deactivateObjectAdapter.begin(self, ((name, ), _response, _ex, _sent, context))

        def end_deactivateObjectAdapter(self, _r):
            return _M_Test.Controller._op_deactivateObjectAdapter.end(self, _r)

        def addObject(self, oaName, id, context=None):
            return _M_Test.Controller._op_addObject.invoke(self, ((oaName, id), context))

        def addObjectAsync(self, oaName, id, context=None):
            return _M_Test.Controller._op_addObject.invokeAsync(self, ((oaName, id), context))

        def begin_addObject(self, oaName, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Controller._op_addObject.begin(self, ((oaName, id), _response, _ex, _sent, context))

        def end_addObject(self, _r):
            return _M_Test.Controller._op_addObject.end(self, _r)

        def removeObject(self, oaName, id, context=None):
            return _M_Test.Controller._op_removeObject.invoke(self, ((oaName, id), context))

        def removeObjectAsync(self, oaName, id, context=None):
            return _M_Test.Controller._op_removeObject.invokeAsync(self, ((oaName, id), context))

        def begin_removeObject(self, oaName, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Controller._op_removeObject.begin(self, ((oaName, id), _response, _ex, _sent, context))

        def end_removeObject(self, _r):
            return _M_Test.Controller._op_removeObject.end(self, _r)

        def shutdown(self, context=None):
            return _M_Test.Controller._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.Controller._op_shutdown.invokeAsync(self, ((), context))

        def begin_shutdown(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Controller._op_shutdown.begin(self, ((), _response, _ex, _sent, context))

        def end_shutdown(self, _r):
            return _M_Test.Controller._op_shutdown.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.ControllerPrx.ice_checkedCast(proxy, '::Test::Controller', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.ControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Controller'
    _M_Test._t_ControllerPrx = IcePy.defineProxy('::Test::Controller', ControllerPrx)

    _M_Test.ControllerPrx = ControllerPrx
    del ControllerPrx

    _M_Test.Controller = Ice.createTempClass()
    class Controller(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Controller')

        def ice_id(self, current=None):
            return '::Test::Controller'

        @staticmethod
        def ice_staticId():
            return '::Test::Controller'

        def activateObjectAdapter(self, name, adapterId, replicaGroupId, current=None):
            raise NotImplementedError("servant method 'activateObjectAdapter' not implemented")

        def deactivateObjectAdapter(self, name, current=None):
            raise NotImplementedError("servant method 'deactivateObjectAdapter' not implemented")

        def addObject(self, oaName, id, current=None):
            raise NotImplementedError("servant method 'addObject' not implemented")

        def removeObject(self, oaName, id, current=None):
            raise NotImplementedError("servant method 'removeObject' not implemented")

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_ControllerDisp)

        __repr__ = __str__

    _M_Test._t_ControllerDisp = IcePy.defineClass('::Test::Controller', Controller, (), None, ())
    Controller._ice_type = _M_Test._t_ControllerDisp

    Controller._op_activateObjectAdapter = IcePy.Operation('activateObjectAdapter', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    Controller._op_deactivateObjectAdapter = IcePy.Operation('deactivateObjectAdapter', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Controller._op_addObject = IcePy.Operation('addObject', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    Controller._op_removeObject = IcePy.Operation('removeObject', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    Controller._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.Controller = Controller
    del Controller

# End of module Test
