# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `Backend.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

_M_Test._t_Backend = IcePy.defineValue('::Test::Backend', Ice.Value, -1, (), False, True, None, ())

if 'BackendPrx' not in _M_Test.__dict__:
    _M_Test.BackendPrx = Ice.createTempClass()
    class BackendPrx(Ice.ObjectPrx):

        def shutdown(self, context=None):
            return _M_Test.Backend._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.Backend._op_shutdown.invokeAsync(self, ((), context))

        def begin_shutdown(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Backend._op_shutdown.begin(self, ((), _response, _ex, _sent, context))

        def end_shutdown(self, _r):
            return _M_Test.Backend._op_shutdown.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.BackendPrx.ice_checkedCast(proxy, '::Test::Backend', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.BackendPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Backend'
    _M_Test._t_BackendPrx = IcePy.defineProxy('::Test::Backend', BackendPrx)

    _M_Test.BackendPrx = BackendPrx
    del BackendPrx

    _M_Test.Backend = Ice.createTempClass()
    class Backend(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Backend')

        def ice_id(self, current=None):
            return '::Test::Backend'

        @staticmethod
        def ice_staticId():
            return '::Test::Backend'

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_BackendDisp)

        __repr__ = __str__

    _M_Test._t_BackendDisp = IcePy.defineClass('::Test::Backend', Backend, (), None, ())
    Backend._ice_type = _M_Test._t_BackendDisp

    Backend._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.Backend = Backend
    del Backend

# End of module Test
