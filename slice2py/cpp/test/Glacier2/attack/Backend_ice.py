# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Backend.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice
import IcePy
import builtins as _builtins

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'Backend' not in _M_Test.__dict__:
    _M_Test._t_BackendPrx = IcePy.declareProxy('::Test::Backend')

if 'BackendPrx' not in _M_Test.__dict__:
    _M_Test.BackendPrx = None
    class BackendPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new BackendPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def shutdown(self, context=None):
            return _M_Test.Backend._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.Backend._op_shutdown.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.BackendPrx.ice_checkedCast(proxy, '::Test::Backend', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.BackendPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Backend'
    _M_Test._t_BackendPrx = IcePy.defineProxy('::Test::Backend', BackendPrx)

    _M_Test.BackendPrx = BackendPrx
    del BackendPrx

    _M_Test.Backend = None
    class Backend(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Backend')

        def ice_id(self, current=None):
            return '::Test::Backend'

        @staticmethod
        def ice_staticId():
            return '::Test::Backend'

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_BackendDisp)

        __repr__ = __str__

    Backend._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.Backend = Backend
    del Backend

# End of module Test
