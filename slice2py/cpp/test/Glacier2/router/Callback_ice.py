# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `Callback.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Ice.BuiltinSequences_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'CallbackException' not in _M_Test.__dict__:
    _M_Test.CallbackException = Ice.createTempClass()
    class CallbackException(Ice.UserException):
        def __init__(self, someValue=0.0, someString=''):
            self.someValue = someValue
            self.someString = someString

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::CallbackException'

    _M_Test._t_CallbackException = IcePy.defineException('::Test::CallbackException', CallbackException, (), False, None, (
        ('someValue', (), IcePy._t_double, False, 0),
        ('someString', (), IcePy._t_string, False, 0)
    ))
    CallbackException._ice_type = _M_Test._t_CallbackException

    _M_Test.CallbackException = CallbackException
    del CallbackException

_M_Test._t_CallbackReceiver = IcePy.defineValue('::Test::CallbackReceiver', Ice.Value, -1, (), False, True, None, ())

if 'CallbackReceiverPrx' not in _M_Test.__dict__:
    _M_Test.CallbackReceiverPrx = Ice.createTempClass()
    class CallbackReceiverPrx(Ice.ObjectPrx):

        def callback(self, context=None):
            return _M_Test.CallbackReceiver._op_callback.invoke(self, ((), context))

        def callbackAsync(self, context=None):
            return _M_Test.CallbackReceiver._op_callback.invokeAsync(self, ((), context))

        def begin_callback(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.CallbackReceiver._op_callback.begin(self, ((), _response, _ex, _sent, context))

        def end_callback(self, _r):
            return _M_Test.CallbackReceiver._op_callback.end(self, _r)

        def callbackEx(self, context=None):
            return _M_Test.CallbackReceiver._op_callbackEx.invoke(self, ((), context))

        def callbackExAsync(self, context=None):
            return _M_Test.CallbackReceiver._op_callbackEx.invokeAsync(self, ((), context))

        def begin_callbackEx(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.CallbackReceiver._op_callbackEx.begin(self, ((), _response, _ex, _sent, context))

        def end_callbackEx(self, _r):
            return _M_Test.CallbackReceiver._op_callbackEx.end(self, _r)

        def concurrentCallback(self, number, context=None):
            return _M_Test.CallbackReceiver._op_concurrentCallback.invoke(self, ((number, ), context))

        def concurrentCallbackAsync(self, number, context=None):
            return _M_Test.CallbackReceiver._op_concurrentCallback.invokeAsync(self, ((number, ), context))

        def begin_concurrentCallback(self, number, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.CallbackReceiver._op_concurrentCallback.begin(self, ((number, ), _response, _ex, _sent, context))

        def end_concurrentCallback(self, _r):
            return _M_Test.CallbackReceiver._op_concurrentCallback.end(self, _r)

        def waitCallback(self, context=None):
            return _M_Test.CallbackReceiver._op_waitCallback.invoke(self, ((), context))

        def waitCallbackAsync(self, context=None):
            return _M_Test.CallbackReceiver._op_waitCallback.invokeAsync(self, ((), context))

        def begin_waitCallback(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.CallbackReceiver._op_waitCallback.begin(self, ((), _response, _ex, _sent, context))

        def end_waitCallback(self, _r):
            return _M_Test.CallbackReceiver._op_waitCallback.end(self, _r)

        def callbackWithPayload(self, payload, context=None):
            return _M_Test.CallbackReceiver._op_callbackWithPayload.invoke(self, ((payload, ), context))

        def callbackWithPayloadAsync(self, payload, context=None):
            return _M_Test.CallbackReceiver._op_callbackWithPayload.invokeAsync(self, ((payload, ), context))

        def begin_callbackWithPayload(self, payload, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.CallbackReceiver._op_callbackWithPayload.begin(self, ((payload, ), _response, _ex, _sent, context))

        def end_callbackWithPayload(self, _r):
            return _M_Test.CallbackReceiver._op_callbackWithPayload.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.CallbackReceiverPrx.ice_checkedCast(proxy, '::Test::CallbackReceiver', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.CallbackReceiverPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::CallbackReceiver'
    _M_Test._t_CallbackReceiverPrx = IcePy.defineProxy('::Test::CallbackReceiver', CallbackReceiverPrx)

    _M_Test.CallbackReceiverPrx = CallbackReceiverPrx
    del CallbackReceiverPrx

    _M_Test.CallbackReceiver = Ice.createTempClass()
    class CallbackReceiver(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::CallbackReceiver')

        def ice_id(self, current=None):
            return '::Test::CallbackReceiver'

        @staticmethod
        def ice_staticId():
            return '::Test::CallbackReceiver'

        def callback(self, current=None):
            raise NotImplementedError("servant method 'callback' not implemented")

        def callbackEx(self, current=None):
            raise NotImplementedError("servant method 'callbackEx' not implemented")

        def concurrentCallback(self, number, current=None):
            raise NotImplementedError("servant method 'concurrentCallback' not implemented")

        def waitCallback(self, current=None):
            raise NotImplementedError("servant method 'waitCallback' not implemented")

        def callbackWithPayload(self, payload, current=None):
            raise NotImplementedError("servant method 'callbackWithPayload' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_CallbackReceiverDisp)

        __repr__ = __str__

    _M_Test._t_CallbackReceiverDisp = IcePy.defineClass('::Test::CallbackReceiver', CallbackReceiver, (), None, ())
    CallbackReceiver._ice_type = _M_Test._t_CallbackReceiverDisp

    CallbackReceiver._op_callback = IcePy.Operation('callback', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    CallbackReceiver._op_callbackEx = IcePy.Operation('callbackEx', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_Test._t_CallbackException,))
    CallbackReceiver._op_concurrentCallback = IcePy.Operation('concurrentCallback', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    CallbackReceiver._op_waitCallback = IcePy.Operation('waitCallback', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    CallbackReceiver._op_callbackWithPayload = IcePy.Operation('callbackWithPayload', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_ByteSeq, False, 0),), (), None, ())

    _M_Test.CallbackReceiver = CallbackReceiver
    del CallbackReceiver

_M_Test._t_Callback = IcePy.defineValue('::Test::Callback', Ice.Value, -1, (), False, True, None, ())

if 'CallbackPrx' not in _M_Test.__dict__:
    _M_Test.CallbackPrx = Ice.createTempClass()
    class CallbackPrx(Ice.ObjectPrx):

        def initiateCallback(self, proxy, context=None):
            return _M_Test.Callback._op_initiateCallback.invoke(self, ((proxy, ), context))

        def initiateCallbackAsync(self, proxy, context=None):
            return _M_Test.Callback._op_initiateCallback.invokeAsync(self, ((proxy, ), context))

        def begin_initiateCallback(self, proxy, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Callback._op_initiateCallback.begin(self, ((proxy, ), _response, _ex, _sent, context))

        def end_initiateCallback(self, _r):
            return _M_Test.Callback._op_initiateCallback.end(self, _r)

        def initiateCallbackEx(self, proxy, context=None):
            return _M_Test.Callback._op_initiateCallbackEx.invoke(self, ((proxy, ), context))

        def initiateCallbackExAsync(self, proxy, context=None):
            return _M_Test.Callback._op_initiateCallbackEx.invokeAsync(self, ((proxy, ), context))

        def begin_initiateCallbackEx(self, proxy, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Callback._op_initiateCallbackEx.begin(self, ((proxy, ), _response, _ex, _sent, context))

        def end_initiateCallbackEx(self, _r):
            return _M_Test.Callback._op_initiateCallbackEx.end(self, _r)

        def initiateConcurrentCallback(self, number, proxy, context=None):
            return _M_Test.Callback._op_initiateConcurrentCallback.invoke(self, ((number, proxy), context))

        def initiateConcurrentCallbackAsync(self, number, proxy, context=None):
            return _M_Test.Callback._op_initiateConcurrentCallback.invokeAsync(self, ((number, proxy), context))

        def begin_initiateConcurrentCallback(self, number, proxy, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Callback._op_initiateConcurrentCallback.begin(self, ((number, proxy), _response, _ex, _sent, context))

        def end_initiateConcurrentCallback(self, _r):
            return _M_Test.Callback._op_initiateConcurrentCallback.end(self, _r)

        def initiateWaitCallback(self, proxy, context=None):
            return _M_Test.Callback._op_initiateWaitCallback.invoke(self, ((proxy, ), context))

        def initiateWaitCallbackAsync(self, proxy, context=None):
            return _M_Test.Callback._op_initiateWaitCallback.invokeAsync(self, ((proxy, ), context))

        def begin_initiateWaitCallback(self, proxy, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Callback._op_initiateWaitCallback.begin(self, ((proxy, ), _response, _ex, _sent, context))

        def end_initiateWaitCallback(self, _r):
            return _M_Test.Callback._op_initiateWaitCallback.end(self, _r)

        def initiateCallbackWithPayload(self, proxy, context=None):
            return _M_Test.Callback._op_initiateCallbackWithPayload.invoke(self, ((proxy, ), context))

        def initiateCallbackWithPayloadAsync(self, proxy, context=None):
            return _M_Test.Callback._op_initiateCallbackWithPayload.invokeAsync(self, ((proxy, ), context))

        def begin_initiateCallbackWithPayload(self, proxy, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Callback._op_initiateCallbackWithPayload.begin(self, ((proxy, ), _response, _ex, _sent, context))

        def end_initiateCallbackWithPayload(self, _r):
            return _M_Test.Callback._op_initiateCallbackWithPayload.end(self, _r)

        def shutdown(self, context=None):
            return _M_Test.Callback._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.Callback._op_shutdown.invokeAsync(self, ((), context))

        def begin_shutdown(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Callback._op_shutdown.begin(self, ((), _response, _ex, _sent, context))

        def end_shutdown(self, _r):
            return _M_Test.Callback._op_shutdown.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.CallbackPrx.ice_checkedCast(proxy, '::Test::Callback', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.CallbackPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Callback'
    _M_Test._t_CallbackPrx = IcePy.defineProxy('::Test::Callback', CallbackPrx)

    _M_Test.CallbackPrx = CallbackPrx
    del CallbackPrx

    _M_Test.Callback = Ice.createTempClass()
    class Callback(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Callback')

        def ice_id(self, current=None):
            return '::Test::Callback'

        @staticmethod
        def ice_staticId():
            return '::Test::Callback'

        def initiateCallback(self, proxy, current=None):
            raise NotImplementedError("servant method 'initiateCallback' not implemented")

        def initiateCallbackEx(self, proxy, current=None):
            raise NotImplementedError("servant method 'initiateCallbackEx' not implemented")

        def initiateConcurrentCallback(self, number, proxy, current=None):
            raise NotImplementedError("servant method 'initiateConcurrentCallback' not implemented")

        def initiateWaitCallback(self, proxy, current=None):
            raise NotImplementedError("servant method 'initiateWaitCallback' not implemented")

        def initiateCallbackWithPayload(self, proxy, current=None):
            raise NotImplementedError("servant method 'initiateCallbackWithPayload' not implemented")

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_CallbackDisp)

        __repr__ = __str__

    _M_Test._t_CallbackDisp = IcePy.defineClass('::Test::Callback', Callback, (), None, ())
    Callback._ice_type = _M_Test._t_CallbackDisp

    Callback._op_initiateCallback = IcePy.Operation('initiateCallback', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), _M_Test._t_CallbackReceiverPrx, False, 0),), (), None, ())
    Callback._op_initiateCallbackEx = IcePy.Operation('initiateCallbackEx', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), _M_Test._t_CallbackReceiverPrx, False, 0),), (), None, (_M_Test._t_CallbackException,))
    Callback._op_initiateConcurrentCallback = IcePy.Operation('initiateConcurrentCallback', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), IcePy._t_int, False, 0), ((), _M_Test._t_CallbackReceiverPrx, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    Callback._op_initiateWaitCallback = IcePy.Operation('initiateWaitCallback', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), _M_Test._t_CallbackReceiverPrx, False, 0),), (), None, ())
    Callback._op_initiateCallbackWithPayload = IcePy.Operation('initiateCallbackWithPayload', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, None, (), (((), _M_Test._t_CallbackReceiverPrx, False, 0),), (), None, ())
    Callback._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.Callback = Callback
    del Callback

# End of module Test
