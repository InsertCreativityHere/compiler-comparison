# -*- coding: utf-8 -*-
# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice
import IcePy
import builtins as _builtins

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'MyObject' not in _M_Test.__dict__:
    _M_Test._t_MyObjectPrx = IcePy.declareProxy('::Test::MyObject')

if 'MyObjectPrx' not in _M_Test.__dict__:
    _M_Test.MyObjectPrx = None
    class MyObjectPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new MyObjectPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def getName(self, context=None):
            return _M_Test.MyObject._op_getName.invoke(self, ((), context))

        def getNameAsync(self, context=None):
            return _M_Test.MyObject._op_getName.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.MyObjectPrx.ice_checkedCast(proxy, '::Test::MyObject', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.MyObjectPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::MyObject'
    _M_Test._t_MyObjectPrx = IcePy.defineProxy('::Test::MyObject', MyObjectPrx)

    _M_Test.MyObjectPrx = MyObjectPrx
    del MyObjectPrx

    _M_Test.MyObject = None
    class MyObject(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::MyObject')

        def ice_id(self, current=None):
            return '::Test::MyObject'

        @staticmethod
        def ice_staticId():
            return '::Test::MyObject'

        def getName(self, current=None):
            raise NotImplementedError("servant method 'getName' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_MyObjectDisp)

        __repr__ = __str__

    MyObject._op_getName = IcePy.Operation('getName', Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_Test.MyObject = MyObject
    del MyObject

# End of module Test
