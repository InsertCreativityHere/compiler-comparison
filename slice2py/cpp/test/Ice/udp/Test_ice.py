# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins
import Ice.Identity_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'PingReplyPrx' not in _M_Test.__dict__:
    _M_Test.PingReplyPrx = None
    class PingReplyPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new PingReplyPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def reply(self, context=None):
            return _M_Test.PingReply._op_reply.invoke(self, ((), context))

        def replyAsync(self, context=None):
            return _M_Test.PingReply._op_reply.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.PingReplyPrx.ice_checkedCast(proxy, '::Test::PingReply', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.PingReplyPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::PingReply'
    _M_Test._t_PingReplyPrx = IcePy.defineProxy('::Test::PingReply', PingReplyPrx)

    _M_Test.PingReplyPrx = PingReplyPrx
    del PingReplyPrx

    _M_Test.PingReply = None
    class PingReply(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::PingReply')

        def ice_id(self, current=None):
            return '::Test::PingReply'

        @staticmethod
        def ice_staticId():
            return '::Test::PingReply'

        def reply(self, current=None):
            raise NotImplementedError("servant method 'reply' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_PingReplyDisp)

        __repr__ = __str__

    PingReply._op_reply = IcePy.Operation('reply', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.PingReply = PingReply
    del PingReply

if '_t_ByteSeq' not in _M_Test.__dict__:
    _M_Test._t_ByteSeq = IcePy.defineSequence('::Test::ByteSeq', (), IcePy._t_byte)

if 'TestIntfPrx' not in _M_Test.__dict__:
    _M_Test.TestIntfPrx = None
    class TestIntfPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new TestIntfPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def ping(self, reply, context=None):
            return _M_Test.TestIntf._op_ping.invoke(self, ((reply, ), context))

        def pingAsync(self, reply, context=None):
            return _M_Test.TestIntf._op_ping.invokeAsync(self, ((reply, ), context))

        def sendByteSeq(self, seq, reply, context=None):
            return _M_Test.TestIntf._op_sendByteSeq.invoke(self, ((seq, reply), context))

        def sendByteSeqAsync(self, seq, reply, context=None):
            return _M_Test.TestIntf._op_sendByteSeq.invokeAsync(self, ((seq, reply), context))

        def pingBiDir(self, reply, context=None):
            return _M_Test.TestIntf._op_pingBiDir.invoke(self, ((reply, ), context))

        def pingBiDirAsync(self, reply, context=None):
            return _M_Test.TestIntf._op_pingBiDir.invokeAsync(self, ((reply, ), context))

        def shutdown(self, context=None):
            return _M_Test.TestIntf._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.TestIntf._op_shutdown.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.TestIntfPrx.ice_checkedCast(proxy, '::Test::TestIntf', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.TestIntfPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'
    _M_Test._t_TestIntfPrx = IcePy.defineProxy('::Test::TestIntf', TestIntfPrx)

    _M_Test.TestIntfPrx = TestIntfPrx
    del TestIntfPrx

    _M_Test.TestIntf = None
    class TestIntf(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::TestIntf')

        def ice_id(self, current=None):
            return '::Test::TestIntf'

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'

        def ping(self, reply, current=None):
            raise NotImplementedError("servant method 'ping' not implemented")

        def sendByteSeq(self, seq, reply, current=None):
            raise NotImplementedError("servant method 'sendByteSeq' not implemented")

        def pingBiDir(self, reply, current=None):
            raise NotImplementedError("servant method 'pingBiDir' not implemented")

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_TestIntfDisp)

        __repr__ = __str__

    TestIntf._op_ping = IcePy.Operation('ping', Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_PingReplyPrx, False, 0),), (), None, ())
    TestIntf._op_sendByteSeq = IcePy.Operation('sendByteSeq', Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ByteSeq, False, 0), ((), _M_Test._t_PingReplyPrx, False, 0)), (), None, ())
    TestIntf._op_pingBiDir = IcePy.Operation('pingBiDir', Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), None, ())
    TestIntf._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.TestIntf = TestIntf
    del TestIntf

# End of module Test
