# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `ClientTypes.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

_M_Test.IntConst1 = 100

_M_Test.IntConst2 = 100

_M_Test.IntConst3 = 100

if 'Enum1' not in _M_Test.__dict__:
    _M_Test.Enum1 = Ice.createTempClass()
    class Enum1(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Enum1.Enum11 = Enum1("Enum11", 0)
    Enum1.Enum12 = Enum1("Enum12", 1)
    Enum1.Enum13 = Enum1("Enum13", 2)
    Enum1._enumerators = { 0:Enum1.Enum11, 1:Enum1.Enum12, 2:Enum1.Enum13 }

    _M_Test._t_Enum1 = IcePy.defineEnum('::Test::Enum1', Enum1, (), Enum1._enumerators)

    _M_Test.Enum1 = Enum1
    del Enum1

if 'Enum2' not in _M_Test.__dict__:
    _M_Test.Enum2 = Ice.createTempClass()
    class Enum2(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Enum2.Enum21 = Enum2("Enum21", 0)
    Enum2.Enum22 = Enum2("Enum22", 1)
    Enum2.Enum23 = Enum2("Enum23", 2)
    Enum2._enumerators = { 0:Enum2.Enum21, 1:Enum2.Enum22, 2:Enum2.Enum23 }

    _M_Test._t_Enum2 = IcePy.defineEnum('::Test::Enum2', Enum2, (), Enum2._enumerators)

    _M_Test.Enum2 = Enum2
    del Enum2

if 'Enum3' not in _M_Test.__dict__:
    _M_Test.Enum3 = Ice.createTempClass()
    class Enum3(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Enum3.Enum31 = Enum3("Enum31", 0)
    Enum3.Enum32 = Enum3("Enum32", 1)
    Enum3.Enum33 = Enum3("Enum33", 2)
    Enum3._enumerators = { 0:Enum3.Enum31, 1:Enum3.Enum32, 2:Enum3.Enum33 }

    _M_Test._t_Enum3 = IcePy.defineEnum('::Test::Enum3', Enum3, (), Enum3._enumerators)

    _M_Test.Enum3 = Enum3
    del Enum3

if 'Enum4' not in _M_Test.__dict__:
    _M_Test.Enum4 = Ice.createTempClass()
    class Enum4(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Enum4.Enum41 = Enum4("Enum41", 0)
    Enum4.Enum42 = Enum4("Enum42", 1)
    Enum4.Enum43 = Enum4("Enum43", 2)
    Enum4._enumerators = { 0:Enum4.Enum41, 1:Enum4.Enum42, 2:Enum4.Enum43 }

    _M_Test._t_Enum4 = IcePy.defineEnum('::Test::Enum4', Enum4, (), Enum4._enumerators)

    _M_Test.Enum4 = Enum4
    del Enum4

if 'EnumExplicit0' not in _M_Test.__dict__:
    _M_Test.EnumExplicit0 = Ice.createTempClass()
    class EnumExplicit0(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    EnumExplicit0.EnumExplicit01 = EnumExplicit0("EnumExplicit01", 1)
    EnumExplicit0.EnumExplicit02 = EnumExplicit0("EnumExplicit02", 2)
    EnumExplicit0.EnumExplicit03 = EnumExplicit0("EnumExplicit03", 3)
    EnumExplicit0._enumerators = { 1:EnumExplicit0.EnumExplicit01, 2:EnumExplicit0.EnumExplicit02, 3:EnumExplicit0.EnumExplicit03 }

    _M_Test._t_EnumExplicit0 = IcePy.defineEnum('::Test::EnumExplicit0', EnumExplicit0, (), EnumExplicit0._enumerators)

    _M_Test.EnumExplicit0 = EnumExplicit0
    del EnumExplicit0

if 'EnumExplicit1' not in _M_Test.__dict__:
    _M_Test.EnumExplicit1 = Ice.createTempClass()
    class EnumExplicit1(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    EnumExplicit1.EnumExplicit11 = EnumExplicit1("EnumExplicit11", 1)
    EnumExplicit1.EnumExplicit12 = EnumExplicit1("EnumExplicit12", 2)
    EnumExplicit1.EnumExplicit13 = EnumExplicit1("EnumExplicit13", 3)
    EnumExplicit1._enumerators = { 1:EnumExplicit1.EnumExplicit11, 2:EnumExplicit1.EnumExplicit12, 3:EnumExplicit1.EnumExplicit13 }

    _M_Test._t_EnumExplicit1 = IcePy.defineEnum('::Test::EnumExplicit1', EnumExplicit1, (), EnumExplicit1._enumerators)

    _M_Test.EnumExplicit1 = EnumExplicit1
    del EnumExplicit1

if 'EnumExplicit2' not in _M_Test.__dict__:
    _M_Test.EnumExplicit2 = Ice.createTempClass()
    class EnumExplicit2(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    EnumExplicit2.EnumExplicit21 = EnumExplicit2("EnumExplicit21", 1)
    EnumExplicit2.EnumExplicit22 = EnumExplicit2("EnumExplicit22", 2)
    EnumExplicit2.EnumExplicit23 = EnumExplicit2("EnumExplicit23", 3)
    EnumExplicit2._enumerators = { 1:EnumExplicit2.EnumExplicit21, 2:EnumExplicit2.EnumExplicit22, 3:EnumExplicit2.EnumExplicit23 }

    _M_Test._t_EnumExplicit2 = IcePy.defineEnum('::Test::EnumExplicit2', EnumExplicit2, (), EnumExplicit2._enumerators)

    _M_Test.EnumExplicit2 = EnumExplicit2
    del EnumExplicit2

if 'EnumExplicit3' not in _M_Test.__dict__:
    _M_Test.EnumExplicit3 = Ice.createTempClass()
    class EnumExplicit3(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    EnumExplicit3.EnumExplicit31 = EnumExplicit3("EnumExplicit31", 1)
    EnumExplicit3.EnumExplicit32 = EnumExplicit3("EnumExplicit32", 2)
    EnumExplicit3.EnumExplicit33 = EnumExplicit3("EnumExplicit33", 3)
    EnumExplicit3._enumerators = { 1:EnumExplicit3.EnumExplicit31, 2:EnumExplicit3.EnumExplicit32, 3:EnumExplicit3.EnumExplicit33 }

    _M_Test._t_EnumExplicit3 = IcePy.defineEnum('::Test::EnumExplicit3', EnumExplicit3, (), EnumExplicit3._enumerators)

    _M_Test.EnumExplicit3 = EnumExplicit3
    del EnumExplicit3

if '_t_Sequence1' not in _M_Test.__dict__:
    _M_Test._t_Sequence1 = IcePy.defineSequence('::Test::Sequence1', (), IcePy._t_int)

if '_t_Sequence2' not in _M_Test.__dict__:
    _M_Test._t_Sequence2 = IcePy.defineSequence('::Test::Sequence2', (), IcePy._t_int)

if '_t_Sequence3' not in _M_Test.__dict__:
    _M_Test._t_Sequence3 = IcePy.defineSequence('::Test::Sequence3', (), IcePy._t_int)

if '_t_Dictionary1' not in _M_Test.__dict__:
    _M_Test._t_Dictionary1 = IcePy.defineDictionary('::Test::Dictionary1', (), IcePy._t_string, IcePy._t_int)

if '_t_Dictionary2' not in _M_Test.__dict__:
    _M_Test._t_Dictionary2 = IcePy.defineDictionary('::Test::Dictionary2', (), IcePy._t_string, IcePy._t_int)

if '_t_Dictionary3' not in _M_Test.__dict__:
    _M_Test._t_Dictionary3 = IcePy.defineDictionary('::Test::Dictionary3', (), IcePy._t_string, IcePy._t_int)

if '_t_Dictionary4' not in _M_Test.__dict__:
    _M_Test._t_Dictionary4 = IcePy.defineDictionary('::Test::Dictionary4', (), IcePy._t_string, IcePy._t_int)

if 'Struct1' not in _M_Test.__dict__:
    _M_Test.Struct1 = Ice.createTempClass()
    class Struct1(object):
        def __init__(self, str='', b=False):
            self.str = str
            self.b = b

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.str)
            _h = 5 * _h + Ice.getHash(self.b)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Test.Struct1):
                return NotImplemented
            else:
                if self.str is None or other.str is None:
                    if self.str != other.str:
                        return (-1 if self.str is None else 1)
                else:
                    if self.str < other.str:
                        return -1
                    elif self.str > other.str:
                        return 1
                if self.b is None or other.b is None:
                    if self.b != other.b:
                        return (-1 if self.b is None else 1)
                else:
                    if self.b < other.b:
                        return -1
                    elif self.b > other.b:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Struct1)

        __repr__ = __str__

    _M_Test._t_Struct1 = IcePy.defineStruct('::Test::Struct1', Struct1, (), (
        ('str', (), IcePy._t_string),
        ('b', (), IcePy._t_bool)
    ))

    _M_Test.Struct1 = Struct1
    del Struct1

if 'Struct2' not in _M_Test.__dict__:
    _M_Test.Struct2 = Ice.createTempClass()
    class Struct2(object):
        def __init__(self, str='', b=False):
            self.str = str
            self.b = b

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.str)
            _h = 5 * _h + Ice.getHash(self.b)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Test.Struct2):
                return NotImplemented
            else:
                if self.str is None or other.str is None:
                    if self.str != other.str:
                        return (-1 if self.str is None else 1)
                else:
                    if self.str < other.str:
                        return -1
                    elif self.str > other.str:
                        return 1
                if self.b is None or other.b is None:
                    if self.b != other.b:
                        return (-1 if self.b is None else 1)
                else:
                    if self.b < other.b:
                        return -1
                    elif self.b > other.b:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Struct2)

        __repr__ = __str__

    _M_Test._t_Struct2 = IcePy.defineStruct('::Test::Struct2', Struct2, (), (
        ('str', (), IcePy._t_string),
        ('b', (), IcePy._t_bool)
    ))

    _M_Test.Struct2 = Struct2
    del Struct2

if 'Struct3' not in _M_Test.__dict__:
    _M_Test.Struct3 = Ice.createTempClass()
    class Struct3(object):
        def __init__(self, str='', b=False):
            self.str = str
            self.b = b

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.str)
            _h = 5 * _h + Ice.getHash(self.b)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Test.Struct3):
                return NotImplemented
            else:
                if self.str is None or other.str is None:
                    if self.str != other.str:
                        return (-1 if self.str is None else 1)
                else:
                    if self.str < other.str:
                        return -1
                    elif self.str > other.str:
                        return 1
                if self.b is None or other.b is None:
                    if self.b != other.b:
                        return (-1 if self.b is None else 1)
                else:
                    if self.b < other.b:
                        return -1
                    elif self.b > other.b:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Struct3)

        __repr__ = __str__

    _M_Test._t_Struct3 = IcePy.defineStruct('::Test::Struct3', Struct3, (), (
        ('str', (), IcePy._t_string),
        ('b', (), IcePy._t_bool)
    ))

    _M_Test.Struct3 = Struct3
    del Struct3

if 'Struct4' not in _M_Test.__dict__:
    _M_Test.Struct4 = Ice.createTempClass()
    class Struct4(object):
        def __init__(self, str='', b=False):
            self.str = str
            self.b = b

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.str)
            _h = 5 * _h + Ice.getHash(self.b)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Test.Struct4):
                return NotImplemented
            else:
                if self.str is None or other.str is None:
                    if self.str != other.str:
                        return (-1 if self.str is None else 1)
                else:
                    if self.str < other.str:
                        return -1
                    elif self.str > other.str:
                        return 1
                if self.b is None or other.b is None:
                    if self.b != other.b:
                        return (-1 if self.b is None else 1)
                else:
                    if self.b < other.b:
                        return -1
                    elif self.b > other.b:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Struct4)

        __repr__ = __str__

    _M_Test._t_Struct4 = IcePy.defineStruct('::Test::Struct4', Struct4, (), (
        ('str', (), IcePy._t_string),
        ('b', (), IcePy._t_bool)
    ))

    _M_Test.Struct4 = Struct4
    del Struct4

if 'Struct5' not in _M_Test.__dict__:
    _M_Test.Struct5 = Ice.createTempClass()
    class Struct5(object):
        def __init__(self, str='', b=False):
            self.str = str
            self.b = b

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.str)
            _h = 5 * _h + Ice.getHash(self.b)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Test.Struct5):
                return NotImplemented
            else:
                if self.str is None or other.str is None:
                    if self.str != other.str:
                        return (-1 if self.str is None else 1)
                else:
                    if self.str < other.str:
                        return -1
                    elif self.str > other.str:
                        return 1
                if self.b is None or other.b is None:
                    if self.b != other.b:
                        return (-1 if self.b is None else 1)
                else:
                    if self.b < other.b:
                        return -1
                    elif self.b > other.b:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Struct5)

        __repr__ = __str__

    _M_Test._t_Struct5 = IcePy.defineStruct('::Test::Struct5', Struct5, (), (
        ('str', (), IcePy._t_string),
        ('b', (), IcePy._t_bool)
    ))

    _M_Test.Struct5 = Struct5
    del Struct5

_M_Test._t_Interface1 = IcePy.defineValue('::Test::Interface1', Ice.Value, -1, (), False, True, None, ())

if 'Interface1Prx' not in _M_Test.__dict__:
    _M_Test.Interface1Prx = Ice.createTempClass()
    class Interface1Prx(Ice.ObjectPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.Interface1Prx.ice_checkedCast(proxy, '::Test::Interface1', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.Interface1Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Interface1'
    _M_Test._t_Interface1Prx = IcePy.defineProxy('::Test::Interface1', Interface1Prx)

    _M_Test.Interface1Prx = Interface1Prx
    del Interface1Prx

    _M_Test.Interface1 = Ice.createTempClass()
    class Interface1(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Interface1')

        def ice_id(self, current=None):
            return '::Test::Interface1'

        @staticmethod
        def ice_staticId():
            return '::Test::Interface1'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Interface1Disp)

        __repr__ = __str__

    _M_Test._t_Interface1Disp = IcePy.defineClass('::Test::Interface1', Interface1, (), None, ())
    Interface1._ice_type = _M_Test._t_Interface1Disp

    _M_Test.Interface1 = Interface1
    del Interface1

_M_Test._t_Interface2 = IcePy.defineValue('::Test::Interface2', Ice.Value, -1, (), False, True, None, ())

if 'Interface2Prx' not in _M_Test.__dict__:
    _M_Test.Interface2Prx = Ice.createTempClass()
    class Interface2Prx(Ice.ObjectPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.Interface2Prx.ice_checkedCast(proxy, '::Test::Interface2', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.Interface2Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Interface2'
    _M_Test._t_Interface2Prx = IcePy.defineProxy('::Test::Interface2', Interface2Prx)

    _M_Test.Interface2Prx = Interface2Prx
    del Interface2Prx

    _M_Test.Interface2 = Ice.createTempClass()
    class Interface2(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Interface2')

        def ice_id(self, current=None):
            return '::Test::Interface2'

        @staticmethod
        def ice_staticId():
            return '::Test::Interface2'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Interface2Disp)

        __repr__ = __str__

    _M_Test._t_Interface2Disp = IcePy.defineClass('::Test::Interface2', Interface2, (), None, ())
    Interface2._ice_type = _M_Test._t_Interface2Disp

    _M_Test.Interface2 = Interface2
    del Interface2

_M_Test._t_Interface3 = IcePy.defineValue('::Test::Interface3', Ice.Value, -1, (), False, True, None, ())

if 'Interface3Prx' not in _M_Test.__dict__:
    _M_Test.Interface3Prx = Ice.createTempClass()
    class Interface3Prx(Ice.ObjectPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.Interface3Prx.ice_checkedCast(proxy, '::Test::Interface3', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.Interface3Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Interface3'
    _M_Test._t_Interface3Prx = IcePy.defineProxy('::Test::Interface3', Interface3Prx)

    _M_Test.Interface3Prx = Interface3Prx
    del Interface3Prx

    _M_Test.Interface3 = Ice.createTempClass()
    class Interface3(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Interface3')

        def ice_id(self, current=None):
            return '::Test::Interface3'

        @staticmethod
        def ice_staticId():
            return '::Test::Interface3'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Interface3Disp)

        __repr__ = __str__

    _M_Test._t_Interface3Disp = IcePy.defineClass('::Test::Interface3', Interface3, (), None, ())
    Interface3._ice_type = _M_Test._t_Interface3Disp

    _M_Test.Interface3 = Interface3
    del Interface3

_M_Test._t_Interface4 = IcePy.defineValue('::Test::Interface4', Ice.Value, -1, (), False, True, None, ())

if 'Interface4Prx' not in _M_Test.__dict__:
    _M_Test.Interface4Prx = Ice.createTempClass()
    class Interface4Prx(Ice.ObjectPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.Interface4Prx.ice_checkedCast(proxy, '::Test::Interface4', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.Interface4Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Interface4'
    _M_Test._t_Interface4Prx = IcePy.defineProxy('::Test::Interface4', Interface4Prx)

    _M_Test.Interface4Prx = Interface4Prx
    del Interface4Prx

    _M_Test.Interface4 = Ice.createTempClass()
    class Interface4(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Interface4')

        def ice_id(self, current=None):
            return '::Test::Interface4'

        @staticmethod
        def ice_staticId():
            return '::Test::Interface4'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Interface4Disp)

        __repr__ = __str__

    _M_Test._t_Interface4Disp = IcePy.defineClass('::Test::Interface4', Interface4, (), None, ())
    Interface4._ice_type = _M_Test._t_Interface4Disp

    _M_Test.Interface4 = Interface4
    del Interface4

if 'EmptyClass1' not in _M_Test.__dict__:
    _M_Test.EmptyClass1 = Ice.createTempClass()
    class EmptyClass1(Ice.Value):
        def __init__(self):
            pass

        def ice_id(self):
            return '::Test::EmptyClass1'

        @staticmethod
        def ice_staticId():
            return '::Test::EmptyClass1'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_EmptyClass1)

        __repr__ = __str__

    _M_Test._t_EmptyClass1 = IcePy.defineValue('::Test::EmptyClass1', EmptyClass1, -1, (), False, False, None, ())
    EmptyClass1._ice_type = _M_Test._t_EmptyClass1

    _M_Test.EmptyClass1 = EmptyClass1
    del EmptyClass1

if 'EmptyClass2' not in _M_Test.__dict__:
    _M_Test.EmptyClass2 = Ice.createTempClass()
    class EmptyClass2(Ice.Value):
        def __init__(self):
            pass

        def ice_id(self):
            return '::Test::EmptyClass2'

        @staticmethod
        def ice_staticId():
            return '::Test::EmptyClass2'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_EmptyClass2)

        __repr__ = __str__

    _M_Test._t_EmptyClass2 = IcePy.defineValue('::Test::EmptyClass2', EmptyClass2, -1, (), False, False, None, ())
    EmptyClass2._ice_type = _M_Test._t_EmptyClass2

    _M_Test.EmptyClass2 = EmptyClass2
    del EmptyClass2

if 'EmptyClass3' not in _M_Test.__dict__:
    _M_Test.EmptyClass3 = Ice.createTempClass()
    class EmptyClass3(Ice.Value):
        def __init__(self):
            pass

        def ice_id(self):
            return '::Test::EmptyClass3'

        @staticmethod
        def ice_staticId():
            return '::Test::EmptyClass3'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_EmptyClass3)

        __repr__ = __str__

    _M_Test._t_EmptyClass3 = IcePy.defineValue('::Test::EmptyClass3', EmptyClass3, -1, (), False, False, None, ())
    EmptyClass3._ice_type = _M_Test._t_EmptyClass3

    _M_Test.EmptyClass3 = EmptyClass3
    del EmptyClass3

if 'EmptyClass4' not in _M_Test.__dict__:
    _M_Test.EmptyClass4 = Ice.createTempClass()
    class EmptyClass4(Ice.Value):
        def __init__(self):
            pass

        def ice_id(self):
            return '::Test::EmptyClass4'

        @staticmethod
        def ice_staticId():
            return '::Test::EmptyClass4'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_EmptyClass4)

        __repr__ = __str__

    _M_Test._t_EmptyClass4 = IcePy.defineValue('::Test::EmptyClass4', EmptyClass4, -1, (), False, False, None, ())
    EmptyClass4._ice_type = _M_Test._t_EmptyClass4

    _M_Test.EmptyClass4 = EmptyClass4
    del EmptyClass4

if 'EmptyClass5' not in _M_Test.__dict__:
    _M_Test.EmptyClass5 = Ice.createTempClass()
    class EmptyClass5(Ice.Value):
        def __init__(self):
            pass

        def ice_id(self):
            return '::Test::EmptyClass5'

        @staticmethod
        def ice_staticId():
            return '::Test::EmptyClass5'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_EmptyClass5)

        __repr__ = __str__

    _M_Test._t_EmptyClass5 = IcePy.defineValue('::Test::EmptyClass5', EmptyClass5, -1, (), False, False, None, ())
    EmptyClass5._ice_type = _M_Test._t_EmptyClass5

    _M_Test.EmptyClass5 = EmptyClass5
    del EmptyClass5

if 'SimpleClass1' not in _M_Test.__dict__:
    _M_Test.SimpleClass1 = Ice.createTempClass()
    class SimpleClass1(Ice.Value):
        def __init__(self, str='', f=0.0):
            self.str = str
            self.f = f

        def ice_id(self):
            return '::Test::SimpleClass1'

        @staticmethod
        def ice_staticId():
            return '::Test::SimpleClass1'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_SimpleClass1)

        __repr__ = __str__

    _M_Test._t_SimpleClass1 = IcePy.defineValue('::Test::SimpleClass1', SimpleClass1, -1, (), False, False, None, (
        ('str', (), IcePy._t_string, False, 0),
        ('f', (), IcePy._t_float, False, 0)
    ))
    SimpleClass1._ice_type = _M_Test._t_SimpleClass1

    _M_Test.SimpleClass1 = SimpleClass1
    del SimpleClass1

if 'SimpleClass2' not in _M_Test.__dict__:
    _M_Test.SimpleClass2 = Ice.createTempClass()
    class SimpleClass2(Ice.Value):
        def __init__(self, str='', f=0.0):
            self.str = str
            self.f = f

        def ice_id(self):
            return '::Test::SimpleClass2'

        @staticmethod
        def ice_staticId():
            return '::Test::SimpleClass2'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_SimpleClass2)

        __repr__ = __str__

    _M_Test._t_SimpleClass2 = IcePy.defineValue('::Test::SimpleClass2', SimpleClass2, -1, (), False, False, None, (
        ('str', (), IcePy._t_string, False, 0),
        ('f', (), IcePy._t_float, False, 0)
    ))
    SimpleClass2._ice_type = _M_Test._t_SimpleClass2

    _M_Test.SimpleClass2 = SimpleClass2
    del SimpleClass2

if 'SimpleClass3' not in _M_Test.__dict__:
    _M_Test.SimpleClass3 = Ice.createTempClass()
    class SimpleClass3(Ice.Value):
        def __init__(self, str='', f=0.0):
            self.str = str
            self.f = f

        def ice_id(self):
            return '::Test::SimpleClass3'

        @staticmethod
        def ice_staticId():
            return '::Test::SimpleClass3'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_SimpleClass3)

        __repr__ = __str__

    _M_Test._t_SimpleClass3 = IcePy.defineValue('::Test::SimpleClass3', SimpleClass3, -1, (), False, False, None, (
        ('str', (), IcePy._t_string, False, 0),
        ('f', (), IcePy._t_float, False, 0)
    ))
    SimpleClass3._ice_type = _M_Test._t_SimpleClass3

    _M_Test.SimpleClass3 = SimpleClass3
    del SimpleClass3

if 'SimpleClass4' not in _M_Test.__dict__:
    _M_Test.SimpleClass4 = Ice.createTempClass()
    class SimpleClass4(Ice.Value):
        def __init__(self, str='', f=0.0):
            self.str = str
            self.f = f

        def ice_id(self):
            return '::Test::SimpleClass4'

        @staticmethod
        def ice_staticId():
            return '::Test::SimpleClass4'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_SimpleClass4)

        __repr__ = __str__

    _M_Test._t_SimpleClass4 = IcePy.defineValue('::Test::SimpleClass4', SimpleClass4, -1, (), False, False, None, (
        ('str', (), IcePy._t_string, False, 0),
        ('f', (), IcePy._t_float, False, 0)
    ))
    SimpleClass4._ice_type = _M_Test._t_SimpleClass4

    _M_Test.SimpleClass4 = SimpleClass4
    del SimpleClass4

if 'SimpleClass5' not in _M_Test.__dict__:
    _M_Test.SimpleClass5 = Ice.createTempClass()
    class SimpleClass5(Ice.Value):
        def __init__(self, str='', f=0.0):
            self.str = str
            self.f = f

        def ice_id(self):
            return '::Test::SimpleClass5'

        @staticmethod
        def ice_staticId():
            return '::Test::SimpleClass5'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_SimpleClass5)

        __repr__ = __str__

    _M_Test._t_SimpleClass5 = IcePy.defineValue('::Test::SimpleClass5', SimpleClass5, -1, (), False, False, None, (
        ('str', (), IcePy._t_string, False, 0),
        ('f', (), IcePy._t_float, False, 0)
    ))
    SimpleClass5._ice_type = _M_Test._t_SimpleClass5

    _M_Test.SimpleClass5 = SimpleClass5
    del SimpleClass5

if 'SimpleClass6' not in _M_Test.__dict__:
    _M_Test.SimpleClass6 = Ice.createTempClass()
    class SimpleClass6(Ice.Value):
        def __init__(self, str='', f=0.0):
            self.str = str
            self.f = f

        def ice_id(self):
            return '::Test::SimpleClass6'

        @staticmethod
        def ice_staticId():
            return '::Test::SimpleClass6'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_SimpleClass6)

        __repr__ = __str__

    _M_Test._t_SimpleClass6 = IcePy.defineValue('::Test::SimpleClass6', SimpleClass6, -1, (), False, False, None, (
        ('str', (), IcePy._t_string, False, 0),
        ('f', (), IcePy._t_float, False, 0)
    ))
    SimpleClass6._ice_type = _M_Test._t_SimpleClass6

    _M_Test.SimpleClass6 = SimpleClass6
    del SimpleClass6

if 'SimpleClass7' not in _M_Test.__dict__:
    _M_Test.SimpleClass7 = Ice.createTempClass()
    class SimpleClass7(Ice.Value):
        def __init__(self, str='', f=0.0):
            self.str = str
            self.f = f

        def ice_id(self):
            return '::Test::SimpleClass7'

        @staticmethod
        def ice_staticId():
            return '::Test::SimpleClass7'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_SimpleClass7)

        __repr__ = __str__

    _M_Test._t_SimpleClass7 = IcePy.defineValue('::Test::SimpleClass7', SimpleClass7, -1, (), False, False, None, (
        ('str', (), IcePy._t_string, False, 0),
        ('f', (), IcePy._t_float, False, 0)
    ))
    SimpleClass7._ice_type = _M_Test._t_SimpleClass7

    _M_Test.SimpleClass7 = SimpleClass7
    del SimpleClass7

if 'Exception1' not in _M_Test.__dict__:
    _M_Test.Exception1 = Ice.createTempClass()
    class Exception1(Ice.UserException):
        def __init__(self, str='', b=False):
            self.str = str
            self.b = b

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::Exception1'

    _M_Test._t_Exception1 = IcePy.defineException('::Test::Exception1', Exception1, (), False, None, (
        ('str', (), IcePy._t_string, False, 0),
        ('b', (), IcePy._t_bool, False, 0)
    ))
    Exception1._ice_type = _M_Test._t_Exception1

    _M_Test.Exception1 = Exception1
    del Exception1

if 'Exception2' not in _M_Test.__dict__:
    _M_Test.Exception2 = Ice.createTempClass()
    class Exception2(Ice.UserException):
        def __init__(self, str='', b=False):
            self.str = str
            self.b = b

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::Exception2'

    _M_Test._t_Exception2 = IcePy.defineException('::Test::Exception2', Exception2, (), False, None, (
        ('str', (), IcePy._t_string, False, 0),
        ('b', (), IcePy._t_bool, False, 0)
    ))
    Exception2._ice_type = _M_Test._t_Exception2

    _M_Test.Exception2 = Exception2
    del Exception2

if 'Exception3' not in _M_Test.__dict__:
    _M_Test.Exception3 = Ice.createTempClass()
    class Exception3(Ice.UserException):
        def __init__(self, str='', b=False):
            self.str = str
            self.b = b

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::Exception3'

    _M_Test._t_Exception3 = IcePy.defineException('::Test::Exception3', Exception3, (), False, None, (
        ('str', (), IcePy._t_string, False, 0),
        ('b', (), IcePy._t_bool, False, 0)
    ))
    Exception3._ice_type = _M_Test._t_Exception3

    _M_Test.Exception3 = Exception3
    del Exception3

if 'Exception4' not in _M_Test.__dict__:
    _M_Test.Exception4 = Ice.createTempClass()
    class Exception4(Ice.UserException):
        def __init__(self, str='', b=False):
            self.str = str
            self.b = b

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::Exception4'

    _M_Test._t_Exception4 = IcePy.defineException('::Test::Exception4', Exception4, (), False, None, (
        ('str', (), IcePy._t_string, False, 0),
        ('b', (), IcePy._t_bool, False, 0)
    ))
    Exception4._ice_type = _M_Test._t_Exception4

    _M_Test.Exception4 = Exception4
    del Exception4

if 'Exception5' not in _M_Test.__dict__:
    _M_Test.Exception5 = Ice.createTempClass()
    class Exception5(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::Exception5'

    _M_Test._t_Exception5 = IcePy.defineException('::Test::Exception5', Exception5, (), False, None, ())
    Exception5._ice_type = _M_Test._t_Exception5

    _M_Test.Exception5 = Exception5
    del Exception5

if 'Exception6' not in _M_Test.__dict__:
    _M_Test.Exception6 = Ice.createTempClass()
    class Exception6(Ice.UserException):
        def __init__(self, str='', b=False):
            self.str = str
            self.b = b

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::Exception6'

    _M_Test._t_Exception6 = IcePy.defineException('::Test::Exception6', Exception6, (), False, None, (
        ('str', (), IcePy._t_string, False, 0),
        ('b', (), IcePy._t_bool, False, 0)
    ))
    Exception6._ice_type = _M_Test._t_Exception6

    _M_Test.Exception6 = Exception6
    del Exception6

if 'OptionalEx0' not in _M_Test.__dict__:
    _M_Test.OptionalEx0 = Ice.createTempClass()
    class OptionalEx0(Ice.UserException):
        def __init__(self, firstName='', secondName=Ice.Unset, emailAddress=Ice.Unset):
            self.firstName = firstName
            self.secondName = secondName
            self.emailAddress = emailAddress

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::OptionalEx0'

    _M_Test._t_OptionalEx0 = IcePy.defineException('::Test::OptionalEx0', OptionalEx0, (), False, None, (
        ('firstName', (), IcePy._t_string, False, 0),
        ('secondName', (), IcePy._t_string, True, 1),
        ('emailAddress', (), IcePy._t_string, True, 2)
    ))
    OptionalEx0._ice_type = _M_Test._t_OptionalEx0

    _M_Test.OptionalEx0 = OptionalEx0
    del OptionalEx0

if 'OptionalEx1' not in _M_Test.__dict__:
    _M_Test.OptionalEx1 = Ice.createTempClass()
    class OptionalEx1(Ice.UserException):
        def __init__(self, firstName='', secondName=Ice.Unset, emailAddress=Ice.Unset):
            self.firstName = firstName
            self.secondName = secondName
            self.emailAddress = emailAddress

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::OptionalEx1'

    _M_Test._t_OptionalEx1 = IcePy.defineException('::Test::OptionalEx1', OptionalEx1, (), False, None, (
        ('firstName', (), IcePy._t_string, False, 0),
        ('secondName', (), IcePy._t_string, True, 1),
        ('emailAddress', (), IcePy._t_string, True, 2)
    ))
    OptionalEx1._ice_type = _M_Test._t_OptionalEx1

    _M_Test.OptionalEx1 = OptionalEx1
    del OptionalEx1

if 'OptionalEx2' not in _M_Test.__dict__:
    _M_Test.OptionalEx2 = Ice.createTempClass()
    class OptionalEx2(Ice.UserException):
        def __init__(self, firstName='', secondName='', emailAddress=Ice.Unset):
            self.firstName = firstName
            self.secondName = secondName
            self.emailAddress = emailAddress

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::OptionalEx2'

    _M_Test._t_OptionalEx2 = IcePy.defineException('::Test::OptionalEx2', OptionalEx2, (), False, None, (
        ('firstName', (), IcePy._t_string, False, 0),
        ('secondName', (), IcePy._t_string, False, 0),
        ('emailAddress', (), IcePy._t_string, True, 1)
    ))
    OptionalEx2._ice_type = _M_Test._t_OptionalEx2

    _M_Test.OptionalEx2 = OptionalEx2
    del OptionalEx2

if 'OptionalEx3' not in _M_Test.__dict__:
    _M_Test.OptionalEx3 = Ice.createTempClass()
    class OptionalEx3(Ice.UserException):
        def __init__(self, firstName='', secondName=Ice.Unset, emailAddress=Ice.Unset):
            self.firstName = firstName
            self.secondName = secondName
            self.emailAddress = emailAddress

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::OptionalEx3'

    _M_Test._t_OptionalEx3 = IcePy.defineException('::Test::OptionalEx3', OptionalEx3, (), False, None, (
        ('firstName', (), IcePy._t_string, False, 0),
        ('secondName', (), IcePy._t_string, True, 1),
        ('emailAddress', (), IcePy._t_string, True, 2)
    ))
    OptionalEx3._ice_type = _M_Test._t_OptionalEx3

    _M_Test.OptionalEx3 = OptionalEx3
    del OptionalEx3

if 'OptionalEx4' not in _M_Test.__dict__:
    _M_Test.OptionalEx4 = Ice.createTempClass()
    class OptionalEx4(Ice.UserException):
        def __init__(self, firstName='', secondName=Ice.Unset, emailAddress=Ice.Unset):
            self.firstName = firstName
            self.secondName = secondName
            self.emailAddress = emailAddress

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::OptionalEx4'

    _M_Test._t_OptionalEx4 = IcePy.defineException('::Test::OptionalEx4', OptionalEx4, (), False, None, (
        ('firstName', (), IcePy._t_string, False, 0),
        ('secondName', (), IcePy._t_string, True, 1),
        ('emailAddress', (), IcePy._t_string, True, 2)
    ))
    OptionalEx4._ice_type = _M_Test._t_OptionalEx4

    _M_Test.OptionalEx4 = OptionalEx4
    del OptionalEx4

_M_Test._t_BaseInterface1 = IcePy.defineValue('::Test::BaseInterface1', Ice.Value, -1, (), False, True, None, ())

if 'BaseInterface1Prx' not in _M_Test.__dict__:
    _M_Test.BaseInterface1Prx = Ice.createTempClass()
    class BaseInterface1Prx(Ice.ObjectPrx):

        def baseOp1(self, context=None):
            return _M_Test.BaseInterface1._op_baseOp1.invoke(self, ((), context))

        def baseOp1Async(self, context=None):
            return _M_Test.BaseInterface1._op_baseOp1.invokeAsync(self, ((), context))

        def begin_baseOp1(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface1._op_baseOp1.begin(self, ((), _response, _ex, _sent, context))

        def end_baseOp1(self, _r):
            return _M_Test.BaseInterface1._op_baseOp1.end(self, _r)

        def baseOp2(self, i, context=None):
            return _M_Test.BaseInterface1._op_baseOp2.invoke(self, ((i, ), context))

        def baseOp2Async(self, i, context=None):
            return _M_Test.BaseInterface1._op_baseOp2.invokeAsync(self, ((i, ), context))

        def begin_baseOp2(self, i, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface1._op_baseOp2.begin(self, ((i, ), _response, _ex, _sent, context))

        def end_baseOp2(self, _r):
            return _M_Test.BaseInterface1._op_baseOp2.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.BaseInterface1Prx.ice_checkedCast(proxy, '::Test::BaseInterface1', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.BaseInterface1Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface1'
    _M_Test._t_BaseInterface1Prx = IcePy.defineProxy('::Test::BaseInterface1', BaseInterface1Prx)

    _M_Test.BaseInterface1Prx = BaseInterface1Prx
    del BaseInterface1Prx

    _M_Test.BaseInterface1 = Ice.createTempClass()
    class BaseInterface1(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::BaseInterface1')

        def ice_id(self, current=None):
            return '::Test::BaseInterface1'

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface1'

        def baseOp1(self, current=None):
            raise NotImplementedError("servant method 'baseOp1' not implemented")

        def baseOp2(self, i, current=None):
            raise NotImplementedError("servant method 'baseOp2' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_BaseInterface1Disp)

        __repr__ = __str__

    _M_Test._t_BaseInterface1Disp = IcePy.defineClass('::Test::BaseInterface1', BaseInterface1, (), None, ())
    BaseInterface1._ice_type = _M_Test._t_BaseInterface1Disp

    BaseInterface1._op_baseOp1 = IcePy.Operation('baseOp1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    BaseInterface1._op_baseOp2 = IcePy.Operation('baseOp2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_string, False, 0),), None, (_M_Test._t_Exception1,))

    _M_Test.BaseInterface1 = BaseInterface1
    del BaseInterface1

_M_Test._t_BaseInterface2 = IcePy.defineValue('::Test::BaseInterface2', Ice.Value, -1, (), False, True, None, ())

if 'BaseInterface2Prx' not in _M_Test.__dict__:
    _M_Test.BaseInterface2Prx = Ice.createTempClass()
    class BaseInterface2Prx(Ice.ObjectPrx):

        def baseOp(self, context=None):
            return _M_Test.BaseInterface2._op_baseOp.invoke(self, ((), context))

        def baseOpAsync(self, context=None):
            return _M_Test.BaseInterface2._op_baseOp.invokeAsync(self, ((), context))

        def begin_baseOp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface2._op_baseOp.begin(self, ((), _response, _ex, _sent, context))

        def end_baseOp(self, _r):
            return _M_Test.BaseInterface2._op_baseOp.end(self, _r)

        def baseOp2(self, i, context=None):
            return _M_Test.BaseInterface2._op_baseOp2.invoke(self, ((i, ), context))

        def baseOp2Async(self, i, context=None):
            return _M_Test.BaseInterface2._op_baseOp2.invokeAsync(self, ((i, ), context))

        def begin_baseOp2(self, i, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface2._op_baseOp2.begin(self, ((i, ), _response, _ex, _sent, context))

        def end_baseOp2(self, _r):
            return _M_Test.BaseInterface2._op_baseOp2.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.BaseInterface2Prx.ice_checkedCast(proxy, '::Test::BaseInterface2', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.BaseInterface2Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface2'
    _M_Test._t_BaseInterface2Prx = IcePy.defineProxy('::Test::BaseInterface2', BaseInterface2Prx)

    _M_Test.BaseInterface2Prx = BaseInterface2Prx
    del BaseInterface2Prx

    _M_Test.BaseInterface2 = Ice.createTempClass()
    class BaseInterface2(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::BaseInterface2')

        def ice_id(self, current=None):
            return '::Test::BaseInterface2'

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface2'

        def baseOp(self, current=None):
            raise NotImplementedError("servant method 'baseOp' not implemented")

        def baseOp2(self, i, current=None):
            raise NotImplementedError("servant method 'baseOp2' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_BaseInterface2Disp)

        __repr__ = __str__

    _M_Test._t_BaseInterface2Disp = IcePy.defineClass('::Test::BaseInterface2', BaseInterface2, (), None, ())
    BaseInterface2._ice_type = _M_Test._t_BaseInterface2Disp

    BaseInterface2._op_baseOp = IcePy.Operation('baseOp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    BaseInterface2._op_baseOp2 = IcePy.Operation('baseOp2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_string, False, 0),), None, (_M_Test._t_Exception1,))

    _M_Test.BaseInterface2 = BaseInterface2
    del BaseInterface2

_M_Test._t_BaseInterface3 = IcePy.defineValue('::Test::BaseInterface3', Ice.Value, -1, (), False, True, None, ())

if 'BaseInterface3Prx' not in _M_Test.__dict__:
    _M_Test.BaseInterface3Prx = Ice.createTempClass()
    class BaseInterface3Prx(Ice.ObjectPrx):

        def baseOp(self, context=None):
            return _M_Test.BaseInterface3._op_baseOp.invoke(self, ((), context))

        def baseOpAsync(self, context=None):
            return _M_Test.BaseInterface3._op_baseOp.invokeAsync(self, ((), context))

        def begin_baseOp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface3._op_baseOp.begin(self, ((), _response, _ex, _sent, context))

        def end_baseOp(self, _r):
            return _M_Test.BaseInterface3._op_baseOp.end(self, _r)

        def baseOp2(self, i, context=None):
            return _M_Test.BaseInterface3._op_baseOp2.invoke(self, ((i, ), context))

        def baseOp2Async(self, i, context=None):
            return _M_Test.BaseInterface3._op_baseOp2.invokeAsync(self, ((i, ), context))

        def begin_baseOp2(self, i, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface3._op_baseOp2.begin(self, ((i, ), _response, _ex, _sent, context))

        def end_baseOp2(self, _r):
            return _M_Test.BaseInterface3._op_baseOp2.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.BaseInterface3Prx.ice_checkedCast(proxy, '::Test::BaseInterface3', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.BaseInterface3Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface3'
    _M_Test._t_BaseInterface3Prx = IcePy.defineProxy('::Test::BaseInterface3', BaseInterface3Prx)

    _M_Test.BaseInterface3Prx = BaseInterface3Prx
    del BaseInterface3Prx

    _M_Test.BaseInterface3 = Ice.createTempClass()
    class BaseInterface3(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::BaseInterface3')

        def ice_id(self, current=None):
            return '::Test::BaseInterface3'

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface3'

        def baseOp(self, current=None):
            raise NotImplementedError("servant method 'baseOp' not implemented")

        def baseOp2(self, i, current=None):
            raise NotImplementedError("servant method 'baseOp2' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_BaseInterface3Disp)

        __repr__ = __str__

    _M_Test._t_BaseInterface3Disp = IcePy.defineClass('::Test::BaseInterface3', BaseInterface3, (), None, ())
    BaseInterface3._ice_type = _M_Test._t_BaseInterface3Disp

    BaseInterface3._op_baseOp = IcePy.Operation('baseOp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    BaseInterface3._op_baseOp2 = IcePy.Operation('baseOp2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_string, False, 0),), None, (_M_Test._t_Exception1,))

    _M_Test.BaseInterface3 = BaseInterface3
    del BaseInterface3

_M_Test._t_BaseInterface4 = IcePy.defineValue('::Test::BaseInterface4', Ice.Value, -1, (), False, True, None, ())

if 'BaseInterface4Prx' not in _M_Test.__dict__:
    _M_Test.BaseInterface4Prx = Ice.createTempClass()
    class BaseInterface4Prx(Ice.ObjectPrx):

        def baseOp(self, context=None):
            return _M_Test.BaseInterface4._op_baseOp.invoke(self, ((), context))

        def baseOpAsync(self, context=None):
            return _M_Test.BaseInterface4._op_baseOp.invokeAsync(self, ((), context))

        def begin_baseOp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface4._op_baseOp.begin(self, ((), _response, _ex, _sent, context))

        def end_baseOp(self, _r):
            return _M_Test.BaseInterface4._op_baseOp.end(self, _r)

        def baseOp2(self, i, context=None):
            return _M_Test.BaseInterface4._op_baseOp2.invoke(self, ((i, ), context))

        def baseOp2Async(self, i, context=None):
            return _M_Test.BaseInterface4._op_baseOp2.invokeAsync(self, ((i, ), context))

        def begin_baseOp2(self, i, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface4._op_baseOp2.begin(self, ((i, ), _response, _ex, _sent, context))

        def end_baseOp2(self, _r):
            return _M_Test.BaseInterface4._op_baseOp2.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.BaseInterface4Prx.ice_checkedCast(proxy, '::Test::BaseInterface4', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.BaseInterface4Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface4'
    _M_Test._t_BaseInterface4Prx = IcePy.defineProxy('::Test::BaseInterface4', BaseInterface4Prx)

    _M_Test.BaseInterface4Prx = BaseInterface4Prx
    del BaseInterface4Prx

    _M_Test.BaseInterface4 = Ice.createTempClass()
    class BaseInterface4(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::BaseInterface4')

        def ice_id(self, current=None):
            return '::Test::BaseInterface4'

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface4'

        def baseOp(self, current=None):
            raise NotImplementedError("servant method 'baseOp' not implemented")

        def baseOp2(self, i, current=None):
            raise NotImplementedError("servant method 'baseOp2' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_BaseInterface4Disp)

        __repr__ = __str__

    _M_Test._t_BaseInterface4Disp = IcePy.defineClass('::Test::BaseInterface4', BaseInterface4, (), None, ())
    BaseInterface4._ice_type = _M_Test._t_BaseInterface4Disp

    BaseInterface4._op_baseOp = IcePy.Operation('baseOp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    BaseInterface4._op_baseOp2 = IcePy.Operation('baseOp2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_string, False, 0),), None, (_M_Test._t_Exception1,))

    _M_Test.BaseInterface4 = BaseInterface4
    del BaseInterface4

_M_Test._t_BaseInterface5 = IcePy.defineValue('::Test::BaseInterface5', Ice.Value, -1, (), False, True, None, ())

if 'BaseInterface5Prx' not in _M_Test.__dict__:
    _M_Test.BaseInterface5Prx = Ice.createTempClass()
    class BaseInterface5Prx(Ice.ObjectPrx):

        def baseOp(self, context=None):
            return _M_Test.BaseInterface5._op_baseOp.invoke(self, ((), context))

        def baseOpAsync(self, context=None):
            return _M_Test.BaseInterface5._op_baseOp.invokeAsync(self, ((), context))

        def begin_baseOp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface5._op_baseOp.begin(self, ((), _response, _ex, _sent, context))

        def end_baseOp(self, _r):
            return _M_Test.BaseInterface5._op_baseOp.end(self, _r)

        def baseOp2(self, i, context=None):
            return _M_Test.BaseInterface5._op_baseOp2.invoke(self, ((i, ), context))

        def baseOp2Async(self, i, context=None):
            return _M_Test.BaseInterface5._op_baseOp2.invokeAsync(self, ((i, ), context))

        def begin_baseOp2(self, i, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface5._op_baseOp2.begin(self, ((i, ), _response, _ex, _sent, context))

        def end_baseOp2(self, _r):
            return _M_Test.BaseInterface5._op_baseOp2.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.BaseInterface5Prx.ice_checkedCast(proxy, '::Test::BaseInterface5', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.BaseInterface5Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface5'
    _M_Test._t_BaseInterface5Prx = IcePy.defineProxy('::Test::BaseInterface5', BaseInterface5Prx)

    _M_Test.BaseInterface5Prx = BaseInterface5Prx
    del BaseInterface5Prx

    _M_Test.BaseInterface5 = Ice.createTempClass()
    class BaseInterface5(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::BaseInterface5')

        def ice_id(self, current=None):
            return '::Test::BaseInterface5'

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface5'

        def baseOp(self, current=None):
            raise NotImplementedError("servant method 'baseOp' not implemented")

        def baseOp2(self, i, current=None):
            raise NotImplementedError("servant method 'baseOp2' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_BaseInterface5Disp)

        __repr__ = __str__

    _M_Test._t_BaseInterface5Disp = IcePy.defineClass('::Test::BaseInterface5', BaseInterface5, (), None, ())
    BaseInterface5._ice_type = _M_Test._t_BaseInterface5Disp

    BaseInterface5._op_baseOp = IcePy.Operation('baseOp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    BaseInterface5._op_baseOp2 = IcePy.Operation('baseOp2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_string, False, 0),), None, (_M_Test._t_Exception1,))

    _M_Test.BaseInterface5 = BaseInterface5
    del BaseInterface5

_M_Test._t_BaseInterface6 = IcePy.defineValue('::Test::BaseInterface6', Ice.Value, -1, (), False, True, None, ())

if 'BaseInterface6Prx' not in _M_Test.__dict__:
    _M_Test.BaseInterface6Prx = Ice.createTempClass()
    class BaseInterface6Prx(Ice.ObjectPrx):

        def baseOp(self, context=None):
            return _M_Test.BaseInterface6._op_baseOp.invoke(self, ((), context))

        def baseOpAsync(self, context=None):
            return _M_Test.BaseInterface6._op_baseOp.invokeAsync(self, ((), context))

        def begin_baseOp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface6._op_baseOp.begin(self, ((), _response, _ex, _sent, context))

        def end_baseOp(self, _r):
            return _M_Test.BaseInterface6._op_baseOp.end(self, _r)

        def baseOp2(self, i, context=None):
            return _M_Test.BaseInterface6._op_baseOp2.invoke(self, ((i, ), context))

        def baseOp2Async(self, i, context=None):
            return _M_Test.BaseInterface6._op_baseOp2.invokeAsync(self, ((i, ), context))

        def begin_baseOp2(self, i, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface6._op_baseOp2.begin(self, ((i, ), _response, _ex, _sent, context))

        def end_baseOp2(self, _r):
            return _M_Test.BaseInterface6._op_baseOp2.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.BaseInterface6Prx.ice_checkedCast(proxy, '::Test::BaseInterface6', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.BaseInterface6Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface6'
    _M_Test._t_BaseInterface6Prx = IcePy.defineProxy('::Test::BaseInterface6', BaseInterface6Prx)

    _M_Test.BaseInterface6Prx = BaseInterface6Prx
    del BaseInterface6Prx

    _M_Test.BaseInterface6 = Ice.createTempClass()
    class BaseInterface6(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::BaseInterface6')

        def ice_id(self, current=None):
            return '::Test::BaseInterface6'

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface6'

        def baseOp(self, current=None):
            raise NotImplementedError("servant method 'baseOp' not implemented")

        def baseOp2(self, i, current=None):
            raise NotImplementedError("servant method 'baseOp2' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_BaseInterface6Disp)

        __repr__ = __str__

    _M_Test._t_BaseInterface6Disp = IcePy.defineClass('::Test::BaseInterface6', BaseInterface6, (), None, ())
    BaseInterface6._ice_type = _M_Test._t_BaseInterface6Disp

    BaseInterface6._op_baseOp = IcePy.Operation('baseOp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    BaseInterface6._op_baseOp2 = IcePy.Operation('baseOp2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_string, False, 0),), None, (_M_Test._t_Exception1,))

    _M_Test.BaseInterface6 = BaseInterface6
    del BaseInterface6

_M_Test._t_BaseInterface7 = IcePy.defineValue('::Test::BaseInterface7', Ice.Value, -1, (), False, True, None, ())

if 'BaseInterface7Prx' not in _M_Test.__dict__:
    _M_Test.BaseInterface7Prx = Ice.createTempClass()
    class BaseInterface7Prx(Ice.ObjectPrx):

        def baseOp(self, context=None):
            return _M_Test.BaseInterface7._op_baseOp.invoke(self, ((), context))

        def baseOpAsync(self, context=None):
            return _M_Test.BaseInterface7._op_baseOp.invokeAsync(self, ((), context))

        def begin_baseOp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface7._op_baseOp.begin(self, ((), _response, _ex, _sent, context))

        def end_baseOp(self, _r):
            return _M_Test.BaseInterface7._op_baseOp.end(self, _r)

        def baseOp2(self, i, context=None):
            return _M_Test.BaseInterface7._op_baseOp2.invoke(self, ((i, ), context))

        def baseOp2Async(self, i, context=None):
            return _M_Test.BaseInterface7._op_baseOp2.invokeAsync(self, ((i, ), context))

        def begin_baseOp2(self, i, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface7._op_baseOp2.begin(self, ((i, ), _response, _ex, _sent, context))

        def end_baseOp2(self, _r):
            return _M_Test.BaseInterface7._op_baseOp2.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.BaseInterface7Prx.ice_checkedCast(proxy, '::Test::BaseInterface7', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.BaseInterface7Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface7'
    _M_Test._t_BaseInterface7Prx = IcePy.defineProxy('::Test::BaseInterface7', BaseInterface7Prx)

    _M_Test.BaseInterface7Prx = BaseInterface7Prx
    del BaseInterface7Prx

    _M_Test.BaseInterface7 = Ice.createTempClass()
    class BaseInterface7(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::BaseInterface7')

        def ice_id(self, current=None):
            return '::Test::BaseInterface7'

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface7'

        def baseOp(self, current=None):
            raise NotImplementedError("servant method 'baseOp' not implemented")

        def baseOp2(self, i, current=None):
            raise NotImplementedError("servant method 'baseOp2' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_BaseInterface7Disp)

        __repr__ = __str__

    _M_Test._t_BaseInterface7Disp = IcePy.defineClass('::Test::BaseInterface7', BaseInterface7, (), None, ())
    BaseInterface7._ice_type = _M_Test._t_BaseInterface7Disp

    BaseInterface7._op_baseOp = IcePy.Operation('baseOp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    BaseInterface7._op_baseOp2 = IcePy.Operation('baseOp2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_string, False, 0),), None, (_M_Test._t_Exception1,))

    _M_Test.BaseInterface7 = BaseInterface7
    del BaseInterface7

_M_Test._t_BaseInterface8 = IcePy.defineValue('::Test::BaseInterface8', Ice.Value, -1, (), False, True, None, ())

if 'BaseInterface8Prx' not in _M_Test.__dict__:
    _M_Test.BaseInterface8Prx = Ice.createTempClass()
    class BaseInterface8Prx(Ice.ObjectPrx):

        def baseOp(self, context=None):
            return _M_Test.BaseInterface8._op_baseOp.invoke(self, ((), context))

        def baseOpAsync(self, context=None):
            return _M_Test.BaseInterface8._op_baseOp.invokeAsync(self, ((), context))

        def begin_baseOp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface8._op_baseOp.begin(self, ((), _response, _ex, _sent, context))

        def end_baseOp(self, _r):
            return _M_Test.BaseInterface8._op_baseOp.end(self, _r)

        def baseOp2(self, i, context=None):
            return _M_Test.BaseInterface8._op_baseOp2.invoke(self, ((i, ), context))

        def baseOp2Async(self, i, context=None):
            return _M_Test.BaseInterface8._op_baseOp2.invokeAsync(self, ((i, ), context))

        def begin_baseOp2(self, i, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface8._op_baseOp2.begin(self, ((i, ), _response, _ex, _sent, context))

        def end_baseOp2(self, _r):
            return _M_Test.BaseInterface8._op_baseOp2.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.BaseInterface8Prx.ice_checkedCast(proxy, '::Test::BaseInterface8', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.BaseInterface8Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface8'
    _M_Test._t_BaseInterface8Prx = IcePy.defineProxy('::Test::BaseInterface8', BaseInterface8Prx)

    _M_Test.BaseInterface8Prx = BaseInterface8Prx
    del BaseInterface8Prx

    _M_Test.BaseInterface8 = Ice.createTempClass()
    class BaseInterface8(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::BaseInterface8')

        def ice_id(self, current=None):
            return '::Test::BaseInterface8'

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface8'

        def baseOp(self, current=None):
            raise NotImplementedError("servant method 'baseOp' not implemented")

        def baseOp2(self, i, current=None):
            raise NotImplementedError("servant method 'baseOp2' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_BaseInterface8Disp)

        __repr__ = __str__

    _M_Test._t_BaseInterface8Disp = IcePy.defineClass('::Test::BaseInterface8', BaseInterface8, (), None, ())
    BaseInterface8._ice_type = _M_Test._t_BaseInterface8Disp

    BaseInterface8._op_baseOp = IcePy.Operation('baseOp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    BaseInterface8._op_baseOp2 = IcePy.Operation('baseOp2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_string, False, 0),), None, (_M_Test._t_Exception1,))

    _M_Test.BaseInterface8 = BaseInterface8
    del BaseInterface8

_M_Test._t_BaseInterface9 = IcePy.defineValue('::Test::BaseInterface9', Ice.Value, -1, (), False, True, None, ())

if 'BaseInterface9Prx' not in _M_Test.__dict__:
    _M_Test.BaseInterface9Prx = Ice.createTempClass()
    class BaseInterface9Prx(Ice.ObjectPrx):

        def baseOp(self, context=None):
            return _M_Test.BaseInterface9._op_baseOp.invoke(self, ((), context))

        def baseOpAsync(self, context=None):
            return _M_Test.BaseInterface9._op_baseOp.invokeAsync(self, ((), context))

        def begin_baseOp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface9._op_baseOp.begin(self, ((), _response, _ex, _sent, context))

        def end_baseOp(self, _r):
            return _M_Test.BaseInterface9._op_baseOp.end(self, _r)

        def baseOp2(self, i, context=None):
            return _M_Test.BaseInterface9._op_baseOp2.invoke(self, ((i, ), context))

        def baseOp2Async(self, i, context=None):
            return _M_Test.BaseInterface9._op_baseOp2.invokeAsync(self, ((i, ), context))

        def begin_baseOp2(self, i, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.BaseInterface9._op_baseOp2.begin(self, ((i, ), _response, _ex, _sent, context))

        def end_baseOp2(self, _r):
            return _M_Test.BaseInterface9._op_baseOp2.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.BaseInterface9Prx.ice_checkedCast(proxy, '::Test::BaseInterface9', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.BaseInterface9Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface9'
    _M_Test._t_BaseInterface9Prx = IcePy.defineProxy('::Test::BaseInterface9', BaseInterface9Prx)

    _M_Test.BaseInterface9Prx = BaseInterface9Prx
    del BaseInterface9Prx

    _M_Test.BaseInterface9 = Ice.createTempClass()
    class BaseInterface9(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::BaseInterface9')

        def ice_id(self, current=None):
            return '::Test::BaseInterface9'

        @staticmethod
        def ice_staticId():
            return '::Test::BaseInterface9'

        def baseOp(self, current=None):
            raise NotImplementedError("servant method 'baseOp' not implemented")

        def baseOp2(self, i, current=None):
            raise NotImplementedError("servant method 'baseOp2' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_BaseInterface9Disp)

        __repr__ = __str__

    _M_Test._t_BaseInterface9Disp = IcePy.defineClass('::Test::BaseInterface9', BaseInterface9, (), None, ())
    BaseInterface9._ice_type = _M_Test._t_BaseInterface9Disp

    BaseInterface9._op_baseOp = IcePy.Operation('baseOp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    BaseInterface9._op_baseOp2 = IcePy.Operation('baseOp2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_string, False, 0),), None, (_M_Test._t_Exception1,))

    _M_Test.BaseInterface9 = BaseInterface9
    del BaseInterface9

if 'Compact1' not in _M_Test.__dict__:
    _M_Test.Compact1 = Ice.createTempClass()
    class Compact1(Ice.Value):
        def __init__(self, id=0):
            self.id = id

        def ice_id(self):
            return '::Test::Compact1'

        @staticmethod
        def ice_staticId():
            return '::Test::Compact1'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Compact1)

        __repr__ = __str__

    _M_Test._t_Compact1 = IcePy.defineValue('::Test::Compact1', Compact1, 1, (), False, False, None, (('id', (), IcePy._t_int, False, 0),))
    Compact1._ice_type = _M_Test._t_Compact1

    _M_Test.Compact1 = Compact1
    del Compact1

if 'Derived1' not in _M_Test.__dict__:
    _M_Test.Derived1 = Ice.createTempClass()
    class Derived1(_M_Test.Compact1):
        def __init__(self, id=0):
            _M_Test.Compact1.__init__(self, id)

        def ice_id(self):
            return '::Test::Derived1'

        @staticmethod
        def ice_staticId():
            return '::Test::Derived1'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Derived1)

        __repr__ = __str__

    _M_Test._t_Derived1 = IcePy.defineValue('::Test::Derived1', Derived1, -1, (), False, False, _M_Test._t_Compact1, ())
    Derived1._ice_type = _M_Test._t_Derived1

    _M_Test.Derived1 = Derived1
    del Derived1

if 'Compact2' not in _M_Test.__dict__:
    _M_Test.Compact2 = Ice.createTempClass()
    class Compact2(Ice.Value):
        def __init__(self, id=0):
            self.id = id

        def ice_id(self):
            return '::Test::Compact2'

        @staticmethod
        def ice_staticId():
            return '::Test::Compact2'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Compact2)

        __repr__ = __str__

    _M_Test._t_Compact2 = IcePy.defineValue('::Test::Compact2', Compact2, 2, (), False, False, None, (('id', (), IcePy._t_int, False, 0),))
    Compact2._ice_type = _M_Test._t_Compact2

    _M_Test.Compact2 = Compact2
    del Compact2

if 'Optional0' not in _M_Test.__dict__:
    _M_Test.Optional0 = Ice.createTempClass()
    class Optional0(Ice.Value):
        def __init__(self, firstName='', secondName=Ice.Unset, emailAddress=Ice.Unset):
            self.firstName = firstName
            self.secondName = secondName
            self.emailAddress = emailAddress

        def ice_id(self):
            return '::Test::Optional0'

        @staticmethod
        def ice_staticId():
            return '::Test::Optional0'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Optional0)

        __repr__ = __str__

    _M_Test._t_Optional0 = IcePy.defineValue('::Test::Optional0', Optional0, -1, (), False, False, None, (
        ('firstName', (), IcePy._t_string, False, 0),
        ('secondName', (), IcePy._t_string, True, 1),
        ('emailAddress', (), IcePy._t_string, True, 2)
    ))
    Optional0._ice_type = _M_Test._t_Optional0

    _M_Test.Optional0 = Optional0
    del Optional0

if 'Optional1' not in _M_Test.__dict__:
    _M_Test.Optional1 = Ice.createTempClass()
    class Optional1(Ice.Value):
        def __init__(self, firstName='', secondName=Ice.Unset, emailAddress=Ice.Unset):
            self.firstName = firstName
            self.secondName = secondName
            self.emailAddress = emailAddress

        def ice_id(self):
            return '::Test::Optional1'

        @staticmethod
        def ice_staticId():
            return '::Test::Optional1'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Optional1)

        __repr__ = __str__

    _M_Test._t_Optional1 = IcePy.defineValue('::Test::Optional1', Optional1, -1, (), False, False, None, (
        ('firstName', (), IcePy._t_string, False, 0),
        ('secondName', (), IcePy._t_string, True, 1),
        ('emailAddress', (), IcePy._t_string, True, 2)
    ))
    Optional1._ice_type = _M_Test._t_Optional1

    _M_Test.Optional1 = Optional1
    del Optional1

if 'Optional2' not in _M_Test.__dict__:
    _M_Test.Optional2 = Ice.createTempClass()
    class Optional2(Ice.Value):
        def __init__(self, firstName='', secondName='', emailAddress=Ice.Unset):
            self.firstName = firstName
            self.secondName = secondName
            self.emailAddress = emailAddress

        def ice_id(self):
            return '::Test::Optional2'

        @staticmethod
        def ice_staticId():
            return '::Test::Optional2'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Optional2)

        __repr__ = __str__

    _M_Test._t_Optional2 = IcePy.defineValue('::Test::Optional2', Optional2, -1, (), False, False, None, (
        ('firstName', (), IcePy._t_string, False, 0),
        ('secondName', (), IcePy._t_string, False, 0),
        ('emailAddress', (), IcePy._t_string, True, 1)
    ))
    Optional2._ice_type = _M_Test._t_Optional2

    _M_Test.Optional2 = Optional2
    del Optional2

if 'Optional3' not in _M_Test.__dict__:
    _M_Test.Optional3 = Ice.createTempClass()
    class Optional3(Ice.Value):
        def __init__(self, firstName='', secondName=Ice.Unset, emailAddress=Ice.Unset):
            self.firstName = firstName
            self.secondName = secondName
            self.emailAddress = emailAddress

        def ice_id(self):
            return '::Test::Optional3'

        @staticmethod
        def ice_staticId():
            return '::Test::Optional3'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Optional3)

        __repr__ = __str__

    _M_Test._t_Optional3 = IcePy.defineValue('::Test::Optional3', Optional3, -1, (), False, False, None, (
        ('firstName', (), IcePy._t_string, False, 0),
        ('secondName', (), IcePy._t_string, True, 1),
        ('emailAddress', (), IcePy._t_string, True, 2)
    ))
    Optional3._ice_type = _M_Test._t_Optional3

    _M_Test.Optional3 = Optional3
    del Optional3

if 'Optional4' not in _M_Test.__dict__:
    _M_Test.Optional4 = Ice.createTempClass()
    class Optional4(Ice.Value):
        def __init__(self, firstName='', secondName=Ice.Unset, emailAddress=Ice.Unset):
            self.firstName = firstName
            self.secondName = secondName
            self.emailAddress = emailAddress

        def ice_id(self):
            return '::Test::Optional4'

        @staticmethod
        def ice_staticId():
            return '::Test::Optional4'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Optional4)

        __repr__ = __str__

    _M_Test._t_Optional4 = IcePy.defineValue('::Test::Optional4', Optional4, -1, (), False, False, None, (
        ('firstName', (), IcePy._t_string, False, 0),
        ('secondName', (), IcePy._t_string, True, 1),
        ('emailAddress', (), IcePy._t_string, True, 2)
    ))
    Optional4._ice_type = _M_Test._t_Optional4

    _M_Test.Optional4 = Optional4
    del Optional4

_M_Test._t_OptionalParameters0 = IcePy.defineValue('::Test::OptionalParameters0', Ice.Value, -1, (), False, True, None, ())

if 'OptionalParameters0Prx' not in _M_Test.__dict__:
    _M_Test.OptionalParameters0Prx = Ice.createTempClass()
    class OptionalParameters0Prx(Ice.ObjectPrx):

        def op1(self, firstName, secondName=Ice.Unset, emailAddress=Ice.Unset, context=None):
            return _M_Test.OptionalParameters0._op_op1.invoke(self, ((firstName, secondName, emailAddress), context))

        def op1Async(self, firstName, secondName, emailAddress, context=None):
            return _M_Test.OptionalParameters0._op_op1.invokeAsync(self, ((firstName, secondName, emailAddress), context))

        def begin_op1(self, firstName, secondName, emailAddress, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.OptionalParameters0._op_op1.begin(self, ((firstName, secondName, emailAddress), _response, _ex, _sent, context))

        def end_op1(self, _r):
            return _M_Test.OptionalParameters0._op_op1.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.OptionalParameters0Prx.ice_checkedCast(proxy, '::Test::OptionalParameters0', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.OptionalParameters0Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::OptionalParameters0'
    _M_Test._t_OptionalParameters0Prx = IcePy.defineProxy('::Test::OptionalParameters0', OptionalParameters0Prx)

    _M_Test.OptionalParameters0Prx = OptionalParameters0Prx
    del OptionalParameters0Prx

    _M_Test.OptionalParameters0 = Ice.createTempClass()
    class OptionalParameters0(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::OptionalParameters0')

        def ice_id(self, current=None):
            return '::Test::OptionalParameters0'

        @staticmethod
        def ice_staticId():
            return '::Test::OptionalParameters0'

        def op1(self, firstName, secondName, emailAddress, current=None):
            raise NotImplementedError("servant method 'op1' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_OptionalParameters0Disp)

        __repr__ = __str__

    _M_Test._t_OptionalParameters0Disp = IcePy.defineClass('::Test::OptionalParameters0', OptionalParameters0, (), None, ())
    OptionalParameters0._ice_type = _M_Test._t_OptionalParameters0Disp

    OptionalParameters0._op_op1 = IcePy.Operation('op1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, True, 1), ((), IcePy._t_string, True, 2)), (), None, ())

    _M_Test.OptionalParameters0 = OptionalParameters0
    del OptionalParameters0

_M_Test._t_OptionalParameters1 = IcePy.defineValue('::Test::OptionalParameters1', Ice.Value, -1, (), False, True, None, ())

if 'OptionalParameters1Prx' not in _M_Test.__dict__:
    _M_Test.OptionalParameters1Prx = Ice.createTempClass()
    class OptionalParameters1Prx(Ice.ObjectPrx):

        def op1(self, firstName, secondName=Ice.Unset, emailAddress=Ice.Unset, context=None):
            return _M_Test.OptionalParameters1._op_op1.invoke(self, ((firstName, secondName, emailAddress), context))

        def op1Async(self, firstName, secondName, emailAddress, context=None):
            return _M_Test.OptionalParameters1._op_op1.invokeAsync(self, ((firstName, secondName, emailAddress), context))

        def begin_op1(self, firstName, secondName, emailAddress, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.OptionalParameters1._op_op1.begin(self, ((firstName, secondName, emailAddress), _response, _ex, _sent, context))

        def end_op1(self, _r):
            return _M_Test.OptionalParameters1._op_op1.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.OptionalParameters1Prx.ice_checkedCast(proxy, '::Test::OptionalParameters1', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.OptionalParameters1Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::OptionalParameters1'
    _M_Test._t_OptionalParameters1Prx = IcePy.defineProxy('::Test::OptionalParameters1', OptionalParameters1Prx)

    _M_Test.OptionalParameters1Prx = OptionalParameters1Prx
    del OptionalParameters1Prx

    _M_Test.OptionalParameters1 = Ice.createTempClass()
    class OptionalParameters1(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::OptionalParameters1')

        def ice_id(self, current=None):
            return '::Test::OptionalParameters1'

        @staticmethod
        def ice_staticId():
            return '::Test::OptionalParameters1'

        def op1(self, firstName, secondName, emailAddress, current=None):
            raise NotImplementedError("servant method 'op1' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_OptionalParameters1Disp)

        __repr__ = __str__

    _M_Test._t_OptionalParameters1Disp = IcePy.defineClass('::Test::OptionalParameters1', OptionalParameters1, (), None, ())
    OptionalParameters1._ice_type = _M_Test._t_OptionalParameters1Disp

    OptionalParameters1._op_op1 = IcePy.Operation('op1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, True, 1), ((), IcePy._t_string, True, 2)), (), None, ())

    _M_Test.OptionalParameters1 = OptionalParameters1
    del OptionalParameters1

_M_Test._t_OptionalParameters2 = IcePy.defineValue('::Test::OptionalParameters2', Ice.Value, -1, (), False, True, None, ())

if 'OptionalParameters2Prx' not in _M_Test.__dict__:
    _M_Test.OptionalParameters2Prx = Ice.createTempClass()
    class OptionalParameters2Prx(Ice.ObjectPrx):

        def op1(self, firstName, emailAddress=Ice.Unset, secondName=Ice.Unset, context=None):
            return _M_Test.OptionalParameters2._op_op1.invoke(self, ((firstName, emailAddress, secondName), context))

        def op1Async(self, firstName, emailAddress, secondName, context=None):
            return _M_Test.OptionalParameters2._op_op1.invokeAsync(self, ((firstName, emailAddress, secondName), context))

        def begin_op1(self, firstName, emailAddress, secondName, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.OptionalParameters2._op_op1.begin(self, ((firstName, emailAddress, secondName), _response, _ex, _sent, context))

        def end_op1(self, _r):
            return _M_Test.OptionalParameters2._op_op1.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.OptionalParameters2Prx.ice_checkedCast(proxy, '::Test::OptionalParameters2', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.OptionalParameters2Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::OptionalParameters2'
    _M_Test._t_OptionalParameters2Prx = IcePy.defineProxy('::Test::OptionalParameters2', OptionalParameters2Prx)

    _M_Test.OptionalParameters2Prx = OptionalParameters2Prx
    del OptionalParameters2Prx

    _M_Test.OptionalParameters2 = Ice.createTempClass()
    class OptionalParameters2(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::OptionalParameters2')

        def ice_id(self, current=None):
            return '::Test::OptionalParameters2'

        @staticmethod
        def ice_staticId():
            return '::Test::OptionalParameters2'

        def op1(self, firstName, emailAddress, secondName, current=None):
            raise NotImplementedError("servant method 'op1' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_OptionalParameters2Disp)

        __repr__ = __str__

    _M_Test._t_OptionalParameters2Disp = IcePy.defineClass('::Test::OptionalParameters2', OptionalParameters2, (), None, ())
    OptionalParameters2._ice_type = _M_Test._t_OptionalParameters2Disp

    OptionalParameters2._op_op1 = IcePy.Operation('op1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, True, 1), ((), IcePy._t_string, True, 2)), (), None, ())

    _M_Test.OptionalParameters2 = OptionalParameters2
    del OptionalParameters2

_M_Test._t_OptionalParameters3 = IcePy.defineValue('::Test::OptionalParameters3', Ice.Value, -1, (), False, True, None, ())

if 'OptionalParameters3Prx' not in _M_Test.__dict__:
    _M_Test.OptionalParameters3Prx = Ice.createTempClass()
    class OptionalParameters3Prx(Ice.ObjectPrx):

        def op1(self, firstName, emailAddress, secondName, context=None):
            return _M_Test.OptionalParameters3._op_op1.invoke(self, ((firstName, emailAddress, secondName), context))

        def op1Async(self, firstName, emailAddress, secondName, context=None):
            return _M_Test.OptionalParameters3._op_op1.invokeAsync(self, ((firstName, emailAddress, secondName), context))

        def begin_op1(self, firstName, emailAddress, secondName, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.OptionalParameters3._op_op1.begin(self, ((firstName, emailAddress, secondName), _response, _ex, _sent, context))

        def end_op1(self, _r):
            return _M_Test.OptionalParameters3._op_op1.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.OptionalParameters3Prx.ice_checkedCast(proxy, '::Test::OptionalParameters3', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.OptionalParameters3Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::OptionalParameters3'
    _M_Test._t_OptionalParameters3Prx = IcePy.defineProxy('::Test::OptionalParameters3', OptionalParameters3Prx)

    _M_Test.OptionalParameters3Prx = OptionalParameters3Prx
    del OptionalParameters3Prx

    _M_Test.OptionalParameters3 = Ice.createTempClass()
    class OptionalParameters3(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::OptionalParameters3')

        def ice_id(self, current=None):
            return '::Test::OptionalParameters3'

        @staticmethod
        def ice_staticId():
            return '::Test::OptionalParameters3'

        def op1(self, firstName, emailAddress, secondName, current=None):
            raise NotImplementedError("servant method 'op1' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_OptionalParameters3Disp)

        __repr__ = __str__

    _M_Test._t_OptionalParameters3Disp = IcePy.defineClass('::Test::OptionalParameters3', OptionalParameters3, (), None, ())
    OptionalParameters3._ice_type = _M_Test._t_OptionalParameters3Disp

    OptionalParameters3._op_op1 = IcePy.Operation('op1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, True, 1), ((), IcePy._t_string, False, 0)), (), None, ())

    _M_Test.OptionalParameters3 = OptionalParameters3
    del OptionalParameters3

_M_Test._t_OptionalReturn0 = IcePy.defineValue('::Test::OptionalReturn0', Ice.Value, -1, (), False, True, None, ())

if 'OptionalReturn0Prx' not in _M_Test.__dict__:
    _M_Test.OptionalReturn0Prx = Ice.createTempClass()
    class OptionalReturn0Prx(Ice.ObjectPrx):

        def op(self, context=None):
            return _M_Test.OptionalReturn0._op_op.invoke(self, ((), context))

        def opAsync(self, context=None):
            return _M_Test.OptionalReturn0._op_op.invokeAsync(self, ((), context))

        def begin_op(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.OptionalReturn0._op_op.begin(self, ((), _response, _ex, _sent, context))

        def end_op(self, _r):
            return _M_Test.OptionalReturn0._op_op.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.OptionalReturn0Prx.ice_checkedCast(proxy, '::Test::OptionalReturn0', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.OptionalReturn0Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::OptionalReturn0'
    _M_Test._t_OptionalReturn0Prx = IcePy.defineProxy('::Test::OptionalReturn0', OptionalReturn0Prx)

    _M_Test.OptionalReturn0Prx = OptionalReturn0Prx
    del OptionalReturn0Prx

    _M_Test.OptionalReturn0 = Ice.createTempClass()
    class OptionalReturn0(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::OptionalReturn0')

        def ice_id(self, current=None):
            return '::Test::OptionalReturn0'

        @staticmethod
        def ice_staticId():
            return '::Test::OptionalReturn0'

        def op(self, current=None):
            raise NotImplementedError("servant method 'op' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_OptionalReturn0Disp)

        __repr__ = __str__

    _M_Test._t_OptionalReturn0Disp = IcePy.defineClass('::Test::OptionalReturn0', OptionalReturn0, (), None, ())
    OptionalReturn0._ice_type = _M_Test._t_OptionalReturn0Disp

    OptionalReturn0._op_op = IcePy.Operation('op', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, True, 1), ())

    _M_Test.OptionalReturn0 = OptionalReturn0
    del OptionalReturn0

_M_Test._t_OptionalReturn2 = IcePy.defineValue('::Test::OptionalReturn2', Ice.Value, -1, (), False, True, None, ())

if 'OptionalReturn2Prx' not in _M_Test.__dict__:
    _M_Test.OptionalReturn2Prx = Ice.createTempClass()
    class OptionalReturn2Prx(Ice.ObjectPrx):

        def op(self, context=None):
            return _M_Test.OptionalReturn2._op_op.invoke(self, ((), context))

        def opAsync(self, context=None):
            return _M_Test.OptionalReturn2._op_op.invokeAsync(self, ((), context))

        def begin_op(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.OptionalReturn2._op_op.begin(self, ((), _response, _ex, _sent, context))

        def end_op(self, _r):
            return _M_Test.OptionalReturn2._op_op.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.OptionalReturn2Prx.ice_checkedCast(proxy, '::Test::OptionalReturn2', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.OptionalReturn2Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::OptionalReturn2'
    _M_Test._t_OptionalReturn2Prx = IcePy.defineProxy('::Test::OptionalReturn2', OptionalReturn2Prx)

    _M_Test.OptionalReturn2Prx = OptionalReturn2Prx
    del OptionalReturn2Prx

    _M_Test.OptionalReturn2 = Ice.createTempClass()
    class OptionalReturn2(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::OptionalReturn2')

        def ice_id(self, current=None):
            return '::Test::OptionalReturn2'

        @staticmethod
        def ice_staticId():
            return '::Test::OptionalReturn2'

        def op(self, current=None):
            raise NotImplementedError("servant method 'op' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_OptionalReturn2Disp)

        __repr__ = __str__

    _M_Test._t_OptionalReturn2Disp = IcePy.defineClass('::Test::OptionalReturn2', OptionalReturn2, (), None, ())
    OptionalReturn2._ice_type = _M_Test._t_OptionalReturn2Disp

    OptionalReturn2._op_op = IcePy.Operation('op', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, True, 1), ())

    _M_Test.OptionalReturn2 = OptionalReturn2
    del OptionalReturn2

if 'LocalEnum' not in _M_Test.__dict__:
    _M_Test.LocalEnum = Ice.createTempClass()
    class LocalEnum(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    LocalEnum.LocalEnum1 = LocalEnum("LocalEnum1", 0)
    LocalEnum.LocalEnum2 = LocalEnum("LocalEnum2", 1)
    LocalEnum.LocalEnum3 = LocalEnum("LocalEnum3", 2)
    LocalEnum._enumerators = { 0:LocalEnum.LocalEnum1, 1:LocalEnum.LocalEnum2, 2:LocalEnum.LocalEnum3 }

    _M_Test._t_LocalEnum = IcePy.defineEnum('::Test::LocalEnum', LocalEnum, (), LocalEnum._enumerators)

    _M_Test.LocalEnum = LocalEnum
    del LocalEnum

if '_t_LocalSequence' not in _M_Test.__dict__:
    _M_Test._t_LocalSequence = IcePy.defineSequence('::Test::LocalSequence', (), IcePy._t_string)

if '_t_LocalDictionary' not in _M_Test.__dict__:
    _M_Test._t_LocalDictionary = IcePy.defineDictionary('::Test::LocalDictionary', (), IcePy._t_string, IcePy._t_string)

if 'LocalStruct' not in _M_Test.__dict__:
    _M_Test.LocalStruct = Ice.createTempClass()
    class LocalStruct(object):
        def __init__(self, str=''):
            self.str = str

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.str)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Test.LocalStruct):
                return NotImplemented
            else:
                if self.str is None or other.str is None:
                    if self.str != other.str:
                        return (-1 if self.str is None else 1)
                else:
                    if self.str < other.str:
                        return -1
                    elif self.str > other.str:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_LocalStruct)

        __repr__ = __str__

    _M_Test._t_LocalStruct = IcePy.defineStruct('::Test::LocalStruct', LocalStruct, (), (('str', (), IcePy._t_string),))

    _M_Test.LocalStruct = LocalStruct
    del LocalStruct

if 'LocalClass' not in _M_Test.__dict__:
    _M_Test.LocalClass = Ice.createTempClass()
    class LocalClass(object):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_LocalClass)

        __repr__ = __str__

    _M_Test._t_LocalClass = IcePy.defineValue('::Test::LocalClass', LocalClass, -1, (), False, False, None, ())
    LocalClass._ice_type = _M_Test._t_LocalClass

    _M_Test.LocalClass = LocalClass
    del LocalClass

# End of module Test
