# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Single.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice
import IcePy
import builtins as _builtins

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'Single' not in _M_Test.__dict__:
    _M_Test._t_SinglePrx = IcePy.declareProxy('::Test::Single')

if 'SinglePrx' not in _M_Test.__dict__:
    _M_Test.SinglePrx = None
    class SinglePrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new SinglePrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def event(self, i, context=None):
            return _M_Test.Single._op_event.invoke(self, ((i, ), context))

        def eventAsync(self, i, context=None):
            return _M_Test.Single._op_event.invokeAsync(self, ((i, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.SinglePrx.ice_checkedCast(proxy, '::Test::Single', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.SinglePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Single'
    _M_Test._t_SinglePrx = IcePy.defineProxy('::Test::Single', SinglePrx)

    _M_Test.SinglePrx = SinglePrx
    del SinglePrx

    _M_Test.Single = None
    class Single(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Single')

        def ice_id(self, current=None):
            return '::Test::Single'

        @staticmethod
        def ice_staticId():
            return '::Test::Single'

        def event(self, i, current=None):
            raise NotImplementedError("servant method 'event' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_SingleDisp)

        __repr__ = __str__

    Single._op_event = IcePy.Operation('event', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())

    _M_Test.Single = Single
    del Single

# End of module Test
