# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice
import IcePy
import builtins as _builtins

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'StructValue' not in _M_Test.__dict__:
    _M_Test.StructValue = None
    class StructValue(object):
        def __init__(self, firstName='', lastName='', age=0):
            self.firstName = firstName
            self.lastName = lastName
            self.age = age

        def __hash__(self):
            _h = 0
            _h = 5 * _h + _builtins.hash(self.firstName)
            _h = 5 * _h + _builtins.hash(self.lastName)
            _h = 5 * _h + _builtins.hash(self.age)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Test.StructValue):
                return NotImplemented
            else:
                if self.firstName is None or other.firstName is None:
                    if self.firstName != other.firstName:
                        return (-1 if self.firstName is None else 1)
                else:
                    if self.firstName < other.firstName:
                        return -1
                    elif self.firstName > other.firstName:
                        return 1
                if self.lastName is None or other.lastName is None:
                    if self.lastName != other.lastName:
                        return (-1 if self.lastName is None else 1)
                else:
                    if self.lastName < other.lastName:
                        return -1
                    elif self.lastName > other.lastName:
                        return 1
                if self.age is None or other.age is None:
                    if self.age != other.age:
                        return (-1 if self.age is None else 1)
                else:
                    if self.age < other.age:
                        return -1
                    elif self.age > other.age:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_StructValue)

        __repr__ = __str__

    _M_Test._t_StructValue = IcePy.defineStruct('::Test::StructValue', StructValue, (), (
        ('firstName', (), IcePy._t_string),
        ('lastName', (), IcePy._t_string),
        ('age', (), IcePy._t_int)
    ))

    _M_Test.StructValue = StructValue
    del StructValue

if 'Base' not in _M_Test.__dict__:
    _M_Test._t_Base = IcePy.declareValue('::Test::Base')

if 'Base' not in _M_Test.__dict__:
    _M_Test.Base = None
    class Base(Ice.Value):
        def __init__(self, b=''):
            self.b = b

        def ice_id(self):
            return '::Test::Base'

        @staticmethod
        def ice_staticId():
            return '::Test::Base'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Base)

        __repr__ = __str__

    _M_Test._t_Base = IcePy.defineValue('::Test::Base', Base, -1, (), False, None, (('b', (), IcePy._t_string, False, 0),))
    Base._ice_type = _M_Test._t_Base

    _M_Test.Base = Base
    del Base

if 'Extended' not in _M_Test.__dict__:
    _M_Test._t_Extended = IcePy.declareValue('::Test::Extended')

if 'Extended' not in _M_Test.__dict__:
    _M_Test.Extended = None
    class Extended(_M_Test.Base):
        def __init__(self, b='', e=0):
            _M_Test.Base.__init__(self, b)
            self.e = e

        def ice_id(self):
            return '::Test::Extended'

        @staticmethod
        def ice_staticId():
            return '::Test::Extended'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Extended)

        __repr__ = __str__

    _M_Test._t_Extended = IcePy.defineValue('::Test::Extended', Extended, -1, (), False, _M_Test._t_Base, (('e', (), IcePy._t_int, False, 0),))
    Extended._ice_type = _M_Test._t_Extended

    _M_Test.Extended = Extended
    del Extended

# End of module Test
