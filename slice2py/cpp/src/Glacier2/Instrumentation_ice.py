# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Instrumentation.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Ice.Instrumentation_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Ice.Instrumentation
_M_Ice.Instrumentation = Ice.openModule('Ice.Instrumentation')

# Start of module Glacier2
_M_Glacier2 = Ice.openModule('Glacier2')
__name__ = 'Glacier2'

# Start of module Glacier2.Instrumentation
_M_Glacier2.Instrumentation = Ice.openModule('Glacier2.Instrumentation')
__name__ = 'Glacier2.Instrumentation'

if 'SessionObserver' not in _M_Glacier2.Instrumentation.__dict__:
    _M_Glacier2.Instrumentation.SessionObserver = Ice.createTempClass()
    class SessionObserver(_M_Ice.Instrumentation.Observer):
        def __init__(self):
            if Ice.getType(self) == _M_Glacier2.Instrumentation.SessionObserver:
                raise RuntimeError('Glacier2.Instrumentation.SessionObserver is an abstract class')

        def forwarded(self, client):
            """
            Notification of a forwarded request. This also implies removing
            the event from the queue.
            Arguments:
            client -- True if client request, false if server request.
            """
            raise NotImplementedError("method 'forwarded' not implemented")

        def queued(self, client):
            """
            Notification of a queued request.
            Arguments:
            client -- True if client request, false if server request.
            """
            raise NotImplementedError("method 'queued' not implemented")

        def overridden(self, client):
            """
            Notification of a overridden request. This implies adding and
            removing an event to the queue.
            Arguments:
            client -- True if client request, false if server request.
            """
            raise NotImplementedError("method 'overridden' not implemented")

        def routingTableSize(self, delta):
            """
            Notification of a routing table size change.
            Arguments:
            delta -- The size adjustement.
            """
            raise NotImplementedError("method 'routingTableSize' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Glacier2.Instrumentation._t_SessionObserver)

        __repr__ = __str__

    _M_Glacier2.Instrumentation._t_SessionObserver = IcePy.defineValue('::Glacier2::Instrumentation::SessionObserver', SessionObserver, -1, (), False, True, None, ())
    SessionObserver._ice_type = _M_Glacier2.Instrumentation._t_SessionObserver

    _M_Glacier2.Instrumentation.SessionObserver = SessionObserver
    del SessionObserver

if 'ObserverUpdater' not in _M_Glacier2.Instrumentation.__dict__:
    _M_Glacier2.Instrumentation.ObserverUpdater = Ice.createTempClass()
    class ObserverUpdater(object):
        """
        The ObserverUpdater interface is implemented by Glacier2 and an
        instance of this interface is provided on initialization to the
        RouterObserver object.
        This interface can be used by add-ins imlementing the
        RouterObserver interface to update the obsevers of observed
        objects.
        """
        def __init__(self):
            if Ice.getType(self) == _M_Glacier2.Instrumentation.ObserverUpdater:
                raise RuntimeError('Glacier2.Instrumentation.ObserverUpdater is an abstract class')

        def updateSessionObservers(self):
            """
            Update the router sessions.
            When called, this method goes through all the sessions and for
            each sesssion RouterObserver::getSessionObserver is
            called. The implementation of getSessionObserver has the
            possibility to return an updated observer if necessary.
            """
            raise NotImplementedError("method 'updateSessionObservers' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Glacier2.Instrumentation._t_ObserverUpdater)

        __repr__ = __str__

    _M_Glacier2.Instrumentation._t_ObserverUpdater = IcePy.defineValue('::Glacier2::Instrumentation::ObserverUpdater', ObserverUpdater, -1, (), False, True, None, ())
    ObserverUpdater._ice_type = _M_Glacier2.Instrumentation._t_ObserverUpdater

    _M_Glacier2.Instrumentation.ObserverUpdater = ObserverUpdater
    del ObserverUpdater

if 'RouterObserver' not in _M_Glacier2.Instrumentation.__dict__:
    _M_Glacier2.Instrumentation.RouterObserver = Ice.createTempClass()
    class RouterObserver(object):
        """
        The router observer interface used by Glacier2 to obtain and update
        observers for its observeable objects. This interface should be
        implemented by add-ins that wish to observe Glacier2 objects in
        order to collect statistics.
        """
        def __init__(self):
            if Ice.getType(self) == _M_Glacier2.Instrumentation.RouterObserver:
                raise RuntimeError('Glacier2.Instrumentation.RouterObserver is an abstract class')

        def getSessionObserver(self, id, con, routingTableSize, old):
            """
            This method should return an observer for the given session.
            Arguments:
            id -- The id of the session (the user id or the SSL DN).
            con -- The connection associated to the session.
            routingTableSize -- The size of the routing table for this session.
            old -- The previous observer, only set when updating an existing observer.
            """
            raise NotImplementedError("method 'getSessionObserver' not implemented")

        def setObserverUpdater(self, updater):
            """
            Glacier2 calls this method on initialization. The add-in
            implementing this interface can use this object to get Glacier2
            to re-obtain observers for topics and subscribers.
            Arguments:
            updater -- The observer updater object.
            """
            raise NotImplementedError("method 'setObserverUpdater' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Glacier2.Instrumentation._t_RouterObserver)

        __repr__ = __str__

    _M_Glacier2.Instrumentation._t_RouterObserver = IcePy.defineValue('::Glacier2::Instrumentation::RouterObserver', RouterObserver, -1, (), False, True, None, ())
    RouterObserver._ice_type = _M_Glacier2.Instrumentation._t_RouterObserver

    _M_Glacier2.Instrumentation.RouterObserver = RouterObserver
    del RouterObserver

# End of module Glacier2.Instrumentation

__name__ = 'Glacier2'

# End of module Glacier2
