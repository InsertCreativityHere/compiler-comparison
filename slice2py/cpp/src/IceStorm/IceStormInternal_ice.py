# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'IceStormInternal.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice
import IcePy
import builtins as _builtins
import IceStorm.IceStorm_ice
import Election_ice
import Ice.Context_ice
import Ice.OperationMode_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module IceMX
_M_IceMX = Ice.openModule('IceMX')

# Included module IceStorm
_M_IceStorm = Ice.openModule('IceStorm')

# Included module IceStormElection
_M_IceStormElection = Ice.openModule('IceStormElection')

# Start of module IceStorm
__name__ = 'IceStorm'

if 'EventData' not in _M_IceStorm.__dict__:
    _M_IceStorm.EventData = None
    class EventData(object):
        """
        The event data.
        
        Attributes
        ----------
        op : str
            The operation name.
        mode : Ice.OperationMode
            The operation mode.
        data : int[]
            The encoded data for the operation's input parameters.
        context : dict where keys are str and values are str
            The Ice::Current::Context data from the originating request.
        """
        def __init__(self, op='', mode=_M_Ice.OperationMode.Normal, data=None, context=None):
            self.op = op
            self.mode = mode
            self.data = data
            self.context = context

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_IceStorm.EventData):
                return NotImplemented
            else:
                if self.op != other.op:
                    return False
                if self.mode != other.mode:
                    return False
                if self.data != other.data:
                    return False
                if self.context != other.context:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_IceStorm._t_EventData)

        __repr__ = __str__

    _M_IceStorm._t_EventData = IcePy.defineStruct('::IceStorm::EventData', EventData, (), (
        ('op', (), IcePy._t_string),
        ('mode', (), _M_Ice._t_OperationMode),
        ('data', (), _M_Ice._t_ByteSeq),
        ('context', (), _M_Ice._t_Context)
    ))

    _M_IceStorm.EventData = EventData
    del EventData

if '_t_EventDataSeq' not in _M_IceStorm.__dict__:
    _M_IceStorm._t_EventDataSeq = IcePy.defineSequence('::IceStorm::EventDataSeq', (), _M_IceStorm._t_EventData)

if 'TopicLink' not in _M_IceStorm.__dict__:
    _M_IceStorm._t_TopicLinkPrx = IcePy.declareProxy('::IceStorm::TopicLink')

if 'TopicLinkPrx' not in _M_IceStorm.__dict__:
    _M_IceStorm.TopicLinkPrx = None
    class TopicLinkPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new TopicLinkPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def forward(self, events, context=None):
            """
            Forward a sequence of events.
            
            Parameters
            ----------
            events : IceStorm.EventData[]
                The events to forward.
            context : Ice.Context
                The request context for the invocation.
            """
            return _M_IceStorm.TopicLink._op_forward.invoke(self, ((events, ), context))

        def forwardAsync(self, events, context=None):
            """
            Forward a sequence of events.
            
            Parameters
            ----------
            events : IceStorm.EventData[]
                The events to forward.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.TopicLink._op_forward.invokeAsync(self, ((events, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceStorm.TopicLinkPrx.ice_checkedCast(proxy, '::IceStorm::TopicLink', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceStorm.TopicLinkPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceStorm::TopicLink'
    _M_IceStorm._t_TopicLinkPrx = IcePy.defineProxy('::IceStorm::TopicLink', TopicLinkPrx)

    _M_IceStorm.TopicLinkPrx = TopicLinkPrx
    del TopicLinkPrx

    _M_IceStorm.TopicLink = None
    class TopicLink(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceStorm::TopicLink')

        def ice_id(self, current=None):
            return '::IceStorm::TopicLink'

        @staticmethod
        def ice_staticId():
            return '::IceStorm::TopicLink'

        def forward(self, events, current=None):
            """
            Forward a sequence of events.
            
            Parameters
            ----------
            events : IceStorm.EventData[]
                The events to forward.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'forward' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceStorm._t_TopicLinkDisp)

        __repr__ = __str__

    TopicLink._op_forward = IcePy.Operation('forward', Ice.OperationMode.Normal, False, None, (), (((), _M_IceStorm._t_EventDataSeq, False, 0),), (), None, ())

    _M_IceStorm.TopicLink = TopicLink
    del TopicLink

if 'ReapWouldBlock' not in _M_IceStorm.__dict__:
    _M_IceStorm.ReapWouldBlock = None
    class ReapWouldBlock(Ice.UserException):
        """
        Thrown if the reap call would block.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceStorm::ReapWouldBlock'

    _M_IceStorm._t_ReapWouldBlock = IcePy.defineException('::IceStorm::ReapWouldBlock', ReapWouldBlock, (), None, ())
    ReapWouldBlock._ice_type = _M_IceStorm._t_ReapWouldBlock

    _M_IceStorm.ReapWouldBlock = ReapWouldBlock
    del ReapWouldBlock

if 'TopicInternal' not in _M_IceStorm.__dict__:
    _M_IceStorm._t_TopicInternalPrx = IcePy.declareProxy('::IceStorm::TopicInternal')

if 'TopicInternalPrx' not in _M_IceStorm.__dict__:
    _M_IceStorm.TopicInternalPrx = None
    class TopicInternalPrx(_M_IceStorm.TopicPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new TopicInternalPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def getLinkProxy(self, context=None):
            """
            Retrieve a proxy to the TopicLink interface.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (IceStorm.TopicLinkPrx or None)
                The TopicLink for the Topic.
            """
            return _M_IceStorm.TopicInternal._op_getLinkProxy.invoke(self, ((), context))

        def getLinkProxyAsync(self, context=None):
            """
            Retrieve a proxy to the TopicLink interface.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.TopicInternal._op_getLinkProxy.invokeAsync(self, ((), context))

        def reap(self, id, context=None):
            """
            Reap the given identities.
            
            Parameters
            ----------
            id : Ice.Identity[]
                The sequence of identities.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            ReapWouldBlock
                Raised if the reap call would block.
            """
            return _M_IceStorm.TopicInternal._op_reap.invoke(self, ((id, ), context))

        def reapAsync(self, id, context=None):
            """
            Reap the given identities.
            
            Parameters
            ----------
            id : Ice.Identity[]
                The sequence of identities.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.TopicInternal._op_reap.invokeAsync(self, ((id, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceStorm.TopicInternalPrx.ice_checkedCast(proxy, '::IceStorm::TopicInternal', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceStorm.TopicInternalPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceStorm::TopicInternal'
    _M_IceStorm._t_TopicInternalPrx = IcePy.defineProxy('::IceStorm::TopicInternal', TopicInternalPrx)

    _M_IceStorm.TopicInternalPrx = TopicInternalPrx
    del TopicInternalPrx

    _M_IceStorm.TopicInternal = None
    class TopicInternal(_M_IceStorm.Topic):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceStorm::Topic', '::IceStorm::TopicInternal')

        def ice_id(self, current=None):
            return '::IceStorm::TopicInternal'

        @staticmethod
        def ice_staticId():
            return '::IceStorm::TopicInternal'

        def getLinkProxy(self, current=None):
            """
            Retrieve a proxy to the TopicLink interface.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getLinkProxy' not implemented")

        def reap(self, id, current=None):
            """
            Reap the given identities.
            
            Parameters
            ----------
            id : Ice.Identity[]
                The sequence of identities.
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            
            Raises
            ------
            ReapWouldBlock
                Raised if the reap call would block.
            """
            raise NotImplementedError("servant method 'reap' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceStorm._t_TopicInternalDisp)

        __repr__ = __str__

    TopicInternal._op_getLinkProxy = IcePy.Operation('getLinkProxy', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_IceStorm._t_TopicLinkPrx, False, 0), ())
    TopicInternal._op_reap = IcePy.Operation('reap', Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_IdentitySeq, False, 0),), (), None, (_M_IceStorm._t_ReapWouldBlock,))

    _M_IceStorm.TopicInternal = TopicInternal
    del TopicInternal

if 'TopicManagerInternal' not in _M_IceStorm.__dict__:
    _M_IceStorm._t_TopicManagerInternalPrx = IcePy.declareProxy('::IceStorm::TopicManagerInternal')

if 'TopicManagerInternalPrx' not in _M_IceStorm.__dict__:
    _M_IceStorm.TopicManagerInternalPrx = None
    class TopicManagerInternalPrx(_M_IceStorm.TopicManagerPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new TopicManagerInternalPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def getReplicaNode(self, context=None):
            """
            Return the replica node proxy for this topic manager.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (IceStormElection.NodePrx or None)
                The replica proxy, or null if this instance is not replicated.
            """
            return _M_IceStorm.TopicManagerInternal._op_getReplicaNode.invoke(self, ((), context))

        def getReplicaNodeAsync(self, context=None):
            """
            Return the replica node proxy for this topic manager.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStorm.TopicManagerInternal._op_getReplicaNode.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceStorm.TopicManagerInternalPrx.ice_checkedCast(proxy, '::IceStorm::TopicManagerInternal', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceStorm.TopicManagerInternalPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceStorm::TopicManagerInternal'
    _M_IceStorm._t_TopicManagerInternalPrx = IcePy.defineProxy('::IceStorm::TopicManagerInternal', TopicManagerInternalPrx)

    _M_IceStorm.TopicManagerInternalPrx = TopicManagerInternalPrx
    del TopicManagerInternalPrx

    _M_IceStorm.TopicManagerInternal = None
    class TopicManagerInternal(_M_IceStorm.TopicManager):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceStorm::TopicManager', '::IceStorm::TopicManagerInternal')

        def ice_id(self, current=None):
            return '::IceStorm::TopicManagerInternal'

        @staticmethod
        def ice_staticId():
            return '::IceStorm::TopicManagerInternal'

        def getReplicaNode(self, current=None):
            """
            Return the replica node proxy for this topic manager.
            
            Parameters
            ----------
            current : Ice.Current
                The Current object for the dispatch.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the dispatch.
            """
            raise NotImplementedError("servant method 'getReplicaNode' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceStorm._t_TopicManagerInternalDisp)

        __repr__ = __str__

    TopicManagerInternal._op_getReplicaNode = IcePy.Operation('getReplicaNode', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_IceStormElection._t_NodePrx, False, 0), ())

    _M_IceStorm.TopicManagerInternal = TopicManagerInternal
    del TopicManagerInternal

# End of module IceStorm
