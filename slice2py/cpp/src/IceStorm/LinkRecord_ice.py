# -*- coding: utf-8 -*-
# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'LinkRecord.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice
import IcePy
import builtins as _builtins
import Ice.Identity_ice
import IceStormInternal_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module IceMX
_M_IceMX = Ice.openModule('IceMX')

# Included module IceStorm
_M_IceStorm = Ice.openModule('IceStorm')

# Included module IceStormElection
_M_IceStormElection = Ice.openModule('IceStormElection')

# Start of module IceStorm
__name__ = 'IceStorm'

if 'LinkRecord' not in _M_IceStorm.__dict__:
    _M_IceStorm.LinkRecord = None
    class LinkRecord(object):
        """
        Used to store persistent information for Topic federation.
        
        Attributes
        ----------
        obj : (IceStorm.TopicLinkPrx or None)
            The topic link object.
        cost : int
            The cost.
        theTopic : (IceStorm.TopicPrx or None)
            The linked topic for getLinkInfoSeq
        """
        def __init__(self, obj=None, cost=0, theTopic=None):
            self.obj = obj
            self.cost = cost
            self.theTopic = theTopic

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_IceStorm.LinkRecord):
                return NotImplemented
            else:
                if self.obj != other.obj:
                    return False
                if self.cost != other.cost:
                    return False
                if self.theTopic != other.theTopic:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_IceStorm._t_LinkRecord)

        __repr__ = __str__

    _M_IceStorm._t_LinkRecord = IcePy.defineStruct('::IceStorm::LinkRecord', LinkRecord, (), (
        ('obj', (), _M_IceStorm._t_TopicLinkPrx),
        ('cost', (), IcePy._t_int),
        ('theTopic', (), _M_IceStorm._t_TopicPrx)
    ))

    _M_IceStorm.LinkRecord = LinkRecord
    del LinkRecord

# End of module IceStorm
