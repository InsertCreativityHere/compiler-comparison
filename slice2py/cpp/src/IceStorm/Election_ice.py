# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `Election.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins
import Ice.Identity_ice
import Ice.BuiltinSequences_ice
import SubscriberRecord_ice
import LLURecord_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module IceMX
_M_IceMX = Ice.openModule('IceMX')

# Included module IceStorm
_M_IceStorm = Ice.openModule('IceStorm')

# Included module IceStormElection
_M_IceStormElection = Ice.openModule('IceStormElection')

# Start of module IceStormElection
__name__ = 'IceStormElection'

if 'TopicContent' not in _M_IceStormElection.__dict__:
    _M_IceStormElection.TopicContent = None
    class TopicContent(object):
        """
        The contents of topic.
        
        Attributes
        ----------
        id : Ice.Identity
            The topic identity.
        records : IceStorm.SubscriberRecord[]
            The topic subscribers.
        """
        def __init__(self, id=None, records=None):
            self.id = id if id is not None else _M_Ice.Identity()
            self.records = records

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_IceStormElection.TopicContent):
                return NotImplemented
            else:
                if self.id != other.id:
                    return False
                if self.records != other.records:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_IceStormElection._t_TopicContent)

        __repr__ = __str__

    _M_IceStormElection._t_TopicContent = IcePy.defineStruct('::IceStormElection::TopicContent', TopicContent, (), (
        ('id', (), _M_Ice._t_Identity),
        ('records', (), _M_IceStorm._t_SubscriberRecordSeq)
    ))

    _M_IceStormElection.TopicContent = TopicContent
    del TopicContent

if '_t_TopicContentSeq' not in _M_IceStormElection.__dict__:
    _M_IceStormElection._t_TopicContentSeq = IcePy.defineSequence('::IceStormElection::TopicContentSeq', (), _M_IceStormElection._t_TopicContent)

if 'ObserverInconsistencyException' not in _M_IceStormElection.__dict__:
    _M_IceStormElection.ObserverInconsistencyException = None
    class ObserverInconsistencyException(Ice.UserException):
        """
        Thrown if an observer detects an inconsistency.
        
        Attributes
        ----------
        reason : str
            The reason for the inconsistency.
        """
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceStormElection::ObserverInconsistencyException'

    _M_IceStormElection._t_ObserverInconsistencyException = IcePy.defineException('::IceStormElection::ObserverInconsistencyException', ObserverInconsistencyException, (), None, (('reason', (), IcePy._t_string, False, 0),))
    ObserverInconsistencyException._ice_type = _M_IceStormElection._t_ObserverInconsistencyException

    _M_IceStormElection.ObserverInconsistencyException = ObserverInconsistencyException
    del ObserverInconsistencyException

if 'ReplicaObserverPrx' not in _M_IceStormElection.__dict__:
    _M_IceStormElection.ReplicaObserverPrx = None
    class ReplicaObserverPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new ReplicaObserverPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def init(self, llu, content, context=None):
            """
            Initialize the observer.
            
            Parameters
            ----------
            llu : IceStormElection.LogUpdate
                The last log update seen by the master.
            content : IceStormElection.TopicContent[]
                The topic content.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            ObserverInconsistencyException
                Raised if an
                inconsisency was detected.
            """
            return _M_IceStormElection.ReplicaObserver._op_init.invoke(self, ((llu, content), context))

        def initAsync(self, llu, content, context=None):
            """
            Initialize the observer.
            
            Parameters
            ----------
            llu : IceStormElection.LogUpdate
                The last log update seen by the master.
            content : IceStormElection.TopicContent[]
                The topic content.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStormElection.ReplicaObserver._op_init.invokeAsync(self, ((llu, content), context))

        def createTopic(self, llu, name, context=None):
            """
            Create the topic with the given name.
            
            Parameters
            ----------
            llu : IceStormElection.LogUpdate
                The log update token.
            name : str
                The topic name.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            ObserverInconsistencyException
                Raised if an
                inconsisency was detected.
            """
            return _M_IceStormElection.ReplicaObserver._op_createTopic.invoke(self, ((llu, name), context))

        def createTopicAsync(self, llu, name, context=None):
            """
            Create the topic with the given name.
            
            Parameters
            ----------
            llu : IceStormElection.LogUpdate
                The log update token.
            name : str
                The topic name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStormElection.ReplicaObserver._op_createTopic.invokeAsync(self, ((llu, name), context))

        def destroyTopic(self, llu, name, context=None):
            """
            Destroy the topic with the given name.
            
            Parameters
            ----------
            llu : IceStormElection.LogUpdate
                The log update token.
            name : str
                The topic name.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            ObserverInconsistencyException
                Raised if an
                inconsisency was detected.
            """
            return _M_IceStormElection.ReplicaObserver._op_destroyTopic.invoke(self, ((llu, name), context))

        def destroyTopicAsync(self, llu, name, context=None):
            """
            Destroy the topic with the given name.
            
            Parameters
            ----------
            llu : IceStormElection.LogUpdate
                The log update token.
            name : str
                The topic name.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStormElection.ReplicaObserver._op_destroyTopic.invokeAsync(self, ((llu, name), context))

        def addSubscriber(self, llu, topic, record, context=None):
            """
            Add a subscriber to a topic.
            
            Parameters
            ----------
            llu : IceStormElection.LogUpdate
                The log update token.
            topic : str
                The topic name to which to add the subscriber.
            record : IceStorm.SubscriberRecord
                The subscriber information.
            context : Ice.Context
                The request context for the invocation.
            
            Raises
            ------
            ObserverInconsistencyException
                Raised if an
                inconsisency was detected.
            """
            return _M_IceStormElection.ReplicaObserver._op_addSubscriber.invoke(self, ((llu, topic, record), context))

        def addSubscriberAsync(self, llu, topic, record, context=None):
            """
            Add a subscriber to a topic.
            
            Parameters
            ----------
            llu : IceStormElection.LogUpdate
                The log update token.
            topic : str
                The topic name to which to add the subscriber.
            record : IceStorm.SubscriberRecord
                The subscriber information.
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceStormElection.ReplicaObserver._op_addSubscriber.invokeAsync(self, ((llu, topic, record), context))

        def removeSubscriber(self, llu, topic, subscribers, context=None):
            """
            Remove a subscriber from a topic.
            
            Parameters
            ----------
            llu : IceStormElection.LogUpdate
                The log update token.
            topic : str
            