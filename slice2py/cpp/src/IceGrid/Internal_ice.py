# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Internal.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins
import Ice.Identity_ice
import Ice.BuiltinSequences_ice
import Ice.Process_ice
import Glacier2.Session_ice
import IceGrid.Admin_ice
import IceGrid.Registry_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Glacier2
_M_Glacier2 = Ice.openModule('Glacier2')

# Included module IceGrid
_M_IceGrid = Ice.openModule('IceGrid')

# Start of module IceGrid
__name__ = 'IceGrid'

if 'InternalDbEnvDescriptor' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_InternalDbEnvDescriptor = IcePy.declareValue('::IceGrid::InternalDbEnvDescriptor')

if 'InternalDbEnvDescriptor' not in _M_IceGrid.__dict__:
    _M_IceGrid.InternalDbEnvDescriptor = None
    class InternalDbEnvDescriptor(Ice.Value):
        def __init__(self, name='', properties=None):
            self.name = name
            self.properties = properties

        def ice_id(self):
            return '::IceGrid::InternalDbEnvDescriptor'

        @staticmethod
        def ice_staticId():
            return '::IceGrid::InternalDbEnvDescriptor'

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_InternalDbEnvDescriptor)

        __repr__ = __str__

    _M_IceGrid._t_InternalDbEnvDescriptor = IcePy.defineValue('::IceGrid::InternalDbEnvDescriptor', InternalDbEnvDescriptor, -1, (), False, None, (
        ('name', (), IcePy._t_string, False, 0),
        ('properties', (), _M_IceGrid._t_PropertyDescriptorSeq, False, 0)
    ))
    InternalDbEnvDescriptor._ice_type = _M_IceGrid._t_InternalDbEnvDescriptor

    _M_IceGrid.InternalDbEnvDescriptor = InternalDbEnvDescriptor
    del InternalDbEnvDescriptor

if '_t_InternalDbEnvDescriptorSeq' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_InternalDbEnvDescriptorSeq = IcePy.defineSequence('::IceGrid::InternalDbEnvDescriptorSeq', (), _M_IceGrid._t_InternalDbEnvDescriptor)

if 'InternalAdapterDescriptor' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_InternalAdapterDescriptor = IcePy.declareValue('::IceGrid::InternalAdapterDescriptor')

if 'InternalAdapterDescriptor' not in _M_IceGrid.__dict__:
    _M_IceGrid.InternalAdapterDescriptor = None
    class InternalAdapterDescriptor(Ice.Value):
        def __init__(self, id='', serverLifetime=False):
            self.id = id
            self.serverLifetime = serverLifetime

        def ice_id(self):
            return '::IceGrid::InternalAdapterDescriptor'

        @staticmethod
        def ice_staticId():
            return '::IceGrid::InternalAdapterDescriptor'

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_InternalAdapterDescriptor)

        __repr__ = __str__

    _M_IceGrid._t_InternalAdapterDescriptor = IcePy.defineValue('::IceGrid::InternalAdapterDescriptor', InternalAdapterDescriptor, -1, (), False, None, (
        ('id', (), IcePy._t_string, False, 0),
        ('serverLifetime', (), IcePy._t_bool, False, 0)
    ))
    InternalAdapterDescriptor._ice_type = _M_IceGrid._t_InternalAdapterDescriptor

    _M_IceGrid.InternalAdapterDescriptor = InternalAdapterDescriptor
    del InternalAdapterDescriptor

if '_t_InternalAdapterDescriptorSeq' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_InternalAdapterDescriptorSeq = IcePy.defineSequence('::IceGrid::InternalAdapterDescriptorSeq', (), _M_IceGrid._t_InternalAdapterDescriptor)

if '_t_PropertyDescriptorSeqDict' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_PropertyDescriptorSeqDict = IcePy.defineDictionary('::IceGrid::PropertyDescriptorSeqDict', (), IcePy._t_string, _M_IceGrid._t_PropertyDescriptorSeq)

if 'InternalServerDescriptor' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_InternalServerDescriptor = IcePy.declareValue('::IceGrid::InternalServerDescriptor')

if 'InternalServerDescriptor' not in _M_IceGrid.__dict__:
    _M_IceGrid.InternalServerDescriptor = None
    class InternalServerDescriptor(Ice.Value):
        def __init__(self, id='', application='', uuid='', revision=0, sessionId='', exe='', pwd='', user='', activation='', activationTimeout='', deactivationTimeout='', processRegistered=False, options=None, envs=None, logs=None, adapters=None, dbEnvs=None, properties=None, services=None):
            self.id = id
            self.application = application
            self.uuid = uuid
            self.revision = revision
            self.sessionId = sessionId
            self.exe = exe
            self.pwd = pwd
            self.user = user
            self.activation = activation
            self.activationTimeout = activationTimeout
            self.deactivationTimeout = deactivationTimeout
            self.processRegistered = processRegistered
            self.options = options
            self.envs = envs
            self.logs = logs
            self.adapters = adapters
            self.dbEnvs = dbEnvs
            self.properties = properties
            self.services = services

        def ice_id(self):
            return '::IceGrid::InternalServerDescriptor'

        @staticmethod
        def ice_staticId():
            return '::IceGrid::InternalServerDescriptor'

        def __str__(self):
            return IcePy.stringify(self, _M_IceGrid._t_InternalServerDescriptor)

        __repr__ = __str__

    _M_IceGrid._t_InternalServerDescriptor = IcePy.defineValue('::IceGrid::InternalServerDescriptor', InternalServerDescriptor, -1, (), False, None, (
        ('id', (), IcePy._t_string, False, 0),
        ('application', (), IcePy._t_string, False, 0),
        ('uuid', (), IcePy._t_string, False, 0),
        ('revision', (), IcePy._t_int, False, 0),
        ('sessionId', (), IcePy._t_string, False, 0),
        ('exe', (), IcePy._t_string, False, 0),
        ('pwd', (), IcePy._t_string, False, 0),
        ('user', (), IcePy._t_string, False, 0),
        ('activation', (), IcePy._t_string, False, 0),
        ('activationTimeout', (), IcePy._t_string, False, 0),
        ('deactivationTimeout', (), IcePy._t_string, False, 0),
        ('processRegistered', (), IcePy._t_bool, False, 0),
        ('options', (), _M_Ice._t_StringSeq, False, 0),
        ('envs', (), _M_Ice._t_StringSeq, False, 0),
        ('logs', (), _M_Ice._t_StringSeq, False, 0),
        ('adapters', (), _M_IceGrid._t_InternalAdapterDescriptorSeq, False, 0),
        ('dbEnvs', (), _M_IceGrid._t_InternalDbEnvDescriptorSeq, False, 0),
        ('properties', (), _M_IceGrid._t_PropertyDescriptorSeqDict, False, 0),
        ('services', (), _M_Ice._t_StringSeq, True, 1)
    ))
    InternalServerDescriptor._ice_type = _M_IceGrid._t_InternalServerDescriptor

    _M_IceGrid.InternalServerDescriptor = InternalServerDescriptor
    del InternalServerDescriptor

if 'AdapterActiveException' not in _M_IceGrid.__dict__:
    _M_IceGrid.AdapterActiveException = None
    class AdapterActiveException(Ice.UserException):
        """
        This exception is raised if an adapter is active.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceGrid::AdapterActiveException'

    _M_IceGrid._t_AdapterActiveException = IcePy.defineException('::IceGrid::AdapterActiveException', AdapterActiveException, (), None, ())
    AdapterActiveException._ice_type = _M_IceGrid._t_AdapterActiveException

    _M_IceGrid.AdapterActiveException = AdapterActiveException
    del AdapterActiveException

if 'AdapterNotActiveException' not in _M_IceGrid.__dict__:
    _M_IceGrid.AdapterNotActiveException = None
    class AdapterNotActiveException(Ice.UserException):
        def __init__(self, activatable=False):
            self.activatable = activatable

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceGrid::AdapterNotActiveException'

    _M_IceGrid._t_AdapterNotActiveException = IcePy.defineException('::IceGrid::AdapterNotActiveException', AdapterNotActiveException, (), None, (('activatable', (), IcePy._t_bool, False, 0),))
    AdapterNotActiveException._ice_type = _M_IceGrid._t_AdapterNotActiveException

    _M_IceGrid.AdapterNotActiveException = AdapterNotActiveException
    del AdapterNotActiveException

if 'Adapter' not in _M_IceGrid.__dict__:
    _M_IceGrid._t_AdapterPrx = IcePy.declareProxy('::IceGrid::Adapter')

if 'AdapterPrx' not in _M_IceGrid.__dict__:
    _M_IceGrid.AdapterPrx = None
    class AdapterPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new AdapterPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def activate(self, context=None):
            """
            Activate this adapter. If this adapter can be activated, this will activate the adapter and return the direct
            proxy of the adapter once it's active. If this adapter can be activated on demand, this will return 0 if the
            adapter is inactive or the adapter direct proxy it's active.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            """
            return _M_IceGrid.Adapter._op_activate.invoke(self, ((), context))

        def activateAsync(self, context=None):
            """
            Activate this adapter. If this adapter can be activated, this will activate the adapter and return the direct
            proxy of the adapter once it's active. If this adapter can be activated on demand, this will return 0 if the
            adapter is inactive or the adapter direct proxy it's active.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Adapter._op_activate.invokeAsync(self, ((), context))

        def getDirectProxy(self, context=None):
            """
            Get the adapter direct proxy. The adapter direct proxy is a proxy created with the object adapter. The proxy
            contains the last known adapter endpoints.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            (Ice.ObjectPrx or None)
                A direct proxy containing the last known adapter endpoints if the adapter is already active.
            """
            return _M_IceGrid.Adapter._op_getDirectProxy.invoke(self, ((), context))

        def getDirectProxyAsync(self, context=None):
            """
            Get the adapter direct proxy. The adapter direct proxy is a proxy created with the object adapter. The proxy
            contains the last known adapter endpoints.
            
            Parameters
            ----------
            context : Ice.Context
                The request context for the invocation.
            
            Returns
            -------
            Ice.Future
                A future object that is completed with the result of the invocation.
            """
            return _M_IceGrid.Adapter._op_getDirectProxy.invokeAsync(self, ((), context))

        def setDirectProxy(self, proxy, context=None):
            """
            Set the direct proxy for this adapter.
            
            Parameters
            ----------
            