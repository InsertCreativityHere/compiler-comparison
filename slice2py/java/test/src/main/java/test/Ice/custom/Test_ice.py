# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Ice.BuiltinSequences_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'C' not in _M_Test.__dict__:
    _M_Test.C = Ice.createTempClass()
    class C(Ice.Value):
        def __init__(self):
            pass

        def ice_id(self):
            return '::Test::C'

        @staticmethod
        def ice_staticId():
            return '::Test::C'

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_C)

        __repr__ = __str__

    _M_Test._t_C = IcePy.defineValue('::Test::C', C, -1, (), False, False, None, ())
    C._ice_type = _M_Test._t_C

    _M_Test.C = C
    del C

if '_t_CSeq' not in _M_Test.__dict__:
    _M_Test._t_CSeq = IcePy.defineSequence('::Test::CSeq', (), _M_Test._t_C)

if '_t_CArray' not in _M_Test.__dict__:
    _M_Test._t_CArray = IcePy.defineSequence('::Test::CArray', (), _M_Test._t_C)

if '_t_CList' not in _M_Test.__dict__:
    _M_Test._t_CList = IcePy.defineSequence('::Test::CList', (), _M_Test._t_C)

if '_t_BoolSeq' not in _M_Test.__dict__:
    _M_Test._t_BoolSeq = IcePy.defineSequence('::Test::BoolSeq', (), IcePy._t_bool)

if '_t_ByteSeq' not in _M_Test.__dict__:
    _M_Test._t_ByteSeq = IcePy.defineSequence('::Test::ByteSeq', (), IcePy._t_byte)

if '_t_ShortSeq' not in _M_Test.__dict__:
    _M_Test._t_ShortSeq = IcePy.defineSequence('::Test::ShortSeq', (), IcePy._t_short)

if '_t_IntSeq' not in _M_Test.__dict__:
    _M_Test._t_IntSeq = IcePy.defineSequence('::Test::IntSeq', (), IcePy._t_int)

if '_t_LongSeq' not in _M_Test.__dict__:
    _M_Test._t_LongSeq = IcePy.defineSequence('::Test::LongSeq', (), IcePy._t_long)

if '_t_FloatSeq' not in _M_Test.__dict__:
    _M_Test._t_FloatSeq = IcePy.defineSequence('::Test::FloatSeq', (), IcePy._t_float)

if '_t_DoubleSeq' not in _M_Test.__dict__:
    _M_Test._t_DoubleSeq = IcePy.defineSequence('::Test::DoubleSeq', (), IcePy._t_double)

if '_t_StringSeq' not in _M_Test.__dict__:
    _M_Test._t_StringSeq = IcePy.defineSequence('::Test::StringSeq', (), IcePy._t_string)

if '_t_ByteBuffer' not in _M_Test.__dict__:
    _M_Test._t_ByteBuffer = IcePy.defineSequence('::Test::ByteBuffer', (), IcePy._t_byte)

if '_t_ShortBuffer' not in _M_Test.__dict__:
    _M_Test._t_ShortBuffer = IcePy.defineSequence('::Test::ShortBuffer', (), IcePy._t_short)

if '_t_IntBuffer' not in _M_Test.__dict__:
    _M_Test._t_IntBuffer = IcePy.defineSequence('::Test::IntBuffer', (), IcePy._t_int)

if '_t_LongBuffer' not in _M_Test.__dict__:
    _M_Test._t_LongBuffer = IcePy.defineSequence('::Test::LongBuffer', (), IcePy._t_long)

if '_t_FloatBuffer' not in _M_Test.__dict__:
    _M_Test._t_FloatBuffer = IcePy.defineSequence('::Test::FloatBuffer', (), IcePy._t_float)

if '_t_DoubleBuffer' not in _M_Test.__dict__:
    _M_Test._t_DoubleBuffer = IcePy.defineSequence('::Test::DoubleBuffer', (), IcePy._t_double)

if 'E' not in _M_Test.__dict__:
    _M_Test.E = Ice.createTempClass()
    class E(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    E.E1 = E("E1", 0)
    E.E2 = E("E2", 1)
    E.E3 = E("E3", 2)
    E._enumerators = { 0:E.E1, 1:E.E2, 2:E.E3 }

    _M_Test._t_E = IcePy.defineEnum('::Test::E', E, (), E._enumerators)

    _M_Test.E = E
    del E

if '_t_ESeq' not in _M_Test.__dict__:
    _M_Test._t_ESeq = IcePy.defineSequence('::Test::ESeq', (), _M_Test._t_E)

if 'S' not in _M_Test.__dict__:
    _M_Test.S = Ice.createTempClass()
    class S(object):
        def __init__(self, en=_M_Test.E.E1):
            self.en = en

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.en)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Test.S):
                return NotImplemented
            else:
                if self.en is None or other.en is None:
                    if self.en != other.en:
                        return (-1 if self.en is None else 1)
                else:
                    if self.en < other.en:
                        return -1
                    elif self.en > other.en:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_S)

        __repr__ = __str__

    _M_Test._t_S = IcePy.defineStruct('::Test::S', S, (), (('en', (), _M_Test._t_E),))

    _M_Test.S = S
    del S

if '_t_SSeq' not in _M_Test.__dict__:
    _M_Test._t_SSeq = IcePy.defineSequence('::Test::SSeq', (), _M_Test._t_S)

if '_t_D' not in _M_Test.__dict__:
    _M_Test._t_D = IcePy.defineDictionary('::Test::D', (), IcePy._t_int, IcePy._t_string)

if '_t_DSeq' not in _M_Test.__dict__:
    _M_Test._t_DSeq = IcePy.defineSequence('::Test::DSeq', (), _M_Test._t_D)

if '_t_StringSeqSeq' not in _M_Test.__dict__:
    _M_Test._t_StringSeqSeq = IcePy.defineSequence('::Test::StringSeqSeq', (), _M_Test._t_StringSeq)

_M_Test._t_TestIntf = IcePy.defineValue('::Test::TestIntf', Ice.Value, -1, (), False, True, None, ())

if 'TestIntfPrx' not in _M_Test.__dict__:
    _M_Test.TestIntfPrx = Ice.createTempClass()
    class TestIntfPrx(Ice.ObjectPrx):

        def opCSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opCSeq.invoke(self, ((inSeq, ), context))

        def opCSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opCSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opCSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opCSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opCSeq(self, _r):
            return _M_Test.TestIntf._op_opCSeq.end(self, _r)

        def opCArray(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opCArray.invoke(self, ((inSeq, ), context))

        def opCArrayAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opCArray.invokeAsync(self, ((inSeq, ), context))

        def begin_opCArray(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opCArray.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opCArray(self, _r):
            return _M_Test.TestIntf._op_opCArray.end(self, _r)

        def opCList(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opCList.invoke(self, ((inSeq, ), context))

        def opCListAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opCList.invokeAsync(self, ((inSeq, ), context))

        def begin_opCList(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opCList.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opCList(self, _r):
            return _M_Test.TestIntf._op_opCList.end(self, _r)

        def opBoolSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opBoolSeq.invoke(self, ((inSeq, ), context))

        def opBoolSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opBoolSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opBoolSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opBoolSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opBoolSeq(self, _r):
            return _M_Test.TestIntf._op_opBoolSeq.end(self, _r)

        def opByteSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opByteSeq.invoke(self, ((inSeq, ), context))

        def opByteSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opByteSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opByteSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opByteSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opByteSeq(self, _r):
            return _M_Test.TestIntf._op_opByteSeq.end(self, _r)

        def opShortSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opShortSeq.invoke(self, ((inSeq, ), context))

        def opShortSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opShortSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opShortSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opShortSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opShortSeq(self, _r):
            return _M_Test.TestIntf._op_opShortSeq.end(self, _r)

        def opIntSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opIntSeq.invoke(self, ((inSeq, ), context))

        def opIntSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opIntSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opIntSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opIntSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opIntSeq(self, _r):
            return _M_Test.TestIntf._op_opIntSeq.end(self, _r)

        def opLongSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opLongSeq.invoke(self, ((inSeq, ), context))

        def opLongSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opLongSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opLongSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opLongSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opLongSeq(self, _r):
            return _M_Test.TestIntf._op_opLongSeq.end(self, _r)

        def opFloatSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opFloatSeq.invoke(self, ((inSeq, ), context))

        def opFloatSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opFloatSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opFloatSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opFloatSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opFloatSeq(self, _r):
            return _M_Test.TestIntf._op_opFloatSeq.end(self, _r)

        def opDoubleSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opDoubleSeq.invoke(self, ((inSeq, ), context))

        def opDoubleSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opDoubleSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opDoubleSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opDoubleSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opDoubleSeq(self, _r):
            return _M_Test.TestIntf._op_opDoubleSeq.end(self, _r)

        def opStringSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opStringSeq.invoke(self, ((inSeq, ), context))

        def opStringSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opStringSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opStringSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opStringSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opStringSeq(self, _r):
            return _M_Test.TestIntf._op_opStringSeq.end(self, _r)

        def opESeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opESeq.invoke(self, ((inSeq, ), context))

        def opESeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opESeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opESeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opESeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opESeq(self, _r):
            return _M_Test.TestIntf._op_opESeq.end(self, _r)

        def opSSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opSSeq.invoke(self, ((inSeq, ), context))

        def opSSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opSSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opSSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opSSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opSSeq(self, _r):
            return _M_Test.TestIntf._op_opSSeq.end(self, _r)

        def opDSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opDSeq.invoke(self, ((inSeq, ), context))

        def opDSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opDSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opDSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opDSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opDSeq(self, _r):
            return _M_Test.TestIntf._op_opDSeq.end(self, _r)

        def opStringSeqSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opStringSeqSeq.invoke(self, ((inSeq, ), context))

        def opStringSeqSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opStringSeqSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opStringSeqSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opStringSeqSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opStringSeqSeq(self, _r):
            return _M_Test.TestIntf._op_opStringSeqSeq.end(self, _r)

        def opByteBufferSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opByteBufferSeq.invoke(self, ((inSeq, ), context))

        def opByteBufferSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opByteBufferSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opByteBufferSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opByteBufferSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opByteBufferSeq(self, _r):
            return _M_Test.TestIntf._op_opByteBufferSeq.end(self, _r)

        def opShortBufferSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opShortBufferSeq.invoke(self, ((inSeq, ), context))

        def opShortBufferSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opShortBufferSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opShortBufferSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opShortBufferSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opShortBufferSeq(self, _r):
            return _M_Test.TestIntf._op_opShortBufferSeq.end(self, _r)

        def opIntBufferSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opIntBufferSeq.invoke(self, ((inSeq, ), context))

        def opIntBufferSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opIntBufferSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opIntBufferSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opIntBufferSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opIntBufferSeq(self, _r):
            return _M_Test.TestIntf._op_opIntBufferSeq.end(self, _r)

        def opLongBufferSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opLongBufferSeq.invoke(self, ((inSeq, ), context))

        def opLongBufferSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opLongBufferSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opLongBufferSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opLongBufferSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opLongBufferSeq(self, _r):
            return _M_Test.TestIntf._op_opLongBufferSeq.end(self, _r)

        def opFloatBufferSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opFloatBufferSeq.invoke(self, ((inSeq, ), context))

        def opFloatBufferSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opFloatBufferSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opFloatBufferSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opFloatBufferSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opFloatBufferSeq(self, _r):
            return _M_Test.TestIntf._op_opFloatBufferSeq.end(self, _r)

        def opDoubleBufferSeq(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opDoubleBufferSeq.invoke(self, ((inSeq, ), context))

        def opDoubleBufferSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opDoubleBufferSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opDoubleBufferSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opDoubleBufferSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opDoubleBufferSeq(self, _r):
            return _M_Test.TestIntf._op_opDoubleBufferSeq.end(self, _r)

        def opOptCSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptCSeq.invoke(self, ((inSeq, ), context))

        def opOptCSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptCSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptCSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptCSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptCSeq(self, _r):
            return _M_Test.TestIntf._op_opOptCSeq.end(self, _r)

        def opOptCArray(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptCArray.invoke(self, ((inSeq, ), context))

        def opOptCArrayAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptCArray.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptCArray(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptCArray.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptCArray(self, _r):
            return _M_Test.TestIntf._op_opOptCArray.end(self, _r)

        def opOptCList(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptCList.invoke(self, ((inSeq, ), context))

        def opOptCListAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptCList.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptCList(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptCList.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptCList(self, _r):
            return _M_Test.TestIntf._op_opOptCList.end(self, _r)

        def opOptBoolSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptBoolSeq.invoke(self, ((inSeq, ), context))

        def opOptBoolSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptBoolSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptBoolSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptBoolSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptBoolSeq(self, _r):
            return _M_Test.TestIntf._op_opOptBoolSeq.end(self, _r)

        def opOptByteSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptByteSeq.invoke(self, ((inSeq, ), context))

        def opOptByteSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptByteSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptByteSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptByteSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptByteSeq(self, _r):
            return _M_Test.TestIntf._op_opOptByteSeq.end(self, _r)

        def opOptShortSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptShortSeq.invoke(self, ((inSeq, ), context))

        def opOptShortSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptShortSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptShortSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptShortSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptShortSeq(self, _r):
            return _M_Test.TestIntf._op_opOptShortSeq.end(self, _r)

        def opOptIntSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptIntSeq.invoke(self, ((inSeq, ), context))

        def opOptIntSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptIntSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptIntSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptIntSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptIntSeq(self, _r):
            return _M_Test.TestIntf._op_opOptIntSeq.end(self, _r)

        def opOptLongSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptLongSeq.invoke(self, ((inSeq, ), context))

        def opOptLongSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptLongSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptLongSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptLongSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptLongSeq(self, _r):
            return _M_Test.TestIntf._op_opOptLongSeq.end(self, _r)

        def opOptFloatSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptFloatSeq.invoke(self, ((inSeq, ), context))

        def opOptFloatSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptFloatSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptFloatSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptFloatSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptFloatSeq(self, _r):
            return _M_Test.TestIntf._op_opOptFloatSeq.end(self, _r)

        def opOptDoubleSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptDoubleSeq.invoke(self, ((inSeq, ), context))

        def opOptDoubleSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptDoubleSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptDoubleSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptDoubleSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptDoubleSeq(self, _r):
            return _M_Test.TestIntf._op_opOptDoubleSeq.end(self, _r)

        def opOptStringSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptStringSeq.invoke(self, ((inSeq, ), context))

        def opOptStringSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptStringSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptStringSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptStringSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptStringSeq(self, _r):
            return _M_Test.TestIntf._op_opOptStringSeq.end(self, _r)

        def opOptESeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptESeq.invoke(self, ((inSeq, ), context))

        def opOptESeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptESeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptESeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptESeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptESeq(self, _r):
            return _M_Test.TestIntf._op_opOptESeq.end(self, _r)

        def opOptSSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptSSeq.invoke(self, ((inSeq, ), context))

        def opOptSSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptSSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptSSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptSSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptSSeq(self, _r):
            return _M_Test.TestIntf._op_opOptSSeq.end(self, _r)

        def opOptDSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptDSeq.invoke(self, ((inSeq, ), context))

        def opOptDSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptDSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptDSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptDSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptDSeq(self, _r):
            return _M_Test.TestIntf._op_opOptDSeq.end(self, _r)

        def opOptStringSeqSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptStringSeqSeq.invoke(self, ((inSeq, ), context))

        def opOptStringSeqSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptStringSeqSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptStringSeqSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptStringSeqSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptStringSeqSeq(self, _r):
            return _M_Test.TestIntf._op_opOptStringSeqSeq.end(self, _r)

        def opOptByteBufferSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptByteBufferSeq.invoke(self, ((inSeq, ), context))

        def opOptByteBufferSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptByteBufferSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptByteBufferSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptByteBufferSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptByteBufferSeq(self, _r):
            return _M_Test.TestIntf._op_opOptByteBufferSeq.end(self, _r)

        def opOptShortBufferSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptShortBufferSeq.invoke(self, ((inSeq, ), context))

        def opOptShortBufferSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptShortBufferSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptShortBufferSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptShortBufferSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptShortBufferSeq(self, _r):
            return _M_Test.TestIntf._op_opOptShortBufferSeq.end(self, _r)

        def opOptIntBufferSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptIntBufferSeq.invoke(self, ((inSeq, ), context))

        def opOptIntBufferSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptIntBufferSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptIntBufferSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptIntBufferSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptIntBufferSeq(self, _r):
            return _M_Test.TestIntf._op_opOptIntBufferSeq.end(self, _r)

        def opOptLongBufferSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptLongBufferSeq.invoke(self, ((inSeq, ), context))

        def opOptLongBufferSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptLongBufferSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptLongBufferSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptLongBufferSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptLongBufferSeq(self, _r):
            return _M_Test.TestIntf._op_opOptLongBufferSeq.end(self, _r)

        def opOptFloatBufferSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptFloatBufferSeq.invoke(self, ((inSeq, ), context))

        def opOptFloatBufferSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptFloatBufferSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptFloatBufferSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptFloatBufferSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptFloatBufferSeq(self, _r):
            return _M_Test.TestIntf._op_opOptFloatBufferSeq.end(self, _r)

        def opOptDoubleBufferSeq(self, inSeq=Ice.Unset, context=None):
            return _M_Test.TestIntf._op_opOptDoubleBufferSeq.invoke(self, ((inSeq, ), context))

        def opOptDoubleBufferSeqAsync(self, inSeq, context=None):
            return _M_Test.TestIntf._op_opOptDoubleBufferSeq.invokeAsync(self, ((inSeq, ), context))

        def begin_opOptDoubleBufferSeq(self, inSeq, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_opOptDoubleBufferSeq.begin(self, ((inSeq, ), _response, _ex, _sent, context))

        def end_opOptDoubleBufferSeq(self, _r):
            return _M_Test.TestIntf._op_opOptDoubleBufferSeq.end(self, _r)

        def shutdown(self, context=None):
            return _M_Test.TestIntf._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.TestIntf._op_shutdown.invokeAsync(self, ((), context))

        def begin_shutdown(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.TestIntf._op_shutdown.begin(self, ((), _response, _ex, _sent, context))

        def end_shutdown(self, _r):
            return _M_Test.TestIntf._op_shutdown.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.TestIntfPrx.ice_checkedCast(proxy, '::Test::TestIntf', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.TestIntfPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'
    _M_Test._t_TestIntfPrx = IcePy.defineProxy('::Test::TestIntf', TestIntfPrx)

    _M_Test.TestIntfPrx = TestIntfPrx
    del TestIntfPrx

    _M_Test.TestIntf = Ice.createTempClass()
    class TestIntf(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::TestIntf')

        def ice_id(self, current=None):
            return '::Test::TestIntf'

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'

        def opCSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opCSeq' not implemented")

        def opCArray(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opCArray' not implemented")

        def opCList(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opCList' not implemented")

        def opBoolSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opBoolSeq' not implemented")

        def opByteSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opByteSeq' not implemented")

        def opShortSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opShortSeq' not implemented")

        def opIntSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opIntSeq' not implemented")

        def opLongSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opLongSeq' not implemented")

        def opFloatSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opFloatSeq' not implemented")

        def opDoubleSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opDoubleSeq' not implemented")

        def opStringSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opStringSeq' not implemented")

        def opESeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opESeq' not implemented")

        def opSSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opSSeq' not implemented")

        def opDSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opDSeq' not implemented")

        def opStringSeqSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opStringSeqSeq' not implemented")

        def opByteBufferSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opByteBufferSeq' not implemented")

        def opShortBufferSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opShortBufferSeq' not implemented")

        def opIntBufferSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opIntBufferSeq' not implemented")

        def opLongBufferSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opLongBufferSeq' not implemented")

        def opFloatBufferSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opFloatBufferSeq' not implemented")

        def opDoubleBufferSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opDoubleBufferSeq' not implemented")

        def opOptCSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptCSeq' not implemented")

        def opOptCArray(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptCArray' not implemented")

        def opOptCList(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptCList' not implemented")

        def opOptBoolSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptBoolSeq' not implemented")

        def opOptByteSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptByteSeq' not implemented")

        def opOptShortSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptShortSeq' not implemented")

        def opOptIntSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptIntSeq' not implemented")

        def opOptLongSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptLongSeq' not implemented")

        def opOptFloatSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptFloatSeq' not implemented")

        def opOptDoubleSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptDoubleSeq' not implemented")

        def opOptStringSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptStringSeq' not implemented")

        def opOptESeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptESeq' not implemented")

        def opOptSSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptSSeq' not implemented")

        def opOptDSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptDSeq' not implemented")

        def opOptStringSeqSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptStringSeqSeq' not implemented")

        def opOptByteBufferSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptByteBufferSeq' not implemented")

        def opOptShortBufferSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptShortBufferSeq' not implemented")

        def opOptIntBufferSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptIntBufferSeq' not implemented")

        def opOptLongBufferSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptLongBufferSeq' not implemented")

        def opOptFloatBufferSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptFloatBufferSeq' not implemented")

        def opOptDoubleBufferSeq(self, inSeq, current=None):
            raise NotImplementedError("servant method 'opOptDoubleBufferSeq' not implemented")

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_TestIntfDisp)

        __repr__ = __str__

    _M_Test._t_TestIntfDisp = IcePy.defineClass('::Test::TestIntf', TestIntf, (), None, ())
    TestIntf._ice_type = _M_Test._t_TestIntfDisp

    TestIntf._op_opCSeq = IcePy.Operation('opCSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_CSeq, False, 0),), (((), _M_Test._t_CSeq, False, 0),), ((), _M_Test._t_CSeq, False, 0), ())
    TestIntf._op_opCArray = IcePy.Operation('opCArray', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_CArray, False, 0),), (((), _M_Test._t_CArray, False, 0),), ((), _M_Test._t_CArray, False, 0), ())
    TestIntf._op_opCList = IcePy.Operation('opCList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_CList, False, 0),), (((), _M_Test._t_CList, False, 0),), ((), _M_Test._t_CList, False, 0), ())
    TestIntf._op_opBoolSeq = IcePy.Operation('opBoolSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_BoolSeq, False, 0),), (((), _M_Test._t_BoolSeq, False, 0),), ((), _M_Test._t_BoolSeq, False, 0), ())
    TestIntf._op_opByteSeq = IcePy.Operation('opByteSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ByteSeq, False, 0),), (((), _M_Test._t_ByteSeq, False, 0),), ((), _M_Test._t_ByteSeq, False, 0), ())
    TestIntf._op_opShortSeq = IcePy.Operation('opShortSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ShortSeq, False, 0),), (((), _M_Test._t_ShortSeq, False, 0),), ((), _M_Test._t_ShortSeq, False, 0), ())
    TestIntf._op_opIntSeq = IcePy.Operation('opIntSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_IntSeq, False, 0),), (((), _M_Test._t_IntSeq, False, 0),), ((), _M_Test._t_IntSeq, False, 0), ())
    TestIntf._op_opLongSeq = IcePy.Operation('opLongSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_LongSeq, False, 0),), (((), _M_Test._t_LongSeq, False, 0),), ((), _M_Test._t_LongSeq, False, 0), ())
    TestIntf._op_opFloatSeq = IcePy.Operation('opFloatSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_FloatSeq, False, 0),), (((), _M_Test._t_FloatSeq, False, 0),), ((), _M_Test._t_FloatSeq, False, 0), ())
    TestIntf._op_opDoubleSeq = IcePy.Operation('opDoubleSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_DoubleSeq, False, 0),), (((), _M_Test._t_DoubleSeq, False, 0),), ((), _M_Test._t_DoubleSeq, False, 0), ())
    TestIntf._op_opStringSeq = IcePy.Operation('opStringSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringSeq, False, 0),), (((), _M_Test._t_StringSeq, False, 0),), ((), _M_Test._t_StringSeq, False, 0), ())
    TestIntf._op_opESeq = IcePy.Operation('opESeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ESeq, False, 0),), (((), _M_Test._t_ESeq, False, 0),), ((), _M_Test._t_ESeq, False, 0), ())
    TestIntf._op_opSSeq = IcePy.Operation('opSSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_SSeq, False, 0),), (((), _M_Test._t_SSeq, False, 0),), ((), _M_Test._t_SSeq, False, 0), ())
    TestIntf._op_opDSeq = IcePy.Operation('opDSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_DSeq, False, 0),), (((), _M_Test._t_DSeq, False, 0),), ((), _M_Test._t_DSeq, False, 0), ())
    TestIntf._op_opStringSeqSeq = IcePy.Operation('opStringSeqSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringSeqSeq, False, 0),), (((), _M_Test._t_StringSeqSeq, False, 0),), ((), _M_Test._t_StringSeqSeq, False, 0), ())
    TestIntf._op_opByteBufferSeq = IcePy.Operation('opByteBufferSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ByteBuffer, False, 0),), (((), _M_Test._t_ByteBuffer, False, 0),), ((), _M_Test._t_ByteBuffer, False, 0), ())
    TestIntf._op_opShortBufferSeq = IcePy.Operation('opShortBufferSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ShortBuffer, False, 0),), (((), _M_Test._t_ShortBuffer, False, 0),), ((), _M_Test._t_ShortBuffer, False, 0), ())
    TestIntf._op_opIntBufferSeq = IcePy.Operation('opIntBufferSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_IntBuffer, False, 0),), (((), _M_Test._t_IntBuffer, False, 0),), ((), _M_Test._t_IntBuffer, False, 0), ())
    TestIntf._op_opLongBufferSeq = IcePy.Operation('opLongBufferSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_LongBuffer, False, 0),), (((), _M_Test._t_LongBuffer, False, 0),), ((), _M_Test._t_LongBuffer, False, 0), ())
    TestIntf._op_opFloatBufferSeq = IcePy.Operation('opFloatBufferSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_FloatBuffer, False, 0),), (((), _M_Test._t_FloatBuffer, False, 0),), ((), _M_Test._t_FloatBuffer, False, 0), ())
    TestIntf._op_opDoubleBufferSeq = IcePy.Operation('opDoubleBufferSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_DoubleBuffer, False, 0),), (((), _M_Test._t_DoubleBuffer, False, 0),), ((), _M_Test._t_DoubleBuffer, False, 0), ())
    TestIntf._op_opOptCSeq = IcePy.Operation('opOptCSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_CSeq, True, 2),), (((), _M_Test._t_CSeq, True, 3),), ((), _M_Test._t_CSeq, True, 1), ())
    TestIntf._op_opOptCArray = IcePy.Operation('opOptCArray', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_CArray, True, 2),), (((), _M_Test._t_CArray, True, 3),), ((), _M_Test._t_CArray, True, 1), ())
    TestIntf._op_opOptCList = IcePy.Operation('opOptCList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_CList, True, 2),), (((), _M_Test._t_CList, True, 3),), ((), _M_Test._t_CList, True, 1), ())
    TestIntf._op_opOptBoolSeq = IcePy.Operation('opOptBoolSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_BoolSeq, True, 2),), (((), _M_Test._t_BoolSeq, True, 3),), ((), _M_Test._t_BoolSeq, True, 1), ())
    TestIntf._op_opOptByteSeq = IcePy.Operation('opOptByteSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ByteSeq, True, 2),), (((), _M_Test._t_ByteSeq, True, 3),), ((), _M_Test._t_ByteSeq, True, 1), ())
    TestIntf._op_opOptShortSeq = IcePy.Operation('opOptShortSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ShortSeq, True, 2),), (((), _M_Test._t_ShortSeq, True, 3),), ((), _M_Test._t_ShortSeq, True, 1), ())
    TestIntf._op_opOptIntSeq = IcePy.Operation('opOptIntSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_IntSeq, True, 2),), (((), _M_Test._t_IntSeq, True, 3),), ((), _M_Test._t_IntSeq, True, 1), ())
    TestIntf._op_opOptLongSeq = IcePy.Operation('opOptLongSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_LongSeq, True, 2),), (((), _M_Test._t_LongSeq, True, 3),), ((), _M_Test._t_LongSeq, True, 1), ())
    TestIntf._op_opOptFloatSeq = IcePy.Operation('opOptFloatSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_FloatSeq, True, 2),), (((), _M_Test._t_FloatSeq, True, 3),), ((), _M_Test._t_FloatSeq, True, 1), ())
    TestIntf._op_opOptDoubleSeq = IcePy.Operation('opOptDoubleSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_DoubleSeq, True, 2),), (((), _M_Test._t_DoubleSeq, True, 3),), ((), _M_Test._t_DoubleSeq, True, 1), ())
    TestIntf._op_opOptStringSeq = IcePy.Operation('opOptStringSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringSeq, True, 2),), (((), _M_Test._t_StringSeq, True, 3),), ((), _M_Test._t_StringSeq, True, 1), ())
    TestIntf._op_opOptESeq = IcePy.Operation('opOptESeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ESeq, True, 2),), (((), _M_Test._t_ESeq, True, 3),), ((), _M_Test._t_ESeq, True, 1), ())
    TestIntf._op_opOptSSeq = IcePy.Operation('opOptSSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_SSeq, True, 2),), (((), _M_Test._t_SSeq, True, 3),), ((), _M_Test._t_SSeq, True, 1), ())
    TestIntf._op_opOptDSeq = IcePy.Operation('opOptDSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_DSeq, True, 2),), (((), _M_Test._t_DSeq, True, 3),), ((), _M_Test._t_DSeq, True, 1), ())
    TestIntf._op_opOptStringSeqSeq = IcePy.Operation('opOptStringSeqSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_StringSeqSeq, True, 2),), (((), _M_Test._t_StringSeqSeq, True, 3),), ((), _M_Test._t_StringSeqSeq, True, 1), ())
    TestIntf._op_opOptByteBufferSeq = IcePy.Operation('opOptByteBufferSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ByteBuffer, True, 2),), (((), _M_Test._t_ByteBuffer, True, 3),), ((), _M_Test._t_ByteBuffer, True, 1), ())
    TestIntf._op_opOptShortBufferSeq = IcePy.Operation('opOptShortBufferSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_ShortBuffer, True, 2),), (((), _M_Test._t_ShortBuffer, True, 3),), ((), _M_Test._t_ShortBuffer, True, 1), ())
    TestIntf._op_opOptIntBufferSeq = IcePy.Operation('opOptIntBufferSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_IntBuffer, True, 2),), (((), _M_Test._t_IntBuffer, True, 3),), ((), _M_Test._t_IntBuffer, True, 1), ())
    TestIntf._op_opOptLongBufferSeq = IcePy.Operation('opOptLongBufferSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_LongBuffer, True, 2),), (((), _M_Test._t_LongBuffer, True, 3),), ((), _M_Test._t_LongBuffer, True, 1), ())
    TestIntf._op_opOptFloatBufferSeq = IcePy.Operation('opOptFloatBufferSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_FloatBuffer, True, 2),), (((), _M_Test._t_FloatBuffer, True, 3),), ((), _M_Test._t_FloatBuffer, True, 1), ())
    TestIntf._op_opOptDoubleBufferSeq = IcePy.Operation('opOptDoubleBufferSeq', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_DoubleBuffer, True, 2),), (((), _M_Test._t_DoubleBuffer, True, 3),), ((), _M_Test._t_DoubleBuffer, True, 1), ())
    TestIntf._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.TestIntf = TestIntf
    del TestIntf

# End of module Test
