# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import Ice.PropertyDict_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

_M_Test._t_RemoteCommunicator = IcePy.defineValue('::Test::RemoteCommunicator', Ice.Value, -1, (), True, None, ())

if 'RemoteCommunicatorPrx' not in _M_Test.__dict__:
    _M_Test.RemoteCommunicatorPrx = Ice.createTempClass()
    class RemoteCommunicatorPrx(Ice.ObjectPrx):

        def getAdmin(self, context=None):
            return _M_Test.RemoteCommunicator._op_getAdmin.invoke(self, ((), context))

        def getAdminAsync(self, context=None):
            return _M_Test.RemoteCommunicator._op_getAdmin.invokeAsync(self, ((), context))

        def getChanges(self, context=None):
            return _M_Test.RemoteCommunicator._op_getChanges.invoke(self, ((), context))

        def getChangesAsync(self, context=None):
            return _M_Test.RemoteCommunicator._op_getChanges.invokeAsync(self, ((), context))

        def _print(self, message, context=None):
            return _M_Test.RemoteCommunicator._op_print.invoke(self, ((message, ), context))

        def printAsync(self, message, context=None):
            return _M_Test.RemoteCommunicator._op_print.invokeAsync(self, ((message, ), context))

        def trace(self, category, message, context=None):
            return _M_Test.RemoteCommunicator._op_trace.invoke(self, ((category, message), context))

        def traceAsync(self, category, message, context=None):
            return _M_Test.RemoteCommunicator._op_trace.invokeAsync(self, ((category, message), context))

        def warning(self, message, context=None):
            return _M_Test.RemoteCommunicator._op_warning.invoke(self, ((message, ), context))

        def warningAsync(self, message, context=None):
            return _M_Test.RemoteCommunicator._op_warning.invokeAsync(self, ((message, ), context))

        def error(self, message, context=None):
            return _M_Test.RemoteCommunicator._op_error.invoke(self, ((message, ), context))

        def errorAsync(self, message, context=None):
            return _M_Test.RemoteCommunicator._op_error.invokeAsync(self, ((message, ), context))

        def shutdown(self, context=None):
            return _M_Test.RemoteCommunicator._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.RemoteCommunicator._op_shutdown.invokeAsync(self, ((), context))

        def waitForShutdown(self, context=None):
            return _M_Test.RemoteCommunicator._op_waitForShutdown.invoke(self, ((), context))

        def waitForShutdownAsync(self, context=None):
            return _M_Test.RemoteCommunicator._op_waitForShutdown.invokeAsync(self, ((), context))

        def destroy(self, context=None):
            return _M_Test.RemoteCommunicator._op_destroy.invoke(self, ((), context))

        def destroyAsync(self, context=None):
            return _M_Test.RemoteCommunicator._op_destroy.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.RemoteCommunicatorPrx.ice_checkedCast(proxy, '::Test::RemoteCommunicator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.RemoteCommunicatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::RemoteCommunicator'
    _M_Test._t_RemoteCommunicatorPrx = IcePy.defineProxy('::Test::RemoteCommunicator', RemoteCommunicatorPrx)

    _M_Test.RemoteCommunicatorPrx = RemoteCommunicatorPrx
    del RemoteCommunicatorPrx

    _M_Test.RemoteCommunicator = Ice.createTempClass()
    class RemoteCommunicator(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::RemoteCommunicator')

        def ice_id(self, current=None):
            return '::Test::RemoteCommunicator'

        @staticmethod
        def ice_staticId():
            return '::Test::RemoteCommunicator'

        def getAdmin(self, current=None):
            raise NotImplementedError("servant method 'getAdmin' not implemented")

        def getChanges(self, current=None):
            raise NotImplementedError("servant method 'getChanges' not implemented")

        def _print(self, message, current=None):
            raise NotImplementedError("servant method '_print' not implemented")

        def trace(self, category, message, current=None):
            raise NotImplementedError("servant method 'trace' not implemented")

        def warning(self, message, current=None):
            raise NotImplementedError("servant method 'warning' not implemented")

        def error(self, message, current=None):
            raise NotImplementedError("servant method 'error' not implemented")

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def waitForShutdown(self, current=None):
            raise NotImplementedError("servant method 'waitForShutdown' not implemented")

        def destroy(self, current=None):
            raise NotImplementedError("servant method 'destroy' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_RemoteCommunicatorDisp)

        __repr__ = __str__

    _M_Test._t_RemoteCommunicatorDisp = IcePy.defineClass('::Test::RemoteCommunicator', RemoteCommunicator, (), None, ())
    RemoteCommunicator._ice_type = _M_Test._t_RemoteCommunicatorDisp

    RemoteCommunicator._op_getAdmin = IcePy.Operation('getAdmin', Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_ObjectPrx, False, 0), ())
    RemoteCommunicator._op_getChanges = IcePy.Operation('getChanges', Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Ice._t_PropertyDict, False, 0), ())
    RemoteCommunicator._op_print = IcePy.Operation('print', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    RemoteCommunicator._op_trace = IcePy.Operation('trace', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    RemoteCommunicator._op_warning = IcePy.Operation('warning', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    RemoteCommunicator._op_error = IcePy.Operation('error', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    RemoteCommunicator._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    RemoteCommunicator._op_waitForShutdown = IcePy.Operation('waitForShutdown', Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    RemoteCommunicator._op_destroy = IcePy.Operation('destroy', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.RemoteCommunicator = RemoteCommunicator
    del RemoteCommunicator

_M_Test._t_RemoteCommunicatorFactory = IcePy.defineValue('::Test::RemoteCommunicatorFactory', Ice.Value, -1, (), True, None, ())

if 'RemoteCommunicatorFactoryPrx' not in _M_Test.__dict__:
    _M_Test.RemoteCommunicatorFactoryPrx = Ice.createTempClass()
    class RemoteCommunicatorFactoryPrx(Ice.ObjectPrx):

        def createCommunicator(self, props, context=None):
            return _M_Test.RemoteCommunicatorFactory._op_createCommunicator.invoke(self, ((props, ), context))

        def createCommunicatorAsync(self, props, context=None):
            return _M_Test.RemoteCommunicatorFactory._op_createCommunicator.invokeAsync(self, ((props, ), context))

        def shutdown(self, context=None):
            return _M_Test.RemoteCommunicatorFactory._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.RemoteCommunicatorFactory._op_shutdown.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.RemoteCommunicatorFactoryPrx.ice_checkedCast(proxy, '::Test::RemoteCommunicatorFactory', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.RemoteCommunicatorFactoryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::RemoteCommunicatorFactory'
    _M_Test._t_RemoteCommunicatorFactoryPrx = IcePy.defineProxy('::Test::RemoteCommunicatorFactory', RemoteCommunicatorFactoryPrx)

    _M_Test.RemoteCommunicatorFactoryPrx = RemoteCommunicatorFactoryPrx
    del RemoteCommunicatorFactoryPrx

    _M_Test.RemoteCommunicatorFactory = Ice.createTempClass()
    class RemoteCommunicatorFactory(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::RemoteCommunicatorFactory')

        def ice_id(self, current=None):
            return '::Test::RemoteCommunicatorFactory'

        @staticmethod
        def ice_staticId():
            return '::Test::RemoteCommunicatorFactory'

        def createCommunicator(self, props, current=None):
            raise NotImplementedError("servant method 'createCommunicator' not implemented")

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_RemoteCommunicatorFactoryDisp)

        __repr__ = __str__

    _M_Test._t_RemoteCommunicatorFactoryDisp = IcePy.defineClass('::Test::RemoteCommunicatorFactory', RemoteCommunicatorFactory, (), None, ())
    RemoteCommunicatorFactory._ice_type = _M_Test._t_RemoteCommunicatorFactoryDisp

    RemoteCommunicatorFactory._op_createCommunicator = IcePy.Operation('createCommunicator', Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_PropertyDict, False, 0),), (), ((), _M_Test._t_RemoteCommunicatorPrx, False, 0), ())
    RemoteCommunicatorFactory._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.RemoteCommunicatorFactory = RemoteCommunicatorFactory
    del RemoteCommunicatorFactory

_M_Test._t_TestFacet = IcePy.defineValue('::Test::TestFacet', Ice.Value, -1, (), True, None, ())

if 'TestFacetPrx' not in _M_Test.__dict__:
    _M_Test.TestFacetPrx = Ice.createTempClass()
    class TestFacetPrx(Ice.ObjectPrx):

        def op(self, context=None):
            return _M_Test.TestFacet._op_op.invoke(self, ((), context))

        def opAsync(self, context=None):
            return _M_Test.TestFacet._op_op.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.TestFacetPrx.ice_checkedCast(proxy, '::Test::TestFacet', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.TestFacetPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::TestFacet'
    _M_Test._t_TestFacetPrx = IcePy.defineProxy('::Test::TestFacet', TestFacetPrx)

    _M_Test.TestFacetPrx = TestFacetPrx
    del TestFacetPrx

    _M_Test.TestFacet = Ice.createTempClass()
    class TestFacet(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::TestFacet')

        def ice_id(self, current=None):
            return '::Test::TestFacet'

        @staticmethod
        def ice_staticId():
            return '::Test::TestFacet'

        def op(self, current=None):
            raise NotImplementedError("servant method 'op' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_TestFacetDisp)

        __repr__ = __str__

    _M_Test._t_TestFacetDisp = IcePy.defineClass('::Test::TestFacet', TestFacet, (), None, ())
    TestFacet._ice_type = _M_Test._t_TestFacetDisp

    TestFacet._op_op = IcePy.Operation('op', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.TestFacet = TestFacet
    del TestFacet

# End of module Test
