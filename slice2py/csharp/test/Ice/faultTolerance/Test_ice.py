# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice
import IcePy
import builtins as _builtins

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'TestIntf' not in _M_Test.__dict__:
    _M_Test._t_TestIntfPrx = IcePy.declareProxy('::Test::TestIntf')

if 'TestIntfPrx' not in _M_Test.__dict__:
    _M_Test.TestIntfPrx = None
    class TestIntfPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new TestIntfPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def shutdown(self, context=None):
            return _M_Test.TestIntf._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.TestIntf._op_shutdown.invokeAsync(self, ((), context))

        def abort(self, context=None):
            return _M_Test.TestIntf._op_abort.invoke(self, ((), context))

        def abortAsync(self, context=None):
            return _M_Test.TestIntf._op_abort.invokeAsync(self, ((), context))

        def idempotentAbort(self, context=None):
            return _M_Test.TestIntf._op_idempotentAbort.invoke(self, ((), context))

        def idempotentAbortAsync(self, context=None):
            return _M_Test.TestIntf._op_idempotentAbort.invokeAsync(self, ((), context))

        def pid(self, context=None):
            return _M_Test.TestIntf._op_pid.invoke(self, ((), context))

        def pidAsync(self, context=None):
            return _M_Test.TestIntf._op_pid.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.TestIntfPrx.ice_checkedCast(proxy, '::Test::TestIntf', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.TestIntfPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'
    _M_Test._t_TestIntfPrx = IcePy.defineProxy('::Test::TestIntf', TestIntfPrx)

    _M_Test.TestIntfPrx = TestIntfPrx
    del TestIntfPrx

    _M_Test.TestIntf = None
    class TestIntf(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::TestIntf')

        def ice_id(self, current=None):
            return '::Test::TestIntf'

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def abort(self, current=None):
            raise NotImplementedError("servant method 'abort' not implemented")

        def idempotentAbort(self, current=None):
            raise NotImplementedError("servant method 'idempotentAbort' not implemented")

        def pid(self, current=None):
            raise NotImplementedError("servant method 'pid' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_TestIntfDisp)

        __repr__ = __str__

    TestIntf._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    TestIntf._op_abort = IcePy.Operation('abort', Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    TestIntf._op_idempotentAbort = IcePy.Operation('idempotentAbort', Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    TestIntf._op_pid = IcePy.Operation('pid', Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_Test.TestIntf = TestIntf
    del TestIntf

if 'Cleaner' not in _M_Test.__dict__:
    _M_Test._t_CleanerPrx = IcePy.declareProxy('::Test::Cleaner')

if 'CleanerPrx' not in _M_Test.__dict__:
    _M_Test.CleanerPrx = None
    class CleanerPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new CleanerPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def cleanup(self, context=None):
            return _M_Test.Cleaner._op_cleanup.invoke(self, ((), context))

        def cleanupAsync(self, context=None):
            return _M_Test.Cleaner._op_cleanup.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.CleanerPrx.ice_checkedCast(proxy, '::Test::Cleaner', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.CleanerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Cleaner'
    _M_Test._t_CleanerPrx = IcePy.defineProxy('::Test::Cleaner', CleanerPrx)

    _M_Test.CleanerPrx = CleanerPrx
    del CleanerPrx

    _M_Test.Cleaner = None
    class Cleaner(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Cleaner')

        def ice_id(self, current=None):
            return '::Test::Cleaner'

        @staticmethod
        def ice_staticId():
            return '::Test::Cleaner'

        def cleanup(self, current=None):
            raise NotImplementedError("servant method 'cleanup' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_CleanerDisp)

        __repr__ = __str__

    Cleaner._op_cleanup = IcePy.Operation('cleanup', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.Cleaner = Cleaner
    del Cleaner

# End of module Test
