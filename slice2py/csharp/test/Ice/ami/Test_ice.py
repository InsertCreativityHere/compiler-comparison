# -*- coding: utf-8 -*-
# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice
import IcePy
import builtins as _builtins
import Ice.BuiltinSequences_ice
import Ice.Identity_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'TestIntfException' not in _M_Test.__dict__:
    _M_Test.TestIntfException = None
    class TestIntfException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::TestIntfException'

    _M_Test._t_TestIntfException = IcePy.defineException('::Test::TestIntfException', TestIntfException, (), None, ())
    TestIntfException._ice_type = _M_Test._t_TestIntfException

    _M_Test.TestIntfException = TestIntfException
    del TestIntfException

if 'PingReply' not in _M_Test.__dict__:
    _M_Test._t_PingReplyPrx = IcePy.declareProxy('::Test::PingReply')

if 'PingReplyPrx' not in _M_Test.__dict__:
    _M_Test.PingReplyPrx = None
    class PingReplyPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new PingReplyPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def reply(self, context=None):
            return _M_Test.PingReply._op_reply.invoke(self, ((), context))

        def replyAsync(self, context=None):
            return _M_Test.PingReply._op_reply.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.PingReplyPrx.ice_checkedCast(proxy, '::Test::PingReply', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.PingReplyPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::PingReply'
    _M_Test._t_PingReplyPrx = IcePy.defineProxy('::Test::PingReply', PingReplyPrx)

    _M_Test.PingReplyPrx = PingReplyPrx
    del PingReplyPrx

    _M_Test.PingReply = None
    class PingReply(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::PingReply')

        def ice_id(self, current=None):
            return '::Test::PingReply'

        @staticmethod
        def ice_staticId():
            return '::Test::PingReply'

        def reply(self, current=None):
            raise NotImplementedError("servant method 'reply' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_PingReplyDisp)

        __repr__ = __str__

    PingReply._op_reply = IcePy.Operation('reply', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.PingReply = PingReply
    del PingReply

if 'TestIntf' not in _M_Test.__dict__:
    _M_Test._t_TestIntfPrx = IcePy.declareProxy('::Test::TestIntf')

if 'TestIntfPrx' not in _M_Test.__dict__:
    _M_Test.TestIntfPrx = None
    class TestIntfPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new TestIntfPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def op(self, context=None):
            return _M_Test.TestIntf._op_op.invoke(self, ((), context))

        def opAsync(self, context=None):
            return _M_Test.TestIntf._op_op.invokeAsync(self, ((), context))

        def opWithPayload(self, seq, context=None):
            return _M_Test.TestIntf._op_opWithPayload.invoke(self, ((seq, ), context))

        def opWithPayloadAsync(self, seq, context=None):
            return _M_Test.TestIntf._op_opWithPayload.invokeAsync(self, ((seq, ), context))

        def opWithResult(self, context=None):
            return _M_Test.TestIntf._op_opWithResult.invoke(self, ((), context))

        def opWithResultAsync(self, context=None):
            return _M_Test.TestIntf._op_opWithResult.invokeAsync(self, ((), context))

        def opWithUE(self, context=None):
            return _M_Test.TestIntf._op_opWithUE.invoke(self, ((), context))

        def opWithUEAsync(self, context=None):
            return _M_Test.TestIntf._op_opWithUE.invokeAsync(self, ((), context))

        def opBatch(self, context=None):
            return _M_Test.TestIntf._op_opBatch.invoke(self, ((), context))

        def opBatchAsync(self, context=None):
            return _M_Test.TestIntf._op_opBatch.invokeAsync(self, ((), context))

        def opBatchCount(self, context=None):
            return _M_Test.TestIntf._op_opBatchCount.invoke(self, ((), context))

        def opBatchCountAsync(self, context=None):
            return _M_Test.TestIntf._op_opBatchCount.invokeAsync(self, ((), context))

        def waitForBatch(self, count, context=None):
            return _M_Test.TestIntf._op_waitForBatch.invoke(self, ((count, ), context))

        def waitForBatchAsync(self, count, context=None):
            return _M_Test.TestIntf._op_waitForBatch.invokeAsync(self, ((count, ), context))

        def closeConnection(self, context=None):
            return _M_Test.TestIntf._op_closeConnection.invoke(self, ((), context))

        def closeConnectionAsync(self, context=None):
            return _M_Test.TestIntf._op_closeConnection.invokeAsync(self, ((), context))

        def abortConnection(self, context=None):
            return _M_Test.TestIntf._op_abortConnection.invoke(self, ((), context))

        def abortConnectionAsync(self, context=None):
            return _M_Test.TestIntf._op_abortConnection.invokeAsync(self, ((), context))

        def sleep(self, ms, context=None):
            return _M_Test.TestIntf._op_sleep.invoke(self, ((ms, ), context))

        def sleepAsync(self, ms, context=None):
            return _M_Test.TestIntf._op_sleep.invokeAsync(self, ((ms, ), context))

        def startDispatch(self, context=None):
            return _M_Test.TestIntf._op_startDispatch.invoke(self, ((), context))

        def startDispatchAsync(self, context=None):
            return _M_Test.TestIntf._op_startDispatch.invokeAsync(self, ((), context))

        def finishDispatch(self, context=None):
            return _M_Test.TestIntf._op_finishDispatch.invoke(self, ((), context))

        def finishDispatchAsync(self, context=None):
            return _M_Test.TestIntf._op_finishDispatch.invokeAsync(self, ((), context))

        def shutdown(self, context=None):
            return _M_Test.TestIntf._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.TestIntf._op_shutdown.invokeAsync(self, ((), context))

        def supportsFunctionalTests(self, context=None):
            return _M_Test.TestIntf._op_supportsFunctionalTests.invoke(self, ((), context))

        def supportsFunctionalTestsAsync(self, context=None):
            return _M_Test.TestIntf._op_supportsFunctionalTests.invokeAsync(self, ((), context))

        def supportsBackPressureTests(self, context=None):
            return _M_Test.TestIntf._op_supportsBackPressureTests.invoke(self, ((), context))

        def supportsBackPressureTestsAsync(self, context=None):
            return _M_Test.TestIntf._op_supportsBackPressureTests.invokeAsync(self, ((), context))

        def opAsyncDispatch(self, context=None):
            return _M_Test.TestIntf._op_opAsyncDispatch.invoke(self, ((), context))

        def opAsyncDispatchAsync(self, context=None):
            return _M_Test.TestIntf._op_opAsyncDispatch.invokeAsync(self, ((), context))

        def opWithResultAsyncDispatch(self, context=None):
            return _M_Test.TestIntf._op_opWithResultAsyncDispatch.invoke(self, ((), context))

        def opWithResultAsyncDispatchAsync(self, context=None):
            return _M_Test.TestIntf._op_opWithResultAsyncDispatch.invokeAsync(self, ((), context))

        def opWithUEAsyncDispatch(self, context=None):
            return _M_Test.TestIntf._op_opWithUEAsyncDispatch.invoke(self, ((), context))

        def opWithUEAsyncDispatchAsync(self, context=None):
            return _M_Test.TestIntf._op_opWithUEAsyncDispatch.invokeAsync(self, ((), context))

        def pingBiDir(self, reply, context=None):
            return _M_Test.TestIntf._op_pingBiDir.invoke(self, ((reply, ), context))

        def pingBiDirAsync(self, reply, context=None):
            return _M_Test.TestIntf._op_pingBiDir.invokeAsync(self, ((reply, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.TestIntfPrx.ice_checkedCast(proxy, '::Test::TestIntf', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.TestIntfPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'
    _M_Test._t_TestIntfPrx = IcePy.defineProxy('::Test::TestIntf', TestIntfPrx)

    _M_Test.TestIntfPrx = TestIntfPrx
    del TestIntfPrx

    _M_Test.TestIntf = None
    class TestIntf(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::TestIntf')

        def ice_id(self, current=None):
            return '::Test::TestIntf'

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'

        def op(self, current=None):
            raise NotImplementedError("servant method 'op' not implemented")

        def opWithPayload(self, seq, current=None):
            raise NotImplementedError("servant method 'opWithPayload' not implemented")

        def opWithResult(self, current=None):
            raise NotImplementedError("servant method 'opWithResult' not implemented")

        def opWithUE(self, current=None):
            raise NotImplementedError("servant method 'opWithUE' not implemented")

        def opBatch(self, current=None):
            raise NotImplementedError("servant method 'opBatch' not implemented")

        def opBatchCount(self, current=None):
            raise NotImplementedError("servant method 'opBatchCount' not implemented")

        def waitForBatch(self, count, current=None):
            raise NotImplementedError("servant method 'waitForBatch' not implemented")

        def closeConnection(self, current=None):
            raise NotImplementedError("servant method 'closeConnection' not implemented")

        def abortConnection(self, current=None):
            raise NotImplementedError("servant method 'abortConnection' not implemented")

        def sleep(self, ms, current=None):
            raise NotImplementedError("servant method 'sleep' not implemented")

        def startDispatch(self, current=None):
            raise NotImplementedError("servant method 'startDispatch' not implemented")

        def finishDispatch(self, current=None):
            raise NotImplementedError("servant method 'finishDispatch' not implemented")

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def supportsFunctionalTests(self, current=None):
            raise NotImplementedError("servant method 'supportsFunctionalTests' not implemented")

        def supportsBackPressureTests(self, current=None):
            raise NotImplementedError("servant method 'supportsBackPressureTests' not implemented")

        def opAsyncDispatch(self, current=None):
            raise NotImplementedError("servant method 'opAsyncDispatch' not implemented")

        def opWithResultAsyncDispatch(self, current=None):
            raise NotImplementedError("servant method 'opWithResultAsyncDispatch' not implemented")

        def opWithUEAsyncDispatch(self, current=None):
            raise NotImplementedError("servant method 'opWithUEAsyncDispatch' not implemented")

        def pingBiDir(self, reply, current=None):
            raise NotImplementedError("servant method 'pingBiDir' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_TestIntfDisp)

        __repr__ = __str__

    TestIntf._op_op = IcePy.Operation('op', Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    TestIntf._op_opWithPayload = IcePy.Operation('opWithPayload', Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_ByteSeq, False, 0),), (), None, ())
    TestIntf._op_opWithResult = IcePy.Operation('opWithResult', Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    TestIntf._op_opWithUE = IcePy.Operation('opWithUE', Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_Test._t_TestIntfException,))
    TestIntf._op_opBatch = IcePy.Operation('opBatch', Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    TestIntf._op_opBatchCount = IcePy.Operation('opBatchCount', Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    TestIntf._op_waitForBatch = IcePy.Operation('waitForBatch', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    TestIntf._op_closeConnection = IcePy.Operation('closeConnection', Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    TestIntf._op_abortConnection = IcePy.Operation('abortConnection', Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    TestIntf._op_sleep = IcePy.Operation('sleep', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    TestIntf._op_startDispatch = IcePy.Operation('startDispatch', Ice.OperationMode.Normal, True, None, (), (), (), None, ())
    TestIntf._op_finishDispatch = IcePy.Operation('finishDispatch', Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    TestIntf._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    TestIntf._op_supportsFunctionalTests = IcePy.Operation('supportsFunctionalTests', Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    TestIntf._op_supportsBackPressureTests = IcePy.Operation('supportsBackPressureTests', Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    TestIntf._op_opAsyncDispatch = IcePy.Operation('opAsyncDispatch', Ice.OperationMode.Normal, True, None, (), (), (), None, ())
    TestIntf._op_opWithResultAsyncDispatch = IcePy.Operation('opWithResultAsyncDispatch', Ice.OperationMode.Normal, True, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    TestIntf._op_opWithUEAsyncDispatch = IcePy.Operation('opWithUEAsyncDispatch', Ice.OperationMode.Normal, True, None, (), (), (), None, (_M_Test._t_TestIntfException,))
    TestIntf._op_pingBiDir = IcePy.Operation('pingBiDir', Ice.OperationMode.Normal, True, None, (), (((), _M_Test._t_PingReplyPrx, False, 0),), (), None, ())

    _M_Test.TestIntf = TestIntf
    del TestIntf

if 'TestIntfController' not in _M_Test.__dict__:
    _M_Test._t_TestIntfControllerPrx = IcePy.declareProxy('::Test::TestIntfController')

if 'TestIntfControllerPrx' not in _M_Test.__dict__:
    _M_Test.TestIntfControllerPrx = None
    class TestIntfControllerPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new TestIntfControllerPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def holdAdapter(self, context=None):
            return _M_Test.TestIntfController._op_holdAdapter.invoke(self, ((), context))

        def holdAdapterAsync(self, context=None):
            return _M_Test.TestIntfController._op_holdAdapter.invokeAsync(self, ((), context))

        def resumeAdapter(self, context=None):
            return _M_Test.TestIntfController._op_resumeAdapter.invoke(self, ((), context))

        def resumeAdapterAsync(self, context=None):
            return _M_Test.TestIntfController._op_resumeAdapter.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.TestIntfControllerPrx.ice_checkedCast(proxy, '::Test::TestIntfController', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.TestIntfControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntfController'
    _M_Test._t_TestIntfControllerPrx = IcePy.defineProxy('::Test::TestIntfController', TestIntfControllerPrx)

    _M_Test.TestIntfControllerPrx = TestIntfControllerPrx
    del TestIntfControllerPrx

    _M_Test.TestIntfController = None
    class TestIntfController(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::TestIntfController')

        def ice_id(self, current=None):
            return '::Test::TestIntfController'

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntfController'

        def holdAdapter(self, current=None):
            raise NotImplementedError("servant method 'holdAdapter' not implemented")

        def resumeAdapter(self, current=None):
            raise NotImplementedError("servant method 'resumeAdapter' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_TestIntfControllerDisp)

        __repr__ = __str__

    TestIntfController._op_holdAdapter = IcePy.Operation('holdAdapter', Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    TestIntfController._op_resumeAdapter = IcePy.Operation('resumeAdapter', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.TestIntfController = TestIntfController
    del TestIntfController

# Start of module Test.Outer
_M_Test.Outer = Ice.openModule('Test.Outer')
__name__ = 'Test.Outer'

# Start of module Test.Outer.Inner
_M_Test.Outer.Inner = Ice.openModule('Test.Outer.Inner')
__name__ = 'Test.Outer.Inner'

if 'TestIntf' not in _M_Test.Outer.Inner.__dict__:
    _M_Test.Outer.Inner._t_TestIntfPrx = IcePy.declareProxy('::Test::Outer::Inner::TestIntf')

if 'TestIntfPrx' not in _M_Test.Outer.Inner.__dict__:
    _M_Test.Outer.Inner.TestIntfPrx = None
    class TestIntfPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new TestIntfPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def op(self, i, context=None):
            return _M_Test.Outer.Inner.TestIntf._op_op.invoke(self, ((i, ), context))

        def opAsync(self, i, context=None):
            return _M_Test.Outer.Inner.TestIntf._op_op.invokeAsync(self, ((i, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.Outer.Inner.TestIntfPrx.ice_checkedCast(proxy, '::Test::Outer::Inner::TestIntf', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.Outer.Inner.TestIntfPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Outer::Inner::TestIntf'
    _M_Test.Outer.Inner._t_TestIntfPrx = IcePy.defineProxy('::Test::Outer::Inner::TestIntf', TestIntfPrx)

    _M_Test.Outer.Inner.TestIntfPrx = TestIntfPrx
    del TestIntfPrx

    _M_Test.Outer.Inner.TestIntf = None
    class TestIntf(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Outer::Inner::TestIntf')

        def ice_id(self, current=None):
            return '::Test::Outer::Inner::TestIntf'

        @staticmethod
        def ice_staticId():
            return '::Test::Outer::Inner::TestIntf'

        def op(self, i, current=None):
            raise NotImplementedError("servant method 'op' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test.Outer.Inner._t_TestIntfDisp)

        __repr__ = __str__

    TestIntf._op_op = IcePy.Operation('op', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), IcePy._t_int, False, 0),), ((), IcePy._t_int, False, 0), ())

    _M_Test.Outer.Inner.TestIntf = TestIntf
    del TestIntf

# End of module Test.Outer.Inner

__name__ = 'Test.Outer'

# End of module Test.Outer

__name__ = 'Test'

# End of module Test
