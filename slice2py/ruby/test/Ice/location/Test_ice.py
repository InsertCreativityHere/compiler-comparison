# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins
import Ice.Locator_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'TestLocatorRegistryPrx' not in _M_Test.__dict__:
    _M_Test.TestLocatorRegistryPrx = None
    class TestLocatorRegistryPrx(_M_Ice.LocatorRegistryPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new TestLocatorRegistryPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def addObject(self, obj, context=None):
            return _M_Test.TestLocatorRegistry._op_addObject.invoke(self, ((obj, ), context))

        def addObjectAsync(self, obj, context=None):
            return _M_Test.TestLocatorRegistry._op_addObject.invokeAsync(self, ((obj, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.TestLocatorRegistryPrx.ice_checkedCast(proxy, '::Test::TestLocatorRegistry', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.TestLocatorRegistryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::TestLocatorRegistry'
    _M_Test._t_TestLocatorRegistryPrx = IcePy.defineProxy('::Test::TestLocatorRegistry', TestLocatorRegistryPrx)

    _M_Test.TestLocatorRegistryPrx = TestLocatorRegistryPrx
    del TestLocatorRegistryPrx

    _M_Test.TestLocatorRegistry = None
    class TestLocatorRegistry(_M_Ice.LocatorRegistry):

        def ice_ids(self, current=None):
            return ('::Ice::LocatorRegistry', '::Ice::Object', '::Test::TestLocatorRegistry')

        def ice_id(self, current=None):
            return '::Test::TestLocatorRegistry'

        @staticmethod
        def ice_staticId():
            return '::Test::TestLocatorRegistry'

        def addObject(self, obj, current=None):
            raise NotImplementedError("servant method 'addObject' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_TestLocatorRegistryDisp)

        __repr__ = __str__

    TestLocatorRegistry._op_addObject = IcePy.Operation('addObject', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_ObjectPrx, False, 0),), (), None, ())

    _M_Test.TestLocatorRegistry = TestLocatorRegistry
    del TestLocatorRegistry

if 'ServerManagerPrx' not in _M_Test.__dict__:
    _M_Test.ServerManagerPrx = None
    class ServerManagerPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new ServerManagerPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def startServer(self, context=None):
            return _M_Test.ServerManager._op_startServer.invoke(self, ((), context))

        def startServerAsync(self, context=None):
            return _M_Test.ServerManager._op_startServer.invokeAsync(self, ((), context))

        def shutdown(self, context=None):
            return _M_Test.ServerManager._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.ServerManager._op_shutdown.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.ServerManagerPrx.ice_checkedCast(proxy, '::Test::ServerManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.ServerManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::ServerManager'
    _M_Test._t_ServerManagerPrx = IcePy.defineProxy('::Test::ServerManager', ServerManagerPrx)

    _M_Test.ServerManagerPrx = ServerManagerPrx
    del ServerManagerPrx

    _M_Test.ServerManager = None
    class ServerManager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::ServerManager')

        def ice_id(self, current=None):
            return '::Test::ServerManager'

        @staticmethod
        def ice_staticId():
            return '::Test::ServerManager'

        def startServer(self, current=None):
            raise NotImplementedError("servant method 'startServer' not implemented")

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_ServerManagerDisp)

        __repr__ = __str__

    ServerManager._op_startServer = IcePy.Operation('startServer', Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    ServerManager._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.ServerManager = ServerManager
    del ServerManager

if 'HelloPrx' not in _M_Test.__dict__:
    _M_Test.HelloPrx = None
    class HelloPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new HelloPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def sayHello(self, context=None):
            return _M_Test.Hello._op_sayHello.invoke(self, ((), context))

        def sayHelloAsync(self, context=None):
            return _M_Test.Hello._op_sayHello.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.HelloPrx.ice_checkedCast(proxy, '::Test::Hello', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.HelloPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Hello'
    _M_Test._t_HelloPrx = IcePy.defineProxy('::Test::Hello', HelloPrx)

    _M_Test.HelloPrx = HelloPrx
    del HelloPrx

    _M_Test.Hello = None
    class Hello(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Hello')

        def ice_id(self, current=None):
            return '::Test::Hello'

        @staticmethod
        def ice_staticId():
            return '::Test::Hello'

        def sayHello(self, current=None):
            raise NotImplementedError("servant method 'sayHello' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_HelloDisp)

        __repr__ = __str__

    Hello._op_sayHello = IcePy.Operation('sayHello', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.Hello = Hello
    del Hello

if 'TestIntfPrx' not in _M_Test.__dict__:
    _M_Test.TestIntfPrx = None
    class TestIntfPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new TestIntfPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def shutdown(self, context=None):
            return _M_Test.TestIntf._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.TestIntf._op_shutdown.invokeAsync(self, ((), context))

        def getHello(self, context=None):
            return _M_Test.TestIntf._op_getHello.invoke(self, ((), context))

        def getHelloAsync(self, context=None):
            return _M_Test.TestIntf._op_getHello.invokeAsync(self, ((), context))

        def migrateHello(self, context=None):
            return _M_Test.TestIntf._op_migrateHello.invoke(self, ((), context))

        def migrateHelloAsync(self, context=None):
            return _M_Test.TestIntf._op_migrateHello.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.TestIntfPrx.ice_checkedCast(proxy, '::Test::TestIntf', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.TestIntfPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'
    _M_Test._t_TestIntfPrx = IcePy.defineProxy('::Test::TestIntf', TestIntfPrx)

    _M_Test.TestIntfPrx = TestIntfPrx
    del TestIntfPrx

    _M_Test.TestIntf = None
    class TestIntf(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::TestIntf')

        def ice_id(self, current=None):
            return '::Test::TestIntf'

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def getHello(self, current=None):
            raise NotImplementedError("servant method 'getHello' not implemented")

        def migrateHello(self, current=None):
            raise NotImplementedError("servant method 'migrateHello' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_TestIntfDisp)

        __repr__ = __str__

    TestIntf._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    TestIntf._op_getHello = IcePy.Operation('getHello', Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Test._t_HelloPrx, False, 0), ())
    TestIntf._op_migrateHello = IcePy.Operation('migrateHello', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.TestIntf = TestIntf
    del TestIntf

# End of module Test
