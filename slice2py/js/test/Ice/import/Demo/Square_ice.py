# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Square.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import Point_ice

# Included module Demo
_M_Demo = Ice.openModule('Demo')

# Included module Demo.gx
_M_Demo.gx = Ice.openModule('Demo.gx')

# Start of module Demo
__name__ = 'Demo'

# Start of module Demo.gx
__name__ = 'Demo.gx'

if 'Square' not in _M_Demo.gx.__dict__:
    _M_Demo.gx.Square = Ice.createTempClass()
    class Square(object):
        def __init__(self, p1=Ice._struct_marker, p2=Ice._struct_marker, p3=Ice._struct_marker, p4=Ice._struct_marker):
            if p1 is Ice._struct_marker:
                self.p1 = _M_Demo.gx.Point()
            else:
                self.p1 = p1
            if p2 is Ice._struct_marker:
                self.p2 = _M_Demo.gx.Point()
            else:
                self.p2 = p2
            if p3 is Ice._struct_marker:
                self.p3 = _M_Demo.gx.Point()
            else:
                self.p3 = p3
            if p4 is Ice._struct_marker:
                self.p4 = _M_Demo.gx.Point()
            else:
                self.p4 = p4

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.p1)
            _h = 5 * _h + Ice.getHash(self.p2)
            _h = 5 * _h + Ice.getHash(self.p3)
            _h = 5 * _h + Ice.getHash(self.p4)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Demo.gx.Square):
                return NotImplemented
            else:
                if self.p1 is None or other.p1 is None:
                    if self.p1 != other.p1:
                        return (-1 if self.p1 is None else 1)
                else:
                    if self.p1 < other.p1:
                        return -1
                    elif self.p1 > other.p1:
                        return 1
                if self.p2 is None or other.p2 is None:
                    if self.p2 != other.p2:
                        return (-1 if self.p2 is None else 1)
                else:
                    if self.p2 < other.p2:
                        return -1
                    elif self.p2 > other.p2:
                        return 1
                if self.p3 is None or other.p3 is None:
                    if self.p3 != other.p3:
                        return (-1 if self.p3 is None else 1)
                else:
                    if self.p3 < other.p3:
                        return -1
                    elif self.p3 > other.p3:
                        return 1
                if self.p4 is None or other.p4 is None:
                    if self.p4 != other.p4:
                        return (-1 if self.p4 is None else 1)
                else:
                    if self.p4 < other.p4:
                        return -1
                    elif self.p4 > other.p4:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Demo.gx._t_Square)

        __repr__ = __str__

    _M_Demo.gx._t_Square = IcePy.defineStruct('::Demo::gx::Square', Square, (), (
        ('p1', (), _M_Demo.gx._t_Point),
        ('p2', (), _M_Demo.gx._t_Point),
        ('p3', (), _M_Demo.gx._t_Point),
        ('p4', (), _M_Demo.gx._t_Point)
    ))

    _M_Demo.gx.Square = Square
    del Square

# End of module Demo.gx

__name__ = 'Demo'

# End of module Demo
