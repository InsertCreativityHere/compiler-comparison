# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `Circle.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Point_ice

# Included module Demo
_M_Demo = Ice.openModule('Demo')

# Included module Demo.gx
_M_Demo.gx = Ice.openModule('Demo.gx')

# Start of module Demo
__name__ = 'Demo'

# Start of module Demo.gx
__name__ = 'Demo.gx'

if 'Circle' not in _M_Demo.gx.__dict__:
    _M_Demo.gx.Circle = Ice.createTempClass()
    class Circle(object):
        def __init__(self, center=Ice._struct_marker, radius=0):
            if center is Ice._struct_marker:
                self.center = _M_Demo.gx.Point()
            else:
                self.center = center
            self.radius = radius

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.center)
            _h = 5 * _h + Ice.getHash(self.radius)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Demo.gx.Circle):
                return NotImplemented
            else:
                if self.center is None or other.center is None:
                    if self.center != other.center:
                        return (-1 if self.center is None else 1)
                else:
                    if self.center < other.center:
                        return -1
                    elif self.center > other.center:
                        return 1
                if self.radius is None or other.radius is None:
                    if self.radius != other.radius:
                        return (-1 if self.radius is None else 1)
                else:
                    if self.radius < other.radius:
                        return -1
                    elif self.radius > other.radius:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Demo.gx._t_Circle)

        __repr__ = __str__

    _M_Demo.gx._t_Circle = IcePy.defineStruct('::Demo::gx::Circle', Circle, (), (
        ('center', (), _M_Demo.gx._t_Point),
        ('radius', (), IcePy._t_long)
    ))

    _M_Demo.gx.Circle = Circle
    del Circle

# End of module Demo.gx

__name__ = 'Demo'

# End of module Demo
