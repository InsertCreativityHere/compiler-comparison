# -*- coding: utf-8 -*-
# Copyright (c) ZeroC, Inc.
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>

import Ice
import IcePy
import builtins as _builtins

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'DelayedTestIntf' not in _M_Test.__dict__:
    _M_Test._t_DelayedTestIntfPrx = IcePy.declareProxy('::Test::DelayedTestIntf')

if 'DelayedTestIntfPrx' not in _M_Test.__dict__:
    _M_Test.DelayedTestIntfPrx = None
    class DelayedTestIntfPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new DelayedTestIntfPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def sleep(self, ms, context=None):
            return _M_Test.DelayedTestIntf._op_sleep.invoke(self, ((ms, ), context))

        def sleepAsync(self, ms, context=None):
            return _M_Test.DelayedTestIntf._op_sleep.invokeAsync(self, ((ms, ), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.DelayedTestIntfPrx.ice_checkedCast(proxy, '::Test::DelayedTestIntf', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.DelayedTestIntfPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::DelayedTestIntf'
    _M_Test._t_DelayedTestIntfPrx = IcePy.defineProxy('::Test::DelayedTestIntf', DelayedTestIntfPrx)

    _M_Test.DelayedTestIntfPrx = DelayedTestIntfPrx
    del DelayedTestIntfPrx

    _M_Test.DelayedTestIntf = None
    class DelayedTestIntf(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::DelayedTestIntf')

        def ice_id(self, current=None):
            return '::Test::DelayedTestIntf'

        @staticmethod
        def ice_staticId():
            return '::Test::DelayedTestIntf'

        def sleep(self, ms, current=None):
            raise NotImplementedError("servant method 'sleep' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_DelayedTestIntfDisp)

        __repr__ = __str__

    DelayedTestIntf._op_sleep = IcePy.Operation('sleep', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())

    _M_Test.DelayedTestIntf = DelayedTestIntf
    del DelayedTestIntf

if 'TestIntf' not in _M_Test.__dict__:
    _M_Test._t_TestIntfPrx = IcePy.declareProxy('::Test::TestIntf')

if 'TestIntfPrx' not in _M_Test.__dict__:
    _M_Test.TestIntfPrx = None
    class TestIntfPrx(_M_Test.DelayedTestIntfPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new TestIntfPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def shutdown(self, context=None):
            return _M_Test.TestIntf._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.TestIntf._op_shutdown.invokeAsync(self, ((), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.TestIntfPrx.ice_checkedCast(proxy, '::Test::TestIntf', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.TestIntfPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'
    _M_Test._t_TestIntfPrx = IcePy.defineProxy('::Test::TestIntf', TestIntfPrx)

    _M_Test.TestIntfPrx = TestIntfPrx
    del TestIntfPrx

    _M_Test.TestIntf = None
    class TestIntf(_M_Test.DelayedTestIntf):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::DelayedTestIntf', '::Test::TestIntf')

        def ice_id(self, current=None):
            return '::Test::TestIntf'

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntf'

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_TestIntfDisp)

        __repr__ = __str__

    TestIntf._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.TestIntf = TestIntf
    del TestIntf

if 'TestIntfBidir' not in _M_Test.__dict__:
    _M_Test._t_TestIntfBidirPrx = IcePy.declareProxy('::Test::TestIntfBidir')

if 'TestIntfBidirPrx' not in _M_Test.__dict__:
    _M_Test.TestIntfBidirPrx = None
    class TestIntfBidirPrx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new TestIntfBidirPrx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def makeSleep(self, aborted, ms, target, context=None):
            return _M_Test.TestIntfBidir._op_makeSleep.invoke(self, ((aborted, ms, target), context))

        def makeSleepAsync(self, aborted, ms, target, context=None):
            return _M_Test.TestIntfBidir._op_makeSleep.invokeAsync(self, ((aborted, ms, target), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.TestIntfBidirPrx.ice_checkedCast(proxy, '::Test::TestIntfBidir', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.TestIntfBidirPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntfBidir'
    _M_Test._t_TestIntfBidirPrx = IcePy.defineProxy('::Test::TestIntfBidir', TestIntfBidirPrx)

    _M_Test.TestIntfBidirPrx = TestIntfBidirPrx
    del TestIntfBidirPrx

    _M_Test.TestIntfBidir = None
    class TestIntfBidir(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::TestIntfBidir')

        def ice_id(self, current=None):
            return '::Test::TestIntfBidir'

        @staticmethod
        def ice_staticId():
            return '::Test::TestIntfBidir'

        def makeSleep(self, aborted, ms, target, current=None):
            raise NotImplementedError("servant method 'makeSleep' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_TestIntfBidirDisp)

        __repr__ = __str__

    TestIntfBidir._op_makeSleep = IcePy.Operation('makeSleep', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0), ((), IcePy._t_int, False, 0), ((), _M_Test._t_DelayedTestIntfPrx, False, 0)), (), None, ())

    _M_Test.TestIntfBidir = TestIntfBidir
    del TestIntfBidir

# End of module Test
