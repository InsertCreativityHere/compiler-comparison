# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file `NoPackage.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins

# Start of module Test1
_M_Test1 = Ice.openModule('Test1')
__name__ = 'Test1'

if 'C1' not in _M_Test1.__dict__:
    _M_Test1.C1 = Ice.createTempClass()
    class C1(Ice.Value):
        def __init__(self, i=0):
            self.i = i

        def ice_id(self):
            return '::Test1::C1'

        @staticmethod
        def ice_staticId():
            return '::Test1::C1'

        def __str__(self):
            return IcePy.stringify(self, _M_Test1._t_C1)

        __repr__ = __str__

    _M_Test1._t_C1 = IcePy.defineValue('::Test1::C1', C1, -1, (), False, None, (('i', (), IcePy._t_int, False, 0),))
    C1._ice_type = _M_Test1._t_C1

    _M_Test1.C1 = C1
    del C1

if 'C2' not in _M_Test1.__dict__:
    _M_Test1.C2 = Ice.createTempClass()
    class C2(_M_Test1.C1):
        def __init__(self, i=0, l=0):
            _M_Test1.C1.__init__(self, i)
            self.l = l

        def ice_id(self):
            return '::Test1::C2'

        @staticmethod
        def ice_staticId():
            return '::Test1::C2'

        def __str__(self):
            return IcePy.stringify(self, _M_Test1._t_C2)

        __repr__ = __str__

    _M_Test1._t_C2 = IcePy.defineValue('::Test1::C2', C2, -1, (), False, _M_Test1._t_C1, (('l', (), IcePy._t_long, False, 0),))
    C2._ice_type = _M_Test1._t_C2

    _M_Test1.C2 = C2
    del C2

if 'E1' not in _M_Test1.__dict__:
    _M_Test1.E1 = Ice.createTempClass()
    class E1(Ice.UserException):
        def __init__(self, i=0):
            self.i = i

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test1::E1'

    _M_Test1._t_E1 = IcePy.defineException('::Test1::E1', E1, (), None, (('i', (), IcePy._t_int, False, 0),))
    E1._ice_type = _M_Test1._t_E1

    _M_Test1.E1 = E1
    del E1

if 'E2' not in _M_Test1.__dict__:
    _M_Test1.E2 = Ice.createTempClass()
    class E2(_M_Test1.E1):
        def __init__(self, i=0, l=0):
            _M_Test1.E1.__init__(self, i)
            self.l = l

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test1::E2'

    _M_Test1._t_E2 = IcePy.defineException('::Test1::E2', E2, (), _M_Test1._t_E1, (('l', (), IcePy._t_long, False, 0),))
    E2._ice_type = _M_Test1._t_E2

    _M_Test1.E2 = E2
    del E2

if '_def' not in _M_Test1.__dict__:
    _M_Test1._def = Ice.createTempClass()
    class _def(Ice.UserException):
        """
        Test keyword escape.
        """
        def __init__(self, i=0):
            self.i = i

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test1::def'

    _M_Test1._t__def = IcePy.defineException('::Test1::def', _def, (), None, (('i', (), IcePy._t_int, False, 0),))
    _def._ice_type = _M_Test1._t__def

    _M_Test1._def = _def
    del _def

# End of module Test1
