# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.0-alpha.0
#
# <auto-generated>
#
# Generated from file 'ClientPrivate.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import builtins as _builtins
import Test_ice

# Included module Test
_M_Test = Ice.openModule('Test')

# Start of module Test
__name__ = 'Test'

if 'Initial2Prx' not in _M_Test.__dict__:
    _M_Test.Initial2Prx = None
    class Initial2Prx(Ice.ObjectPrx):

        def __init__(self, communicator, proxyString):
            """
            Creates a new Initial2Prx proxy
            
            Parameters
            ----------
            communicator : Ice.Communicator
                The communicator of the new proxy.
            proxyString : str
                The string representation of the proxy.
            
            Raises
            ------
            ParseException
                Thrown when proxyString is not a valid proxy string.
            """
            super().__init__(communicator, proxyString)

        def opClassAndUnknownOptional(self, p, ovs=None, context=None):
            return _M_Test.Initial2._op_opClassAndUnknownOptional.invoke(self, ((p, ovs), context))

        def opClassAndUnknownOptionalAsync(self, p, ovs, context=None):
            return _M_Test.Initial2._op_opClassAndUnknownOptional.invokeAsync(self, ((p, ovs), context))

        def opVoid(self, a=None, v=None, context=None):
            return _M_Test.Initial2._op_opVoid.invoke(self, ((a, v), context))

        def opVoidAsync(self, a, v, context=None):
            return _M_Test.Initial2._op_opVoid.invokeAsync(self, ((a, v), context))

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.Initial2Prx.ice_checkedCast(proxy, '::Test::Initial2', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.Initial2Prx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Initial2'
    _M_Test._t_Initial2Prx = IcePy.defineProxy('::Test::Initial2', Initial2Prx)

    _M_Test.Initial2Prx = Initial2Prx
    del Initial2Prx

    _M_Test.Initial2 = None
    class Initial2(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Initial2')

        def ice_id(self, current=None):
            return '::Test::Initial2'

        @staticmethod
        def ice_staticId():
            return '::Test::Initial2'

        def opClassAndUnknownOptional(self, p, ovs, current=None):
            raise NotImplementedError("servant method 'opClassAndUnknownOptional' not implemented")

        def opVoid(self, a, v, current=None):
            raise NotImplementedError("servant method 'opVoid' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_Initial2Disp)

        __repr__ = __str__

    Initial2._op_opClassAndUnknownOptional = IcePy.Operation('opClassAndUnknownOptional', Ice.OperationMode.Normal, False, None, (), (((), _M_Test._t_A, False, 0), ((), _M_Test._t_VarStruct, True, 1)), (), None, ())
    Initial2._op_opVoid = IcePy.Operation('opVoid', Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, True, 1), ((), IcePy._t_string, True, 2)), (), None, ())

    _M_Test.Initial2 = Initial2
    del Initial2

# End of module Test
