# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `Test.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

if 'UE' not in _M_Test.__dict__:
    _M_Test.UE = Ice.createTempClass()
    class UE(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Test::UE'

    _M_Test._t_UE = IcePy.defineException('::Test::UE', UE, (), False, None, ())
    UE._ice_type = _M_Test._t_UE

    _M_Test.UE = UE
    del UE

_M_Test._t_Hello = IcePy.defineValue('::Test::Hello', Ice.Value, -1, (), False, True, None, ())

if 'HelloPrx' not in _M_Test.__dict__:
    _M_Test.HelloPrx = Ice.createTempClass()
    class HelloPrx(Ice.ObjectPrx):

        def sayHello(self, delay, context=None):
            return _M_Test.Hello._op_sayHello.invoke(self, ((delay, ), context))

        def sayHelloAsync(self, delay, context=None):
            return _M_Test.Hello._op_sayHello.invokeAsync(self, ((delay, ), context))

        def begin_sayHello(self, delay, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Hello._op_sayHello.begin(self, ((delay, ), _response, _ex, _sent, context))

        def end_sayHello(self, _r):
            return _M_Test.Hello._op_sayHello.end(self, _r)

        def add(self, s1, s2, context=None):
            return _M_Test.Hello._op_add.invoke(self, ((s1, s2), context))

        def addAsync(self, s1, s2, context=None):
            return _M_Test.Hello._op_add.invokeAsync(self, ((s1, s2), context))

        def begin_add(self, s1, s2, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Hello._op_add.begin(self, ((s1, s2), _response, _ex, _sent, context))

        def end_add(self, _r):
            return _M_Test.Hello._op_add.end(self, _r)

        def raiseUE(self, context=None):
            return _M_Test.Hello._op_raiseUE.invoke(self, ((), context))

        def raiseUEAsync(self, context=None):
            return _M_Test.Hello._op_raiseUE.invokeAsync(self, ((), context))

        def begin_raiseUE(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Hello._op_raiseUE.begin(self, ((), _response, _ex, _sent, context))

        def end_raiseUE(self, _r):
            return _M_Test.Hello._op_raiseUE.end(self, _r)

        def shutdown(self, context=None):
            return _M_Test.Hello._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.Hello._op_shutdown.invokeAsync(self, ((), context))

        def begin_shutdown(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Hello._op_shutdown.begin(self, ((), _response, _ex, _sent, context))

        def end_shutdown(self, _r):
            return _M_Test.Hello._op_shutdown.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.HelloPrx.ice_checkedCast(proxy, '::Test::Hello', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.HelloPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Hello'
    _M_Test._t_HelloPrx = IcePy.defineProxy('::Test::Hello', HelloPrx)

    _M_Test.HelloPrx = HelloPrx
    del HelloPrx

    _M_Test.Hello = Ice.createTempClass()
    class Hello(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Hello')

        def ice_id(self, current=None):
            return '::Test::Hello'

        @staticmethod
        def ice_staticId():
            return '::Test::Hello'

        def sayHello(self, delay, current=None):
            raise NotImplementedError("servant method 'sayHello' not implemented")

        def add(self, s1, s2, current=None):
            raise NotImplementedError("servant method 'add' not implemented")

        def raiseUE(self, current=None):
            raise NotImplementedError("servant method 'raiseUE' not implemented")

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_HelloDisp)

        __repr__ = __str__

    _M_Test._t_HelloDisp = IcePy.defineClass('::Test::Hello', Hello, (), None, ())
    Hello._ice_type = _M_Test._t_HelloDisp

    Hello._op_sayHello = IcePy.Operation('sayHello', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Hello._op_add = IcePy.Operation('add', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    Hello._op_raiseUE = IcePy.Operation('raiseUE', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_Test._t_UE,))
    Hello._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.Hello = Hello
    del Hello

# End of module Test
