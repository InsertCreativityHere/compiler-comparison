# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `TestServer.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Ice.SliceChecksumDict_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module Test
_M_Test = Ice.openModule('Test')
__name__ = 'Test'

_M_Test._t_Checksum = IcePy.defineValue('::Test::Checksum', Ice.Value, -1, (), False, True, None, ())

if 'ChecksumPrx' not in _M_Test.__dict__:
    _M_Test.ChecksumPrx = Ice.createTempClass()
    class ChecksumPrx(Ice.ObjectPrx):

        def getSliceChecksums(self, context=None):
            return _M_Test.Checksum._op_getSliceChecksums.invoke(self, ((), context))

        def getSliceChecksumsAsync(self, context=None):
            return _M_Test.Checksum._op_getSliceChecksums.invokeAsync(self, ((), context))

        def begin_getSliceChecksums(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Checksum._op_getSliceChecksums.begin(self, ((), _response, _ex, _sent, context))

        def end_getSliceChecksums(self, _r):
            return _M_Test.Checksum._op_getSliceChecksums.end(self, _r)

        def shutdown(self, context=None):
            return _M_Test.Checksum._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Test.Checksum._op_shutdown.invokeAsync(self, ((), context))

        def begin_shutdown(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Test.Checksum._op_shutdown.begin(self, ((), _response, _ex, _sent, context))

        def end_shutdown(self, _r):
            return _M_Test.Checksum._op_shutdown.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Test.ChecksumPrx.ice_checkedCast(proxy, '::Test::Checksum', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Test.ChecksumPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Test::Checksum'
    _M_Test._t_ChecksumPrx = IcePy.defineProxy('::Test::Checksum', ChecksumPrx)

    _M_Test.ChecksumPrx = ChecksumPrx
    del ChecksumPrx

    _M_Test.Checksum = Ice.createTempClass()
    class Checksum(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Test::Checksum')

        def ice_id(self, current=None):
            return '::Test::Checksum'

        @staticmethod
        def ice_staticId():
            return '::Test::Checksum'

        def getSliceChecksums(self, current=None):
            raise NotImplementedError("servant method 'getSliceChecksums' not implemented")

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Test._t_ChecksumDisp)

        __repr__ = __str__

    _M_Test._t_ChecksumDisp = IcePy.defineClass('::Test::Checksum', Checksum, (), None, ())
    Checksum._ice_type = _M_Test._t_ChecksumDisp

    Checksum._op_getSliceChecksums = IcePy.Operation('getSliceChecksums', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Ice._t_SliceChecksumDict, False, 0), ())
    Checksum._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Test.Checksum = Checksum
    del Checksum

# End of module Test
