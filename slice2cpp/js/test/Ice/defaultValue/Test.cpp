//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::Base> iceC_Test_Base_init("::Test::Base");

const ::IceInternal::DefaultValueFactoryInit<::Test::Derived> iceC_Test_Derived_init("::Test::Derived");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::BaseEx> iceC_Test_BaseEx_init("::Test::BaseEx");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::DerivedEx> iceC_Test_DerivedEx_init("::Test::DerivedEx");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::ExceptionNoDefaultsBase> iceC_Test_ExceptionNoDefaultsBase_init("::Test::ExceptionNoDefaultsBase");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::ExceptionNoDefaults> iceC_Test_ExceptionNoDefaults_init("::Test::ExceptionNoDefaults");

const ::IceInternal::DefaultValueFactoryInit<::Test::ClassNoDefaultsBase> iceC_Test_ClassNoDefaultsBase_init("::Test::ClassNoDefaultsBase");

const ::IceInternal::DefaultValueFactoryInit<::Test::ClassNoDefaults> iceC_Test_ClassNoDefaults_init("::Test::ClassNoDefaults");

}

Test::BaseEx::~BaseEx()
{
}

const ::std::string&
Test::BaseEx::ice_staticId()
{
    static const ::std::string typeId = "::Test::BaseEx";
    return typeId;
}

Test::DerivedEx::~DerivedEx()
{
}

const ::std::string&
Test::DerivedEx::ice_staticId()
{
    static const ::std::string typeId = "::Test::DerivedEx";
    return typeId;
}

Test::ExceptionNoDefaultsBase::~ExceptionNoDefaultsBase()
{
}

const ::std::string&
Test::ExceptionNoDefaultsBase::ice_staticId()
{
    static const ::std::string typeId = "::Test::ExceptionNoDefaultsBase";
    return typeId;
}

Test::ExceptionNoDefaults::~ExceptionNoDefaults()
{
}

const ::std::string&
Test::ExceptionNoDefaults::ice_staticId()
{
    static const ::std::string typeId = "::Test::ExceptionNoDefaults";
    return typeId;
}

Test::Base::~Base()
{
}

const ::std::string&
Test::Base::ice_staticId()
{
    static const ::std::string typeId = "::Test::Base";
    return typeId;
}

Test::Derived::~Derived()
{
}

const ::std::string&
Test::Derived::ice_staticId()
{
    static const ::std::string typeId = "::Test::Derived";
    return typeId;
}

Test::ClassNoDefaultsBase::~ClassNoDefaultsBase()
{
}

const ::std::string&
Test::ClassNoDefaultsBase::ice_staticId()
{
    static const ::std::string typeId = "::Test::ClassNoDefaultsBase";
    return typeId;
}

Test::ClassNoDefaults::~ClassNoDefaults()
{
}

const ::std::string&
Test::ClassNoDefaults::ice_staticId()
{
    static const ::std::string typeId = "::Test::ClassNoDefaults";
    return typeId;
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::BaseEx> iceC_Test_BaseEx_init("::Test::BaseEx");

}

Test::BaseEx::BaseEx() :
    boolFalse(false),
    boolTrue(true),
    b(1),
    s(2),
    i(3),
    l(ICE_INT64(4)),
    f(5.1F),
    d(6.2),
    str("foo \\ \"bar\n \r\n\t\v\f\a\b\?"),
    zeroI(0),
    zeroL(ICE_INT64(0)),
    zeroF(0.0F),
    zeroDotF(0.0F),
    zeroD(0),
    zeroDotD(0)
{
}

Test::BaseEx::BaseEx(bool boolFalse, bool boolTrue, ::Ice::Byte b, ::Ice::Short s, ::Ice::Int i, ::Ice::Long l, ::Ice::Float f, ::Ice::Double d, const ::std::string& str, const ::std::string& noDefault, ::Ice::Int zeroI, ::Ice::Long zeroL, ::Ice::Float zeroF, ::Ice::Float zeroDotF, ::Ice::Double zeroD, ::Ice::Double zeroDotD) :
    ::Ice::UserException(),
    boolFalse(boolFalse),
    boolTrue(boolTrue),
    b(b),
    s(s),
    i(i),
    l(l),
    f(f),
    d(d),
    str(str),
    noDefault(noDefault),
    zeroI(zeroI),
    zeroL(zeroL),
    zeroF(zeroF),
    zeroDotF(zeroDotF),
    zeroD(zeroD),
    zeroDotD(zeroDotD)
{
}

#ifdef ICE_CPP11_COMPILER
Test::BaseEx::~BaseEx()
{
}
#else
Test::BaseEx::~BaseEx() throw()
{
}
#endif

::std::string
Test::BaseEx::ice_id() const
{
    return "::Test::BaseEx";
}

Test::BaseEx*
Test::BaseEx::ice_clone() const
{
    return new BaseEx(*this);
}

void
Test::BaseEx::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::BaseEx::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::BaseEx", -1, true);
    ::Ice::StreamWriter< BaseEx, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::BaseEx::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< BaseEx, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::DerivedEx> iceC_Test_DerivedEx_init("::Test::DerivedEx");

}

Test::DerivedEx::DerivedEx() :
    c1(ConstColor1),
    c2(ConstColor2),
    c3(ConstColor3),
    nc1(ConstNestedColor1),
    nc2(ConstNestedColor2),
    nc3(ConstNestedColor3)
{
}

Test::DerivedEx::DerivedEx(bool boolFalse, bool boolTrue, ::Ice::Byte b, ::Ice::Short s, ::Ice::Int i, ::Ice::Long l, ::Ice::Float f, ::Ice::Double d, const ::std::string& str, const ::std::string& noDefault, ::Ice::Int zeroI, ::Ice::Long zeroL, ::Ice::Float zeroF, ::Ice::Float zeroDotF, ::Ice::Double zeroD, ::Ice::Double zeroDotD, Color c1, Color c2, Color c3, ::Test::Nested::Color nc1, ::Test::Nested::Color nc2, ::Test::Nested::Color nc3) :
    BaseEx(boolFalse, boolTrue, b, s, i, l, f, d, str, noDefault, zeroI, zeroL, zeroF, zeroDotF, zeroD, zeroDotD),
    c1(c1),
    c2(c2),
    c3(c3),
    nc1(nc1),
    nc2(nc2),
    nc3(nc3)
{
}

#ifdef ICE_CPP11_COMPILER
Test::DerivedEx::~DerivedEx()
{
}
#else
Test::DerivedEx::~DerivedEx() throw()
{
}
#endif

::std::string
Test::DerivedEx::ice_id() const
{
    return "::Test::DerivedEx";
}

Test::DerivedEx*
Test::DerivedEx::ice_clone() const
{
    return new DerivedEx(*this);
}

void
Test::DerivedEx::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::DerivedEx::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::DerivedEx", -1, false);
    ::Ice::StreamWriter< DerivedEx, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    BaseEx::_writeImpl(ostr);
}

void
Test::DerivedEx::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< DerivedEx, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    BaseEx::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::ExceptionNoDefaultsBase> iceC_Test_ExceptionNoDefaultsBase_init("::Test::ExceptionNoDefaultsBase");

}

Test::ExceptionNoDefaultsBase::ExceptionNoDefaultsBase(const ::std::string& str, Color c1, const ByteSeq& bs) :
    ::Ice::UserException(),
    str(str),
    c1(c1),
    bs(bs)
{
}

#ifdef ICE_CPP11_COMPILER
Test::ExceptionNoDefaultsBase::~ExceptionNoDefaultsBase()
{
}
#else
Test::ExceptionNoDefaultsBase::~ExceptionNoDefaultsBase() throw()
{
}
#endif

::std::string
Test::ExceptionNoDefaultsBase::ice_id() const
{
    return "::Test::ExceptionNoDefaultsBase";
}

Test::ExceptionNoDefaultsBase*
Test::ExceptionNoDefaultsBase::ice_clone() const
{
    return new ExceptionNoDefaultsBase(*this);
}

void
Test::ExceptionNoDefaultsBase::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::ExceptionNoDefaultsBase::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::ExceptionNoDefaultsBase", -1, true);
    ::Ice::StreamWriter< ExceptionNoDefaultsBase, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::ExceptionNoDefaultsBase::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ExceptionNoDefaultsBase, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::ExceptionNoDefaults> iceC_Test_ExceptionNoDefaults_init("::Test::ExceptionNoDefaults");

}

Test::ExceptionNoDefaults::ExceptionNoDefaults(const ::std::string& str, Color c1, const ByteSeq& bs, const InnerStruct& st, const IntStringDict& dict) :
    ExceptionNoDefaultsBase(str, c1, bs),
    st(st),
    dict(dict)
{
}

#ifdef ICE_CPP11_COMPILER
Test::ExceptionNoDefaults::~ExceptionNoDefaults()
{
}
#else
Test::ExceptionNoDefaults::~ExceptionNoDefaults() throw()
{
}
#endif

::std::string
Test::ExceptionNoDefaults::ice_id() const
{
    return "::Test::ExceptionNoDefaults";
}

Test::ExceptionNoDefaults*
Test::ExceptionNoDefaults::ice_clone() const
{
    return new ExceptionNoDefaults(*this);
}

void
Test::ExceptionNoDefaults::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::ExceptionNoDefaults::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::ExceptionNoDefaults", -1, false);
    ::Ice::StreamWriter< ExceptionNoDefaults, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    ExceptionNoDefaultsBase::_writeImpl(ostr);
}

void
Test::ExceptionNoDefaults::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ExceptionNoDefaults, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    ExceptionNoDefaultsBase::_readImpl(istr);
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Base* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Base>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Base;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Base::_newInstance() const
{
    return new Base;
}
/// \endcond

const ::std::string&
IceProxy::Test::Base::ice_staticId()
{
    return ::Test::Base::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Derived* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Derived>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Derived;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Derived::_newInstance() const
{
    return new Derived;
}
/// \endcond

const ::std::string&
IceProxy::Test::Derived::ice_staticId()
{
    return ::Test::Derived::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(ClassNoDefaultsBase* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ClassNoDefaultsBase>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ClassNoDefaultsBase;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::ClassNoDefaultsBase::_newInstance() const
{
    return new ClassNoDefaultsBase;
}
/// \endcond

const ::std::string&
IceProxy::Test::ClassNoDefaultsBase::ice_staticId()
{
    return ::Test::ClassNoDefaultsBase::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(ClassNoDefaults* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ClassNoDefaults>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ClassNoDefaults;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::ClassNoDefaults::_newInstance() const
{
    return new ClassNoDefaults;
}
/// \endcond

const ::std::string&
IceProxy::Test::ClassNoDefaults::ice_staticId()
{
    return ::Test::ClassNoDefaults::ice_staticId();
}

Test::Base::~Base()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Base* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::Base::ice_clone() const
{
    ::Ice::Object* p = new Base(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_Base_ids[2] =
{
    "::Ice::Object",
    "::Test::Base"
};

}

bool
Test::Base::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Base_ids, iceC_Test_Base_ids + 2, s);
}

::std::vector< ::std::string>
Test::Base::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Base_ids[0], &iceC_Test_Base_ids[2]);
}

const ::std::string&
Test::Base::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Base::ice_staticId()
{
    static const ::std::string typeId = "::Test::Base";
    return typeId;
}

/// \cond STREAM
void
Test::Base::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Base, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Base::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Base, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Base> iceC_Test_Base_init("::Test::Base");
}

::Ice::ValueFactoryPtr
Test::Base::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Base::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(BasePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = BasePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Base::ice_staticId(), v);
    }
}
/// \endcond

Test::Derived::~Derived()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Derived* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::Derived::ice_clone() const
{
    ::Ice::Object* p = new Derived(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_Derived_ids[3] =
{
    "::Ice::Object",
    "::Test::Base",
    "::Test::Derived"
};

}

bool
Test::Derived::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Derived_ids, iceC_Test_Derived_ids + 3, s);
}

::std::vector< ::std::string>
Test::Derived::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Derived_ids[0], &iceC_Test_Derived_ids[3]);
}

const ::std::string&
Test::Derived::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Derived::ice_staticId()
{
    static const ::std::string typeId = "::Test::Derived";
    return typeId;
}

/// \cond STREAM
void
Test::Derived::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< Derived, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    Base::_iceWriteImpl(ostr);
}

void
Test::Derived::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Derived, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    Base::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Derived> iceC_Test_Derived_init("::Test::Derived");
}

::Ice::ValueFactoryPtr
Test::Derived::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Derived::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(DerivedPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = DerivedPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Derived::ice_staticId(), v);
    }
}
/// \endcond

Test::ClassNoDefaultsBase::~ClassNoDefaultsBase()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(ClassNoDefaultsBase* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::ClassNoDefaultsBase::ice_clone() const
{
    ::Ice::Object* p = new ClassNoDefaultsBase(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_ClassNoDefaultsBase_ids[2] =
{
    "::Ice::Object",
    "::Test::ClassNoDefaultsBase"
};

}

bool
Test::ClassNoDefaultsBase::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_ClassNoDefaultsBase_ids, iceC_Test_ClassNoDefaultsBase_ids + 2, s);
}

::std::vector< ::std::string>
Test::ClassNoDefaultsBase::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_ClassNoDefaultsBase_ids[0], &iceC_Test_ClassNoDefaultsBase_ids[2]);
}

const ::std::string&
Test::ClassNoDefaultsBase::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::ClassNoDefaultsBase::ice_staticId()
{
    static const ::std::string typeId = "::Test::ClassNoDefaultsBase";
    return typeId;
}

/// \cond STREAM
void
Test::ClassNoDefaultsBase::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< ClassNoDefaultsBase, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::ClassNoDefaultsBase::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ClassNoDefaultsBase, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::ClassNoDefaultsBase> iceC_Test_ClassNoDefaultsBase_init("::Test::ClassNoDefaultsBase");
}

::Ice::ValueFactoryPtr
Test::ClassNoDefaultsBase::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::ClassNoDefaultsBase::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(ClassNoDefaultsBasePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ClassNoDefaultsBasePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(ClassNoDefaultsBase::ice_staticId(), v);
    }
}
/// \endcond

Test::ClassNoDefaults::~ClassNoDefaults()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(ClassNoDefaults* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::ClassNoDefaults::ice_clone() const
{
    ::Ice::Object* p = new ClassNoDefaults(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_ClassNoDefaults_ids[3] =
{
    "::Ice::Object",
    "::Test::ClassNoDefaults",
    "::Test::ClassNoDefaultsBase"
};

}

bool
Test::ClassNoDefaults::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_ClassNoDefaults_ids, iceC_Test_ClassNoDefaults_ids + 3, s);
}

::std::vector< ::std::string>
Test::ClassNoDefaults::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_ClassNoDefaults_ids[0], &iceC_Test_ClassNoDefaults_ids[3]);
}

const ::std::string&
Test::ClassNoDefaults::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::ClassNoDefaults::ice_staticId()
{
    static const ::std::string typeId = "::Test::ClassNoDefaults";
    return typeId;
}

/// \cond STREAM
void
Test::ClassNoDefaults::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< ClassNoDefaults, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    ClassNoDefaultsBase::_iceWriteImpl(ostr);
}

void
Test::ClassNoDefaults::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ClassNoDefaults, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    ClassNoDefaultsBase::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::ClassNoDefaults> iceC_Test_ClassNoDefaults_init("::Test::ClassNoDefaults");
}

::Ice::ValueFactoryPtr
Test::ClassNoDefaults::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::ClassNoDefaults::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(ClassNoDefaultsPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ClassNoDefaultsPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(ClassNoDefaults::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
