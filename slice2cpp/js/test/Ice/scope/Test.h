//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{
    struct S;

    using SMap = ::std::map<::std::string, S>;

    using SSeq = ::std::vector<S>;

    class C;
    using CPtr = ::std::shared_ptr<C>;

    using CMap = ::std::map<::std::string, CPtr>;

    using CSeq = ::std::vector<CPtr>;

    enum class E1 : ::std::uint8_t
    {
        v1,
        v2,
        v3
    };

    struct S1;

    class C1;
    using C1Ptr = ::std::shared_ptr<C1>;

    struct S2;

    class C2;
    using C2Ptr = ::std::shared_ptr<C2>;

    class IPrx;

    using IMap = ::std::map<::std::string, ::std::optional<IPrx>>;

    using ISeq = ::std::vector<::std::optional<IPrx>>;


    namespace Inner
    {
        struct S;


        namespace Inner2
        {
            struct S;

            using SMap = ::std::map<::std::string, S>;

            using SSeq = ::std::vector<S>;

            class C;
            using CPtr = ::std::shared_ptr<C>;

            using CMap = ::std::map<::std::string, CPtr>;

            using CSeq = ::std::vector<CPtr>;

            class IPrx;

            using IMap = ::std::map<::std::string, ::std::optional<IPrx>>;

            using ISeq = ::std::vector<::std::optional<IPrx>>;

        }
        class C;
        using CPtr = ::std::shared_ptr<C>;

        using SSeq = ::std::vector<::Test::Inner::Inner2::S>;

        using SMap = ::std::map<::std::string, ::Test::Inner::Inner2::S>;

        using CMap = ::std::map<::std::string, ::Test::Inner::Inner2::CPtr>;

        using CSeq = ::std::vector<::Test::Inner::Inner2::CPtr>;

        class IPrx;

        using IMap = ::std::map<::std::string, ::std::optional<IPrx>>;

        using ISeq = ::std::vector<::std::optional<IPrx>>;

    }
}

namespace Inner
{

    namespace Test
    {

        namespace Inner2
        {
            class IPrx;

        }
    }
}

namespace Test
{

class IPrx : public ::Ice::Proxy<IPrx, ::Ice::ObjectPrx>
{
public:

    S opS(const S& s1, S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<S, S>> opSAsync(const S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opSAsync(const S& s1, ::std::function<void(::Test::S, ::Test::S)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<S, S>>>&, const S&, const ::Ice::Context&) const;
    /// \endcond

    SSeq opSSeq(const SSeq& s1, SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<SSeq, SSeq>> opSSeqAsync(const SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opSSeqAsync(const SSeq& s1, ::std::function<void(::Test::SSeq, ::Test::SSeq)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SSeq, SSeq>>>&, const SSeq&, const ::Ice::Context&) const;
    /// \endcond

    SMap opSMap(const SMap& s1, SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<SMap, SMap>> opSMapAsync(const SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opSMapAsync(const SMap& s1, ::std::function<void(::Test::SMap, ::Test::SMap)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SMap, SMap>>>&, const SMap&, const ::Ice::Context&) const;
    /// \endcond

    CPtr opC(const CPtr& c1, CPtr& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<CPtr, CPtr>> opCAsync(const CPtr& c1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opCAsync(const CPtr& c1, ::std::function<void(::Test::CPtr, ::Test::CPtr)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CPtr, CPtr>>>&, const CPtr&, const ::Ice::Context&) const;
    /// \endcond

    CSeq opCSeq(const CSeq& s1, CSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<CSeq, CSeq>> opCSeqAsync(const CSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opCSeqAsync(const CSeq& s1, ::std::function<void(::Test::CSeq, ::Test::CSeq)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CSeq, CSeq>>>&, const CSeq&, const ::Ice::Context&) const;
    /// \endcond

    CMap opCMap(const CMap& c1, CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<CMap, CMap>> opCMapAsync(const CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opCMapAsync(const CMap& c1, ::std::function<void(::Test::CMap, ::Test::CMap)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CMap, CMap>>>&, const CMap&, const ::Ice::Context&) const;
    /// \endcond

    E1 opE1(E1 E1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<E1> opE1Async(E1 E1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opE1Async(E1 E1, ::std::function<void(::Test::E1)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opE1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<E1>>&, E1, const ::Ice::Context&) const;
    /// \endcond

    S1 opS1(const S1& S1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<S1> opS1Async(const S1& S1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opS1Async(const S1& S1, ::std::function<void(::Test::S1)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opS1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<S1>>&, const S1&, const ::Ice::Context&) const;
    /// \endcond

    C1Ptr opC1(const C1Ptr& C1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<C1Ptr> opC1Async(const C1Ptr& C1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opC1Async(const C1Ptr& C1, ::std::function<void(::Test::C1Ptr)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opC1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<C1Ptr>>&, const C1Ptr&, const ::Ice::Context&) const;
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    explicit IPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(const IPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(IPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    IPrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    IPrx& operator=(const IPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    IPrx& operator=(IPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static IPrx _fromReference(::IceInternal::ReferencePtr ref) { return IPrx(::std::move(ref)); }

protected:

    IPrx() = default;

    explicit IPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

namespace Inner
{

namespace Inner2
{

class IPrx : public ::Ice::Proxy<IPrx, ::Ice::ObjectPrx>
{
public:

    S opS(const S& s1, S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<S, S>> opSAsync(const S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opSAsync(const S& s1, ::std::function<void(::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<S, S>>>&, const S&, const ::Ice::Context&) const;
    /// \endcond

    SSeq opSSeq(const SSeq& s1, SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<SSeq, SSeq>> opSSeqAsync(const SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opSSeqAsync(const SSeq& s1, ::std::function<void(::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SSeq, SSeq>>>&, const SSeq&, const ::Ice::Context&) const;
    /// \endcond

    SMap opSMap(const SMap& s1, SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<SMap, SMap>> opSMapAsync(const SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opSMapAsync(const SMap& s1, ::std::function<void(::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SMap, SMap>>>&, const SMap&, const ::Ice::Context&) const;
    /// \endcond

    CPtr opC(const CPtr& c1, CPtr& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<CPtr, CPtr>> opCAsync(const CPtr& c1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opCAsync(const CPtr& c1, ::std::function<void(::Test::Inner::Inner2::CPtr, ::Test::Inner::Inner2::CPtr)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CPtr, CPtr>>>&, const CPtr&, const ::Ice::Context&) const;
    /// \endcond

    CSeq opCSeq(const CSeq& c1, CSeq& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<CSeq, CSeq>> opCSeqAsync(const CSeq& c1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opCSeqAsync(const CSeq& c1, ::std::function<void(::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CSeq, CSeq>>>&, const CSeq&, const ::Ice::Context&) const;
    /// \endcond

    CMap opCMap(const CMap& c1, CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<CMap, CMap>> opCMapAsync(const CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opCMapAsync(const CMap& c1, ::std::function<void(::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CMap, CMap>>>&, const CMap&, const ::Ice::Context&) const;
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    explicit IPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(const IPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(IPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    IPrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    IPrx& operator=(const IPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    IPrx& operator=(IPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static IPrx _fromReference(::IceInternal::ReferencePtr ref) { return IPrx(::std::move(ref)); }

protected:

    IPrx() = default;

    explicit IPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

class IPrx : public ::Ice::Proxy<IPrx, ::Ice::ObjectPrx>
{
public:

    ::Test::Inner::Inner2::S opS(const ::Test::Inner::Inner2::S& s1, ::Test::Inner::Inner2::S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>> opSAsync(const ::Test::Inner::Inner2::S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opSAsync(const ::Test::Inner::Inner2::S& s1, ::std::function<void(::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>>>&, const ::Test::Inner::Inner2::S&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::Inner::Inner2::SSeq opSSeq(const ::Test::Inner::Inner2::SSeq& s1, ::Test::Inner::Inner2::SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>> opSSeqAsync(const ::Test::Inner::Inner2::SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opSSeqAsync(const ::Test::Inner::Inner2::SSeq& s1, ::std::function<void(::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>>>&, const ::Test::Inner::Inner2::SSeq&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::Inner::Inner2::SMap opSMap(const ::Test::Inner::Inner2::SMap& s1, ::Test::Inner::Inner2::SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>> opSMapAsync(const ::Test::Inner::Inner2::SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opSMapAsync(const ::Test::Inner::Inner2::SMap& s1, ::std::function<void(::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>>>&, const ::Test::Inner::Inner2::SMap&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::Inner::Inner2::CPtr opC(const ::Test::Inner::Inner2::CPtr& c1, ::Test::Inner::Inner2::CPtr& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::Inner::Inner2::CPtr, ::Test::Inner::Inner2::CPtr>> opCAsync(const ::Test::Inner::Inner2::CPtr& c1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opCAsync(const ::Test::Inner::Inner2::CPtr& c1, ::std::function<void(::Test::Inner::Inner2::CPtr, ::Test::Inner::Inner2::CPtr)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::CPtr, ::Test::Inner::Inner2::CPtr>>>&, const ::Test::Inner::Inner2::CPtr&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::Inner::Inner2::CSeq opCSeq(const ::Test::Inner::Inner2::CSeq& c1, ::Test::Inner::Inner2::CSeq& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>> opCSeqAsync(const ::Test::Inner::Inner2::CSeq& c1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opCSeqAsync(const ::Test::Inner::Inner2::CSeq& c1, ::std::function<void(::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>>>&, const ::Test::Inner::Inner2::CSeq&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::Inner::Inner2::CMap opCMap(const ::Test::Inner::Inner2::CMap& c1, ::Test::Inner::Inner2::CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>> opCMapAsync(const ::Test::Inner::Inner2::CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opCMapAsync(const ::Test::Inner::Inner2::CMap& c1, ::std::function<void(::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>>>&, const ::Test::Inner::Inner2::CMap&, const ::Ice::Context&) const;
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    explicit IPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(const IPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(IPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    IPrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    IPrx& operator=(const IPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    IPrx& operator=(IPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static IPrx _fromReference(::IceInternal::ReferencePtr ref) { return IPrx(::std::move(ref)); }

protected:

    IPrx() = default;

    explicit IPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

}

namespace Inner
{

namespace Test
{

namespace Inner2
{

class IPrx : public ::Ice::Proxy<IPrx, ::Ice::ObjectPrx>
{
public:

    ::Test::S opS(const ::Test::S& s1, ::Test::S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::S, ::Test::S>> opSAsync(const ::Test::S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opSAsync(const ::Test::S& s1, ::std::function<void(::Test::S, ::Test::S)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::S, ::Test::S>>>&, const ::Test::S&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::SSeq opSSeq(const ::Test::SSeq& s1, ::Test::SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::SSeq, ::Test::SSeq>> opSSeqAsync(const ::Test::SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opSSeqAsync(const ::Test::SSeq& s1, ::std::function<void(::Test::SSeq, ::Test::SSeq)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::SSeq, ::Test::SSeq>>>&, const ::Test::SSeq&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::SMap opSMap(const ::Test::SMap& s1, ::Test::SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::SMap, ::Test::SMap>> opSMapAsync(const ::Test::SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opSMapAsync(const ::Test::SMap& s1, ::std::function<void(::Test::SMap, ::Test::SMap)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::SMap, ::Test::SMap>>>&, const ::Test::SMap&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::CPtr opC(const ::Test::CPtr& c1, ::Test::CPtr& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::CPtr, ::Test::CPtr>> opCAsync(const ::Test::CPtr& c1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opCAsync(const ::Test::CPtr& c1, ::std::function<void(::Test::CPtr, ::Test::CPtr)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::CPtr, ::Test::CPtr>>>&, const ::Test::CPtr&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::CSeq opCSeq(const ::Test::CSeq& c1, ::Test::CSeq& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::CSeq, ::Test::CSeq>> opCSeqAsync(const ::Test::CSeq& c1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opCSeqAsync(const ::Test::CSeq& c1, ::std::function<void(::Test::CSeq, ::Test::CSeq)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::CSeq, ::Test::CSeq>>>&, const ::Test::CSeq&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::CMap opCMap(const ::Test::CMap& c1, ::Test::CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::CMap, ::Test::CMap>> opCMapAsync(const ::Test::CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opCMapAsync(const ::Test::CMap& c1, ::std::function<void(::Test::CMap, ::Test::CMap)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::CMap, ::Test::CMap>>>&, const ::Test::CMap&, const ::Ice::Context&) const;
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    explicit IPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(const IPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(IPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    IPrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    IPrx& operator=(const IPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    IPrx& operator=(IPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static IPrx _fromReference(::IceInternal::ReferencePtr ref) { return IPrx(::std::move(ref)); }

protected:

    IPrx() = default;

    explicit IPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

}

}

namespace Test
{

struct S
{
    ::std::int32_t v;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(v);
    }
};

class C : public ::Ice::Value
{
public:
    /**
     * Default constructor.
     */
    C() noexcept = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C(::Test::S s) noexcept :
        s(::std::move(s))
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::S&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    CPtr ice_clone() const { return ::std::static_pointer_cast<C>(_iceCloneImpl()); }

    ::Test::S s;

protected:
    C(const C&) = default;

    ::Ice::ValuePtr _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

/// \cond INTERNAL
static C _iceS_C_init;
/// \endcond

struct S1
{
    ::std::string s;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(s);
    }
};

class C1 : public ::Ice::Value
{
public:
    /**
     * Default constructor.
     */
    C1() noexcept = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C1(::std::string s) noexcept :
        s(::std::move(s))
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    C1Ptr ice_clone() const { return ::std::static_pointer_cast<C1>(_iceCloneImpl()); }

    ::std::string s;

protected:
    C1(const C1&) = default;

    ::Ice::ValuePtr _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

struct S2
{
    ::Test::E1 E1;
    ::Test::S1 S1;
    ::Test::C1Ptr C1;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::E1&, const ::Test::S1&, const ::Test::C1Ptr&> ice_tuple() const
    {
        return std::tie(E1, S1, C1);
    }
};

class C2 : public ::Ice::Value
{
public:
    /**
     * Default constructor.
     */
    C2() noexcept = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C2(::Test::E1 E1, ::Test::S1 S1, ::Test::C1Ptr C1) noexcept :
        E1(E1),
        S1(::std::move(S1)),
        C1(::std::move(C1))
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::E1&, const ::Test::S1&, const ::Test::C1Ptr&> ice_tuple() const
    {
        return std::tie(E1, S1, C1);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    C2Ptr ice_clone() const { return ::std::static_pointer_cast<C2>(_iceCloneImpl()); }

    ::Test::E1 E1;
    ::Test::S1 S1;
    ::Test::C1Ptr C1;

protected:
    C2(const C2&) = default;

    ::Ice::ValuePtr _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

namespace Inner
{

struct S
{
    ::std::int32_t v;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(v);
    }
};

namespace Inner2
{

struct S
{
    ::std::int32_t v;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(v);
    }
};

class C : public ::Ice::Value
{
public:
    /**
     * Default constructor.
     */
    C() noexcept = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C(::Test::Inner::Inner2::S s) noexcept :
        s(::std::move(s))
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::Inner::Inner2::S&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    CPtr ice_clone() const { return ::std::static_pointer_cast<C>(_iceCloneImpl()); }

    ::Test::Inner::Inner2::S s;

protected:
    C(const C&) = default;

    ::Ice::ValuePtr _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

class C : public ::Ice::Value
{
public:
    /**
     * Default constructor.
     */
    C() noexcept = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C(::Test::Inner::S s) noexcept :
        s(::std::move(s))
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::Inner::S&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    CPtr ice_clone() const { return ::std::static_pointer_cast<C>(_iceCloneImpl()); }

    ::Test::Inner::S s;

protected:
    C(const C&) = default;

    ::Ice::ValuePtr _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test
{

class I : public virtual ::Ice::Object
{
public:

    using ProxyType = IPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    virtual S opS(S s1, S& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opS(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual SSeq opSSeq(SSeq s1, SSeq& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opSSeq(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual SMap opSMap(SMap s1, SMap& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opSMap(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual CPtr opC(CPtr c1, CPtr& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opC(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual CSeq opCSeq(CSeq s1, CSeq& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opCSeq(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual CMap opCMap(CMap c1, CMap& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opCMap(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual E1 opE1(E1 E1, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opE1(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual S1 opS1(S1 S1, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opS1(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual C1Ptr opC1(C1Ptr C1, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opC1(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_shutdown(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using IPtr = ::std::shared_ptr<I>;

namespace Inner
{

namespace Inner2
{

class I : public virtual ::Ice::Object
{
public:

    using ProxyType = IPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    virtual S opS(S s1, S& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opS(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual SSeq opSSeq(SSeq s1, SSeq& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opSSeq(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual SMap opSMap(SMap s1, SMap& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opSMap(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual CPtr opC(CPtr c1, CPtr& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opC(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual CSeq opCSeq(CSeq c1, CSeq& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opCSeq(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual CMap opCMap(CMap c1, CMap& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opCMap(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_shutdown(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using IPtr = ::std::shared_ptr<I>;

}

class I : public virtual ::Ice::Object
{
public:

    using ProxyType = IPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    virtual ::Test::Inner::Inner2::S opS(::Test::Inner::Inner2::S s1, ::Test::Inner::Inner2::S& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opS(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::Test::Inner::Inner2::SSeq opSSeq(::Test::Inner::Inner2::SSeq s1, ::Test::Inner::Inner2::SSeq& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opSSeq(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::Test::Inner::Inner2::SMap opSMap(::Test::Inner::Inner2::SMap s1, ::Test::Inner::Inner2::SMap& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opSMap(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::Test::Inner::Inner2::CPtr opC(::Test::Inner::Inner2::CPtr c1, ::Test::Inner::Inner2::CPtr& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opC(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::Test::Inner::Inner2::CSeq opCSeq(::Test::Inner::Inner2::CSeq c1, ::Test::Inner::Inner2::CSeq& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opCSeq(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::Test::Inner::Inner2::CMap opCMap(::Test::Inner::Inner2::CMap c1, ::Test::Inner::Inner2::CMap& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opCMap(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_shutdown(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using IPtr = ::std::shared_ptr<I>;

}

}

namespace Inner
{

namespace Test
{

namespace Inner2
{

class I : public virtual ::Ice::Object
{
public:

    using ProxyType = IPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    virtual ::Test::S opS(::Test::S s1, ::Test::S& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opS(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::Test::SSeq opSSeq(::Test::SSeq s1, ::Test::SSeq& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opSSeq(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::Test::SMap opSMap(::Test::SMap s1, ::Test::SMap& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opSMap(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::Test::CPtr opC(::Test::CPtr c1, ::Test::CPtr& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opC(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::Test::CSeq opCSeq(::Test::CSeq c1, ::Test::CSeq& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opCSeq(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::Test::CMap opCMap(::Test::CMap c1, ::Test::CMap& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_opCMap(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_shutdown(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using IPtr = ::std::shared_ptr<I>;

}

}

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::Test::S>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<>
struct StreamReader<::Test::S>
{
    static void read(InputStream* istr, ::Test::S& v)
    {
        istr->readAll(v.v);
    }
};

template<>
struct StreamReader<::Test::C>
{
    static void read(InputStream* istr, ::Test::C& v)
    {
        istr->readAll(v.s);
    }
};

template<>
struct StreamableTraits< ::Test::E1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::Test::S1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamReader<::Test::S1>
{
    static void read(InputStream* istr, ::Test::S1& v)
    {
        istr->readAll(v.s);
    }
};

template<>
struct StreamReader<::Test::C1>
{
    static void read(InputStream* istr, ::Test::C1& v)
    {
        istr->readAll(v.s);
    }
};

template<>
struct StreamableTraits<::Test::S2>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<>
struct StreamReader<::Test::S2>
{
    static void read(InputStream* istr, ::Test::S2& v)
    {
        istr->readAll(v.E1, v.S1, v.C1);
    }
};

template<>
struct StreamReader<::Test::C2>
{
    static void read(InputStream* istr, ::Test::C2& v)
    {
        istr->readAll(v.E1, v.S1, v.C1);
    }
};

template<>
struct StreamableTraits<::Test::Inner::S>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<>
struct StreamReader<::Test::Inner::S>
{
    static void read(InputStream* istr, ::Test::Inner::S& v)
    {
        istr->readAll(v.v);
    }
};

template<>
struct StreamableTraits<::Test::Inner::Inner2::S>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<>
struct StreamReader<::Test::Inner::Inner2::S>
{
    static void read(InputStream* istr, ::Test::Inner::Inner2::S& v)
    {
        istr->readAll(v.v);
    }
};

template<>
struct StreamReader<::Test::Inner::Inner2::C>
{
    static void read(InputStream* istr, ::Test::Inner::Inner2::C& v)
    {
        istr->readAll(v.s);
    }
};

template<>
struct StreamReader<::Test::Inner::C>
{
    static void read(InputStream* istr, ::Test::Inner::C& v)
    {
        istr->readAll(v.s);
    }
};

}
/// \endcond

#include <Ice/PopDisableWarnings.h>
#endif
