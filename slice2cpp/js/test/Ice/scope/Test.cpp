// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

::std::ostream&
Test::operator<<(::std::ostream& os, E1 value)
{
    switch (value)
    {
        case E1::v1:
            return os << "v1";
        case E1::v2:
            return os << "v2";
        case E1::v3:
            return os << "v3";
        default:
            return os << static_cast<::std::int32_t>(value);
    }
}

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");
    const ::IceInternal::DefaultValueFactoryInit<::Test::C1> iceC_Test_C1_init("::Test::C1");
    const ::IceInternal::DefaultValueFactoryInit<::Test::C2> iceC_Test_C2_init("::Test::C2");
    const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::Inner2::C> iceC_Test_Inner_Inner2_C_init("::Test::Inner::Inner2::C");
    const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::C> iceC_Test_Inner_C_init("::Test::Inner::C");
}

::Test::S
Test::IPrx::opS(const S& iceP_s1, S& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<S, S>>(true, this, &IPrx::_iceI_opS, iceP_s1, context).get();
    iceP_s2 = ::std::get<1>(result);
    return ::std::get<0>(result);
}

::std::future<::std::tuple<::Test::S, ::Test::S>>
Test::IPrx::opSAsync(const S& iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<S, S>>(false, this, &IPrx::_iceI_opS, iceP_s1, context);
}

::std::function<void()>
Test::IPrx::opSAsync(const S& iceP_s1, ::std::function<void(::Test::S, ::Test::S)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<S, S>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<S, S>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::IPrx::_iceI_opS, iceP_s1, context);
}

void
Test::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<S, S>>>& outAsync, const S& iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<S, S> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::SSeq
Test::IPrx::opSSeq(const SSeq& iceP_s1, SSeq& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<SSeq, SSeq>>(true, this, &IPrx::_iceI_opSSeq, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::SSeq, ::Test::SSeq>>
Test::IPrx::opSSeqAsync(const SSeq& iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<SSeq, SSeq>>(false, this, &IPrx::_iceI_opSSeq, iceP_s1, context);
}

::std::function<void()>
Test::IPrx::opSSeqAsync(const SSeq& iceP_s1, ::std::function<void(::Test::SSeq, ::Test::SSeq)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<SSeq, SSeq>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<SSeq, SSeq>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::IPrx::_iceI_opSSeq, iceP_s1, context);
}

void
Test::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SSeq, SSeq>>>& outAsync, const SSeq& iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opSSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<SSeq, SSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::SMap
Test::IPrx::opSMap(const SMap& iceP_s1, SMap& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<SMap, SMap>>(true, this, &IPrx::_iceI_opSMap, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::SMap, ::Test::SMap>>
Test::IPrx::opSMapAsync(const SMap& iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<SMap, SMap>>(false, this, &IPrx::_iceI_opSMap, iceP_s1, context);
}

::std::function<void()>
Test::IPrx::opSMapAsync(const SMap& iceP_s1, ::std::function<void(::Test::SMap, ::Test::SMap)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<SMap, SMap>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<SMap, SMap>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::IPrx::_iceI_opSMap, iceP_s1, context);
}

void
Test::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SMap, SMap>>>& outAsync, const SMap& iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opSMap";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<SMap, SMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::CPtr
Test::IPrx::opC(const CPtr& iceP_c1, CPtr& iceP_c2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<CPtr, CPtr>>(true, this, &IPrx::_iceI_opC, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::CPtr, ::Test::CPtr>>
Test::IPrx::opCAsync(const CPtr& iceP_c1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<CPtr, CPtr>>(false, this, &IPrx::_iceI_opC, iceP_c1, context);
}

::std::function<void()>
Test::IPrx::opCAsync(const CPtr& iceP_c1, ::std::function<void(::Test::CPtr, ::Test::CPtr)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<CPtr, CPtr>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<CPtr, CPtr>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::IPrx::_iceI_opC, iceP_c1, context);
}

void
Test::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CPtr, CPtr>>>& outAsync, const CPtr& iceP_c1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opC";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<CPtr, CPtr> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

::Test::CSeq
Test::IPrx::opCSeq(const CSeq& iceP_s1, CSeq& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<CSeq, CSeq>>(true, this, &IPrx::_iceI_opCSeq, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::CSeq, ::Test::CSeq>>
Test::IPrx::opCSeqAsync(const CSeq& iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<CSeq, CSeq>>(false, this, &IPrx::_iceI_opCSeq, iceP_s1, context);
}

::std::function<void()>
Test::IPrx::opCSeqAsync(const CSeq& iceP_s1, ::std::function<void(::Test::CSeq, ::Test::CSeq)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<CSeq, CSeq>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<CSeq, CSeq>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::IPrx::_iceI_opCSeq, iceP_s1, context);
}

void
Test::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CSeq, CSeq>>>& outAsync, const CSeq& iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opCSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<CSeq, CSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

::Test::CMap
Test::IPrx::opCMap(const CMap& iceP_c1, CMap& iceP_c2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<CMap, CMap>>(true, this, &IPrx::_iceI_opCMap, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::CMap, ::Test::CMap>>
Test::IPrx::opCMapAsync(const CMap& iceP_c1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<CMap, CMap>>(false, this, &IPrx::_iceI_opCMap, iceP_c1, context);
}

::std::function<void()>
Test::IPrx::opCMapAsync(const CMap& iceP_c1, ::std::function<void(::Test::CMap, ::Test::CMap)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<CMap, CMap>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<CMap, CMap>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::IPrx::_iceI_opCMap, iceP_c1, context);
}

void
Test::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CMap, CMap>>>& outAsync, const CMap& iceP_c1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opCMap";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<CMap, CMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

::Test::E1
Test::IPrx::opE1(E1 iceP_E1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<E1>(true, this, &IPrx::_iceI_opE1, iceP_E1, context).get();
}

::std::future<::Test::E1>
Test::IPrx::opE1Async(E1 iceP_E1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<E1>(false, this, &IPrx::_iceI_opE1, iceP_E1, context);
}

::std::function<void()>
Test::IPrx::opE1Async(E1 iceP_E1, ::std::function<void(::Test::E1)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<E1>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::IPrx::_iceI_opE1, iceP_E1, context);
}

void
Test::IPrx::_iceI_opE1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<E1>>& outAsync, E1 iceP_E1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opE1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_E1);
        },
        nullptr);
}

::Test::S1
Test::IPrx::opS1(const S1& iceP_S1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<S1>(true, this, &IPrx::_iceI_opS1, iceP_S1, context).get();
}

::std::future<::Test::S1>
Test::IPrx::opS1Async(const S1& iceP_S1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<S1>(false, this, &IPrx::_iceI_opS1, iceP_S1, context);
}

::std::function<void()>
Test::IPrx::opS1Async(const S1& iceP_S1, ::std::function<void(::Test::S1)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<S1>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::IPrx::_iceI_opS1, iceP_S1, context);
}

void
Test::IPrx::_iceI_opS1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<S1>>& outAsync, const S1& iceP_S1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opS1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_S1);
        },
        nullptr);
}

::Test::C1Ptr
Test::IPrx::opC1(const C1Ptr& iceP_C1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<C1Ptr>(true, this, &IPrx::_iceI_opC1, iceP_C1, context).get();
}

::std::future<::Test::C1Ptr>
Test::IPrx::opC1Async(const C1Ptr& iceP_C1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<C1Ptr>(false, this, &IPrx::_iceI_opC1, iceP_C1, context);
}

::std::function<void()>
Test::IPrx::opC1Async(const C1Ptr& iceP_C1, ::std::function<void(::Test::C1Ptr)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<C1Ptr>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::IPrx::_iceI_opC1, iceP_C1, context);
}

void
Test::IPrx::_iceI_opC1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<C1Ptr>>& outAsync, const C1Ptr& iceP_C1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opC1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_C1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            C1Ptr ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

void
Test::IPrx::shutdown(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &IPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::IPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &IPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::IPrx::shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::IPrx::_iceI_shutdown, context);
}

void
Test::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr);
}

Test::IPrx::~IPrx() = default;

const char*
Test::IPrx::ice_staticId() noexcept
{
    return "::Test::I";
}

::Test::Inner::Inner2::S
Test::Inner::Inner2::IPrx::opS(const S& iceP_s1, S& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<S, S>>(true, this, &IPrx::_iceI_opS, iceP_s1, context).get();
    iceP_s2 = ::std::get<1>(result);
    return ::std::get<0>(result);
}

::std::future<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>>
Test::Inner::Inner2::IPrx::opSAsync(const S& iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<S, S>>(false, this, &IPrx::_iceI_opS, iceP_s1, context);
}

::std::function<void()>
Test::Inner::Inner2::IPrx::opSAsync(const S& iceP_s1, ::std::function<void(::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<S, S>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<S, S>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opS, iceP_s1, context);
}

void
Test::Inner::Inner2::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<S, S>>>& outAsync, const S& iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<S, S> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::Inner::Inner2::SSeq
Test::Inner::Inner2::IPrx::opSSeq(const SSeq& iceP_s1, SSeq& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<SSeq, SSeq>>(true, this, &IPrx::_iceI_opSSeq, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>>
Test::Inner::Inner2::IPrx::opSSeqAsync(const SSeq& iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<SSeq, SSeq>>(false, this, &IPrx::_iceI_opSSeq, iceP_s1, context);
}

::std::function<void()>
Test::Inner::Inner2::IPrx::opSSeqAsync(const SSeq& iceP_s1, ::std::function<void(::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<SSeq, SSeq>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<SSeq, SSeq>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opSSeq, iceP_s1, context);
}

void
Test::Inner::Inner2::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SSeq, SSeq>>>& outAsync, const SSeq& iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opSSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<SSeq, SSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::Inner::Inner2::SMap
Test::Inner::Inner2::IPrx::opSMap(const SMap& iceP_s1, SMap& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<SMap, SMap>>(true, this, &IPrx::_iceI_opSMap, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>>
Test::Inner::Inner2::IPrx::opSMapAsync(const SMap& iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<SMap, SMap>>(false, this, &IPrx::_iceI_opSMap, iceP_s1, context);
}

::std::function<void()>
Test::Inner::Inner2::IPrx::opSMapAsync(const SMap& iceP_s1, ::std::function<void(::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<SMap, SMap>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<SMap, SMap>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opSMap, iceP_s1, context);
}

void
Test::Inner::Inner2::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SMap, SMap>>>& outAsync, const SMap& iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opSMap";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<SMap, SMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::Inner::Inner2::CPtr
Test::Inner::Inner2::IPrx::opC(const CPtr& iceP_c1, CPtr& iceP_c2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<CPtr, CPtr>>(true, this, &IPrx::_iceI_opC, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::CPtr, ::Test::Inner::Inner2::CPtr>>
Test::Inner::Inner2::IPrx::opCAsync(const CPtr& iceP_c1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<CPtr, CPtr>>(false, this, &IPrx::_iceI_opC, iceP_c1, context);
}

::std::function<void()>
Test::Inner::Inner2::IPrx::opCAsync(const CPtr& iceP_c1, ::std::function<void(::Test::Inner::Inner2::CPtr, ::Test::Inner::Inner2::CPtr)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<CPtr, CPtr>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<CPtr, CPtr>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opC, iceP_c1, context);
}

void
Test::Inner::Inner2::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CPtr, CPtr>>>& outAsync, const CPtr& iceP_c1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opC";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<CPtr, CPtr> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

::Test::Inner::Inner2::CSeq
Test::Inner::Inner2::IPrx::opCSeq(const CSeq& iceP_c1, CSeq& iceP_c2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<CSeq, CSeq>>(true, this, &IPrx::_iceI_opCSeq, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>>
Test::Inner::Inner2::IPrx::opCSeqAsync(const CSeq& iceP_c1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<CSeq, CSeq>>(false, this, &IPrx::_iceI_opCSeq, iceP_c1, context);
}

::std::function<void()>
Test::Inner::Inner2::IPrx::opCSeqAsync(const CSeq& iceP_c1, ::std::function<void(::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<CSeq, CSeq>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<CSeq, CSeq>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opCSeq, iceP_c1, context);
}

void
Test::Inner::Inner2::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CSeq, CSeq>>>& outAsync, const CSeq& iceP_c1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opCSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<CSeq, CSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

::Test::Inner::Inner2::CMap
Test::Inner::Inner2::IPrx::opCMap(const CMap& iceP_c1, CMap& iceP_c2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<CMap, CMap>>(true, this, &IPrx::_iceI_opCMap, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>>
Test::Inner::Inner2::IPrx::opCMapAsync(const CMap& iceP_c1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<CMap, CMap>>(false, this, &IPrx::_iceI_opCMap, iceP_c1, context);
}

::std::function<void()>
Test::Inner::Inner2::IPrx::opCMapAsync(const CMap& iceP_c1, ::std::function<void(::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<CMap, CMap>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<CMap, CMap>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opCMap, iceP_c1, context);
}

void
Test::Inner::Inner2::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CMap, CMap>>>& outAsync, const CMap& iceP_c1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opCMap";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<CMap, CMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

void
Test::Inner::Inner2::IPrx::shutdown(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &IPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::Inner::Inner2::IPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &IPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::Inner::Inner2::IPrx::shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_shutdown, context);
}

void
Test::Inner::Inner2::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr);
}

Test::Inner::Inner2::IPrx::~IPrx() = default;

const char*
Test::Inner::Inner2::IPrx::ice_staticId() noexcept
{
    return "::Test::Inner::Inner2::I";
}

::Test::Inner::Inner2::S
Test::Inner::IPrx::opS(const ::Test::Inner::Inner2::S& iceP_s1, ::Test::Inner::Inner2::S& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>>(true, this, &IPrx::_iceI_opS, iceP_s1, context).get();
    iceP_s2 = ::std::get<1>(result);
    return ::std::get<0>(result);
}

::std::future<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>>
Test::Inner::IPrx::opSAsync(const ::Test::Inner::Inner2::S& iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>>(false, this, &IPrx::_iceI_opS, iceP_s1, context);
}

::std::function<void()>
Test::Inner::IPrx::opSAsync(const ::Test::Inner::Inner2::S& iceP_s1, ::std::function<void(::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::Inner::IPrx::_iceI_opS, iceP_s1, context);
}

void
Test::Inner::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>>>& outAsync, const ::Test::Inner::Inner2::S& iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::Inner::Inner2::SSeq
Test::Inner::IPrx::opSSeq(const ::Test::Inner::Inner2::SSeq& iceP_s1, ::Test::Inner::Inner2::SSeq& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>>(true, this, &IPrx::_iceI_opSSeq, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>>
Test::Inner::IPrx::opSSeqAsync(const ::Test::Inner::Inner2::SSeq& iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>>(false, this, &IPrx::_iceI_opSSeq, iceP_s1, context);
}

::std::function<void()>
Test::Inner::IPrx::opSSeqAsync(const ::Test::Inner::Inner2::SSeq& iceP_s1, ::std::function<void(::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::Inner::IPrx::_iceI_opSSeq, iceP_s1, context);
}

void
Test::Inner::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>>>& outAsync, const ::Test::Inner::Inner2::SSeq& iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opSSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::Inner::Inner2::SMap
Test::Inner::IPrx::opSMap(const ::Test::Inner::Inner2::SMap& iceP_s1, ::Test::Inner::Inner2::SMap& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>>(true, this, &IPrx::_iceI_opSMap, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>>
Test::Inner::IPrx::opSMapAsync(const ::Test::Inner::Inner2::SMap& iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>>(false, this, &IPrx::_iceI_opSMap, iceP_s1, context);
}

::std::function<void()>
Test::Inner::IPrx::opSMapAsync(const ::Test::Inner::Inner2::SMap& iceP_s1, ::std::function<void(::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::Inner::IPrx::_iceI_opSMap, iceP_s1, context);
}

void
Test::Inner::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>>>& outAsync, const ::Test::Inner::Inner2::SMap& iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opSMap";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::Inner::Inner2::CPtr
Test::Inner::IPrx::opC(const ::Test::Inner::Inner2::CPtr& iceP_c1, ::Test::Inner::Inner2::CPtr& iceP_c2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::CPtr, ::Test::Inner::Inner2::CPtr>>(true, this, &IPrx::_iceI_opC, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::CPtr, ::Test::Inner::Inner2::CPtr>>
Test::Inner::IPrx::opCAsync(const ::Test::Inner::Inner2::CPtr& iceP_c1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::CPtr, ::Test::Inner::Inner2::CPtr>>(false, this, &IPrx::_iceI_opC, iceP_c1, context);
}

::std::function<void()>
Test::Inner::IPrx::opCAsync(const ::Test::Inner::Inner2::CPtr& iceP_c1, ::std::function<void(::Test::Inner::Inner2::CPtr, ::Test::Inner::Inner2::CPtr)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::Test::Inner::Inner2::CPtr, ::Test::Inner::Inner2::CPtr>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::Test::Inner::Inner2::CPtr, ::Test::Inner::Inner2::CPtr>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::Inner::IPrx::_iceI_opC, iceP_c1, context);
}

void
Test::Inner::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::CPtr, ::Test::Inner::Inner2::CPtr>>>& outAsync, const ::Test::Inner::Inner2::CPtr& iceP_c1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opC";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::Inner::Inner2::CPtr, ::Test::Inner::Inner2::CPtr> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

::Test::Inner::Inner2::CSeq
Test::Inner::IPrx::opCSeq(const ::Test::Inner::Inner2::CSeq& iceP_c1, ::Test::Inner::Inner2::CSeq& iceP_c2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>>(true, this, &IPrx::_iceI_opCSeq, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>>
Test::Inner::IPrx::opCSeqAsync(const ::Test::Inner::Inner2::CSeq& iceP_c1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>>(false, this, &IPrx::_iceI_opCSeq, iceP_c1, context);
}

::std::function<void()>
Test::Inner::IPrx::opCSeqAsync(const ::Test::Inner::Inner2::CSeq& iceP_c1, ::std::function<void(::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::Inner::IPrx::_iceI_opCSeq, iceP_c1, context);
}

void
Test::Inner::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>>>& outAsync, const ::Test::Inner::Inner2::CSeq& iceP_c1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opCSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

::Test::Inner::Inner2::CMap
Test::Inner::IPrx::opCMap(const ::Test::Inner::Inner2::CMap& iceP_c1, ::Test::Inner::Inner2::CMap& iceP_c2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>>(true, this, &IPrx::_iceI_opCMap, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>>
Test::Inner::IPrx::opCMapAsync(const ::Test::Inner::Inner2::CMap& iceP_c1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>>(false, this, &IPrx::_iceI_opCMap, iceP_c1, context);
}

::std::function<void()>
Test::Inner::IPrx::opCMapAsync(const ::Test::Inner::Inner2::CMap& iceP_c1, ::std::function<void(::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::Inner::IPrx::_iceI_opCMap, iceP_c1, context);
}

void
Test::Inner::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>>>& outAsync, const ::Test::Inner::Inner2::CMap& iceP_c1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opCMap";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

void
Test::Inner::IPrx::shutdown(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &IPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::Inner::IPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &IPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::Inner::IPrx::shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::Inner::IPrx::_iceI_shutdown, context);
}

void
Test::Inner::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr);
}

Test::Inner::IPrx::~IPrx() = default;

const char*
Test::Inner::IPrx::ice_staticId() noexcept
{
    return "::Test::Inner::I";
}

::Test::S
Inner::Test::Inner2::IPrx::opS(const ::Test::S& iceP_s1, ::Test::S& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::S, ::Test::S>>(true, this, &IPrx::_iceI_opS, iceP_s1, context).get();
    iceP_s2 = ::std::get<1>(result);
    return ::std::get<0>(result);
}

::std::future<::std::tuple<::Test::S, ::Test::S>>
Inner::Test::Inner2::IPrx::opSAsync(const ::Test::S& iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::S, ::Test::S>>(false, this, &IPrx::_iceI_opS, iceP_s1, context);
}

::std::function<void()>
Inner::Test::Inner2::IPrx::opSAsync(const ::Test::S& iceP_s1, ::std::function<void(::Test::S, ::Test::S)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::Test::S, ::Test::S>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::Test::S, ::Test::S>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opS, iceP_s1, context);
}

void
Inner::Test::Inner2::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::S, ::Test::S>>>& outAsync, const ::Test::S& iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::S, ::Test::S> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::SSeq
Inner::Test::Inner2::IPrx::opSSeq(const ::Test::SSeq& iceP_s1, ::Test::SSeq& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::SSeq, ::Test::SSeq>>(true, this, &IPrx::_iceI_opSSeq, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::SSeq, ::Test::SSeq>>
Inner::Test::Inner2::IPrx::opSSeqAsync(const ::Test::SSeq& iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::SSeq, ::Test::SSeq>>(false, this, &IPrx::_iceI_opSSeq, iceP_s1, context);
}

::std::function<void()>
Inner::Test::Inner2::IPrx::opSSeqAsync(const ::Test::SSeq& iceP_s1, ::std::function<void(::Test::SSeq, ::Test::SSeq)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::Test::SSeq, ::Test::SSeq>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::Test::SSeq, ::Test::SSeq>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opSSeq, iceP_s1, context);
}

void
Inner::Test::Inner2::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::SSeq, ::Test::SSeq>>>& outAsync, const ::Test::SSeq& iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opSSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::SSeq, ::Test::SSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::SMap
Inner::Test::Inner2::IPrx::opSMap(const ::Test::SMap& iceP_s1, ::Test::SMap& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::SMap, ::Test::SMap>>(true, this, &IPrx::_iceI_opSMap, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::SMap, ::Test::SMap>>
Inner::Test::Inner2::IPrx::opSMapAsync(const ::Test::SMap& iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::SMap, ::Test::SMap>>(false, this, &IPrx::_iceI_opSMap, iceP_s1, context);
}

::std::function<void()>
Inner::Test::Inner2::IPrx::opSMapAsync(const ::Test::SMap& iceP_s1, ::std::function<void(::Test::SMap, ::Test::SMap)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::Test::SMap, ::Test::SMap>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::Test::SMap, ::Test::SMap>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opSMap, iceP_s1, context);
}

void
Inner::Test::Inner2::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::SMap, ::Test::SMap>>>& outAsync, const ::Test::SMap& iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opSMap";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::SMap, ::Test::SMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::CPtr
Inner::Test::Inner2::IPrx::opC(const ::Test::CPtr& iceP_c1, ::Test::CPtr& iceP_c2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::CPtr, ::Test::CPtr>>(true, this, &IPrx::_iceI_opC, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::CPtr, ::Test::CPtr>>
Inner::Test::Inner2::IPrx::opCAsync(const ::Test::CPtr& iceP_c1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::CPtr, ::Test::CPtr>>(false, this, &IPrx::_iceI_opC, iceP_c1, context);
}

::std::function<void()>
Inner::Test::Inner2::IPrx::opCAsync(const ::Test::CPtr& iceP_c1, ::std::function<void(::Test::CPtr, ::Test::CPtr)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::Test::CPtr, ::Test::CPtr>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::Test::CPtr, ::Test::CPtr>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opC, iceP_c1, context);
}

void
Inner::Test::Inner2::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::CPtr, ::Test::CPtr>>>& outAsync, const ::Test::CPtr& iceP_c1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opC";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::CPtr, ::Test::CPtr> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

::Test::CSeq
Inner::Test::Inner2::IPrx::opCSeq(const ::Test::CSeq& iceP_c1, ::Test::CSeq& iceP_c2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::CSeq, ::Test::CSeq>>(true, this, &IPrx::_iceI_opCSeq, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::CSeq, ::Test::CSeq>>
Inner::Test::Inner2::IPrx::opCSeqAsync(const ::Test::CSeq& iceP_c1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::CSeq, ::Test::CSeq>>(false, this, &IPrx::_iceI_opCSeq, iceP_c1, context);
}

::std::function<void()>
Inner::Test::Inner2::IPrx::opCSeqAsync(const ::Test::CSeq& iceP_c1, ::std::function<void(::Test::CSeq, ::Test::CSeq)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::Test::CSeq, ::Test::CSeq>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::Test::CSeq, ::Test::CSeq>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opCSeq, iceP_c1, context);
}

void
Inner::Test::Inner2::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::CSeq, ::Test::CSeq>>>& outAsync, const ::Test::CSeq& iceP_c1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opCSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::CSeq, ::Test::CSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

::Test::CMap
Inner::Test::Inner2::IPrx::opCMap(const ::Test::CMap& iceP_c1, ::Test::CMap& iceP_c2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::CMap, ::Test::CMap>>(true, this, &IPrx::_iceI_opCMap, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::CMap, ::Test::CMap>>
Inner::Test::Inner2::IPrx::opCMapAsync(const ::Test::CMap& iceP_c1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::Test::CMap, ::Test::CMap>>(false, this, &IPrx::_iceI_opCMap, iceP_c1, context);
}

::std::function<void()>
Inner::Test::Inner2::IPrx::opCMapAsync(const ::Test::CMap& iceP_c1, ::std::function<void(::Test::CMap, ::Test::CMap)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::Test::CMap, ::Test::CMap>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::Test::CMap, ::Test::CMap>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opCMap, iceP_c1, context);
}

void
Inner::Test::Inner2::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::CMap, ::Test::CMap>>>& outAsync, const ::Test::CMap& iceP_c1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opCMap";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::CMap, ::Test::CMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

void
Inner::Test::Inner2::IPrx::shutdown(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &IPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Inner::Test::Inner2::IPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &IPrx::_iceI_shutdown, context);
}

::std::function<void()>
Inner::Test::Inner2::IPrx::shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_shutdown, context);
}

void
Inner::Test::Inner2::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr);
}

Inner::Test::Inner2::IPrx::~IPrx() = default;

const char*
Inner::Test::Inner2::IPrx::ice_staticId() noexcept
{
    return "::Inner::Test::Inner2::I";
}

void
Test::S::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "v = ", this->v);
}

::std::ostream&
Test::operator<<(::std::ostream& os, const ::Test::S& value)
{
    os << "Test::S{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
Test::C::ice_staticId() noexcept
{
    return "::Test::C";
}

const char*
Test::C::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::C::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "s = ", this->s);
}

::Ice::ValuePtr
Test::C::_iceCloneImpl() const
{
    return CloneEnabler<C>::clone(*this);
}

void
Test::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->s);
    ostr->endSlice();
}

void
Test::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->s);
    istr->endSlice();
}

void
Test::S1::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "s = ", this->s);
}

::std::ostream&
Test::operator<<(::std::ostream& os, const ::Test::S1& value)
{
    os << "Test::S1{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
Test::C1::ice_staticId() noexcept
{
    return "::Test::C1";
}

const char*
Test::C1::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::C1::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "s = ", this->s);
}

::Ice::ValuePtr
Test::C1::_iceCloneImpl() const
{
    return CloneEnabler<C1>::clone(*this);
}

void
Test::C1::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->s);
    ostr->endSlice();
}

void
Test::C1::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->s);
    istr->endSlice();
}

void
Test::S2::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "E1 = ", this->E1);
    Ice::print(os << ", S1 = ", this->S1);
    Ice::print(os << ", C1 = ", this->C1);
}

::std::ostream&
Test::operator<<(::std::ostream& os, const ::Test::S2& value)
{
    os << "Test::S2{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
Test::C2::ice_staticId() noexcept
{
    return "::Test::C2";
}

const char*
Test::C2::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::C2::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "E1 = ", this->E1);
    Ice::print(os << ", S1 = ", this->S1);
    Ice::print(os << ", C1 = ", this->C1);
}

::Ice::ValuePtr
Test::C2::_iceCloneImpl() const
{
    return CloneEnabler<C2>::clone(*this);
}

void
Test::C2::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->E1, this->S1, this->C1);
    ostr->endSlice();
}

void
Test::C2::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->E1, this->S1, this->C1);
    istr->endSlice();
}

void
Test::Inner::S::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "v = ", this->v);
}

::std::ostream&
Test::Inner::operator<<(::std::ostream& os, const ::Test::Inner::S& value)
{
    os << "Test::Inner::S{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
Test::Inner::Inner2::S::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "v = ", this->v);
}

::std::ostream&
Test::Inner::Inner2::operator<<(::std::ostream& os, const ::Test::Inner::Inner2::S& value)
{
    os << "Test::Inner::Inner2::S{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
Test::Inner::Inner2::C::ice_staticId() noexcept
{
    return "::Test::Inner::Inner2::C";
}

const char*
Test::Inner::Inner2::C::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::Inner::Inner2::C::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "s = ", this->s);
}

::Ice::ValuePtr
Test::Inner::Inner2::C::_iceCloneImpl() const
{
    return CloneEnabler<C>::clone(*this);
}

void
Test::Inner::Inner2::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->s);
    ostr->endSlice();
}

void
Test::Inner::Inner2::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->s);
    istr->endSlice();
}

const char*
Test::Inner::C::ice_staticId() noexcept
{
    return "::Test::Inner::C";
}

const char*
Test::Inner::C::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::Inner::C::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "s = ", this->s);
}

::Ice::ValuePtr
Test::Inner::C::_iceCloneImpl() const
{
    return CloneEnabler<C>::clone(*this);
}

void
Test::Inner::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->s);
    ostr->endSlice();
}

void
Test::Inner::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->s);
    istr->endSlice();
}

::std::vector<::std::string>
Test::I::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::I"};
    return allTypeIds;
}

::std::string
Test::I::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
Test::I::ice_staticId() noexcept
{
    return "::Test::I";
}

/// \cond INTERNAL
void
Test::I::_iceD_opS(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    S iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    S iceP_s2;
    const S ret = this->opS(iceP_s1, iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::I::_iceD_opSSeq(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    SSeq iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    SSeq iceP_s2;
    const SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::I::_iceD_opSMap(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    SMap iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    SMap iceP_s2;
    const SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::I::_iceD_opC(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    CPtr iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    istr->endEncapsulation();
    CPtr iceP_c2;
    const CPtr ret = this->opC(::std::move(iceP_c1), iceP_c2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::I::_iceD_opCSeq(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    CSeq iceP_s1;
    istr->readAll(iceP_s1);
    istr->readPendingValues();
    istr->endEncapsulation();
    CSeq iceP_s2;
    const CSeq ret = this->opCSeq(::std::move(iceP_s1), iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::I::_iceD_opCMap(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    istr->endEncapsulation();
    CMap iceP_c2;
    const CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::I::_iceD_opE1(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    E1 iceP_E1;
    istr->readAll(iceP_E1);
    istr->endEncapsulation();
    const E1 ret = this->opE1(iceP_E1, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::I::_iceD_opS1(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    S1 iceP_S1;
    istr->readAll(iceP_S1);
    istr->endEncapsulation();
    const S1 ret = this->opS1(::std::move(iceP_S1), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::I::_iceD_opC1(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    C1Ptr iceP_C1;
    istr->readAll(iceP_C1);
    istr->readPendingValues();
    istr->endEncapsulation();
    const C1Ptr ret = this->opC1(::std::move(iceP_C1), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::I::_iceD_shutdown(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::I::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"ice_id", "ice_ids", "ice_isA", "ice_ping", "opC", "opC1", "opCMap", "opCSeq", "opE1", "opS", "opS1", "opSMap", "opSSeq", "shutdown"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 14, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_opC(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_opC1(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_opCMap(request, ::std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_opCSeq(request, ::std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_opE1(request, ::std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_opS(request, ::std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_opS1(request, ::std::move(sendResponse));
            break;
        }
        case 11:
        {
            _iceD_opSMap(request, ::std::move(sendResponse));
            break;
        }
        case 12:
        {
            _iceD_opSSeq(request, ::std::move(sendResponse));
            break;
        }
        case 13:
        {
            _iceD_shutdown(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Test::Inner::Inner2::I::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::Inner::Inner2::I"};
    return allTypeIds;
}

::std::string
Test::Inner::Inner2::I::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
Test::Inner::Inner2::I::ice_staticId() noexcept
{
    return "::Test::Inner::Inner2::I";
}

/// \cond INTERNAL
void
Test::Inner::Inner2::I::_iceD_opS(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    S iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    S iceP_s2;
    const S ret = this->opS(iceP_s1, iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::I::_iceD_opSSeq(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    SSeq iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    SSeq iceP_s2;
    const SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::I::_iceD_opSMap(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    SMap iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    SMap iceP_s2;
    const SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::I::_iceD_opC(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    CPtr iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    istr->endEncapsulation();
    CPtr iceP_c2;
    const CPtr ret = this->opC(::std::move(iceP_c1), iceP_c2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::I::_iceD_opCSeq(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    CSeq iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    istr->endEncapsulation();
    CSeq iceP_c2;
    const CSeq ret = this->opCSeq(::std::move(iceP_c1), iceP_c2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::I::_iceD_opCMap(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    istr->endEncapsulation();
    CMap iceP_c2;
    const CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::I::_iceD_shutdown(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::I::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"ice_id", "ice_ids", "ice_isA", "ice_ping", "opC", "opCMap", "opCSeq", "opS", "opSMap", "opSSeq", "shutdown"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 11, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_opC(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_opCMap(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_opCSeq(request, ::std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_opS(request, ::std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_opSMap(request, ::std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_opSSeq(request, ::std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_shutdown(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Test::Inner::I::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::Inner::I"};
    return allTypeIds;
}

::std::string
Test::Inner::I::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
Test::Inner::I::ice_staticId() noexcept
{
    return "::Test::Inner::I";
}

/// \cond INTERNAL
void
Test::Inner::I::_iceD_opS(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Test::Inner::Inner2::S iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    ::Test::Inner::Inner2::S iceP_s2;
    const ::Test::Inner::Inner2::S ret = this->opS(iceP_s1, iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::I::_iceD_opSSeq(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Test::Inner::Inner2::SSeq iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    ::Test::Inner::Inner2::SSeq iceP_s2;
    const ::Test::Inner::Inner2::SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::I::_iceD_opSMap(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Test::Inner::Inner2::SMap iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    ::Test::Inner::Inner2::SMap iceP_s2;
    const ::Test::Inner::Inner2::SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::I::_iceD_opC(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Test::Inner::Inner2::CPtr iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    istr->endEncapsulation();
    ::Test::Inner::Inner2::CPtr iceP_c2;
    const ::Test::Inner::Inner2::CPtr ret = this->opC(::std::move(iceP_c1), iceP_c2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::I::_iceD_opCSeq(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Test::Inner::Inner2::CSeq iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    istr->endEncapsulation();
    ::Test::Inner::Inner2::CSeq iceP_c2;
    const ::Test::Inner::Inner2::CSeq ret = this->opCSeq(::std::move(iceP_c1), iceP_c2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::I::_iceD_opCMap(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Test::Inner::Inner2::CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    istr->endEncapsulation();
    ::Test::Inner::Inner2::CMap iceP_c2;
    const ::Test::Inner::Inner2::CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::I::_iceD_shutdown(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::I::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"ice_id", "ice_ids", "ice_isA", "ice_ping", "opC", "opCMap", "opCSeq", "opS", "opSMap", "opSSeq", "shutdown"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 11, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_opC(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_opCMap(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_opCSeq(request, ::std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_opS(request, ::std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_opSMap(request, ::std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_opSSeq(request, ::std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_shutdown(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Inner::Test::Inner2::I::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Inner::Test::Inner2::I"};
    return allTypeIds;
}

::std::string
Inner::Test::Inner2::I::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
Inner::Test::Inner2::I::ice_staticId() noexcept
{
    return "::Inner::Test::Inner2::I";
}

/// \cond INTERNAL
void
Inner::Test::Inner2::I::_iceD_opS(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Test::S iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    ::Test::S iceP_s2;
    const ::Test::S ret = this->opS(iceP_s1, iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::I::_iceD_opSSeq(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Test::SSeq iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    ::Test::SSeq iceP_s2;
    const ::Test::SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::I::_iceD_opSMap(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Test::SMap iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    ::Test::SMap iceP_s2;
    const ::Test::SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::I::_iceD_opC(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Test::CPtr iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    istr->endEncapsulation();
    ::Test::CPtr iceP_c2;
    const ::Test::CPtr ret = this->opC(::std::move(iceP_c1), iceP_c2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::I::_iceD_opCSeq(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Test::CSeq iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    istr->endEncapsulation();
    ::Test::CSeq iceP_c2;
    const ::Test::CSeq ret = this->opCSeq(::std::move(iceP_c1), iceP_c2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::I::_iceD_opCMap(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Test::CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    istr->endEncapsulation();
    ::Test::CMap iceP_c2;
    const ::Test::CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::I::_iceD_shutdown(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::I::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"ice_id", "ice_ids", "ice_isA", "ice_ping", "opC", "opCMap", "opCSeq", "opS", "opSMap", "opSSeq", "shutdown"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 11, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_opC(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_opCMap(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_opCSeq(request, ::std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_opS(request, ::std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_opSMap(request, ::std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_opSSeq(request, ::std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_shutdown(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond
