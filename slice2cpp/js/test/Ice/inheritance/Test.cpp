//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::Test::MC::A> iceC_Test_MC_A_init("::Test::MC::A");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MC::B> iceC_Test_MC_B_init("::Test::MC::B");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MC::C> iceC_Test_MC_C_init("::Test::MC::C");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MC::D> iceC_Test_MC_D_init("::Test::MC::D");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MD::A> iceC_Test_MD_A_init("::Test::MD::A");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MD::B> iceC_Test_MD_B_init("::Test::MD::B");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MD::C> iceC_Test_MD_C_init("::Test::MD::C");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MD::D> iceC_Test_MD_D_init("::Test::MD::D");
    const ::IceInternal::DefaultValueFactoryInit<::Test::ME::A> iceC_Test_ME_A_init("::Test::ME::A");
    const ::IceInternal::DefaultValueFactoryInit<::Test::ME::B> iceC_Test_ME_B_init("::Test::ME::B");
    const ::IceInternal::DefaultValueFactoryInit<::Test::ME::C> iceC_Test_ME_C_init("::Test::ME::C");
    const ::IceInternal::DefaultValueFactoryInit<::Test::ME::D> iceC_Test_ME_D_init("::Test::ME::D");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MF::A> iceC_Test_MF_A_init("::Test::MF::A");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MF::B> iceC_Test_MF_B_init("::Test::MF::B");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MF::C> iceC_Test_MF_C_init("::Test::MF::C");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MF::D> iceC_Test_MF_D_init("::Test::MF::D");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MG::A> iceC_Test_MG_A_init("::Test::MG::A");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MG::B> iceC_Test_MG_B_init("::Test::MG::B");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MG::C> iceC_Test_MG_C_init("::Test::MG::C");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MG::D> iceC_Test_MG_D_init("::Test::MG::D");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MH::A> iceC_Test_MH_A_init("::Test::MH::A");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MH::B> iceC_Test_MH_B_init("::Test::MH::B");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MH::C> iceC_Test_MH_C_init("::Test::MH::C");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MH::D> iceC_Test_MH_D_init("::Test::MH::D");
}

::std::optional<::Test::MA::IAPrx>
Test::MA::IAPrx::iaop(const ::std::optional<IAPrx>& iceP_p, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<IAPrx>>(true, this, &IAPrx::_iceI_iaop, iceP_p, context).get();
}

::std::future<::std::optional<::Test::MA::IAPrx>>
Test::MA::IAPrx::iaopAsync(const ::std::optional<IAPrx>& iceP_p, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<IAPrx>>(false, this, &IAPrx::_iceI_iaop, iceP_p, context);
}

::std::function<void()>
Test::MA::IAPrx::iaopAsync(const ::std::optional<IAPrx>& iceP_p, ::std::function<void(::std::optional<::Test::MA::IAPrx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<IAPrx>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MA::IAPrx::_iceI_iaop, iceP_p, context);
}

void
Test::MA::IAPrx::_iceI_iaop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<IAPrx>>>& outAsync, const ::std::optional<IAPrx>& iceP_p, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "iaop";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}

::std::string_view
Test::MA::IAPrx::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MA::IA";
    return typeId;
}

::std::optional<::Test::MB::IB1Prx>
Test::MB::IB1Prx::ib1op(const ::std::optional<IB1Prx>& iceP_p, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<IB1Prx>>(true, this, &IB1Prx::_iceI_ib1op, iceP_p, context).get();
}

::std::future<::std::optional<::Test::MB::IB1Prx>>
Test::MB::IB1Prx::ib1opAsync(const ::std::optional<IB1Prx>& iceP_p, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<IB1Prx>>(false, this, &IB1Prx::_iceI_ib1op, iceP_p, context);
}

::std::function<void()>
Test::MB::IB1Prx::ib1opAsync(const ::std::optional<IB1Prx>& iceP_p, ::std::function<void(::std::optional<::Test::MB::IB1Prx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<IB1Prx>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MB::IB1Prx::_iceI_ib1op, iceP_p, context);
}

void
Test::MB::IB1Prx::_iceI_ib1op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<IB1Prx>>>& outAsync, const ::std::optional<IB1Prx>& iceP_p, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "ib1op";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}

::std::string_view
Test::MB::IB1Prx::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MB::IB1";
    return typeId;
}

::std::optional<::Test::MB::IB2Prx>
Test::MB::IB2Prx::ib2op(const ::std::optional<IB2Prx>& iceP_p, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<IB2Prx>>(true, this, &IB2Prx::_iceI_ib2op, iceP_p, context).get();
}

::std::future<::std::optional<::Test::MB::IB2Prx>>
Test::MB::IB2Prx::ib2opAsync(const ::std::optional<IB2Prx>& iceP_p, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<IB2Prx>>(false, this, &IB2Prx::_iceI_ib2op, iceP_p, context);
}

::std::function<void()>
Test::MB::IB2Prx::ib2opAsync(const ::std::optional<IB2Prx>& iceP_p, ::std::function<void(::std::optional<::Test::MB::IB2Prx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<IB2Prx>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MB::IB2Prx::_iceI_ib2op, iceP_p, context);
}

void
Test::MB::IB2Prx::_iceI_ib2op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<IB2Prx>>>& outAsync, const ::std::optional<IB2Prx>& iceP_p, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "ib2op";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}

::std::string_view
Test::MB::IB2Prx::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MB::IB2";
    return typeId;
}

::std::optional<::Test::MA::ICPrx>
Test::MA::ICPrx::icop(const ::std::optional<ICPrx>& iceP_p, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<ICPrx>>(true, this, &ICPrx::_iceI_icop, iceP_p, context).get();
}

::std::future<::std::optional<::Test::MA::ICPrx>>
Test::MA::ICPrx::icopAsync(const ::std::optional<ICPrx>& iceP_p, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<ICPrx>>(false, this, &ICPrx::_iceI_icop, iceP_p, context);
}

::std::function<void()>
Test::MA::ICPrx::icopAsync(const ::std::optional<ICPrx>& iceP_p, ::std::function<void(::std::optional<::Test::MA::ICPrx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<ICPrx>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MA::ICPrx::_iceI_icop, iceP_p, context);
}

void
Test::MA::ICPrx::_iceI_icop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<ICPrx>>>& outAsync, const ::std::optional<ICPrx>& iceP_p, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "icop";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}

::std::string_view
Test::MA::ICPrx::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MA::IC";
    return typeId;
}

void
Test::InitialPrx::shutdown(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::InitialPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::InitialPrx::shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_shutdown, context);
}

void
Test::InitialPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::optional<::Test::MA::IAPrx>
Test::InitialPrx::iaop(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::Test::MA::IAPrx>>(true, this, &InitialPrx::_iceI_iaop, context).get();
}

::std::future<::std::optional<::Test::MA::IAPrx>>
Test::InitialPrx::iaopAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::Test::MA::IAPrx>>(false, this, &InitialPrx::_iceI_iaop, context);
}

::std::function<void()>
Test::InitialPrx::iaopAsync(::std::function<void(::std::optional<::Test::MA::IAPrx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<::Test::MA::IAPrx>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_iaop, context);
}

void
Test::InitialPrx::_iceI_iaop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Test::MA::IAPrx>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "iaop";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::optional<::Test::MB::IB1Prx>
Test::InitialPrx::ib1op(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::Test::MB::IB1Prx>>(true, this, &InitialPrx::_iceI_ib1op, context).get();
}

::std::future<::std::optional<::Test::MB::IB1Prx>>
Test::InitialPrx::ib1opAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::Test::MB::IB1Prx>>(false, this, &InitialPrx::_iceI_ib1op, context);
}

::std::function<void()>
Test::InitialPrx::ib1opAsync(::std::function<void(::std::optional<::Test::MB::IB1Prx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<::Test::MB::IB1Prx>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_ib1op, context);
}

void
Test::InitialPrx::_iceI_ib1op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Test::MB::IB1Prx>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "ib1op";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::optional<::Test::MB::IB2Prx>
Test::InitialPrx::ib2op(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::Test::MB::IB2Prx>>(true, this, &InitialPrx::_iceI_ib2op, context).get();
}

::std::future<::std::optional<::Test::MB::IB2Prx>>
Test::InitialPrx::ib2opAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::Test::MB::IB2Prx>>(false, this, &InitialPrx::_iceI_ib2op, context);
}

::std::function<void()>
Test::InitialPrx::ib2opAsync(::std::function<void(::std::optional<::Test::MB::IB2Prx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<::Test::MB::IB2Prx>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_ib2op, context);
}

void
Test::InitialPrx::_iceI_ib2op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Test::MB::IB2Prx>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "ib2op";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::optional<::Test::MA::ICPrx>
Test::InitialPrx::icop(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::Test::MA::ICPrx>>(true, this, &InitialPrx::_iceI_icop, context).get();
}

::std::future<::std::optional<::Test::MA::ICPrx>>
Test::InitialPrx::icopAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::Test::MA::ICPrx>>(false, this, &InitialPrx::_iceI_icop, context);
}

::std::function<void()>
Test::InitialPrx::icopAsync(::std::function<void(::std::optional<::Test::MA::ICPrx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<::Test::MA::ICPrx>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_icop, context);
}

void
Test::InitialPrx::_iceI_icop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Test::MA::ICPrx>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "icop";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::string_view
Test::InitialPrx::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::Initial";
    return typeId;
}

void
Test::EchoPrx::setConnection(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &EchoPrx::_iceI_setConnection, context).get();
}

::std::future<void>
Test::EchoPrx::setConnectionAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &EchoPrx::_iceI_setConnection, context);
}

::std::function<void()>
Test::EchoPrx::setConnectionAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::EchoPrx::_iceI_setConnection, context);
}

void
Test::EchoPrx::_iceI_setConnection(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "setConnection";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
Test::EchoPrx::startBatch(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &EchoPrx::_iceI_startBatch, context).get();
}

::std::future<void>
Test::EchoPrx::startBatchAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &EchoPrx::_iceI_startBatch, context);
}

::std::function<void()>
Test::EchoPrx::startBatchAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::EchoPrx::_iceI_startBatch, context);
}

void
Test::EchoPrx::_iceI_startBatch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "startBatch";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
Test::EchoPrx::flushBatch(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &EchoPrx::_iceI_flushBatch, context).get();
}

::std::future<void>
Test::EchoPrx::flushBatchAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &EchoPrx::_iceI_flushBatch, context);
}

::std::function<void()>
Test::EchoPrx::flushBatchAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::EchoPrx::_iceI_flushBatch, context);
}

void
Test::EchoPrx::_iceI_flushBatch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "flushBatch";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
Test::EchoPrx::shutdown(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &EchoPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::EchoPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &EchoPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::EchoPrx::shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::EchoPrx::_iceI_shutdown, context);
}

void
Test::EchoPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::string_view
Test::EchoPrx::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::Echo";
    return typeId;
}

::std::string
Test::MC::A::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MC::A::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MC::A";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MC::A::_iceCloneImpl() const
{
    return CloneEnabler<A>::clone(*this);
}

void
Test::MC::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MC::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

::std::string
Test::MC::B::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MC::B::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MC::B";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MC::B::_iceCloneImpl() const
{
    return CloneEnabler<B>::clone(*this);
}

void
Test::MC::B::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    A::_iceWriteImpl(ostr);
}

void
Test::MC::B::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    A::_iceReadImpl(istr);
}

::std::string
Test::MC::C::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MC::C::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MC::C";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MC::C::_iceCloneImpl() const
{
    return CloneEnabler<C>::clone(*this);
}

void
Test::MC::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::MC::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}

::std::string
Test::MC::D::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MC::D::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MC::D";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MC::D::_iceCloneImpl() const
{
    return CloneEnabler<D>::clone(*this);
}

void
Test::MC::D::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    C::_iceWriteImpl(ostr);
}

void
Test::MC::D::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    C::_iceReadImpl(istr);
}

::std::string
Test::MD::A::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MD::A::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MD::A";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MD::A::_iceCloneImpl() const
{
    return CloneEnabler<A>::clone(*this);
}

void
Test::MD::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MD::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

::std::string
Test::MD::B::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MD::B::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MD::B";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MD::B::_iceCloneImpl() const
{
    return CloneEnabler<B>::clone(*this);
}

void
Test::MD::B::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    A::_iceWriteImpl(ostr);
}

void
Test::MD::B::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    A::_iceReadImpl(istr);
}

::std::string
Test::MD::C::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MD::C::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MD::C";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MD::C::_iceCloneImpl() const
{
    return CloneEnabler<C>::clone(*this);
}

void
Test::MD::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::MD::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}

::std::string
Test::MD::D::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MD::D::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MD::D";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MD::D::_iceCloneImpl() const
{
    return CloneEnabler<D>::clone(*this);
}

void
Test::MD::D::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    C::_iceWriteImpl(ostr);
}

void
Test::MD::D::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    C::_iceReadImpl(istr);
}

::std::string
Test::ME::A::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::ME::A::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::ME::A";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::ME::A::_iceCloneImpl() const
{
    return CloneEnabler<A>::clone(*this);
}

void
Test::ME::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::ME::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

::std::string
Test::ME::B::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::ME::B::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::ME::B";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::ME::B::_iceCloneImpl() const
{
    return CloneEnabler<B>::clone(*this);
}

void
Test::ME::B::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    A::_iceWriteImpl(ostr);
}

void
Test::ME::B::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    A::_iceReadImpl(istr);
}

::std::string
Test::ME::C::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::ME::C::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::ME::C";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::ME::C::_iceCloneImpl() const
{
    return CloneEnabler<C>::clone(*this);
}

void
Test::ME::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::ME::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}

::std::string
Test::ME::D::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::ME::D::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::ME::D";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::ME::D::_iceCloneImpl() const
{
    return CloneEnabler<D>::clone(*this);
}

void
Test::ME::D::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    C::_iceWriteImpl(ostr);
}

void
Test::ME::D::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    C::_iceReadImpl(istr);
}

::std::string
Test::MF::A::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MF::A::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MF::A";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MF::A::_iceCloneImpl() const
{
    return CloneEnabler<A>::clone(*this);
}

void
Test::MF::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MF::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

::std::string
Test::MF::B::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MF::B::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MF::B";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MF::B::_iceCloneImpl() const
{
    return CloneEnabler<B>::clone(*this);
}

void
Test::MF::B::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    A::_iceWriteImpl(ostr);
}

void
Test::MF::B::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    A::_iceReadImpl(istr);
}

::std::string
Test::MF::C::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MF::C::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MF::C";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MF::C::_iceCloneImpl() const
{
    return CloneEnabler<C>::clone(*this);
}

void
Test::MF::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::MF::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}

::std::string
Test::MF::D::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MF::D::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MF::D";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MF::D::_iceCloneImpl() const
{
    return CloneEnabler<D>::clone(*this);
}

void
Test::MF::D::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    C::_iceWriteImpl(ostr);
}

void
Test::MF::D::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    C::_iceReadImpl(istr);
}

::std::string
Test::MG::A::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MG::A::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MG::A";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MG::A::_iceCloneImpl() const
{
    return CloneEnabler<A>::clone(*this);
}

void
Test::MG::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MG::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

::std::string
Test::MG::B::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MG::B::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MG::B";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MG::B::_iceCloneImpl() const
{
    return CloneEnabler<B>::clone(*this);
}

void
Test::MG::B::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    A::_iceWriteImpl(ostr);
}

void
Test::MG::B::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    A::_iceReadImpl(istr);
}

::std::string
Test::MG::C::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MG::C::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MG::C";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MG::C::_iceCloneImpl() const
{
    return CloneEnabler<C>::clone(*this);
}

void
Test::MG::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::MG::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}

::std::string
Test::MG::D::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MG::D::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MG::D";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MG::D::_iceCloneImpl() const
{
    return CloneEnabler<D>::clone(*this);
}

void
Test::MG::D::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    C::_iceWriteImpl(ostr);
}

void
Test::MG::D::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    C::_iceReadImpl(istr);
}

::std::string
Test::MH::A::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MH::A::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MH::A";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MH::A::_iceCloneImpl() const
{
    return CloneEnabler<A>::clone(*this);
}

void
Test::MH::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MH::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

::std::string
Test::MH::B::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MH::B::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MH::B";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MH::B::_iceCloneImpl() const
{
    return CloneEnabler<B>::clone(*this);
}

void
Test::MH::B::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    A::_iceWriteImpl(ostr);
}

void
Test::MH::B::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    A::_iceReadImpl(istr);
}

::std::string
Test::MH::C::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MH::C::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MH::C";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MH::C::_iceCloneImpl() const
{
    return CloneEnabler<C>::clone(*this);
}

void
Test::MH::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::MH::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}

::std::string
Test::MH::D::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MH::D::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MH::D";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::MH::D::_iceCloneImpl() const
{
    return CloneEnabler<D>::clone(*this);
}

void
Test::MH::D::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    C::_iceWriteImpl(ostr);
}

void
Test::MH::D::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    C::_iceReadImpl(istr);
}

::std::vector<::std::string>
Test::MA::IA::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::MA::IA"};
    return allTypeIds;
}

::std::string
Test::MA::IA::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MA::IA::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MA::IA";
    return typeId;
}

/// \cond INTERNAL
void
Test::MA::IA::_iceD_iaop(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::optional<IAPrx> iceP_p;
    istr->readAll(iceP_p);
    istr->endEncapsulation();
    ::std::optional<IAPrx> ret = this->iaop(::std::move(iceP_p), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MA::IA::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"iaop", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 5, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_iaop(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Test::MB::IB1::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::MA::IA", "::Test::MB::IB1"};
    return allTypeIds;
}

::std::string
Test::MB::IB1::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MB::IB1::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MB::IB1";
    return typeId;
}

/// \cond INTERNAL
void
Test::MB::IB1::_iceD_ib1op(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::optional<IB1Prx> iceP_p;
    istr->readAll(iceP_p);
    istr->endEncapsulation();
    ::std::optional<IB1Prx> ret = this->ib1op(::std::move(iceP_p), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MB::IB1::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"iaop", "ib1op", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 6, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_iaop(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ib1op(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Test::MB::IB2::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::MA::IA", "::Test::MB::IB2"};
    return allTypeIds;
}

::std::string
Test::MB::IB2::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MB::IB2::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MB::IB2";
    return typeId;
}

/// \cond INTERNAL
void
Test::MB::IB2::_iceD_ib2op(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::optional<IB2Prx> iceP_p;
    istr->readAll(iceP_p);
    istr->endEncapsulation();
    ::std::optional<IB2Prx> ret = this->ib2op(::std::move(iceP_p), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MB::IB2::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"iaop", "ib2op", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 6, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_iaop(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ib2op(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Test::MA::IC::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::MA::IA", "::Test::MA::IC", "::Test::MB::IB1", "::Test::MB::IB2"};
    return allTypeIds;
}

::std::string
Test::MA::IC::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MA::IC::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MA::IC";
    return typeId;
}

/// \cond INTERNAL
void
Test::MA::IC::_iceD_icop(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::optional<ICPrx> iceP_p;
    istr->readAll(iceP_p);
    istr->endEncapsulation();
    ::std::optional<ICPrx> ret = this->icop(::std::move(iceP_p), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MA::IC::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"iaop", "ib1op", "ib2op", "ice_id", "ice_ids", "ice_isA", "ice_ping", "icop"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 8, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_iaop(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ib1op(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ib2op(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_icop(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::Initial"};
    return allTypeIds;
}

::std::string
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::Initial::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
void
Test::Initial::_iceD_shutdown(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_iaop(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::optional<::Test::MA::IAPrx> ret = this->iaop(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_ib1op(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::optional<::Test::MB::IB1Prx> ret = this->ib1op(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_ib2op(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::optional<::Test::MB::IB2Prx> ret = this->ib2op(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_icop(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::optional<::Test::MA::ICPrx> ret = this->icop(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"iaop", "ib1op", "ib2op", "ice_id", "ice_ids", "ice_isA", "ice_ping", "icop", "shutdown"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 9, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_iaop(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ib1op(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ib2op(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_icop(request, ::std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_shutdown(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Test::Echo::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::Echo"};
    return allTypeIds;
}

::std::string
Test::Echo::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::Echo::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::Echo";
    return typeId;
}

/// \cond INTERNAL
void
Test::Echo::_iceD_setConnection(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->setConnection(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Echo::_iceD_startBatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->startBatch(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Echo::_iceD_flushBatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->flushBatch(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Echo::_iceD_shutdown(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Echo::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"flushBatch", "ice_id", "ice_ids", "ice_isA", "ice_ping", "setConnection", "shutdown", "startBatch"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 8, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_flushBatch(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_setConnection(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_shutdown(request, ::std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_startBatch(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        }
    }
}
/// \endcond
