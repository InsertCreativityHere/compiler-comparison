//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Canvas.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Canvas.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_Demo_gx_Canvas_ids[2] =
{
    "::Demo::gx::Canvas",
    "::Ice::Object"
};
const ::std::string iceC_Demo_gx_Canvas_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "paintCircle",
    "paintSquare"
};
const ::std::string iceC_Demo_gx_Canvas_paintSquare_name = "paintSquare";
const ::std::string iceC_Demo_gx_Canvas_paintCircle_name = "paintCircle";

const ::std::string iceC_Demo_gx_Session_ids[3] =
{
    "::Demo::gx::Session",
    "::Glacier2::Session",
    "::Ice::Object"
};
const ::std::string iceC_Demo_gx_Session_ops[] =
{
    "destroy",
    "destroySession",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Demo_gx_Session_destroySession_name = "destroySession";

}

bool
Demo::gx::Canvas::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Demo_gx_Canvas_ids, iceC_Demo_gx_Canvas_ids + 2, s);
}

::std::vector<::std::string>
Demo::gx::Canvas::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Demo_gx_Canvas_ids[0], &iceC_Demo_gx_Canvas_ids[2]);
}

::std::string
Demo::gx::Canvas::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Demo::gx::Canvas::ice_staticId()
{
    static const ::std::string typeId = "::Demo::gx::Canvas";
    return typeId;
}

/// \cond INTERNAL
bool
Demo::gx::Canvas::_iceD_paintSquare(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Square iceP_square;
    istr->readAll(iceP_square);
    inS.endReadParams();
    this->paintSquare(::std::move(iceP_square), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Demo::gx::Canvas::_iceD_paintCircle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Circle iceP_circle;
    istr->readAll(iceP_circle);
    inS.endReadParams();
    this->paintCircle(::std::move(iceP_circle), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Demo::gx::Canvas::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Demo_gx_Canvas_ops, iceC_Demo_gx_Canvas_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Demo_gx_Canvas_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_paintCircle(in, current);
        }
        case 5:
        {
            return _iceD_paintSquare(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Demo::gx::Session::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Demo_gx_Session_ids, iceC_Demo_gx_Session_ids + 3, s);
}

::std::vector<::std::string>
Demo::gx::Session::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Demo_gx_Session_ids[0], &iceC_Demo_gx_Session_ids[3]);
}

::std::string
Demo::gx::Session::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Demo::gx::Session::ice_staticId()
{
    static const ::std::string typeId = "::Demo::gx::Session";
    return typeId;
}

/// \cond INTERNAL
bool
Demo::gx::Session::_iceD_destroySession(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->destroySession(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Demo::gx::Session::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Demo_gx_Session_ops, iceC_Demo_gx_Session_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Demo_gx_Session_ops)
    {
        case 0:
        {
            return _iceD_destroy(in, current);
        }
        case 1:
        {
            return _iceD_destroySession(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Demo::gx::CanvasPrx::_iceI_paintSquare(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const Square& iceP_square, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Demo_gx_Canvas_paintSquare_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_square);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Demo::gx::CanvasPrx::_iceI_paintCircle(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const Circle& iceP_circle, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Demo_gx_Canvas_paintCircle_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_circle);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Demo::gx::CanvasPrx::_newInstance() const
{
    return ::IceInternal::createProxy<CanvasPrx>();
}
/// \endcond

const ::std::string&
Demo::gx::CanvasPrx::ice_staticId()
{
    return Canvas::ice_staticId();
}

/// \cond INTERNAL
void
Demo::gx::SessionPrx::_iceI_destroySession(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Demo_gx_Session_destroySession_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Demo::gx::SessionPrx::_newInstance() const
{
    return ::IceInternal::createProxy<SessionPrx>();
}
/// \endcond

const ::std::string&
Demo::gx::SessionPrx::ice_staticId()
{
    return Session::ice_staticId();
}

#else // C++98 mapping

namespace
{

namespace
{

const ::std::string iceC_Demo_gx_Canvas_paintSquare_name = "paintSquare";

const ::std::string iceC_Demo_gx_Canvas_paintCircle_name = "paintCircle";

const ::std::string iceC_Demo_gx_Session_destroySession_name = "destroySession";

}

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Demo::gx::upCast(Canvas* p) { return p; }

void
::IceProxy::Demo::gx::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Canvas>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Canvas;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Demo::gx::Canvas::_iceI_begin_paintSquare(const ::Demo::gx::Square& iceP_square, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Demo_gx_Canvas_paintSquare_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Demo_gx_Canvas_paintSquare_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_square);
        result->endWriteParams();
        result->invoke(iceC_Demo_gx_Canvas_paintSquare_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Demo::gx::Canvas::end_paintSquare(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Demo_gx_Canvas_paintSquare_name);
}

::Ice::AsyncResultPtr
IceProxy::Demo::gx::Canvas::_iceI_begin_paintCircle(const ::Demo::gx::Circle& iceP_circle, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Demo_gx_Canvas_paintCircle_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Demo_gx_Canvas_paintCircle_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_circle);
        result->endWriteParams();
        result->invoke(iceC_Demo_gx_Canvas_paintCircle_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Demo::gx::Canvas::end_paintCircle(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Demo_gx_Canvas_paintCircle_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Demo::gx::Canvas::_newInstance() const
{
    return new Canvas;
}
/// \endcond

const ::std::string&
IceProxy::Demo::gx::Canvas::ice_staticId()
{
    return ::Demo::gx::Canvas::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Demo::gx::upCast(Session* p) { return p; }

void
::IceProxy::Demo::gx::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Session>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Session;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Demo::gx::Session::_iceI_begin_destroySession(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Demo_gx_Session_destroySession_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Demo_gx_Session_destroySession_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Demo_gx_Session_destroySession_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Demo::gx::Session::end_destroySession(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Demo_gx_Session_destroySession_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Demo::gx::Session::_newInstance() const
{
    return new Session;
}
/// \endcond

const ::std::string&
IceProxy::Demo::gx::Session::ice_staticId()
{
    return ::Demo::gx::Session::ice_staticId();
}

Demo::gx::Canvas::~Canvas()
{
}

namespace
{
const ::std::string iceC_Demo_gx_Canvas_ids[2] =
{
    "::Demo::gx::Canvas",
    "::Ice::Object"
};

}

bool
Demo::gx::Canvas::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Demo_gx_Canvas_ids, iceC_Demo_gx_Canvas_ids + 2, s);
}

::std::vector< ::std::string>
Demo::gx::Canvas::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Demo_gx_Canvas_ids[0], &iceC_Demo_gx_Canvas_ids[2]);
}

::std::string
Demo::gx::Canvas::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Demo::gx::Canvas::ice_staticId()
{
    static const ::std::string typeId = "::Demo::gx::Canvas";
    return typeId;
}

/// \cond INTERNAL
bool
Demo::gx::Canvas::_iceD_paintSquare(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    Square iceP_square;
    istr->read(iceP_square);
    inS.endReadParams();
    this->paintSquare(iceP_square, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Demo::gx::Canvas::_iceD_paintCircle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    Circle iceP_circle;
    istr->read(iceP_circle);
    inS.endReadParams();
    this->paintCircle(iceP_circle, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Demo_gx_Canvas_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "paintCircle",
    "paintSquare"
};

}

/// \cond INTERNAL
bool
Demo::gx::Canvas::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Demo_gx_Canvas_all, iceC_Demo_gx_Canvas_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Demo_gx_Canvas_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_paintCircle(in, current);
        }
        case 5:
        {
            return _iceD_paintSquare(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Demo::gx::Session::~Session()
{
}

namespace
{
const ::std::string iceC_Demo_gx_Session_ids[3] =
{
    "::Demo::gx::Session",
    "::Glacier2::Session",
    "::Ice::Object"
};

}

bool
Demo::gx::Session::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Demo_gx_Session_ids, iceC_Demo_gx_Session_ids + 3, s);
}

::std::vector< ::std::string>
Demo::gx::Session::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Demo_gx_Session_ids[0], &iceC_Demo_gx_Session_ids[3]);
}

::std::string
Demo::gx::Session::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Demo::gx::Session::ice_staticId()
{
    static const ::std::string typeId = "::Demo::gx::Session";
    return typeId;
}

/// \cond INTERNAL
bool
Demo::gx::Session::_iceD_destroySession(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->destroySession(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Demo_gx_Session_all[] =
{
    "destroy",
    "destroySession",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Demo::gx::Session::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Demo_gx_Session_all, iceC_Demo_gx_Session_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Demo_gx_Session_all)
    {
        case 0:
        {
            return _iceD_destroy(in, current);
        }
        case 1:
        {
            return _iceD_destroySession(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

#endif
