//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Canvas.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Canvas_h__
#define __Canvas_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Square.h>
#include <Circle.h>
#include <Glacier2/Session.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Demo
{


namespace gx
{

class CanvasPrx;

using CanvasPrxPtr = ::std::optional<CanvasPrx>;
class SessionPrx;

using SessionPrxPtr = ::std::optional<SessionPrx>;

}

}

namespace Demo
{

namespace gx
{

class CanvasPrx : public ::Ice::Proxy<CanvasPrx, ::Ice::ObjectPrx>
{
public:

    void paintSquare(const Square& square, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> paintSquareAsync(const Square& square, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    paintSquareAsync(const Square& square, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_paintSquare(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const Square&, const ::Ice::Context&) const;
    /// \endcond

    void paintCircle(const Circle& circle, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> paintCircleAsync(const Circle& circle, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    paintCircleAsync(const Circle& circle, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_paintCircle(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const Circle&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    explicit CanvasPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    CanvasPrx(const CanvasPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    CanvasPrx(CanvasPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    CanvasPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    CanvasPrx& operator=(const CanvasPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    CanvasPrx& operator=(CanvasPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static CanvasPrx _fromReference(::IceInternal::ReferencePtr ref) { return CanvasPrx(::std::move(ref)); }

protected:

    CanvasPrx() = default;

    explicit CanvasPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

class SessionPrx : public ::Ice::Proxy<SessionPrx, ::Glacier2::SessionPrx>
{
public:

    void destroySession(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> destroySessionAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    destroySessionAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_destroySession(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

#if defined(__GNUC__)
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wextra" // initialize all virtual bases in correct order
#endif

    explicit SessionPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    SessionPrx(const SessionPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    SessionPrx(SessionPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    SessionPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    SessionPrx& operator=(const SessionPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    SessionPrx& operator=(SessionPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static SessionPrx _fromReference(::IceInternal::ReferencePtr ref) { return SessionPrx(::std::move(ref)); }

protected:

    SessionPrx() = default;

    explicit SessionPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond

#if defined(__GNUC__)
#   pragma GCC diagnostic pop
#endif
};

}

}

namespace Demo
{

namespace gx
{

class Canvas : public virtual ::Ice::Object
{
public:

    using ProxyType = CanvasPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    virtual void paintSquare(Square square, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_paintSquare(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void paintCircle(Circle circle, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_paintCircle(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using CanvasPtr = ::std::shared_ptr<Canvas>;

class Session : public virtual ::Glacier2::Session
{
public:

    using ProxyType = SessionPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    virtual void destroySession(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_destroySession(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using SessionPtr = ::std::shared_ptr<Session>;

}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
