//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Circle.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Circle_h__
#define __Circle_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Point.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Demo
{


namespace gx
{

struct Circle;

}

}

namespace Demo
{

namespace gx
{

struct Circle
{
    ::Demo::gx::Point center;
    ::std::int64_t radius;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Demo::gx::Point&, const ::std::int64_t&> ice_tuple() const
    {
        return std::tie(center, radius);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::Demo::gx::Circle>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<>
struct StreamReader<::Demo::gx::Circle>
{
    static void read(InputStream* istr, ::Demo::gx::Circle& v)
    {
        istr->readAll(v.center, v.radius);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
