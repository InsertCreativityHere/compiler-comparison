//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{


namespace MA
{

class IAPrx;

using IAPrxPtr = ::std::optional<IAPrx>;

}

namespace MB
{

class IB1Prx;

using IB1PrxPtr = ::std::optional<IB1Prx>;
class IB2Prx;

using IB2PrxPtr = ::std::optional<IB2Prx>;

}

namespace MA
{

class ICPrx;

using ICPrxPtr = ::std::optional<ICPrx>;

}
class InitialPrx;

using InitialPrxPtr = ::std::optional<InitialPrx>;

namespace MC
{

class A;

using APtr = ::std::shared_ptr<A>;
class B;

using BPtr = ::std::shared_ptr<B>;
class C;

using CPtr = ::std::shared_ptr<C>;
class D;

using DPtr = ::std::shared_ptr<D>;

}

namespace MD
{

class A;

using APtr = ::std::shared_ptr<A>;
class B;

using BPtr = ::std::shared_ptr<B>;
class C;

using CPtr = ::std::shared_ptr<C>;
class D;

using DPtr = ::std::shared_ptr<D>;

}

namespace ME
{

class A;

using APtr = ::std::shared_ptr<A>;
class B;

using BPtr = ::std::shared_ptr<B>;
class C;

using CPtr = ::std::shared_ptr<C>;
class D;

using DPtr = ::std::shared_ptr<D>;

}

namespace MF
{

class A;

using APtr = ::std::shared_ptr<A>;
class B;

using BPtr = ::std::shared_ptr<B>;
class C;

using CPtr = ::std::shared_ptr<C>;
class D;

using DPtr = ::std::shared_ptr<D>;

}

namespace MG
{

class A;

using APtr = ::std::shared_ptr<A>;
class B;

using BPtr = ::std::shared_ptr<B>;
class C;

using CPtr = ::std::shared_ptr<C>;
class D;

using DPtr = ::std::shared_ptr<D>;

}

namespace MH
{

class A;

using APtr = ::std::shared_ptr<A>;
class B;

using BPtr = ::std::shared_ptr<B>;
class C;

using CPtr = ::std::shared_ptr<C>;
class D;

using DPtr = ::std::shared_ptr<D>;

}
class EchoPrx;

using EchoPrxPtr = ::std::optional<EchoPrx>;

}

namespace Test
{

namespace MA
{

class IAPrx : public ::Ice::Proxy<IAPrx, ::Ice::ObjectPrx>
{
public:

    ::std::optional<IAPrx> iaop(const ::std::optional<IAPrx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::optional<IAPrx>> iaopAsync(const ::std::optional<IAPrx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    iaopAsync(const ::std::optional<IAPrx>& p,
              ::std::function<void(::std::optional<::Test::MA::IAPrx>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_iaop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<IAPrx>>>&, const ::std::optional<IAPrx>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit IAPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    IAPrx(const IAPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    IAPrx(IAPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    IAPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    IAPrx& operator=(const IAPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    IAPrx& operator=(IAPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static IAPrx _fromReference(::IceInternal::ReferencePtr ref) { return IAPrx(::std::move(ref)); }

protected:

    IAPrx() = default;

    explicit IAPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace MB
{

class IB1Prx : public ::Ice::Proxy<IB1Prx, ::Test::MA::IAPrx>
{
public:

    ::std::optional<IB1Prx> ib1op(const ::std::optional<IB1Prx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::optional<IB1Prx>> ib1opAsync(const ::std::optional<IB1Prx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    ib1opAsync(const ::std::optional<IB1Prx>& p,
               ::std::function<void(::std::optional<::Test::MB::IB1Prx>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_ib1op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<IB1Prx>>>&, const ::std::optional<IB1Prx>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

#if defined(__GNUC__)
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wextra" // initialize all virtual bases in correct order
#endif

    explicit IB1Prx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    IB1Prx(const IB1Prx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    IB1Prx(IB1Prx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    IB1Prx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    IB1Prx& operator=(const IB1Prx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    IB1Prx& operator=(IB1Prx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static IB1Prx _fromReference(::IceInternal::ReferencePtr ref) { return IB1Prx(::std::move(ref)); }

protected:

    IB1Prx() = default;

    explicit IB1Prx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond

#if defined(__GNUC__)
#   pragma GCC diagnostic pop
#endif
};

class IB2Prx : public ::Ice::Proxy<IB2Prx, ::Test::MA::IAPrx>
{
public:

    ::std::optional<IB2Prx> ib2op(const ::std::optional<IB2Prx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::optional<IB2Prx>> ib2opAsync(const ::std::optional<IB2Prx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    ib2opAsync(const ::std::optional<IB2Prx>& p,
               ::std::function<void(::std::optional<::Test::MB::IB2Prx>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_ib2op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<IB2Prx>>>&, const ::std::optional<IB2Prx>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

#if defined(__GNUC__)
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wextra" // initialize all virtual bases in correct order
#endif

    explicit IB2Prx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    IB2Prx(const IB2Prx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    IB2Prx(IB2Prx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    IB2Prx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    IB2Prx& operator=(const IB2Prx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    IB2Prx& operator=(IB2Prx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static IB2Prx _fromReference(::IceInternal::ReferencePtr ref) { return IB2Prx(::std::move(ref)); }

protected:

    IB2Prx() = default;

    explicit IB2Prx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond

#if defined(__GNUC__)
#   pragma GCC diagnostic pop
#endif
};

}

namespace MA
{

class ICPrx : public ::Ice::Proxy<ICPrx, ::Test::MB::IB1Prx, ::Test::MB::IB2Prx>
{
public:

    ::std::optional<ICPrx> icop(const ::std::optional<ICPrx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::optional<ICPrx>> icopAsync(const ::std::optional<ICPrx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    icopAsync(const ::std::optional<ICPrx>& p,
              ::std::function<void(::std::optional<::Test::MA::ICPrx>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_icop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<ICPrx>>>&, const ::std::optional<ICPrx>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

#if defined(__GNUC__)
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wextra" // initialize all virtual bases in correct order
#endif

    explicit ICPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    ICPrx(const ICPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    ICPrx(ICPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    ICPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    ICPrx& operator=(const ICPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    ICPrx& operator=(ICPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static ICPrx _fromReference(::IceInternal::ReferencePtr ref) { return ICPrx(::std::move(ref)); }

protected:

    ICPrx() = default;

    explicit ICPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond

#if defined(__GNUC__)
#   pragma GCC diagnostic pop
#endif
};

}

class InitialPrx : public ::Ice::Proxy<InitialPrx, ::Ice::ObjectPrx>
{
public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    ::std::optional<::Test::MA::IAPrx> iaop(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::optional<::Test::MA::IAPrx>> iaopAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    iaopAsync(::std::function<void(::std::optional<::Test::MA::IAPrx>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_iaop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Test::MA::IAPrx>>>&, const ::Ice::Context&) const;
    /// \endcond

    ::std::optional<::Test::MB::IB1Prx> ib1op(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::optional<::Test::MB::IB1Prx>> ib1opAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    ib1opAsync(::std::function<void(::std::optional<::Test::MB::IB1Prx>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_ib1op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Test::MB::IB1Prx>>>&, const ::Ice::Context&) const;
    /// \endcond

    ::std::optional<::Test::MB::IB2Prx> ib2op(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::optional<::Test::MB::IB2Prx>> ib2opAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    ib2opAsync(::std::function<void(::std::optional<::Test::MB::IB2Prx>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_ib2op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Test::MB::IB2Prx>>>&, const ::Ice::Context&) const;
    /// \endcond

    ::std::optional<::Test::MA::ICPrx> icop(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::optional<::Test::MA::ICPrx>> icopAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    icopAsync(::std::function<void(::std::optional<::Test::MA::ICPrx>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_icop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Test::MA::ICPrx>>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit InitialPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    InitialPrx(const InitialPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    InitialPrx(InitialPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    InitialPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    InitialPrx& operator=(const InitialPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    InitialPrx& operator=(InitialPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static InitialPrx _fromReference(::IceInternal::ReferencePtr ref) { return InitialPrx(::std::move(ref)); }

protected:

    InitialPrx() = default;

    explicit InitialPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

class EchoPrx : public ::Ice::Proxy<EchoPrx, ::Ice::ObjectPrx>
{
public:

    void setConnection(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> setConnectionAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    setConnectionAsync(::std::function<void()> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_setConnection(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void startBatch(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> startBatchAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    startBatchAsync(::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_startBatch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void flushBatch(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> flushBatchAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    flushBatchAsync(::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_flushBatch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit EchoPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    EchoPrx(const EchoPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    EchoPrx(EchoPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    EchoPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    EchoPrx& operator=(const EchoPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    EchoPrx& operator=(EchoPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static EchoPrx _fromReference(::IceInternal::ReferencePtr ref) { return EchoPrx(::std::move(ref)); }

protected:

    EchoPrx() = default;

    explicit EchoPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace Test
{

namespace MC
{

class A : public ::Ice::ValueHelper<A, ::Ice::Value>
{
public:

    virtual ~A();

    A() = default;

    A(const A&) = default;
    A(A&&) = default;
    A& operator=(const A&) = default;
    A& operator=(A&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit A(::std::int32_t aA) :
        aA(aA)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t aA;
};

/// \cond INTERNAL
static A _iceS_A_init;
/// \endcond

class B : public ::Ice::ValueHelper<B, A>
{
public:

    virtual ~B();

    B() = default;

    B(const B&) = default;
    B(B&&) = default;
    B& operator=(const B&) = default;
    B& operator=(B&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    B(::std::int32_t aA, ::std::int32_t bB) :
        Ice::ValueHelper<B, A>(aA),
        bB(bB)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t bB;
};

class C : public ::Ice::ValueHelper<C, B>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C(::std::int32_t aA, ::std::int32_t bB, ::std::int32_t cC) :
        Ice::ValueHelper<C, B>(aA, bB),
        cC(cC)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB, cC);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t cC;
};

class D : public ::Ice::ValueHelper<D, C>
{
public:

    virtual ~D();

    D() = default;

    D(const D&) = default;
    D(D&&) = default;
    D& operator=(const D&) = default;
    D& operator=(D&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    D(::std::int32_t aA, ::std::int32_t bB, ::std::int32_t cC, ::std::int32_t dD) :
        Ice::ValueHelper<D, C>(aA, bB, cC),
        dD(dD)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB, cC, dD);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t dD;
};

}

namespace MD
{

class A : public ::Ice::ValueHelper<A, ::Ice::Value>
{
public:

    virtual ~A();

    A() = default;

    A(const A&) = default;
    A(A&&) = default;
    A& operator=(const A&) = default;
    A& operator=(A&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit A(::std::int32_t aA) :
        aA(aA)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t aA;
};

class B : public ::Ice::ValueHelper<B, A>
{
public:

    virtual ~B();

    B() = default;

    B(const B&) = default;
    B(B&&) = default;
    B& operator=(const B&) = default;
    B& operator=(B&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    B(::std::int32_t aA, ::std::int32_t bB) :
        Ice::ValueHelper<B, A>(aA),
        bB(bB)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t bB;
};

class C : public ::Ice::ValueHelper<C, B>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C(::std::int32_t aA, ::std::int32_t bB, ::std::int32_t cC) :
        Ice::ValueHelper<C, B>(aA, bB),
        cC(cC)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB, cC);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t cC;
};

class D : public ::Ice::ValueHelper<D, C>
{
public:

    virtual ~D();

    D() = default;

    D(const D&) = default;
    D(D&&) = default;
    D& operator=(const D&) = default;
    D& operator=(D&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    D(::std::int32_t aA, ::std::int32_t bB, ::std::int32_t cC, ::std::int32_t dD) :
        Ice::ValueHelper<D, C>(aA, bB, cC),
        dD(dD)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB, cC, dD);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t dD;
};

}

namespace ME
{

class A : public ::Ice::ValueHelper<A, ::Ice::Value>
{
public:

    virtual ~A();

    A() = default;

    A(const A&) = default;
    A(A&&) = default;
    A& operator=(const A&) = default;
    A& operator=(A&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit A(::std::int32_t aA) :
        aA(aA)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t aA;
};

class B : public ::Ice::ValueHelper<B, A>
{
public:

    virtual ~B();

    B() = default;

    B(const B&) = default;
    B(B&&) = default;
    B& operator=(const B&) = default;
    B& operator=(B&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    B(::std::int32_t aA, ::std::int32_t bB) :
        Ice::ValueHelper<B, A>(aA),
        bB(bB)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t bB;
};

class C : public ::Ice::ValueHelper<C, B>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C(::std::int32_t aA, ::std::int32_t bB, ::std::int32_t cC) :
        Ice::ValueHelper<C, B>(aA, bB),
        cC(cC)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB, cC);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t cC;
};

class D : public ::Ice::ValueHelper<D, C>
{
public:

    virtual ~D();

    D() = default;

    D(const D&) = default;
    D(D&&) = default;
    D& operator=(const D&) = default;
    D& operator=(D&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    D(::std::int32_t aA, ::std::int32_t bB, ::std::int32_t cC, ::std::int32_t dD) :
        Ice::ValueHelper<D, C>(aA, bB, cC),
        dD(dD)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB, cC, dD);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t dD;
};

}

namespace MF
{

class A : public ::Ice::ValueHelper<A, ::Ice::Value>
{
public:

    virtual ~A();

    A() = default;

    A(const A&) = default;
    A(A&&) = default;
    A& operator=(const A&) = default;
    A& operator=(A&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit A(::std::int32_t aA) :
        aA(aA)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t aA;
};

class B : public ::Ice::ValueHelper<B, A>
{
public:

    virtual ~B();

    B() = default;

    B(const B&) = default;
    B(B&&) = default;
    B& operator=(const B&) = default;
    B& operator=(B&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    B(::std::int32_t aA, ::std::int32_t bB) :
        Ice::ValueHelper<B, A>(aA),
        bB(bB)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t bB;
};

class C : public ::Ice::ValueHelper<C, B>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C(::std::int32_t aA, ::std::int32_t bB, ::std::int32_t cC) :
        Ice::ValueHelper<C, B>(aA, bB),
        cC(cC)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB, cC);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t cC;
};

class D : public ::Ice::ValueHelper<D, C>
{
public:

    virtual ~D();

    D() = default;

    D(const D&) = default;
    D(D&&) = default;
    D& operator=(const D&) = default;
    D& operator=(D&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    D(::std::int32_t aA, ::std::int32_t bB, ::std::int32_t cC, ::std::int32_t dD) :
        Ice::ValueHelper<D, C>(aA, bB, cC),
        dD(dD)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB, cC, dD);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t dD;
};

}

namespace MG
{

class A : public ::Ice::ValueHelper<A, ::Ice::Value>
{
public:

    virtual ~A();

    A() = default;

    A(const A&) = default;
    A(A&&) = default;
    A& operator=(const A&) = default;
    A& operator=(A&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit A(::std::int32_t aA) :
        aA(aA)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t aA;
};

class B : public ::Ice::ValueHelper<B, A>
{
public:

    virtual ~B();

    B() = default;

    B(const B&) = default;
    B(B&&) = default;
    B& operator=(const B&) = default;
    B& operator=(B&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    B(::std::int32_t aA, ::std::int32_t bB) :
        Ice::ValueHelper<B, A>(aA),
        bB(bB)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t bB;
};

class C : public ::Ice::ValueHelper<C, B>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C(::std::int32_t aA, ::std::int32_t bB, ::std::int32_t cC) :
        Ice::ValueHelper<C, B>(aA, bB),
        cC(cC)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB, cC);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t cC;
};

class D : public ::Ice::ValueHelper<D, C>
{
public:

    virtual ~D();

    D() = default;

    D(const D&) = default;
    D(D&&) = default;
    D& operator=(const D&) = default;
    D& operator=(D&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    D(::std::int32_t aA, ::std::int32_t bB, ::std::int32_t cC, ::std::int32_t dD) :
        Ice::ValueHelper<D, C>(aA, bB, cC),
        dD(dD)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB, cC, dD);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t dD;
};

}

namespace MH
{

class A : public ::Ice::ValueHelper<A, ::Ice::Value>
{
public:

    virtual ~A();

    A() = default;

    A(const A&) = default;
    A(A&&) = default;
    A& operator=(const A&) = default;
    A& operator=(A&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit A(::std::int32_t aA) :
        aA(aA)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t aA;
};

class B : public ::Ice::ValueHelper<B, A>
{
public:

    virtual ~B();

    B() = default;

    B(const B&) = default;
    B(B&&) = default;
    B& operator=(const B&) = default;
    B& operator=(B&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    B(::std::int32_t aA, ::std::int32_t bB) :
        Ice::ValueHelper<B, A>(aA),
        bB(bB)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t bB;
};

class C : public ::Ice::ValueHelper<C, B>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C(::std::int32_t aA, ::std::int32_t bB, ::std::int32_t cC) :
        Ice::ValueHelper<C, B>(aA, bB),
        cC(cC)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB, cC);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t cC;
};

class D : public ::Ice::ValueHelper<D, C>
{
public:

    virtual ~D();

    D() = default;

    D(const D&) = default;
    D(D&&) = default;
    D& operator=(const D&) = default;
    D& operator=(D&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    D(::std::int32_t aA, ::std::int32_t bB, ::std::int32_t cC, ::std::int32_t dD) :
        Ice::ValueHelper<D, C>(aA, bB, cC),
        dD(dD)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(aA, bB, cC, dD);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t dD;
};

}

}

namespace Test
{

namespace MA
{

class IA : public virtual ::Ice::Object
{
public:

    using ProxyType = IAPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::optional<IAPrx> iaop(::std::optional<IAPrx> p, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_iaop(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using IAPtr = ::std::shared_ptr<IA>;

}

namespace MB
{

class IB1 : public virtual ::Test::MA::IA
{
public:

    using ProxyType = IB1Prx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::optional<IB1Prx> ib1op(::std::optional<IB1Prx> p, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_ib1op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using IB1Ptr = ::std::shared_ptr<IB1>;

class IB2 : public virtual ::Test::MA::IA
{
public:

    using ProxyType = IB2Prx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::optional<IB2Prx> ib2op(::std::optional<IB2Prx> p, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_ib2op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using IB2Ptr = ::std::shared_ptr<IB2>;

}

namespace MA
{

class IC : public virtual ::Test::MB::IB1,
           public virtual ::Test::MB::IB2
{
public:

    using ProxyType = ICPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::optional<ICPrx> icop(::std::optional<ICPrx> p, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_icop(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using ICPtr = ::std::shared_ptr<IC>;

}

class Initial : public virtual ::Ice::Object
{
public:

    using ProxyType = InitialPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::optional<::Test::MA::IAPrx> iaop(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_iaop(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::optional<::Test::MB::IB1Prx> ib1op(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_ib1op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::optional<::Test::MB::IB2Prx> ib2op(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_ib2op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::optional<::Test::MA::ICPrx> icop(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_icop(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using InitialPtr = ::std::shared_ptr<Initial>;

class Echo : public virtual ::Ice::Object
{
public:

    using ProxyType = EchoPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void setConnection(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setConnection(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void startBatch(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_startBatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void flushBatch(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_flushBatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using EchoPtr = ::std::shared_ptr<Echo>;

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::Test::MC::A, S>
{
    static void read(S* istr, ::Test::MC::A& v)
    {
        istr->readAll(v.aA);
    }
};

template<typename S>
struct StreamWriter<::Test::MC::B, S>
{
    static void write(S* ostr, const ::Test::MC::B& v)
    {
        ostr->writeAll(v.bB);
    }
};

template<typename S>
struct StreamReader<::Test::MC::B, S>
{
    static void read(S* istr, ::Test::MC::B& v)
    {
        istr->readAll(v.bB);
    }
};

template<typename S>
struct StreamWriter<::Test::MC::C, S>
{
    static void write(S* ostr, const ::Test::MC::C& v)
    {
        ostr->writeAll(v.cC);
    }
};

template<typename S>
struct StreamReader<::Test::MC::C, S>
{
    static void read(S* istr, ::Test::MC::C& v)
    {
        istr->readAll(v.cC);
    }
};

template<typename S>
struct StreamWriter<::Test::MC::D, S>
{
    static void write(S* ostr, const ::Test::MC::D& v)
    {
        ostr->writeAll(v.dD);
    }
};

template<typename S>
struct StreamReader<::Test::MC::D, S>
{
    static void read(S* istr, ::Test::MC::D& v)
    {
        istr->readAll(v.dD);
    }
};

template<typename S>
struct StreamReader<::Test::MD::A, S>
{
    static void read(S* istr, ::Test::MD::A& v)
    {
        istr->readAll(v.aA);
    }
};

template<typename S>
struct StreamWriter<::Test::MD::B, S>
{
    static void write(S* ostr, const ::Test::MD::B& v)
    {
        ostr->writeAll(v.bB);
    }
};

template<typename S>
struct StreamReader<::Test::MD::B, S>
{
    static void read(S* istr, ::Test::MD::B& v)
    {
        istr->readAll(v.bB);
    }
};

template<typename S>
struct StreamWriter<::Test::MD::C, S>
{
    static void write(S* ostr, const ::Test::MD::C& v)
    {
        ostr->writeAll(v.cC);
    }
};

template<typename S>
struct StreamReader<::Test::MD::C, S>
{
    static void read(S* istr, ::Test::MD::C& v)
    {
        istr->readAll(v.cC);
    }
};

template<typename S>
struct StreamWriter<::Test::MD::D, S>
{
    static void write(S* ostr, const ::Test::MD::D& v)
    {
        ostr->writeAll(v.dD);
    }
};

template<typename S>
struct StreamReader<::Test::MD::D, S>
{
    static void read(S* istr, ::Test::MD::D& v)
    {
        istr->readAll(v.dD);
    }
};

template<typename S>
struct StreamReader<::Test::ME::A, S>
{
    static void read(S* istr, ::Test::ME::A& v)
    {
        istr->readAll(v.aA);
    }
};

template<typename S>
struct StreamWriter<::Test::ME::B, S>
{
    static void write(S* ostr, const ::Test::ME::B& v)
    {
        ostr->writeAll(v.bB);
    }
};

template<typename S>
struct StreamReader<::Test::ME::B, S>
{
    static void read(S* istr, ::Test::ME::B& v)
    {
        istr->readAll(v.bB);
    }
};

template<typename S>
struct StreamWriter<::Test::ME::C, S>
{
    static void write(S* ostr, const ::Test::ME::C& v)
    {
        ostr->writeAll(v.cC);
    }
};

template<typename S>
struct StreamReader<::Test::ME::C, S>
{
    static void read(S* istr, ::Test::ME::C& v)
    {
        istr->readAll(v.cC);
    }
};

template<typename S>
struct StreamWriter<::Test::ME::D, S>
{
    static void write(S* ostr, const ::Test::ME::D& v)
    {
        ostr->writeAll(v.dD);
    }
};

template<typename S>
struct StreamReader<::Test::ME::D, S>
{
    static void read(S* istr, ::Test::ME::D& v)
    {
        istr->readAll(v.dD);
    }
};

template<typename S>
struct StreamReader<::Test::MF::A, S>
{
    static void read(S* istr, ::Test::MF::A& v)
    {
        istr->readAll(v.aA);
    }
};

template<typename S>
struct StreamWriter<::Test::MF::B, S>
{
    static void write(S* ostr, const ::Test::MF::B& v)
    {
        ostr->writeAll(v.bB);
    }
};

template<typename S>
struct StreamReader<::Test::MF::B, S>
{
    static void read(S* istr, ::Test::MF::B& v)
    {
        istr->readAll(v.bB);
    }
};

template<typename S>
struct StreamWriter<::Test::MF::C, S>
{
    static void write(S* ostr, const ::Test::MF::C& v)
    {
        ostr->writeAll(v.cC);
    }
};

template<typename S>
struct StreamReader<::Test::MF::C, S>
{
    static void read(S* istr, ::Test::MF::C& v)
    {
        istr->readAll(v.cC);
    }
};

template<typename S>
struct StreamWriter<::Test::MF::D, S>
{
    static void write(S* ostr, const ::Test::MF::D& v)
    {
        ostr->writeAll(v.dD);
    }
};

template<typename S>
struct StreamReader<::Test::MF::D, S>
{
    static void read(S* istr, ::Test::MF::D& v)
    {
        istr->readAll(v.dD);
    }
};

template<typename S>
struct StreamReader<::Test::MG::A, S>
{
    static void read(S* istr, ::Test::MG::A& v)
    {
        istr->readAll(v.aA);
    }
};

template<typename S>
struct StreamWriter<::Test::MG::B, S>
{
    static void write(S* ostr, const ::Test::MG::B& v)
    {
        ostr->writeAll(v.bB);
    }
};

template<typename S>
struct StreamReader<::Test::MG::B, S>
{
    static void read(S* istr, ::Test::MG::B& v)
    {
        istr->readAll(v.bB);
    }
};

template<typename S>
struct StreamWriter<::Test::MG::C, S>
{
    static void write(S* ostr, const ::Test::MG::C& v)
    {
        ostr->writeAll(v.cC);
    }
};

template<typename S>
struct StreamReader<::Test::MG::C, S>
{
    static void read(S* istr, ::Test::MG::C& v)
    {
        istr->readAll(v.cC);
    }
};

template<typename S>
struct StreamWriter<::Test::MG::D, S>
{
    static void write(S* ostr, const ::Test::MG::D& v)
    {
        ostr->writeAll(v.dD);
    }
};

template<typename S>
struct StreamReader<::Test::MG::D, S>
{
    static void read(S* istr, ::Test::MG::D& v)
    {
        istr->readAll(v.dD);
    }
};

template<typename S>
struct StreamReader<::Test::MH::A, S>
{
    static void read(S* istr, ::Test::MH::A& v)
    {
        istr->readAll(v.aA);
    }
};

template<typename S>
struct StreamWriter<::Test::MH::B, S>
{
    static void write(S* ostr, const ::Test::MH::B& v)
    {
        ostr->writeAll(v.bB);
    }
};

template<typename S>
struct StreamReader<::Test::MH::B, S>
{
    static void read(S* istr, ::Test::MH::B& v)
    {
        istr->readAll(v.bB);
    }
};

template<typename S>
struct StreamWriter<::Test::MH::C, S>
{
    static void write(S* ostr, const ::Test::MH::C& v)
    {
        ostr->writeAll(v.cC);
    }
};

template<typename S>
struct StreamReader<::Test::MH::C, S>
{
    static void read(S* istr, ::Test::MH::C& v)
    {
        istr->readAll(v.cC);
    }
};

template<typename S>
struct StreamWriter<::Test::MH::D, S>
{
    static void write(S* ostr, const ::Test::MH::D& v)
    {
        ostr->writeAll(v.dD);
    }
};

template<typename S>
struct StreamReader<::Test::MH::D, S>
{
    static void read(S* istr, ::Test::MH::D& v)
    {
        istr->readAll(v.dD);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
