//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_Test_Empty_ids[2] =
{
    "::Ice::Object",
    "::Test::Empty"
};
const ::std::string iceC_Test_Empty_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

const ::std::string iceC_Test_A_ids[2] =
{
    "::Ice::Object",
    "::Test::A"
};
const ::std::string iceC_Test_A_ops[] =
{
    "callA",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_A_callA_name = "callA";

const ::std::string iceC_Test_B_ids[3] =
{
    "::Ice::Object",
    "::Test::A",
    "::Test::B"
};
const ::std::string iceC_Test_B_ops[] =
{
    "callA",
    "callB",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_B_callB_name = "callB";

const ::std::string iceC_Test_C_ids[3] =
{
    "::Ice::Object",
    "::Test::A",
    "::Test::C"
};
const ::std::string iceC_Test_C_ops[] =
{
    "callA",
    "callC",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_C_callC_name = "callC";

const ::std::string iceC_Test_D_ids[5] =
{
    "::Ice::Object",
    "::Test::A",
    "::Test::B",
    "::Test::C",
    "::Test::D"
};
const ::std::string iceC_Test_D_ops[] =
{
    "callA",
    "callB",
    "callC",
    "callD",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_D_callD_name = "callD";

const ::std::string iceC_Test_E_ids[2] =
{
    "::Ice::Object",
    "::Test::E"
};
const ::std::string iceC_Test_E_ops[] =
{
    "callE",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_E_callE_name = "callE";

const ::std::string iceC_Test_F_ids[3] =
{
    "::Ice::Object",
    "::Test::E",
    "::Test::F"
};
const ::std::string iceC_Test_F_ops[] =
{
    "callE",
    "callF",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_F_callF_name = "callF";

const ::std::string iceC_Test_G_ids[2] =
{
    "::Ice::Object",
    "::Test::G"
};
const ::std::string iceC_Test_G_ops[] =
{
    "callG",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown"
};
const ::std::string iceC_Test_G_shutdown_name = "shutdown";
const ::std::string iceC_Test_G_callG_name = "callG";

const ::std::string iceC_Test_H_ids[3] =
{
    "::Ice::Object",
    "::Test::G",
    "::Test::H"
};
const ::std::string iceC_Test_H_ops[] =
{
    "callG",
    "callH",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown"
};
const ::std::string iceC_Test_H_callH_name = "callH";

const ::std::string iceC_Test_Echo_ids[2] =
{
    "::Ice::Object",
    "::Test::Echo"
};
const ::std::string iceC_Test_Echo_ops[] =
{
    "flushBatch",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setConnection",
    "shutdown",
    "startBatch"
};
const ::std::string iceC_Test_Echo_setConnection_name = "setConnection";
const ::std::string iceC_Test_Echo_startBatch_name = "startBatch";
const ::std::string iceC_Test_Echo_flushBatch_name = "flushBatch";
const ::std::string iceC_Test_Echo_shutdown_name = "shutdown";

}

bool
Test::Empty::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Empty_ids, iceC_Test_Empty_ids + 2, s);
}

::std::vector<::std::string>
Test::Empty::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Empty_ids[0], &iceC_Test_Empty_ids[2]);
}

::std::string
Test::Empty::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Empty::ice_staticId()
{
    static const ::std::string typeId = "::Test::Empty";
    return typeId;
}

bool
Test::A::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_A_ids, iceC_Test_A_ids + 2, s);
}

::std::vector<::std::string>
Test::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_A_ids[0], &iceC_Test_A_ids[2]);
}

::std::string
Test::A::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

/// \cond INTERNAL
bool
Test::A::_iceD_callA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callA(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::A::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_A_ops, iceC_Test_A_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_A_ops)
    {
        case 0:
        {
            return _iceD_callA(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::B::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_B_ids, iceC_Test_B_ids + 3, s);
}

::std::vector<::std::string>
Test::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_B_ids[0], &iceC_Test_B_ids[3]);
}

::std::string
Test::B::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

/// \cond INTERNAL
bool
Test::B::_iceD_callB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callB(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::B::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_B_ops, iceC_Test_B_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_B_ops)
    {
        case 0:
        {
            return _iceD_callA(in, current);
        }
        case 1:
        {
            return _iceD_callB(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::C::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_C_ids, iceC_Test_C_ids + 3, s);
}

::std::vector<::std::string>
Test::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_C_ids[0], &iceC_Test_C_ids[3]);
}

::std::string
Test::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

/// \cond INTERNAL
bool
Test::C::_iceD_callC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callC(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::C::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_C_ops, iceC_Test_C_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_C_ops)
    {
        case 0:
        {
            return _iceD_callA(in, current);
        }
        case 1:
        {
            return _iceD_callC(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::D::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_D_ids, iceC_Test_D_ids + 5, s);
}

::std::vector<::std::string>
Test::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_D_ids[0], &iceC_Test_D_ids[5]);
}

::std::string
Test::D::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

/// \cond INTERNAL
bool
Test::D::_iceD_callD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callD(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::D::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_D_ops, iceC_Test_D_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_D_ops)
    {
        case 0:
        {
            return _iceD_callA(in, current);
        }
        case 1:
        {
            return _iceD_callB(in, current);
        }
        case 2:
        {
            return _iceD_callC(in, current);
        }
        case 3:
        {
            return _iceD_callD(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::E::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_E_ids, iceC_Test_E_ids + 2, s);
}

::std::vector<::std::string>
Test::E::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_E_ids[0], &iceC_Test_E_ids[2]);
}

::std::string
Test::E::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::E::ice_staticId()
{
    static const ::std::string typeId = "::Test::E";
    return typeId;
}

/// \cond INTERNAL
bool
Test::E::_iceD_callE(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callE(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::E::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_E_ops, iceC_Test_E_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_E_ops)
    {
        case 0:
        {
            return _iceD_callE(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::F::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_F_ids, iceC_Test_F_ids + 3, s);
}

::std::vector<::std::string>
Test::F::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_F_ids[0], &iceC_Test_F_ids[3]);
}

::std::string
Test::F::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::F::ice_staticId()
{
    static const ::std::string typeId = "::Test::F";
    return typeId;
}

/// \cond INTERNAL
bool
Test::F::_iceD_callF(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callF(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::F::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_F_ops, iceC_Test_F_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_F_ops)
    {
        case 0:
        {
            return _iceD_callE(in, current);
        }
        case 1:
        {
            return _iceD_callF(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::G::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_G_ids, iceC_Test_G_ids + 2, s);
}

::std::vector<::std::string>
Test::G::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_G_ids[0], &iceC_Test_G_ids[2]);
}

::std::string
Test::G::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::G::ice_staticId()
{
    static const ::std::string typeId = "::Test::G";
    return typeId;
}

/// \cond INTERNAL
bool
Test::G::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::G::_iceD_callG(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callG(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::G::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_G_ops, iceC_Test_G_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_G_ops)
    {
        case 0:
        {
            return _iceD_callG(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::H::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_H_ids, iceC_Test_H_ids + 3, s);
}

::std::vector<::std::string>
Test::H::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_H_ids[0], &iceC_Test_H_ids[3]);
}

::std::string
Test::H::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::H::ice_staticId()
{
    static const ::std::string typeId = "::Test::H";
    return typeId;
}

/// \cond INTERNAL
bool
Test::H::_iceD_callH(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callH(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::H::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_H_ops, iceC_Test_H_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_H_ops)
    {
        case 0:
        {
            return _iceD_callG(in, current);
        }
        case 1:
        {
            return _iceD_callH(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Echo::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Echo_ids, iceC_Test_Echo_ids + 2, s);
}

::std::vector<::std::string>
Test::Echo::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Echo_ids[0], &iceC_Test_Echo_ids[2]);
}

::std::string
Test::Echo::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Echo::ice_staticId()
{
    static const ::std::string typeId = "::Test::Echo";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Echo::_iceD_setConnection(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->setConnection(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Echo::_iceD_startBatch(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->startBatch(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Echo::_iceD_flushBatch(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->flushBatch(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Echo::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Echo::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Echo_ops, iceC_Test_Echo_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Echo_ops)
    {
        case 0:
        {
            return _iceD_flushBatch(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_setConnection(in, current);
        }
        case 6:
        {
            return _iceD_shutdown(in, current);
        }
        case 7:
        {
            return _iceD_startBatch(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::EmptyPrx::_newInstance() const
{
    return ::IceInternal::createProxy<EmptyPrx>();
}
/// \endcond

const ::std::string&
Test::EmptyPrx::ice_staticId()
{
    return Empty::ice_staticId();
}

/// \cond INTERNAL
void
Test::APrx::_iceI_callA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_A_callA_name);
    outAsync->invoke(iceC_Test_A_callA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::APrx::_newInstance() const
{
    return ::IceInternal::createProxy<APrx>();
}
/// \endcond

const ::std::string&
Test::APrx::ice_staticId()
{
    return A::ice_staticId();
}

/// \cond INTERNAL
void
Test::BPrx::_iceI_callB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_B_callB_name);
    outAsync->invoke(iceC_Test_B_callB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::BPrx::_newInstance() const
{
    return ::IceInternal::createProxy<BPrx>();
}
/// \endcond

const ::std::string&
Test::BPrx::ice_staticId()
{
    return B::ice_staticId();
}

/// \cond INTERNAL
void
Test::CPrx::_iceI_callC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_C_callC_name);
    outAsync->invoke(iceC_Test_C_callC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::CPrx::_newInstance() const
{
    return ::IceInternal::createProxy<CPrx>();
}
/// \endcond

const ::std::string&
Test::CPrx::ice_staticId()
{
    return C::ice_staticId();
}

/// \cond INTERNAL
void
Test::DPrx::_iceI_callD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_D_callD_name);
    outAsync->invoke(iceC_Test_D_callD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::DPrx::_newInstance() const
{
    return ::IceInternal::createProxy<DPrx>();
}
/// \endcond

const ::std::string&
Test::DPrx::ice_staticId()
{
    return D::ice_staticId();
}

/// \cond INTERNAL
void
Test::EPrx::_iceI_callE(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_E_callE_name);
    outAsync->invoke(iceC_Test_E_callE_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::EPrx::_newInstance() const
{
    return ::IceInternal::createProxy<EPrx>();
}
/// \endcond

const ::std::string&
Test::EPrx::ice_staticId()
{
    return E::ice_staticId();
}

/// \cond INTERNAL
void
Test::FPrx::_iceI_callF(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_F_callF_name);
    outAsync->invoke(iceC_Test_F_callF_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::FPrx::_newInstance() const
{
    return ::IceInternal::createProxy<FPrx>();
}
/// \endcond

const ::std::string&
Test::FPrx::ice_staticId()
{
    return F::ice_staticId();
}

/// \cond INTERNAL
void
Test::GPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_G_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::GPrx::_iceI_callG(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_G_callG_name);
    outAsync->invoke(iceC_Test_G_callG_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::GPrx::_newInstance() const
{
    return ::IceInternal::createProxy<GPrx>();
}
/// \endcond

const ::std::string&
Test::GPrx::ice_staticId()
{
    return G::ice_staticId();
}

/// \cond INTERNAL
void
Test::HPrx::_iceI_callH(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_H_callH_name);
    outAsync->invoke(iceC_Test_H_callH_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::HPrx::_newInstance() const
{
    return ::IceInternal::createProxy<HPrx>();
}
/// \endcond

const ::std::string&
Test::HPrx::ice_staticId()
{
    return H::ice_staticId();
}

/// \cond INTERNAL
void
Test::EchoPrx::_iceI_setConnection(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Echo_setConnection_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::EchoPrx::_iceI_startBatch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Echo_startBatch_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::EchoPrx::_iceI_flushBatch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Echo_flushBatch_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::EchoPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Echo_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::EchoPrx::_newInstance() const
{
    return ::IceInternal::createProxy<EchoPrx>();
}
/// \endcond

const ::std::string&
Test::EchoPrx::ice_staticId()
{
    return Echo::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_A_callA_name = "callA";

const ::std::string iceC_Test_B_callB_name = "callB";

const ::std::string iceC_Test_C_callC_name = "callC";

const ::std::string iceC_Test_D_callD_name = "callD";

const ::std::string iceC_Test_E_callE_name = "callE";

const ::std::string iceC_Test_F_callF_name = "callF";

const ::std::string iceC_Test_G_shutdown_name = "shutdown";

const ::std::string iceC_Test_G_callG_name = "callG";

const ::std::string iceC_Test_H_callH_name = "callH";

const ::std::string iceC_Test_Echo_setConnection_name = "setConnection";

const ::std::string iceC_Test_Echo_startBatch_name = "startBatch";

const ::std::string iceC_Test_Echo_flushBatch_name = "flushBatch";

const ::std::string iceC_Test_Echo_shutdown_name = "shutdown";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Empty* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Empty>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Empty;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Empty::_newInstance() const
{
    return new Empty;
}
/// \endcond

const ::std::string&
IceProxy::Test::Empty::ice_staticId()
{
    return ::Test::Empty::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(A* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< A>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new A;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::A::_iceI_begin_callA(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_A_callA_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_A_callA_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_A_callA_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_A_callA_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::A::end_callA(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_A_callA_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::A::_newInstance() const
{
    return new A;
}
/// \endcond

const ::std::string&
IceProxy::Test::A::ice_staticId()
{
    return ::Test::A::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(B* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< B>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new B;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::B::_iceI_begin_callB(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_B_callB_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_B_callB_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_B_callB_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_B_callB_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::B::end_callB(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_B_callB_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::B::_newInstance() const
{
    return new B;
}
/// \endcond

const ::std::string&
IceProxy::Test::B::ice_staticId()
{
    return ::Test::B::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(C* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::C::_iceI_begin_callC(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_C_callC_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_C_callC_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_C_callC_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_C_callC_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::C::end_callC(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_C_callC_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::C::_newInstance() const
{
    return new C;
}
/// \endcond

const ::std::string&
IceProxy::Test::C::ice_staticId()
{
    return ::Test::C::ice_staticId();
}

::IceProxy::Test::_DBase::~_DBase()
{
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(D* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< D>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new D;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::D::_iceI_begin_callD(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_D_callD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_D_callD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_D_callD_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_D_callD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::D::end_callD(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_D_callD_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::D::_newInstance() const
{
    return new D;
}
/// \endcond

const ::std::string&
IceProxy::Test::D::ice_staticId()
{
    return ::Test::D::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(E* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< E>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new E;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::E::_iceI_begin_callE(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_E_callE_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_E_callE_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_E_callE_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_E_callE_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::E::end_callE(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_E_callE_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::E::_newInstance() const
{
    return new E;
}
/// \endcond

const ::std::string&
IceProxy::Test::E::ice_staticId()
{
    return ::Test::E::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(F* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< F>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new F;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::F::_iceI_begin_callF(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_F_callF_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_F_callF_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_F_callF_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_F_callF_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::F::end_callF(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_F_callF_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::F::_newInstance() const
{
    return new F;
}
/// \endcond

const ::std::string&
IceProxy::Test::F::ice_staticId()
{
    return ::Test::F::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(G* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< G>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new G;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::G::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_G_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_G_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_G_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::G::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_G_shutdown_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::G::_iceI_begin_callG(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_G_callG_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_G_callG_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_G_callG_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_G_callG_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::G::end_callG(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_G_callG_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::G::_newInstance() const
{
    return new G;
}
/// \endcond

const ::std::string&
IceProxy::Test::G::ice_staticId()
{
    return ::Test::G::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(H* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< H>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new H;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::H::_iceI_begin_callH(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_H_callH_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_H_callH_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_H_callH_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_H_callH_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::H::end_callH(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_H_callH_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::H::_newInstance() const
{
    return new H;
}
/// \endcond

const ::std::string&
IceProxy::Test::H::ice_staticId()
{
    return ::Test::H::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Echo* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Echo>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Echo;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Echo::_iceI_begin_setConnection(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Echo_setConnection_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Echo_setConnection_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Echo_setConnection_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Echo::end_setConnection(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Echo_setConnection_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Echo::_iceI_begin_startBatch(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Echo_startBatch_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Echo_startBatch_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Echo_startBatch_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Echo::end_startBatch(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Echo_startBatch_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Echo::_iceI_begin_flushBatch(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Echo_flushBatch_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Echo_flushBatch_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Echo_flushBatch_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Echo::end_flushBatch(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Echo_flushBatch_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Echo::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Echo_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Echo_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Echo_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Echo::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Echo_shutdown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Echo::_newInstance() const
{
    return new Echo;
}
/// \endcond

const ::std::string&
IceProxy::Test::Echo::ice_staticId()
{
    return ::Test::Echo::ice_staticId();
}

Test::Empty::~Empty()
{
}

namespace
{
const ::std::string iceC_Test_Empty_ids[2] =
{
    "::Ice::Object",
    "::Test::Empty"
};

}

bool
Test::Empty::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Empty_ids, iceC_Test_Empty_ids + 2, s);
}

::std::vector< ::std::string>
Test::Empty::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Empty_ids[0], &iceC_Test_Empty_ids[2]);
}

::std::string
Test::Empty::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Empty::ice_staticId()
{
    static const ::std::string typeId = "::Test::Empty";
    return typeId;
}

Test::A::~A()
{
}

namespace
{
const ::std::string iceC_Test_A_ids[2] =
{
    "::Ice::Object",
    "::Test::A"
};

}

bool
Test::A::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_A_ids, iceC_Test_A_ids + 2, s);
}

::std::vector< ::std::string>
Test::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_A_ids[0], &iceC_Test_A_ids[2]);
}

::std::string
Test::A::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

/// \cond INTERNAL
bool
Test::A::_iceD_callA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callA(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_A_all[] =
{
    "callA",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::A::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_A_all, iceC_Test_A_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_A_all)
    {
        case 0:
        {
            return _iceD_callA(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::B::~B()
{
}

namespace
{
const ::std::string iceC_Test_B_ids[3] =
{
    "::Ice::Object",
    "::Test::A",
    "::Test::B"
};

}

bool
Test::B::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_B_ids, iceC_Test_B_ids + 3, s);
}

::std::vector< ::std::string>
Test::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_B_ids[0], &iceC_Test_B_ids[3]);
}

::std::string
Test::B::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

/// \cond INTERNAL
bool
Test::B::_iceD_callB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callB(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_B_all[] =
{
    "callA",
    "callB",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::B::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_B_all, iceC_Test_B_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_B_all)
    {
        case 0:
        {
            return _iceD_callA(in, current);
        }
        case 1:
        {
            return _iceD_callB(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::C::~C()
{
}

namespace
{
const ::std::string iceC_Test_C_ids[3] =
{
    "::Ice::Object",
    "::Test::A",
    "::Test::C"
};

}

bool
Test::C::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_C_ids, iceC_Test_C_ids + 3, s);
}

::std::vector< ::std::string>
Test::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_C_ids[0], &iceC_Test_C_ids[3]);
}

::std::string
Test::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

/// \cond INTERNAL
bool
Test::C::_iceD_callC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callC(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_C_all[] =
{
    "callA",
    "callC",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::C::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_C_all, iceC_Test_C_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_C_all)
    {
        case 0:
        {
            return _iceD_callA(in, current);
        }
        case 1:
        {
            return _iceD_callC(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::D::~D()
{
}

namespace
{
const ::std::string iceC_Test_D_ids[5] =
{
    "::Ice::Object",
    "::Test::A",
    "::Test::B",
    "::Test::C",
    "::Test::D"
};

}

bool
Test::D::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_D_ids, iceC_Test_D_ids + 5, s);
}

::std::vector< ::std::string>
Test::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_D_ids[0], &iceC_Test_D_ids[5]);
}

::std::string
Test::D::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

/// \cond INTERNAL
bool
Test::D::_iceD_callD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callD(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_D_all[] =
{
    "callA",
    "callB",
    "callC",
    "callD",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::D::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_D_all, iceC_Test_D_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_D_all)
    {
        case 0:
        {
            return _iceD_callA(in, current);
        }
        case 1:
        {
            return _iceD_callB(in, current);
        }
        case 2:
        {
            return _iceD_callC(in, current);
        }
        case 3:
        {
            return _iceD_callD(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::E::~E()
{
}

namespace
{
const ::std::string iceC_Test_E_ids[2] =
{
    "::Ice::Object",
    "::Test::E"
};

}

bool
Test::E::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_E_ids, iceC_Test_E_ids + 2, s);
}

::std::vector< ::std::string>
Test::E::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_E_ids[0], &iceC_Test_E_ids[2]);
}

::std::string
Test::E::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::E::ice_staticId()
{
    static const ::std::string typeId = "::Test::E";
    return typeId;
}

/// \cond INTERNAL
bool
Test::E::_iceD_callE(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callE(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_E_all[] =
{
    "callE",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::E::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_E_all, iceC_Test_E_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_E_all)
    {
        case 0:
        {
            return _iceD_callE(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::F::~F()
{
}

namespace
{
const ::std::string iceC_Test_F_ids[3] =
{
    "::Ice::Object",
    "::Test::E",
    "::Test::F"
};

}

bool
Test::F::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_F_ids, iceC_Test_F_ids + 3, s);
}

::std::vector< ::std::string>
Test::F::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_F_ids[0], &iceC_Test_F_ids[3]);
}

::std::string
Test::F::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::F::ice_staticId()
{
    static const ::std::string typeId = "::Test::F";
    return typeId;
}

/// \cond INTERNAL
bool
Test::F::_iceD_callF(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callF(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_F_all[] =
{
    "callE",
    "callF",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::F::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_F_all, iceC_Test_F_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_F_all)
    {
        case 0:
        {
            return _iceD_callE(in, current);
        }
        case 1:
        {
            return _iceD_callF(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::G::~G()
{
}

namespace
{
const ::std::string iceC_Test_G_ids[2] =
{
    "::Ice::Object",
    "::Test::G"
};

}

bool
Test::G::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_G_ids, iceC_Test_G_ids + 2, s);
}

::std::vector< ::std::string>
Test::G::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_G_ids[0], &iceC_Test_G_ids[2]);
}

::std::string
Test::G::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::G::ice_staticId()
{
    static const ::std::string typeId = "::Test::G";
    return typeId;
}

/// \cond INTERNAL
bool
Test::G::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::G::_iceD_callG(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callG(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_G_all[] =
{
    "callG",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::G::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_G_all, iceC_Test_G_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_G_all)
    {
        case 0:
        {
            return _iceD_callG(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::H::~H()
{
}

namespace
{
const ::std::string iceC_Test_H_ids[3] =
{
    "::Ice::Object",
    "::Test::G",
    "::Test::H"
};

}

bool
Test::H::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_H_ids, iceC_Test_H_ids + 3, s);
}

::std::vector< ::std::string>
Test::H::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_H_ids[0], &iceC_Test_H_ids[3]);
}

::std::string
Test::H::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::H::ice_staticId()
{
    static const ::std::string typeId = "::Test::H";
    return typeId;
}

/// \cond INTERNAL
bool
Test::H::_iceD_callH(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callH(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_H_all[] =
{
    "callG",
    "callH",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::H::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_H_all, iceC_Test_H_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_H_all)
    {
        case 0:
        {
            return _iceD_callG(in, current);
        }
        case 1:
        {
            return _iceD_callH(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::Echo::~Echo()
{
}

namespace
{
const ::std::string iceC_Test_Echo_ids[2] =
{
    "::Ice::Object",
    "::Test::Echo"
};

}

bool
Test::Echo::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Echo_ids, iceC_Test_Echo_ids + 2, s);
}

::std::vector< ::std::string>
Test::Echo::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Echo_ids[0], &iceC_Test_Echo_ids[2]);
}

::std::string
Test::Echo::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Echo::ice_staticId()
{
    static const ::std::string typeId = "::Test::Echo";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Echo::_iceD_setConnection(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->setConnection(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Echo::_iceD_startBatch(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->startBatch(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Echo::_iceD_flushBatch(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->flushBatch(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Echo::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Echo_all[] =
{
    "flushBatch",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setConnection",
    "shutdown",
    "startBatch"
};

}

/// \cond INTERNAL
bool
Test::Echo::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Echo_all, iceC_Test_Echo_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Echo_all)
    {
        case 0:
        {
            return _iceD_flushBatch(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_setConnection(in, current);
        }
        case 6:
        {
            return _iceD_shutdown(in, current);
        }
        case 7:
        {
            return _iceD_startBatch(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

#endif
