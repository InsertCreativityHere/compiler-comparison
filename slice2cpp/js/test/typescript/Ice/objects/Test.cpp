//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/AsyncResponseHandler.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::Base> iceC_Test_Base_init("::Test::Base");

const ::IceInternal::DefaultValueFactoryInit<::Test::A> iceC_Test_A_init("::Test::A");

const ::IceInternal::DefaultValueFactoryInit<::Test::B> iceC_Test_B_init("::Test::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::D> iceC_Test_D_init("::Test::D");

const ::IceInternal::DefaultValueFactoryInit<::Test::E> iceC_Test_E_init("::Test::E");

const ::IceInternal::DefaultValueFactoryInit<::Test::F> iceC_Test_F_init("::Test::F");

const ::IceInternal::DefaultValueFactoryInit<::Test::G> iceC_Test_G_init("::Test::G");

const ::IceInternal::DefaultValueFactoryInit<::Test::Compact> iceC_Test_Compact_init("::Test::Compact");
const ::IceInternal::CompactIdInit iceC_Test_Compact_compactIdInit ("::Test::Compact", 1);

const ::IceInternal::DefaultValueFactoryInit<::Test::CompactExt> iceC_Test_CompactExt_init("::Test::CompactExt");
const ::IceInternal::CompactIdInit iceC_Test_CompactExt_compactIdInit ("::Test::CompactExt", 789);

const ::IceInternal::DefaultValueFactoryInit<::Test::A1> iceC_Test_A1_init("::Test::A1");

const ::IceInternal::DefaultValueFactoryInit<::Test::B1> iceC_Test_B1_init("::Test::B1");

const ::IceInternal::DefaultValueFactoryInit<::Test::D1> iceC_Test_D1_init("::Test::D1");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::EBase> iceC_Test_EBase_init("::Test::EBase");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::EDerived> iceC_Test_EDerived_init("::Test::EDerived");

const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::A> iceC_Test_Inner_A_init("::Test::Inner::A");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Inner::Ex> iceC_Test_Inner_Ex_init("::Test::Inner::Ex");

const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::Sub::A> iceC_Test_Inner_Sub_A_init("::Test::Inner::Sub::A");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Inner::Sub::Ex> iceC_Test_Inner_Sub_Ex_init("::Test::Inner::Sub::Ex");

const ::IceInternal::DefaultValueFactoryInit<::Test::Recursive> iceC_Test_Recursive_init("::Test::Recursive");

const ::IceInternal::DefaultValueFactoryInit<::Test::K> iceC_Test_K_init("::Test::K");

const ::IceInternal::DefaultValueFactoryInit<::Test::L> iceC_Test_L_init("::Test::L");

const ::IceInternal::DefaultValueFactoryInit<::Test::M> iceC_Test_M_init("::Test::M");

const ::IceInternal::DefaultValueFactoryInit<::Test::F3> iceC_Test_F3_init("::Test::F3");

const ::IceInternal::DefaultValueFactoryInit<::Test::Empty> iceC_Test_Empty_init("::Test::Empty");

const ::IceInternal::DefaultValueFactoryInit<::Test::AlsoEmpty> iceC_Test_AlsoEmpty_init("::Test::AlsoEmpty");

const ::IceInternal::DefaultValueFactoryInit<::Test::COneMember> iceC_Test_COneMember_init("::Test::COneMember");

const ::IceInternal::DefaultValueFactoryInit<::Test::CTwoMembers> iceC_Test_CTwoMembers_init("::Test::CTwoMembers");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::EOneMember> iceC_Test_EOneMember_init("::Test::EOneMember");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::ETwoMembers> iceC_Test_ETwoMembers_init("::Test::ETwoMembers");

}

void
Test::IPrx::doI(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &IPrx::_iceI_doI, context).get();
}

::std::future<void>
Test::IPrx::doIAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &IPrx::_iceI_doI, context);
}

::std::function<void()>
Test::IPrx::doIAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::IPrx::_iceI_doI, context);
}

void
Test::IPrx::_iceI_doI(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "doI";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::string_view
Test::IPrx::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::I";
    return typeId;
}

void
Test::JPrx::doJ(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &JPrx::_iceI_doJ, context).get();
}

::std::future<void>
Test::JPrx::doJAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &JPrx::_iceI_doJ, context);
}

::std::function<void()>
Test::JPrx::doJAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::JPrx::_iceI_doJ, context);
}

void
Test::JPrx::_iceI_doJ(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "doJ";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::string_view
Test::JPrx::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::J";
    return typeId;
}

void
Test::InitialPrx::shutdown(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::InitialPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::InitialPrx::shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_shutdown, context);
}

void
Test::InitialPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::shared_ptr<::Test::B>
Test::InitialPrx::getB1(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<B>>(true, this, &InitialPrx::_iceI_getB1, context).get();
}

::std::future<::std::shared_ptr<::Test::B>>
Test::InitialPrx::getB1Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<B>>(false, this, &InitialPrx::_iceI_getB1, context);
}

::std::function<void()>
Test::InitialPrx::getB1Async(::std::function<void(::std::shared_ptr<::Test::B>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<B>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getB1, context);
}

void
Test::InitialPrx::_iceI_getB1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<B>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getB1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

::std::shared_ptr<::Test::B>
Test::InitialPrx::getB2(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<B>>(true, this, &InitialPrx::_iceI_getB2, context).get();
}

::std::future<::std::shared_ptr<::Test::B>>
Test::InitialPrx::getB2Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<B>>(false, this, &InitialPrx::_iceI_getB2, context);
}

::std::function<void()>
Test::InitialPrx::getB2Async(::std::function<void(::std::shared_ptr<::Test::B>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<B>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getB2, context);
}

void
Test::InitialPrx::_iceI_getB2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<B>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getB2";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

::std::shared_ptr<::Test::C>
Test::InitialPrx::getC(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<C>>(true, this, &InitialPrx::_iceI_getC, context).get();
}

::std::future<::std::shared_ptr<::Test::C>>
Test::InitialPrx::getCAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<C>>(false, this, &InitialPrx::_iceI_getC, context);
}

::std::function<void()>
Test::InitialPrx::getCAsync(::std::function<void(::std::shared_ptr<::Test::C>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<C>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getC, context);
}

void
Test::InitialPrx::_iceI_getC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<C>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getC";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<C> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

::std::shared_ptr<::Test::D>
Test::InitialPrx::getD(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<D>>(true, this, &InitialPrx::_iceI_getD, context).get();
}

::std::future<::std::shared_ptr<::Test::D>>
Test::InitialPrx::getDAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<D>>(false, this, &InitialPrx::_iceI_getD, context);
}

::std::function<void()>
Test::InitialPrx::getDAsync(::std::function<void(::std::shared_ptr<::Test::D>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<D>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getD, context);
}

void
Test::InitialPrx::_iceI_getD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<D>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<D> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

::std::shared_ptr<::Test::E>
Test::InitialPrx::getE(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<E>>(true, this, &InitialPrx::_iceI_getE, context).get();
}

::std::future<::std::shared_ptr<::Test::E>>
Test::InitialPrx::getEAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<E>>(false, this, &InitialPrx::_iceI_getE, context);
}

::std::function<void()>
Test::InitialPrx::getEAsync(::std::function<void(::std::shared_ptr<::Test::E>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<E>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getE, context);
}

void
Test::InitialPrx::_iceI_getE(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<E>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getE";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<E> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

::std::shared_ptr<::Test::F>
Test::InitialPrx::getF(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<F>>(true, this, &InitialPrx::_iceI_getF, context).get();
}

::std::future<::std::shared_ptr<::Test::F>>
Test::InitialPrx::getFAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<F>>(false, this, &InitialPrx::_iceI_getF, context);
}

::std::function<void()>
Test::InitialPrx::getFAsync(::std::function<void(::std::shared_ptr<::Test::F>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<F>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getF, context);
}

void
Test::InitialPrx::_iceI_getF(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<F>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getF";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<F> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

void
Test::InitialPrx::setRecursive(const ::std::shared_ptr<Recursive>& iceP_p, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_setRecursive, iceP_p, context).get();
}

::std::future<void>
Test::InitialPrx::setRecursiveAsync(const ::std::shared_ptr<Recursive>& iceP_p, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_setRecursive, iceP_p, context);
}

::std::function<void()>
Test::InitialPrx::setRecursiveAsync(const ::std::shared_ptr<Recursive>& iceP_p, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_setRecursive, iceP_p, context);
}

void
Test::InitialPrx::_iceI_setRecursive(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<Recursive>& iceP_p, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "setRecursive";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
            ostr->writePendingValues();
        },
        nullptr);
}

bool
Test::InitialPrx::supportsClassGraphDepthMax(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_supportsClassGraphDepthMax, context).get();
}

::std::future<bool>
Test::InitialPrx::supportsClassGraphDepthMaxAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(false, this, &InitialPrx::_iceI_supportsClassGraphDepthMax, context);
}

::std::function<void()>
Test::InitialPrx::supportsClassGraphDepthMaxAsync(::std::function<void(bool)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<bool>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_supportsClassGraphDepthMax, context);
}

void
Test::InitialPrx::_iceI_supportsClassGraphDepthMax(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "supportsClassGraphDepthMax";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::shared_ptr<::Test::B>
Test::InitialPrx::getMB(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<B>>(true, this, &InitialPrx::_iceI_getMB, context).get();
}

::std::future<::std::shared_ptr<::Test::B>>
Test::InitialPrx::getMBAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<B>>(false, this, &InitialPrx::_iceI_getMB, context);
}

::std::function<void()>
Test::InitialPrx::getMBAsync(::std::function<void(::std::shared_ptr<::Test::B>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<B>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getMB, context);
}

void
Test::InitialPrx::_iceI_getMB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<B>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getMB";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

::std::shared_ptr<::Test::B>
Test::InitialPrx::getAMDMB(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<B>>(true, this, &InitialPrx::_iceI_getAMDMB, context).get();
}

::std::future<::std::shared_ptr<::Test::B>>
Test::InitialPrx::getAMDMBAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<B>>(false, this, &InitialPrx::_iceI_getAMDMB, context);
}

::std::function<void()>
Test::InitialPrx::getAMDMBAsync(::std::function<void(::std::shared_ptr<::Test::B>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<B>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getAMDMB, context);
}

void
Test::InitialPrx::_iceI_getAMDMB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<B>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getAMDMB";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

void
Test::InitialPrx::getAll(::std::shared_ptr<B>& iceP_b1, ::std::shared_ptr<B>& iceP_b2, ::std::shared_ptr<C>& iceP_theC, ::std::shared_ptr<D>& iceP_theD, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::std::shared_ptr<B>, ::std::shared_ptr<B>, ::std::shared_ptr<C>, ::std::shared_ptr<D>>>(true, this, &InitialPrx::_iceI_getAll, context).get();
    iceP_b1 = ::std::move(::std::get<0>(result));
    iceP_b2 = ::std::move(::std::get<1>(result));
    iceP_theC = ::std::move(::std::get<2>(result));
    iceP_theD = ::std::move(::std::get<3>(result));
}

::std::future<::std::tuple<::std::shared_ptr<::Test::B>, ::std::shared_ptr<::Test::B>, ::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::D>>>
Test::InitialPrx::getAllAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::std::shared_ptr<B>, ::std::shared_ptr<B>, ::std::shared_ptr<C>, ::std::shared_ptr<D>>>(false, this, &InitialPrx::_iceI_getAll, context);
}

::std::function<void()>
Test::InitialPrx::getAllAsync(::std::function<void(::std::shared_ptr<::Test::B>, ::std::shared_ptr<::Test::B>, ::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::D>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::std::shared_ptr<B>, ::std::shared_ptr<B>, ::std::shared_ptr<C>, ::std::shared_ptr<D>>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::std::shared_ptr<B>, ::std::shared_ptr<B>, ::std::shared_ptr<C>, ::std::shared_ptr<D>>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getAll, context);
}

void
Test::InitialPrx::_iceI_getAll(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::shared_ptr<B>, ::std::shared_ptr<B>, ::std::shared_ptr<C>, ::std::shared_ptr<D>>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getAll";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::shared_ptr<B>, ::std::shared_ptr<B>, ::std::shared_ptr<C>, ::std::shared_ptr<D>> v;
            istr->readAll(::std::get<0>(v), ::std::get<1>(v), ::std::get<2>(v), ::std::get<3>(v));
            istr->readPendingValues();
            return v;
        });
}

::std::shared_ptr<::Test::K>
Test::InitialPrx::getK(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<K>>(true, this, &InitialPrx::_iceI_getK, context).get();
}

::std::future<::std::shared_ptr<::Test::K>>
Test::InitialPrx::getKAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<K>>(false, this, &InitialPrx::_iceI_getK, context);
}

::std::function<void()>
Test::InitialPrx::getKAsync(::std::function<void(::std::shared_ptr<::Test::K>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<K>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getK, context);
}

void
Test::InitialPrx::_iceI_getK(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<K>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getK";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<K> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

::std::shared_ptr<::Ice::Value>
Test::InitialPrx::opValue(const ::std::shared_ptr<::Ice::Value>& iceP_v1, ::std::shared_ptr<::Ice::Value>& iceP_v2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::std::shared_ptr<::Ice::Value>, ::std::shared_ptr<::Ice::Value>>>(true, this, &InitialPrx::_iceI_opValue, iceP_v1, context).get();
    iceP_v2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::std::shared_ptr<::Ice::Value>, ::std::shared_ptr<::Ice::Value>>>
Test::InitialPrx::opValueAsync(const ::std::shared_ptr<::Ice::Value>& iceP_v1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::std::shared_ptr<::Ice::Value>, ::std::shared_ptr<::Ice::Value>>>(false, this, &InitialPrx::_iceI_opValue, iceP_v1, context);
}

::std::function<void()>
Test::InitialPrx::opValueAsync(const ::std::shared_ptr<::Ice::Value>& iceP_v1, ::std::function<void(::std::shared_ptr<::Ice::Value>, ::std::shared_ptr<::Ice::Value>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::std::shared_ptr<::Ice::Value>, ::std::shared_ptr<::Ice::Value>>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::std::shared_ptr<::Ice::Value>, ::std::shared_ptr<::Ice::Value>>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_opValue, iceP_v1, context);
}

void
Test::InitialPrx::_iceI_opValue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::shared_ptr<::Ice::Value>, ::std::shared_ptr<::Ice::Value>>>>& outAsync, const ::std::shared_ptr<::Ice::Value>& iceP_v1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opValue";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::shared_ptr<::Ice::Value>, ::std::shared_ptr<::Ice::Value>> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

::Test::ValueSeq
Test::InitialPrx::opValueSeq(const ValueSeq& iceP_v1, ValueSeq& iceP_v2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<ValueSeq, ValueSeq>>(true, this, &InitialPrx::_iceI_opValueSeq, iceP_v1, context).get();
    iceP_v2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::ValueSeq, ::Test::ValueSeq>>
Test::InitialPrx::opValueSeqAsync(const ValueSeq& iceP_v1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<ValueSeq, ValueSeq>>(false, this, &InitialPrx::_iceI_opValueSeq, iceP_v1, context);
}

::std::function<void()>
Test::InitialPrx::opValueSeqAsync(const ValueSeq& iceP_v1, ::std::function<void(::Test::ValueSeq, ::Test::ValueSeq)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<ValueSeq, ValueSeq>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<ValueSeq, ValueSeq>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_opValueSeq, iceP_v1, context);
}

void
Test::InitialPrx::_iceI_opValueSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ValueSeq, ValueSeq>>>& outAsync, const ValueSeq& iceP_v1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opValueSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ValueSeq, ValueSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

::Test::ValueMap
Test::InitialPrx::opValueMap(const ValueMap& iceP_v1, ValueMap& iceP_v2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<ValueMap, ValueMap>>(true, this, &InitialPrx::_iceI_opValueMap, iceP_v1, context).get();
    iceP_v2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::ValueMap, ::Test::ValueMap>>
Test::InitialPrx::opValueMapAsync(const ValueMap& iceP_v1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<ValueMap, ValueMap>>(false, this, &InitialPrx::_iceI_opValueMap, iceP_v1, context);
}

::std::function<void()>
Test::InitialPrx::opValueMapAsync(const ValueMap& iceP_v1, ::std::function<void(::Test::ValueMap, ::Test::ValueMap)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<ValueMap, ValueMap>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<ValueMap, ValueMap>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_opValueMap, iceP_v1, context);
}

void
Test::InitialPrx::_iceI_opValueMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ValueMap, ValueMap>>>& outAsync, const ValueMap& iceP_v1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opValueMap";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ValueMap, ValueMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

::std::shared_ptr<::Test::D1>
Test::InitialPrx::getD1(const ::std::shared_ptr<D1>& iceP_d1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<D1>>(true, this, &InitialPrx::_iceI_getD1, iceP_d1, context).get();
}

::std::future<::std::shared_ptr<::Test::D1>>
Test::InitialPrx::getD1Async(const ::std::shared_ptr<D1>& iceP_d1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<D1>>(false, this, &InitialPrx::_iceI_getD1, iceP_d1, context);
}

::std::function<void()>
Test::InitialPrx::getD1Async(const ::std::shared_ptr<D1>& iceP_d1, ::std::function<void(::std::shared_ptr<::Test::D1>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<D1>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getD1, iceP_d1, context);
}

void
Test::InitialPrx::_iceI_getD1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<D1>>>& outAsync, const ::std::shared_ptr<D1>& iceP_d1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getD1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_d1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<D1> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

void
Test::InitialPrx::throwEDerived(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwEDerived, context).get();
}

::std::future<void>
Test::InitialPrx::throwEDerivedAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_throwEDerived, context);
}

::std::function<void()>
Test::InitialPrx::throwEDerivedAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_throwEDerived, context);
}

void
Test::InitialPrx::_iceI_throwEDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "throwEDerived";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const EDerived&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Test::InitialPrx::setG(const ::std::shared_ptr<G>& iceP_theG, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_setG, iceP_theG, context).get();
}

::std::future<void>
Test::InitialPrx::setGAsync(const ::std::shared_ptr<G>& iceP_theG, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_setG, iceP_theG, context);
}

::std::function<void()>
Test::InitialPrx::setGAsync(const ::std::shared_ptr<G>& iceP_theG, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_setG, iceP_theG, context);
}

void
Test::InitialPrx::_iceI_setG(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<G>& iceP_theG, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "setG";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_theG);
            ostr->writePendingValues();
        },
        nullptr);
}

::Test::BaseSeq
Test::InitialPrx::opBaseSeq(const BaseSeq& iceP_inSeq, BaseSeq& iceP_outSeq, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<BaseSeq, BaseSeq>>(true, this, &InitialPrx::_iceI_opBaseSeq, iceP_inSeq, context).get();
    iceP_outSeq = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::BaseSeq, ::Test::BaseSeq>>
Test::InitialPrx::opBaseSeqAsync(const BaseSeq& iceP_inSeq, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<BaseSeq, BaseSeq>>(false, this, &InitialPrx::_iceI_opBaseSeq, iceP_inSeq, context);
}

::std::function<void()>
Test::InitialPrx::opBaseSeqAsync(const BaseSeq& iceP_inSeq, ::std::function<void(::Test::BaseSeq, ::Test::BaseSeq)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<BaseSeq, BaseSeq>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<BaseSeq, BaseSeq>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_opBaseSeq, iceP_inSeq, context);
}

void
Test::InitialPrx::_iceI_opBaseSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<BaseSeq, BaseSeq>>>& outAsync, const BaseSeq& iceP_inSeq, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opBaseSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_inSeq);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<BaseSeq, BaseSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

::std::shared_ptr<::Test::Compact>
Test::InitialPrx::getCompact(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<Compact>>(true, this, &InitialPrx::_iceI_getCompact, context).get();
}

::std::future<::std::shared_ptr<::Test::Compact>>
Test::InitialPrx::getCompactAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<Compact>>(false, this, &InitialPrx::_iceI_getCompact, context);
}

::std::function<void()>
Test::InitialPrx::getCompactAsync(::std::function<void(::std::shared_ptr<::Test::Compact>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<Compact>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getCompact, context);
}

void
Test::InitialPrx::_iceI_getCompact(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<Compact>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getCompact";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<Compact> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

::std::shared_ptr<::Test::Inner::A>
Test::InitialPrx::getInnerA(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<::Test::Inner::A>>(true, this, &InitialPrx::_iceI_getInnerA, context).get();
}

::std::future<::std::shared_ptr<::Test::Inner::A>>
Test::InitialPrx::getInnerAAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<::Test::Inner::A>>(false, this, &InitialPrx::_iceI_getInnerA, context);
}

::std::function<void()>
Test::InitialPrx::getInnerAAsync(::std::function<void(::std::shared_ptr<::Test::Inner::A>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<::Test::Inner::A>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getInnerA, context);
}

void
Test::InitialPrx::_iceI_getInnerA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Inner::A>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getInnerA";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Test::Inner::A> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

::std::shared_ptr<::Test::Inner::Sub::A>
Test::InitialPrx::getInnerSubA(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<::Test::Inner::Sub::A>>(true, this, &InitialPrx::_iceI_getInnerSubA, context).get();
}

::std::future<::std::shared_ptr<::Test::Inner::Sub::A>>
Test::InitialPrx::getInnerSubAAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<::Test::Inner::Sub::A>>(false, this, &InitialPrx::_iceI_getInnerSubA, context);
}

::std::function<void()>
Test::InitialPrx::getInnerSubAAsync(::std::function<void(::std::shared_ptr<::Test::Inner::Sub::A>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<::Test::Inner::Sub::A>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getInnerSubA, context);
}

void
Test::InitialPrx::_iceI_getInnerSubA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Inner::Sub::A>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getInnerSubA";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Test::Inner::Sub::A> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

void
Test::InitialPrx::throwInnerEx(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwInnerEx, context).get();
}

::std::future<void>
Test::InitialPrx::throwInnerExAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_throwInnerEx, context);
}

::std::function<void()>
Test::InitialPrx::throwInnerExAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_throwInnerEx, context);
}

void
Test::InitialPrx::_iceI_throwInnerEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "throwInnerEx";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Test::Inner::Ex&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Test::InitialPrx::throwInnerSubEx(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwInnerSubEx, context).get();
}

::std::future<void>
Test::InitialPrx::throwInnerSubExAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_throwInnerSubEx, context);
}

::std::function<void()>
Test::InitialPrx::throwInnerSubExAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_throwInnerSubEx, context);
}

void
Test::InitialPrx::_iceI_throwInnerSubEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "throwInnerSubEx";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Test::Inner::Sub::Ex&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

::std::shared_ptr<::Test::M>
Test::InitialPrx::opM(const ::std::shared_ptr<M>& iceP_v1, ::std::shared_ptr<M>& iceP_v2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::std::shared_ptr<M>, ::std::shared_ptr<M>>>(true, this, &InitialPrx::_iceI_opM, iceP_v1, context).get();
    iceP_v2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::std::shared_ptr<::Test::M>, ::std::shared_ptr<::Test::M>>>
Test::InitialPrx::opMAsync(const ::std::shared_ptr<M>& iceP_v1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::std::shared_ptr<M>, ::std::shared_ptr<M>>>(false, this, &InitialPrx::_iceI_opM, iceP_v1, context);
}

::std::function<void()>
Test::InitialPrx::opMAsync(const ::std::shared_ptr<M>& iceP_v1, ::std::function<void(::std::shared_ptr<::Test::M>, ::std::shared_ptr<::Test::M>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::std::shared_ptr<M>, ::std::shared_ptr<M>>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::std::shared_ptr<M>, ::std::shared_ptr<M>>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_opM, iceP_v1, context);
}

void
Test::InitialPrx::_iceI_opM(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::shared_ptr<M>, ::std::shared_ptr<M>>>>& outAsync, const ::std::shared_ptr<M>& iceP_v1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opM";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::shared_ptr<M>, ::std::shared_ptr<M>> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

::std::shared_ptr<::Test::F1>
Test::InitialPrx::opF1(const ::std::shared_ptr<F1>& iceP_f11, ::std::shared_ptr<F1>& iceP_f12, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::std::shared_ptr<F1>, ::std::shared_ptr<F1>>>(true, this, &InitialPrx::_iceI_opF1, iceP_f11, context).get();
    iceP_f12 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::std::shared_ptr<::Test::F1>, ::std::shared_ptr<::Test::F1>>>
Test::InitialPrx::opF1Async(const ::std::shared_ptr<F1>& iceP_f11, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::std::shared_ptr<F1>, ::std::shared_ptr<F1>>>(false, this, &InitialPrx::_iceI_opF1, iceP_f11, context);
}

::std::function<void()>
Test::InitialPrx::opF1Async(const ::std::shared_ptr<F1>& iceP_f11, ::std::function<void(::std::shared_ptr<::Test::F1>, ::std::shared_ptr<::Test::F1>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::std::shared_ptr<F1>, ::std::shared_ptr<F1>>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::std::shared_ptr<F1>, ::std::shared_ptr<F1>>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_opF1, iceP_f11, context);
}

void
Test::InitialPrx::_iceI_opF1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::shared_ptr<F1>, ::std::shared_ptr<F1>>>>& outAsync, const ::std::shared_ptr<F1>& iceP_f11, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opF1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f11);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::shared_ptr<F1>, ::std::shared_ptr<F1>> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

::std::optional<::Test::F2Prx>
Test::InitialPrx::opF2(const ::std::optional<F2Prx>& iceP_f21, ::std::optional<F2Prx>& iceP_f22, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::std::optional<F2Prx>, ::std::optional<F2Prx>>>(true, this, &InitialPrx::_iceI_opF2, iceP_f21, context).get();
    iceP_f22 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::std::optional<::Test::F2Prx>, ::std::optional<::Test::F2Prx>>>
Test::InitialPrx::opF2Async(const ::std::optional<F2Prx>& iceP_f21, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::std::optional<F2Prx>, ::std::optional<F2Prx>>>(false, this, &InitialPrx::_iceI_opF2, iceP_f21, context);
}

::std::function<void()>
Test::InitialPrx::opF2Async(const ::std::optional<F2Prx>& iceP_f21, ::std::function<void(::std::optional<::Test::F2Prx>, ::std::optional<::Test::F2Prx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::std::optional<F2Prx>, ::std::optional<F2Prx>>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::std::optional<F2Prx>, ::std::optional<F2Prx>>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_opF2, iceP_f21, context);
}

void
Test::InitialPrx::_iceI_opF2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::optional<F2Prx>, ::std::optional<F2Prx>>>>& outAsync, const ::std::optional<F2Prx>& iceP_f21, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opF2";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f21);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::optional<F2Prx>, ::std::optional<F2Prx>> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::std::shared_ptr<::Test::F3>
Test::InitialPrx::opF3(const ::std::shared_ptr<F3>& iceP_f31, ::std::shared_ptr<F3>& iceP_f32, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::std::shared_ptr<F3>, ::std::shared_ptr<F3>>>(true, this, &InitialPrx::_iceI_opF3, iceP_f31, context).get();
    iceP_f32 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::std::shared_ptr<::Test::F3>, ::std::shared_ptr<::Test::F3>>>
Test::InitialPrx::opF3Async(const ::std::shared_ptr<F3>& iceP_f31, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::std::shared_ptr<F3>, ::std::shared_ptr<F3>>>(false, this, &InitialPrx::_iceI_opF3, iceP_f31, context);
}

::std::function<void()>
Test::InitialPrx::opF3Async(const ::std::shared_ptr<F3>& iceP_f31, ::std::function<void(::std::shared_ptr<::Test::F3>, ::std::shared_ptr<::Test::F3>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::std::shared_ptr<F3>, ::std::shared_ptr<F3>>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::std::shared_ptr<F3>, ::std::shared_ptr<F3>>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_opF3, iceP_f31, context);
}

void
Test::InitialPrx::_iceI_opF3(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::shared_ptr<F3>, ::std::shared_ptr<F3>>>>& outAsync, const ::std::shared_ptr<F3>& iceP_f31, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opF3";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f31);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::shared_ptr<F3>, ::std::shared_ptr<F3>> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

bool
Test::InitialPrx::hasF3(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_hasF3, context).get();
}

::std::future<bool>
Test::InitialPrx::hasF3Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(false, this, &InitialPrx::_iceI_hasF3, context);
}

::std::function<void()>
Test::InitialPrx::hasF3Async(::std::function<void(bool)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<bool>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_hasF3, context);
}

void
Test::InitialPrx::_iceI_hasF3(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "hasF3";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::string_view
Test::InitialPrx::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::Initial";
    return typeId;
}

::std::shared_ptr<::Test::Empty>
Test::UnexpectedObjectExceptionTestPrx::op(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<Empty>>(true, this, &UnexpectedObjectExceptionTestPrx::_iceI_op, context).get();
}

::std::future<::std::shared_ptr<::Test::Empty>>
Test::UnexpectedObjectExceptionTestPrx::opAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<Empty>>(false, this, &UnexpectedObjectExceptionTestPrx::_iceI_op, context);
}

::std::function<void()>
Test::UnexpectedObjectExceptionTestPrx::opAsync(::std::function<void(::std::shared_ptr<::Test::Empty>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<Empty>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::UnexpectedObjectExceptionTestPrx::_iceI_op, context);
}

void
Test::UnexpectedObjectExceptionTestPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<Empty>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "op";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<Empty> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

::std::string_view
Test::UnexpectedObjectExceptionTestPrx::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::UnexpectedObjectExceptionTest";
    return typeId;
}

void
Test::EchoPrx::setConnection(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &EchoPrx::_iceI_setConnection, context).get();
}

::std::future<void>
Test::EchoPrx::setConnectionAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &EchoPrx::_iceI_setConnection, context);
}

::std::function<void()>
Test::EchoPrx::setConnectionAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::EchoPrx::_iceI_setConnection, context);
}

void
Test::EchoPrx::_iceI_setConnection(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "setConnection";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
Test::EchoPrx::shutdown(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &EchoPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::EchoPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &EchoPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::EchoPrx::shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::EchoPrx::_iceI_shutdown, context);
}

void
Test::EchoPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::string_view
Test::EchoPrx::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::Echo";
    return typeId;
}

Test::Base::~Base()
{
}

::std::string_view
Test::Base::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::Base";
    return typeId;
}

Test::A::~A()
{
}

::std::string_view
Test::A::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::A";
    return typeId;
}

Test::B::~B()
{
}

::std::string_view
Test::B::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::B";
    return typeId;
}

Test::C::~C()
{
}

::std::string_view
Test::C::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::C";
    return typeId;
}

Test::D::~D()
{
}

::std::string_view
Test::D::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::D";
    return typeId;
}

Test::E::~E()
{
}

::std::string_view
Test::E::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::E";
    return typeId;
}

Test::F::~F()
{
}

::std::string_view
Test::F::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::F";
    return typeId;
}

Test::G::~G()
{
}

::std::string_view
Test::G::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::G";
    return typeId;
}

Test::Compact::~Compact()
{
}

::std::string_view
Test::Compact::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::Compact";
    return typeId;
}

Test::CompactExt::~CompactExt()
{
}

::std::string_view
Test::CompactExt::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::CompactExt";
    return typeId;
}

Test::A1::~A1()
{
}

::std::string_view
Test::A1::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::A1";
    return typeId;
}

Test::B1::~B1()
{
}

::std::string_view
Test::B1::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::B1";
    return typeId;
}

Test::D1::~D1()
{
}

::std::string_view
Test::D1::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::D1";
    return typeId;
}

Test::EBase::~EBase()
{
}

::std::string_view
Test::EBase::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::EBase";
    return typeId;
}

/// \cond STREAM
bool
Test::EBase::_usesClasses() const
{
    return true;
}
/// \endcond

Test::EDerived::~EDerived()
{
}

::std::string_view
Test::EDerived::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::EDerived";
    return typeId;
}

Test::Inner::A::~A()
{
}

::std::string_view
Test::Inner::A::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::Inner::A";
    return typeId;
}

Test::Inner::Ex::~Ex()
{
}

::std::string_view
Test::Inner::Ex::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::Inner::Ex";
    return typeId;
}

Test::Inner::Sub::A::~A()
{
}

::std::string_view
Test::Inner::Sub::A::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::Inner::Sub::A";
    return typeId;
}

Test::Inner::Sub::Ex::~Ex()
{
}

::std::string_view
Test::Inner::Sub::Ex::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::Inner::Sub::Ex";
    return typeId;
}

Test::Recursive::~Recursive()
{
}

::std::string_view
Test::Recursive::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::Recursive";
    return typeId;
}

Test::K::~K()
{
}

::std::string_view
Test::K::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::K";
    return typeId;
}

Test::L::~L()
{
}

::std::string_view
Test::L::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::L";
    return typeId;
}

Test::M::~M()
{
}

::std::string_view
Test::M::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::M";
    return typeId;
}

Test::F3::~F3()
{
}

::std::string_view
Test::F3::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::F3";
    return typeId;
}

Test::Empty::~Empty()
{
}

::std::string_view
Test::Empty::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::Empty";
    return typeId;
}

Test::AlsoEmpty::~AlsoEmpty()
{
}

::std::string_view
Test::AlsoEmpty::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::AlsoEmpty";
    return typeId;
}

Test::COneMember::~COneMember()
{
}

::std::string_view
Test::COneMember::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::COneMember";
    return typeId;
}

Test::CTwoMembers::~CTwoMembers()
{
}

::std::string_view
Test::CTwoMembers::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::CTwoMembers";
    return typeId;
}

Test::EOneMember::~EOneMember()
{
}

::std::string_view
Test::EOneMember::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::EOneMember";
    return typeId;
}

/// \cond STREAM
bool
Test::EOneMember::_usesClasses() const
{
    return true;
}
/// \endcond

Test::ETwoMembers::~ETwoMembers()
{
}

::std::string_view
Test::ETwoMembers::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::ETwoMembers";
    return typeId;
}

/// \cond STREAM
bool
Test::ETwoMembers::_usesClasses() const
{
    return true;
}
/// \endcond

::std::vector<::std::string>
Test::I::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::I"};
    return allTypeIds;
}

::std::string
Test::I::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::I::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::I";
    return typeId;
}

/// \cond INTERNAL
void
Test::I::_iceD_doI(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->doI(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::I::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"doI", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 5, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_doI(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Test::J::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::I", "::Test::J"};
    return allTypeIds;
}

::std::string
Test::J::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::J::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::J";
    return typeId;
}

/// \cond INTERNAL
void
Test::J::_iceD_doJ(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->doJ(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::J::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"doI", "doJ", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 6, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_doI(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_doJ(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::Initial"};
    return allTypeIds;
}

::std::string
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::Initial::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
void
Test::Initial::_iceD_shutdown(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getB1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<B> ret = this->getB1(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getB2(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<B> ret = this->getB2(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getC(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<C> ret = this->getC(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<D> ret = this->getD(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getE(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<E> ret = this->getE(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getF(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<F> ret = this->getF(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_setRecursive(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::shared_ptr<Recursive> iceP_p;
    istr->readAll(iceP_p);
    istr->readPendingValues();
    istr->endEncapsulation();
    this->setRecursive(::std::move(iceP_p), request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_supportsClassGraphDepthMax(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    bool ret = this->supportsClassGraphDepthMax(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

Test::Initial::GetMBMarshaledResult::GetMBMarshaledResult(const ::std::shared_ptr<B>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ::Ice::OutputStream* ostr = &_ostr;
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->writePendingValues();
    ostr->endEncapsulation();
}

/// \cond INTERNAL
void
Test::Initial::_iceD_getMB(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    sendResponse(::Ice::OutgoingResponse{this->getMB(request.current()).outputStream(), request.current()});
}
/// \endcond

Test::Initial::GetAMDMBMarshaledResult::GetAMDMBMarshaledResult(const ::std::shared_ptr<B>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ::Ice::OutputStream* ostr = &_ostr;
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->writePendingValues();
    ostr->endEncapsulation();
}

/// \cond INTERNAL
void
Test::Initial::_iceD_getAMDMB(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    auto responseHandler = ::std::make_shared<::IceInternal::AsyncResponseHandler>(::std::move(sendResponse), request.current());
    try
    {
        this->getAMDMBAsync([responseHandler](GetAMDMBMarshaledResult marshaledResult) { responseHandler->sendResponse(::std::move(marshaledResult)); }, [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(::std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getAll(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<B> iceP_b1;
    ::std::shared_ptr<B> iceP_b2;
    ::std::shared_ptr<C> iceP_theC;
    ::std::shared_ptr<D> iceP_theD;
    this->getAll(iceP_b1, iceP_b2, iceP_theC, iceP_theD, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_b1, iceP_b2, iceP_theC, iceP_theD);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getK(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<K> ret = this->getK(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opValue(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::shared_ptr<::Ice::Value> iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    istr->endEncapsulation();
    ::std::shared_ptr<::Ice::Value> iceP_v2;
    ::std::shared_ptr<::Ice::Value> ret = this->opValue(::std::move(iceP_v1), iceP_v2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opValueSeq(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ValueSeq iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    istr->endEncapsulation();
    ValueSeq iceP_v2;
    ValueSeq ret = this->opValueSeq(::std::move(iceP_v1), iceP_v2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opValueMap(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ValueMap iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    istr->endEncapsulation();
    ValueMap iceP_v2;
    ValueMap ret = this->opValueMap(::std::move(iceP_v1), iceP_v2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getD1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::shared_ptr<D1> iceP_d1;
    istr->readAll(iceP_d1);
    istr->readPendingValues();
    istr->endEncapsulation();
    ::std::shared_ptr<D1> ret = this->getD1(::std::move(iceP_d1), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_throwEDerived(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->throwEDerived(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_setG(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::shared_ptr<G> iceP_theG;
    istr->readAll(iceP_theG);
    istr->readPendingValues();
    istr->endEncapsulation();
    this->setG(::std::move(iceP_theG), request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opBaseSeq(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    BaseSeq iceP_inSeq;
    istr->readAll(iceP_inSeq);
    istr->readPendingValues();
    istr->endEncapsulation();
    BaseSeq iceP_outSeq;
    BaseSeq ret = this->opBaseSeq(::std::move(iceP_inSeq), iceP_outSeq, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_outSeq, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getCompact(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<Compact> ret = this->getCompact(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getInnerA(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<::Test::Inner::A> ret = this->getInnerA(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getInnerSubA(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<::Test::Inner::Sub::A> ret = this->getInnerSubA(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_throwInnerEx(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->throwInnerEx(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_throwInnerSubEx(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->throwInnerSubEx(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opM(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::shared_ptr<M> iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    istr->endEncapsulation();
    ::std::shared_ptr<M> iceP_v2;
    ::std::shared_ptr<M> ret = this->opM(::std::move(iceP_v1), iceP_v2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v2, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opF1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::shared_ptr<F1> iceP_f11;
    istr->readAll(iceP_f11);
    istr->readPendingValues();
    istr->endEncapsulation();
    ::std::shared_ptr<F1> iceP_f12;
    ::std::shared_ptr<F1> ret = this->opF1(::std::move(iceP_f11), iceP_f12, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f12, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opF2(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::optional<F2Prx> iceP_f21;
    istr->readAll(iceP_f21);
    istr->endEncapsulation();
    ::std::optional<F2Prx> iceP_f22;
    ::std::optional<F2Prx> ret = this->opF2(::std::move(iceP_f21), iceP_f22, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f22, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opF3(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::shared_ptr<F3> iceP_f31;
    istr->readAll(iceP_f31);
    istr->readPendingValues();
    istr->endEncapsulation();
    ::std::shared_ptr<F3> iceP_f32;
    ::std::shared_ptr<F3> ret = this->opF3(::std::move(iceP_f31), iceP_f32, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f32, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_hasF3(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    bool ret = this->hasF3(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"getAMDMB", "getAll", "getB1", "getB2", "getC", "getCompact", "getD", "getD1", "getE", "getF", "getInnerA", "getInnerSubA", "getK", "getMB", "hasF3", "ice_id", "ice_ids", "ice_isA", "ice_ping", "opBaseSeq", "opF1", "opF2", "opF3", "opM", "opValue", "opValueMap", "opValueSeq", "setG", "setRecursive", "shutdown", "supportsClassGraphDepthMax", "throwEDerived", "throwInnerEx", "throwInnerSubEx"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 34, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_getAMDMB(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_getAll(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_getB1(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_getB2(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_getC(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_getCompact(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_getD(request, ::std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_getD1(request, ::std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_getE(request, ::std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_getF(request, ::std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_getInnerA(request, ::std::move(sendResponse));
            break;
        }
        case 11:
        {
            _iceD_getInnerSubA(request, ::std::move(sendResponse));
            break;
        }
        case 12:
        {
            _iceD_getK(request, ::std::move(sendResponse));
            break;
        }
        case 13:
        {
            _iceD_getMB(request, ::std::move(sendResponse));
            break;
        }
        case 14:
        {
            _iceD_hasF3(request, ::std::move(sendResponse));
            break;
        }
        case 15:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 16:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 17:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 18:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 19:
        {
            _iceD_opBaseSeq(request, ::std::move(sendResponse));
            break;
        }
        case 20:
        {
            _iceD_opF1(request, ::std::move(sendResponse));
            break;
        }
        case 21:
        {
            _iceD_opF2(request, ::std::move(sendResponse));
            break;
        }
        case 22:
        {
            _iceD_opF3(request, ::std::move(sendResponse));
            break;
        }
        case 23:
        {
            _iceD_opM(request, ::std::move(sendResponse));
            break;
        }
        case 24:
        {
            _iceD_opValue(request, ::std::move(sendResponse));
            break;
        }
        case 25:
        {
            _iceD_opValueMap(request, ::std::move(sendResponse));
            break;
        }
        case 26:
        {
            _iceD_opValueSeq(request, ::std::move(sendResponse));
            break;
        }
        case 27:
        {
            _iceD_setG(request, ::std::move(sendResponse));
            break;
        }
        case 28:
        {
            _iceD_setRecursive(request, ::std::move(sendResponse));
            break;
        }
        case 29:
        {
            _iceD_shutdown(request, ::std::move(sendResponse));
            break;
        }
        case 30:
        {
            _iceD_supportsClassGraphDepthMax(request, ::std::move(sendResponse));
            break;
        }
        case 31:
        {
            _iceD_throwEDerived(request, ::std::move(sendResponse));
            break;
        }
        case 32:
        {
            _iceD_throwInnerEx(request, ::std::move(sendResponse));
            break;
        }
        case 33:
        {
            _iceD_throwInnerSubEx(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Test::UnexpectedObjectExceptionTest::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::UnexpectedObjectExceptionTest"};
    return allTypeIds;
}

::std::string
Test::UnexpectedObjectExceptionTest::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::UnexpectedObjectExceptionTest::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::UnexpectedObjectExceptionTest";
    return typeId;
}

/// \cond INTERNAL
void
Test::UnexpectedObjectExceptionTest::_iceD_op(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<Empty> ret = this->op(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::UnexpectedObjectExceptionTest::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"ice_id", "ice_ids", "ice_isA", "ice_ping", "op"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 5, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_op(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Test::Echo::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::Echo"};
    return allTypeIds;
}

::std::string
Test::Echo::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::Echo::ice_staticId()
{
    static constexpr ::std::string_view typeId = "::Test::Echo";
    return typeId;
}

/// \cond INTERNAL
void
Test::Echo::_iceD_setConnection(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->setConnection(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Echo::_iceD_shutdown(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Echo::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"ice_id", "ice_ids", "ice_isA", "ice_ping", "setConnection", "shutdown"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 6, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_setConnection(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_shutdown(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        }
    }
}
/// \endcond
