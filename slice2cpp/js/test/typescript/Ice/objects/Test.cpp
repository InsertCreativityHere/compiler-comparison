//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::Base> iceC_Test_Base_init("::Test::Base");

const ::IceInternal::DefaultValueFactoryInit<::Test::AbstractBase> iceC_Test_AbstractBase_init("::Test::AbstractBase");

const ::std::string iceC_Test_AbstractBase_ids[3] =
{
    "::Ice::Object",
    "::Test::AbstractBase",
    "::Test::Base"
};
const ::std::string iceC_Test_AbstractBase_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};
const ::std::string iceC_Test_AbstractBase_op_name = "op";

const ::IceInternal::DefaultValueFactoryInit<::Test::A> iceC_Test_A_init("::Test::A");

const ::IceInternal::DefaultValueFactoryInit<::Test::B> iceC_Test_B_init("::Test::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::D> iceC_Test_D_init("::Test::D");

const ::IceInternal::DefaultValueFactoryInit<::Test::E> iceC_Test_E_init("::Test::E");

const ::IceInternal::DefaultValueFactoryInit<::Test::F> iceC_Test_F_init("::Test::F");

const ::IceInternal::DefaultValueFactoryInit<::Test::G> iceC_Test_G_init("::Test::G");

const ::std::string iceC_Test_I_ids[2] =
{
    "::Ice::Object",
    "::Test::I"
};
const ::std::string iceC_Test_I_ops[] =
{
    "doI",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_I_doI_name = "doI";

const ::std::string iceC_Test_J_ids[3] =
{
    "::Ice::Object",
    "::Test::I",
    "::Test::J"
};
const ::std::string iceC_Test_J_ops[] =
{
    "doI",
    "doJ",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_J_doJ_name = "doJ";

const ::IceInternal::DefaultValueFactoryInit<::Test::H> iceC_Test_H_init("::Test::H");

const ::std::string iceC_Test_H_ids[3] =
{
    "::Ice::Object",
    "::Test::H",
    "::Test::I"
};
const ::std::string iceC_Test_H_ops[] =
{
    "doH",
    "doH2",
    "doI",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_H_doH_name = "doH";
const ::std::string iceC_Test_H_doH2_name = "doH2";

const ::IceInternal::DefaultValueFactoryInit<::Test::Compact> iceC_Test_Compact_init("::Test::Compact");
const ::IceInternal::CompactIdInit iceC_Test_Compact_compactIdInit ("::Test::Compact", 1);

const ::IceInternal::DefaultValueFactoryInit<::Test::CompactExt> iceC_Test_CompactExt_init("::Test::CompactExt");
const ::IceInternal::CompactIdInit iceC_Test_CompactExt_compactIdInit ("::Test::CompactExt", 789);

const ::IceInternal::DefaultValueFactoryInit<::Test::A1> iceC_Test_A1_init("::Test::A1");

const ::IceInternal::DefaultValueFactoryInit<::Test::B1> iceC_Test_B1_init("::Test::B1");

const ::IceInternal::DefaultValueFactoryInit<::Test::D1> iceC_Test_D1_init("::Test::D1");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::EBase> iceC_Test_EBase_init("::Test::EBase");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::EDerived> iceC_Test_EDerived_init("::Test::EDerived");

const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::A> iceC_Test_Inner_A_init("::Test::Inner::A");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Inner::Ex> iceC_Test_Inner_Ex_init("::Test::Inner::Ex");

const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::Sub::A> iceC_Test_Inner_Sub_A_init("::Test::Inner::Sub::A");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Inner::Sub::Ex> iceC_Test_Inner_Sub_Ex_init("::Test::Inner::Sub::Ex");

const ::IceInternal::DefaultValueFactoryInit<::Test::Recursive> iceC_Test_Recursive_init("::Test::Recursive");

const ::IceInternal::DefaultValueFactoryInit<::Test::K> iceC_Test_K_init("::Test::K");

const ::IceInternal::DefaultValueFactoryInit<::Test::L> iceC_Test_L_init("::Test::L");

const ::IceInternal::DefaultValueFactoryInit<::Test::M> iceC_Test_M_init("::Test::M");

const ::IceInternal::DefaultValueFactoryInit<::Test::F3> iceC_Test_F3_init("::Test::F3");

const ::std::string iceC_Test_Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};
const ::std::string iceC_Test_Initial_ops[] =
{
    "getAMDMB",
    "getAll",
    "getB1",
    "getB2",
    "getC",
    "getCompact",
    "getD",
    "getD1",
    "getE",
    "getF",
    "getH",
    "getI",
    "getInnerA",
    "getInnerSubA",
    "getJ",
    "getK",
    "getMB",
    "hasF3",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBaseSeq",
    "opF1",
    "opF2",
    "opF3",
    "opM",
    "opValue",
    "opValueMap",
    "opValueSeq",
    "setG",
    "setI",
    "setRecursive",
    "shutdown",
    "supportsClassGraphDepthMax",
    "throwEDerived",
    "throwInnerEx",
    "throwInnerSubEx"
};
const ::std::string iceC_Test_Initial_shutdown_name = "shutdown";
const ::std::string iceC_Test_Initial_getB1_name = "getB1";
const ::std::string iceC_Test_Initial_getB2_name = "getB2";
const ::std::string iceC_Test_Initial_getC_name = "getC";
const ::std::string iceC_Test_Initial_getD_name = "getD";
const ::std::string iceC_Test_Initial_getE_name = "getE";
const ::std::string iceC_Test_Initial_getF_name = "getF";
const ::std::string iceC_Test_Initial_setRecursive_name = "setRecursive";
const ::std::string iceC_Test_Initial_supportsClassGraphDepthMax_name = "supportsClassGraphDepthMax";
const ::std::string iceC_Test_Initial_getMB_name = "getMB";
const ::std::string iceC_Test_Initial_getAMDMB_name = "getAMDMB";
const ::std::string iceC_Test_Initial_getAll_name = "getAll";
const ::std::string iceC_Test_Initial_getH_name = "getH";
const ::std::string iceC_Test_Initial_getI_name = "getI";
const ::std::string iceC_Test_Initial_getJ_name = "getJ";
const ::std::string iceC_Test_Initial_getK_name = "getK";
const ::std::string iceC_Test_Initial_opValue_name = "opValue";
const ::std::string iceC_Test_Initial_opValueSeq_name = "opValueSeq";
const ::std::string iceC_Test_Initial_opValueMap_name = "opValueMap";
const ::std::string iceC_Test_Initial_getD1_name = "getD1";
const ::std::string iceC_Test_Initial_throwEDerived_name = "throwEDerived";
const ::std::string iceC_Test_Initial_setG_name = "setG";
const ::std::string iceC_Test_Initial_setI_name = "setI";
const ::std::string iceC_Test_Initial_opBaseSeq_name = "opBaseSeq";
const ::std::string iceC_Test_Initial_getCompact_name = "getCompact";
const ::std::string iceC_Test_Initial_getInnerA_name = "getInnerA";
const ::std::string iceC_Test_Initial_getInnerSubA_name = "getInnerSubA";
const ::std::string iceC_Test_Initial_throwInnerEx_name = "throwInnerEx";
const ::std::string iceC_Test_Initial_throwInnerSubEx_name = "throwInnerSubEx";
const ::std::string iceC_Test_Initial_opM_name = "opM";
const ::std::string iceC_Test_Initial_opF1_name = "opF1";
const ::std::string iceC_Test_Initial_opF2_name = "opF2";
const ::std::string iceC_Test_Initial_opF3_name = "opF3";
const ::std::string iceC_Test_Initial_hasF3_name = "hasF3";

const ::IceInternal::DefaultValueFactoryInit<::Test::Empty> iceC_Test_Empty_init("::Test::Empty");

const ::IceInternal::DefaultValueFactoryInit<::Test::AlsoEmpty> iceC_Test_AlsoEmpty_init("::Test::AlsoEmpty");

const ::std::string iceC_Test_UnexpectedObjectExceptionTest_ids[2] =
{
    "::Ice::Object",
    "::Test::UnexpectedObjectExceptionTest"
};
const ::std::string iceC_Test_UnexpectedObjectExceptionTest_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};
const ::std::string iceC_Test_UnexpectedObjectExceptionTest_op_name = "op";

const ::IceInternal::DefaultValueFactoryInit<::Test::COneMember> iceC_Test_COneMember_init("::Test::COneMember");

const ::IceInternal::DefaultValueFactoryInit<::Test::CTwoMembers> iceC_Test_CTwoMembers_init("::Test::CTwoMembers");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::EOneMember> iceC_Test_EOneMember_init("::Test::EOneMember");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::ETwoMembers> iceC_Test_ETwoMembers_init("::Test::ETwoMembers");

const ::std::string iceC_Test_Echo_ids[2] =
{
    "::Ice::Object",
    "::Test::Echo"
};
const ::std::string iceC_Test_Echo_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setConnection",
    "shutdown"
};
const ::std::string iceC_Test_Echo_setConnection_name = "setConnection";
const ::std::string iceC_Test_Echo_shutdown_name = "shutdown";

}

Test::EBase::~EBase()
{
}

const ::std::string&
Test::EBase::ice_staticId()
{
    static const ::std::string typeId = "::Test::EBase";
    return typeId;
}

/// \cond STREAM
bool
Test::EBase::_usesClasses() const
{
    return true;
}
/// \endcond

Test::EDerived::~EDerived()
{
}

const ::std::string&
Test::EDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::EDerived";
    return typeId;
}

Test::Inner::Ex::~Ex()
{
}

const ::std::string&
Test::Inner::Ex::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Ex";
    return typeId;
}

Test::Inner::Sub::Ex::~Ex()
{
}

const ::std::string&
Test::Inner::Sub::Ex::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Sub::Ex";
    return typeId;
}

Test::EOneMember::~EOneMember()
{
}

const ::std::string&
Test::EOneMember::ice_staticId()
{
    static const ::std::string typeId = "::Test::EOneMember";
    return typeId;
}

/// \cond STREAM
bool
Test::EOneMember::_usesClasses() const
{
    return true;
}
/// \endcond

Test::ETwoMembers::~ETwoMembers()
{
}

const ::std::string&
Test::ETwoMembers::ice_staticId()
{
    static const ::std::string typeId = "::Test::ETwoMembers";
    return typeId;
}

/// \cond STREAM
bool
Test::ETwoMembers::_usesClasses() const
{
    return true;
}
/// \endcond

bool
Test::AbstractBaseDisp::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_AbstractBase_ids, iceC_Test_AbstractBase_ids + 3, s);
}

::std::vector<::std::string>
Test::AbstractBaseDisp::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_AbstractBase_ids[0], &iceC_Test_AbstractBase_ids[3]);
}

::std::string
Test::AbstractBaseDisp::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::AbstractBaseDisp::ice_staticId()
{
    static const ::std::string typeId = "::Test::AbstractBase";
    return typeId;
}

/// \cond INTERNAL
bool
Test::AbstractBaseDisp::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::AbstractBaseDisp::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_AbstractBase_ops, iceC_Test_AbstractBase_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_AbstractBase_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_I_ids, iceC_Test_I_ids + 2, s);
}

::std::vector<::std::string>
Test::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_I_ids[0], &iceC_Test_I_ids[2]);
}

::std::string
Test::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::I::_iceD_doI(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->doI(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_I_ops, iceC_Test_I_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_I_ops)
    {
        case 0:
        {
            return _iceD_doI(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::J::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_J_ids, iceC_Test_J_ids + 3, s);
}

::std::vector<::std::string>
Test::J::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_J_ids[0], &iceC_Test_J_ids[3]);
}

::std::string
Test::J::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::J::ice_staticId()
{
    static const ::std::string typeId = "::Test::J";
    return typeId;
}

/// \cond INTERNAL
bool
Test::J::_iceD_doJ(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->doJ(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::J::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_J_ops, iceC_Test_J_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_J_ops)
    {
        case 0:
        {
            return _iceD_doI(in, current);
        }
        case 1:
        {
            return _iceD_doJ(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::HDisp::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_H_ids, iceC_Test_H_ids + 3, s);
}

::std::vector<::std::string>
Test::HDisp::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_H_ids[0], &iceC_Test_H_ids[3]);
}

::std::string
Test::HDisp::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::HDisp::ice_staticId()
{
    static const ::std::string typeId = "::Test::H";
    return typeId;
}

/// \cond INTERNAL
bool
Test::HDisp::_iceD_doH(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->doH(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::HDisp::_iceD_doH2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->doH2(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::HDisp::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_H_ops, iceC_Test_H_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_H_ops)
    {
        case 0:
        {
            return _iceD_doH(in, current);
        }
        case 1:
        {
            return _iceD_doH2(in, current);
        }
        case 2:
        {
            return _iceD_doI(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Initial::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial_ids, iceC_Test_Initial_ids + 2, s);
}

::std::vector<::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Initial_ids[0], &iceC_Test_Initial_ids[2]);
}

::std::string
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getB1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<B> ret = this->getB1(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getB2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<B> ret = this->getB2(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<C> ret = this->getC(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<D> ret = this->getD(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getE(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<E> ret = this->getE(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getF(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<F> ret = this->getF(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_setRecursive(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<Recursive> iceP_p;
    istr->readAll(iceP_p);
    istr->readPendingValues();
    inS.endReadParams();
    this->setRecursive(::std::move(iceP_p), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsClassGraphDepthMax(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->supportsClassGraphDepthMax(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

Test::Initial::GetMBMarshaledResult::GetMBMarshaledResult(const ::std::shared_ptr<B>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->writePendingValues();
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_getMB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setMarshaledResult(this->getMB(current));
    return true;
}
/// \endcond

Test::Initial::GetAMDMBMarshaledResult::GetAMDMBMarshaledResult(const ::std::shared_ptr<B>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->writePendingValues();
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_getAMDMB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->getAMDMBAsync(inA->response<GetAMDMBMarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getAll(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<B> iceP_b1;
    ::std::shared_ptr<B> iceP_b2;
    ::std::shared_ptr<C> iceP_theC;
    ::std::shared_ptr<D> iceP_theD;
    this->getAll(iceP_b1, iceP_b2, iceP_theC, iceP_theD, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_b1, iceP_b2, iceP_theC, iceP_theD);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getH(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Ice::Value> ret = this->getH(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getI(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Ice::Value> ret = this->getI(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getJ(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Ice::Value> ret = this->getJ(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getK(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<K> ret = this->getK(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opValue(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Ice::Value> iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<::Ice::Value> iceP_v2;
    ::std::shared_ptr<::Ice::Value> ret = this->opValue(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opValueSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ValueSeq iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ValueSeq iceP_v2;
    ValueSeq ret = this->opValueSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opValueMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ValueMap iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ValueMap iceP_v2;
    ValueMap ret = this->opValueMap(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getD1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<D1> iceP_d1;
    istr->readAll(iceP_d1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<D1> ret = this->getD1(::std::move(iceP_d1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwEDerived(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwEDerived(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_setG(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<G> iceP_theG;
    istr->readAll(iceP_theG);
    istr->readPendingValues();
    inS.endReadParams();
    this->setG(::std::move(iceP_theG), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_setI(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Ice::Value> iceP_theI;
    istr->readAll(iceP_theI);
    istr->readPendingValues();
    inS.endReadParams();
    this->setI(::std::move(iceP_theI), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opBaseSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    BaseSeq iceP_inSeq;
    istr->readAll(iceP_inSeq);
    istr->readPendingValues();
    inS.endReadParams();
    BaseSeq iceP_outSeq;
    BaseSeq ret = this->opBaseSeq(::std::move(iceP_inSeq), iceP_outSeq, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_outSeq, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getCompact(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<Compact> ret = this->getCompact(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getInnerA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::Inner::A> ret = this->getInnerA(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getInnerSubA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::Inner::Sub::A> ret = this->getInnerSubA(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwInnerEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwInnerEx(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwInnerSubEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwInnerSubEx(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opM(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<M> iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<M> iceP_v2;
    ::std::shared_ptr<M> ret = this->opM(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opF1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<F1> iceP_f11;
    istr->readAll(iceP_f11);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<F1> iceP_f12;
    ::std::shared_ptr<F1> ret = this->opF1(::std::move(iceP_f11), iceP_f12, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_f12, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opF2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<F2Prx> iceP_f21;
    istr->readAll(iceP_f21);
    inS.endReadParams();
    ::std::shared_ptr<F2Prx> iceP_f22;
    ::std::shared_ptr<F2Prx> ret = this->opF2(::std::move(iceP_f21), iceP_f22, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_f22, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opF3(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<F3> iceP_f31;
    istr->readAll(iceP_f31);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<F3> iceP_f32;
    ::std::shared_ptr<F3> ret = this->opF3(::std::move(iceP_f31), iceP_f32, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_f32, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_hasF3(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->hasF3(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial_ops, iceC_Test_Initial_ops + 38, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial_ops)
    {
        case 0:
        {
            return _iceD_getAMDMB(in, current);
        }
        case 1:
        {
            return _iceD_getAll(in, current);
        }
        case 2:
        {
            return _iceD_getB1(in, current);
        }
        case 3:
        {
            return _iceD_getB2(in, current);
        }
        case 4:
        {
            return _iceD_getC(in, current);
        }
        case 5:
        {
            return _iceD_getCompact(in, current);
        }
        case 6:
        {
            return _iceD_getD(in, current);
        }
        case 7:
        {
            return _iceD_getD1(in, current);
        }
        case 8:
        {
            return _iceD_getE(in, current);
        }
        case 9:
        {
            return _iceD_getF(in, current);
        }
        case 10:
        {
            return _iceD_getH(in, current);
        }
        case 11:
        {
            return _iceD_getI(in, current);
        }
        case 12:
        {
            return _iceD_getInnerA(in, current);
        }
        case 13:
        {
            return _iceD_getInnerSubA(in, current);
        }
        case 14:
        {
            return _iceD_getJ(in, current);
        }
        case 15:
        {
            return _iceD_getK(in, current);
        }
        case 16:
        {
            return _iceD_getMB(in, current);
        }
        case 17:
        {
            return _iceD_hasF3(in, current);
        }
        case 18:
        {
            return _iceD_ice_id(in, current);
        }
        case 19:
        {
            return _iceD_ice_ids(in, current);
        }
        case 20:
        {
            return _iceD_ice_isA(in, current);
        }
        case 21:
        {
            return _iceD_ice_ping(in, current);
        }
        case 22:
        {
            return _iceD_opBaseSeq(in, current);
        }
        case 23:
        {
            return _iceD_opF1(in, current);
        }
        case 24:
        {
            return _iceD_opF2(in, current);
        }
        case 25:
        {
            return _iceD_opF3(in, current);
        }
        case 26:
        {
            return _iceD_opM(in, current);
        }
        case 27:
        {
            return _iceD_opValue(in, current);
        }
        case 28:
        {
            return _iceD_opValueMap(in, current);
        }
        case 29:
        {
            return _iceD_opValueSeq(in, current);
        }
        case 30:
        {
            return _iceD_setG(in, current);
        }
        case 31:
        {
            return _iceD_setI(in, current);
        }
        case 32:
        {
            return _iceD_setRecursive(in, current);
        }
        case 33:
        {
            return _iceD_shutdown(in, current);
        }
        case 34:
        {
            return _iceD_supportsClassGraphDepthMax(in, current);
        }
        case 35:
        {
            return _iceD_throwEDerived(in, current);
        }
        case 36:
        {
            return _iceD_throwInnerEx(in, current);
        }
        case 37:
        {
            return _iceD_throwInnerSubEx(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::UnexpectedObjectExceptionTest::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_UnexpectedObjectExceptionTest_ids, iceC_Test_UnexpectedObjectExceptionTest_ids + 2, s);
}

::std::vector<::std::string>
Test::UnexpectedObjectExceptionTest::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_UnexpectedObjectExceptionTest_ids[0], &iceC_Test_UnexpectedObjectExceptionTest_ids[2]);
}

::std::string
Test::UnexpectedObjectExceptionTest::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::UnexpectedObjectExceptionTest::ice_staticId()
{
    static const ::std::string typeId = "::Test::UnexpectedObjectExceptionTest";
    return typeId;
}

/// \cond INTERNAL
bool
Test::UnexpectedObjectExceptionTest::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<Empty> ret = this->op(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::UnexpectedObjectExceptionTest::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_UnexpectedObjectExceptionTest_ops, iceC_Test_UnexpectedObjectExceptionTest_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_UnexpectedObjectExceptionTest_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Echo::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Echo_ids, iceC_Test_Echo_ids + 2, s);
}

::std::vector<::std::string>
Test::Echo::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Echo_ids[0], &iceC_Test_Echo_ids[2]);
}

::std::string
Test::Echo::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Echo::ice_staticId()
{
    static const ::std::string typeId = "::Test::Echo";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Echo::_iceD_setConnection(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->setConnection(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Echo::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Echo::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Echo_ops, iceC_Test_Echo_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Echo_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_setConnection(in, current);
        }
        case 5:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::Base::~Base()
{
}

const ::std::string&
Test::Base::ice_staticId()
{
    static const ::std::string typeId = "::Test::Base";
    return typeId;
}

Test::AbstractBase::~AbstractBase()
{
}

const ::std::string&
Test::AbstractBase::ice_staticId()
{
    static const ::std::string typeId = "::Test::AbstractBase";
    return typeId;
}

Test::A::~A()
{
}

const ::std::string&
Test::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

Test::B::~B()
{
}

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

Test::C::~C()
{
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

Test::D::~D()
{
}

const ::std::string&
Test::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

Test::E::~E()
{
}

const ::std::string&
Test::E::ice_staticId()
{
    static const ::std::string typeId = "::Test::E";
    return typeId;
}

Test::F::~F()
{
}

const ::std::string&
Test::F::ice_staticId()
{
    static const ::std::string typeId = "::Test::F";
    return typeId;
}

Test::G::~G()
{
}

const ::std::string&
Test::G::ice_staticId()
{
    static const ::std::string typeId = "::Test::G";
    return typeId;
}

Test::H::~H()
{
}

const ::std::string&
Test::H::ice_staticId()
{
    static const ::std::string typeId = "::Test::H";
    return typeId;
}

Test::Compact::~Compact()
{
}

const ::std::string&
Test::Compact::ice_staticId()
{
    static const ::std::string typeId = "::Test::Compact";
    return typeId;
}

Test::CompactExt::~CompactExt()
{
}

const ::std::string&
Test::CompactExt::ice_staticId()
{
    static const ::std::string typeId = "::Test::CompactExt";
    return typeId;
}

Test::A1::~A1()
{
}

const ::std::string&
Test::A1::ice_staticId()
{
    static const ::std::string typeId = "::Test::A1";
    return typeId;
}

Test::B1::~B1()
{
}

const ::std::string&
Test::B1::ice_staticId()
{
    static const ::std::string typeId = "::Test::B1";
    return typeId;
}

Test::D1::~D1()
{
}

const ::std::string&
Test::D1::ice_staticId()
{
    static const ::std::string typeId = "::Test::D1";
    return typeId;
}

Test::Inner::A::~A()
{
}

const ::std::string&
Test::Inner::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::A";
    return typeId;
}

Test::Inner::Sub::A::~A()
{
}

const ::std::string&
Test::Inner::Sub::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Sub::A";
    return typeId;
}

Test::Recursive::~Recursive()
{
}

const ::std::string&
Test::Recursive::ice_staticId()
{
    static const ::std::string typeId = "::Test::Recursive";
    return typeId;
}

Test::K::~K()
{
}

const ::std::string&
Test::K::ice_staticId()
{
    static const ::std::string typeId = "::Test::K";
    return typeId;
}

Test::L::~L()
{
}

const ::std::string&
Test::L::ice_staticId()
{
    static const ::std::string typeId = "::Test::L";
    return typeId;
}

Test::M::~M()
{
}

const ::std::string&
Test::M::ice_staticId()
{
    static const ::std::string typeId = "::Test::M";
    return typeId;
}

Test::F3::~F3()
{
}

const ::std::string&
Test::F3::ice_staticId()
{
    static const ::std::string typeId = "::Test::F3";
    return typeId;
}

Test::Empty::~Empty()
{
}

const ::std::string&
Test::Empty::ice_staticId()
{
    static const ::std::string typeId = "::Test::Empty";
    return typeId;
}

Test::AlsoEmpty::~AlsoEmpty()
{
}

const ::std::string&
Test::AlsoEmpty::ice_staticId()
{
    static const ::std::string typeId = "::Test::AlsoEmpty";
    return typeId;
}

Test::COneMember::~COneMember()
{
}

const ::std::string&
Test::COneMember::ice_staticId()
{
    static const ::std::string typeId = "::Test::COneMember";
    return typeId;
}

Test::CTwoMembers::~CTwoMembers()
{
}

const ::std::string&
Test::CTwoMembers::ice_staticId()
{
    static const ::std::string typeId = "::Test::CTwoMembers";
    return typeId;
}

/// \cond INTERNAL
void
Test::AbstractBasePrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_AbstractBase_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::AbstractBasePrx::_newInstance() const
{
    return ::IceInternal::createProxy<AbstractBasePrx>();
}
/// \endcond

const ::std::string&
Test::AbstractBasePrx::ice_staticId()
{
    return AbstractBaseDisp::ice_staticId();
}

/// \cond INTERNAL
void
Test::IPrx::_iceI_doI(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_I_doI_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::IPrx::_newInstance() const
{
    return ::IceInternal::createProxy<IPrx>();
}
/// \endcond

const ::std::string&
Test::IPrx::ice_staticId()
{
    return I::ice_staticId();
}

/// \cond INTERNAL
void
Test::JPrx::_iceI_doJ(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_J_doJ_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::JPrx::_newInstance() const
{
    return ::IceInternal::createProxy<JPrx>();
}
/// \endcond

const ::std::string&
Test::JPrx::ice_staticId()
{
    return J::ice_staticId();
}

/// \cond INTERNAL
void
Test::HPrx::_iceI_doH(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_H_doH_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::HPrx::_iceI_doH2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_H_doH2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::HPrx::_newInstance() const
{
    return ::IceInternal::createProxy<HPrx>();
}
/// \endcond

const ::std::string&
Test::HPrx::ice_staticId()
{
    return HDisp::ice_staticId();
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getB1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getB1_name);
    outAsync->invoke(iceC_Test_Initial_getB1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getB2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getB2_name);
    outAsync->invoke(iceC_Test_Initial_getB2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::C>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getC_name);
    outAsync->invoke(iceC_Test_Initial_getC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<C> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::D>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getD_name);
    outAsync->invoke(iceC_Test_Initial_getD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<D> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getE(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::E>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getE_name);
    outAsync->invoke(iceC_Test_Initial_getE_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<E> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getF(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::F>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getF_name);
    outAsync->invoke(iceC_Test_Initial_getF_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<F> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_setRecursive(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<Recursive>& iceP_p, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_setRecursive_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsClassGraphDepthMax(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsClassGraphDepthMax_name);
    outAsync->invoke(iceC_Test_Initial_supportsClassGraphDepthMax_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getMB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getMB_name);
    outAsync->invoke(iceC_Test_Initial_getMB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getAMDMB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getAMDMB_name);
    outAsync->invoke(iceC_Test_Initial_getAMDMB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getAll(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::GetAllResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getAll_name);
    outAsync->invoke(iceC_Test_Initial_getAll_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::GetAllResult v;
            istr->readAll(v.b1, v.b2, v.theC, v.theD);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getH(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::Value>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getH_name);
    outAsync->invoke(iceC_Test_Initial_getH_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Ice::Value> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getI(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::Value>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getI_name);
    outAsync->invoke(iceC_Test_Initial_getI_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Ice::Value> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getJ(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::Value>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getJ_name);
    outAsync->invoke(iceC_Test_Initial_getJ_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Ice::Value> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getK(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::K>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getK_name);
    outAsync->invoke(iceC_Test_Initial_getK_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<K> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opValue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpValueResult>>& outAsync, const ::std::shared_ptr<::Ice::Value>& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opValue_name);
    outAsync->invoke(iceC_Test_Initial_opValue_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpValueResult v;
            istr->readAll(v.v2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opValueSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpValueSeqResult>>& outAsync, const ValueSeq& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opValueSeq_name);
    outAsync->invoke(iceC_Test_Initial_opValueSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpValueSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opValueMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpValueMapResult>>& outAsync, const ValueMap& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opValueMap_name);
    outAsync->invoke(iceC_Test_Initial_opValueMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpValueMapResult v;
            istr->readAll(v.v2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getD1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::D1>>>& outAsync, const ::std::shared_ptr<D1>& iceP_d1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getD1_name);
    outAsync->invoke(iceC_Test_Initial_getD1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_d1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<D1> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_throwEDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_throwEDerived_name);
    outAsync->invoke(iceC_Test_Initial_throwEDerived_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const EDerived&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_setG(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<G>& iceP_theG, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_setG_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_theG);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_setI(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<::Ice::Value>& iceP_theI, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_setI_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_theI);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opBaseSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpBaseSeqResult>>& outAsync, const BaseSeq& iceP_inSeq, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opBaseSeq_name);
    outAsync->invoke(iceC_Test_Initial_opBaseSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_inSeq);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpBaseSeqResult v;
            istr->readAll(v.outSeq, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getCompact(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Compact>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getCompact_name);
    outAsync->invoke(iceC_Test_Initial_getCompact_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<Compact> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getInnerA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Inner::A>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getInnerA_name);
    outAsync->invoke(iceC_Test_Initial_getInnerA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Test::Inner::A> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getInnerSubA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Inner::Sub::A>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getInnerSubA_name);
    outAsync->invoke(iceC_Test_Initial_getInnerSubA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Test::Inner::Sub::A> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_throwInnerEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_throwInnerEx_name);
    outAsync->invoke(iceC_Test_Initial_throwInnerEx_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Test::Inner::Ex&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_throwInnerSubEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_throwInnerSubEx_name);
    outAsync->invoke(iceC_Test_Initial_throwInnerSubEx_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Test::Inner::Sub::Ex&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opM(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMResult>>& outAsync, const ::std::shared_ptr<M>& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opM_name);
    outAsync->invoke(iceC_Test_Initial_opM_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpMResult v;
            istr->readAll(v.v2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opF1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpF1Result>>& outAsync, const ::std::shared_ptr<F1>& iceP_f11, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opF1_name);
    outAsync->invoke(iceC_Test_Initial_opF1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f11);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpF1Result v;
            istr->readAll(v.f12, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opF2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpF2Result>>& outAsync, const ::std::shared_ptr<F2Prx>& iceP_f21, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opF2_name);
    outAsync->invoke(iceC_Test_Initial_opF2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f21);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpF2Result v;
            istr->readAll(v.f22, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opF3(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpF3Result>>& outAsync, const ::std::shared_ptr<F3>& iceP_f31, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opF3_name);
    outAsync->invoke(iceC_Test_Initial_opF3_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f31);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpF3Result v;
            istr->readAll(v.f32, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_hasF3(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_hasF3_name);
    outAsync->invoke(iceC_Test_Initial_hasF3_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::InitialPrx::_newInstance() const
{
    return ::IceInternal::createProxy<InitialPrx>();
}
/// \endcond

const ::std::string&
Test::InitialPrx::ice_staticId()
{
    return Initial::ice_staticId();
}

/// \cond INTERNAL
void
Test::UnexpectedObjectExceptionTestPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Empty>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_UnexpectedObjectExceptionTest_op_name);
    outAsync->invoke(iceC_Test_UnexpectedObjectExceptionTest_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<Empty> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::UnexpectedObjectExceptionTestPrx::_newInstance() const
{
    return ::IceInternal::createProxy<UnexpectedObjectExceptionTestPrx>();
}
/// \endcond

const ::std::string&
Test::UnexpectedObjectExceptionTestPrx::ice_staticId()
{
    return UnexpectedObjectExceptionTest::ice_staticId();
}

/// \cond INTERNAL
void
Test::EchoPrx::_iceI_setConnection(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Echo_setConnection_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::EchoPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Echo_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::EchoPrx::_newInstance() const
{
    return ::IceInternal::createProxy<EchoPrx>();
}
/// \endcond

const ::std::string&
Test::EchoPrx::ice_staticId()
{
    return Echo::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_AbstractBase_op_name = "op";

const ::std::string iceC_Test_I_doI_name = "doI";

const ::std::string iceC_Test_J_doJ_name = "doJ";

const ::std::string iceC_Test_H_doH_name = "doH";

const ::std::string iceC_Test_H_doH2_name = "doH2";

namespace
{

namespace
{

}

}

const ::std::string iceC_Test_Initial_shutdown_name = "shutdown";

const ::std::string iceC_Test_Initial_getB1_name = "getB1";

const ::std::string iceC_Test_Initial_getB2_name = "getB2";

const ::std::string iceC_Test_Initial_getC_name = "getC";

const ::std::string iceC_Test_Initial_getD_name = "getD";

const ::std::string iceC_Test_Initial_getE_name = "getE";

const ::std::string iceC_Test_Initial_getF_name = "getF";

const ::std::string iceC_Test_Initial_setRecursive_name = "setRecursive";

const ::std::string iceC_Test_Initial_supportsClassGraphDepthMax_name = "supportsClassGraphDepthMax";

const ::std::string iceC_Test_Initial_getMB_name = "getMB";

const ::std::string iceC_Test_Initial_getAMDMB_name = "getAMDMB";

const ::std::string iceC_Test_Initial_getAll_name = "getAll";

const ::std::string iceC_Test_Initial_getH_name = "getH";

const ::std::string iceC_Test_Initial_getI_name = "getI";

const ::std::string iceC_Test_Initial_getJ_name = "getJ";

const ::std::string iceC_Test_Initial_getK_name = "getK";

const ::std::string iceC_Test_Initial_opValue_name = "opValue";

const ::std::string iceC_Test_Initial_opValueSeq_name = "opValueSeq";

const ::std::string iceC_Test_Initial_opValueMap_name = "opValueMap";

const ::std::string iceC_Test_Initial_getD1_name = "getD1";

const ::std::string iceC_Test_Initial_throwEDerived_name = "throwEDerived";

const ::std::string iceC_Test_Initial_setG_name = "setG";

const ::std::string iceC_Test_Initial_setI_name = "setI";

const ::std::string iceC_Test_Initial_opBaseSeq_name = "opBaseSeq";

const ::std::string iceC_Test_Initial_getCompact_name = "getCompact";

const ::std::string iceC_Test_Initial_getInnerA_name = "getInnerA";

const ::std::string iceC_Test_Initial_getInnerSubA_name = "getInnerSubA";

const ::std::string iceC_Test_Initial_throwInnerEx_name = "throwInnerEx";

const ::std::string iceC_Test_Initial_throwInnerSubEx_name = "throwInnerSubEx";

const ::std::string iceC_Test_Initial_opM_name = "opM";

const ::std::string iceC_Test_Initial_opF1_name = "opF1";

const ::std::string iceC_Test_Initial_opF2_name = "opF2";

const ::std::string iceC_Test_Initial_opF3_name = "opF3";

const ::std::string iceC_Test_Initial_hasF3_name = "hasF3";

const ::std::string iceC_Test_UnexpectedObjectExceptionTest_op_name = "op";

const ::std::string iceC_Test_Echo_setConnection_name = "setConnection";

const ::std::string iceC_Test_Echo_shutdown_name = "shutdown";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::EBase> iceC_Test_EBase_init("::Test::EBase");

}

Test::EBase::EBase(const A1Ptr& a1, const A1Ptr& a2) :
    ::Ice::UserException(),
    a1(a1),
    a2(a2)
{
}
Test::EBase::~EBase()
{
}

::std::string
Test::EBase::ice_id() const
{
    return "::Test::EBase";
}

Test::EBase*
Test::EBase::ice_clone() const
{
    return new EBase(*this);
}

void
Test::EBase::ice_throw() const
{
    throw *this;
}

bool
Test::EBase::_usesClasses() const
{
    return true;
}

/// \cond STREAM
void
Test::EBase::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::EBase", -1, true);
    ::Ice::StreamWriter< EBase, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::EBase::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< EBase, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::EDerived> iceC_Test_EDerived_init("::Test::EDerived");

}

Test::EDerived::EDerived(const A1Ptr& a1, const A1Ptr& a2, const A1Ptr& a3, const A1Ptr& a4) :
    EBase(a1, a2),
    a3(a3),
    a4(a4)
{
}
Test::EDerived::~EDerived()
{
}

::std::string
Test::EDerived::ice_id() const
{
    return "::Test::EDerived";
}

Test::EDerived*
Test::EDerived::ice_clone() const
{
    return new EDerived(*this);
}

void
Test::EDerived::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::EDerived::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::EDerived", -1, false);
    ::Ice::StreamWriter< EDerived, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    EBase::_writeImpl(ostr);
}

void
Test::EDerived::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< EDerived, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    EBase::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::Inner::Ex> iceC_Test_Inner_Ex_init("::Test::Inner::Ex");

}

Test::Inner::Ex::Ex(const ::std::string& reason) :
    ::Ice::UserException(),
    reason(reason)
{
}
Test::Inner::Ex::~Ex()
{
}

::std::string
Test::Inner::Ex::ice_id() const
{
    return "::Test::Inner::Ex";
}

Test::Inner::Ex*
Test::Inner::Ex::ice_clone() const
{
    return new Ex(*this);
}

void
Test::Inner::Ex::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::Inner::Ex::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::Inner::Ex", -1, true);
    ::Ice::StreamWriter< Ex, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Inner::Ex::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Ex, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::Inner::Sub::Ex> iceC_Test_Inner_Sub_Ex_init("::Test::Inner::Sub::Ex");

}

Test::Inner::Sub::Ex::Ex(const ::std::string& reason) :
    ::Ice::UserException(),
    reason(reason)
{
}
Test::Inner::Sub::Ex::~Ex()
{
}

::std::string
Test::Inner::Sub::Ex::ice_id() const
{
    return "::Test::Inner::Sub::Ex";
}

Test::Inner::Sub::Ex*
Test::Inner::Sub::Ex::ice_clone() const
{
    return new Ex(*this);
}

void
Test::Inner::Sub::Ex::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::Inner::Sub::Ex::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::Inner::Sub::Ex", -1, true);
    ::Ice::StreamWriter< Ex, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Inner::Sub::Ex::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Ex, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::EOneMember> iceC_Test_EOneMember_init("::Test::EOneMember");

}

Test::EOneMember::EOneMember(const EmptyPtr& e) :
    ::Ice::UserException(),
    e(e)
{
}
Test::EOneMember::~EOneMember()
{
}

::std::string
Test::EOneMember::ice_id() const
{
    return "::Test::EOneMember";
}

Test::EOneMember*
Test::EOneMember::ice_clone() const
{
    return new EOneMember(*this);
}

void
Test::EOneMember::ice_throw() const
{
    throw *this;
}

bool
Test::EOneMember::_usesClasses() const
{
    return true;
}

/// \cond STREAM
void
Test::EOneMember::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::EOneMember", -1, true);
    ::Ice::StreamWriter< EOneMember, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::EOneMember::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< EOneMember, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::ETwoMembers> iceC_Test_ETwoMembers_init("::Test::ETwoMembers");

}

Test::ETwoMembers::ETwoMembers(const EmptyPtr& e1, const EmptyPtr& e2) :
    ::Ice::UserException(),
    e1(e1),
    e2(e2)
{
}
Test::ETwoMembers::~ETwoMembers()
{
}

::std::string
Test::ETwoMembers::ice_id() const
{
    return "::Test::ETwoMembers";
}

Test::ETwoMembers*
Test::ETwoMembers::ice_clone() const
{
    return new ETwoMembers(*this);
}

void
Test::ETwoMembers::ice_throw() const
{
    throw *this;
}

bool
Test::ETwoMembers::_usesClasses() const
{
    return true;
}

/// \cond STREAM
void
Test::ETwoMembers::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::ETwoMembers", -1, true);
    ::Ice::StreamWriter< ETwoMembers, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::ETwoMembers::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ETwoMembers, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

Test::AMD_Initial_getAMDMB::~AMD_Initial_getAMDMB()
{
}

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_getAMDMB::AMD_Initial_getAMDMB(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_getAMDMB::ice_response(const ::Test::BPtr& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Base* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Base>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Base;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Base::_newInstance() const
{
    return new Base;
}
/// \endcond

const ::std::string&
IceProxy::Test::Base::ice_staticId()
{
    return ::Test::Base::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(AbstractBase* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< AbstractBase>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new AbstractBase;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::AbstractBase::_iceI_begin_op(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_AbstractBase_op_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_AbstractBase_op_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_AbstractBase_op_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::AbstractBase::end_op(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_AbstractBase_op_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::AbstractBase::_newInstance() const
{
    return new AbstractBase;
}
/// \endcond

const ::std::string&
IceProxy::Test::AbstractBase::ice_staticId()
{
    return ::Test::AbstractBase::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(A* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< A>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new A;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::A::_newInstance() const
{
    return new A;
}
/// \endcond

const ::std::string&
IceProxy::Test::A::ice_staticId()
{
    return ::Test::A::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(B* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< B>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new B;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::B::_newInstance() const
{
    return new B;
}
/// \endcond

const ::std::string&
IceProxy::Test::B::ice_staticId()
{
    return ::Test::B::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(C* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::C::_newInstance() const
{
    return new C;
}
/// \endcond

const ::std::string&
IceProxy::Test::C::ice_staticId()
{
    return ::Test::C::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(D* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< D>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new D;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::D::_newInstance() const
{
    return new D;
}
/// \endcond

const ::std::string&
IceProxy::Test::D::ice_staticId()
{
    return ::Test::D::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(E* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< E>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new E;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::E::_newInstance() const
{
    return new E;
}
/// \endcond

const ::std::string&
IceProxy::Test::E::ice_staticId()
{
    return ::Test::E::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(F* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< F>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new F;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::F::_newInstance() const
{
    return new F;
}
/// \endcond

const ::std::string&
IceProxy::Test::F::ice_staticId()
{
    return ::Test::F::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(G* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< G>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new G;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::G::_newInstance() const
{
    return new G;
}
/// \endcond

const ::std::string&
IceProxy::Test::G::ice_staticId()
{
    return ::Test::G::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(I* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< I>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new I;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::I::_iceI_begin_doI(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_I_doI_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_I_doI_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_I_doI_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::I::end_doI(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_I_doI_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::I::_newInstance() const
{
    return new I;
}
/// \endcond

const ::std::string&
IceProxy::Test::I::ice_staticId()
{
    return ::Test::I::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(J* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< J>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new J;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::J::_iceI_begin_doJ(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_J_doJ_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_J_doJ_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_J_doJ_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::J::end_doJ(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_J_doJ_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::J::_newInstance() const
{
    return new J;
}
/// \endcond

const ::std::string&
IceProxy::Test::J::ice_staticId()
{
    return ::Test::J::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(H* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< H>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new H;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::H::_iceI_begin_doH(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_H_doH_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_H_doH_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_H_doH_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::H::end_doH(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_H_doH_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::H::_iceI_begin_doH2(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_H_doH2_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_H_doH2_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_H_doH2_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::H::end_doH2(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_H_doH2_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::H::_newInstance() const
{
    return new H;
}
/// \endcond

const ::std::string&
IceProxy::Test::H::ice_staticId()
{
    return ::Test::H::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Compact* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Compact>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Compact;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Compact::_newInstance() const
{
    return new Compact;
}
/// \endcond

const ::std::string&
IceProxy::Test::Compact::ice_staticId()
{
    return ::Test::Compact::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(CompactExt* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< CompactExt>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new CompactExt;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::CompactExt::_newInstance() const
{
    return new CompactExt;
}
/// \endcond

const ::std::string&
IceProxy::Test::CompactExt::ice_staticId()
{
    return ::Test::CompactExt::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(A1* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< A1>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new A1;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::A1::_newInstance() const
{
    return new A1;
}
/// \endcond

const ::std::string&
IceProxy::Test::A1::ice_staticId()
{
    return ::Test::A1::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(B1* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< B1>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new B1;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::B1::_newInstance() const
{
    return new B1;
}
/// \endcond

const ::std::string&
IceProxy::Test::B1::ice_staticId()
{
    return ::Test::B1::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(D1* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< D1>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new D1;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::D1::_newInstance() const
{
    return new D1;
}
/// \endcond

const ::std::string&
IceProxy::Test::D1::ice_staticId()
{
    return ::Test::D1::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::Inner::upCast(A* p) { return p; }

void
::IceProxy::Test::Inner::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< A>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new A;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Inner::A::_newInstance() const
{
    return new A;
}
/// \endcond

const ::std::string&
IceProxy::Test::Inner::A::ice_staticId()
{
    return ::Test::Inner::A::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::Inner::Sub::upCast(A* p) { return p; }

void
::IceProxy::Test::Inner::Sub::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< A>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new A;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Inner::Sub::A::_newInstance() const
{
    return new A;
}
/// \endcond

const ::std::string&
IceProxy::Test::Inner::Sub::A::ice_staticId()
{
    return ::Test::Inner::Sub::A::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Recursive* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Recursive>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Recursive;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Recursive::_newInstance() const
{
    return new Recursive;
}
/// \endcond

const ::std::string&
IceProxy::Test::Recursive::ice_staticId()
{
    return ::Test::Recursive::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(K* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< K>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new K;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::K::_newInstance() const
{
    return new K;
}
/// \endcond

const ::std::string&
IceProxy::Test::K::ice_staticId()
{
    return ::Test::K::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(L* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< L>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new L;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::L::_newInstance() const
{
    return new L;
}
/// \endcond

const ::std::string&
IceProxy::Test::L::ice_staticId()
{
    return ::Test::L::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(M* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< M>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new M;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::M::_newInstance() const
{
    return new M;
}
/// \endcond

const ::std::string&
IceProxy::Test::M::ice_staticId()
{
    return ::Test::M::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(F3* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< F3>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new F3;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::F3::_newInstance() const
{
    return new F3;
}
/// \endcond

const ::std::string&
IceProxy::Test::F3::ice_staticId()
{
    return ::Test::F3::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Initial* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Initial>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Initial;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial_shutdown_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getB1(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getB1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getB1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getB1_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getB1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::BPtr
IceProxy::Test::Initial::end_getB1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getB1_name);
    ::Test::BPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getB2(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getB2_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getB2_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getB2_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getB2_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::BPtr
IceProxy::Test::Initial::end_getB2(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getB2_name);
    ::Test::BPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getC(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getC_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getC_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getC_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getC_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::CPtr
IceProxy::Test::Initial::end_getC(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getC_name);
    ::Test::CPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getD(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getD_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::DPtr
IceProxy::Test::Initial::end_getD(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getD_name);
    ::Test::DPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getE(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getE_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getE_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getE_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getE_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::EPtr
IceProxy::Test::Initial::end_getE(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getE_name);
    ::Test::EPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getF(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getF_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getF_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getF_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getF_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::FPtr
IceProxy::Test::Initial::end_getF(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getF_name);
    ::Test::FPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_setRecursive(const ::Test::RecursivePtr& iceP_p, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_setRecursive_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_setRecursive_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_setRecursive_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_setRecursive(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial_setRecursive_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_supportsClassGraphDepthMax(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsClassGraphDepthMax_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_supportsClassGraphDepthMax_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_supportsClassGraphDepthMax_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_supportsClassGraphDepthMax_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Test::Initial::end_supportsClassGraphDepthMax(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_supportsClassGraphDepthMax_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getMB(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getMB_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getMB_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getMB_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getMB_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::BPtr
IceProxy::Test::Initial::end_getMB(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getMB_name);
    ::Test::BPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getAMDMB(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getAMDMB_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getAMDMB_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getAMDMB_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getAMDMB_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::BPtr
IceProxy::Test::Initial::end_getAMDMB(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getAMDMB_name);
    ::Test::BPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getAll(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getAll_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getAll_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getAll_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getAll_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_getAll(::Test::BPtr& iceP_b1, ::Test::BPtr& iceP_b2, ::Test::CPtr& iceP_theC, ::Test::DPtr& iceP_theD, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getAll_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_b1);
    istr->read(iceP_b2);
    istr->read(iceP_theC);
    istr->read(iceP_theD);
    istr->readPendingValues();
    result->_endReadParams();
}

void IceProxy::Test::Initial::_iceI_end_getAll(::Test::BPtr& iceP_b1, ::Test::BPtr& iceP_b2, ::Test::CPtr& iceP_theC, ::Test::DPtr& iceP_theD, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getAll_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_b1);
    istr->read(iceP_b2);
    istr->read(iceP_theC);
    istr->read(iceP_theD);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getH(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getH_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getH_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getH_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getH_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::IPtr
IceProxy::Test::Initial::end_getH(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getH_name);
    ::Test::IPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getI(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getI_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getI_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getI_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getI_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::IPtr
IceProxy::Test::Initial::end_getI(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getI_name);
    ::Test::IPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getJ(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getJ_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getJ_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getJ_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getJ_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::IPtr
IceProxy::Test::Initial::end_getJ(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getJ_name);
    ::Test::IPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getK(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getK_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getK_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getK_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getK_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::KPtr
IceProxy::Test::Initial::end_getK(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getK_name);
    ::Test::KPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opValue(const ::Ice::ValuePtr& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opValue_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opValue_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opValue_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opValue_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::ValuePtr
IceProxy::Test::Initial::end_opValue(::Ice::ValuePtr& iceP_v2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opValue_name);
    ::Ice::ValuePtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opValue(::Ice::ValuePtr& iceP_v2, ::Ice::ValuePtr& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opValue_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opValueSeq(const ::Test::ValueSeq& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opValueSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opValueSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opValueSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opValueSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ValueSeq
IceProxy::Test::Initial::end_opValueSeq(::Test::ValueSeq& iceP_v2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opValueSeq_name);
    ::Test::ValueSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opValueSeq(::Test::ValueSeq& iceP_v2, ::Test::ValueSeq& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opValueSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opValueMap(const ::Test::ValueMap& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opValueMap_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opValueMap_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opValueMap_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opValueMap_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ValueMap
IceProxy::Test::Initial::end_opValueMap(::Test::ValueMap& iceP_v2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opValueMap_name);
    ::Test::ValueMap ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opValueMap(::Test::ValueMap& iceP_v2, ::Test::ValueMap& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opValueMap_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getD1(const ::Test::D1Ptr& iceP_d1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getD1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getD1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getD1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_d1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_getD1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::D1Ptr
IceProxy::Test::Initial::end_getD1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getD1_name);
    ::Test::D1Ptr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_throwEDerived(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_throwEDerived_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_throwEDerived_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_throwEDerived_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_throwEDerived_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_throwEDerived(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_throwEDerived_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::EDerived&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_setG(const ::Test::GPtr& iceP_theG, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_setG_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_setG_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_theG);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_setG_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_setG(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial_setG_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_setI(const ::Test::IPtr& iceP_theI, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_setI_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_setI_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_theI);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_setI_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_setI(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial_setI_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opBaseSeq(const ::Test::BaseSeq& iceP_inSeq, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opBaseSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opBaseSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opBaseSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_inSeq);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opBaseSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::BaseSeq
IceProxy::Test::Initial::end_opBaseSeq(::Test::BaseSeq& iceP_outSeq, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opBaseSeq_name);
    ::Test::BaseSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_outSeq);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opBaseSeq(::Test::BaseSeq& iceP_outSeq, ::Test::BaseSeq& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opBaseSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_outSeq);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getCompact(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getCompact_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getCompact_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getCompact_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getCompact_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::CompactPtr
IceProxy::Test::Initial::end_getCompact(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getCompact_name);
    ::Test::CompactPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getInnerA(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getInnerA_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getInnerA_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getInnerA_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getInnerA_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::APtr
IceProxy::Test::Initial::end_getInnerA(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getInnerA_name);
    ::Test::Inner::APtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getInnerSubA(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getInnerSubA_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getInnerSubA_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getInnerSubA_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getInnerSubA_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::Sub::APtr
IceProxy::Test::Initial::end_getInnerSubA(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getInnerSubA_name);
    ::Test::Inner::Sub::APtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_throwInnerEx(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_throwInnerEx_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_throwInnerEx_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_throwInnerEx_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_throwInnerEx_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_throwInnerEx(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_throwInnerEx_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::Inner::Ex&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_throwInnerSubEx(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_throwInnerSubEx_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_throwInnerSubEx_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_throwInnerSubEx_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_throwInnerSubEx_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_throwInnerSubEx(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_throwInnerSubEx_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::Inner::Sub::Ex&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opM(const ::Test::MPtr& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opM_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opM_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opM_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opM_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MPtr
IceProxy::Test::Initial::end_opM(::Test::MPtr& iceP_v2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opM_name);
    ::Test::MPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opM(::Test::MPtr& iceP_v2, ::Test::MPtr& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opM_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opF1(const ::Test::F1Ptr& iceP_f11, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opF1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opF1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opF1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_f11);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opF1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::F1Ptr
IceProxy::Test::Initial::end_opF1(::Test::F1Ptr& iceP_f12, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opF1_name);
    ::Test::F1Ptr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_f12);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opF1(::Test::F1Ptr& iceP_f12, ::Test::F1Ptr& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opF1_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_f12);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opF2(const ::Test::F2Prx& iceP_f21, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opF2_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opF2_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opF2_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_f21);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opF2_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::F2Prx
IceProxy::Test::Initial::end_opF2(::Test::F2Prx& iceP_f22, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opF2_name);
    ::Test::F2Prx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_f22);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opF2(::Test::F2Prx& iceP_f22, ::Test::F2Prx& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opF2_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_f22);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opF3(const ::Test::F3Ptr& iceP_f31, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opF3_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opF3_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opF3_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_f31);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opF3_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::F3Ptr
IceProxy::Test::Initial::end_opF3(::Test::F3Ptr& iceP_f32, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opF3_name);
    ::Test::F3Ptr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_f32);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opF3(::Test::F3Ptr& iceP_f32, ::Test::F3Ptr& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opF3_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_f32);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_hasF3(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_hasF3_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_hasF3_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_hasF3_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_hasF3_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Test::Initial::end_hasF3(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_hasF3_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Initial::_newInstance() const
{
    return new Initial;
}
/// \endcond

const ::std::string&
IceProxy::Test::Initial::ice_staticId()
{
    return ::Test::Initial::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Empty* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Empty>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Empty;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Empty::_newInstance() const
{
    return new Empty;
}
/// \endcond

const ::std::string&
IceProxy::Test::Empty::ice_staticId()
{
    return ::Test::Empty::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(AlsoEmpty* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< AlsoEmpty>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new AlsoEmpty;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::AlsoEmpty::_newInstance() const
{
    return new AlsoEmpty;
}
/// \endcond

const ::std::string&
IceProxy::Test::AlsoEmpty::ice_staticId()
{
    return ::Test::AlsoEmpty::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(UnexpectedObjectExceptionTest* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< UnexpectedObjectExceptionTest>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new UnexpectedObjectExceptionTest;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::UnexpectedObjectExceptionTest::_iceI_begin_op(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_UnexpectedObjectExceptionTest_op_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_UnexpectedObjectExceptionTest_op_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_UnexpectedObjectExceptionTest_op_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_UnexpectedObjectExceptionTest_op_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::EmptyPtr
IceProxy::Test::UnexpectedObjectExceptionTest::end_op(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_UnexpectedObjectExceptionTest_op_name);
    ::Test::EmptyPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::UnexpectedObjectExceptionTest::_newInstance() const
{
    return new UnexpectedObjectExceptionTest;
}
/// \endcond

const ::std::string&
IceProxy::Test::UnexpectedObjectExceptionTest::ice_staticId()
{
    return ::Test::UnexpectedObjectExceptionTest::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(COneMember* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< COneMember>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new COneMember;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::COneMember::_newInstance() const
{
    return new COneMember;
}
/// \endcond

const ::std::string&
IceProxy::Test::COneMember::ice_staticId()
{
    return ::Test::COneMember::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(CTwoMembers* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< CTwoMembers>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new CTwoMembers;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::CTwoMembers::_newInstance() const
{
    return new CTwoMembers;
}
/// \endcond

const ::std::string&
IceProxy::Test::CTwoMembers::ice_staticId()
{
    return ::Test::CTwoMembers::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Echo* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Echo>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Echo;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Echo::_iceI_begin_setConnection(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Echo_setConnection_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Echo_setConnection_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Echo_setConnection_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Echo::end_setConnection(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Echo_setConnection_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Echo::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Echo_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Echo_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Echo_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Echo::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Echo_shutdown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Echo::_newInstance() const
{
    return new Echo;
}
/// \endcond

const ::std::string&
IceProxy::Test::Echo::ice_staticId()
{
    return ::Test::Echo::ice_staticId();
}

Test::Base::~Base()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Base* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::Base::ice_clone() const
{
    ::Ice::Object* p = new Base(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_Base_ids[2] =
{
    "::Ice::Object",
    "::Test::Base"
};

}

bool
Test::Base::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Base_ids, iceC_Test_Base_ids + 2, s);
}

::std::vector< ::std::string>
Test::Base::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Base_ids[0], &iceC_Test_Base_ids[2]);
}

const ::std::string&
Test::Base::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Base::ice_staticId()
{
    static const ::std::string typeId = "::Test::Base";
    return typeId;
}

/// \cond STREAM
void
Test::Base::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Base, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Base::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Base, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Base> iceC_Test_Base_init("::Test::Base");
}

::Ice::ValueFactoryPtr
Test::Base::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Base::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(BasePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = BasePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Base::ice_staticId(), v);
    }
}
/// \endcond

Test::AbstractBase::~AbstractBase()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(AbstractBase* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::AbstractBase::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
}

namespace
{
const ::std::string iceC_Test_AbstractBase_ids[3] =
{
    "::Ice::Object",
    "::Test::AbstractBase",
    "::Test::Base"
};

}

bool
Test::AbstractBase::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_AbstractBase_ids, iceC_Test_AbstractBase_ids + 3, s);
}

::std::vector< ::std::string>
Test::AbstractBase::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_AbstractBase_ids[0], &iceC_Test_AbstractBase_ids[3]);
}

const ::std::string&
Test::AbstractBase::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::AbstractBase::ice_staticId()
{
    static const ::std::string typeId = "::Test::AbstractBase";
    return typeId;
}

/// \cond INTERNAL
bool
Test::AbstractBase::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_AbstractBase_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};

}

/// \cond INTERNAL
bool
Test::AbstractBase::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_AbstractBase_all, iceC_Test_AbstractBase_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_AbstractBase_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::AbstractBase::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< AbstractBase, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    Base::_iceWriteImpl(ostr);
}

void
Test::AbstractBase::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< AbstractBase, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    Base::_iceReadImpl(istr);
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(AbstractBasePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = AbstractBasePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(AbstractBase::ice_staticId(), v);
    }
}
/// \endcond

Test::A::~A()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(A* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::A::ice_clone() const
{
    ::Ice::Object* p = new A(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_A_ids[2] =
{
    "::Ice::Object",
    "::Test::A"
};

}

bool
Test::A::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_A_ids, iceC_Test_A_ids + 2, s);
}

::std::vector< ::std::string>
Test::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_A_ids[0], &iceC_Test_A_ids[2]);
}

const ::std::string&
Test::A::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

void
Test::A::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(theB)
    {
        if((::Test::upCast(theB.get())->_iceGcVisit(v_)))
        {
            theB = 0;
        }
    }
    if(theC)
    {
        if((::Test::upCast(theC.get())->_iceGcVisit(v_)))
        {
            theC = 0;
        }
    }
}

/// \cond STREAM
void
Test::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::A> iceC_Test_A_init("::Test::A");
}

::Ice::ValueFactoryPtr
Test::A::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::A::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(A::ice_staticId(), v);
    }
}
/// \endcond

Test::B::~B()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(B* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::B::ice_clone() const
{
    ::Ice::Object* p = new B(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_B_ids[3] =
{
    "::Ice::Object",
    "::Test::A",
    "::Test::B"
};

}

bool
Test::B::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_B_ids, iceC_Test_B_ids + 3, s);
}

::std::vector< ::std::string>
Test::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_B_ids[0], &iceC_Test_B_ids[3]);
}

const ::std::string&
Test::B::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

void
Test::B::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    A::_iceGcVisitMembers(v_);
    if(theA)
    {
        if((::Test::upCast(theA.get())->_iceGcVisit(v_)))
        {
            theA = 0;
        }
    }
}

/// \cond STREAM
void
Test::B::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    A::_iceWriteImpl(ostr);
}

void
Test::B::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    A::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::B> iceC_Test_B_init("::Test::B");
}

::Ice::ValueFactoryPtr
Test::B::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::B::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(B::ice_staticId(), v);
    }
}
/// \endcond

Test::C::~C()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(C* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::C::ice_clone() const
{
    ::Ice::Object* p = new C(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_C_ids[2] =
{
    "::Ice::Object",
    "::Test::C"
};

}

bool
Test::C::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_C_ids, iceC_Test_C_ids + 2, s);
}

::std::vector< ::std::string>
Test::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_C_ids[0], &iceC_Test_C_ids[2]);
}

const ::std::string&
Test::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

void
Test::C::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(theB)
    {
        if((::Test::upCast(theB.get())->_iceGcVisit(v_)))
        {
            theB = 0;
        }
    }
}

/// \cond STREAM
void
Test::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::C> iceC_Test_C_init("::Test::C");
}

::Ice::ValueFactoryPtr
Test::C::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::C::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C::ice_staticId(), v);
    }
}
/// \endcond

Test::D::~D()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(D* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::D::ice_clone() const
{
    ::Ice::Object* p = new D(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_D_ids[2] =
{
    "::Ice::Object",
    "::Test::D"
};

}

bool
Test::D::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_D_ids, iceC_Test_D_ids + 2, s);
}

::std::vector< ::std::string>
Test::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_D_ids[0], &iceC_Test_D_ids[2]);
}

const ::std::string&
Test::D::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

void
Test::D::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(theA)
    {
        if((::Test::upCast(theA.get())->_iceGcVisit(v_)))
        {
            theA = 0;
        }
    }
    if(theB)
    {
        if((::Test::upCast(theB.get())->_iceGcVisit(v_)))
        {
            theB = 0;
        }
    }
    if(theC)
    {
        if((::Test::upCast(theC.get())->_iceGcVisit(v_)))
        {
            theC = 0;
        }
    }
}

/// \cond STREAM
void
Test::D::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::D::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::D> iceC_Test_D_init("::Test::D");
}

::Ice::ValueFactoryPtr
Test::D::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::D::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(D::ice_staticId(), v);
    }
}
/// \endcond

Test::E::~E()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(E* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::E::ice_clone() const
{
    ::Ice::Object* p = new E(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_E_ids[2] =
{
    "::Ice::Object",
    "::Test::E"
};

}

bool
Test::E::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_E_ids, iceC_Test_E_ids + 2, s);
}

::std::vector< ::std::string>
Test::E::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_E_ids[0], &iceC_Test_E_ids[2]);
}

const ::std::string&
Test::E::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::E::ice_staticId()
{
    static const ::std::string typeId = "::Test::E";
    return typeId;
}

/// \cond STREAM
void
Test::E::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< E, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::E::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< E, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::E> iceC_Test_E_init("::Test::E");
}

::Ice::ValueFactoryPtr
Test::E::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::E::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(EPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = EPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(E::ice_staticId(), v);
    }
}
/// \endcond

Test::F::~F()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(F* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::F::ice_clone() const
{
    ::Ice::Object* p = new F(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_F_ids[2] =
{
    "::Ice::Object",
    "::Test::F"
};

}

bool
Test::F::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_F_ids, iceC_Test_F_ids + 2, s);
}

::std::vector< ::std::string>
Test::F::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_F_ids[0], &iceC_Test_F_ids[2]);
}

const ::std::string&
Test::F::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::F::ice_staticId()
{
    static const ::std::string typeId = "::Test::F";
    return typeId;
}

void
Test::F::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(e1)
    {
        if((::Test::upCast(e1.get())->_iceGcVisit(v_)))
        {
            e1 = 0;
        }
    }
    if(e2)
    {
        if((::Test::upCast(e2.get())->_iceGcVisit(v_)))
        {
            e2 = 0;
        }
    }
}

/// \cond STREAM
void
Test::F::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< F, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::F::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< F, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::F> iceC_Test_F_init("::Test::F");
}

::Ice::ValueFactoryPtr
Test::F::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::F::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(FPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = FPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(F::ice_staticId(), v);
    }
}
/// \endcond

Test::G::~G()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(G* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::G::ice_clone() const
{
    ::Ice::Object* p = new G(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_G_ids[3] =
{
    "::Ice::Object",
    "::Test::Base",
    "::Test::G"
};

}

bool
Test::G::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_G_ids, iceC_Test_G_ids + 3, s);
}

::std::vector< ::std::string>
Test::G::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_G_ids[0], &iceC_Test_G_ids[3]);
}

const ::std::string&
Test::G::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::G::ice_staticId()
{
    static const ::std::string typeId = "::Test::G";
    return typeId;
}

/// \cond STREAM
void
Test::G::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< G, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    Base::_iceWriteImpl(ostr);
}

void
Test::G::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< G, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    Base::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::G> iceC_Test_G_init("::Test::G");
}

::Ice::ValueFactoryPtr
Test::G::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::G::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(GPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = GPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(G::ice_staticId(), v);
    }
}
/// \endcond

Test::I::~I()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(I* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_I_ids[2] =
{
    "::Ice::Object",
    "::Test::I"
};

}

bool
Test::I::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_I_ids, iceC_Test_I_ids + 2, s);
}

::std::vector< ::std::string>
Test::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_I_ids[0], &iceC_Test_I_ids[2]);
}

const ::std::string&
Test::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::I::_iceD_doI(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->doI(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_I_all[] =
{
    "doI",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_I_all, iceC_Test_I_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_I_all)
    {
        case 0:
        {
            return _iceD_doI(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::I::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< I, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::I::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< I, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(IPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = IPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(I::ice_staticId(), v);
    }
}
/// \endcond

Test::J::~J()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(J* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_J_ids[3] =
{
    "::Ice::Object",
    "::Test::I",
    "::Test::J"
};

}

bool
Test::J::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_J_ids, iceC_Test_J_ids + 3, s);
}

::std::vector< ::std::string>
Test::J::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_J_ids[0], &iceC_Test_J_ids[3]);
}

const ::std::string&
Test::J::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::J::ice_staticId()
{
    static const ::std::string typeId = "::Test::J";
    return typeId;
}

/// \cond INTERNAL
bool
Test::J::_iceD_doJ(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->doJ(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_J_all[] =
{
    "doI",
    "doJ",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::J::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_J_all, iceC_Test_J_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_J_all)
    {
        case 0:
        {
            return _iceD_doI(in, current);
        }
        case 1:
        {
            return _iceD_doJ(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::J::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< J, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::J::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< J, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(JPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = JPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(J::ice_staticId(), v);
    }
}
/// \endcond

Test::H::~H()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(H* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::H::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
}

namespace
{
const ::std::string iceC_Test_H_ids[3] =
{
    "::Ice::Object",
    "::Test::H",
    "::Test::I"
};

}

bool
Test::H::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_H_ids, iceC_Test_H_ids + 3, s);
}

::std::vector< ::std::string>
Test::H::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_H_ids[0], &iceC_Test_H_ids[3]);
}

const ::std::string&
Test::H::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::H::ice_staticId()
{
    static const ::std::string typeId = "::Test::H";
    return typeId;
}

/// \cond INTERNAL
bool
Test::H::_iceD_doH(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->doH(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::H::_iceD_doH2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->doH2(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_H_all[] =
{
    "doH",
    "doH2",
    "doI",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::H::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_H_all, iceC_Test_H_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_H_all)
    {
        case 0:
        {
            return _iceD_doH(in, current);
        }
        case 1:
        {
            return _iceD_doH2(in, current);
        }
        case 2:
        {
            return _iceD_doI(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::H::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< H, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::H::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< H, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(HPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = HPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(H::ice_staticId(), v);
    }
}
/// \endcond

Test::Compact::~Compact()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Compact* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::Compact::ice_clone() const
{
    ::Ice::Object* p = new Compact(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_Compact_ids[2] =
{
    "::Ice::Object",
    "::Test::Compact"
};

}

bool
Test::Compact::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Compact_ids, iceC_Test_Compact_ids + 2, s);
}

::std::vector< ::std::string>
Test::Compact::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Compact_ids[0], &iceC_Test_Compact_ids[2]);
}

const ::std::string&
Test::Compact::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Compact::ice_staticId()
{
    static const ::std::string typeId = "::Test::Compact";
    return typeId;
}

/// \cond STREAM
void
Test::Compact::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), 1, true);
    ::Ice::StreamWriter< Compact, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Compact::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Compact, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Compact> iceC_Test_Compact_init("::Test::Compact");
const ::IceInternal::CompactIdInit iceC_Test_Compact_compactIdInit("::Test::Compact", 1);
}

::Ice::ValueFactoryPtr
Test::Compact::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Compact::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(CompactPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CompactPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Compact::ice_staticId(), v);
    }
}
/// \endcond

Test::CompactExt::~CompactExt()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(CompactExt* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::CompactExt::ice_clone() const
{
    ::Ice::Object* p = new CompactExt(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_CompactExt_ids[3] =
{
    "::Ice::Object",
    "::Test::Compact",
    "::Test::CompactExt"
};

}

bool
Test::CompactExt::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_CompactExt_ids, iceC_Test_CompactExt_ids + 3, s);
}

::std::vector< ::std::string>
Test::CompactExt::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_CompactExt_ids[0], &iceC_Test_CompactExt_ids[3]);
}

const ::std::string&
Test::CompactExt::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::CompactExt::ice_staticId()
{
    static const ::std::string typeId = "::Test::CompactExt";
    return typeId;
}

/// \cond STREAM
void
Test::CompactExt::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), 789, false);
    ::Ice::StreamWriter< CompactExt, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    Compact::_iceWriteImpl(ostr);
}

void
Test::CompactExt::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< CompactExt, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    Compact::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::CompactExt> iceC_Test_CompactExt_init("::Test::CompactExt");
const ::IceInternal::CompactIdInit iceC_Test_CompactExt_compactIdInit("::Test::CompactExt", 789);
}

::Ice::ValueFactoryPtr
Test::CompactExt::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::CompactExt::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(CompactExtPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CompactExtPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(CompactExt::ice_staticId(), v);
    }
}
/// \endcond

Test::A1::~A1()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(A1* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::A1::ice_clone() const
{
    ::Ice::Object* p = new A1(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_A1_ids[2] =
{
    "::Ice::Object",
    "::Test::A1"
};

}

bool
Test::A1::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_A1_ids, iceC_Test_A1_ids + 2, s);
}

::std::vector< ::std::string>
Test::A1::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_A1_ids[0], &iceC_Test_A1_ids[2]);
}

const ::std::string&
Test::A1::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::A1::ice_staticId()
{
    static const ::std::string typeId = "::Test::A1";
    return typeId;
}

/// \cond STREAM
void
Test::A1::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< A1, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::A1::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< A1, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::A1> iceC_Test_A1_init("::Test::A1");
}

::Ice::ValueFactoryPtr
Test::A1::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::A1::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(A1Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = A1Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(A1::ice_staticId(), v);
    }
}
/// \endcond

Test::B1::~B1()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(B1* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::B1::ice_clone() const
{
    ::Ice::Object* p = new B1(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_B1_ids[2] =
{
    "::Ice::Object",
    "::Test::B1"
};

}

bool
Test::B1::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_B1_ids, iceC_Test_B1_ids + 2, s);
}

::std::vector< ::std::string>
Test::B1::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_B1_ids[0], &iceC_Test_B1_ids[2]);
}

const ::std::string&
Test::B1::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::B1::ice_staticId()
{
    static const ::std::string typeId = "::Test::B1";
    return typeId;
}

void
Test::B1::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(a1)
    {
        if((::Test::upCast(a1.get())->_iceGcVisit(v_)))
        {
            a1 = 0;
        }
    }
    if(a2)
    {
        if((::Test::upCast(a2.get())->_iceGcVisit(v_)))
        {
            a2 = 0;
        }
    }
}

/// \cond STREAM
void
Test::B1::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< B1, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::B1::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< B1, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::B1> iceC_Test_B1_init("::Test::B1");
}

::Ice::ValueFactoryPtr
Test::B1::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::B1::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(B1Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = B1Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(B1::ice_staticId(), v);
    }
}
/// \endcond

Test::D1::~D1()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(D1* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::D1::ice_clone() const
{
    ::Ice::Object* p = new D1(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_D1_ids[3] =
{
    "::Ice::Object",
    "::Test::B1",
    "::Test::D1"
};

}

bool
Test::D1::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_D1_ids, iceC_Test_D1_ids + 3, s);
}

::std::vector< ::std::string>
Test::D1::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_D1_ids[0], &iceC_Test_D1_ids[3]);
}

const ::std::string&
Test::D1::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::D1::ice_staticId()
{
    static const ::std::string typeId = "::Test::D1";
    return typeId;
}

void
Test::D1::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    B1::_iceGcVisitMembers(v_);
    if(a3)
    {
        if((::Test::upCast(a3.get())->_iceGcVisit(v_)))
        {
            a3 = 0;
        }
    }
    if(a4)
    {
        if((::Test::upCast(a4.get())->_iceGcVisit(v_)))
        {
            a4 = 0;
        }
    }
}

/// \cond STREAM
void
Test::D1::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< D1, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B1::_iceWriteImpl(ostr);
}

void
Test::D1::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< D1, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B1::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::D1> iceC_Test_D1_init("::Test::D1");
}

::Ice::ValueFactoryPtr
Test::D1::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::D1::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(D1Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = D1Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(D1::ice_staticId(), v);
    }
}
/// \endcond

Test::Inner::A::~A()
{
}

/// \cond INTERNAL
::Ice::Object* Test::Inner::upCast(A* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::Inner::A::ice_clone() const
{
    ::Ice::Object* p = new A(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_Inner_A_ids[2] =
{
    "::Ice::Object",
    "::Test::Inner::A"
};

}

bool
Test::Inner::A::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Inner_A_ids, iceC_Test_Inner_A_ids + 2, s);
}

::std::vector< ::std::string>
Test::Inner::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Inner_A_ids[0], &iceC_Test_Inner_A_ids[2]);
}

const ::std::string&
Test::Inner::A::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Inner::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::A";
    return typeId;
}

void
Test::Inner::A::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(theA)
    {
        if((::Test::upCast(theA.get())->_iceGcVisit(v_)))
        {
            theA = 0;
        }
    }
}

/// \cond STREAM
void
Test::Inner::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Inner::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Inner::A> iceC_Test_Inner_A_init("::Test::Inner::A");
}

::Ice::ValueFactoryPtr
Test::Inner::A::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Inner::A::ice_staticId());
}

/// \cond INTERNAL
void
Test::Inner::_icePatchObjectPtr(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(A::ice_staticId(), v);
    }
}
/// \endcond

Test::Inner::Sub::A::~A()
{
}

/// \cond INTERNAL
::Ice::Object* Test::Inner::Sub::upCast(A* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::Inner::Sub::A::ice_clone() const
{
    ::Ice::Object* p = new A(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_Inner_Sub_A_ids[2] =
{
    "::Ice::Object",
    "::Test::Inner::Sub::A"
};

}

bool
Test::Inner::Sub::A::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Inner_Sub_A_ids, iceC_Test_Inner_Sub_A_ids + 2, s);
}

::std::vector< ::std::string>
Test::Inner::Sub::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Inner_Sub_A_ids[0], &iceC_Test_Inner_Sub_A_ids[2]);
}

const ::std::string&
Test::Inner::Sub::A::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Inner::Sub::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Sub::A";
    return typeId;
}

void
Test::Inner::Sub::A::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(theA)
    {
        if((::Test::Inner::upCast(theA.get())->_iceGcVisit(v_)))
        {
            theA = 0;
        }
    }
}

/// \cond STREAM
void
Test::Inner::Sub::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Inner::Sub::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Inner::Sub::A> iceC_Test_Inner_Sub_A_init("::Test::Inner::Sub::A");
}

::Ice::ValueFactoryPtr
Test::Inner::Sub::A::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Inner::Sub::A::ice_staticId());
}

/// \cond INTERNAL
void
Test::Inner::Sub::_icePatchObjectPtr(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(A::ice_staticId(), v);
    }
}
/// \endcond

Test::Recursive::~Recursive()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Recursive* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::Recursive::ice_clone() const
{
    ::Ice::Object* p = new Recursive(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_Recursive_ids[2] =
{
    "::Ice::Object",
    "::Test::Recursive"
};

}

bool
Test::Recursive::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Recursive_ids, iceC_Test_Recursive_ids + 2, s);
}

::std::vector< ::std::string>
Test::Recursive::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Recursive_ids[0], &iceC_Test_Recursive_ids[2]);
}

const ::std::string&
Test::Recursive::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Recursive::ice_staticId()
{
    static const ::std::string typeId = "::Test::Recursive";
    return typeId;
}

void
Test::Recursive::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(v)
    {
        if((::Test::upCast(v.get())->_iceGcVisit(v_)))
        {
            v = 0;
        }
    }
}

/// \cond STREAM
void
Test::Recursive::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Recursive, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Recursive::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Recursive, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Recursive> iceC_Test_Recursive_init("::Test::Recursive");
}

::Ice::ValueFactoryPtr
Test::Recursive::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Recursive::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(RecursivePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = RecursivePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Recursive::ice_staticId(), v);
    }
}
/// \endcond

Test::K::~K()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(K* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::K::ice_clone() const
{
    ::Ice::Object* p = new K(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_K_ids[2] =
{
    "::Ice::Object",
    "::Test::K"
};

}

bool
Test::K::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_K_ids, iceC_Test_K_ids + 2, s);
}

::std::vector< ::std::string>
Test::K::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_K_ids[0], &iceC_Test_K_ids[2]);
}

const ::std::string&
Test::K::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::K::ice_staticId()
{
    static const ::std::string typeId = "::Test::K";
    return typeId;
}

void
Test::K::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(value)
    {
        if((value.get())->_iceGcVisit(v_))
        {
            value = 0;
        }
    }
}

/// \cond STREAM
void
Test::K::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< K, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::K::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< K, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::K> iceC_Test_K_init("::Test::K");
}

::Ice::ValueFactoryPtr
Test::K::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::K::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(KPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = KPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(K::ice_staticId(), v);
    }
}
/// \endcond

Test::L::~L()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(L* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::L::ice_clone() const
{
    ::Ice::Object* p = new L(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_L_ids[2] =
{
    "::Ice::Object",
    "::Test::L"
};

}

bool
Test::L::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_L_ids, iceC_Test_L_ids + 2, s);
}

::std::vector< ::std::string>
Test::L::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_L_ids[0], &iceC_Test_L_ids[2]);
}

const ::std::string&
Test::L::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::L::ice_staticId()
{
    static const ::std::string typeId = "::Test::L";
    return typeId;
}

/// \cond STREAM
void
Test::L::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< L, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::L::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< L, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::L> iceC_Test_L_init("::Test::L");
}

::Ice::ValueFactoryPtr
Test::L::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::L::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(LPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = LPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(L::ice_staticId(), v);
    }
}
/// \endcond

Test::M::~M()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(M* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::M::ice_clone() const
{
    ::Ice::Object* p = new M(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_M_ids[2] =
{
    "::Ice::Object",
    "::Test::M"
};

}

bool
Test::M::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_M_ids, iceC_Test_M_ids + 2, s);
}

::std::vector< ::std::string>
Test::M::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_M_ids[0], &iceC_Test_M_ids[2]);
}

const ::std::string&
Test::M::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::M::ice_staticId()
{
    static const ::std::string typeId = "::Test::M";
    return typeId;
}

void
Test::M::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    {
        for(::Test::LMap::iterator _i0 = v.begin(); _i0 != v.end(); ++_i0)
        {
            if((*_i0).second)
            {
                if((::Test::upCast((*_i0).second.get())->_iceGcVisit(v_)))
                {
                    (*_i0).second = 0;
                }
            }
        }
    }
}

/// \cond STREAM
void
Test::M::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< M, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::M::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< M, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::M> iceC_Test_M_init("::Test::M");
}

::Ice::ValueFactoryPtr
Test::M::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::M::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(MPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = MPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(M::ice_staticId(), v);
    }
}
/// \endcond

Test::F3::~F3()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(F3* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::F3::ice_clone() const
{
    ::Ice::Object* p = new F3(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_F3_ids[2] =
{
    "::Ice::Object",
    "::Test::F3"
};

}

bool
Test::F3::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_F3_ids, iceC_Test_F3_ids + 2, s);
}

::std::vector< ::std::string>
Test::F3::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_F3_ids[0], &iceC_Test_F3_ids[2]);
}

const ::std::string&
Test::F3::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::F3::ice_staticId()
{
    static const ::std::string typeId = "::Test::F3";
    return typeId;
}

void
Test::F3::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(f1)
    {
        if((::Test::upCast(f1.get())->_iceGcVisit(v_)))
        {
            f1 = 0;
        }
    }
}

/// \cond STREAM
void
Test::F3::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< F3, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::F3::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< F3, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::F3> iceC_Test_F3_init("::Test::F3");
}

::Ice::ValueFactoryPtr
Test::F3::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::F3::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(F3Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = F3Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(F3::ice_staticId(), v);
    }
}
/// \endcond

Test::Initial::~Initial()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Initial* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};

}

bool
Test::Initial::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial_ids, iceC_Test_Initial_ids + 2, s);
}

::std::vector< ::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Initial_ids[0], &iceC_Test_Initial_ids[2]);
}

const ::std::string&
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getB1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    BPtr ret = this->getB1(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getB2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    BPtr ret = this->getB2(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    CPtr ret = this->getC(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    DPtr ret = this->getD(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getE(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    EPtr ret = this->getE(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getF(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    FPtr ret = this->getF(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_setRecursive(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    RecursivePtr iceP_p;
    istr->read(iceP_p);
    istr->readPendingValues();
    inS.endReadParams();
    this->setRecursive(iceP_p, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsClassGraphDepthMax(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->supportsClassGraphDepthMax(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getMB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    BPtr ret = this->getMB(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getAMDMB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->getAMDMB_async(new IceAsync::Test::AMD_Initial_getAMDMB(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getAll(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    BPtr iceP_b1;
    BPtr iceP_b2;
    CPtr iceP_theC;
    DPtr iceP_theD;
    this->getAll(iceP_b1, iceP_b2, iceP_theC, iceP_theD, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_b1);
    ostr->write(iceP_b2);
    ostr->write(iceP_theC);
    ostr->write(iceP_theD);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getH(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    IPtr ret = this->getH(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getI(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    IPtr ret = this->getI(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getJ(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    IPtr ret = this->getJ(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getK(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    KPtr ret = this->getK(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opValue(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::ValuePtr iceP_v1;
    istr->read(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Ice::ValuePtr iceP_v2;
    ::Ice::ValuePtr ret = this->opValue(iceP_v1, iceP_v2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_v2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opValueSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ValueSeq iceP_v1;
    istr->read(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ValueSeq iceP_v2;
    ValueSeq ret = this->opValueSeq(iceP_v1, iceP_v2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_v2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opValueMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ValueMap iceP_v1;
    istr->read(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ValueMap iceP_v2;
    ValueMap ret = this->opValueMap(iceP_v1, iceP_v2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_v2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getD1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    D1Ptr iceP_d1;
    istr->read(iceP_d1);
    istr->readPendingValues();
    inS.endReadParams();
    D1Ptr ret = this->getD1(iceP_d1, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwEDerived(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->throwEDerived(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_setG(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    GPtr iceP_theG;
    istr->read(iceP_theG);
    istr->readPendingValues();
    inS.endReadParams();
    this->setG(iceP_theG, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_setI(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IPtr iceP_theI;
    istr->read(iceP_theI);
    istr->readPendingValues();
    inS.endReadParams();
    this->setI(iceP_theI, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opBaseSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    BaseSeq iceP_inSeq;
    istr->read(iceP_inSeq);
    istr->readPendingValues();
    inS.endReadParams();
    BaseSeq iceP_outSeq;
    BaseSeq ret = this->opBaseSeq(iceP_inSeq, iceP_outSeq, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_outSeq);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getCompact(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    CompactPtr ret = this->getCompact(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getInnerA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Test::Inner::APtr ret = this->getInnerA(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getInnerSubA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Test::Inner::Sub::APtr ret = this->getInnerSubA(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwInnerEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->throwInnerEx(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwInnerSubEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->throwInnerSubEx(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opM(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    MPtr iceP_v1;
    istr->read(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    MPtr iceP_v2;
    MPtr ret = this->opM(iceP_v1, iceP_v2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_v2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opF1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    F1Ptr iceP_f11;
    istr->read(iceP_f11);
    istr->readPendingValues();
    inS.endReadParams();
    F1Ptr iceP_f12;
    F1Ptr ret = this->opF1(iceP_f11, iceP_f12, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_f12);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opF2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    F2Prx iceP_f21;
    istr->read(iceP_f21);
    inS.endReadParams();
    F2Prx iceP_f22;
    F2Prx ret = this->opF2(iceP_f21, iceP_f22, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_f22);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opF3(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    F3Ptr iceP_f31;
    istr->read(iceP_f31);
    istr->readPendingValues();
    inS.endReadParams();
    F3Ptr iceP_f32;
    F3Ptr ret = this->opF3(iceP_f31, iceP_f32, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_f32);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_hasF3(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->hasF3(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Initial_all[] =
{
    "getAMDMB",
    "getAll",
    "getB1",
    "getB2",
    "getC",
    "getCompact",
    "getD",
    "getD1",
    "getE",
    "getF",
    "getH",
    "getI",
    "getInnerA",
    "getInnerSubA",
    "getJ",
    "getK",
    "getMB",
    "hasF3",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBaseSeq",
    "opF1",
    "opF2",
    "opF3",
    "opM",
    "opValue",
    "opValueMap",
    "opValueSeq",
    "setG",
    "setI",
    "setRecursive",
    "shutdown",
    "supportsClassGraphDepthMax",
    "throwEDerived",
    "throwInnerEx",
    "throwInnerSubEx"
};

}

/// \cond INTERNAL
bool
Test::Initial::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial_all, iceC_Test_Initial_all + 38, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial_all)
    {
        case 0:
        {
            return _iceD_getAMDMB(in, current);
        }
        case 1:
        {
            return _iceD_getAll(in, current);
        }
        case 2:
        {
            return _iceD_getB1(in, current);
        }
        case 3:
        {
            return _iceD_getB2(in, current);
        }
        case 4:
        {
            return _iceD_getC(in, current);
        }
        case 5:
        {
            return _iceD_getCompact(in, current);
        }
        case 6:
        {
            return _iceD_getD(in, current);
        }
        case 7:
        {
            return _iceD_getD1(in, current);
        }
        case 8:
        {
            return _iceD_getE(in, current);
        }
        case 9:
        {
            return _iceD_getF(in, current);
        }
        case 10:
        {
            return _iceD_getH(in, current);
        }
        case 11:
        {
            return _iceD_getI(in, current);
        }
        case 12:
        {
            return _iceD_getInnerA(in, current);
        }
        case 13:
        {
            return _iceD_getInnerSubA(in, current);
        }
        case 14:
        {
            return _iceD_getJ(in, current);
        }
        case 15:
        {
            return _iceD_getK(in, current);
        }
        case 16:
        {
            return _iceD_getMB(in, current);
        }
        case 17:
        {
            return _iceD_hasF3(in, current);
        }
        case 18:
        {
            return _iceD_ice_id(in, current);
        }
        case 19:
        {
            return _iceD_ice_ids(in, current);
        }
        case 20:
        {
            return _iceD_ice_isA(in, current);
        }
        case 21:
        {
            return _iceD_ice_ping(in, current);
        }
        case 22:
        {
            return _iceD_opBaseSeq(in, current);
        }
        case 23:
        {
            return _iceD_opF1(in, current);
        }
        case 24:
        {
            return _iceD_opF2(in, current);
        }
        case 25:
        {
            return _iceD_opF3(in, current);
        }
        case 26:
        {
            return _iceD_opM(in, current);
        }
        case 27:
        {
            return _iceD_opValue(in, current);
        }
        case 28:
        {
            return _iceD_opValueMap(in, current);
        }
        case 29:
        {
            return _iceD_opValueSeq(in, current);
        }
        case 30:
        {
            return _iceD_setG(in, current);
        }
        case 31:
        {
            return _iceD_setI(in, current);
        }
        case 32:
        {
            return _iceD_setRecursive(in, current);
        }
        case 33:
        {
            return _iceD_shutdown(in, current);
        }
        case 34:
        {
            return _iceD_supportsClassGraphDepthMax(in, current);
        }
        case 35:
        {
            return _iceD_throwEDerived(in, current);
        }
        case 36:
        {
            return _iceD_throwInnerEx(in, current);
        }
        case 37:
        {
            return _iceD_throwInnerSubEx(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::Initial::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Initial, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Initial::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Initial, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(InitialPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = InitialPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Initial::ice_staticId(), v);
    }
}
/// \endcond

Test::Empty::~Empty()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Empty* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::Empty::ice_clone() const
{
    ::Ice::Object* p = new Empty(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_Empty_ids[2] =
{
    "::Ice::Object",
    "::Test::Empty"
};

}

bool
Test::Empty::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Empty_ids, iceC_Test_Empty_ids + 2, s);
}

::std::vector< ::std::string>
Test::Empty::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Empty_ids[0], &iceC_Test_Empty_ids[2]);
}

const ::std::string&
Test::Empty::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Empty::ice_staticId()
{
    static const ::std::string typeId = "::Test::Empty";
    return typeId;
}

/// \cond STREAM
void
Test::Empty::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Empty, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Empty::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Empty, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Empty> iceC_Test_Empty_init("::Test::Empty");
}

::Ice::ValueFactoryPtr
Test::Empty::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Empty::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(EmptyPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = EmptyPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Empty::ice_staticId(), v);
    }
}
/// \endcond

Test::AlsoEmpty::~AlsoEmpty()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(AlsoEmpty* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::AlsoEmpty::ice_clone() const
{
    ::Ice::Object* p = new AlsoEmpty(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_AlsoEmpty_ids[2] =
{
    "::Ice::Object",
    "::Test::AlsoEmpty"
};

}

bool
Test::AlsoEmpty::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_AlsoEmpty_ids, iceC_Test_AlsoEmpty_ids + 2, s);
}

::std::vector< ::std::string>
Test::AlsoEmpty::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_AlsoEmpty_ids[0], &iceC_Test_AlsoEmpty_ids[2]);
}

const ::std::string&
Test::AlsoEmpty::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::AlsoEmpty::ice_staticId()
{
    static const ::std::string typeId = "::Test::AlsoEmpty";
    return typeId;
}

/// \cond STREAM
void
Test::AlsoEmpty::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< AlsoEmpty, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::AlsoEmpty::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< AlsoEmpty, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::AlsoEmpty> iceC_Test_AlsoEmpty_init("::Test::AlsoEmpty");
}

::Ice::ValueFactoryPtr
Test::AlsoEmpty::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::AlsoEmpty::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(AlsoEmptyPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = AlsoEmptyPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(AlsoEmpty::ice_staticId(), v);
    }
}
/// \endcond

Test::UnexpectedObjectExceptionTest::~UnexpectedObjectExceptionTest()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(UnexpectedObjectExceptionTest* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_UnexpectedObjectExceptionTest_ids[2] =
{
    "::Ice::Object",
    "::Test::UnexpectedObjectExceptionTest"
};

}

bool
Test::UnexpectedObjectExceptionTest::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_UnexpectedObjectExceptionTest_ids, iceC_Test_UnexpectedObjectExceptionTest_ids + 2, s);
}

::std::vector< ::std::string>
Test::UnexpectedObjectExceptionTest::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_UnexpectedObjectExceptionTest_ids[0], &iceC_Test_UnexpectedObjectExceptionTest_ids[2]);
}

const ::std::string&
Test::UnexpectedObjectExceptionTest::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::UnexpectedObjectExceptionTest::ice_staticId()
{
    static const ::std::string typeId = "::Test::UnexpectedObjectExceptionTest";
    return typeId;
}

/// \cond INTERNAL
bool
Test::UnexpectedObjectExceptionTest::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    EmptyPtr ret = this->op(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_UnexpectedObjectExceptionTest_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};

}

/// \cond INTERNAL
bool
Test::UnexpectedObjectExceptionTest::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_UnexpectedObjectExceptionTest_all, iceC_Test_UnexpectedObjectExceptionTest_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_UnexpectedObjectExceptionTest_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::UnexpectedObjectExceptionTest::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< UnexpectedObjectExceptionTest, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::UnexpectedObjectExceptionTest::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UnexpectedObjectExceptionTest, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(UnexpectedObjectExceptionTestPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = UnexpectedObjectExceptionTestPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(UnexpectedObjectExceptionTest::ice_staticId(), v);
    }
}
/// \endcond

Test::COneMember::~COneMember()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(COneMember* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::COneMember::ice_clone() const
{
    ::Ice::Object* p = new COneMember(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_COneMember_ids[2] =
{
    "::Ice::Object",
    "::Test::COneMember"
};

}

bool
Test::COneMember::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_COneMember_ids, iceC_Test_COneMember_ids + 2, s);
}

::std::vector< ::std::string>
Test::COneMember::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_COneMember_ids[0], &iceC_Test_COneMember_ids[2]);
}

const ::std::string&
Test::COneMember::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::COneMember::ice_staticId()
{
    static const ::std::string typeId = "::Test::COneMember";
    return typeId;
}

void
Test::COneMember::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(e)
    {
        if((::Test::upCast(e.get())->_iceGcVisit(v_)))
        {
            e = 0;
        }
    }
}

/// \cond STREAM
void
Test::COneMember::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< COneMember, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::COneMember::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< COneMember, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::COneMember> iceC_Test_COneMember_init("::Test::COneMember");
}

::Ice::ValueFactoryPtr
Test::COneMember::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::COneMember::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(COneMemberPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = COneMemberPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(COneMember::ice_staticId(), v);
    }
}
/// \endcond

Test::CTwoMembers::~CTwoMembers()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(CTwoMembers* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::CTwoMembers::ice_clone() const
{
    ::Ice::Object* p = new CTwoMembers(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_CTwoMembers_ids[2] =
{
    "::Ice::Object",
    "::Test::CTwoMembers"
};

}

bool
Test::CTwoMembers::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_CTwoMembers_ids, iceC_Test_CTwoMembers_ids + 2, s);
}

::std::vector< ::std::string>
Test::CTwoMembers::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_CTwoMembers_ids[0], &iceC_Test_CTwoMembers_ids[2]);
}

const ::std::string&
Test::CTwoMembers::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::CTwoMembers::ice_staticId()
{
    static const ::std::string typeId = "::Test::CTwoMembers";
    return typeId;
}

void
Test::CTwoMembers::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(e1)
    {
        if((::Test::upCast(e1.get())->_iceGcVisit(v_)))
        {
            e1 = 0;
        }
    }
    if(e2)
    {
        if((::Test::upCast(e2.get())->_iceGcVisit(v_)))
        {
            e2 = 0;
        }
    }
}

/// \cond STREAM
void
Test::CTwoMembers::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< CTwoMembers, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::CTwoMembers::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< CTwoMembers, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::CTwoMembers> iceC_Test_CTwoMembers_init("::Test::CTwoMembers");
}

::Ice::ValueFactoryPtr
Test::CTwoMembers::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::CTwoMembers::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(CTwoMembersPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CTwoMembersPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(CTwoMembers::ice_staticId(), v);
    }
}
/// \endcond

Test::Echo::~Echo()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Echo* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_Echo_ids[2] =
{
    "::Ice::Object",
    "::Test::Echo"
};

}

bool
Test::Echo::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Echo_ids, iceC_Test_Echo_ids + 2, s);
}

::std::vector< ::std::string>
Test::Echo::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Echo_ids[0], &iceC_Test_Echo_ids[2]);
}

const ::std::string&
Test::Echo::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Echo::ice_staticId()
{
    static const ::std::string typeId = "::Test::Echo";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Echo::_iceD_setConnection(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->setConnection(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Echo::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Echo_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setConnection",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::Echo::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Echo_all, iceC_Test_Echo_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Echo_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_setConnection(in, current);
        }
        case 5:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::Echo::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Echo, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Echo::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Echo, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(EchoPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = EchoPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Echo::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
