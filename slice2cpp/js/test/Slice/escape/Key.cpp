//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Key.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_await_case_ids[2] =
{
    "::Ice::Object",
    "::await::case"
};
const ::std::string iceC_await_case_ops[] =
{
    "catch",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_await_case_catch_name = "catch";

const ::std::string iceC_await_typeof_ids[2] =
{
    "::Ice::Object",
    "::await::typeof"
};
const ::std::string iceC_await_typeof_ops[] =
{
    "default",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_await_typeof_default_name = "default";

const ::IceInternal::DefaultValueFactoryInit<::await::_cpp_delete> iceC_await_delete_init("::await::delete");

const ::std::string iceC_await_explicit_ids[4] =
{
    "::Ice::Object",
    "::await::case",
    "::await::explicit",
    "::await::typeof"
};
const ::std::string iceC_await_explicit_ops[] =
{
    "catch",
    "default",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

const ::IceInternal::DefaultValueFactoryInit<::await::package> iceC_await_package_init("::await::package");

const ::std::string iceC_await_optionalParams_ids[2] =
{
    "::Ice::Object",
    "::await::optionalParams"
};
const ::std::string iceC_await_optionalParams_ops[] =
{
    "continue",
    "for",
    "foreach",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "in"
};
const ::std::string iceC_await_optionalParams_for_name = "for";
const ::std::string iceC_await_optionalParams_continue_name = "continue";
const ::std::string iceC_await_optionalParams_in_name = "in";
const ::std::string iceC_await_optionalParams_foreach_name = "foreach";

const ::IceInternal::DefaultUserExceptionFactoryInit<::await::fixed> iceC_await_fixed_init("::await::fixed");

const ::IceInternal::DefaultUserExceptionFactoryInit<::await::foreach> iceC_await_foreach_init("::await::foreach");

const ::IceInternal::DefaultUserExceptionFactoryInit<::await::BaseMethods> iceC_await_BaseMethods_init("::await::BaseMethods");

const ::std::string iceC_await_implicit_ids[2] =
{
    "::Ice::Object",
    "::await::implicit"
};
const ::std::string iceC_await_implicit_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "in"
};
const ::std::string iceC_await_implicit_in_name = "in";

const ::std::string iceC_await_System_Test_ids[2] =
{
    "::Ice::Object",
    "::await::System::Test"
};
const ::std::string iceC_await_System_Test_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};
const ::std::string iceC_await_System_Test_op_name = "op";

const ::std::string iceC_System_Test_ids[2] =
{
    "::Ice::Object",
    "::System::Test"
};
const ::std::string iceC_System_Test_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};
const ::std::string iceC_System_Test_op_name = "op";

}

await::fixed::~fixed()
{
}

const ::std::string&
await::fixed::ice_staticId()
{
    static const ::std::string typeId = "::await::fixed";
    return typeId;
}

await::foreach::~foreach()
{
}

const ::std::string&
await::foreach::ice_staticId()
{
    static const ::std::string typeId = "::await::foreach";
    return typeId;
}

await::BaseMethods::~BaseMethods()
{
}

const ::std::string&
await::BaseMethods::ice_staticId()
{
    static const ::std::string typeId = "::await::BaseMethods";
    return typeId;
}

bool
await::_cpp_case::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_await_case_ids, iceC_await_case_ids + 2, s);
}

::std::vector<::std::string>
await::_cpp_case::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_await_case_ids[0], &iceC_await_case_ids[2]);
}

::std::string
await::_cpp_case::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
await::_cpp_case::ice_staticId()
{
    static const ::std::string typeId = "::await::case";
    return typeId;
}

/// \cond INTERNAL
bool
await::_cpp_case::_iceD_catch(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_checked;
    istr->readAll(iceP_checked);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_continue)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_continue);
        inA->endWriteParams();
        inA->completed();
    };
    this->catchAsync(iceP_checked, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
await::_cpp_case::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_await_case_ops, iceC_await_case_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_await_case_ops)
    {
        case 0:
        {
            return _iceD_catch(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
await::typeof::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_await_typeof_ids, iceC_await_typeof_ids + 2, s);
}

::std::vector<::std::string>
await::typeof::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_await_typeof_ids[0], &iceC_await_typeof_ids[2]);
}

::std::string
await::typeof::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
await::typeof::ice_staticId()
{
    static const ::std::string typeId = "::await::typeof";
    return typeId;
}

/// \cond INTERNAL
bool
await::typeof::_iceD_default(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_default(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
await::typeof::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_await_typeof_ops, iceC_await_typeof_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_await_typeof_ops)
    {
        case 0:
        {
            return _iceD_default(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
await::_cpp_explicit::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_await_explicit_ids, iceC_await_explicit_ids + 4, s);
}

::std::vector<::std::string>
await::_cpp_explicit::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_await_explicit_ids[0], &iceC_await_explicit_ids[4]);
}

::std::string
await::_cpp_explicit::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
await::_cpp_explicit::ice_staticId()
{
    static const ::std::string typeId = "::await::explicit";
    return typeId;
}

/// \cond INTERNAL
bool
await::_cpp_explicit::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_await_explicit_ops, iceC_await_explicit_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_await_explicit_ops)
    {
        case 0:
        {
            return _iceD_catch(in, current);
        }
        case 1:
        {
            return _iceD_default(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
await::optionalParams::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_await_optionalParams_ids, iceC_await_optionalParams_ids + 2, s);
}

::std::vector<::std::string>
await::optionalParams::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_await_optionalParams_ids[0], &iceC_await_optionalParams_ids[2]);
}

::std::string
await::optionalParams::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
await::optionalParams::ice_staticId()
{
    static const ::std::string typeId = "::await::optionalParams";
    return typeId;
}

/// \cond INTERNAL
bool
await::optionalParams::_iceD_for(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<var> iceP_goto;
    std::optional<::std::shared_ptr<explicitPrx>> iceP_if;
    std::optional<_cpp_while> iceP_internal;
    std::optional<::std::string> iceP_namespace;
    std::optional<::std::shared_ptr<explicitPrx>> iceP_null;
    istr->readAll({2, 3, 5, 7, 8}, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null);
    inS.endReadParams();
    std::optional<_cpp_break> ret = this->_cpp_for(iceP_goto, ::std::move(iceP_if), ::std::move(iceP_internal), ::std::move(iceP_namespace), ::std::move(iceP_null), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1}, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
await::optionalParams::_iceD_continue(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<var> iceP_goto;
    std::optional<::std::shared_ptr<explicitPrx>> iceP_if;
    std::optional<_cpp_while> iceP_internal;
    std::optional<::std::string> iceP_namespace;
    std::optional<::std::shared_ptr<explicitPrx>> iceP_null;
    istr->readAll({2, 3, 5, 7, 8}, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<_cpp_break>& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1}, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->continueAsync(iceP_goto, ::std::move(iceP_if), ::std::move(iceP_internal), ::std::move(iceP_namespace), ::std::move(iceP_null), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
await::optionalParams::_iceD_in(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    std::optional<var> iceP_goto;
    std::optional<::std::shared_ptr<explicitPrx>> iceP_if;
    std::optional<_cpp_while> iceP_internal;
    std::optional<::std::string> iceP_namespace;
    std::optional<::std::shared_ptr<explicitPrx>> iceP_null;
    std::optional<_cpp_break> ret = this->in(iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 2, 3, 5, 7, 8}, ret, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
await::optionalParams::_iceD_foreach(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<_cpp_break>& ret, const std::optional<var>& iceP_goto, const std::optional<::std::shared_ptr<explicitPrx>>& iceP_if, const std::optional<_cpp_while>& iceP_internal, const std::optional<::std::string>& iceP_namespace, const std::optional<::std::shared_ptr<explicitPrx>>& iceP_null)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 2, 3, 5, 7, 8}, ret, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null);
        inA->endWriteParams();
        inA->completed();
    };
    this->foreachAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
await::optionalParams::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_await_optionalParams_ops, iceC_await_optionalParams_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_await_optionalParams_ops)
    {
        case 0:
        {
            return _iceD_continue(in, current);
        }
        case 1:
        {
            return _iceD_for(in, current);
        }
        case 2:
        {
            return _iceD_foreach(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_in(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
await::implicit::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_await_implicit_ids, iceC_await_implicit_ids + 2, s);
}

::std::vector<::std::string>
await::implicit::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_await_implicit_ids[0], &iceC_await_implicit_ids[2]);
}

::std::string
await::implicit::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
await::implicit::ice_staticId()
{
    static const ::std::string typeId = "::await::implicit";
    return typeId;
}

/// \cond INTERNAL
bool
await::implicit::_iceD_in(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    _cpp_break iceP_internal;
    ::std::shared_ptr<delete> iceP_is;
    ::std::shared_ptr<explicitPrx> iceP_lock;
    ::std::shared_ptr<casePrx> iceP_namespace;
    ::std::shared_ptr<typeofPrx> iceP_new;
    ::std::shared_ptr<delete> iceP_null;
    ::std::shared_ptr<explicitPrx> iceP_operator;
    int iceP_override;
    int iceP_params;
    int iceP_private;
    istr->readAll(iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_operator, iceP_override, iceP_params, iceP_private);
    istr->readPendingValues();
    inS.endReadParams();
    var ret = this->in(::std::move(iceP_internal), ::std::move(iceP_is), ::std::move(iceP_lock), ::std::move(iceP_namespace), ::std::move(iceP_new), ::std::move(iceP_null), ::std::move(iceP_operator), iceP_override, iceP_params, iceP_private, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
await::implicit::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_await_implicit_ops, iceC_await_implicit_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_await_implicit_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_in(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
await::System::Test::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_await_System_Test_ids, iceC_await_System_Test_ids + 2, s);
}

::std::vector<::std::string>
await::System::Test::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_await_System_Test_ids[0], &iceC_await_System_Test_ids[2]);
}

::std::string
await::System::Test::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
await::System::Test::ice_staticId()
{
    static const ::std::string typeId = "::await::System::Test";
    return typeId;
}

/// \cond INTERNAL
bool
await::System::Test::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
await::System::Test::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_await_System_Test_ops, iceC_await_System_Test_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_await_System_Test_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
System::Test::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_System_Test_ids, iceC_System_Test_ids + 2, s);
}

::std::vector<::std::string>
System::Test::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_System_Test_ids[0], &iceC_System_Test_ids[2]);
}

::std::string
System::Test::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
System::Test::ice_staticId()
{
    static const ::std::string typeId = "::System::Test";
    return typeId;
}

/// \cond INTERNAL
bool
System::Test::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
System::Test::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_System_Test_ops, iceC_System_Test_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_System_Test_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

await::_cpp_delete::~_cpp_delete()
{
}

const ::std::string&
await::_cpp_delete::ice_staticId()
{
    static const ::std::string typeId = "::await::delete";
    return typeId;
}

await::package::~package()
{
}

const ::std::string&
await::package::ice_staticId()
{
    static const ::std::string typeId = "::await::package";
    return typeId;
}

/// \cond INTERNAL
void
await::casePrx::_iceI_catch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_checked, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_await_case_catch_name);
    outAsync->invoke(iceC_await_case_catch_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_checked);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
await::casePrx::_newInstance() const
{
    return ::IceInternal::createProxy<casePrx>();
}
/// \endcond

const ::std::string&
await::casePrx::ice_staticId()
{
    return _cpp_case::ice_staticId();
}

/// \cond INTERNAL
void
await::typeofPrx::_iceI_default(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_await_typeof_default_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
await::typeofPrx::_newInstance() const
{
    return ::IceInternal::createProxy<typeofPrx>();
}
/// \endcond

const ::std::string&
await::typeofPrx::ice_staticId()
{
    return typeof::ice_staticId();
}

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
await::explicitPrx::_newInstance() const
{
    return ::IceInternal::createProxy<explicitPrx>();
}
/// \endcond

const ::std::string&
await::explicitPrx::ice_staticId()
{
    return _cpp_explicit::ice_staticId();
}

/// \cond INTERNAL
void
await::optionalParamsPrx::_iceI_for(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::await::_cpp_break>>>& outAsync, const std::optional<var>& iceP_goto, const std::optional<::std::shared_ptr<explicitPrx>>& iceP_if, const std::optional<_cpp_while>& iceP_internal, const std::optional<::std::string>& iceP_namespace, const std::optional<::std::shared_ptr<explicitPrx>>& iceP_null, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_await_optionalParams_for_name);
    outAsync->invoke(iceC_await_optionalParams_for_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2, 3, 5, 7, 8}, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            std::optional<_cpp_break> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
await::optionalParamsPrx::_iceI_continue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::await::_cpp_break>>>& outAsync, const std::optional<var>& iceP_goto, const std::optional<::std::shared_ptr<explicitPrx>>& iceP_if, const std::optional<_cpp_while>& iceP_internal, const std::optional<::std::string>& iceP_namespace, const std::optional<::std::shared_ptr<explicitPrx>>& iceP_null, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_await_optionalParams_continue_name);
    outAsync->invoke(iceC_await_optionalParams_continue_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2, 3, 5, 7, 8}, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            std::optional<_cpp_break> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
await::optionalParamsPrx::_iceI_in(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<optionalParams::InResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_await_optionalParams_in_name);
    outAsync->invoke(iceC_await_optionalParams_in_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            optionalParams::InResult v;
            istr->readAll({1, 2, 3, 5, 7, 8}, v.returnValue, v._cpp_goto, v._cpp_if, v.internal, v._cpp_namespace, v.null);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
await::optionalParamsPrx::_iceI_foreach(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<optionalParams::ForeachResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_await_optionalParams_foreach_name);
    outAsync->invoke(iceC_await_optionalParams_foreach_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            optionalParams::ForeachResult v;
            istr->readAll({1, 2, 3, 5, 7, 8}, v.returnValue, v._cpp_goto, v._cpp_if, v.internal, v._cpp_namespace, v.null);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
await::optionalParamsPrx::_newInstance() const
{
    return ::IceInternal::createProxy<optionalParamsPrx>();
}
/// \endcond

const ::std::string&
await::optionalParamsPrx::ice_staticId()
{
    return optionalParams::ice_staticId();
}

/// \cond INTERNAL
void
await::implicitPrx::_iceI_in(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::await::var>>& outAsync, const _cpp_break& iceP_internal, const ::std::shared_ptr<_cpp_delete>& iceP_is, const ::std::shared_ptr<explicitPrx>& iceP_lock, const ::std::shared_ptr<casePrx>& iceP_namespace, const ::std::shared_ptr<typeofPrx>& iceP_new, const ::std::shared_ptr<_cpp_delete>& iceP_null, const ::std::shared_ptr<explicitPrx>& iceP_operator, int iceP_override, int iceP_params, int iceP_private, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_await_implicit_in_name);
    outAsync->invoke(iceC_await_implicit_in_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_operator, iceP_override, iceP_params, iceP_private);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const foreach&)
            {
                throw;
            }
            catch(const fixed&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
await::implicitPrx::_newInstance() const
{
    return ::IceInternal::createProxy<implicitPrx>();
}
/// \endcond

const ::std::string&
await::implicitPrx::ice_staticId()
{
    return implicit::ice_staticId();
}

/// \cond INTERNAL
void
await::System::TestPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_await_System_Test_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
await::System::TestPrx::_newInstance() const
{
    return ::IceInternal::createProxy<TestPrx>();
}
/// \endcond

const ::std::string&
await::System::TestPrx::ice_staticId()
{
    return Test::ice_staticId();
}

/// \cond INTERNAL
void
System::TestPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_System_Test_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
System::TestPrx::_newInstance() const
{
    return ::IceInternal::createProxy<TestPrx>();
}
/// \endcond

const ::std::string&
System::TestPrx::ice_staticId()
{
    return Test::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_await_case_catch_name = "catch";

const ::std::string iceC_await_typeof_default_name = "default";

const ::IceInternal::DefaultValueFactoryInit<::await::_cpp_delete> iceC_await_delete_init("::await::delete");

const ::IceInternal::DefaultValueFactoryInit<::await::package> iceC_await_package_init("::await::package");

const ::std::string iceC_await_optionalParams_for_name = "for";

const ::std::string iceC_await_optionalParams_continue_name = "continue";

const ::std::string iceC_await_optionalParams_in_name = "in";

const ::std::string iceC_await_optionalParams_foreach_name = "foreach";

const ::std::string iceC_await_implicit_in_name = "in";

namespace
{

const ::std::string iceC_await_System_Test_op_name = "op";

}

}

namespace
{

const ::std::string iceC_System_Test_op_name = "op";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::await::fixed> iceC_await_fixed_init("::await::fixed");

}

await::fixed::fixed(::Ice::Int _cpp_for) :
    ::Ice::UserException(),
    _cpp_for(_cpp_for)
{
}
await::fixed::~fixed()
{
}

::std::string
await::fixed::ice_id() const
{
    return "::await::fixed";
}

await::fixed*
await::fixed::ice_clone() const
{
    return new fixed(*this);
}

void
await::fixed::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
await::fixed::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::await::fixed", -1, true);
    ::Ice::StreamWriter< fixed, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
await::fixed::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< fixed, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::await::foreach> iceC_await_foreach_init("::await::foreach");

}

await::foreach::foreach(::Ice::Int _cpp_for, ::Ice::Int _cpp_goto, ::Ice::Int _cpp_if) :
    fixed(_cpp_for),
    _cpp_goto(_cpp_goto),
    _cpp_if(_cpp_if)
{
}
await::foreach::~foreach()
{
}

::std::string
await::foreach::ice_id() const
{
    return "::await::foreach";
}

await::foreach*
await::foreach::ice_clone() const
{
    return new foreach(*this);
}

void
await::foreach::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
await::foreach::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::await::foreach", -1, false);
    ::Ice::StreamWriter< foreach, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    fixed::_writeImpl(ostr);
}

void
await::foreach::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< foreach, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    fixed::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::await::BaseMethods> iceC_await_BaseMethods_init("::await::BaseMethods");

}

await::BaseMethods::BaseMethods(::Ice::Int Data, ::Ice::Int HelpLink, ::Ice::Int InnerException, ::Ice::Int Message, ::Ice::Int Source, ::Ice::Int StackTrace, ::Ice::Int TargetSite, ::Ice::Int HResult, ::Ice::Int Equals, ::Ice::Int GetBaseException, ::Ice::Int GetHashCode, ::Ice::Int GetObjectData, ::Ice::Int GetType, ::Ice::Int ReferenceEquals, ::Ice::Int ToString) :
    ::Ice::UserException(),
    Data(Data),
    HelpLink(HelpLink),
    InnerException(InnerException),
    Message(Message),
    Source(Source),
    StackTrace(StackTrace),
    TargetSite(TargetSite),
    HResult(HResult),
    Equals(Equals),
    GetBaseException(GetBaseException),
    GetHashCode(GetHashCode),
    GetObjectData(GetObjectData),
    GetType(GetType),
    ReferenceEquals(ReferenceEquals),
    ToString(ToString)
{
}
await::BaseMethods::~BaseMethods()
{
}

::std::string
await::BaseMethods::ice_id() const
{
    return "::await::BaseMethods";
}

await::BaseMethods*
await::BaseMethods::ice_clone() const
{
    return new BaseMethods(*this);
}

void
await::BaseMethods::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
await::BaseMethods::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::await::BaseMethods", -1, true);
    ::Ice::StreamWriter< BaseMethods, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
await::BaseMethods::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< BaseMethods, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

await::AMD_case_catch::~AMD_case_catch()
{
}

await::AMD_optionalParams_continue::~AMD_optionalParams_continue()
{
}

await::AMD_optionalParams_foreach::~AMD_optionalParams_foreach()
{
}

/// \cond INTERNAL
IceAsync::await::AMD_case_catch::AMD_case_catch(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::await::AMD_case_catch::ice_response(::Ice::Int _cpp_continue)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(_cpp_continue);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::await::AMD_optionalParams_continue::AMD_optionalParams_continue(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::await::AMD_optionalParams_continue::ice_response(const std::optional< ::await::_cpp_break>& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::await::AMD_optionalParams_foreach::AMD_optionalParams_foreach(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::await::AMD_optionalParams_foreach::ice_response(const std::optional< ::await::_cpp_break>& ret, const std::optional< ::await::var>& _cpp_goto, const std::optional< ::await::explicitPrx>& _cpp_if, const std::optional< ::await::_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace, const std::optional< ::await::explicitPrx>& null)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(2, _cpp_goto);
    ostr->write(3, _cpp_if);
    ostr->write(5, internal);
    ostr->write(7, _cpp_namespace);
    ostr->write(8, null);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::await::upCast(_cpp_case* p) { return p; }

void
::IceProxy::await::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< _cpp_case>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new _cpp_case;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::await::_cpp_case::_iceI_begin_catch(::Ice::Int iceP_checked, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_await_case_catch_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_await_case_catch_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_await_case_catch_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_checked);
        result->endWriteParams();
        result->invoke(iceC_await_case_catch_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::await::_cpp_case::end_catch(::Ice::Int& iceP_continue, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_await_case_catch_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_continue);
    result->_endReadParams();
}

void IceProxy::await::_cpp_case::_iceI_end_catch(::Ice::Int& iceP_continue, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_await_case_catch_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_continue);
    result->_endReadParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::await::_cpp_case::_newInstance() const
{
    return new _cpp_case;
}
/// \endcond

const ::std::string&
IceProxy::await::_cpp_case::ice_staticId()
{
    return ::await::_cpp_case::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::await::upCast(typeof* p) { return p; }

void
::IceProxy::await::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< typeof>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new typeof;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::await::typeof::_iceI_begin_default(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_await_typeof_default_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_await_typeof_default_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_await_typeof_default_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::await::typeof::end_default(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_await_typeof_default_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::await::typeof::_newInstance() const
{
    return new typeof;
}
/// \endcond

const ::std::string&
IceProxy::await::typeof::ice_staticId()
{
    return ::await::typeof::ice_staticId();
}

::IceProxy::await::_explicitBase::~_explicitBase()
{
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::await::upCast(_cpp_explicit* p) { return p; }

void
::IceProxy::await::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< _cpp_explicit>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new _cpp_explicit;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::await::_cpp_explicit::_newInstance() const
{
    return new _cpp_explicit;
}
/// \endcond

const ::std::string&
IceProxy::await::_cpp_explicit::ice_staticId()
{
    return ::await::_cpp_explicit::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::await::upCast(optionalParams* p) { return p; }

void
::IceProxy::await::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< optionalParams>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new optionalParams;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::await::optionalParams::_iceI_begin_for(const std::optional< ::await::var>& iceP_goto, const std::optional< ::await::explicitPrx>& iceP_if, const std::optional< ::await::_cpp_while>& iceP_internal, const std::optional< ::std::string>& iceP_namespace, const std::optional< ::await::explicitPrx>& iceP_null, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_await_optionalParams_for_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_await_optionalParams_for_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_await_optionalParams_for_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_goto);
        ostr->write(3, iceP_if);
        ostr->write(5, iceP_internal);
        ostr->write(7, iceP_namespace);
        ostr->write(8, iceP_null);
        result->endWriteParams();
        result->invoke(iceC_await_optionalParams_for_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

std::optional< ::await::_cpp_break>
IceProxy::await::optionalParams::end_for(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_await_optionalParams_for_name);
    std::optional< ::await::_cpp_break> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::await::optionalParams::_iceI_begin_continue(const std::optional< ::await::var>& iceP_goto, const std::optional< ::await::explicitPrx>& iceP_if, const std::optional< ::await::_cpp_while>& iceP_internal, const std::optional< ::std::string>& iceP_namespace, const std::optional< ::await::explicitPrx>& iceP_null, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_await_optionalParams_continue_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_await_optionalParams_continue_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_await_optionalParams_continue_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_goto);
        ostr->write(3, iceP_if);
        ostr->write(5, iceP_internal);
        ostr->write(7, iceP_namespace);
        ostr->write(8, iceP_null);
        result->endWriteParams();
        result->invoke(iceC_await_optionalParams_continue_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

std::optional< ::await::_cpp_break>
IceProxy::await::optionalParams::end_continue(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_await_optionalParams_continue_name);
    std::optional< ::await::_cpp_break> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::await::optionalParams::_iceI_begin_in(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_await_optionalParams_in_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_await_optionalParams_in_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_await_optionalParams_in_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_await_optionalParams_in_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

std::optional< ::await::_cpp_break>
IceProxy::await::optionalParams::end_in(std::optional< ::await::var>& iceP_goto, std::optional< ::await::explicitPrx>& iceP_if, std::optional< ::await::_cpp_while>& iceP_internal, std::optional< ::std::string>& iceP_namespace, std::optional< ::await::explicitPrx>& iceP_null, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_await_optionalParams_in_name);
    std::optional< ::await::_cpp_break> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(2, iceP_goto);
    istr->read(3, iceP_if);
    istr->read(5, iceP_internal);
    istr->read(7, iceP_namespace);
    istr->read(8, iceP_null);
    result->_endReadParams();
    return ret;
}

void IceProxy::await::optionalParams::_iceI_end_in(std::optional< ::await::var>& iceP_goto, std::optional< ::await::explicitPrx>& iceP_if, std::optional< ::await::_cpp_while>& iceP_internal, std::optional< ::std::string>& iceP_namespace, std::optional< ::await::explicitPrx>& iceP_null, std::optional< ::await::_cpp_break>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_await_optionalParams_in_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(2, iceP_goto);
    istr->read(3, iceP_if);
    istr->read(5, iceP_internal);
    istr->read(7, iceP_namespace);
    istr->read(8, iceP_null);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::await::optionalParams::_iceI_begin_foreach(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_await_optionalParams_foreach_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_await_optionalParams_foreach_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_await_optionalParams_foreach_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_await_optionalParams_foreach_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

std::optional< ::await::_cpp_break>
IceProxy::await::optionalParams::end_foreach(std::optional< ::await::var>& iceP_goto, std::optional< ::await::explicitPrx>& iceP_if, std::optional< ::await::_cpp_while>& iceP_internal, std::optional< ::std::string>& iceP_namespace, std::optional< ::await::explicitPrx>& iceP_null, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_await_optionalParams_foreach_name);
    std::optional< ::await::_cpp_break> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(2, iceP_goto);
    istr->read(3, iceP_if);
    istr->read(5, iceP_internal);
    istr->read(7, iceP_namespace);
    istr->read(8, iceP_null);
    result->_endReadParams();
    return ret;
}

void IceProxy::await::optionalParams::_iceI_end_foreach(std::optional< ::await::var>& iceP_goto, std::optional< ::await::explicitPrx>& iceP_if, std::optional< ::await::_cpp_while>& iceP_internal, std::optional< ::std::string>& iceP_namespace, std::optional< ::await::explicitPrx>& iceP_null, std::optional< ::await::_cpp_break>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_await_optionalParams_foreach_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(2, iceP_goto);
    istr->read(3, iceP_if);
    istr->read(5, iceP_internal);
    istr->read(7, iceP_namespace);
    istr->read(8, iceP_null);
    result->_endReadParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::await::optionalParams::_newInstance() const
{
    return new optionalParams;
}
/// \endcond

const ::std::string&
IceProxy::await::optionalParams::ice_staticId()
{
    return ::await::optionalParams::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::await::upCast(implicit* p) { return p; }

void
::IceProxy::await::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< implicit>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new implicit;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::await::implicit::_iceI_begin_in(const ::await::_cpp_break& iceP_internal, const ::await::deletePtr& iceP_is, const ::await::explicitPrx& iceP_lock, const ::await::casePrx& iceP_namespace, const ::await::typeofPrx& iceP_new, const ::await::deletePtr& iceP_null, const ::await::explicitPrx& iceP_operator, ::Ice::Int iceP_override, ::Ice::Int iceP_params, ::Ice::Int iceP_private, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_await_implicit_in_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_await_implicit_in_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_await_implicit_in_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_internal);
        ostr->write(iceP_is);
        ostr->write(iceP_lock);
        ostr->write(iceP_namespace);
        ostr->write(iceP_new);
        ostr->write(iceP_null);
        ostr->write(iceP_operator);
        ostr->write(iceP_override);
        ostr->write(iceP_params);
        ostr->write(iceP_private);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_await_implicit_in_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::await::var
IceProxy::await::implicit::end_in(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_await_implicit_in_name);
    ::await::var ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::await::foreach&)
        {
            throw;
        }
        catch(const ::await::fixed&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::await::implicit::_newInstance() const
{
    return new implicit;
}
/// \endcond

const ::std::string&
IceProxy::await::implicit::ice_staticId()
{
    return ::await::implicit::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::await::System::upCast(Test* p) { return p; }

void
::IceProxy::await::System::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Test>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Test;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::await::System::Test::_iceI_begin_op(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_await_System_Test_op_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_await_System_Test_op_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_await_System_Test_op_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::await::System::Test::end_op(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_await_System_Test_op_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::await::System::Test::_newInstance() const
{
    return new Test;
}
/// \endcond

const ::std::string&
IceProxy::await::System::Test::ice_staticId()
{
    return ::await::System::Test::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::System::upCast(Test* p) { return p; }

void
::IceProxy::System::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Test>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Test;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::System::Test::_iceI_begin_op(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_System_Test_op_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_System_Test_op_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_System_Test_op_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::System::Test::end_op(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_System_Test_op_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::System::Test::_newInstance() const
{
    return new Test;
}
/// \endcond

const ::std::string&
IceProxy::System::Test::ice_staticId()
{
    return ::System::Test::ice_staticId();
}

await::_cpp_case::~_cpp_case()
{
}

namespace
{
const ::std::string iceC_await_case_ids[2] =
{
    "::Ice::Object",
    "::await::case"
};

}

bool
await::_cpp_case::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_await_case_ids, iceC_await_case_ids + 2, s);
}

::std::vector< ::std::string>
await::_cpp_case::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_await_case_ids[0], &iceC_await_case_ids[2]);
}

::std::string
await::_cpp_case::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
await::_cpp_case::ice_staticId()
{
    static const ::std::string typeId = "::await::case";
    return typeId;
}

/// \cond INTERNAL
bool
await::_cpp_case::_iceD_catch(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_checked;
    istr->read(iceP_checked);
    inS.endReadParams();
    this->catch_async(new IceAsync::await::AMD_case_catch(inS), iceP_checked, current);
    return false;
}
/// \endcond

namespace
{
const ::std::string iceC_await_case_all[] =
{
    "catch",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
await::_cpp_case::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_await_case_all, iceC_await_case_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_await_case_all)
    {
        case 0:
        {
            return _iceD_catch(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

await::typeof::~typeof()
{
}

namespace
{
const ::std::string iceC_await_typeof_ids[2] =
{
    "::Ice::Object",
    "::await::typeof"
};

}

bool
await::typeof::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_await_typeof_ids, iceC_await_typeof_ids + 2, s);
}

::std::vector< ::std::string>
await::typeof::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_await_typeof_ids[0], &iceC_await_typeof_ids[2]);
}

::std::string
await::typeof::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
await::typeof::ice_staticId()
{
    static const ::std::string typeId = "::await::typeof";
    return typeId;
}

/// \cond INTERNAL
bool
await::typeof::_iceD_default(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_default(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_await_typeof_all[] =
{
    "default",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
await::typeof::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_await_typeof_all, iceC_await_typeof_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_await_typeof_all)
    {
        case 0:
        {
            return _iceD_default(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

await::_cpp_explicit::~_cpp_explicit()
{
}

namespace
{
const ::std::string iceC_await_explicit_ids[4] =
{
    "::Ice::Object",
    "::await::case",
    "::await::explicit",
    "::await::typeof"
};

}

bool
await::_cpp_explicit::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_await_explicit_ids, iceC_await_explicit_ids + 4, s);
}

::std::vector< ::std::string>
await::_cpp_explicit::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_await_explicit_ids[0], &iceC_await_explicit_ids[4]);
}

::std::string
await::_cpp_explicit::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
await::_cpp_explicit::ice_staticId()
{
    static const ::std::string typeId = "::await::explicit";
    return typeId;
}

namespace
{
const ::std::string iceC_await_explicit_all[] =
{
    "catch",
    "default",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
await::_cpp_explicit::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_await_explicit_all, iceC_await_explicit_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_await_explicit_all)
    {
        case 0:
        {
            return _iceD_catch(in, current);
        }
        case 1:
        {
            return _iceD_default(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

await::optionalParams::~optionalParams()
{
}

namespace
{
const ::std::string iceC_await_optionalParams_ids[2] =
{
    "::Ice::Object",
    "::await::optionalParams"
};

}

bool
await::optionalParams::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_await_optionalParams_ids, iceC_await_optionalParams_ids + 2, s);
}

::std::vector< ::std::string>
await::optionalParams::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_await_optionalParams_ids[0], &iceC_await_optionalParams_ids[2]);
}

::std::string
await::optionalParams::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
await::optionalParams::ice_staticId()
{
    static const ::std::string typeId = "::await::optionalParams";
    return typeId;
}

/// \cond INTERNAL
bool
await::optionalParams::_iceD_for(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    std::optional<var> iceP_goto;
    std::optional<explicitPrx> iceP_if;
    std::optional<_cpp_while> iceP_internal;
    std::optional< ::std::string> iceP_namespace;
    std::optional<explicitPrx> iceP_null;
    istr->read(2, iceP_goto);
    istr->read(3, iceP_if);
    istr->read(5, iceP_internal);
    istr->read(7, iceP_namespace);
    istr->read(8, iceP_null);
    inS.endReadParams();
    std::optional<_cpp_break> ret = this->_cpp_for(iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(1, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
await::optionalParams::_iceD_continue(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    std::optional<var> iceP_goto;
    std::optional<explicitPrx> iceP_if;
    std::optional<_cpp_while> iceP_internal;
    std::optional< ::std::string> iceP_namespace;
    std::optional<explicitPrx> iceP_null;
    istr->read(2, iceP_goto);
    istr->read(3, iceP_if);
    istr->read(5, iceP_internal);
    istr->read(7, iceP_namespace);
    istr->read(8, iceP_null);
    inS.endReadParams();
    this->continue_async(new IceAsync::await::AMD_optionalParams_continue(inS), iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
await::optionalParams::_iceD_in(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    std::optional<var> iceP_goto;
    std::optional<explicitPrx> iceP_if;
    std::optional<_cpp_while> iceP_internal;
    std::optional< ::std::string> iceP_namespace;
    std::optional<explicitPrx> iceP_null;
    std::optional<_cpp_break> ret = this->in(iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(1, ret);
    ostr->write(2, iceP_goto);
    ostr->write(3, iceP_if);
    ostr->write(5, iceP_internal);
    ostr->write(7, iceP_namespace);
    ostr->write(8, iceP_null);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
await::optionalParams::_iceD_foreach(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->foreach_async(new IceAsync::await::AMD_optionalParams_foreach(inS), current);
    return false;
}
/// \endcond

namespace
{
const ::std::string iceC_await_optionalParams_all[] =
{
    "continue",
    "for",
    "foreach",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "in"
};

}

/// \cond INTERNAL
bool
await::optionalParams::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_await_optionalParams_all, iceC_await_optionalParams_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_await_optionalParams_all)
    {
        case 0:
        {
            return _iceD_continue(in, current);
        }
        case 1:
        {
            return _iceD_for(in, current);
        }
        case 2:
        {
            return _iceD_foreach(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_in(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

await::implicit::~implicit()
{
}

namespace
{
const ::std::string iceC_await_implicit_ids[2] =
{
    "::Ice::Object",
    "::await::implicit"
};

}

bool
await::implicit::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_await_implicit_ids, iceC_await_implicit_ids + 2, s);
}

::std::vector< ::std::string>
await::implicit::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_await_implicit_ids[0], &iceC_await_implicit_ids[2]);
}

::std::string
await::implicit::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
await::implicit::ice_staticId()
{
    static const ::std::string typeId = "::await::implicit";
    return typeId;
}

/// \cond INTERNAL
bool
await::implicit::_iceD_in(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    _cpp_break iceP_internal;
    deletePtr iceP_is;
    explicitPrx iceP_lock;
    casePrx iceP_namespace;
    typeofPrx iceP_new;
    deletePtr iceP_null;
    explicitPrx iceP_operator;
    ::Ice::Int iceP_override;
    ::Ice::Int iceP_params;
    ::Ice::Int iceP_private;
    istr->read(iceP_internal);
    istr->read(iceP_is);
    istr->read(iceP_lock);
    istr->read(iceP_namespace);
    istr->read(iceP_new);
    istr->read(iceP_null);
    istr->read(iceP_operator);
    istr->read(iceP_override);
    istr->read(iceP_params);
    istr->read(iceP_private);
    istr->readPendingValues();
    inS.endReadParams();
    var ret = this->in(iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_operator, iceP_override, iceP_params, iceP_private, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_await_implicit_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "in"
};

}

/// \cond INTERNAL
bool
await::implicit::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_await_implicit_all, iceC_await_implicit_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_await_implicit_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_in(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

await::System::Test::~Test()
{
}

namespace
{
const ::std::string iceC_await_System_Test_ids[2] =
{
    "::Ice::Object",
    "::await::System::Test"
};

}

bool
await::System::Test::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_await_System_Test_ids, iceC_await_System_Test_ids + 2, s);
}

::std::vector< ::std::string>
await::System::Test::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_await_System_Test_ids[0], &iceC_await_System_Test_ids[2]);
}

::std::string
await::System::Test::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
await::System::Test::ice_staticId()
{
    static const ::std::string typeId = "::await::System::Test";
    return typeId;
}

/// \cond INTERNAL
bool
await::System::Test::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_await_System_Test_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};

}

/// \cond INTERNAL
bool
await::System::Test::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_await_System_Test_all, iceC_await_System_Test_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_await_System_Test_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

System::Test::~Test()
{
}

namespace
{
const ::std::string iceC_System_Test_ids[2] =
{
    "::Ice::Object",
    "::System::Test"
};

}

bool
System::Test::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_System_Test_ids, iceC_System_Test_ids + 2, s);
}

::std::vector< ::std::string>
System::Test::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_System_Test_ids[0], &iceC_System_Test_ids[2]);
}

::std::string
System::Test::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
System::Test::ice_staticId()
{
    static const ::std::string typeId = "::System::Test";
    return typeId;
}

/// \cond INTERNAL
bool
System::Test::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_System_Test_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};

}

/// \cond INTERNAL
bool
System::Test::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_System_Test_all, iceC_System_Test_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_System_Test_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

await::_cpp_delete::~_cpp_delete()
{
}

const ::std::string&
await::_cpp_delete::ice_staticId()
{
    static const ::std::string typeId = "::await::delete";
    return typeId;
}

await::package::~package()
{
}

const ::std::string&
await::package::ice_staticId()
{
    static const ::std::string typeId = "::await::package";
    return typeId;
}

namespace Ice
{
}

#endif
