// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Key.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::await::delete> iceC_await_delete_init("::await::delete");
    const ::IceInternal::DefaultValueFactoryInit<::await::package> iceC_await_package_init("::await::package");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::await::fixed> iceC_await_fixed_init("::await::fixed");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::await::foreach> iceC_await_foreach_init("::await::foreach");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::await::BaseMethods> iceC_await_BaseMethods_init("::await::BaseMethods");
}

void
await::casePrx::catch(::std::int32_t iceP_checked, ::std::int32_t& iceP_continue, const ::Ice::Context& context) const
{
    iceP_continue = ::IceInternal::makePromiseOutgoing<::std::int32_t>(true, this, &casePrx::_iceI_catch, iceP_checked, context).get();
}

::std::future<::std::int32_t>
await::casePrx::catchAsync(::std::int32_t iceP_checked, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::int32_t>(false, this, &casePrx::_iceI_catch, iceP_checked, context);
}

::std::function<void()>
await::casePrx::catchAsync(::std::int32_t iceP_checked, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::int32_t>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &await::casePrx::_iceI_catch, iceP_checked, context);
}

void
await::casePrx::_iceI_catch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>& outAsync, ::std::int32_t iceP_checked, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "catch";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_checked);
        },
        nullptr);
}

const char*
await::casePrx::ice_staticId() noexcept
{
    return "::await::case";
}

void
await::typeofPrx::default(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &typeofPrx::_iceI_default, context).get();
}

::std::future<void>
await::typeofPrx::defaultAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &typeofPrx::_iceI_default, context);
}

::std::function<void()>
await::typeofPrx::defaultAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &await::typeofPrx::_iceI_default, context);
}

void
await::typeofPrx::_iceI_default(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "default";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr);
}

const char*
await::typeofPrx::ice_staticId() noexcept
{
    return "::await::typeof";
}

const char*
await::explicitPrx::ice_staticId() noexcept
{
    return "::await::explicit";
}

::std::optional<::await::break>
await::optionalParamsPrx::for(::std::optional<var> iceP_goto, const ::std::optional<explicitPrx>& iceP_if, const ::std::optional<while>& iceP_internal, ::std::optional<::std::string_view> iceP_namespace, const ::std::optional<explicitPrx>& iceP_null, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<break>>(true, this, &optionalParamsPrx::_iceI_for, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, context).get();
}

::std::future<::std::optional<::await::break>>
await::optionalParamsPrx::forAsync(::std::optional<var> iceP_goto, const ::std::optional<explicitPrx>& iceP_if, const ::std::optional<while>& iceP_internal, ::std::optional<::std::string_view> iceP_namespace, const ::std::optional<explicitPrx>& iceP_null, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<break>>(false, this, &optionalParamsPrx::_iceI_for, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, context);
}

::std::function<void()>
await::optionalParamsPrx::forAsync(::std::optional<var> iceP_goto, const ::std::optional<explicitPrx>& iceP_if, const ::std::optional<while>& iceP_internal, ::std::optional<::std::string_view> iceP_namespace, const ::std::optional<explicitPrx>& iceP_null, ::std::function<void(::std::optional<::await::break>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<break>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &await::optionalParamsPrx::_iceI_for, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, context);
}

void
await::optionalParamsPrx::_iceI_for(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<break>>>& outAsync, ::std::optional<var> iceP_goto, const ::std::optional<explicitPrx>& iceP_if, const ::std::optional<while>& iceP_internal, ::std::optional<::std::string_view> iceP_namespace, const ::std::optional<explicitPrx>& iceP_null, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "for";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2, 3, 5, 7, 8}, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::optional<break> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}

::std::optional<::await::break>
await::optionalParamsPrx::continue(::std::optional<var> iceP_goto, const ::std::optional<explicitPrx>& iceP_if, const ::std::optional<while>& iceP_internal, ::std::optional<::std::string_view> iceP_namespace, const ::std::optional<explicitPrx>& iceP_null, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<break>>(true, this, &optionalParamsPrx::_iceI_continue, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, context).get();
}

::std::future<::std::optional<::await::break>>
await::optionalParamsPrx::continueAsync(::std::optional<var> iceP_goto, const ::std::optional<explicitPrx>& iceP_if, const ::std::optional<while>& iceP_internal, ::std::optional<::std::string_view> iceP_namespace, const ::std::optional<explicitPrx>& iceP_null, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<break>>(false, this, &optionalParamsPrx::_iceI_continue, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, context);
}

::std::function<void()>
await::optionalParamsPrx::continueAsync(::std::optional<var> iceP_goto, const ::std::optional<explicitPrx>& iceP_if, const ::std::optional<while>& iceP_internal, ::std::optional<::std::string_view> iceP_namespace, const ::std::optional<explicitPrx>& iceP_null, ::std::function<void(::std::optional<::await::break>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<break>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &await::optionalParamsPrx::_iceI_continue, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, context);
}

void
await::optionalParamsPrx::_iceI_continue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<break>>>& outAsync, ::std::optional<var> iceP_goto, const ::std::optional<explicitPrx>& iceP_if, const ::std::optional<while>& iceP_internal, ::std::optional<::std::string_view> iceP_namespace, const ::std::optional<explicitPrx>& iceP_null, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "continue";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2, 3, 5, 7, 8}, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::optional<break> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}

::std::optional<::await::break>
await::optionalParamsPrx::in(::std::optional<var>& iceP_goto, ::std::optional<explicitPrx>& iceP_if, ::std::optional<while>& iceP_internal, ::std::optional<::std::string>& iceP_namespace, ::std::optional<explicitPrx>& iceP_null, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::std::optional<break>, ::std::optional<var>, ::std::optional<explicitPrx>, ::std::optional<while>, ::std::optional<::std::string>, ::std::optional<explicitPrx>>>(true, this, &optionalParamsPrx::_iceI_in, context).get();
    iceP_goto = ::std::get<1>(result);
    iceP_if = ::std::move(::std::get<2>(result));
    iceP_internal = ::std::move(::std::get<3>(result));
    iceP_namespace = ::std::move(::std::get<4>(result));
    iceP_null = ::std::move(::std::get<5>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::std::optional<::await::break>, ::std::optional<::await::var>, ::std::optional<::await::explicitPrx>, ::std::optional<::await::while>, ::std::optional<::std::string>, ::std::optional<::await::explicitPrx>>>
await::optionalParamsPrx::inAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::std::optional<break>, ::std::optional<var>, ::std::optional<explicitPrx>, ::std::optional<while>, ::std::optional<::std::string>, ::std::optional<explicitPrx>>>(false, this, &optionalParamsPrx::_iceI_in, context);
}

::std::function<void()>
await::optionalParamsPrx::inAsync(::std::function<void(::std::optional<::await::break>, ::std::optional<::await::var>, ::std::optional<::await::explicitPrx>, ::std::optional<::await::while>, ::std::optional<::std::string>, ::std::optional<::await::explicitPrx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::std::optional<break>, ::std::optional<var>, ::std::optional<explicitPrx>, ::std::optional<while>, ::std::optional<::std::string>, ::std::optional<explicitPrx>>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::std::optional<break>, ::std::optional<var>, ::std::optional<explicitPrx>, ::std::optional<while>, ::std::optional<::std::string>, ::std::optional<explicitPrx>>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &await::optionalParamsPrx::_iceI_in, context);
}

void
await::optionalParamsPrx::_iceI_in(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::optional<break>, ::std::optional<var>, ::std::optional<explicitPrx>, ::std::optional<while>, ::std::optional<::std::string>, ::std::optional<explicitPrx>>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "in";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::optional<break>, ::std::optional<var>, ::std::optional<explicitPrx>, ::std::optional<while>, ::std::optional<::std::string>, ::std::optional<explicitPrx>> v;
            istr->readAll({1, 2, 3, 5, 7, 8}, ::std::get<0>(v), ::std::get<1>(v), ::std::get<2>(v), ::std::get<3>(v), ::std::get<4>(v), ::std::get<5>(v));
            return v;
        });
}

::std::optional<::await::break>
await::optionalParamsPrx::foreach(::std::optional<var>& iceP_goto, ::std::optional<explicitPrx>& iceP_if, ::std::optional<while>& iceP_internal, ::std::optional<::std::string>& iceP_namespace, ::std::optional<explicitPrx>& iceP_null, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::std::optional<break>, ::std::optional<var>, ::std::optional<explicitPrx>, ::std::optional<while>, ::std::optional<::std::string>, ::std::optional<explicitPrx>>>(true, this, &optionalParamsPrx::_iceI_foreach, context).get();
    iceP_goto = ::std::get<1>(result);
    iceP_if = ::std::move(::std::get<2>(result));
    iceP_internal = ::std::move(::std::get<3>(result));
    iceP_namespace = ::std::move(::std::get<4>(result));
    iceP_null = ::std::move(::std::get<5>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::std::optional<::await::break>, ::std::optional<::await::var>, ::std::optional<::await::explicitPrx>, ::std::optional<::await::while>, ::std::optional<::std::string>, ::std::optional<::await::explicitPrx>>>
await::optionalParamsPrx::foreachAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::std::optional<break>, ::std::optional<var>, ::std::optional<explicitPrx>, ::std::optional<while>, ::std::optional<::std::string>, ::std::optional<explicitPrx>>>(false, this, &optionalParamsPrx::_iceI_foreach, context);
}

::std::function<void()>
await::optionalParamsPrx::foreachAsync(::std::function<void(::std::optional<::await::break>, ::std::optional<::await::var>, ::std::optional<::await::explicitPrx>, ::std::optional<::await::while>, ::std::optional<::std::string>, ::std::optional<::await::explicitPrx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::std::optional<break>, ::std::optional<var>, ::std::optional<explicitPrx>, ::std::optional<while>, ::std::optional<::std::string>, ::std::optional<explicitPrx>>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::std::optional<break>, ::std::optional<var>, ::std::optional<explicitPrx>, ::std::optional<while>, ::std::optional<::std::string>, ::std::optional<explicitPrx>>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &await::optionalParamsPrx::_iceI_foreach, context);
}

void
await::optionalParamsPrx::_iceI_foreach(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::optional<break>, ::std::optional<var>, ::std::optional<explicitPrx>, ::std::optional<while>, ::std::optional<::std::string>, ::std::optional<explicitPrx>>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "foreach";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::optional<break>, ::std::optional<var>, ::std::optional<explicitPrx>, ::std::optional<while>, ::std::optional<::std::string>, ::std::optional<explicitPrx>> v;
            istr->readAll({1, 2, 3, 5, 7, 8}, ::std::get<0>(v), ::std::get<1>(v), ::std::get<2>(v), ::std::get<3>(v), ::std::get<4>(v), ::std::get<5>(v));
            return v;
        });
}

const char*
await::optionalParamsPrx::ice_staticId() noexcept
{
    return "::await::optionalParams";
}

::await::var
await::implicitPrx::in(const break& iceP_internal, const deletePtr& iceP_is, const ::std::optional<explicitPrx>& iceP_lock, const ::std::optional<casePrx>& iceP_namespace, const ::std::optional<typeofPrx>& iceP_new, const deletePtr& iceP_null, const ::std::optional<explicitPrx>& iceP_operator, ::std::int32_t iceP_override, ::std::int32_t iceP_params, ::std::int32_t iceP_private, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<var>(true, this, &implicitPrx::_iceI_in, iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_operator, iceP_override, iceP_params, iceP_private, context).get();
}

::std::future<::await::var>
await::implicitPrx::inAsync(const break& iceP_internal, const deletePtr& iceP_is, const ::std::optional<explicitPrx>& iceP_lock, const ::std::optional<casePrx>& iceP_namespace, const ::std::optional<typeofPrx>& iceP_new, const deletePtr& iceP_null, const ::std::optional<explicitPrx>& iceP_operator, ::std::int32_t iceP_override, ::std::int32_t iceP_params, ::std::int32_t iceP_private, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<var>(false, this, &implicitPrx::_iceI_in, iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_operator, iceP_override, iceP_params, iceP_private, context);
}

::std::function<void()>
await::implicitPrx::inAsync(const break& iceP_internal, const deletePtr& iceP_is, const ::std::optional<explicitPrx>& iceP_lock, const ::std::optional<casePrx>& iceP_namespace, const ::std::optional<typeofPrx>& iceP_new, const deletePtr& iceP_null, const ::std::optional<explicitPrx>& iceP_operator, ::std::int32_t iceP_override, ::std::int32_t iceP_params, ::std::int32_t iceP_private, ::std::function<void(::await::var)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<var>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &await::implicitPrx::_iceI_in, iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_operator, iceP_override, iceP_params, iceP_private, context);
}

void
await::implicitPrx::_iceI_in(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<var>>& outAsync, const break& iceP_internal, const deletePtr& iceP_is, const ::std::optional<explicitPrx>& iceP_lock, const ::std::optional<casePrx>& iceP_namespace, const ::std::optional<typeofPrx>& iceP_new, const deletePtr& iceP_null, const ::std::optional<explicitPrx>& iceP_operator, ::std::int32_t iceP_override, ::std::int32_t iceP_params, ::std::int32_t iceP_private, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "in";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_operator, iceP_override, iceP_params, iceP_private);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const foreach&)
            {
                throw;
            }
            catch(const fixed&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

const char*
await::implicitPrx::ice_staticId() noexcept
{
    return "::await::implicit";
}

void
await::System::TestPrx::op(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestPrx::_iceI_op, context).get();
}

::std::future<void>
await::System::TestPrx::opAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestPrx::_iceI_op, context);
}

::std::function<void()>
await::System::TestPrx::opAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &await::System::TestPrx::_iceI_op, context);
}

void
await::System::TestPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "op";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr);
}

const char*
await::System::TestPrx::ice_staticId() noexcept
{
    return "::await::System::Test";
}

void
System::TestPrx::op(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestPrx::_iceI_op, context).get();
}

::std::future<void>
System::TestPrx::opAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestPrx::_iceI_op, context);
}

::std::function<void()>
System::TestPrx::opAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &System::TestPrx::_iceI_op, context);
}

void
System::TestPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "op";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr);
}

const char*
System::TestPrx::ice_staticId() noexcept
{
    return "::System::Test";
}

void
await::break::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "while = ", this->while);
    Ice::print(os << ", clone = ", this->clone);
    Ice::print(os << ", equals = ", this->equals);
    Ice::print(os << ", hashCode = ", this->hashCode);
    Ice::print(os << ", constructor = ", this->constructor);
}

::std::ostream&
await::operator<<(::std::ostream& os, const ::await::break& value)
{
    os << "await::break{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
await::delete::ice_staticId() noexcept
{
    return "::await::delete";
}

const char*
await::delete::ice_id() const noexcept
{
    return ice_staticId();
}

void
await::delete::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "if = ", this->if);
    Ice::print(os << ", else = ", this->else);
    Ice::print(os << ", export = ", this->export);
    Ice::print(os << ", clone = ", this->clone);
    Ice::print(os << ", equals = ", this->equals);
    Ice::print(os << ", hashCode = ", this->hashCode);
    Ice::print(os << ", constructor = ", this->constructor);
}

::Ice::ValuePtr
await::delete::_iceCloneImpl() const
{
    return CloneEnabler<delete>::clone(*this);
}

void
await::delete::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->if, this->else, this->export, this->clone, this->equals, this->hashCode, this->constructor);
    ostr->endSlice();
}

void
await::delete::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->if, this->else, this->export, this->clone, this->equals, this->hashCode, this->constructor);
    istr->endSlice();
}

const char*
await::package::ice_staticId() noexcept
{
    return "::await::package";
}

const char*
await::package::ice_id() const noexcept
{
    return ice_staticId();
}

void
await::package::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "for = ", this->for);
    Ice::print(os << ", goto = ", this->goto);
    Ice::print(os << ", if = ", this->if);
    Ice::print(os << ", internal = ", this->internal);
    Ice::print(os << ", debugger = ", this->debugger);
    Ice::print(os << ", null = ", this->null);
}

::Ice::ValuePtr
await::package::_iceCloneImpl() const
{
    return CloneEnabler<package>::clone(*this);
}

void
await::package::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll({1, 2, 3, 5, 7, 8}, this->for, this->goto, this->if, this->internal, this->debugger, this->null);
    ostr->endSlice();
}

void
await::package::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll({1, 2, 3, 5, 7, 8}, this->for, this->goto, this->if, this->internal, this->debugger, this->null);
    istr->endSlice();
}

const char*
await::fixed::ice_staticId() noexcept
{
    return "::await::fixed";
}

const char*
await::fixed::ice_id() const noexcept
{
    return ice_staticId();
}

void
await::fixed::ice_throw() const
{
    throw *this;
}

void
await::fixed::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->for);
    ostr->endSlice();
}

void
await::fixed::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->for);
    istr->endSlice();
}

const char*
await::foreach::ice_staticId() noexcept
{
    return "::await::foreach";
}

const char*
await::foreach::ice_id() const noexcept
{
    return ice_staticId();
}

void
await::foreach::ice_throw() const
{
    throw *this;
}

void
await::foreach::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->goto, this->if);
    ostr->endSlice();
    fixed::_writeImpl(ostr);
}

void
await::foreach::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->goto, this->if);
    istr->endSlice();
    fixed::_readImpl(istr);
}

const char*
await::BaseMethods::ice_staticId() noexcept
{
    return "::await::BaseMethods";
}

const char*
await::BaseMethods::ice_id() const noexcept
{
    return ice_staticId();
}

void
await::BaseMethods::ice_throw() const
{
    throw *this;
}

void
await::BaseMethods::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->Data, this->HelpLink, this->InnerException, this->Message, this->Source, this->StackTrace, this->TargetSite, this->HResult, this->Equals, this->GetBaseException, this->GetHashCode, this->GetObjectData, this->GetType, this->ReferenceEquals, this->ToString);
    ostr->endSlice();
}

void
await::BaseMethods::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->Data, this->HelpLink, this->InnerException, this->Message, this->Source, this->StackTrace, this->TargetSite, this->HResult, this->Equals, this->GetBaseException, this->GetHashCode, this->GetObjectData, this->GetType, this->ReferenceEquals, this->ToString);
    istr->endSlice();
}

::std::vector<::std::string>
await::case::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::await::case"};
    return allTypeIds;
}

::std::string
await::case::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
await::case::ice_staticId() noexcept
{
    return "::await::case";
}

/// \cond INTERNAL
void
await::case::_iceD_catch(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::int32_t iceP_checked;
    istr->readAll(iceP_checked);
    istr->endEncapsulation();
    auto responseHandler = ::std::make_shared<::IceInternal::AsyncResponseHandler>(::std::move(sendResponse), request.current());
    auto responseCb = [responseHandler](::std::int32_t iceP_continue)
    {
        responseHandler->sendResponse(
            [&](::Ice::OutputStream* ostr)
            {
                ostr->writeAll(iceP_continue);
            });
    };
    try
    {
        this->catchAsync(iceP_checked, ::std::move(responseCb), [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(::std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
await::case::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"catch", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 5, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_catch(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
await::typeof::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::await::typeof"};
    return allTypeIds;
}

::std::string
await::typeof::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
await::typeof::ice_staticId() noexcept
{
    return "::await::typeof";
}

/// \cond INTERNAL
void
await::typeof::_iceD_default(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->default(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
await::typeof::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"default", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 5, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_default(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
await::explicit::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::await::case", "::await::explicit", "::await::typeof"};
    return allTypeIds;
}

::std::string
await::explicit::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
await::explicit::ice_staticId() noexcept
{
    return "::await::explicit";
}

/// \cond INTERNAL
void
await::explicit::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"catch", "default", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 6, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_catch(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_default(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
await::optionalParams::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::await::optionalParams"};
    return allTypeIds;
}

::std::string
await::optionalParams::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
await::optionalParams::ice_staticId() noexcept
{
    return "::await::optionalParams";
}

/// \cond INTERNAL
void
await::optionalParams::_iceD_for(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::optional<var> iceP_goto;
    ::std::optional<explicitPrx> iceP_if;
    ::std::optional<while> iceP_internal;
    ::std::optional<::std::string> iceP_namespace;
    ::std::optional<explicitPrx> iceP_null;
    istr->readAll({2, 3, 5, 7, 8}, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null);
    istr->endEncapsulation();
    const ::std::optional<break> ret = this->for(iceP_goto, ::std::move(iceP_if), ::std::move(iceP_internal), ::std::move(iceP_namespace), ::std::move(iceP_null), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1}, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
await::optionalParams::_iceD_continue(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::optional<var> iceP_goto;
    ::std::optional<explicitPrx> iceP_if;
    ::std::optional<while> iceP_internal;
    ::std::optional<::std::string> iceP_namespace;
    ::std::optional<explicitPrx> iceP_null;
    istr->readAll({2, 3, 5, 7, 8}, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null);
    istr->endEncapsulation();
    auto responseHandler = ::std::make_shared<::IceInternal::AsyncResponseHandler>(::std::move(sendResponse), request.current());
    auto responseCb = [responseHandler](const ::std::optional<break>& ret)
    {
        responseHandler->sendResponse(
            [&](::Ice::OutputStream* ostr)
            {
                ostr->writeAll({1}, ret);
            });
    };
    try
    {
        this->continueAsync(iceP_goto, ::std::move(iceP_if), ::std::move(iceP_internal), ::std::move(iceP_namespace), ::std::move(iceP_null), ::std::move(responseCb), [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(::std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
await::optionalParams::_iceD_in(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::optional<var> iceP_goto;
    ::std::optional<explicitPrx> iceP_if;
    ::std::optional<while> iceP_internal;
    ::std::optional<::std::string> iceP_namespace;
    ::std::optional<explicitPrx> iceP_null;
    const ::std::optional<break> ret = this->in(iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2, 3, 5, 7, 8}, ret, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
await::optionalParams::_iceD_foreach(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    auto responseHandler = ::std::make_shared<::IceInternal::AsyncResponseHandler>(::std::move(sendResponse), request.current());
    auto responseCb = [responseHandler](const ::std::optional<break>& ret, ::std::optional<var> iceP_goto, const ::std::optional<explicitPrx>& iceP_if, const ::std::optional<while>& iceP_internal, ::std::optional<::std::string_view> iceP_namespace, const ::std::optional<explicitPrx>& iceP_null)
    {
        responseHandler->sendResponse(
            [&](::Ice::OutputStream* ostr)
            {
                ostr->writeAll({1, 2, 3, 5, 7, 8}, ret, iceP_goto, iceP_if, iceP_internal, iceP_namespace, iceP_null);
            });
    };
    try
    {
        this->foreachAsync(::std::move(responseCb), [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(::std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
await::optionalParams::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"continue", "for", "foreach", "ice_id", "ice_ids", "ice_isA", "ice_ping", "in"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 8, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_continue(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_for(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_foreach(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_in(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
await::implicit::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::await::implicit"};
    return allTypeIds;
}

::std::string
await::implicit::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
await::implicit::ice_staticId() noexcept
{
    return "::await::implicit";
}

/// \cond INTERNAL
void
await::implicit::_iceD_in(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    break iceP_internal;
    deletePtr iceP_is;
    ::std::optional<explicitPrx> iceP_lock;
    ::std::optional<casePrx> iceP_namespace;
    ::std::optional<typeofPrx> iceP_new;
    deletePtr iceP_null;
    ::std::optional<explicitPrx> iceP_operator;
    ::std::int32_t iceP_override;
    ::std::int32_t iceP_params;
    ::std::int32_t iceP_private;
    istr->readAll(iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_operator, iceP_override, iceP_params, iceP_private);
    istr->readPendingValues();
    istr->endEncapsulation();
    const var ret = this->in(::std::move(iceP_internal), ::std::move(iceP_is), ::std::move(iceP_lock), ::std::move(iceP_namespace), ::std::move(iceP_new), ::std::move(iceP_null), ::std::move(iceP_operator), iceP_override, iceP_params, iceP_private, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
await::implicit::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"ice_id", "ice_ids", "ice_isA", "ice_ping", "in"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 5, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_in(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
await::System::Test::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::await::System::Test"};
    return allTypeIds;
}

::std::string
await::System::Test::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
await::System::Test::ice_staticId() noexcept
{
    return "::await::System::Test";
}

/// \cond INTERNAL
void
await::System::Test::_iceD_op(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->op(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
await::System::Test::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"ice_id", "ice_ids", "ice_isA", "ice_ping", "op"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 5, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_op(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
System::Test::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::System::Test"};
    return allTypeIds;
}

::std::string
System::Test::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
System::Test::ice_staticId() noexcept
{
    return "::System::Test";
}

/// \cond INTERNAL
void
System::Test::_iceD_op(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->op(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
System::Test::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"ice_id", "ice_ids", "ice_isA", "ice_ping", "op"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 5, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_op(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond
