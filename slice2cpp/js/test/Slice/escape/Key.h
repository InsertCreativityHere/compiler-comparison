//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Key_h__
#define __Key_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace await
{

struct _cpp_break;
class _cpp_case;
class casePrx;

using casePrxPtr = ::std::optional<casePrx>;
class typeof;
class typeofPrx;

using typeofPrxPtr = ::std::optional<typeofPrx>;
class _cpp_delete;
class _cpp_explicit;
class explicitPrx;

using explicitPrxPtr = ::std::optional<explicitPrx>;
class package;
class optionalParams;
class optionalParamsPrx;

using optionalParamsPrxPtr = ::std::optional<optionalParamsPrx>;
class implicit;
class implicitPrx;

using implicitPrxPtr = ::std::optional<implicitPrx>;

namespace System
{

class Test;
class TestPrx;

using TestPrxPtr = ::std::optional<TestPrx>;

}

}

namespace System
{

class Test;
class TestPrx;

using TestPrxPtr = ::std::optional<TestPrx>;

}

namespace await
{

enum class var : unsigned char
{
    base
};

using _cpp_while = ::std::map<::std::string, _cpp_break>;

constexpr ::std::int32_t _cpp_protected = 0;

constexpr ::std::int32_t _cpp_public = 0;

namespace System
{

}

}

namespace System
{

}

namespace await
{

class casePrx : public ::Ice::Proxy<casePrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_catch(::std::int32_t checked, ::std::int32_t& _cpp_continue, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::int32_t> catchAsync(::std::int32_t checked, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    catchAsync(::std::int32_t checked,
               ::std::function<void(::std::int32_t)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_catch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>&, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit casePrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    casePrx(const casePrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    casePrx(casePrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    casePrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    casePrx& operator=(const casePrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    casePrx& operator=(casePrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static casePrx _fromReference(::IceInternal::ReferencePtr ref) { return casePrx(::std::move(ref)); }

protected:

    casePrx() = default;

    explicit casePrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

class typeofPrx : public ::Ice::Proxy<typeofPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_default(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> defaultAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    defaultAsync(::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_default(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit typeofPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    typeofPrx(const typeofPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    typeofPrx(typeofPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    typeofPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    typeofPrx& operator=(const typeofPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    typeofPrx& operator=(typeofPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static typeofPrx _fromReference(::IceInternal::ReferencePtr ref) { return typeofPrx(::std::move(ref)); }

protected:

    typeofPrx() = default;

    explicit typeofPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

class explicitPrx : public ::Ice::Proxy<explicitPrx, typeofPrx, casePrx>
{
public:

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

#if defined(__GNUC__)
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wextra" // initialize all virtual bases in correct order
#endif

    explicit explicitPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    explicitPrx(const explicitPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    explicitPrx(explicitPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    explicitPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    explicitPrx& operator=(const explicitPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    explicitPrx& operator=(explicitPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static explicitPrx _fromReference(::IceInternal::ReferencePtr ref) { return explicitPrx(::std::move(ref)); }

protected:

    explicitPrx() = default;

    explicit explicitPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond

#if defined(__GNUC__)
#   pragma GCC diagnostic pop
#endif
};

class optionalParamsPrx : public ::Ice::Proxy<optionalParamsPrx, ::Ice::ObjectPrx>
{
public:

    std::optional<_cpp_break> _cpp_for(const std::optional<var>& _cpp_goto, const std::optional<::std::optional<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace, const std::optional<::std::optional<explicitPrx>>& null, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<std::optional<_cpp_break>> forAsync(const std::optional<var>& _cpp_goto, const std::optional<::std::optional<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace, const std::optional<::std::optional<explicitPrx>>& null, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    forAsync(const std::optional<var>& _cpp_goto, const std::optional<::std::optional<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace, const std::optional<::std::optional<explicitPrx>>& null,
             ::std::function<void(std::optional<::await::_cpp_break>)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_for(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<_cpp_break>>>&, const std::optional<var>&, const std::optional<::std::optional<explicitPrx>>&, const std::optional<_cpp_while>&, const std::optional<::std::string>&, const std::optional<::std::optional<explicitPrx>>&, const ::Ice::Context&) const;
    /// \endcond

    std::optional<_cpp_break> _cpp_continue(const std::optional<var>& _cpp_goto, const std::optional<::std::optional<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace, const std::optional<::std::optional<explicitPrx>>& null, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<std::optional<_cpp_break>> continueAsync(const std::optional<var>& _cpp_goto, const std::optional<::std::optional<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace, const std::optional<::std::optional<explicitPrx>>& null, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    continueAsync(const std::optional<var>& _cpp_goto, const std::optional<::std::optional<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace, const std::optional<::std::optional<explicitPrx>>& null,
                  ::std::function<void(std::optional<::await::_cpp_break>)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_continue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<_cpp_break>>>&, const std::optional<var>&, const std::optional<::std::optional<explicitPrx>>&, const std::optional<_cpp_while>&, const std::optional<::std::string>&, const std::optional<::std::optional<explicitPrx>>&, const ::Ice::Context&) const;
    /// \endcond

    std::optional<_cpp_break> in(std::optional<var>& _cpp_goto, std::optional<::std::optional<explicitPrx>>& _cpp_if, std::optional<_cpp_while>& internal, std::optional<::std::string>& _cpp_namespace, std::optional<::std::optional<explicitPrx>>& null, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<std::optional<_cpp_break>, std::optional<var>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>, std::optional<::std::optional<explicitPrx>>>> inAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    inAsync(::std::function<void(std::optional<::await::_cpp_break>, std::optional<::await::var>, std::optional<::std::optional<::await::explicitPrx>>, std::optional<::await::_cpp_while>, std::optional<::std::string>, std::optional<::std::optional<::await::explicitPrx>>)> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_in(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<_cpp_break>, std::optional<var>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>, std::optional<::std::optional<explicitPrx>>>>>&, const ::Ice::Context&) const;
    /// \endcond

    std::optional<_cpp_break> foreach(std::optional<var>& _cpp_goto, std::optional<::std::optional<explicitPrx>>& _cpp_if, std::optional<_cpp_while>& internal, std::optional<::std::string>& _cpp_namespace, std::optional<::std::optional<explicitPrx>>& null, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<std::optional<_cpp_break>, std::optional<var>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>, std::optional<::std::optional<explicitPrx>>>> foreachAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    foreachAsync(::std::function<void(std::optional<::await::_cpp_break>, std::optional<::await::var>, std::optional<::std::optional<::await::explicitPrx>>, std::optional<::await::_cpp_while>, std::optional<::std::string>, std::optional<::std::optional<::await::explicitPrx>>)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_foreach(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<_cpp_break>, std::optional<var>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>, std::optional<::std::optional<explicitPrx>>>>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit optionalParamsPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    optionalParamsPrx(const optionalParamsPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    optionalParamsPrx(optionalParamsPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    optionalParamsPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    optionalParamsPrx& operator=(const optionalParamsPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    optionalParamsPrx& operator=(optionalParamsPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static optionalParamsPrx _fromReference(::IceInternal::ReferencePtr ref) { return optionalParamsPrx(::std::move(ref)); }

protected:

    optionalParamsPrx() = default;

    explicit optionalParamsPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

class implicitPrx : public ::Ice::Proxy<implicitPrx, ::Ice::ObjectPrx>
{
public:

    var in(const _cpp_break& internal, const ::std::shared_ptr<_cpp_delete>& is, const ::std::optional<explicitPrx>& lock, const ::std::optional<casePrx>& _cpp_namespace, const ::std::optional<typeofPrx>& _cpp_new, const ::std::shared_ptr<_cpp_delete>& null, const ::std::optional<explicitPrx>& _cpp_operator, ::std::int32_t override, ::std::int32_t params, ::std::int32_t _cpp_private, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<var> inAsync(const _cpp_break& internal, const ::std::shared_ptr<_cpp_delete>& is, const ::std::optional<explicitPrx>& lock, const ::std::optional<casePrx>& _cpp_namespace, const ::std::optional<typeofPrx>& _cpp_new, const ::std::shared_ptr<_cpp_delete>& null, const ::std::optional<explicitPrx>& _cpp_operator, ::std::int32_t override, ::std::int32_t params, ::std::int32_t _cpp_private, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    inAsync(const _cpp_break& internal, const ::std::shared_ptr<_cpp_delete>& is, const ::std::optional<explicitPrx>& lock, const ::std::optional<casePrx>& _cpp_namespace, const ::std::optional<typeofPrx>& _cpp_new, const ::std::shared_ptr<_cpp_delete>& null, const ::std::optional<explicitPrx>& _cpp_operator, ::std::int32_t override, ::std::int32_t params, ::std::int32_t _cpp_private,
            ::std::function<void(::await::var)> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_in(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<var>>&, const _cpp_break&, const ::std::shared_ptr<_cpp_delete>&, const ::std::optional<explicitPrx>&, const ::std::optional<casePrx>&, const ::std::optional<typeofPrx>&, const ::std::shared_ptr<_cpp_delete>&, const ::std::optional<explicitPrx>&, ::std::int32_t, ::std::int32_t, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit implicitPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    implicitPrx(const implicitPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    implicitPrx(implicitPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    implicitPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    implicitPrx& operator=(const implicitPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    implicitPrx& operator=(implicitPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static implicitPrx _fromReference(::IceInternal::ReferencePtr ref) { return implicitPrx(::std::move(ref)); }

protected:

    implicitPrx() = default;

    explicit implicitPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

namespace System
{

class TestPrx : public ::Ice::Proxy<TestPrx, ::Ice::ObjectPrx>
{
public:

    void op(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> opAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opAsync(::std::function<void()> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit TestPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    TestPrx(const TestPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    TestPrx(TestPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    TestPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    TestPrx& operator=(const TestPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    TestPrx& operator=(TestPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static TestPrx _fromReference(::IceInternal::ReferencePtr ref) { return TestPrx(::std::move(ref)); }

protected:

    TestPrx() = default;

    explicit TestPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

}

namespace System
{

class TestPrx : public ::Ice::Proxy<TestPrx, ::Ice::ObjectPrx>
{
public:

    void op(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> opAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opAsync(::std::function<void()> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit TestPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    TestPrx(const TestPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    TestPrx(TestPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    TestPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    TestPrx& operator=(const TestPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    TestPrx& operator=(TestPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static TestPrx _fromReference(::IceInternal::ReferencePtr ref) { return TestPrx(::std::move(ref)); }

protected:

    TestPrx() = default;

    explicit TestPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace await
{

struct _cpp_break
{
    ::std::int32_t _cpp_while;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(_cpp_while);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace await
{

class _cpp_delete : public ::Ice::ValueHelper<_cpp_delete, ::Ice::Value>
{
public:

    virtual ~_cpp_delete();

    _cpp_delete() = default;

    _cpp_delete(const _cpp_delete&) = default;
    _cpp_delete(_cpp_delete&&) = default;
    _cpp_delete& operator=(const _cpp_delete&) = default;
    _cpp_delete& operator=(_cpp_delete&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_delete(::std::int32_t _cpp_if, const ::std::optional<::await::casePrx>& _cpp_else, ::std::int32_t _cpp_export) :
        _cpp_if(_cpp_if),
        _cpp_else(_cpp_else),
        _cpp_export(_cpp_export)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::optional<::await::casePrx>&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(_cpp_if, _cpp_else, _cpp_export);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t _cpp_if;
    ::std::optional<::await::casePrx> _cpp_else;
    ::std::int32_t _cpp_export;
};

/// \cond INTERNAL
static _cpp_delete _iceS_delete_init;
/// \endcond

class package : public ::Ice::ValueHelper<package, ::Ice::Value>
{
public:

    virtual ~package();

    package() = default;

    package(const package&) = default;
    package(package&&) = default;
    package& operator=(const package&) = default;
    package& operator=(package&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    package(const std::optional<::await::_cpp_break>& _cpp_for, const std::optional<::await::var>& _cpp_goto, const std::optional<::std::optional<::await::explicitPrx>>& _cpp_if, const std::optional<::await::_cpp_while>& internal, const std::optional<::std::string>& debugger, const std::optional<::std::optional<::await::explicitPrx>>& null) :
        _cpp_for(_cpp_for),
        _cpp_goto(_cpp_goto),
        _cpp_if(_cpp_if),
        internal(internal),
        debugger(debugger),
        null(null)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional<::await::_cpp_break>&, const std::optional<::await::var>&, const std::optional<::std::optional<::await::explicitPrx>>&, const std::optional<::await::_cpp_while>&, const std::optional<::std::string>&, const std::optional<::std::optional<::await::explicitPrx>>&> ice_tuple() const
    {
        return std::tie(_cpp_for, _cpp_goto, _cpp_if, internal, debugger, null);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional<::await::_cpp_break> _cpp_for;
    std::optional<::await::var> _cpp_goto;
    std::optional<::std::optional<::await::explicitPrx>> _cpp_if;
    std::optional<::await::_cpp_while> internal;
    std::optional<::std::string> debugger;
    std::optional<::std::optional<::await::explicitPrx>> null;
};

}

namespace await
{

class fixed : public ::Ice::UserExceptionHelper<fixed, ::Ice::UserException>
{
public:

    virtual ~fixed();

    fixed(const fixed&) = default;

    fixed() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    fixed(::std::int32_t _cpp_for) :
        _cpp_for(_cpp_for)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(_cpp_for);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t _cpp_for;
};

/// \cond INTERNAL
static fixed _iceS_fixed_init;
/// \endcond

class foreach : public ::Ice::UserExceptionHelper<foreach, fixed>
{
public:

    virtual ~foreach();

    foreach(const foreach&) = default;

    foreach() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    foreach(::std::int32_t _cpp_for, ::std::int32_t _cpp_goto, ::std::int32_t _cpp_if) :
        ::Ice::UserExceptionHelper<foreach, fixed>(_cpp_for),
        _cpp_goto(_cpp_goto),
        _cpp_if(_cpp_if)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(_cpp_for, _cpp_goto, _cpp_if);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t _cpp_goto;
    ::std::int32_t _cpp_if;
};

class BaseMethods : public ::Ice::UserExceptionHelper<BaseMethods, ::Ice::UserException>
{
public:

    virtual ~BaseMethods();

    BaseMethods(const BaseMethods&) = default;

    BaseMethods() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    BaseMethods(::std::int32_t Data, ::std::int32_t HelpLink, ::std::int32_t InnerException, ::std::int32_t Message, ::std::int32_t Source, ::std::int32_t StackTrace, ::std::int32_t TargetSite, ::std::int32_t HResult, ::std::int32_t Equals, ::std::int32_t GetBaseException, ::std::int32_t GetHashCode, ::std::int32_t GetObjectData, ::std::int32_t GetType, ::std::int32_t ReferenceEquals, ::std::int32_t ToString) :
        Data(Data),
        HelpLink(HelpLink),
        InnerException(InnerException),
        Message(Message),
        Source(Source),
        StackTrace(StackTrace),
        TargetSite(TargetSite),
        HResult(HResult),
        Equals(Equals),
        GetBaseException(GetBaseException),
        GetHashCode(GetHashCode),
        GetObjectData(GetObjectData),
        GetType(GetType),
        ReferenceEquals(ReferenceEquals),
        ToString(ToString)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(Data, HelpLink, InnerException, Message, Source, StackTrace, TargetSite, HResult, Equals, GetBaseException, GetHashCode, GetObjectData, GetType, ReferenceEquals, ToString);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t Data;
    ::std::int32_t HelpLink;
    ::std::int32_t InnerException;
    ::std::int32_t Message;
    ::std::int32_t Source;
    ::std::int32_t StackTrace;
    ::std::int32_t TargetSite;
    ::std::int32_t HResult;
    ::std::int32_t Equals;
    ::std::int32_t GetBaseException;
    ::std::int32_t GetHashCode;
    ::std::int32_t GetObjectData;
    ::std::int32_t GetType;
    ::std::int32_t ReferenceEquals;
    ::std::int32_t ToString;
};

}

namespace await
{

class _cpp_case : public virtual ::Ice::Object
{
public:

    using ProxyType = casePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void catchAsync(::std::int32_t checked, ::std::function<void(::std::int32_t _cpp_continue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_catch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class typeof : public virtual ::Ice::Object
{
public:

    using ProxyType = typeofPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_default(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_default(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class _cpp_explicit : public virtual typeof,
                      public virtual _cpp_case
{
public:

    using ProxyType = explicitPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class optionalParams : public virtual ::Ice::Object
{
public:

    using ProxyType = optionalParamsPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual std::optional<_cpp_break> _cpp_for(std::optional<var> _cpp_goto, std::optional<::std::optional<explicitPrx>> _cpp_if, std::optional<_cpp_while> internal, std::optional<::std::string> _cpp_namespace, std::optional<::std::optional<explicitPrx>> null, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_for(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void continueAsync(std::optional<var> _cpp_goto, std::optional<::std::optional<explicitPrx>> _cpp_if, std::optional<_cpp_while> internal, std::optional<::std::string> _cpp_namespace, std::optional<::std::optional<explicitPrx>> null, ::std::function<void(const std::optional<_cpp_break>& returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_continue(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to in.
     */
    struct InResult
    {
        std::optional<_cpp_break> returnValue;
        std::optional<var> _cpp_goto;
        std::optional<::std::optional<explicitPrx>> _cpp_if;
        std::optional<_cpp_while> internal;
        std::optional<::std::string> _cpp_namespace;
        std::optional<::std::optional<explicitPrx>> null;
    };

    virtual std::optional<_cpp_break> in(std::optional<var>& _cpp_goto, std::optional<::std::optional<explicitPrx>>& _cpp_if, std::optional<_cpp_while>& internal, std::optional<::std::string>& _cpp_namespace, std::optional<::std::optional<explicitPrx>>& null, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_in(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to foreach.
     */
    struct ForeachResult
    {
        std::optional<_cpp_break> returnValue;
        std::optional<var> _cpp_goto;
        std::optional<::std::optional<explicitPrx>> _cpp_if;
        std::optional<_cpp_while> internal;
        std::optional<::std::string> _cpp_namespace;
        std::optional<::std::optional<explicitPrx>> null;
    };

    virtual void foreachAsync(::std::function<void(const std::optional<_cpp_break>& returnValue, const std::optional<var>& _cpp_goto, const std::optional<::std::optional<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace, const std::optional<::std::optional<explicitPrx>>& null)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_foreach(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class implicit : public virtual ::Ice::Object
{
public:

    using ProxyType = implicitPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual var in(_cpp_break internal, ::std::shared_ptr<delete> is, ::std::optional<explicitPrx> lock, ::std::optional<casePrx> _cpp_namespace, ::std::optional<typeofPrx> _cpp_new, ::std::shared_ptr<delete> null, ::std::optional<explicitPrx> _cpp_operator, ::std::int32_t override, ::std::int32_t params, ::std::int32_t _cpp_private, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_in(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

namespace System
{

class Test : public virtual ::Ice::Object
{
public:

    using ProxyType = TestPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void op(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

}

namespace System
{

class Test : public virtual ::Ice::Object
{
public:

    using ProxyType = TestPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void op(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::await::var>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::await::_cpp_break>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::await::_cpp_break, S>
{
    static void read(S* istr, ::await::_cpp_break& v)
    {
        istr->readAll(v._cpp_while);
    }
};

template<typename S>
struct StreamReader<::await::_cpp_delete, S>
{
    static void read(S* istr, ::await::_cpp_delete& v)
    {
        istr->readAll(v._cpp_if, v._cpp_else, v._cpp_export);
    }
};

template<typename S>
struct StreamWriter<::await::package, S>
{
    static void write(S* ostr, const ::await::package& v)
    {
        ostr->writeAll({1, 2, 3, 5, 7, 8}, v._cpp_for, v._cpp_goto, v._cpp_if, v.internal, v.debugger, v.null);
    }
};

template<typename S>
struct StreamReader<::await::package, S>
{
    static void read(S* istr, ::await::package& v)
    {
        istr->readAll({1, 2, 3, 5, 7, 8}, v._cpp_for, v._cpp_goto, v._cpp_if, v.internal, v.debugger, v.null);
    }
};

template<typename S>
struct StreamReader<::await::fixed, S>
{
    static void read(S* istr, ::await::fixed& v)
    {
        istr->readAll(v._cpp_for);
    }
};

template<typename S>
struct StreamWriter<::await::foreach, S>
{
    static void write(S* ostr, const ::await::foreach& v)
    {
        ostr->writeAll(v._cpp_goto, v._cpp_if);
    }
};

template<typename S>
struct StreamReader<::await::foreach, S>
{
    static void read(S* istr, ::await::foreach& v)
    {
        istr->readAll(v._cpp_goto, v._cpp_if);
    }
};

template<typename S>
struct StreamReader<::await::BaseMethods, S>
{
    static void read(S* istr, ::await::BaseMethods& v)
    {
        istr->readAll(v.Data, v.HelpLink, v.InnerException, v.Message, v.Source, v.StackTrace, v.TargetSite, v.HResult, v.Equals, v.GetBaseException, v.GetHashCode, v.GetObjectData, v.GetType, v.ReferenceEquals, v.ToString);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace await
{

using casePtr = ::std::shared_ptr<_cpp_case>;

using typeofPtr = ::std::shared_ptr<typeof>;

using deletePtr = ::std::shared_ptr<_cpp_delete>;

using explicitPtr = ::std::shared_ptr<_cpp_explicit>;

using packagePtr = ::std::shared_ptr<package>;

using optionalParamsPtr = ::std::shared_ptr<optionalParams>;

using implicitPtr = ::std::shared_ptr<implicit>;

/// \cond INTERNAL
namespace System
{

using TestPtr = ::std::shared_ptr<Test>;

}
/// \endcond

}
/// \endcond

/// \cond INTERNAL
namespace System
{

using TestPtr = ::std::shared_ptr<Test>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
