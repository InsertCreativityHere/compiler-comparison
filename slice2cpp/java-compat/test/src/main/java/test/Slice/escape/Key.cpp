//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Key.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_abstract_catch_ids[2] =
{
    "::Ice::Object",
    "::abstract::catch"
};
const ::std::string iceC_abstract_catch_ops[] =
{
    "checkedCast",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_abstract_catch_checkedCast_name = "checkedCast";

const ::std::string iceC_abstract_default_ids[2] =
{
    "::Ice::Object",
    "::abstract::default"
};
const ::std::string iceC_abstract_default_ops[] =
{
    "do",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_abstract_default_do_name = "do";

const ::IceInternal::DefaultValueFactoryInit<::abstract::_cpp_else> iceC_abstract_else_init("::abstract::else");

const ::std::string iceC_abstract_finalize_ids[4] =
{
    "::Ice::Object",
    "::abstract::catch",
    "::abstract::default",
    "::abstract::finalize"
};
const ::std::string iceC_abstract_finalize_ops[] =
{
    "checkedCast",
    "do",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

const ::IceInternal::DefaultUserExceptionFactoryInit<::abstract::hashCode> iceC_abstract_hashCode_init("::abstract::hashCode");

const ::IceInternal::DefaultUserExceptionFactoryInit<::abstract::import> iceC_abstract_import_init("::abstract::import");

}

abstract::hashCode::~hashCode()
{
}

const ::std::string&
abstract::hashCode::ice_staticId()
{
    static const ::std::string typeId = "::abstract::hashCode";
    return typeId;
}

abstract::import::~import()
{
}

const ::std::string&
abstract::import::ice_staticId()
{
    static const ::std::string typeId = "::abstract::import";
    return typeId;
}

abstract::_cpp_new::~_cpp_new()
{
}

bool
abstract::_cpp_catch::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_abstract_catch_ids, iceC_abstract_catch_ids + 2, s);
}

::std::vector<::std::string>
abstract::_cpp_catch::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_abstract_catch_ids[0], &iceC_abstract_catch_ids[2]);
}

::std::string
abstract::_cpp_catch::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
abstract::_cpp_catch::ice_staticId()
{
    static const ::std::string typeId = "::abstract::catch";
    return typeId;
}

/// \cond INTERNAL
bool
abstract::_cpp_catch::_iceD_checkedCast(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_clone;
    istr->readAll(iceP_clone);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_continue)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_continue);
        inA->endWriteParams();
        inA->completed();
    };
    this->checkedCastAsync(iceP_clone, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
abstract::_cpp_catch::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_abstract_catch_ops, iceC_abstract_catch_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_abstract_catch_ops)
    {
        case 0:
        {
            return _iceD_checkedCast(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
abstract::_cpp_default::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_abstract_default_ids, iceC_abstract_default_ids + 2, s);
}

::std::vector<::std::string>
abstract::_cpp_default::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_abstract_default_ids[0], &iceC_abstract_default_ids[2]);
}

::std::string
abstract::_cpp_default::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
abstract::_cpp_default::ice_staticId()
{
    static const ::std::string typeId = "::abstract::default";
    return typeId;
}

/// \cond INTERNAL
bool
abstract::_cpp_default::_iceD_do(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_do(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
abstract::_cpp_default::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_abstract_default_ops, iceC_abstract_default_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_abstract_default_ops)
    {
        case 0:
        {
            return _iceD_do(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
abstract::finalize::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_abstract_finalize_ids, iceC_abstract_finalize_ids + 4, s);
}

::std::vector<::std::string>
abstract::finalize::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_abstract_finalize_ids[0], &iceC_abstract_finalize_ids[4]);
}

::std::string
abstract::finalize::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
abstract::finalize::ice_staticId()
{
    static const ::std::string typeId = "::abstract::finalize";
    return typeId;
}

/// \cond INTERNAL
bool
abstract::finalize::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_abstract_finalize_ops, iceC_abstract_finalize_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_abstract_finalize_ops)
    {
        case 0:
        {
            return _iceD_checkedCast(in, current);
        }
        case 1:
        {
            return _iceD_do(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

abstract::_cpp_else::~_cpp_else()
{
}

const ::std::string&
abstract::_cpp_else::ice_staticId()
{
    static const ::std::string typeId = "::abstract::else";
    return typeId;
}

/// \cond INTERNAL
void
abstract::catchPrx::_iceI_checkedCast(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_clone, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_abstract_catch_checkedCast_name);
    outAsync->invoke(iceC_abstract_catch_checkedCast_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_clone);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
abstract::catchPrx::_newInstance() const
{
    return ::IceInternal::createProxy<catchPrx>();
}
/// \endcond

const ::std::string&
abstract::catchPrx::ice_staticId()
{
    return _cpp_catch::ice_staticId();
}

/// \cond INTERNAL
void
abstract::defaultPrx::_iceI_do(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_abstract_default_do_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
abstract::defaultPrx::_newInstance() const
{
    return ::IceInternal::createProxy<defaultPrx>();
}
/// \endcond

const ::std::string&
abstract::defaultPrx::ice_staticId()
{
    return _cpp_default::ice_staticId();
}

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
abstract::finalizePrx::_newInstance() const
{
    return ::IceInternal::createProxy<finalizePrx>();
}
/// \endcond

const ::std::string&
abstract::finalizePrx::ice_staticId()
{
    return finalize::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_abstract_catch_checkedCast_name = "checkedCast";

const ::std::string iceC_abstract_default_do_name = "do";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::abstract::hashCode> iceC_abstract_hashCode_init("::abstract::hashCode");

}

abstract::hashCode::hashCode(::Ice::Int _cpp_if) :
    ::Ice::UserException(),
    _cpp_if(_cpp_if)
{
}

#ifdef ICE_CPP11_COMPILER
abstract::hashCode::~hashCode()
{
}
#else
abstract::hashCode::~hashCode() throw()
{
}
#endif

::std::string
abstract::hashCode::ice_id() const
{
    return "::abstract::hashCode";
}

abstract::hashCode*
abstract::hashCode::ice_clone() const
{
    return new hashCode(*this);
}

void
abstract::hashCode::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
abstract::hashCode::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::abstract::hashCode", -1, true);
    ::Ice::StreamWriter< hashCode, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
abstract::hashCode::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< hashCode, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::abstract::import> iceC_abstract_import_init("::abstract::import");

}

abstract::import::import(::Ice::Int _cpp_if, ::Ice::Int instanceof, ::Ice::Int native) :
    hashCode(_cpp_if),
    instanceof(instanceof),
    native(native)
{
}

#ifdef ICE_CPP11_COMPILER
abstract::import::~import()
{
}
#else
abstract::import::~import() throw()
{
}
#endif

::std::string
abstract::import::ice_id() const
{
    return "::abstract::import";
}

abstract::import*
abstract::import::ice_clone() const
{
    return new import(*this);
}

void
abstract::import::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
abstract::import::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::abstract::import", -1, false);
    ::Ice::StreamWriter< import, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    hashCode::_writeImpl(ostr);
}

void
abstract::import::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< import, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    hashCode::_readImpl(istr);
}
/// \endcond

abstract::AMD_catch_checkedCast::~AMD_catch_checkedCast()
{
}

/// \cond INTERNAL
IceAsync::abstract::AMD_catch_checkedCast::AMD_catch_checkedCast(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::abstract::AMD_catch_checkedCast::ice_response(::Ice::Int _cpp_continue)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(_cpp_continue);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::abstract::upCast(_cpp_catch* p) { return p; }

void
::IceProxy::abstract::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< _cpp_catch>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new _cpp_catch;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::abstract::_cpp_catch::_iceI_begin_checkedCast(::Ice::Int iceP_clone, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_abstract_catch_checkedCast_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_abstract_catch_checkedCast_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_abstract_catch_checkedCast_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_clone);
        result->endWriteParams();
        result->invoke(iceC_abstract_catch_checkedCast_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::abstract::_cpp_catch::end_checkedCast(::Ice::Int& iceP_continue, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_abstract_catch_checkedCast_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_continue);
    result->_endReadParams();
}

void IceProxy::abstract::_cpp_catch::_iceI_end_checkedCast(::Ice::Int& iceP_continue, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_abstract_catch_checkedCast_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_continue);
    result->_endReadParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::abstract::_cpp_catch::_newInstance() const
{
    return new _cpp_catch;
}
/// \endcond

const ::std::string&
IceProxy::abstract::_cpp_catch::ice_staticId()
{
    return ::abstract::_cpp_catch::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::abstract::upCast(_cpp_default* p) { return p; }

void
::IceProxy::abstract::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< _cpp_default>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new _cpp_default;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::abstract::_cpp_default::_iceI_begin_do(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_abstract_default_do_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_abstract_default_do_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_abstract_default_do_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::abstract::_cpp_default::end_do(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_abstract_default_do_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::abstract::_cpp_default::_newInstance() const
{
    return new _cpp_default;
}
/// \endcond

const ::std::string&
IceProxy::abstract::_cpp_default::ice_staticId()
{
    return ::abstract::_cpp_default::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::abstract::upCast(_cpp_else* p) { return p; }

void
::IceProxy::abstract::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< _cpp_else>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new _cpp_else;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::abstract::_cpp_else::_newInstance() const
{
    return new _cpp_else;
}
/// \endcond

const ::std::string&
IceProxy::abstract::_cpp_else::ice_staticId()
{
    return ::abstract::_cpp_else::ice_staticId();
}

::IceProxy::abstract::_finalizeBase::~_finalizeBase()
{
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::abstract::upCast(finalize* p) { return p; }

void
::IceProxy::abstract::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< finalize>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new finalize;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::abstract::finalize::_newInstance() const
{
    return new finalize;
}
/// \endcond

const ::std::string&
IceProxy::abstract::finalize::ice_staticId()
{
    return ::abstract::finalize::ice_staticId();
}

abstract::_cpp_catch::~_cpp_catch()
{
}

/// \cond INTERNAL
::Ice::Object* abstract::upCast(_cpp_catch* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_abstract_catch_ids[2] =
{
    "::Ice::Object",
    "::abstract::catch"
};

}

bool
abstract::_cpp_catch::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_abstract_catch_ids, iceC_abstract_catch_ids + 2, s);
}

::std::vector< ::std::string>
abstract::_cpp_catch::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_abstract_catch_ids[0], &iceC_abstract_catch_ids[2]);
}

const ::std::string&
abstract::_cpp_catch::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
abstract::_cpp_catch::ice_staticId()
{
    static const ::std::string typeId = "::abstract::catch";
    return typeId;
}

/// \cond INTERNAL
bool
abstract::_cpp_catch::_iceD_checkedCast(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_clone;
    istr->read(iceP_clone);
    inS.endReadParams();
    this->checkedCast_async(new IceAsync::abstract::AMD_catch_checkedCast(inS), iceP_clone, current);
    return false;
}
/// \endcond

namespace
{
const ::std::string iceC_abstract_catch_all[] =
{
    "checkedCast",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
abstract::_cpp_catch::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_abstract_catch_all, iceC_abstract_catch_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_abstract_catch_all)
    {
        case 0:
        {
            return _iceD_checkedCast(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
abstract::_cpp_catch::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< _cpp_catch, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
abstract::_cpp_catch::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< _cpp_catch, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
abstract::_icePatchObjectPtr(catchPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = catchPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(_cpp_catch::ice_staticId(), v);
    }
}
/// \endcond

abstract::_cpp_default::~_cpp_default()
{
}

/// \cond INTERNAL
::Ice::Object* abstract::upCast(_cpp_default* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_abstract_default_ids[2] =
{
    "::Ice::Object",
    "::abstract::default"
};

}

bool
abstract::_cpp_default::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_abstract_default_ids, iceC_abstract_default_ids + 2, s);
}

::std::vector< ::std::string>
abstract::_cpp_default::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_abstract_default_ids[0], &iceC_abstract_default_ids[2]);
}

const ::std::string&
abstract::_cpp_default::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
abstract::_cpp_default::ice_staticId()
{
    static const ::std::string typeId = "::abstract::default";
    return typeId;
}

/// \cond INTERNAL
bool
abstract::_cpp_default::_iceD_do(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_do(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_abstract_default_all[] =
{
    "do",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
abstract::_cpp_default::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_abstract_default_all, iceC_abstract_default_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_abstract_default_all)
    {
        case 0:
        {
            return _iceD_do(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
abstract::_cpp_default::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< _cpp_default, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
abstract::_cpp_default::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< _cpp_default, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
abstract::_icePatchObjectPtr(defaultPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = defaultPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(_cpp_default::ice_staticId(), v);
    }
}
/// \endcond

abstract::_cpp_else::~_cpp_else()
{
}

/// \cond INTERNAL
::Ice::Object* abstract::upCast(_cpp_else* p) { return p; }

/// \endcond
::Ice::ObjectPtr
abstract::_cpp_else::ice_clone() const
{
    ::Ice::Object* p = new _cpp_else(*this);
    return p;
}

namespace
{
const ::std::string iceC_abstract_else_ids[2] =
{
    "::Ice::Object",
    "::abstract::else"
};

}

bool
abstract::_cpp_else::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_abstract_else_ids, iceC_abstract_else_ids + 2, s);
}

::std::vector< ::std::string>
abstract::_cpp_else::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_abstract_else_ids[0], &iceC_abstract_else_ids[2]);
}

const ::std::string&
abstract::_cpp_else::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
abstract::_cpp_else::ice_staticId()
{
    static const ::std::string typeId = "::abstract::else";
    return typeId;
}

/// \cond STREAM
void
abstract::_cpp_else::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< _cpp_else, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
abstract::_cpp_else::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< _cpp_else, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::abstract::_cpp_else> iceC_abstract_else_init("::abstract::else");
}

::Ice::ValueFactoryPtr
abstract::_cpp_else::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::abstract::_cpp_else::ice_staticId());
}

/// \cond INTERNAL
void
abstract::_icePatchObjectPtr(elsePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = elsePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(_cpp_else::ice_staticId(), v);
    }
}
/// \endcond

abstract::finalize::~finalize()
{
}

/// \cond INTERNAL
::Ice::Object* abstract::upCast(finalize* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_abstract_finalize_ids[4] =
{
    "::Ice::Object",
    "::abstract::catch",
    "::abstract::default",
    "::abstract::finalize"
};

}

bool
abstract::finalize::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_abstract_finalize_ids, iceC_abstract_finalize_ids + 4, s);
}

::std::vector< ::std::string>
abstract::finalize::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_abstract_finalize_ids[0], &iceC_abstract_finalize_ids[4]);
}

const ::std::string&
abstract::finalize::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
abstract::finalize::ice_staticId()
{
    static const ::std::string typeId = "::abstract::finalize";
    return typeId;
}

namespace
{
const ::std::string iceC_abstract_finalize_all[] =
{
    "checkedCast",
    "do",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
abstract::finalize::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_abstract_finalize_all, iceC_abstract_finalize_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_abstract_finalize_all)
    {
        case 0:
        {
            return _iceD_checkedCast(in, current);
        }
        case 1:
        {
            return _iceD_do(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
abstract::finalize::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< finalize, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
abstract::finalize::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< finalize, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
abstract::_icePatchObjectPtr(finalizePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = finalizePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(finalize::ice_staticId(), v);
    }
}
/// \endcond

abstract::_cpp_new::~_cpp_new()
{
}

/// \cond INTERNAL
::Ice::LocalObject* abstract::upCast(_cpp_new* p) { return p; }
/// \endcond

namespace Ice
{
}

#endif
