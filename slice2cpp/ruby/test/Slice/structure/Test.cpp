// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");
}

const char*
Test::C::ice_staticId() noexcept
{
    return "::Test::C";
}

const char*
Test::C::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::C::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "i = ", this->i);
}

::Ice::ValuePtr
Test::C::_iceCloneImpl() const
{
    return CloneEnabler<C>::clone(*this);
}

void
Test::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->i);
    ostr->endSlice();
}

void
Test::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->i);
    istr->endSlice();
}

void
Test::S1::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "name = ", this->name);
}

::std::ostream&
Test::operator<<(::std::ostream& os, const ::Test::S1& value)
{
    os << "Test::S1{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
Test::S2::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "bo = ", this->bo);
    Ice::print(os << ", by = ", this->by);
    Ice::print(os << ", sh = ", this->sh);
    Ice::print(os << ", i = ", this->i);
    Ice::print(os << ", l = ", this->l);
    Ice::print(os << ", f = ", this->f);
    Ice::print(os << ", d = ", this->d);
    Ice::print(os << ", str = ", this->str);
    Ice::print(os << ", ss = ", this->ss);
    Ice::print(os << ", sd = ", this->sd);
    Ice::print(os << ", s = ", this->s);
    Ice::print(os << ", cls = ", this->cls);
    Ice::print(os << ", prx = ", this->prx);
}

::std::ostream&
Test::operator<<(::std::ostream& os, const ::Test::S2& value)
{
    os << "Test::S2{";
    value.ice_printFields(os);
    os << '}';
    return os;
}
