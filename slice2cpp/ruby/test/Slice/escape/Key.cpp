//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Key.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_BEGIN_break_ids[2] =
{
    "::BEGIN::break",
    "::Ice::Object"
};
const ::std::string iceC_BEGIN_break_ops[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "instance_variable_set",
    "instance_variables",
    "to_a"
};
const ::std::string iceC_BEGIN_break_case_name = "case";
const ::std::string iceC_BEGIN_break_to_a_name = "to_a";
const ::std::string iceC_BEGIN_break_instance_variable_set_name = "instance_variable_set";
const ::std::string iceC_BEGIN_break_instance_variables_name = "instance_variables";

const ::IceInternal::DefaultValueFactoryInit<::BEGIN::display> iceC_BEGIN_display_init("::BEGIN::display");

const ::std::string iceC_BEGIN_elsif_ids[3] =
{
    "::BEGIN::break",
    "::BEGIN::elsif",
    "::Ice::Object"
};
const ::std::string iceC_BEGIN_elsif_ops[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "instance_variable_set",
    "instance_variables",
    "to_a"
};

const ::IceInternal::DefaultUserExceptionFactoryInit<::BEGIN::next> iceC_BEGIN_next_init("::BEGIN::next");

const ::IceInternal::DefaultUserExceptionFactoryInit<::BEGIN::nil> iceC_BEGIN_nil_init("::BEGIN::nil");

const ::std::string iceC_BEGIN_extend_ids[2] =
{
    "::BEGIN::extend",
    "::Ice::Object"
};
const ::std::string iceC_BEGIN_extend_ops[] =
{
    "for",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_BEGIN_extend_for_name = "for";

}

BEGIN::next::~next()
{
}

const ::std::string&
BEGIN::next::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::next";
    return typeId;
}

BEGIN::nil::~nil()
{
}

const ::std::string&
BEGIN::nil::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::nil";
    return typeId;
}

bool
BEGIN::_cpp_break::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_BEGIN_break_ids, iceC_BEGIN_break_ids + 2, s);
}

::std::vector<::std::string>
BEGIN::_cpp_break::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_BEGIN_break_ids[0], &iceC_BEGIN_break_ids[2]);
}

::std::string
BEGIN::_cpp_break::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
BEGIN::_cpp_break::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::_cpp_break";
    return typeId;
}

/// \cond INTERNAL
bool
BEGIN::_cpp_break::_iceD_case(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_clone;
    int iceP_def;
    istr->readAll(iceP_clone, iceP_def);
    inS.endReadParams();
    this->_cpp_case(iceP_clone, iceP_def, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BEGIN::_cpp_break::_iceD_to_a(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->to_a(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BEGIN::_cpp_break::_iceD_instance_variable_set(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->instance_variable_set(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BEGIN::_cpp_break::_iceD_instance_variables(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->instance_variables(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BEGIN::_cpp_break::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_BEGIN_break_ops, iceC_BEGIN_break_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_BEGIN_break_ops)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_instance_variable_set(in, current);
        }
        case 6:
        {
            return _iceD_instance_variables(in, current);
        }
        case 7:
        {
            return _iceD_to_a(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
BEGIN::elsif::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_BEGIN_elsif_ids, iceC_BEGIN_elsif_ids + 3, s);
}

::std::vector<::std::string>
BEGIN::elsif::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_BEGIN_elsif_ids[0], &iceC_BEGIN_elsif_ids[3]);
}

::std::string
BEGIN::elsif::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
BEGIN::elsif::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::elsif";
    return typeId;
}

/// \cond INTERNAL
bool
BEGIN::elsif::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_BEGIN_elsif_ops, iceC_BEGIN_elsif_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_BEGIN_elsif_ops)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_instance_variable_set(in, current);
        }
        case 6:
        {
            return _iceD_instance_variables(in, current);
        }
        case 7:
        {
            return _iceD_to_a(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
BEGIN::extend::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_BEGIN_extend_ids, iceC_BEGIN_extend_ids + 2, s);
}

::std::vector<::std::string>
BEGIN::extend::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_BEGIN_extend_ids[0], &iceC_BEGIN_extend_ids[2]);
}

::std::string
BEGIN::extend::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
BEGIN::extend::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::extend";
    return typeId;
}

/// \cond INTERNAL
bool
BEGIN::extend::_iceD_for(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<display> iceP_freeze;
    ::std::shared_ptr<elsifPrx> iceP_hash;
    ::std::shared_ptr<breakPrx> iceP_if;
    ::std::shared_ptr<display> iceP_inspect;
    ::std::shared_ptr<elsifPrx> iceP_method;
    int iceP_methods;
    istr->readAll(iceP_freeze, iceP_hash, iceP_if, iceP_inspect, iceP_method, iceP_methods);
    istr->readPendingValues();
    inS.endReadParams();
    END ret = this->_cpp_for(::std::move(iceP_freeze), ::std::move(iceP_hash), ::std::move(iceP_if), ::std::move(iceP_inspect), ::std::move(iceP_method), iceP_methods, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BEGIN::extend::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_BEGIN_extend_ops, iceC_BEGIN_extend_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_BEGIN_extend_ops)
    {
        case 0:
        {
            return _iceD_for(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

BEGIN::display::~display()
{
}

const ::std::string&
BEGIN::display::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::display";
    return typeId;
}

/// \cond INTERNAL
void
BEGIN::breakPrx::_iceI_case(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_clone, int iceP_def, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BEGIN_break_case_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_clone, iceP_def);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BEGIN::breakPrx::_iceI_to_a(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BEGIN_break_to_a_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BEGIN::breakPrx::_iceI_instance_variable_set(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BEGIN_break_instance_variable_set_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BEGIN::breakPrx::_iceI_instance_variables(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BEGIN_break_instance_variables_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
BEGIN::breakPrx::ice_staticId()
{
    return _cpp_break::ice_staticId();
}

const ::std::string&
BEGIN::elsifPrx::ice_staticId()
{
    return elsif::ice_staticId();
}

/// \cond INTERNAL
void
BEGIN::extendPrx::_iceI_for(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::BEGIN::END>>& outAsync, const ::std::shared_ptr<display>& iceP_freeze, const ::std::shared_ptr<elsifPrx>& iceP_hash, const ::std::shared_ptr<breakPrx>& iceP_if, const ::std::shared_ptr<display>& iceP_inspect, const ::std::shared_ptr<elsifPrx>& iceP_method, int iceP_methods, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BEGIN_extend_for_name);
    outAsync->invoke(iceC_BEGIN_extend_for_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_freeze, iceP_hash, iceP_if, iceP_inspect, iceP_method, iceP_methods);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const nil&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

const ::std::string&
BEGIN::extendPrx::ice_staticId()
{
    return extend::ice_staticId();
}

namespace Ice
{
}
