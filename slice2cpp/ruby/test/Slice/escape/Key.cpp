//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Key.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_BEGIN_break_ids[2] =
{
    "::BEGIN::break",
    "::Ice::Object"
};
const ::std::string iceC_BEGIN_break_ops[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "instance_variable_set",
    "instance_variables",
    "to_a"
};
const ::std::string iceC_BEGIN_break_case_name = "case";
const ::std::string iceC_BEGIN_break_to_a_name = "to_a";
const ::std::string iceC_BEGIN_break_instance_variable_set_name = "instance_variable_set";
const ::std::string iceC_BEGIN_break_instance_variables_name = "instance_variables";

const ::IceInternal::DefaultValueFactoryInit<::BEGIN::display> iceC_BEGIN_display_init("::BEGIN::display");

const ::std::string iceC_BEGIN_elsif_ids[3] =
{
    "::BEGIN::break",
    "::BEGIN::elsif",
    "::Ice::Object"
};
const ::std::string iceC_BEGIN_elsif_ops[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "instance_variable_set",
    "instance_variables",
    "to_a"
};

const ::IceInternal::DefaultUserExceptionFactoryInit<::BEGIN::next> iceC_BEGIN_next_init("::BEGIN::next");

const ::IceInternal::DefaultUserExceptionFactoryInit<::BEGIN::nil> iceC_BEGIN_nil_init("::BEGIN::nil");

const ::std::string iceC_BEGIN_extend_ids[2] =
{
    "::BEGIN::extend",
    "::Ice::Object"
};
const ::std::string iceC_BEGIN_extend_ops[] =
{
    "for",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_BEGIN_extend_for_name = "for";

}

BEGIN::next::~next()
{
}

const ::std::string&
BEGIN::next::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::next";
    return typeId;
}

BEGIN::nil::~nil()
{
}

const ::std::string&
BEGIN::nil::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::nil";
    return typeId;
}

bool
BEGIN::_cpp_break::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_BEGIN_break_ids, iceC_BEGIN_break_ids + 2, s);
}

::std::vector<::std::string>
BEGIN::_cpp_break::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_BEGIN_break_ids[0], &iceC_BEGIN_break_ids[2]);
}

::std::string
BEGIN::_cpp_break::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
BEGIN::_cpp_break::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::break";
    return typeId;
}

/// \cond INTERNAL
bool
BEGIN::_cpp_break::_iceD_case(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_clone;
    int iceP_def;
    istr->readAll(iceP_clone, iceP_def);
    inS.endReadParams();
    this->_cpp_case(iceP_clone, iceP_def, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BEGIN::_cpp_break::_iceD_to_a(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->to_a(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BEGIN::_cpp_break::_iceD_instance_variable_set(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->instance_variable_set(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BEGIN::_cpp_break::_iceD_instance_variables(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->instance_variables(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BEGIN::_cpp_break::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_BEGIN_break_ops, iceC_BEGIN_break_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_BEGIN_break_ops)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_instance_variable_set(in, current);
        }
        case 6:
        {
            return _iceD_instance_variables(in, current);
        }
        case 7:
        {
            return _iceD_to_a(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
BEGIN::elsif::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_BEGIN_elsif_ids, iceC_BEGIN_elsif_ids + 3, s);
}

::std::vector<::std::string>
BEGIN::elsif::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_BEGIN_elsif_ids[0], &iceC_BEGIN_elsif_ids[3]);
}

::std::string
BEGIN::elsif::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
BEGIN::elsif::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::elsif";
    return typeId;
}

/// \cond INTERNAL
bool
BEGIN::elsif::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_BEGIN_elsif_ops, iceC_BEGIN_elsif_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_BEGIN_elsif_ops)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_instance_variable_set(in, current);
        }
        case 6:
        {
            return _iceD_instance_variables(in, current);
        }
        case 7:
        {
            return _iceD_to_a(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
BEGIN::extend::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_BEGIN_extend_ids, iceC_BEGIN_extend_ids + 2, s);
}

::std::vector<::std::string>
BEGIN::extend::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_BEGIN_extend_ids[0], &iceC_BEGIN_extend_ids[2]);
}

::std::string
BEGIN::extend::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
BEGIN::extend::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::extend";
    return typeId;
}

/// \cond INTERNAL
bool
BEGIN::extend::_iceD_for(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<display> iceP_freeze;
    ::std::shared_ptr<::Ice::Value> iceP_hash;
    ::std::shared_ptr<breakPrx> iceP_if;
    ::std::shared_ptr<display> iceP_inspect;
    ::std::shared_ptr<::Ice::Value> iceP_method;
    int iceP_methods;
    istr->readAll(iceP_freeze, iceP_hash, iceP_if, iceP_inspect, iceP_method, iceP_methods);
    istr->readPendingValues();
    inS.endReadParams();
    END ret = this->_cpp_for(::std::move(iceP_freeze), ::std::move(iceP_hash), ::std::move(iceP_if), ::std::move(iceP_inspect), ::std::move(iceP_method), iceP_methods, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BEGIN::extend::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_BEGIN_extend_ops, iceC_BEGIN_extend_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_BEGIN_extend_ops)
    {
        case 0:
        {
            return _iceD_for(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

BEGIN::display::~display()
{
}

const ::std::string&
BEGIN::display::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::display";
    return typeId;
}

/// \cond INTERNAL
void
BEGIN::breakPrx::_iceI_case(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_clone, int iceP_def, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BEGIN_break_case_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_clone, iceP_def);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BEGIN::breakPrx::_iceI_to_a(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BEGIN_break_to_a_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BEGIN::breakPrx::_iceI_instance_variable_set(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BEGIN_break_instance_variable_set_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
BEGIN::breakPrx::_iceI_instance_variables(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_BEGIN_break_instance_variables_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
BEGIN::breakPrx::_newInstance() const
{
    return ::IceInternal::createProxy<breakPrx>();
}
/// \endcond

const ::std::string&
BEGIN::breakPrx::ice_staticId()
{
    return _cpp_break::ice_staticId();
}

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
BEGIN::elsifPrx::_newInstance() const
{
    return ::IceInternal::createProxy<elsifPrx>();
}
/// \endcond

const ::std::string&
BEGIN::elsifPrx::ice_staticId()
{
    return elsif::ice_staticId();
}

/// \cond INTERNAL
void
BEGIN::extendPrx::_iceI_for(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::BEGIN::END>>& outAsync, const ::std::shared_ptr<display>& iceP_freeze, const ::std::shared_ptr<::Ice::Value>& iceP_hash, const ::std::shared_ptr<breakPrx>& iceP_if, const ::std::shared_ptr<display>& iceP_inspect, const ::std::shared_ptr<::Ice::Value>& iceP_method, int iceP_methods, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_BEGIN_extend_for_name);
    outAsync->invoke(iceC_BEGIN_extend_for_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_freeze, iceP_hash, iceP_if, iceP_inspect, iceP_method, iceP_methods);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const nil&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
BEGIN::extendPrx::_newInstance() const
{
    return ::IceInternal::createProxy<extendPrx>();
}
/// \endcond

const ::std::string&
BEGIN::extendPrx::ice_staticId()
{
    return extend::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_BEGIN_break_case_name = "case";

const ::std::string iceC_BEGIN_break_to_a_name = "to_a";

const ::std::string iceC_BEGIN_break_instance_variable_set_name = "instance_variable_set";

const ::std::string iceC_BEGIN_break_instance_variables_name = "instance_variables";

const ::std::string iceC_BEGIN_extend_for_name = "for";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::BEGIN::next> iceC_BEGIN_next_init("::BEGIN::next");

}

BEGIN::next::next(::Ice::Int _cpp_new) :
    ::Ice::UserException(),
    _cpp_new(_cpp_new)
{
}
BEGIN::next::~next()
{
}

::std::string
BEGIN::next::ice_id() const
{
    return "::BEGIN::next";
}

BEGIN::next*
BEGIN::next::ice_clone() const
{
    return new next(*this);
}

void
BEGIN::next::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
BEGIN::next::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::BEGIN::next", -1, true);
    ::Ice::StreamWriter< next, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
BEGIN::next::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< next, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::BEGIN::nil> iceC_BEGIN_nil_init("::BEGIN::nil");

}

BEGIN::nil::nil(::Ice::Int _cpp_new, ::Ice::Int _cpp_not, ::Ice::Int _cpp_or) :
    next(_cpp_new),
    _cpp_not(_cpp_not),
    _cpp_or(_cpp_or)
{
}
BEGIN::nil::~nil()
{
}

::std::string
BEGIN::nil::ice_id() const
{
    return "::BEGIN::nil";
}

BEGIN::nil*
BEGIN::nil::ice_clone() const
{
    return new nil(*this);
}

void
BEGIN::nil::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
BEGIN::nil::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::BEGIN::nil", -1, false);
    ::Ice::StreamWriter< nil, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    next::_writeImpl(ostr);
}

void
BEGIN::nil::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< nil, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    next::_readImpl(istr);
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::BEGIN::upCast(_cpp_break* p) { return p; }

void
::IceProxy::BEGIN::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< _cpp_break>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new _cpp_break;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::BEGIN::_cpp_break::_iceI_begin_case(::Ice::Int iceP_clone, ::Ice::Int iceP_def, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BEGIN_break_case_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BEGIN_break_case_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_clone);
        ostr->write(iceP_def);
        result->endWriteParams();
        result->invoke(iceC_BEGIN_break_case_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BEGIN::_cpp_break::end_case(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BEGIN_break_case_name);
}

::Ice::AsyncResultPtr
IceProxy::BEGIN::_cpp_break::_iceI_begin_to_a(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BEGIN_break_to_a_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BEGIN_break_to_a_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BEGIN_break_to_a_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BEGIN::_cpp_break::end_to_a(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BEGIN_break_to_a_name);
}

::Ice::AsyncResultPtr
IceProxy::BEGIN::_cpp_break::_iceI_begin_instance_variable_set(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BEGIN_break_instance_variable_set_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BEGIN_break_instance_variable_set_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BEGIN_break_instance_variable_set_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BEGIN::_cpp_break::end_instance_variable_set(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BEGIN_break_instance_variable_set_name);
}

::Ice::AsyncResultPtr
IceProxy::BEGIN::_cpp_break::_iceI_begin_instance_variables(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BEGIN_break_instance_variables_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BEGIN_break_instance_variables_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_BEGIN_break_instance_variables_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::BEGIN::_cpp_break::end_instance_variables(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_BEGIN_break_instance_variables_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::BEGIN::_cpp_break::_newInstance() const
{
    return new _cpp_break;
}
/// \endcond

const ::std::string&
IceProxy::BEGIN::_cpp_break::ice_staticId()
{
    return ::BEGIN::_cpp_break::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::BEGIN::upCast(display* p) { return p; }

void
::IceProxy::BEGIN::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< display>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new display;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::BEGIN::display::_newInstance() const
{
    return new display;
}
/// \endcond

const ::std::string&
IceProxy::BEGIN::display::ice_staticId()
{
    return ::BEGIN::display::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::BEGIN::upCast(elsif* p) { return p; }

void
::IceProxy::BEGIN::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< elsif>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new elsif;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::BEGIN::elsif::_newInstance() const
{
    return new elsif;
}
/// \endcond

const ::std::string&
IceProxy::BEGIN::elsif::ice_staticId()
{
    return ::BEGIN::elsif::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::BEGIN::upCast(extend* p) { return p; }

void
::IceProxy::BEGIN::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< extend>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new extend;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::BEGIN::extend::_iceI_begin_for(const ::BEGIN::displayPtr& iceP_freeze, const ::BEGIN::elsifPtr& iceP_hash, const ::BEGIN::breakPrx& iceP_if, const ::BEGIN::displayPtr& iceP_inspect, const ::BEGIN::elsifPtr& iceP_method, ::Ice::Int iceP_methods, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_BEGIN_extend_for_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_BEGIN_extend_for_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_BEGIN_extend_for_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_freeze);
        ostr->write(iceP_hash);
        ostr->write(iceP_if);
        ostr->write(iceP_inspect);
        ostr->write(iceP_method);
        ostr->write(iceP_methods);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_BEGIN_extend_for_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::BEGIN::END
IceProxy::BEGIN::extend::end_for(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_BEGIN_extend_for_name);
    ::BEGIN::END ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::BEGIN::nil&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::BEGIN::extend::_newInstance() const
{
    return new extend;
}
/// \endcond

const ::std::string&
IceProxy::BEGIN::extend::ice_staticId()
{
    return ::BEGIN::extend::ice_staticId();
}

BEGIN::_cpp_break::~_cpp_break()
{
}

/// \cond INTERNAL
::Ice::Object* BEGIN::upCast(_cpp_break* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_BEGIN_break_ids[2] =
{
    "::BEGIN::break",
    "::Ice::Object"
};

}

bool
BEGIN::_cpp_break::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_BEGIN_break_ids, iceC_BEGIN_break_ids + 2, s);
}

::std::vector< ::std::string>
BEGIN::_cpp_break::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_BEGIN_break_ids[0], &iceC_BEGIN_break_ids[2]);
}

const ::std::string&
BEGIN::_cpp_break::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
BEGIN::_cpp_break::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::break";
    return typeId;
}

/// \cond INTERNAL
bool
BEGIN::_cpp_break::_iceD_case(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_clone;
    ::Ice::Int iceP_def;
    istr->read(iceP_clone);
    istr->read(iceP_def);
    inS.endReadParams();
    this->_cpp_case(iceP_clone, iceP_def, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BEGIN::_cpp_break::_iceD_to_a(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->to_a(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BEGIN::_cpp_break::_iceD_instance_variable_set(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->instance_variable_set(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
BEGIN::_cpp_break::_iceD_instance_variables(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->instance_variables(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_BEGIN_break_all[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "instance_variable_set",
    "instance_variables",
    "to_a"
};

}

/// \cond INTERNAL
bool
BEGIN::_cpp_break::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_BEGIN_break_all, iceC_BEGIN_break_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_BEGIN_break_all)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_instance_variable_set(in, current);
        }
        case 6:
        {
            return _iceD_instance_variables(in, current);
        }
        case 7:
        {
            return _iceD_to_a(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
BEGIN::_cpp_break::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< _cpp_break, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
BEGIN::_cpp_break::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< _cpp_break, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
BEGIN::_icePatchObjectPtr(breakPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = breakPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(_cpp_break::ice_staticId(), v);
    }
}
/// \endcond

BEGIN::display::~display()
{
}

/// \cond INTERNAL
::Ice::Object* BEGIN::upCast(display* p) { return p; }

/// \endcond
::Ice::ObjectPtr
BEGIN::display::ice_clone() const
{
    ::Ice::Object* p = new display(*this);
    return p;
}

namespace
{
const ::std::string iceC_BEGIN_display_ids[2] =
{
    "::BEGIN::display",
    "::Ice::Object"
};

}

bool
BEGIN::display::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_BEGIN_display_ids, iceC_BEGIN_display_ids + 2, s);
}

::std::vector< ::std::string>
BEGIN::display::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_BEGIN_display_ids[0], &iceC_BEGIN_display_ids[2]);
}

const ::std::string&
BEGIN::display::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
BEGIN::display::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::display";
    return typeId;
}

/// \cond STREAM
void
BEGIN::display::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< display, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
BEGIN::display::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< display, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::BEGIN::display> iceC_BEGIN_display_init("::BEGIN::display");
}

::Ice::ValueFactoryPtr
BEGIN::display::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::BEGIN::display::ice_staticId());
}

/// \cond INTERNAL
void
BEGIN::_icePatchObjectPtr(displayPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = displayPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(display::ice_staticId(), v);
    }
}
/// \endcond

BEGIN::elsif::~elsif()
{
}

/// \cond INTERNAL
::Ice::Object* BEGIN::upCast(elsif* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_BEGIN_elsif_ids[3] =
{
    "::BEGIN::break",
    "::BEGIN::elsif",
    "::Ice::Object"
};

}

bool
BEGIN::elsif::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_BEGIN_elsif_ids, iceC_BEGIN_elsif_ids + 3, s);
}

::std::vector< ::std::string>
BEGIN::elsif::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_BEGIN_elsif_ids[0], &iceC_BEGIN_elsif_ids[3]);
}

const ::std::string&
BEGIN::elsif::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
BEGIN::elsif::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::elsif";
    return typeId;
}

namespace
{
const ::std::string iceC_BEGIN_elsif_all[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "instance_variable_set",
    "instance_variables",
    "to_a"
};

}

/// \cond INTERNAL
bool
BEGIN::elsif::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_BEGIN_elsif_all, iceC_BEGIN_elsif_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_BEGIN_elsif_all)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_instance_variable_set(in, current);
        }
        case 6:
        {
            return _iceD_instance_variables(in, current);
        }
        case 7:
        {
            return _iceD_to_a(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
BEGIN::elsif::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< elsif, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
BEGIN::elsif::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< elsif, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
BEGIN::_icePatchObjectPtr(elsifPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = elsifPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(elsif::ice_staticId(), v);
    }
}
/// \endcond

BEGIN::extend::~extend()
{
}

/// \cond INTERNAL
::Ice::Object* BEGIN::upCast(extend* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_BEGIN_extend_ids[2] =
{
    "::BEGIN::extend",
    "::Ice::Object"
};

}

bool
BEGIN::extend::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_BEGIN_extend_ids, iceC_BEGIN_extend_ids + 2, s);
}

::std::vector< ::std::string>
BEGIN::extend::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_BEGIN_extend_ids[0], &iceC_BEGIN_extend_ids[2]);
}

const ::std::string&
BEGIN::extend::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
BEGIN::extend::ice_staticId()
{
    static const ::std::string typeId = "::BEGIN::extend";
    return typeId;
}

/// \cond INTERNAL
bool
BEGIN::extend::_iceD_for(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    displayPtr iceP_freeze;
    elsifPtr iceP_hash;
    breakPrx iceP_if;
    displayPtr iceP_inspect;
    elsifPtr iceP_method;
    ::Ice::Int iceP_methods;
    istr->read(iceP_freeze);
    istr->read(iceP_hash);
    istr->read(iceP_if);
    istr->read(iceP_inspect);
    istr->read(iceP_method);
    istr->read(iceP_methods);
    istr->readPendingValues();
    inS.endReadParams();
    END ret = this->_cpp_for(iceP_freeze, iceP_hash, iceP_if, iceP_inspect, iceP_method, iceP_methods, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_BEGIN_extend_all[] =
{
    "for",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
BEGIN::extend::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_BEGIN_extend_all, iceC_BEGIN_extend_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_BEGIN_extend_all)
    {
        case 0:
        {
            return _iceD_for(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
BEGIN::extend::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< extend, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
BEGIN::extend::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< extend, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
BEGIN::_icePatchObjectPtr(extendPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = extendPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(extend::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
