//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Key_h__
#define __Key_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace BEGIN
{

class _cpp_break;
class breakPrx;
class display;
class elsif;
class elsifPrx;
class extend;
class extendPrx;

}

namespace BEGIN
{

enum class END : unsigned char
{
    alias
};

struct _cpp_and
{
    int begin;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(begin);
    }
};

using rescue = ::std::vector<END>;

using ensure = ::std::map<::std::string, END>;

class next : public ::Ice::UserExceptionHelper<next, ::Ice::UserException>
{
public:

    virtual ~next();

    next(const next&) = default;

    next() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    next(int _cpp_new) :
        _cpp_new(_cpp_new)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(_cpp_new);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_new;
};

/// \cond INTERNAL
static next _iceS_next_init;
/// \endcond

class nil : public ::Ice::UserExceptionHelper<nil, next>
{
public:

    virtual ~nil();

    nil(const nil&) = default;

    nil() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    nil(int _cpp_new, int _cpp_not, int _cpp_or) :
        ::Ice::UserExceptionHelper<nil, next>(_cpp_new),
        _cpp_not(_cpp_not),
        _cpp_or(_cpp_or)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(_cpp_new, _cpp_not, _cpp_or);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_not;
    int _cpp_or;
};

constexpr int redo = 1;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace BEGIN
{

class _cpp_break : public virtual ::Ice::Object
{
public:

    using ProxyType = breakPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_case(int clone, int def, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_case(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void to_a(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_to_a(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void instance_variable_set(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_instance_variable_set(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void instance_variables(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_instance_variables(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class elsif : public virtual _cpp_break
{
public:

    using ProxyType = elsifPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class extend : public virtual ::Ice::Object
{
public:

    using ProxyType = extendPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual END _cpp_for(::std::shared_ptr<display> freeze, ::std::shared_ptr<elsifPrx> hash, ::std::shared_ptr<breakPrx> _cpp_if, ::std::shared_ptr<display> inspect, ::std::shared_ptr<elsifPrx> method, int methods, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_for(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace BEGIN
{

class display : public ::Ice::ValueHelper<display, ::Ice::Value>
{
public:

    virtual ~display();

    display() = default;

    display(const display&) = default;
    display(display&&) = default;
    display& operator=(const display&) = default;
    display& operator=(display&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    display(int when, int _cpp_do, const ::std::shared_ptr<::BEGIN::breakPrx>& dup, int _cpp_else) :
        when(when),
        _cpp_do(_cpp_do),
        dup(dup),
        _cpp_else(_cpp_else)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const ::std::shared_ptr<::BEGIN::breakPrx>&, const int&> ice_tuple() const
    {
        return std::tie(when, _cpp_do, dup, _cpp_else);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int when;
    int _cpp_do;
    ::std::shared_ptr<::BEGIN::breakPrx> dup;
    int _cpp_else;
};

/// \cond INTERNAL
static display _iceS_display_init;
/// \endcond

}

namespace BEGIN
{

class breakPrx : public virtual ::Ice::Proxy<breakPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_case(int clone, int def, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &breakPrx::_iceI_case, clone, def, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto caseAsync(int clone, int def, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &breakPrx::_iceI_case, clone, def, context);
    }

    ::std::function<void()>
    caseAsync(int clone, int def,
              ::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &BEGIN::breakPrx::_iceI_case, clone, def, context);
    }

    /// \cond INTERNAL
    void _iceI_case(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, int, const ::Ice::Context&);
    /// \endcond

    void to_a(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &breakPrx::_iceI_to_a, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto to_aAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &breakPrx::_iceI_to_a, context);
    }

    ::std::function<void()>
    to_aAsync(::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &BEGIN::breakPrx::_iceI_to_a, context);
    }

    /// \cond INTERNAL
    void _iceI_to_a(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void instance_variable_set(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &breakPrx::_iceI_instance_variable_set, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto instance_variable_setAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &breakPrx::_iceI_instance_variable_set, context);
    }

    ::std::function<void()>
    instance_variable_setAsync(::std::function<void()> response,
                               ::std::function<void(::std::exception_ptr)> ex = nullptr,
                               ::std::function<void(bool)> sent = nullptr,
                               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &BEGIN::breakPrx::_iceI_instance_variable_set, context);
    }

    /// \cond INTERNAL
    void _iceI_instance_variable_set(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void instance_variables(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &breakPrx::_iceI_instance_variables, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto instance_variablesAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &breakPrx::_iceI_instance_variables, context);
    }

    ::std::function<void()>
    instance_variablesAsync(::std::function<void()> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &BEGIN::breakPrx::_iceI_instance_variables, context);
    }

    /// \cond INTERNAL
    void _iceI_instance_variables(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    breakPrx() = default;
    friend ::std::shared_ptr<breakPrx> IceInternal::createProxy<breakPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class elsifPrx : public virtual ::Ice::Proxy<elsifPrx, breakPrx>
{
public:

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    elsifPrx() = default;
    friend ::std::shared_ptr<elsifPrx> IceInternal::createProxy<elsifPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class extendPrx : public virtual ::Ice::Proxy<extendPrx, ::Ice::ObjectPrx>
{
public:

    END _cpp_for(const ::std::shared_ptr<display>& freeze, const ::std::shared_ptr<elsifPrx>& hash, const ::std::shared_ptr<breakPrx>& _cpp_if, const ::std::shared_ptr<display>& inspect, const ::std::shared_ptr<elsifPrx>& method, int methods, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::BEGIN::END>(true, this, &extendPrx::_iceI_for, freeze, hash, _cpp_if, inspect, method, methods, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto forAsync(const ::std::shared_ptr<display>& freeze, const ::std::shared_ptr<elsifPrx>& hash, const ::std::shared_ptr<breakPrx>& _cpp_if, const ::std::shared_ptr<display>& inspect, const ::std::shared_ptr<elsifPrx>& method, int methods, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::BEGIN::END>>().get_future())
    {
        return _makePromiseOutgoing<::BEGIN::END, P>(false, this, &extendPrx::_iceI_for, freeze, hash, _cpp_if, inspect, method, methods, context);
    }

    ::std::function<void()>
    forAsync(const ::std::shared_ptr<display>& freeze, const ::std::shared_ptr<elsifPrx>& hash, const ::std::shared_ptr<breakPrx>& _cpp_if, const ::std::shared_ptr<display>& inspect, const ::std::shared_ptr<elsifPrx>& method, int methods,
             ::std::function<void(::BEGIN::END)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::BEGIN::END>(std::move(response), std::move(ex), std::move(sent), this, &BEGIN::extendPrx::_iceI_for, freeze, hash, _cpp_if, inspect, method, methods, context);
    }

    /// \cond INTERNAL
    void _iceI_for(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::BEGIN::END>>&, const ::std::shared_ptr<display>&, const ::std::shared_ptr<elsifPrx>&, const ::std::shared_ptr<breakPrx>&, const ::std::shared_ptr<display>&, const ::std::shared_ptr<elsifPrx>&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    extendPrx() = default;
    friend ::std::shared_ptr<extendPrx> IceInternal::createProxy<extendPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::BEGIN::END>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::BEGIN::_cpp_and>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::BEGIN::_cpp_and, S>
{
    static void read(S* istr, ::BEGIN::_cpp_and& v)
    {
        istr->readAll(v.begin);
    }
};

template<typename S>
struct StreamReader<::BEGIN::display, S>
{
    static void read(S* istr, ::BEGIN::display& v)
    {
        istr->readAll(v.when, v._cpp_do, v.dup, v._cpp_else);
    }
};

template<typename S>
struct StreamReader<::BEGIN::next, S>
{
    static void read(S* istr, ::BEGIN::next& v)
    {
        istr->readAll(v._cpp_new);
    }
};

template<typename S>
struct StreamWriter<::BEGIN::nil, S>
{
    static void write(S* ostr, const ::BEGIN::nil& v)
    {
        ostr->writeAll(v._cpp_not, v._cpp_or);
    }
};

template<typename S>
struct StreamReader<::BEGIN::nil, S>
{
    static void read(S* istr, ::BEGIN::nil& v)
    {
        istr->readAll(v._cpp_not, v._cpp_or);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace BEGIN
{

using breakPtr = ::std::shared_ptr<_cpp_break>;
using breakPrxPtr = ::std::shared_ptr<breakPrx>;

using displayPtr = ::std::shared_ptr<display>;

using elsifPtr = ::std::shared_ptr<elsif>;
using elsifPrxPtr = ::std::shared_ptr<elsifPrx>;

using extendPtr = ::std::shared_ptr<extend>;
using extendPrxPtr = ::std::shared_ptr<extendPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace BEGIN
{

class _cpp_break;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_break>&);
::IceProxy::Ice::Object* upCast(_cpp_break*);
/// \endcond

class elsif;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< elsif>&);
::IceProxy::Ice::Object* upCast(elsif*);
/// \endcond

class extend;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< extend>&);
::IceProxy::Ice::Object* upCast(extend*);
/// \endcond

}

}

namespace BEGIN
{
typedef ::IceInternal::ProxyHandle< ::IceProxy::BEGIN::_cpp_break> breakPrx;
typedef breakPrx breakPrxPtr;

class _cpp_break;
using breakPtr = ::Ice::SharedPtr< _cpp_break>;

class display;
using displayPtr = ::Ice::SharedPtr<display>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::BEGIN::elsif> elsifPrx;
typedef elsifPrx elsifPrxPtr;

class elsif;
using elsifPtr = ::Ice::SharedPtr< elsif>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::BEGIN::extend> extendPrx;
typedef extendPrx extendPrxPtr;

class extend;
using extendPtr = ::Ice::SharedPtr< extend>;

}

namespace BEGIN
{

enum END
{
    alias
};

struct _cpp_and
{
    ::Ice::Int begin;

    bool operator==(const _cpp_and& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(begin != rhs_.begin)
        {
            return false;
        }
        return true;
    }

    bool operator<(const _cpp_and& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(begin < rhs_.begin)
        {
            return true;
        }
        else if(rhs_.begin < begin)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const _cpp_and& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const _cpp_and& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const _cpp_and& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const _cpp_and& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector<END> rescue;

typedef ::std::map< ::std::string, END> ensure;

class next : public ::Ice::UserException
{
public:

    next() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit next(::Ice::Int _cpp_new);
    next(const next&) = default;
    virtual ~next();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual next* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int _cpp_new;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static next _iceS_next_init;
/// \endcond

class nil : public next
{
public:

    nil() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    nil(::Ice::Int _cpp_new, ::Ice::Int _cpp_not, ::Ice::Int _cpp_or);
    nil(const nil&) = default;
    virtual ~nil();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual nil* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int _cpp_not;
    ::Ice::Int _cpp_or;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

const ::Ice::Int redo = 1;

}

namespace BEGIN
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::BEGIN::_cpp_break::begin_case.
 * Create a wrapper instance by calling ::BEGIN::newCallback_break_case.
 */
class Callback_break_case_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_break_case_Base> Callback_break_casePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::BEGIN::_cpp_break::begin_to_a.
 * Create a wrapper instance by calling ::BEGIN::newCallback_break_to_a.
 */
class Callback_break_to_a_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_break_to_a_Base> Callback_break_to_aPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::BEGIN::_cpp_break::begin_instance_variable_set.
 * Create a wrapper instance by calling ::BEGIN::newCallback_break_instance_variable_set.
 */
class Callback_break_instance_variable_set_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_break_instance_variable_set_Base> Callback_break_instance_variable_setPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::BEGIN::_cpp_break::begin_instance_variables.
 * Create a wrapper instance by calling ::BEGIN::newCallback_break_instance_variables.
 */
class Callback_break_instance_variables_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_break_instance_variables_Base> Callback_break_instance_variablesPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::BEGIN::extend::begin_for.
 * Create a wrapper instance by calling ::BEGIN::newCallback_extend_for.
 */
class Callback_extend_for_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_extend_for_Base> Callback_extend_forPtr;

}

namespace IceProxy
{

namespace BEGIN
{

class _cpp_break : public virtual ::Ice::Proxy<_cpp_break, ::IceProxy::Ice::Object>
{
public:

    void _cpp_case(::Ice::Int clone, ::Ice::Int def, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_case(_iceI_begin_case(clone, def, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int clone, ::Ice::Int def, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_case(clone, def, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int clone, ::Ice::Int def, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(clone, def, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int clone, ::Ice::Int def, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(clone, def, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int clone, ::Ice::Int def, const ::BEGIN::Callback_break_casePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(clone, def, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int clone, ::Ice::Int def, const ::Ice::Context& context, const ::BEGIN::Callback_break_casePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(clone, def, context, cb, cookie);
    }

    void end_case(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_case(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void to_a(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_to_a(_iceI_begin_to_a(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_to_a(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_to_a(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_to_a(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_to_a(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_to_a(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_to_a(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_to_a(const ::BEGIN::Callback_break_to_aPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_to_a(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_to_a(const ::Ice::Context& context, const ::BEGIN::Callback_break_to_aPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_to_a(context, cb, cookie);
    }

    void end_to_a(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_to_a(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void instance_variable_set(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_instance_variable_set(_iceI_begin_instance_variable_set(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_instance_variable_set(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_instance_variable_set(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_instance_variable_set(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_instance_variable_set(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_instance_variable_set(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_instance_variable_set(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_instance_variable_set(const ::BEGIN::Callback_break_instance_variable_setPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_instance_variable_set(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_instance_variable_set(const ::Ice::Context& context, const ::BEGIN::Callback_break_instance_variable_setPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_instance_variable_set(context, cb, cookie);
    }

    void end_instance_variable_set(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_instance_variable_set(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void instance_variables(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_instance_variables(_iceI_begin_instance_variables(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_instance_variables(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_instance_variables(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_instance_variables(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_instance_variables(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_instance_variables(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_instance_variables(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_instance_variables(const ::BEGIN::Callback_break_instance_variablesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_instance_variables(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_instance_variables(const ::Ice::Context& context, const ::BEGIN::Callback_break_instance_variablesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_instance_variables(context, cb, cookie);
    }

    void end_instance_variables(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_instance_variables(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class elsif : public virtual ::Ice::Proxy<elsif, ::IceProxy::BEGIN::_cpp_break>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class extend : public virtual ::Ice::Proxy<extend, ::IceProxy::Ice::Object>
{
public:

    ::BEGIN::END _cpp_for(const ::BEGIN::displayPtr& freeze, const ::BEGIN::elsifPrx& hash, const ::BEGIN::breakPrx& _cpp_if, const ::BEGIN::displayPtr& inspect, const ::BEGIN::elsifPrx& method, ::Ice::Int methods, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_for(_iceI_begin_for(freeze, hash, _cpp_if, inspect, method, methods, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_for(const ::BEGIN::displayPtr& freeze, const ::BEGIN::elsifPrx& hash, const ::BEGIN::breakPrx& _cpp_if, const ::BEGIN::displayPtr& inspect, const ::BEGIN::elsifPrx& method, ::Ice::Int methods, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_for(freeze, hash, _cpp_if, inspect, method, methods, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_for(const ::BEGIN::displayPtr& freeze, const ::BEGIN::elsifPrx& hash, const ::BEGIN::breakPrx& _cpp_if, const ::BEGIN::displayPtr& inspect, const ::BEGIN::elsifPrx& method, ::Ice::Int methods, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_for(freeze, hash, _cpp_if, inspect, method, methods, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_for(const ::BEGIN::displayPtr& freeze, const ::BEGIN::elsifPrx& hash, const ::BEGIN::breakPrx& _cpp_if, const ::BEGIN::displayPtr& inspect, const ::BEGIN::elsifPrx& method, ::Ice::Int methods, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_for(freeze, hash, _cpp_if, inspect, method, methods, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_for(const ::BEGIN::displayPtr& freeze, const ::BEGIN::elsifPrx& hash, const ::BEGIN::breakPrx& _cpp_if, const ::BEGIN::displayPtr& inspect, const ::BEGIN::elsifPrx& method, ::Ice::Int methods, const ::BEGIN::Callback_extend_forPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_for(freeze, hash, _cpp_if, inspect, method, methods, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_for(const ::BEGIN::displayPtr& freeze, const ::BEGIN::elsifPrx& hash, const ::BEGIN::breakPrx& _cpp_if, const ::BEGIN::displayPtr& inspect, const ::BEGIN::elsifPrx& method, ::Ice::Int methods, const ::Ice::Context& context, const ::BEGIN::Callback_extend_forPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_for(freeze, hash, _cpp_if, inspect, method, methods, context, cb, cookie);
    }

    ::BEGIN::END end_for(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_for(const ::BEGIN::displayPtr&, const ::BEGIN::elsifPrx&, const ::BEGIN::breakPrx&, const ::BEGIN::displayPtr&, const ::BEGIN::elsifPrx&, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace BEGIN
{

class _cpp_break : public virtual ::Ice::Object
{
public:

    typedef breakPrx ProxyType;

    virtual ~_cpp_break();
    _cpp_break() = default;
    _cpp_break(const _cpp_break&) = default;
    _cpp_break& operator=(const _cpp_break&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_case(::Ice::Int clone, ::Ice::Int def, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_case(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void to_a(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_to_a(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void instance_variable_set(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_instance_variable_set(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void instance_variables(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_instance_variables(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class elsif : public virtual _cpp_break
{
public:

    typedef elsifPrx ProxyType;

    virtual ~elsif();
    elsif() = default;
    elsif(const elsif&) = default;
    elsif& operator=(const elsif&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class extend : public virtual ::Ice::Object
{
public:

    typedef extendPrx ProxyType;

    virtual ~extend();
    extend() = default;
    extend(const extend&) = default;
    extend& operator=(const extend&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual END _cpp_for(const displayPtr& freeze, const elsifPrx& hash, const breakPrx& _cpp_if, const displayPtr& inspect, const elsifPrx& method, ::Ice::Int methods, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_for(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

namespace BEGIN
{

class display : public ::Ice::ValueHelper<display, ::Ice::Value>
{
public:

    virtual ~display();

    display() = default;

    display(const display&) = default;
    display(display&&) = default;
    display& operator=(const display&) = default;
    display& operator=(display&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    display(::Ice::Int when, ::Ice::Int _cpp_do, const ::BEGIN::breakPrx& dup, ::Ice::Int _cpp_else) :
        when(when),
        _cpp_do(_cpp_do),
        dup(dup),
        _cpp_else(_cpp_else)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Int&, const ::Ice::Int&, const ::BEGIN::breakPrx&, const ::Ice::Int&> ice_tuple() const
    {
        return std::tie(when, _cpp_do, dup, _cpp_else);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Ice::Int when;
    ::Ice::Int _cpp_do;
    ::BEGIN::breakPrx dup;
    ::Ice::Int _cpp_else;
};

/// \cond INTERNAL
static display _iceS_display_init;
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::BEGIN::END>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::BEGIN::_cpp_and>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::BEGIN::_cpp_and, S>
{
    static void write(S* ostr, const ::BEGIN::_cpp_and& v)
    {
        ostr->write(v.begin);
    }
};

template<typename S>
struct StreamReader< ::BEGIN::_cpp_and, S>
{
    static void read(S* istr, ::BEGIN::_cpp_and& v)
    {
        istr->read(v.begin);
    }
};

template<typename S>
struct StreamWriter< ::BEGIN::display, S>
{
    static void write(S* ostr, const ::BEGIN::display& v)
    {
        ostr->write(v.when);
        ostr->write(v._cpp_do);
        ostr->write(v.dup);
        ostr->write(v._cpp_else);
    }
};

template<typename S>
struct StreamReader< ::BEGIN::display, S>
{
    static void read(S* istr, ::BEGIN::display& v)
    {
        istr->read(v.when);
        istr->read(v._cpp_do);
        istr->read(v.dup);
        istr->read(v._cpp_else);
    }
};

template<>
struct StreamableTraits< ::BEGIN::next>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::BEGIN::next, S>
{
    static void write(S* ostr, const ::BEGIN::next& v)
    {
        ostr->write(v._cpp_new);
    }
};

template<typename S>
struct StreamReader< ::BEGIN::next, S>
{
    static void read(S* istr, ::BEGIN::next& v)
    {
        istr->read(v._cpp_new);
    }
};

template<>
struct StreamableTraits< ::BEGIN::nil>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::BEGIN::nil, S>
{
    static void write(S* ostr, const ::BEGIN::nil& v)
    {
        ostr->write(v._cpp_not);
        ostr->write(v._cpp_or);
    }
};

template<typename S>
struct StreamReader< ::BEGIN::nil, S>
{
    static void read(S* istr, ::BEGIN::nil& v)
    {
        istr->read(v._cpp_not);
        istr->read(v._cpp_or);
    }
};

}
/// \endcond

namespace BEGIN
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::BEGIN::_cpp_break::begin_case.
 * Create a wrapper instance by calling ::BEGIN::newCallback_break_case.
 */
template<class T>
class CallbackNC_break_case : public Callback_break_case_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_break_case(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_case.
 */
template<class T> Callback_break_casePtr
newCallback_break_case(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_case<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_case.
 */
template<class T> Callback_break_casePtr
newCallback_break_case(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_case<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_case.
 */
template<class T> Callback_break_casePtr
newCallback_break_case(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_case<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_case.
 */
template<class T> Callback_break_casePtr
newCallback_break_case(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_case<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::BEGIN::_cpp_break::begin_case.
 * Create a wrapper instance by calling ::BEGIN::newCallback_break_case.
 */
template<class T, typename CT>
class Callback_break_case : public Callback_break_case_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_break_case(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_case.
 */
template<class T, typename CT> Callback_break_casePtr
newCallback_break_case(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_case<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_case.
 */
template<class T, typename CT> Callback_break_casePtr
newCallback_break_case(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_case<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_case.
 */
template<class T, typename CT> Callback_break_casePtr
newCallback_break_case(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_case<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_case.
 */
template<class T, typename CT> Callback_break_casePtr
newCallback_break_case(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_case<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::BEGIN::_cpp_break::begin_to_a.
 * Create a wrapper instance by calling ::BEGIN::newCallback_break_to_a.
 */
template<class T>
class CallbackNC_break_to_a : public Callback_break_to_a_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_break_to_a(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_to_a.
 */
template<class T> Callback_break_to_aPtr
newCallback_break_to_a(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_to_a<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_to_a.
 */
template<class T> Callback_break_to_aPtr
newCallback_break_to_a(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_to_a<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_to_a.
 */
template<class T> Callback_break_to_aPtr
newCallback_break_to_a(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_to_a<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_to_a.
 */
template<class T> Callback_break_to_aPtr
newCallback_break_to_a(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_to_a<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::BEGIN::_cpp_break::begin_to_a.
 * Create a wrapper instance by calling ::BEGIN::newCallback_break_to_a.
 */
template<class T, typename CT>
class Callback_break_to_a : public Callback_break_to_a_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_break_to_a(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_to_a.
 */
template<class T, typename CT> Callback_break_to_aPtr
newCallback_break_to_a(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_to_a<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_to_a.
 */
template<class T, typename CT> Callback_break_to_aPtr
newCallback_break_to_a(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_to_a<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_to_a.
 */
template<class T, typename CT> Callback_break_to_aPtr
newCallback_break_to_a(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_to_a<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_to_a.
 */
template<class T, typename CT> Callback_break_to_aPtr
newCallback_break_to_a(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_to_a<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::BEGIN::_cpp_break::begin_instance_variable_set.
 * Create a wrapper instance by calling ::BEGIN::newCallback_break_instance_variable_set.
 */
template<class T>
class CallbackNC_break_instance_variable_set : public Callback_break_instance_variable_set_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_break_instance_variable_set(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variable_set.
 */
template<class T> Callback_break_instance_variable_setPtr
newCallback_break_instance_variable_set(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_instance_variable_set<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variable_set.
 */
template<class T> Callback_break_instance_variable_setPtr
newCallback_break_instance_variable_set(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_instance_variable_set<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variable_set.
 */
template<class T> Callback_break_instance_variable_setPtr
newCallback_break_instance_variable_set(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_instance_variable_set<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variable_set.
 */
template<class T> Callback_break_instance_variable_setPtr
newCallback_break_instance_variable_set(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_instance_variable_set<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::BEGIN::_cpp_break::begin_instance_variable_set.
 * Create a wrapper instance by calling ::BEGIN::newCallback_break_instance_variable_set.
 */
template<class T, typename CT>
class Callback_break_instance_variable_set : public Callback_break_instance_variable_set_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_break_instance_variable_set(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variable_set.
 */
template<class T, typename CT> Callback_break_instance_variable_setPtr
newCallback_break_instance_variable_set(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_instance_variable_set<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variable_set.
 */
template<class T, typename CT> Callback_break_instance_variable_setPtr
newCallback_break_instance_variable_set(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_instance_variable_set<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variable_set.
 */
template<class T, typename CT> Callback_break_instance_variable_setPtr
newCallback_break_instance_variable_set(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_instance_variable_set<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variable_set.
 */
template<class T, typename CT> Callback_break_instance_variable_setPtr
newCallback_break_instance_variable_set(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_instance_variable_set<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::BEGIN::_cpp_break::begin_instance_variables.
 * Create a wrapper instance by calling ::BEGIN::newCallback_break_instance_variables.
 */
template<class T>
class CallbackNC_break_instance_variables : public Callback_break_instance_variables_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_break_instance_variables(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variables.
 */
template<class T> Callback_break_instance_variablesPtr
newCallback_break_instance_variables(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_instance_variables<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variables.
 */
template<class T> Callback_break_instance_variablesPtr
newCallback_break_instance_variables(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_instance_variables<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variables.
 */
template<class T> Callback_break_instance_variablesPtr
newCallback_break_instance_variables(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_instance_variables<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variables.
 */
template<class T> Callback_break_instance_variablesPtr
newCallback_break_instance_variables(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_instance_variables<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::BEGIN::_cpp_break::begin_instance_variables.
 * Create a wrapper instance by calling ::BEGIN::newCallback_break_instance_variables.
 */
template<class T, typename CT>
class Callback_break_instance_variables : public Callback_break_instance_variables_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_break_instance_variables(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variables.
 */
template<class T, typename CT> Callback_break_instance_variablesPtr
newCallback_break_instance_variables(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_instance_variables<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variables.
 */
template<class T, typename CT> Callback_break_instance_variablesPtr
newCallback_break_instance_variables(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_instance_variables<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variables.
 */
template<class T, typename CT> Callback_break_instance_variablesPtr
newCallback_break_instance_variables(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_instance_variables<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::break::begin_instance_variables.
 */
template<class T, typename CT> Callback_break_instance_variablesPtr
newCallback_break_instance_variables(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_instance_variables<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::BEGIN::extend::begin_for.
 * Create a wrapper instance by calling ::BEGIN::newCallback_extend_for.
 */
template<class T>
class CallbackNC_extend_for : public Callback_extend_for_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(END);

    CallbackNC_extend_for(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        extendPrx proxy = extendPrx::uncheckedCast(result->getProxy());
        END ret;
        try
        {
            ret = proxy->end_for(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::extend::begin_for.
 */
template<class T> Callback_extend_forPtr
newCallback_extend_for(const IceUtil::Handle<T>& instance, void (T::*cb)(END), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_extend_for<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::extend::begin_for.
 */
template<class T> Callback_extend_forPtr
newCallback_extend_for(T* instance, void (T::*cb)(END), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_extend_for<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::BEGIN::extend::begin_for.
 * Create a wrapper instance by calling ::BEGIN::newCallback_extend_for.
 */
template<class T, typename CT>
class Callback_extend_for : public Callback_extend_for_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(END, const CT&);

    Callback_extend_for(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        extendPrx proxy = extendPrx::uncheckedCast(result->getProxy());
        END ret;
        try
        {
            ret = proxy->end_for(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::extend::begin_for.
 */
template<class T, typename CT> Callback_extend_forPtr
newCallback_extend_for(const IceUtil::Handle<T>& instance, void (T::*cb)(END, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_extend_for<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::BEGIN::extend::begin_for.
 */
template<class T, typename CT> Callback_extend_forPtr
newCallback_extend_for(T* instance, void (T::*cb)(END, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_extend_for<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
