//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Key_h__
#define __Key_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace BEGIN
{


enum class END : unsigned char
{
    alias
};
struct _cpp_and;
class breakPrx;

using breakPrxPtr = ::std::optional<breakPrx>;
class display;

using displayPtr = ::std::shared_ptr<display>;
class elsifPrx;

using elsifPrxPtr = ::std::optional<elsifPrx>;

using rescue = ::std::vector<END>;

using ensure = ::std::map<::std::string, END>;
class extendPrx;

using extendPrxPtr = ::std::optional<extendPrx>;

constexpr ::std::int32_t redo = 1;

}

namespace BEGIN
{

class breakPrx : public ::Ice::Proxy<breakPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_case(::std::int32_t clone, ::std::int32_t def, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> caseAsync(::std::int32_t clone, ::std::int32_t def, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    caseAsync(::std::int32_t clone, ::std::int32_t def,
              ::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_case(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, ::std::int32_t, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    void to_a(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> to_aAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    to_aAsync(::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_to_a(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void instance_variable_set(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> instance_variable_setAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    instance_variable_setAsync(::std::function<void()> response,
                               ::std::function<void(::std::exception_ptr)> ex = nullptr,
                               ::std::function<void(bool)> sent = nullptr,
                               const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_instance_variable_set(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void instance_variables(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> instance_variablesAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    instance_variablesAsync(::std::function<void()> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_instance_variables(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit breakPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    breakPrx(const breakPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    breakPrx(breakPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    breakPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    breakPrx& operator=(const breakPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    breakPrx& operator=(breakPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static breakPrx _fromReference(::IceInternal::ReferencePtr ref) { return breakPrx(::std::move(ref)); }

protected:

    breakPrx() = default;

    explicit breakPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

class elsifPrx : public ::Ice::Proxy<elsifPrx, breakPrx>
{
public:

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

#if defined(__GNUC__)
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wextra" // initialize all virtual bases in correct order
#endif

    explicit elsifPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    elsifPrx(const elsifPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    elsifPrx(elsifPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    elsifPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    elsifPrx& operator=(const elsifPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    elsifPrx& operator=(elsifPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static elsifPrx _fromReference(::IceInternal::ReferencePtr ref) { return elsifPrx(::std::move(ref)); }

protected:

    elsifPrx() = default;

    explicit elsifPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond

#if defined(__GNUC__)
#   pragma GCC diagnostic pop
#endif
};

class extendPrx : public ::Ice::Proxy<extendPrx, ::Ice::ObjectPrx>
{
public:

    END _cpp_for(const ::std::shared_ptr<display>& freeze, const ::std::optional<elsifPrx>& hash, const ::std::optional<breakPrx>& _cpp_if, const ::std::shared_ptr<display>& inspect, const ::std::optional<elsifPrx>& method, ::std::int32_t methods, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<END> forAsync(const ::std::shared_ptr<display>& freeze, const ::std::optional<elsifPrx>& hash, const ::std::optional<breakPrx>& _cpp_if, const ::std::shared_ptr<display>& inspect, const ::std::optional<elsifPrx>& method, ::std::int32_t methods, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    forAsync(const ::std::shared_ptr<display>& freeze, const ::std::optional<elsifPrx>& hash, const ::std::optional<breakPrx>& _cpp_if, const ::std::shared_ptr<display>& inspect, const ::std::optional<elsifPrx>& method, ::std::int32_t methods,
             ::std::function<void(::BEGIN::END)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_for(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<END>>&, const ::std::shared_ptr<display>&, const ::std::optional<elsifPrx>&, const ::std::optional<breakPrx>&, const ::std::shared_ptr<display>&, const ::std::optional<elsifPrx>&, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit extendPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    extendPrx(const extendPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    extendPrx(extendPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    extendPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    extendPrx& operator=(const extendPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    extendPrx& operator=(extendPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static extendPrx _fromReference(::IceInternal::ReferencePtr ref) { return extendPrx(::std::move(ref)); }

protected:

    extendPrx() = default;

    explicit extendPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace BEGIN
{

struct _cpp_and
{
    ::std::int32_t begin;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(begin);
    }
};

class display : public ::Ice::ValueHelper<display, ::Ice::Value>
{
public:

    virtual ~display();

    display() = default;

    display(const display&) = default;
    display(display&&) = default;
    display& operator=(const display&) = default;
    display& operator=(display&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    display(::std::int32_t when, ::std::int32_t _cpp_do, const ::std::optional<::BEGIN::breakPrx>& dup, ::std::int32_t _cpp_else) :
        when(when),
        _cpp_do(_cpp_do),
        dup(dup),
        _cpp_else(_cpp_else)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::optional<::BEGIN::breakPrx>&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(when, _cpp_do, dup, _cpp_else);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t when;
    ::std::int32_t _cpp_do;
    ::std::optional<::BEGIN::breakPrx> dup;
    ::std::int32_t _cpp_else;
};

/// \cond INTERNAL
static display _iceS_display_init;
/// \endcond

class next : public ::Ice::UserExceptionHelper<next, ::Ice::UserException>
{
public:

    virtual ~next();

    next(const next&) = default;

    next() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    next(::std::int32_t _cpp_new) :
        _cpp_new(_cpp_new)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(_cpp_new);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t _cpp_new;
};

class nil : public ::Ice::UserExceptionHelper<nil, next>
{
public:

    virtual ~nil();

    nil(const nil&) = default;

    nil() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    nil(::std::int32_t _cpp_new, ::std::int32_t _cpp_not, ::std::int32_t _cpp_or) :
        ::Ice::UserExceptionHelper<nil, next>(_cpp_new),
        _cpp_not(_cpp_not),
        _cpp_or(_cpp_or)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(_cpp_new, _cpp_not, _cpp_or);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::int32_t _cpp_not;
    ::std::int32_t _cpp_or;
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace BEGIN
{

class _cpp_break : public virtual ::Ice::Object
{
public:

    using ProxyType = breakPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_case(::std::int32_t clone, ::std::int32_t def, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_case(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void to_a(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_to_a(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void instance_variable_set(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_instance_variable_set(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void instance_variables(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_instance_variables(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using breakPtr = ::std::shared_ptr<_cpp_break>;

class elsif : public virtual _cpp_break
{
public:

    using ProxyType = elsifPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using elsifPtr = ::std::shared_ptr<elsif>;

class extend : public virtual ::Ice::Object
{
public:

    using ProxyType = extendPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual END _cpp_for(::std::shared_ptr<display> freeze, ::std::optional<elsifPrx> hash, ::std::optional<breakPrx> _cpp_if, ::std::shared_ptr<display> inspect, ::std::optional<elsifPrx> method, ::std::int32_t methods, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_for(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using extendPtr = ::std::shared_ptr<extend>;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::BEGIN::END>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::BEGIN::_cpp_and>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::BEGIN::_cpp_and, S>
{
    static void read(S* istr, ::BEGIN::_cpp_and& v)
    {
        istr->readAll(v.begin);
    }
};

template<typename S>
struct StreamReader<::BEGIN::display, S>
{
    static void read(S* istr, ::BEGIN::display& v)
    {
        istr->readAll(v.when, v._cpp_do, v.dup, v._cpp_else);
    }
};

template<typename S>
struct StreamReader<::BEGIN::next, S>
{
    static void read(S* istr, ::BEGIN::next& v)
    {
        istr->readAll(v._cpp_new);
    }
};

template<typename S>
struct StreamWriter<::BEGIN::nil, S>
{
    static void write(S* ostr, const ::BEGIN::nil& v)
    {
        ostr->writeAll(v._cpp_not, v._cpp_or);
    }
};

template<typename S>
struct StreamReader<::BEGIN::nil, S>
{
    static void read(S* istr, ::BEGIN::nil& v)
    {
        istr->readAll(v._cpp_not, v._cpp_or);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
