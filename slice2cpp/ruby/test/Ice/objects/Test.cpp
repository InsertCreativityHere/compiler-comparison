//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::Base> iceC_Test_Base_init("::Test::Base");

const ::IceInternal::DefaultValueFactoryInit<::Test::A> iceC_Test_A_init("::Test::A");

const ::IceInternal::DefaultValueFactoryInit<::Test::B> iceC_Test_B_init("::Test::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::D> iceC_Test_D_init("::Test::D");

const ::IceInternal::DefaultValueFactoryInit<::Test::E> iceC_Test_E_init("::Test::E");

const ::IceInternal::DefaultValueFactoryInit<::Test::F> iceC_Test_F_init("::Test::F");

const ::IceInternal::DefaultValueFactoryInit<::Test::G> iceC_Test_G_init("::Test::G");

const ::std::string iceC_Test_I_ids[2] =
{
    "::Ice::Object",
    "::Test::I"
};
const ::std::string iceC_Test_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

const ::std::string iceC_Test_J_ids[3] =
{
    "::Ice::Object",
    "::Test::I",
    "::Test::J"
};
const ::std::string iceC_Test_J_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

const ::IceInternal::DefaultValueFactoryInit<::Test::Compact> iceC_Test_Compact_init("::Test::Compact");
const ::IceInternal::CompactIdInit iceC_Test_Compact_compactIdInit ("::Test::Compact", 1);

const ::IceInternal::DefaultValueFactoryInit<::Test::CompactExt> iceC_Test_CompactExt_init("::Test::CompactExt");
const ::IceInternal::CompactIdInit iceC_Test_CompactExt_compactIdInit ("::Test::CompactExt", 789);

const ::IceInternal::DefaultValueFactoryInit<::Test::A1> iceC_Test_A1_init("::Test::A1");

const ::IceInternal::DefaultValueFactoryInit<::Test::B1> iceC_Test_B1_init("::Test::B1");

const ::IceInternal::DefaultValueFactoryInit<::Test::D1> iceC_Test_D1_init("::Test::D1");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::EBase> iceC_Test_EBase_init("::Test::EBase");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::EDerived> iceC_Test_EDerived_init("::Test::EDerived");

const ::IceInternal::DefaultValueFactoryInit<::Test::Recursive> iceC_Test_Recursive_init("::Test::Recursive");

const ::IceInternal::DefaultValueFactoryInit<::Test::K> iceC_Test_K_init("::Test::K");

const ::IceInternal::DefaultValueFactoryInit<::Test::L> iceC_Test_L_init("::Test::L");

const ::IceInternal::DefaultValueFactoryInit<::Test::M> iceC_Test_M_init("::Test::M");

const ::IceInternal::DefaultValueFactoryInit<::Test::F3> iceC_Test_F3_init("::Test::F3");

const ::std::string iceC_Test_Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};
const ::std::string iceC_Test_Initial_ops[] =
{
    "acceptsClassCycles",
    "getAMDMB",
    "getAll",
    "getB1",
    "getB2",
    "getC",
    "getCompact",
    "getD",
    "getD1",
    "getE",
    "getF",
    "getK",
    "getMB",
    "hasF3",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBaseSeq",
    "opF1",
    "opF2",
    "opF3",
    "opM",
    "opValue",
    "opValueMap",
    "opValueSeq",
    "setCycle",
    "setG",
    "setRecursive",
    "shutdown",
    "supportsClassGraphDepthMax",
    "throwEDerived"
};
const ::std::string iceC_Test_Initial_shutdown_name = "shutdown";
const ::std::string iceC_Test_Initial_getB1_name = "getB1";
const ::std::string iceC_Test_Initial_getB2_name = "getB2";
const ::std::string iceC_Test_Initial_getC_name = "getC";
const ::std::string iceC_Test_Initial_getD_name = "getD";
const ::std::string iceC_Test_Initial_getE_name = "getE";
const ::std::string iceC_Test_Initial_getF_name = "getF";
const ::std::string iceC_Test_Initial_setRecursive_name = "setRecursive";
const ::std::string iceC_Test_Initial_supportsClassGraphDepthMax_name = "supportsClassGraphDepthMax";
const ::std::string iceC_Test_Initial_setCycle_name = "setCycle";
const ::std::string iceC_Test_Initial_acceptsClassCycles_name = "acceptsClassCycles";
const ::std::string iceC_Test_Initial_getMB_name = "getMB";
const ::std::string iceC_Test_Initial_getAMDMB_name = "getAMDMB";
const ::std::string iceC_Test_Initial_getAll_name = "getAll";
const ::std::string iceC_Test_Initial_getK_name = "getK";
const ::std::string iceC_Test_Initial_opValue_name = "opValue";
const ::std::string iceC_Test_Initial_opValueSeq_name = "opValueSeq";
const ::std::string iceC_Test_Initial_opValueMap_name = "opValueMap";
const ::std::string iceC_Test_Initial_getD1_name = "getD1";
const ::std::string iceC_Test_Initial_throwEDerived_name = "throwEDerived";
const ::std::string iceC_Test_Initial_setG_name = "setG";
const ::std::string iceC_Test_Initial_opBaseSeq_name = "opBaseSeq";
const ::std::string iceC_Test_Initial_getCompact_name = "getCompact";
const ::std::string iceC_Test_Initial_opM_name = "opM";
const ::std::string iceC_Test_Initial_opF1_name = "opF1";
const ::std::string iceC_Test_Initial_opF2_name = "opF2";
const ::std::string iceC_Test_Initial_opF3_name = "opF3";
const ::std::string iceC_Test_Initial_hasF3_name = "hasF3";

}

Test::EBase::~EBase()
{
}

const ::std::string&
Test::EBase::ice_staticId()
{
    static const ::std::string typeId = "::Test::EBase";
    return typeId;
}

/// \cond STREAM
bool
Test::EBase::_usesClasses() const
{
    return true;
}
/// \endcond

Test::EDerived::~EDerived()
{
}

const ::std::string&
Test::EDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::EDerived";
    return typeId;
}

bool
Test::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_I_ids, iceC_Test_I_ids + 2, s);
}

::std::vector<::std::string>
Test::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_I_ids[0], &iceC_Test_I_ids[2]);
}

::std::string
Test::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::I";
    return typeId;
}

bool
Test::J::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_J_ids, iceC_Test_J_ids + 3, s);
}

::std::vector<::std::string>
Test::J::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_J_ids[0], &iceC_Test_J_ids[3]);
}

::std::string
Test::J::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::J::ice_staticId()
{
    static const ::std::string typeId = "::Test::J";
    return typeId;
}

bool
Test::Initial::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial_ids, iceC_Test_Initial_ids + 2, s);
}

::std::vector<::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Initial_ids[0], &iceC_Test_Initial_ids[2]);
}

::std::string
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getB1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<B> ret = this->getB1(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getB2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<B> ret = this->getB2(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<C> ret = this->getC(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<D> ret = this->getD(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getE(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<E> ret = this->getE(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getF(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<F> ret = this->getF(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_setRecursive(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<Recursive> iceP_p;
    istr->readAll(iceP_p);
    istr->readPendingValues();
    inS.endReadParams();
    this->setRecursive(::std::move(iceP_p), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsClassGraphDepthMax(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->supportsClassGraphDepthMax(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_setCycle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<Recursive> iceP_r;
    istr->readAll(iceP_r);
    istr->readPendingValues();
    inS.endReadParams();
    this->setCycle(::std::move(iceP_r), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_acceptsClassCycles(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->acceptsClassCycles(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

Test::Initial::GetMBMarshaledResult::GetMBMarshaledResult(const ::std::shared_ptr<B>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->writePendingValues();
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_getMB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setMarshaledResult(this->getMB(current));
    return true;
}
/// \endcond

Test::Initial::GetAMDMBMarshaledResult::GetAMDMBMarshaledResult(const ::std::shared_ptr<B>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->writePendingValues();
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_getAMDMB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->getAMDMBAsync(inA->response<GetAMDMBMarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getAll(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<B> iceP_b1;
    ::std::shared_ptr<B> iceP_b2;
    ::std::shared_ptr<C> iceP_theC;
    ::std::shared_ptr<D> iceP_theD;
    this->getAll(iceP_b1, iceP_b2, iceP_theC, iceP_theD, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_b1, iceP_b2, iceP_theC, iceP_theD);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getK(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<K> ret = this->getK(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opValue(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Ice::Value> iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<::Ice::Value> iceP_v2;
    ::std::shared_ptr<::Ice::Value> ret = this->opValue(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opValueSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ValueSeq iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ValueSeq iceP_v2;
    ValueSeq ret = this->opValueSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opValueMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ValueMap iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ValueMap iceP_v2;
    ValueMap ret = this->opValueMap(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getD1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<D1> iceP_d1;
    istr->readAll(iceP_d1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<D1> ret = this->getD1(::std::move(iceP_d1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwEDerived(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwEDerived(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_setG(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<G> iceP_theG;
    istr->readAll(iceP_theG);
    istr->readPendingValues();
    inS.endReadParams();
    this->setG(::std::move(iceP_theG), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opBaseSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    BaseSeq iceP_inSeq;
    istr->readAll(iceP_inSeq);
    istr->readPendingValues();
    inS.endReadParams();
    BaseSeq iceP_outSeq;
    BaseSeq ret = this->opBaseSeq(::std::move(iceP_inSeq), iceP_outSeq, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_outSeq, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getCompact(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<Compact> ret = this->getCompact(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opM(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<M> iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<M> iceP_v2;
    ::std::shared_ptr<M> ret = this->opM(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opF1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<F1> iceP_f11;
    istr->readAll(iceP_f11);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<F1> iceP_f12;
    ::std::shared_ptr<F1> ret = this->opF1(::std::move(iceP_f11), iceP_f12, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_f12, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opF2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<F2Prx> iceP_f21;
    istr->readAll(iceP_f21);
    inS.endReadParams();
    ::std::shared_ptr<F2Prx> iceP_f22;
    ::std::shared_ptr<F2Prx> ret = this->opF2(::std::move(iceP_f21), iceP_f22, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_f22, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opF3(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<F3> iceP_f31;
    istr->readAll(iceP_f31);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<F3> iceP_f32;
    ::std::shared_ptr<F3> ret = this->opF3(::std::move(iceP_f31), iceP_f32, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_f32, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_hasF3(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->hasF3(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial_ops, iceC_Test_Initial_ops + 32, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial_ops)
    {
        case 0:
        {
            return _iceD_acceptsClassCycles(in, current);
        }
        case 1:
        {
            return _iceD_getAMDMB(in, current);
        }
        case 2:
        {
            return _iceD_getAll(in, current);
        }
        case 3:
        {
            return _iceD_getB1(in, current);
        }
        case 4:
        {
            return _iceD_getB2(in, current);
        }
        case 5:
        {
            return _iceD_getC(in, current);
        }
        case 6:
        {
            return _iceD_getCompact(in, current);
        }
        case 7:
        {
            return _iceD_getD(in, current);
        }
        case 8:
        {
            return _iceD_getD1(in, current);
        }
        case 9:
        {
            return _iceD_getE(in, current);
        }
        case 10:
        {
            return _iceD_getF(in, current);
        }
        case 11:
        {
            return _iceD_getK(in, current);
        }
        case 12:
        {
            return _iceD_getMB(in, current);
        }
        case 13:
        {
            return _iceD_hasF3(in, current);
        }
        case 14:
        {
            return _iceD_ice_id(in, current);
        }
        case 15:
        {
            return _iceD_ice_ids(in, current);
        }
        case 16:
        {
            return _iceD_ice_isA(in, current);
        }
        case 17:
        {
            return _iceD_ice_ping(in, current);
        }
        case 18:
        {
            return _iceD_opBaseSeq(in, current);
        }
        case 19:
        {
            return _iceD_opF1(in, current);
        }
        case 20:
        {
            return _iceD_opF2(in, current);
        }
        case 21:
        {
            return _iceD_opF3(in, current);
        }
        case 22:
        {
            return _iceD_opM(in, current);
        }
        case 23:
        {
            return _iceD_opValue(in, current);
        }
        case 24:
        {
            return _iceD_opValueMap(in, current);
        }
        case 25:
        {
            return _iceD_opValueSeq(in, current);
        }
        case 26:
        {
            return _iceD_setCycle(in, current);
        }
        case 27:
        {
            return _iceD_setG(in, current);
        }
        case 28:
        {
            return _iceD_setRecursive(in, current);
        }
        case 29:
        {
            return _iceD_shutdown(in, current);
        }
        case 30:
        {
            return _iceD_supportsClassGraphDepthMax(in, current);
        }
        case 31:
        {
            return _iceD_throwEDerived(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::Base::~Base()
{
}

const ::std::string&
Test::Base::ice_staticId()
{
    static const ::std::string typeId = "::Test::Base";
    return typeId;
}

Test::A::~A()
{
}

const ::std::string&
Test::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

Test::B::~B()
{
}

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

Test::C::~C()
{
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

Test::D::~D()
{
}

const ::std::string&
Test::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

Test::E::~E()
{
}

const ::std::string&
Test::E::ice_staticId()
{
    static const ::std::string typeId = "::Test::E";
    return typeId;
}

Test::F::~F()
{
}

const ::std::string&
Test::F::ice_staticId()
{
    static const ::std::string typeId = "::Test::F";
    return typeId;
}

Test::G::~G()
{
}

const ::std::string&
Test::G::ice_staticId()
{
    static const ::std::string typeId = "::Test::G";
    return typeId;
}

Test::Compact::~Compact()
{
}

const ::std::string&
Test::Compact::ice_staticId()
{
    static const ::std::string typeId = "::Test::Compact";
    return typeId;
}

Test::CompactExt::~CompactExt()
{
}

const ::std::string&
Test::CompactExt::ice_staticId()
{
    static const ::std::string typeId = "::Test::CompactExt";
    return typeId;
}

Test::A1::~A1()
{
}

const ::std::string&
Test::A1::ice_staticId()
{
    static const ::std::string typeId = "::Test::A1";
    return typeId;
}

Test::B1::~B1()
{
}

const ::std::string&
Test::B1::ice_staticId()
{
    static const ::std::string typeId = "::Test::B1";
    return typeId;
}

Test::D1::~D1()
{
}

const ::std::string&
Test::D1::ice_staticId()
{
    static const ::std::string typeId = "::Test::D1";
    return typeId;
}

Test::Recursive::~Recursive()
{
}

const ::std::string&
Test::Recursive::ice_staticId()
{
    static const ::std::string typeId = "::Test::Recursive";
    return typeId;
}

Test::K::~K()
{
}

const ::std::string&
Test::K::ice_staticId()
{
    static const ::std::string typeId = "::Test::K";
    return typeId;
}

Test::L::~L()
{
}

const ::std::string&
Test::L::ice_staticId()
{
    static const ::std::string typeId = "::Test::L";
    return typeId;
}

Test::M::~M()
{
}

const ::std::string&
Test::M::ice_staticId()
{
    static const ::std::string typeId = "::Test::M";
    return typeId;
}

Test::F3::~F3()
{
}

const ::std::string&
Test::F3::ice_staticId()
{
    static const ::std::string typeId = "::Test::F3";
    return typeId;
}

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::IPrx::_newInstance() const
{
    return ::IceInternal::createProxy<IPrx>();
}
/// \endcond

const ::std::string&
Test::IPrx::ice_staticId()
{
    return I::ice_staticId();
}

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::JPrx::_newInstance() const
{
    return ::IceInternal::createProxy<JPrx>();
}
/// \endcond

const ::std::string&
Test::JPrx::ice_staticId()
{
    return J::ice_staticId();
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getB1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getB1_name);
    outAsync->invoke(iceC_Test_Initial_getB1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getB2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getB2_name);
    outAsync->invoke(iceC_Test_Initial_getB2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::C>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getC_name);
    outAsync->invoke(iceC_Test_Initial_getC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<C> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::D>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getD_name);
    outAsync->invoke(iceC_Test_Initial_getD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<D> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getE(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::E>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getE_name);
    outAsync->invoke(iceC_Test_Initial_getE_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<E> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getF(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::F>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getF_name);
    outAsync->invoke(iceC_Test_Initial_getF_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<F> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_setRecursive(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<Recursive>& iceP_p, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_setRecursive_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsClassGraphDepthMax(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsClassGraphDepthMax_name);
    outAsync->invoke(iceC_Test_Initial_supportsClassGraphDepthMax_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_setCycle(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<Recursive>& iceP_r, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_setCycle_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_r);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_acceptsClassCycles(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_acceptsClassCycles_name);
    outAsync->invoke(iceC_Test_Initial_acceptsClassCycles_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getMB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getMB_name);
    outAsync->invoke(iceC_Test_Initial_getMB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getAMDMB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getAMDMB_name);
    outAsync->invoke(iceC_Test_Initial_getAMDMB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getAll(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::GetAllResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getAll_name);
    outAsync->invoke(iceC_Test_Initial_getAll_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::GetAllResult v;
            istr->readAll(v.b1, v.b2, v.theC, v.theD);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getK(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::K>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getK_name);
    outAsync->invoke(iceC_Test_Initial_getK_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<K> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opValue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpValueResult>>& outAsync, const ::std::shared_ptr<::Ice::Value>& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opValue_name);
    outAsync->invoke(iceC_Test_Initial_opValue_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpValueResult v;
            istr->readAll(v.v2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opValueSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpValueSeqResult>>& outAsync, const ValueSeq& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opValueSeq_name);
    outAsync->invoke(iceC_Test_Initial_opValueSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpValueSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opValueMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpValueMapResult>>& outAsync, const ValueMap& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opValueMap_name);
    outAsync->invoke(iceC_Test_Initial_opValueMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpValueMapResult v;
            istr->readAll(v.v2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getD1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::D1>>>& outAsync, const ::std::shared_ptr<D1>& iceP_d1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getD1_name);
    outAsync->invoke(iceC_Test_Initial_getD1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_d1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<D1> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_throwEDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_throwEDerived_name);
    outAsync->invoke(iceC_Test_Initial_throwEDerived_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const EDerived&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_setG(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<G>& iceP_theG, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_setG_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_theG);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opBaseSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpBaseSeqResult>>& outAsync, const BaseSeq& iceP_inSeq, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opBaseSeq_name);
    outAsync->invoke(iceC_Test_Initial_opBaseSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_inSeq);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpBaseSeqResult v;
            istr->readAll(v.outSeq, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getCompact(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Compact>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getCompact_name);
    outAsync->invoke(iceC_Test_Initial_getCompact_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<Compact> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opM(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMResult>>& outAsync, const ::std::shared_ptr<M>& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opM_name);
    outAsync->invoke(iceC_Test_Initial_opM_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpMResult v;
            istr->readAll(v.v2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opF1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpF1Result>>& outAsync, const ::std::shared_ptr<F1>& iceP_f11, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opF1_name);
    outAsync->invoke(iceC_Test_Initial_opF1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f11);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpF1Result v;
            istr->readAll(v.f12, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opF2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpF2Result>>& outAsync, const ::std::shared_ptr<F2Prx>& iceP_f21, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opF2_name);
    outAsync->invoke(iceC_Test_Initial_opF2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f21);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpF2Result v;
            istr->readAll(v.f22, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opF3(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpF3Result>>& outAsync, const ::std::shared_ptr<F3>& iceP_f31, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opF3_name);
    outAsync->invoke(iceC_Test_Initial_opF3_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f31);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpF3Result v;
            istr->readAll(v.f32, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_hasF3(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_hasF3_name);
    outAsync->invoke(iceC_Test_Initial_hasF3_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::InitialPrx::_newInstance() const
{
    return ::IceInternal::createProxy<InitialPrx>();
}
/// \endcond

const ::std::string&
Test::InitialPrx::ice_staticId()
{
    return Initial::ice_staticId();
}

namespace Ice
{
}
