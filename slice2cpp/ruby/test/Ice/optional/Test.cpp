//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::OneOptional> iceC_Test_OneOptional_init("::Test::OneOptional");

const ::std::string iceC_Test_MyInterface_ids[2] =
{
    "::Ice::Object",
    "::Test::MyInterface"
};
const ::std::string iceC_Test_MyInterface_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};
const ::std::string iceC_Test_MyInterface_op_name = "op";

const ::IceInternal::DefaultValueFactoryInit<::Test::MultiOptional> iceC_Test_MultiOptional_init("::Test::MultiOptional");

const ::IceInternal::DefaultValueFactoryInit<::Test::A> iceC_Test_A_init("::Test::A");

const ::IceInternal::DefaultValueFactoryInit<::Test::B> iceC_Test_B_init("::Test::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::WD> iceC_Test_WD_init("::Test::WD");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::OptionalException> iceC_Test_OptionalException_init("::Test::OptionalException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::DerivedException> iceC_Test_DerivedException_init("::Test::DerivedException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::RequiredException> iceC_Test_RequiredException_init("::Test::RequiredException");

const ::IceInternal::DefaultValueFactoryInit<::Test::OptionalWithCustom> iceC_Test_OptionalWithCustom_init("::Test::OptionalWithCustom");

const ::IceInternal::DefaultValueFactoryInit<::Test::E> iceC_Test_E_init("::Test::E");

const ::IceInternal::DefaultValueFactoryInit<::Test::F> iceC_Test_F_init("::Test::F");

const ::IceInternal::DefaultValueFactoryInit<::Test::G1> iceC_Test_G1_init("::Test::G1");

const ::IceInternal::DefaultValueFactoryInit<::Test::G2> iceC_Test_G2_init("::Test::G2");

const ::IceInternal::DefaultValueFactoryInit<::Test::G> iceC_Test_G_init("::Test::G");

const ::IceInternal::DefaultValueFactoryInit<::Test::Recursive> iceC_Test_Recursive_init("::Test::Recursive");

const ::std::string iceC_Test_Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};
const ::std::string iceC_Test_Initial_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolSeq",
    "opByte",
    "opByteSeq",
    "opClassAndUnknownOptional",
    "opDerivedException",
    "opDouble",
    "opDoubleSeq",
    "opFixedStruct",
    "opFixedStructList",
    "opFixedStructSeq",
    "opFloat",
    "opFloatSeq",
    "opG",
    "opInt",
    "opIntIntDict",
    "opIntOneOptionalDict",
    "opIntSeq",
    "opLong",
    "opLongSeq",
    "opMDict1",
    "opMDict2",
    "opMG1",
    "opMG2",
    "opMSeq1",
    "opMSeq2",
    "opMStruct1",
    "opMStruct2",
    "opMyEnum",
    "opMyInterfaceProxy",
    "opOneOptional",
    "opOptionalException",
    "opRequiredException",
    "opSerializable",
    "opShort",
    "opShortSeq",
    "opSmallStruct",
    "opSmallStructList",
    "opSmallStructSeq",
    "opString",
    "opStringIntDict",
    "opStringSeq",
    "opVarStruct",
    "opVarStructSeq",
    "opVoid",
    "pingPong",
    "returnOptionalClass",
    "sendOptionalClass",
    "shutdown",
    "supportsCppStringView",
    "supportsCsharpSerializable",
    "supportsJavaSerializable",
    "supportsNullOptional",
    "supportsRequiredParams"
};
const ::std::string iceC_Test_Initial_shutdown_name = "shutdown";
const ::std::string iceC_Test_Initial_pingPong_name = "pingPong";
const ::std::string iceC_Test_Initial_opOptionalException_name = "opOptionalException";
const ::std::string iceC_Test_Initial_opDerivedException_name = "opDerivedException";
const ::std::string iceC_Test_Initial_opRequiredException_name = "opRequiredException";
const ::std::string iceC_Test_Initial_opByte_name = "opByte";
const ::std::string iceC_Test_Initial_opBool_name = "opBool";
const ::std::string iceC_Test_Initial_opShort_name = "opShort";
const ::std::string iceC_Test_Initial_opInt_name = "opInt";
const ::std::string iceC_Test_Initial_opLong_name = "opLong";
const ::std::string iceC_Test_Initial_opFloat_name = "opFloat";
const ::std::string iceC_Test_Initial_opDouble_name = "opDouble";
const ::std::string iceC_Test_Initial_opString_name = "opString";
const ::std::string iceC_Test_Initial_opMyEnum_name = "opMyEnum";
const ::std::string iceC_Test_Initial_opSmallStruct_name = "opSmallStruct";
const ::std::string iceC_Test_Initial_opFixedStruct_name = "opFixedStruct";
const ::std::string iceC_Test_Initial_opVarStruct_name = "opVarStruct";
const ::std::string iceC_Test_Initial_opOneOptional_name = "opOneOptional";
const ::std::string iceC_Test_Initial_opMyInterfaceProxy_name = "opMyInterfaceProxy";
const ::std::string iceC_Test_Initial_opByteSeq_name = "opByteSeq";
const ::std::string iceC_Test_Initial_opBoolSeq_name = "opBoolSeq";
const ::std::string iceC_Test_Initial_opShortSeq_name = "opShortSeq";
const ::std::string iceC_Test_Initial_opIntSeq_name = "opIntSeq";
const ::std::string iceC_Test_Initial_opLongSeq_name = "opLongSeq";
const ::std::string iceC_Test_Initial_opFloatSeq_name = "opFloatSeq";
const ::std::string iceC_Test_Initial_opDoubleSeq_name = "opDoubleSeq";
const ::std::string iceC_Test_Initial_opStringSeq_name = "opStringSeq";
const ::std::string iceC_Test_Initial_opSmallStructSeq_name = "opSmallStructSeq";
const ::std::string iceC_Test_Initial_opSmallStructList_name = "opSmallStructList";
const ::std::string iceC_Test_Initial_opFixedStructSeq_name = "opFixedStructSeq";
const ::std::string iceC_Test_Initial_opFixedStructList_name = "opFixedStructList";
const ::std::string iceC_Test_Initial_opVarStructSeq_name = "opVarStructSeq";
const ::std::string iceC_Test_Initial_opSerializable_name = "opSerializable";
const ::std::string iceC_Test_Initial_opIntIntDict_name = "opIntIntDict";
const ::std::string iceC_Test_Initial_opStringIntDict_name = "opStringIntDict";
const ::std::string iceC_Test_Initial_opIntOneOptionalDict_name = "opIntOneOptionalDict";
const ::std::string iceC_Test_Initial_opClassAndUnknownOptional_name = "opClassAndUnknownOptional";
const ::std::string iceC_Test_Initial_sendOptionalClass_name = "sendOptionalClass";
const ::std::string iceC_Test_Initial_returnOptionalClass_name = "returnOptionalClass";
const ::std::string iceC_Test_Initial_opG_name = "opG";
const ::std::string iceC_Test_Initial_opVoid_name = "opVoid";
const ::std::string iceC_Test_Initial_opMStruct1_name = "opMStruct1";
const ::std::string iceC_Test_Initial_opMStruct2_name = "opMStruct2";
const ::std::string iceC_Test_Initial_opMSeq1_name = "opMSeq1";
const ::std::string iceC_Test_Initial_opMSeq2_name = "opMSeq2";
const ::std::string iceC_Test_Initial_opMDict1_name = "opMDict1";
const ::std::string iceC_Test_Initial_opMDict2_name = "opMDict2";
const ::std::string iceC_Test_Initial_opMG1_name = "opMG1";
const ::std::string iceC_Test_Initial_opMG2_name = "opMG2";
const ::std::string iceC_Test_Initial_supportsRequiredParams_name = "supportsRequiredParams";
const ::std::string iceC_Test_Initial_supportsJavaSerializable_name = "supportsJavaSerializable";
const ::std::string iceC_Test_Initial_supportsCsharpSerializable_name = "supportsCsharpSerializable";
const ::std::string iceC_Test_Initial_supportsCppStringView_name = "supportsCppStringView";
const ::std::string iceC_Test_Initial_supportsNullOptional_name = "supportsNullOptional";

}

void
Test::MyInterfacePrx::op(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &MyInterfacePrx::_iceI_op, context).get();
}

::std::future<void>
Test::MyInterfacePrx::opAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &MyInterfacePrx::_iceI_op, context);
}

::std::function<void()>
Test::MyInterfacePrx::opAsync(::std::function<void ()> response,
                              ::std::function<void(::std::exception_ptr)> ex,
                              ::std::function<void(bool)> sent,
                              const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyInterfacePrx::_iceI_op, context);
}

/// \cond INTERNAL
void
Test::MyInterfacePrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_MyInterface_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::MyInterfacePrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyInterface";
    return typeId;
}

void
Test::InitialPrx::shutdown(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::InitialPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::InitialPrx::shutdownAsync(::std::function<void ()> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Initial_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::std::shared_ptr<::Ice::Value>
Test::InitialPrx::pingPong(const ::std::shared_ptr<::Ice::Value>& iceP_o, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<::Ice::Value>>(true, this, &InitialPrx::_iceI_pingPong, iceP_o, context).get();
}

::std::future<::std::shared_ptr<::Ice::Value>>
Test::InitialPrx::pingPongAsync(const ::std::shared_ptr<::Ice::Value>& iceP_o, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<::Ice::Value>>(false, this, &InitialPrx::_iceI_pingPong, iceP_o, context);
}

::std::function<void()>
Test::InitialPrx::pingPongAsync(const ::std::shared_ptr<::Ice::Value>& iceP_o,
                                ::std::function<void (::std::shared_ptr<::Ice::Value>)> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<::Ice::Value>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_pingPong, iceP_o, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_pingPong(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::Value>>>& outAsync, const ::std::shared_ptr<::Ice::Value>& iceP_o, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_pingPong_name);
    outAsync->invoke(iceC_Test_Initial_pingPong_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_o);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Ice::Value> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

void
Test::InitialPrx::opOptionalException(const std::optional<::std::int32_t>& iceP_a, const std::optional<::std::string>& iceP_b, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_opOptionalException, iceP_a, iceP_b, iceP_o, context).get();
}

::std::future<void>
Test::InitialPrx::opOptionalExceptionAsync(const std::optional<::std::int32_t>& iceP_a, const std::optional<::std::string>& iceP_b, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_opOptionalException, iceP_a, iceP_b, iceP_o, context);
}

::std::function<void()>
Test::InitialPrx::opOptionalExceptionAsync(const std::optional<::std::int32_t>& iceP_a, const std::optional<::std::string>& iceP_b, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o,
                                           ::std::function<void ()> response,
                                           ::std::function<void(::std::exception_ptr)> ex,
                                           ::std::function<void(bool)> sent,
                                           const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opOptionalException, iceP_a, iceP_b, iceP_o, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opOptionalException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const std::optional<::std::int32_t>& iceP_a, const std::optional<::std::string>& iceP_b, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opOptionalException_name);
    outAsync->invoke(iceC_Test_Initial_opOptionalException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const OptionalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::InitialPrx::opDerivedException(const std::optional<::std::int32_t>& iceP_a, const std::optional<::std::string>& iceP_b, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_opDerivedException, iceP_a, iceP_b, iceP_o, context).get();
}

::std::future<void>
Test::InitialPrx::opDerivedExceptionAsync(const std::optional<::std::int32_t>& iceP_a, const std::optional<::std::string>& iceP_b, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_opDerivedException, iceP_a, iceP_b, iceP_o, context);
}

::std::function<void()>
Test::InitialPrx::opDerivedExceptionAsync(const std::optional<::std::int32_t>& iceP_a, const std::optional<::std::string>& iceP_b, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o,
                                          ::std::function<void ()> response,
                                          ::std::function<void(::std::exception_ptr)> ex,
                                          ::std::function<void(bool)> sent,
                                          const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opDerivedException, iceP_a, iceP_b, iceP_o, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opDerivedException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const std::optional<::std::int32_t>& iceP_a, const std::optional<::std::string>& iceP_b, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opDerivedException_name);
    outAsync->invoke(iceC_Test_Initial_opDerivedException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const OptionalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::InitialPrx::opRequiredException(const std::optional<::std::int32_t>& iceP_a, const std::optional<::std::string>& iceP_b, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_opRequiredException, iceP_a, iceP_b, iceP_o, context).get();
}

::std::future<void>
Test::InitialPrx::opRequiredExceptionAsync(const std::optional<::std::int32_t>& iceP_a, const std::optional<::std::string>& iceP_b, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_opRequiredException, iceP_a, iceP_b, iceP_o, context);
}

::std::function<void()>
Test::InitialPrx::opRequiredExceptionAsync(const std::optional<::std::int32_t>& iceP_a, const std::optional<::std::string>& iceP_b, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o,
                                           ::std::function<void ()> response,
                                           ::std::function<void(::std::exception_ptr)> ex,
                                           ::std::function<void(bool)> sent,
                                           const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opRequiredException, iceP_a, iceP_b, iceP_o, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opRequiredException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const std::optional<::std::int32_t>& iceP_a, const std::optional<::std::string>& iceP_b, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opRequiredException_name);
    outAsync->invoke(iceC_Test_Initial_opRequiredException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const OptionalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

std::optional<::std::uint8_t>
Test::InitialPrx::opByte(const std::optional<::std::uint8_t>& iceP_p1, std::optional<::std::uint8_t>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::uint8_t>, std::optional<::std::uint8_t>>>(true, this, &InitialPrx::_iceI_opByte, iceP_p1, context).get();
    iceP_p3 = ::std::get<1>(_result);
    return ::std::get<0>(_result);
}

::std::future<::std::tuple<std::optional<::std::uint8_t>, std::optional<::std::uint8_t>>>
Test::InitialPrx::opByteAsync(const std::optional<::std::uint8_t>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::uint8_t>, std::optional<::std::uint8_t>>>(false, this, &InitialPrx::_iceI_opByte, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opByteAsync(const std::optional<::std::uint8_t>& iceP_p1,
                              ::std::function<void (std::optional<::std::uint8_t>, std::optional<::std::uint8_t>)> response,
                              ::std::function<void(::std::exception_ptr)> ex,
                              ::std::function<void(bool)> sent,
                              const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<::std::uint8_t>, std::optional<::std::uint8_t>>&& _result)
    {
        response(::std::get<0>(_result), ::std::get<1>(_result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<::std::uint8_t>, std::optional<::std::uint8_t>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opByte, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opByte(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<::std::uint8_t>, std::optional<::std::uint8_t>>>>& outAsync, const std::optional<::std::uint8_t>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opByte_name);
    outAsync->invoke(iceC_Test_Initial_opByte_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<::std::uint8_t>, std::optional<::std::uint8_t>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<bool>
Test::InitialPrx::opBool(const std::optional<bool>& iceP_p1, std::optional<bool>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<bool>, std::optional<bool>>>(true, this, &InitialPrx::_iceI_opBool, iceP_p1, context).get();
    iceP_p3 = ::std::get<1>(_result);
    return ::std::get<0>(_result);
}

::std::future<::std::tuple<std::optional<bool>, std::optional<bool>>>
Test::InitialPrx::opBoolAsync(const std::optional<bool>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<bool>, std::optional<bool>>>(false, this, &InitialPrx::_iceI_opBool, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opBoolAsync(const std::optional<bool>& iceP_p1,
                              ::std::function<void (std::optional<bool>, std::optional<bool>)> response,
                              ::std::function<void(::std::exception_ptr)> ex,
                              ::std::function<void(bool)> sent,
                              const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<bool>, std::optional<bool>>&& _result)
    {
        response(::std::get<0>(_result), ::std::get<1>(_result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<bool>, std::optional<bool>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opBool, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opBool(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<bool>, std::optional<bool>>>>& outAsync, const std::optional<bool>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opBool_name);
    outAsync->invoke(iceC_Test_Initial_opBool_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<bool>, std::optional<bool>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::std::int16_t>
Test::InitialPrx::opShort(const std::optional<::std::int16_t>& iceP_p1, std::optional<::std::int16_t>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::int16_t>, std::optional<::std::int16_t>>>(true, this, &InitialPrx::_iceI_opShort, iceP_p1, context).get();
    iceP_p3 = ::std::get<1>(_result);
    return ::std::get<0>(_result);
}

::std::future<::std::tuple<std::optional<::std::int16_t>, std::optional<::std::int16_t>>>
Test::InitialPrx::opShortAsync(const std::optional<::std::int16_t>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::int16_t>, std::optional<::std::int16_t>>>(false, this, &InitialPrx::_iceI_opShort, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opShortAsync(const std::optional<::std::int16_t>& iceP_p1,
                               ::std::function<void (std::optional<::std::int16_t>, std::optional<::std::int16_t>)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<::std::int16_t>, std::optional<::std::int16_t>>&& _result)
    {
        response(::std::get<0>(_result), ::std::get<1>(_result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<::std::int16_t>, std::optional<::std::int16_t>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opShort, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opShort(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<::std::int16_t>, std::optional<::std::int16_t>>>>& outAsync, const std::optional<::std::int16_t>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opShort_name);
    outAsync->invoke(iceC_Test_Initial_opShort_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<::std::int16_t>, std::optional<::std::int16_t>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::std::int32_t>
Test::InitialPrx::opInt(const std::optional<::std::int32_t>& iceP_p1, std::optional<::std::int32_t>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::int32_t>, std::optional<::std::int32_t>>>(true, this, &InitialPrx::_iceI_opInt, iceP_p1, context).get();
    iceP_p3 = ::std::get<1>(_result);
    return ::std::get<0>(_result);
}

::std::future<::std::tuple<std::optional<::std::int32_t>, std::optional<::std::int32_t>>>
Test::InitialPrx::opIntAsync(const std::optional<::std::int32_t>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::int32_t>, std::optional<::std::int32_t>>>(false, this, &InitialPrx::_iceI_opInt, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opIntAsync(const std::optional<::std::int32_t>& iceP_p1,
                             ::std::function<void (std::optional<::std::int32_t>, std::optional<::std::int32_t>)> response,
                             ::std::function<void(::std::exception_ptr)> ex,
                             ::std::function<void(bool)> sent,
                             const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<::std::int32_t>, std::optional<::std::int32_t>>&& _result)
    {
        response(::std::get<0>(_result), ::std::get<1>(_result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<::std::int32_t>, std::optional<::std::int32_t>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opInt, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opInt(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<::std::int32_t>, std::optional<::std::int32_t>>>>& outAsync, const std::optional<::std::int32_t>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opInt_name);
    outAsync->invoke(iceC_Test_Initial_opInt_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<::std::int32_t>, std::optional<::std::int32_t>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::std::int64_t>
Test::InitialPrx::opLong(const std::optional<::std::int64_t>& iceP_p1, std::optional<::std::int64_t>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::int64_t>, std::optional<::std::int64_t>>>(true, this, &InitialPrx::_iceI_opLong, iceP_p1, context).get();
    iceP_p3 = ::std::get<1>(_result);
    return ::std::get<0>(_result);
}

::std::future<::std::tuple<std::optional<::std::int64_t>, std::optional<::std::int64_t>>>
Test::InitialPrx::opLongAsync(const std::optional<::std::int64_t>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::int64_t>, std::optional<::std::int64_t>>>(false, this, &InitialPrx::_iceI_opLong, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opLongAsync(const std::optional<::std::int64_t>& iceP_p1,
                              ::std::function<void (std::optional<::std::int64_t>, std::optional<::std::int64_t>)> response,
                              ::std::function<void(::std::exception_ptr)> ex,
                              ::std::function<void(bool)> sent,
                              const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<::std::int64_t>, std::optional<::std::int64_t>>&& _result)
    {
        response(::std::get<0>(_result), ::std::get<1>(_result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<::std::int64_t>, std::optional<::std::int64_t>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opLong, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opLong(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<::std::int64_t>, std::optional<::std::int64_t>>>>& outAsync, const std::optional<::std::int64_t>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opLong_name);
    outAsync->invoke(iceC_Test_Initial_opLong_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<::std::int64_t>, std::optional<::std::int64_t>> v;
            istr->readAll({2, 3}, ::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

std::optional<float>
Test::InitialPrx::opFloat(const std::optional<float>& iceP_p1, std::optional<float>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<float>, std::optional<float>>>(true, this, &InitialPrx::_iceI_opFloat, iceP_p1, context).get();
    iceP_p3 = ::std::get<1>(_result);
    return ::std::get<0>(_result);
}

::std::future<::std::tuple<std::optional<float>, std::optional<float>>>
Test::InitialPrx::opFloatAsync(const std::optional<float>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<float>, std::optional<float>>>(false, this, &InitialPrx::_iceI_opFloat, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opFloatAsync(const std::optional<float>& iceP_p1,
                               ::std::function<void (std::optional<float>, std::optional<float>)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<float>, std::optional<float>>&& _result)
    {
        response(::std::get<0>(_result), ::std::get<1>(_result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<float>, std::optional<float>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFloat, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opFloat(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<float>, std::optional<float>>>>& outAsync, const std::optional<float>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opFloat_name);
    outAsync->invoke(iceC_Test_Initial_opFloat_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<float>, std::optional<float>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<double>
Test::InitialPrx::opDouble(const std::optional<double>& iceP_p1, std::optional<double>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<double>, std::optional<double>>>(true, this, &InitialPrx::_iceI_opDouble, iceP_p1, context).get();
    iceP_p3 = ::std::get<1>(_result);
    return ::std::get<0>(_result);
}

::std::future<::std::tuple<std::optional<double>, std::optional<double>>>
Test::InitialPrx::opDoubleAsync(const std::optional<double>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<double>, std::optional<double>>>(false, this, &InitialPrx::_iceI_opDouble, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opDoubleAsync(const std::optional<double>& iceP_p1,
                                ::std::function<void (std::optional<double>, std::optional<double>)> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<double>, std::optional<double>>&& _result)
    {
        response(::std::get<0>(_result), ::std::get<1>(_result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<double>, std::optional<double>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opDouble, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opDouble(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<double>, std::optional<double>>>>& outAsync, const std::optional<double>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opDouble_name);
    outAsync->invoke(iceC_Test_Initial_opDouble_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<double>, std::optional<double>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::std::string>
Test::InitialPrx::opString(const std::optional<::std::string>& iceP_p1, std::optional<::std::string>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::string>, std::optional<::std::string>>>(true, this, &InitialPrx::_iceI_opString, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::std::string>, std::optional<::std::string>>>
Test::InitialPrx::opStringAsync(const std::optional<::std::string>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::string>, std::optional<::std::string>>>(false, this, &InitialPrx::_iceI_opString, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opStringAsync(const std::optional<::std::string>& iceP_p1,
                                ::std::function<void (std::optional<::std::string>, std::optional<::std::string>)> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<::std::string>, std::optional<::std::string>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<::std::string>, std::optional<::std::string>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opString, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<::std::string>, std::optional<::std::string>>>>& outAsync, const std::optional<::std::string>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opString_name);
    outAsync->invoke(iceC_Test_Initial_opString_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<::std::string>, std::optional<::std::string>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::MyEnum>
Test::InitialPrx::opMyEnum(const std::optional<MyEnum>& iceP_p1, std::optional<MyEnum>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<MyEnum>, std::optional<MyEnum>>>(true, this, &InitialPrx::_iceI_opMyEnum, iceP_p1, context).get();
    iceP_p3 = ::std::get<1>(_result);
    return ::std::get<0>(_result);
}

::std::future<::std::tuple<std::optional<::Test::MyEnum>, std::optional<::Test::MyEnum>>>
Test::InitialPrx::opMyEnumAsync(const std::optional<MyEnum>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<MyEnum>, std::optional<MyEnum>>>(false, this, &InitialPrx::_iceI_opMyEnum, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opMyEnumAsync(const std::optional<MyEnum>& iceP_p1,
                                ::std::function<void (std::optional<::Test::MyEnum>, std::optional<::Test::MyEnum>)> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<MyEnum>, std::optional<MyEnum>>&& _result)
    {
        response(::std::get<0>(_result), ::std::get<1>(_result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<MyEnum>, std::optional<MyEnum>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMyEnum, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMyEnum(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<MyEnum>, std::optional<MyEnum>>>>& outAsync, const std::optional<MyEnum>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opMyEnum_name);
    outAsync->invoke(iceC_Test_Initial_opMyEnum_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<MyEnum>, std::optional<MyEnum>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::SmallStruct>
Test::InitialPrx::opSmallStruct(const std::optional<SmallStruct>& iceP_p1, std::optional<SmallStruct>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>(true, this, &InitialPrx::_iceI_opSmallStruct, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::SmallStruct>, std::optional<::Test::SmallStruct>>>
Test::InitialPrx::opSmallStructAsync(const std::optional<SmallStruct>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>(false, this, &InitialPrx::_iceI_opSmallStruct, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opSmallStructAsync(const std::optional<SmallStruct>& iceP_p1,
                                     ::std::function<void (std::optional<::Test::SmallStruct>, std::optional<::Test::SmallStruct>)> response,
                                     ::std::function<void(::std::exception_ptr)> ex,
                                     ::std::function<void(bool)> sent,
                                     const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSmallStruct, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opSmallStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>>& outAsync, const std::optional<SmallStruct>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opSmallStruct_name);
    outAsync->invoke(iceC_Test_Initial_opSmallStruct_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::FixedStruct>
Test::InitialPrx::opFixedStruct(const std::optional<FixedStruct>& iceP_p1, std::optional<FixedStruct>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<FixedStruct>, std::optional<FixedStruct>>>(true, this, &InitialPrx::_iceI_opFixedStruct, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::FixedStruct>, std::optional<::Test::FixedStruct>>>
Test::InitialPrx::opFixedStructAsync(const std::optional<FixedStruct>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<FixedStruct>, std::optional<FixedStruct>>>(false, this, &InitialPrx::_iceI_opFixedStruct, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opFixedStructAsync(const std::optional<FixedStruct>& iceP_p1,
                                     ::std::function<void (std::optional<::Test::FixedStruct>, std::optional<::Test::FixedStruct>)> response,
                                     ::std::function<void(::std::exception_ptr)> ex,
                                     ::std::function<void(bool)> sent,
                                     const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<FixedStruct>, std::optional<FixedStruct>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<FixedStruct>, std::optional<FixedStruct>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFixedStruct, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opFixedStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<FixedStruct>, std::optional<FixedStruct>>>>& outAsync, const std::optional<FixedStruct>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opFixedStruct_name);
    outAsync->invoke(iceC_Test_Initial_opFixedStruct_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<FixedStruct>, std::optional<FixedStruct>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::VarStruct>
Test::InitialPrx::opVarStruct(const std::optional<VarStruct>& iceP_p1, std::optional<VarStruct>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<VarStruct>, std::optional<VarStruct>>>(true, this, &InitialPrx::_iceI_opVarStruct, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::VarStruct>, std::optional<::Test::VarStruct>>>
Test::InitialPrx::opVarStructAsync(const std::optional<VarStruct>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<VarStruct>, std::optional<VarStruct>>>(false, this, &InitialPrx::_iceI_opVarStruct, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opVarStructAsync(const std::optional<VarStruct>& iceP_p1,
                                   ::std::function<void (std::optional<::Test::VarStruct>, std::optional<::Test::VarStruct>)> response,
                                   ::std::function<void(::std::exception_ptr)> ex,
                                   ::std::function<void(bool)> sent,
                                   const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<VarStruct>, std::optional<VarStruct>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<VarStruct>, std::optional<VarStruct>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opVarStruct, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opVarStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<VarStruct>, std::optional<VarStruct>>>>& outAsync, const std::optional<VarStruct>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opVarStruct_name);
    outAsync->invoke(iceC_Test_Initial_opVarStruct_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<VarStruct>, std::optional<VarStruct>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::std::shared_ptr<::Test::OneOptional>>
Test::InitialPrx::opOneOptional(const std::optional<::std::shared_ptr<OneOptional>>& iceP_p1, std::optional<::std::shared_ptr<OneOptional>>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::shared_ptr<OneOptional>>, std::optional<::std::shared_ptr<OneOptional>>>>(true, this, &InitialPrx::_iceI_opOneOptional, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::std::shared_ptr<::Test::OneOptional>>, std::optional<::std::shared_ptr<::Test::OneOptional>>>>
Test::InitialPrx::opOneOptionalAsync(const std::optional<::std::shared_ptr<OneOptional>>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::shared_ptr<OneOptional>>, std::optional<::std::shared_ptr<OneOptional>>>>(false, this, &InitialPrx::_iceI_opOneOptional, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opOneOptionalAsync(const std::optional<::std::shared_ptr<OneOptional>>& iceP_p1,
                                     ::std::function<void (std::optional<::std::shared_ptr<::Test::OneOptional>>, std::optional<::std::shared_ptr<::Test::OneOptional>>)> response,
                                     ::std::function<void(::std::exception_ptr)> ex,
                                     ::std::function<void(bool)> sent,
                                     const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<::std::shared_ptr<OneOptional>>, std::optional<::std::shared_ptr<OneOptional>>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<::std::shared_ptr<OneOptional>>, std::optional<::std::shared_ptr<OneOptional>>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opOneOptional, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opOneOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<::std::shared_ptr<OneOptional>>, std::optional<::std::shared_ptr<OneOptional>>>>>& outAsync, const std::optional<::std::shared_ptr<OneOptional>>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opOneOptional_name);
    outAsync->invoke(iceC_Test_Initial_opOneOptional_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<::std::shared_ptr<OneOptional>>, std::optional<::std::shared_ptr<OneOptional>>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::std::optional<::Test::MyInterfacePrx>>
Test::InitialPrx::opMyInterfaceProxy(const std::optional<::std::optional<MyInterfacePrx>>& iceP_p1, std::optional<::std::optional<MyInterfacePrx>>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::optional<MyInterfacePrx>>, std::optional<::std::optional<MyInterfacePrx>>>>(true, this, &InitialPrx::_iceI_opMyInterfaceProxy, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::std::optional<::Test::MyInterfacePrx>>, std::optional<::std::optional<::Test::MyInterfacePrx>>>>
Test::InitialPrx::opMyInterfaceProxyAsync(const std::optional<::std::optional<MyInterfacePrx>>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::optional<MyInterfacePrx>>, std::optional<::std::optional<MyInterfacePrx>>>>(false, this, &InitialPrx::_iceI_opMyInterfaceProxy, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opMyInterfaceProxyAsync(const std::optional<::std::optional<MyInterfacePrx>>& iceP_p1,
                                          ::std::function<void (std::optional<::std::optional<::Test::MyInterfacePrx>>, std::optional<::std::optional<::Test::MyInterfacePrx>>)> response,
                                          ::std::function<void(::std::exception_ptr)> ex,
                                          ::std::function<void(bool)> sent,
                                          const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<::std::optional<MyInterfacePrx>>, std::optional<::std::optional<MyInterfacePrx>>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<::std::optional<MyInterfacePrx>>, std::optional<::std::optional<MyInterfacePrx>>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMyInterfaceProxy, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMyInterfaceProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<::std::optional<MyInterfacePrx>>, std::optional<::std::optional<MyInterfacePrx>>>>>& outAsync, const std::optional<::std::optional<MyInterfacePrx>>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opMyInterfaceProxy_name);
    outAsync->invoke(iceC_Test_Initial_opMyInterfaceProxy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<::std::optional<MyInterfacePrx>>, std::optional<::std::optional<MyInterfacePrx>>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::ByteSeq>
Test::InitialPrx::opByteSeq(const std::optional<ByteSeq>& iceP_p1, std::optional<ByteSeq>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<ByteSeq>, std::optional<ByteSeq>>>(true, this, &InitialPrx::_iceI_opByteSeq, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::ByteSeq>, std::optional<::Test::ByteSeq>>>
Test::InitialPrx::opByteSeqAsync(const std::optional<ByteSeq>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<ByteSeq>, std::optional<ByteSeq>>>(false, this, &InitialPrx::_iceI_opByteSeq, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opByteSeqAsync(const std::optional<ByteSeq>& iceP_p1,
                                 ::std::function<void (std::optional<::Test::ByteSeq>, std::optional<::Test::ByteSeq>)> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<ByteSeq>, std::optional<ByteSeq>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<ByteSeq>, std::optional<ByteSeq>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opByteSeq, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opByteSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<ByteSeq>, std::optional<ByteSeq>>>>& outAsync, const std::optional<ByteSeq>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opByteSeq_name);
    outAsync->invoke(iceC_Test_Initial_opByteSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<ByteSeq>, std::optional<ByteSeq>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::BoolSeq>
Test::InitialPrx::opBoolSeq(const std::optional<BoolSeq>& iceP_p1, std::optional<BoolSeq>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<BoolSeq>, std::optional<BoolSeq>>>(true, this, &InitialPrx::_iceI_opBoolSeq, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::BoolSeq>, std::optional<::Test::BoolSeq>>>
Test::InitialPrx::opBoolSeqAsync(const std::optional<BoolSeq>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<BoolSeq>, std::optional<BoolSeq>>>(false, this, &InitialPrx::_iceI_opBoolSeq, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opBoolSeqAsync(const std::optional<BoolSeq>& iceP_p1,
                                 ::std::function<void (std::optional<::Test::BoolSeq>, std::optional<::Test::BoolSeq>)> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<BoolSeq>, std::optional<BoolSeq>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<BoolSeq>, std::optional<BoolSeq>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opBoolSeq, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opBoolSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<BoolSeq>, std::optional<BoolSeq>>>>& outAsync, const std::optional<BoolSeq>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opBoolSeq_name);
    outAsync->invoke(iceC_Test_Initial_opBoolSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<BoolSeq>, std::optional<BoolSeq>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::ShortSeq>
Test::InitialPrx::opShortSeq(const std::optional<ShortSeq>& iceP_p1, std::optional<ShortSeq>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<ShortSeq>, std::optional<ShortSeq>>>(true, this, &InitialPrx::_iceI_opShortSeq, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::ShortSeq>, std::optional<::Test::ShortSeq>>>
Test::InitialPrx::opShortSeqAsync(const std::optional<ShortSeq>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<ShortSeq>, std::optional<ShortSeq>>>(false, this, &InitialPrx::_iceI_opShortSeq, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opShortSeqAsync(const std::optional<ShortSeq>& iceP_p1,
                                  ::std::function<void (std::optional<::Test::ShortSeq>, std::optional<::Test::ShortSeq>)> response,
                                  ::std::function<void(::std::exception_ptr)> ex,
                                  ::std::function<void(bool)> sent,
                                  const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<ShortSeq>, std::optional<ShortSeq>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<ShortSeq>, std::optional<ShortSeq>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opShortSeq, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opShortSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<ShortSeq>, std::optional<ShortSeq>>>>& outAsync, const std::optional<ShortSeq>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opShortSeq_name);
    outAsync->invoke(iceC_Test_Initial_opShortSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<ShortSeq>, std::optional<ShortSeq>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::IntSeq>
Test::InitialPrx::opIntSeq(const std::optional<IntSeq>& iceP_p1, std::optional<IntSeq>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<IntSeq>, std::optional<IntSeq>>>(true, this, &InitialPrx::_iceI_opIntSeq, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::IntSeq>, std::optional<::Test::IntSeq>>>
Test::InitialPrx::opIntSeqAsync(const std::optional<IntSeq>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<IntSeq>, std::optional<IntSeq>>>(false, this, &InitialPrx::_iceI_opIntSeq, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opIntSeqAsync(const std::optional<IntSeq>& iceP_p1,
                                ::std::function<void (std::optional<::Test::IntSeq>, std::optional<::Test::IntSeq>)> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<IntSeq>, std::optional<IntSeq>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<IntSeq>, std::optional<IntSeq>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opIntSeq, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opIntSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<IntSeq>, std::optional<IntSeq>>>>& outAsync, const std::optional<IntSeq>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opIntSeq_name);
    outAsync->invoke(iceC_Test_Initial_opIntSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<IntSeq>, std::optional<IntSeq>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::LongSeq>
Test::InitialPrx::opLongSeq(const std::optional<LongSeq>& iceP_p1, std::optional<LongSeq>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<LongSeq>, std::optional<LongSeq>>>(true, this, &InitialPrx::_iceI_opLongSeq, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::LongSeq>, std::optional<::Test::LongSeq>>>
Test::InitialPrx::opLongSeqAsync(const std::optional<LongSeq>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<LongSeq>, std::optional<LongSeq>>>(false, this, &InitialPrx::_iceI_opLongSeq, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opLongSeqAsync(const std::optional<LongSeq>& iceP_p1,
                                 ::std::function<void (std::optional<::Test::LongSeq>, std::optional<::Test::LongSeq>)> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<LongSeq>, std::optional<LongSeq>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<LongSeq>, std::optional<LongSeq>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opLongSeq, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opLongSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<LongSeq>, std::optional<LongSeq>>>>& outAsync, const std::optional<LongSeq>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opLongSeq_name);
    outAsync->invoke(iceC_Test_Initial_opLongSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<LongSeq>, std::optional<LongSeq>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::FloatSeq>
Test::InitialPrx::opFloatSeq(const std::optional<FloatSeq>& iceP_p1, std::optional<FloatSeq>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<FloatSeq>, std::optional<FloatSeq>>>(true, this, &InitialPrx::_iceI_opFloatSeq, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::FloatSeq>, std::optional<::Test::FloatSeq>>>
Test::InitialPrx::opFloatSeqAsync(const std::optional<FloatSeq>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<FloatSeq>, std::optional<FloatSeq>>>(false, this, &InitialPrx::_iceI_opFloatSeq, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opFloatSeqAsync(const std::optional<FloatSeq>& iceP_p1,
                                  ::std::function<void (std::optional<::Test::FloatSeq>, std::optional<::Test::FloatSeq>)> response,
                                  ::std::function<void(::std::exception_ptr)> ex,
                                  ::std::function<void(bool)> sent,
                                  const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<FloatSeq>, std::optional<FloatSeq>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<FloatSeq>, std::optional<FloatSeq>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFloatSeq, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opFloatSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<FloatSeq>, std::optional<FloatSeq>>>>& outAsync, const std::optional<FloatSeq>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opFloatSeq_name);
    outAsync->invoke(iceC_Test_Initial_opFloatSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<FloatSeq>, std::optional<FloatSeq>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::DoubleSeq>
Test::InitialPrx::opDoubleSeq(const std::optional<DoubleSeq>& iceP_p1, std::optional<DoubleSeq>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<DoubleSeq>, std::optional<DoubleSeq>>>(true, this, &InitialPrx::_iceI_opDoubleSeq, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::DoubleSeq>, std::optional<::Test::DoubleSeq>>>
Test::InitialPrx::opDoubleSeqAsync(const std::optional<DoubleSeq>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<DoubleSeq>, std::optional<DoubleSeq>>>(false, this, &InitialPrx::_iceI_opDoubleSeq, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opDoubleSeqAsync(const std::optional<DoubleSeq>& iceP_p1,
                                   ::std::function<void (std::optional<::Test::DoubleSeq>, std::optional<::Test::DoubleSeq>)> response,
                                   ::std::function<void(::std::exception_ptr)> ex,
                                   ::std::function<void(bool)> sent,
                                   const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<DoubleSeq>, std::optional<DoubleSeq>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<DoubleSeq>, std::optional<DoubleSeq>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opDoubleSeq, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opDoubleSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<DoubleSeq>, std::optional<DoubleSeq>>>>& outAsync, const std::optional<DoubleSeq>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opDoubleSeq_name);
    outAsync->invoke(iceC_Test_Initial_opDoubleSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<DoubleSeq>, std::optional<DoubleSeq>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::StringSeq>
Test::InitialPrx::opStringSeq(const std::optional<StringSeq>& iceP_p1, std::optional<StringSeq>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>(true, this, &InitialPrx::_iceI_opStringSeq, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::StringSeq>, std::optional<::Test::StringSeq>>>
Test::InitialPrx::opStringSeqAsync(const std::optional<StringSeq>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>(false, this, &InitialPrx::_iceI_opStringSeq, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opStringSeqAsync(const std::optional<StringSeq>& iceP_p1,
                                   ::std::function<void (std::optional<::Test::StringSeq>, std::optional<::Test::StringSeq>)> response,
                                   ::std::function<void(::std::exception_ptr)> ex,
                                   ::std::function<void(bool)> sent,
                                   const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opStringSeq, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opStringSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>>& outAsync, const std::optional<StringSeq>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opStringSeq_name);
    outAsync->invoke(iceC_Test_Initial_opStringSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<StringSeq>, std::optional<StringSeq>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::SmallStructSeq>
Test::InitialPrx::opSmallStructSeq(const std::optional<SmallStructSeq>& iceP_p1, std::optional<SmallStructSeq>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<SmallStructSeq>, std::optional<SmallStructSeq>>>(true, this, &InitialPrx::_iceI_opSmallStructSeq, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::SmallStructSeq>, std::optional<::Test::SmallStructSeq>>>
Test::InitialPrx::opSmallStructSeqAsync(const std::optional<SmallStructSeq>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<SmallStructSeq>, std::optional<SmallStructSeq>>>(false, this, &InitialPrx::_iceI_opSmallStructSeq, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opSmallStructSeqAsync(const std::optional<SmallStructSeq>& iceP_p1,
                                        ::std::function<void (std::optional<::Test::SmallStructSeq>, std::optional<::Test::SmallStructSeq>)> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<SmallStructSeq>, std::optional<SmallStructSeq>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<SmallStructSeq>, std::optional<SmallStructSeq>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSmallStructSeq, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opSmallStructSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<SmallStructSeq>, std::optional<SmallStructSeq>>>>& outAsync, const std::optional<SmallStructSeq>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opSmallStructSeq_name);
    outAsync->invoke(iceC_Test_Initial_opSmallStructSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<SmallStructSeq>, std::optional<SmallStructSeq>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::SmallStructList>
Test::InitialPrx::opSmallStructList(const std::optional<SmallStructList>& iceP_p1, std::optional<SmallStructList>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<SmallStructList>, std::optional<SmallStructList>>>(true, this, &InitialPrx::_iceI_opSmallStructList, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::SmallStructList>, std::optional<::Test::SmallStructList>>>
Test::InitialPrx::opSmallStructListAsync(const std::optional<SmallStructList>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<SmallStructList>, std::optional<SmallStructList>>>(false, this, &InitialPrx::_iceI_opSmallStructList, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opSmallStructListAsync(const std::optional<SmallStructList>& iceP_p1,
                                         ::std::function<void (std::optional<::Test::SmallStructList>, std::optional<::Test::SmallStructList>)> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<SmallStructList>, std::optional<SmallStructList>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<SmallStructList>, std::optional<SmallStructList>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSmallStructList, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opSmallStructList(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<SmallStructList>, std::optional<SmallStructList>>>>& outAsync, const std::optional<SmallStructList>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opSmallStructList_name);
    outAsync->invoke(iceC_Test_Initial_opSmallStructList_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<SmallStructList>, std::optional<SmallStructList>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::FixedStructSeq>
Test::InitialPrx::opFixedStructSeq(const std::optional<FixedStructSeq>& iceP_p1, std::optional<FixedStructSeq>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<FixedStructSeq>, std::optional<FixedStructSeq>>>(true, this, &InitialPrx::_iceI_opFixedStructSeq, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::FixedStructSeq>, std::optional<::Test::FixedStructSeq>>>
Test::InitialPrx::opFixedStructSeqAsync(const std::optional<FixedStructSeq>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<FixedStructSeq>, std::optional<FixedStructSeq>>>(false, this, &InitialPrx::_iceI_opFixedStructSeq, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opFixedStructSeqAsync(const std::optional<FixedStructSeq>& iceP_p1,
                                        ::std::function<void (std::optional<::Test::FixedStructSeq>, std::optional<::Test::FixedStructSeq>)> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<FixedStructSeq>, std::optional<FixedStructSeq>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<FixedStructSeq>, std::optional<FixedStructSeq>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFixedStructSeq, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opFixedStructSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<FixedStructSeq>, std::optional<FixedStructSeq>>>>& outAsync, const std::optional<FixedStructSeq>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opFixedStructSeq_name);
    outAsync->invoke(iceC_Test_Initial_opFixedStructSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<FixedStructSeq>, std::optional<FixedStructSeq>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::FixedStructList>
Test::InitialPrx::opFixedStructList(const std::optional<FixedStructList>& iceP_p1, std::optional<FixedStructList>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<FixedStructList>, std::optional<FixedStructList>>>(true, this, &InitialPrx::_iceI_opFixedStructList, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::FixedStructList>, std::optional<::Test::FixedStructList>>>
Test::InitialPrx::opFixedStructListAsync(const std::optional<FixedStructList>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<FixedStructList>, std::optional<FixedStructList>>>(false, this, &InitialPrx::_iceI_opFixedStructList, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opFixedStructListAsync(const std::optional<FixedStructList>& iceP_p1,
                                         ::std::function<void (std::optional<::Test::FixedStructList>, std::optional<::Test::FixedStructList>)> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<FixedStructList>, std::optional<FixedStructList>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<FixedStructList>, std::optional<FixedStructList>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFixedStructList, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opFixedStructList(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<FixedStructList>, std::optional<FixedStructList>>>>& outAsync, const std::optional<FixedStructList>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opFixedStructList_name);
    outAsync->invoke(iceC_Test_Initial_opFixedStructList_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<FixedStructList>, std::optional<FixedStructList>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::VarStructSeq>
Test::InitialPrx::opVarStructSeq(const std::optional<VarStructSeq>& iceP_p1, std::optional<VarStructSeq>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<VarStructSeq>, std::optional<VarStructSeq>>>(true, this, &InitialPrx::_iceI_opVarStructSeq, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::VarStructSeq>, std::optional<::Test::VarStructSeq>>>
Test::InitialPrx::opVarStructSeqAsync(const std::optional<VarStructSeq>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<VarStructSeq>, std::optional<VarStructSeq>>>(false, this, &InitialPrx::_iceI_opVarStructSeq, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opVarStructSeqAsync(const std::optional<VarStructSeq>& iceP_p1,
                                      ::std::function<void (std::optional<::Test::VarStructSeq>, std::optional<::Test::VarStructSeq>)> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<VarStructSeq>, std::optional<VarStructSeq>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<VarStructSeq>, std::optional<VarStructSeq>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opVarStructSeq, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opVarStructSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<VarStructSeq>, std::optional<VarStructSeq>>>>& outAsync, const std::optional<VarStructSeq>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opVarStructSeq_name);
    outAsync->invoke(iceC_Test_Initial_opVarStructSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<VarStructSeq>, std::optional<VarStructSeq>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::Serializable>
Test::InitialPrx::opSerializable(const std::optional<Serializable>& iceP_p1, std::optional<Serializable>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<Serializable>, std::optional<Serializable>>>(true, this, &InitialPrx::_iceI_opSerializable, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::Serializable>, std::optional<::Test::Serializable>>>
Test::InitialPrx::opSerializableAsync(const std::optional<Serializable>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<Serializable>, std::optional<Serializable>>>(false, this, &InitialPrx::_iceI_opSerializable, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opSerializableAsync(const std::optional<Serializable>& iceP_p1,
                                      ::std::function<void (std::optional<::Test::Serializable>, std::optional<::Test::Serializable>)> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<Serializable>, std::optional<Serializable>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<Serializable>, std::optional<Serializable>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSerializable, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opSerializable(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<Serializable>, std::optional<Serializable>>>>& outAsync, const std::optional<Serializable>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opSerializable_name);
    outAsync->invoke(iceC_Test_Initial_opSerializable_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<Serializable>, std::optional<Serializable>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::IntIntDict>
Test::InitialPrx::opIntIntDict(const std::optional<IntIntDict>& iceP_p1, std::optional<IntIntDict>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<IntIntDict>, std::optional<IntIntDict>>>(true, this, &InitialPrx::_iceI_opIntIntDict, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::IntIntDict>, std::optional<::Test::IntIntDict>>>
Test::InitialPrx::opIntIntDictAsync(const std::optional<IntIntDict>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<IntIntDict>, std::optional<IntIntDict>>>(false, this, &InitialPrx::_iceI_opIntIntDict, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opIntIntDictAsync(const std::optional<IntIntDict>& iceP_p1,
                                    ::std::function<void (std::optional<::Test::IntIntDict>, std::optional<::Test::IntIntDict>)> response,
                                    ::std::function<void(::std::exception_ptr)> ex,
                                    ::std::function<void(bool)> sent,
                                    const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<IntIntDict>, std::optional<IntIntDict>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<IntIntDict>, std::optional<IntIntDict>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opIntIntDict, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opIntIntDict(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<IntIntDict>, std::optional<IntIntDict>>>>& outAsync, const std::optional<IntIntDict>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opIntIntDict_name);
    outAsync->invoke(iceC_Test_Initial_opIntIntDict_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<IntIntDict>, std::optional<IntIntDict>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::StringIntDict>
Test::InitialPrx::opStringIntDict(const std::optional<StringIntDict>& iceP_p1, std::optional<StringIntDict>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>(true, this, &InitialPrx::_iceI_opStringIntDict, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::StringIntDict>, std::optional<::Test::StringIntDict>>>
Test::InitialPrx::opStringIntDictAsync(const std::optional<StringIntDict>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>(false, this, &InitialPrx::_iceI_opStringIntDict, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opStringIntDictAsync(const std::optional<StringIntDict>& iceP_p1,
                                       ::std::function<void (std::optional<::Test::StringIntDict>, std::optional<::Test::StringIntDict>)> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opStringIntDict, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opStringIntDict(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>>& outAsync, const std::optional<StringIntDict>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opStringIntDict_name);
    outAsync->invoke(iceC_Test_Initial_opStringIntDict_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::IntOneOptionalDict>
Test::InitialPrx::opIntOneOptionalDict(const std::optional<IntOneOptionalDict>& iceP_p1, std::optional<IntOneOptionalDict>& iceP_p3, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<IntOneOptionalDict>, std::optional<IntOneOptionalDict>>>(true, this, &InitialPrx::_iceI_opIntOneOptionalDict, iceP_p1, context).get();
    iceP_p3 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::IntOneOptionalDict>, std::optional<::Test::IntOneOptionalDict>>>
Test::InitialPrx::opIntOneOptionalDictAsync(const std::optional<IntOneOptionalDict>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<IntOneOptionalDict>, std::optional<IntOneOptionalDict>>>(false, this, &InitialPrx::_iceI_opIntOneOptionalDict, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opIntOneOptionalDictAsync(const std::optional<IntOneOptionalDict>& iceP_p1,
                                            ::std::function<void (std::optional<::Test::IntOneOptionalDict>, std::optional<::Test::IntOneOptionalDict>)> response,
                                            ::std::function<void(::std::exception_ptr)> ex,
                                            ::std::function<void(bool)> sent,
                                            const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<IntOneOptionalDict>, std::optional<IntOneOptionalDict>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<IntOneOptionalDict>, std::optional<IntOneOptionalDict>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opIntOneOptionalDict, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opIntOneOptionalDict(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<IntOneOptionalDict>, std::optional<IntOneOptionalDict>>>>& outAsync, const std::optional<IntOneOptionalDict>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opIntOneOptionalDict_name);
    outAsync->invoke(iceC_Test_Initial_opIntOneOptionalDict_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<IntOneOptionalDict>, std::optional<IntOneOptionalDict>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

void
Test::InitialPrx::opClassAndUnknownOptional(const ::std::shared_ptr<A>& iceP_p, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_opClassAndUnknownOptional, iceP_p, context).get();
}

::std::future<void>
Test::InitialPrx::opClassAndUnknownOptionalAsync(const ::std::shared_ptr<A>& iceP_p, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_opClassAndUnknownOptional, iceP_p, context);
}

::std::function<void()>
Test::InitialPrx::opClassAndUnknownOptionalAsync(const ::std::shared_ptr<A>& iceP_p,
                                                 ::std::function<void ()> response,
                                                 ::std::function<void(::std::exception_ptr)> ex,
                                                 ::std::function<void(bool)> sent,
                                                 const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opClassAndUnknownOptional, iceP_p, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opClassAndUnknownOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<A>& iceP_p, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Initial_opClassAndUnknownOptional_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

void
Test::InitialPrx::sendOptionalClass(bool iceP_req, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_sendOptionalClass, iceP_req, iceP_o, context).get();
}

::std::future<void>
Test::InitialPrx::sendOptionalClassAsync(bool iceP_req, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_sendOptionalClass, iceP_req, iceP_o, context);
}

::std::function<void()>
Test::InitialPrx::sendOptionalClassAsync(bool iceP_req, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o,
                                         ::std::function<void ()> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_sendOptionalClass, iceP_req, iceP_o, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_sendOptionalClass(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_req, const std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Initial_sendOptionalClass_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_req);
            ostr->writeAll({1}, iceP_o);
        },
        nullptr);
}
/// \endcond

void
Test::InitialPrx::returnOptionalClass(bool iceP_req, std::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context) const
{
    iceP_o = ::IceInternal::makePromiseOutgoing<std::optional<::std::shared_ptr<OneOptional>>>(true, this, &InitialPrx::_iceI_returnOptionalClass, iceP_req, context).get();
}

::std::future<std::optional<::std::shared_ptr<::Test::OneOptional>>>
Test::InitialPrx::returnOptionalClassAsync(bool iceP_req, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<std::optional<::std::shared_ptr<OneOptional>>>(false, this, &InitialPrx::_iceI_returnOptionalClass, iceP_req, context);
}

::std::function<void()>
Test::InitialPrx::returnOptionalClassAsync(bool iceP_req,
                                           ::std::function<void (std::optional<::std::shared_ptr<::Test::OneOptional>>)> response,
                                           ::std::function<void(::std::exception_ptr)> ex,
                                           ::std::function<void(bool)> sent,
                                           const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<std::optional<::std::shared_ptr<OneOptional>>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_returnOptionalClass, iceP_req, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_returnOptionalClass(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::std::shared_ptr<OneOptional>>>>& outAsync, bool iceP_req, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_returnOptionalClass_name);
    outAsync->invoke(iceC_Test_Initial_returnOptionalClass_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_req);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            std::optional<::std::shared_ptr<OneOptional>> iceP_o;
            istr->readAll({1}, iceP_o);
            return iceP_o;
        });
}
/// \endcond

::std::shared_ptr<::Test::G>
Test::InitialPrx::opG(const ::std::shared_ptr<G>& iceP_g, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<G>>(true, this, &InitialPrx::_iceI_opG, iceP_g, context).get();
}

::std::future<::std::shared_ptr<::Test::G>>
Test::InitialPrx::opGAsync(const ::std::shared_ptr<G>& iceP_g, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<G>>(false, this, &InitialPrx::_iceI_opG, iceP_g, context);
}

::std::function<void()>
Test::InitialPrx::opGAsync(const ::std::shared_ptr<G>& iceP_g,
                           ::std::function<void (::std::shared_ptr<::Test::G>)> response,
                           ::std::function<void(::std::exception_ptr)> ex,
                           ::std::function<void(bool)> sent,
                           const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<G>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opG, iceP_g, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opG(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<G>>>& outAsync, const ::std::shared_ptr<G>& iceP_g, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opG_name);
    outAsync->invoke(iceC_Test_Initial_opG_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_g);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<G> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

void
Test::InitialPrx::opVoid(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_opVoid, context).get();
}

::std::future<void>
Test::InitialPrx::opVoidAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_opVoid, context);
}

::std::function<void()>
Test::InitialPrx::opVoidAsync(::std::function<void ()> response,
                              ::std::function<void(::std::exception_ptr)> ex,
                              ::std::function<void(bool)> sent,
                              const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opVoid, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opVoid(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Initial_opVoid_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

std::optional<::Test::SmallStruct>
Test::InitialPrx::opMStruct1(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<std::optional<SmallStruct>>(true, this, &InitialPrx::_iceI_opMStruct1, context).get();
}

::std::future<std::optional<::Test::SmallStruct>>
Test::InitialPrx::opMStruct1Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<std::optional<SmallStruct>>(false, this, &InitialPrx::_iceI_opMStruct1, context);
}

::std::function<void()>
Test::InitialPrx::opMStruct1Async(::std::function<void (std::optional<::Test::SmallStruct>)> response,
                                  ::std::function<void(::std::exception_ptr)> ex,
                                  ::std::function<void(bool)> sent,
                                  const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<std::optional<SmallStruct>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMStruct1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMStruct1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<SmallStruct>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opMStruct1_name);
    outAsync->invoke(iceC_Test_Initial_opMStruct1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            std::optional<SmallStruct> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

std::optional<::Test::SmallStruct>
Test::InitialPrx::opMStruct2(const std::optional<SmallStruct>& iceP_p1, std::optional<SmallStruct>& iceP_p2, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>(true, this, &InitialPrx::_iceI_opMStruct2, iceP_p1, context).get();
    iceP_p2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::SmallStruct>, std::optional<::Test::SmallStruct>>>
Test::InitialPrx::opMStruct2Async(const std::optional<SmallStruct>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>(false, this, &InitialPrx::_iceI_opMStruct2, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opMStruct2Async(const std::optional<SmallStruct>& iceP_p1,
                                  ::std::function<void (std::optional<::Test::SmallStruct>, std::optional<::Test::SmallStruct>)> response,
                                  ::std::function<void(::std::exception_ptr)> ex,
                                  ::std::function<void(bool)> sent,
                                  const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMStruct2, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMStruct2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>>& outAsync, const std::optional<SmallStruct>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opMStruct2_name);
    outAsync->invoke(iceC_Test_Initial_opMStruct2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::StringSeq>
Test::InitialPrx::opMSeq1(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<std::optional<StringSeq>>(true, this, &InitialPrx::_iceI_opMSeq1, context).get();
}

::std::future<std::optional<::Test::StringSeq>>
Test::InitialPrx::opMSeq1Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<std::optional<StringSeq>>(false, this, &InitialPrx::_iceI_opMSeq1, context);
}

::std::function<void()>
Test::InitialPrx::opMSeq1Async(::std::function<void (std::optional<::Test::StringSeq>)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<std::optional<StringSeq>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMSeq1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMSeq1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<StringSeq>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opMSeq1_name);
    outAsync->invoke(iceC_Test_Initial_opMSeq1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            std::optional<StringSeq> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

std::optional<::Test::StringSeq>
Test::InitialPrx::opMSeq2(const std::optional<StringSeq>& iceP_p1, std::optional<StringSeq>& iceP_p2, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>(true, this, &InitialPrx::_iceI_opMSeq2, iceP_p1, context).get();
    iceP_p2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::StringSeq>, std::optional<::Test::StringSeq>>>
Test::InitialPrx::opMSeq2Async(const std::optional<StringSeq>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>(false, this, &InitialPrx::_iceI_opMSeq2, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opMSeq2Async(const std::optional<StringSeq>& iceP_p1,
                               ::std::function<void (std::optional<::Test::StringSeq>, std::optional<::Test::StringSeq>)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMSeq2, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMSeq2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>>& outAsync, const std::optional<StringSeq>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opMSeq2_name);
    outAsync->invoke(iceC_Test_Initial_opMSeq2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<StringSeq>, std::optional<StringSeq>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::Test::StringIntDict>
Test::InitialPrx::opMDict1(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<std::optional<StringIntDict>>(true, this, &InitialPrx::_iceI_opMDict1, context).get();
}

::std::future<std::optional<::Test::StringIntDict>>
Test::InitialPrx::opMDict1Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<std::optional<StringIntDict>>(false, this, &InitialPrx::_iceI_opMDict1, context);
}

::std::function<void()>
Test::InitialPrx::opMDict1Async(::std::function<void (std::optional<::Test::StringIntDict>)> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<std::optional<StringIntDict>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMDict1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMDict1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<StringIntDict>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opMDict1_name);
    outAsync->invoke(iceC_Test_Initial_opMDict1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            std::optional<StringIntDict> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

std::optional<::Test::StringIntDict>
Test::InitialPrx::opMDict2(const std::optional<StringIntDict>& iceP_p1, std::optional<StringIntDict>& iceP_p2, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>(true, this, &InitialPrx::_iceI_opMDict2, iceP_p1, context).get();
    iceP_p2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::Test::StringIntDict>, std::optional<::Test::StringIntDict>>>
Test::InitialPrx::opMDict2Async(const std::optional<StringIntDict>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>(false, this, &InitialPrx::_iceI_opMDict2, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opMDict2Async(const std::optional<StringIntDict>& iceP_p1,
                                ::std::function<void (std::optional<::Test::StringIntDict>, std::optional<::Test::StringIntDict>)> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMDict2, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMDict2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>>& outAsync, const std::optional<StringIntDict>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opMDict2_name);
    outAsync->invoke(iceC_Test_Initial_opMDict2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

std::optional<::std::shared_ptr<::Test::G>>
Test::InitialPrx::opMG1(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<std::optional<::std::shared_ptr<G>>>(true, this, &InitialPrx::_iceI_opMG1, context).get();
}

::std::future<std::optional<::std::shared_ptr<::Test::G>>>
Test::InitialPrx::opMG1Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<std::optional<::std::shared_ptr<G>>>(false, this, &InitialPrx::_iceI_opMG1, context);
}

::std::function<void()>
Test::InitialPrx::opMG1Async(::std::function<void (std::optional<::std::shared_ptr<::Test::G>>)> response,
                             ::std::function<void(::std::exception_ptr)> ex,
                             ::std::function<void(bool)> sent,
                             const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<std::optional<::std::shared_ptr<G>>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMG1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMG1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::std::shared_ptr<G>>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opMG1_name);
    outAsync->invoke(iceC_Test_Initial_opMG1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            std::optional<::std::shared_ptr<G>> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

std::optional<::std::shared_ptr<::Test::G>>
Test::InitialPrx::opMG2(const std::optional<::std::shared_ptr<G>>& iceP_p1, std::optional<::std::shared_ptr<G>>& iceP_p2, const ::Ice::Context& context) const
{
    auto _result = ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::shared_ptr<G>>, std::optional<::std::shared_ptr<G>>>>(true, this, &InitialPrx::_iceI_opMG2, iceP_p1, context).get();
    iceP_p2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::std::shared_ptr<::Test::G>>, std::optional<::std::shared_ptr<::Test::G>>>>
Test::InitialPrx::opMG2Async(const std::optional<::std::shared_ptr<G>>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<std::optional<::std::shared_ptr<G>>, std::optional<::std::shared_ptr<G>>>>(false, this, &InitialPrx::_iceI_opMG2, iceP_p1, context);
}

::std::function<void()>
Test::InitialPrx::opMG2Async(const std::optional<::std::shared_ptr<G>>& iceP_p1,
                             ::std::function<void (std::optional<::std::shared_ptr<::Test::G>>, std::optional<::std::shared_ptr<::Test::G>>)> response,
                             ::std::function<void(::std::exception_ptr)> ex,
                             ::std::function<void(bool)> sent,
                             const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<::std::shared_ptr<G>>, std::optional<::std::shared_ptr<G>>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<std::optional<::std::shared_ptr<G>>, std::optional<::std::shared_ptr<G>>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMG2, iceP_p1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMG2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<::std::shared_ptr<G>>, std::optional<::std::shared_ptr<G>>>>>& outAsync, const std::optional<::std::shared_ptr<G>>& iceP_p1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_opMG2_name);
    outAsync->invoke(iceC_Test_Initial_opMG2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<::std::shared_ptr<G>>, std::optional<::std::shared_ptr<G>>> v;
            istr->readAll({1, 3}, ::std::get<0>(v), ::std::get<1>(v));
            return v;
        });
}
/// \endcond

bool
Test::InitialPrx::supportsRequiredParams(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_supportsRequiredParams, context).get();
}

::std::future<bool>
Test::InitialPrx::supportsRequiredParamsAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(false, this, &InitialPrx::_iceI_supportsRequiredParams, context);
}

::std::function<void()>
Test::InitialPrx::supportsRequiredParamsAsync(::std::function<void (bool)> response,
                                              ::std::function<void(::std::exception_ptr)> ex,
                                              ::std::function<void(bool)> sent,
                                              const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_supportsRequiredParams, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsRequiredParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_supportsRequiredParams_name);
    outAsync->invoke(iceC_Test_Initial_supportsRequiredParams_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

bool
Test::InitialPrx::supportsJavaSerializable(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_supportsJavaSerializable, context).get();
}

::std::future<bool>
Test::InitialPrx::supportsJavaSerializableAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(false, this, &InitialPrx::_iceI_supportsJavaSerializable, context);
}

::std::function<void()>
Test::InitialPrx::supportsJavaSerializableAsync(::std::function<void (bool)> response,
                                                ::std::function<void(::std::exception_ptr)> ex,
                                                ::std::function<void(bool)> sent,
                                                const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_supportsJavaSerializable, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsJavaSerializable(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_supportsJavaSerializable_name);
    outAsync->invoke(iceC_Test_Initial_supportsJavaSerializable_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

bool
Test::InitialPrx::supportsCsharpSerializable(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_supportsCsharpSerializable, context).get();
}

::std::future<bool>
Test::InitialPrx::supportsCsharpSerializableAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(false, this, &InitialPrx::_iceI_supportsCsharpSerializable, context);
}

::std::function<void()>
Test::InitialPrx::supportsCsharpSerializableAsync(::std::function<void (bool)> response,
                                                  ::std::function<void(::std::exception_ptr)> ex,
                                                  ::std::function<void(bool)> sent,
                                                  const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_supportsCsharpSerializable, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsCsharpSerializable(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_supportsCsharpSerializable_name);
    outAsync->invoke(iceC_Test_Initial_supportsCsharpSerializable_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

bool
Test::InitialPrx::supportsCppStringView(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_supportsCppStringView, context).get();
}

::std::future<bool>
Test::InitialPrx::supportsCppStringViewAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(false, this, &InitialPrx::_iceI_supportsCppStringView, context);
}

::std::function<void()>
Test::InitialPrx::supportsCppStringViewAsync(::std::function<void (bool)> response,
                                             ::std::function<void(::std::exception_ptr)> ex,
                                             ::std::function<void(bool)> sent,
                                             const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_supportsCppStringView, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsCppStringView(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_supportsCppStringView_name);
    outAsync->invoke(iceC_Test_Initial_supportsCppStringView_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

bool
Test::InitialPrx::supportsNullOptional(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_supportsNullOptional, context).get();
}

::std::future<bool>
Test::InitialPrx::supportsNullOptionalAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(false, this, &InitialPrx::_iceI_supportsNullOptional, context);
}

::std::function<void()>
Test::InitialPrx::supportsNullOptionalAsync(::std::function<void (bool)> response,
                                            ::std::function<void(::std::exception_ptr)> ex,
                                            ::std::function<void(bool)> sent,
                                            const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_supportsNullOptional, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsNullOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_supportsNullOptional_name);
    outAsync->invoke(iceC_Test_Initial_supportsNullOptional_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::InitialPrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

Test::OneOptional::~OneOptional()
{
}

const ::std::string&
Test::OneOptional::ice_staticId()
{
    static const ::std::string typeId = "::Test::OneOptional";
    return typeId;
}

Test::MultiOptional::~MultiOptional()
{
}

const ::std::string&
Test::MultiOptional::ice_staticId()
{
    static const ::std::string typeId = "::Test::MultiOptional";
    return typeId;
}

Test::A::~A()
{
}

const ::std::string&
Test::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

Test::B::~B()
{
}

::std::shared_ptr<::Ice::SlicedData>
Test::B::ice_getSlicedData() const
{
    return _iceSlicedData;
}

/// \cond STREAM
void
Test::B::_iceWrite(::Ice::OutputStream* ostr) const
{
    ostr->startValue(_iceSlicedData);
    _iceWriteImpl(ostr);
    ostr->endValue();
}

void
Test::B::_iceRead(::Ice::InputStream* istr)
{
    istr->startValue();
    _iceReadImpl(istr);
    _iceSlicedData = istr->endValue(true);
}
/// \endcond

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

Test::C::~C()
{
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

Test::WD::~WD()
{
}

const ::std::string&
Test::WD::ice_staticId()
{
    static const ::std::string typeId = "::Test::WD";
    return typeId;
}

Test::OptionalException::~OptionalException()
{
}

const ::std::string&
Test::OptionalException::ice_staticId()
{
    static const ::std::string typeId = "::Test::OptionalException";
    return typeId;
}

Test::DerivedException::~DerivedException()
{
}

const ::std::string&
Test::DerivedException::ice_staticId()
{
    static const ::std::string typeId = "::Test::DerivedException";
    return typeId;
}

Test::RequiredException::~RequiredException()
{
}

const ::std::string&
Test::RequiredException::ice_staticId()
{
    static const ::std::string typeId = "::Test::RequiredException";
    return typeId;
}

/// \cond STREAM
bool
Test::RequiredException::_usesClasses() const
{
    return true;
}
/// \endcond

Test::OptionalWithCustom::~OptionalWithCustom()
{
}

const ::std::string&
Test::OptionalWithCustom::ice_staticId()
{
    static const ::std::string typeId = "::Test::OptionalWithCustom";
    return typeId;
}

Test::E::~E()
{
}

const ::std::string&
Test::E::ice_staticId()
{
    static const ::std::string typeId = "::Test::E";
    return typeId;
}

Test::F::~F()
{
}

const ::std::string&
Test::F::ice_staticId()
{
    static const ::std::string typeId = "::Test::F";
    return typeId;
}

Test::G1::~G1()
{
}

const ::std::string&
Test::G1::ice_staticId()
{
    static const ::std::string typeId = "::Test::G1";
    return typeId;
}

Test::G2::~G2()
{
}

const ::std::string&
Test::G2::ice_staticId()
{
    static const ::std::string typeId = "::Test::G2";
    return typeId;
}

Test::G::~G()
{
}

const ::std::string&
Test::G::ice_staticId()
{
    static const ::std::string typeId = "::Test::G";
    return typeId;
}

Test::Recursive::~Recursive()
{
}

const ::std::string&
Test::Recursive::ice_staticId()
{
    static const ::std::string typeId = "::Test::Recursive";
    return typeId;
}

bool
Test::MyInterface::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyInterface_ids, iceC_Test_MyInterface_ids + 2, s);
}

::std::vector<::std::string>
Test::MyInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MyInterface_ids[0], &iceC_Test_MyInterface_ids[2]);
}

::std::string
Test::MyInterface::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyInterface::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyInterface";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MyInterface::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyInterface::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MyInterface_ops, iceC_Test_MyInterface_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MyInterface_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Initial::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial_ids, iceC_Test_Initial_ids + 2, s);
}

::std::vector<::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Initial_ids[0], &iceC_Test_Initial_ids[2]);
}

::std::string
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_pingPong(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Ice::Value> iceP_o;
    istr->readAll(iceP_o);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<::Ice::Value> ret = this->pingPong(::std::move(iceP_o), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opOptionalException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::int32_t> iceP_a;
    std::optional<::std::string> iceP_b;
    std::optional<::std::shared_ptr<OneOptional>> iceP_o;
    istr->readAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
    inS.endReadParams();
    this->opOptionalException(iceP_a, ::std::move(iceP_b), ::std::move(iceP_o), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opDerivedException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::int32_t> iceP_a;
    std::optional<::std::string> iceP_b;
    std::optional<::std::shared_ptr<OneOptional>> iceP_o;
    istr->readAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
    inS.endReadParams();
    this->opDerivedException(iceP_a, ::std::move(iceP_b), ::std::move(iceP_o), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opRequiredException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::int32_t> iceP_a;
    std::optional<::std::string> iceP_b;
    std::optional<::std::shared_ptr<OneOptional>> iceP_o;
    istr->readAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
    inS.endReadParams();
    this->opRequiredException(iceP_a, ::std::move(iceP_b), ::std::move(iceP_o), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opByte(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::uint8_t> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<::std::uint8_t> iceP_p3;
    std::optional<::std::uint8_t> ret = this->opByte(iceP_p1, iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opBool(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<bool> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<bool> iceP_p3;
    std::optional<bool> ret = this->opBool(iceP_p1, iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opShort(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::int16_t> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<::std::int16_t> iceP_p3;
    std::optional<::std::int16_t> ret = this->opShort(iceP_p1, iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opInt(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::int32_t> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<::std::int32_t> iceP_p3;
    std::optional<::std::int32_t> ret = this->opInt(iceP_p1, iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opLong(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::int64_t> iceP_p1;
    istr->readAll({1}, iceP_p1);
    inS.endReadParams();
    std::optional<::std::int64_t> iceP_p3;
    std::optional<::std::int64_t> ret = this->opLong(iceP_p1, iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({2, 3}, iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFloat(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<float> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<float> iceP_p3;
    std::optional<float> ret = this->opFloat(iceP_p1, iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opDouble(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<double> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<double> iceP_p3;
    std::optional<double> ret = this->opDouble(iceP_p1, iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opString(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::string> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<::std::string> iceP_p3;
    std::optional<::std::string> ret = this->opString(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMyEnum(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<MyEnum> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<MyEnum> iceP_p3;
    std::optional<MyEnum> ret = this->opMyEnum(iceP_p1, iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSmallStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<SmallStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<SmallStruct> iceP_p3;
    std::optional<SmallStruct> ret = this->opSmallStruct(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFixedStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<FixedStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<FixedStruct> iceP_p3;
    std::optional<FixedStruct> ret = this->opFixedStruct(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opVarStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<VarStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<VarStruct> iceP_p3;
    std::optional<VarStruct> ret = this->opVarStruct(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opOneOptional(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::shared_ptr<OneOptional>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<::std::shared_ptr<OneOptional>> iceP_p3;
    std::optional<::std::shared_ptr<OneOptional>> ret = this->opOneOptional(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMyInterfaceProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::optional<MyInterfacePrx>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<::std::optional<MyInterfacePrx>> iceP_p3;
    std::optional<::std::optional<MyInterfacePrx>> ret = this->opMyInterfaceProxy(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opByteSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<ByteSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<ByteSeq> iceP_p3;
    std::optional<ByteSeq> ret = this->opByteSeq(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opBoolSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<BoolSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<BoolSeq> iceP_p3;
    std::optional<BoolSeq> ret = this->opBoolSeq(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opShortSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<ShortSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<ShortSeq> iceP_p3;
    std::optional<ShortSeq> ret = this->opShortSeq(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opIntSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<IntSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<IntSeq> iceP_p3;
    std::optional<IntSeq> ret = this->opIntSeq(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opLongSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<LongSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<LongSeq> iceP_p3;
    std::optional<LongSeq> ret = this->opLongSeq(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFloatSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<FloatSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<FloatSeq> iceP_p3;
    std::optional<FloatSeq> ret = this->opFloatSeq(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opDoubleSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<DoubleSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<DoubleSeq> iceP_p3;
    std::optional<DoubleSeq> ret = this->opDoubleSeq(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opStringSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<StringSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<StringSeq> iceP_p3;
    std::optional<StringSeq> ret = this->opStringSeq(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSmallStructSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<SmallStructSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<SmallStructSeq> iceP_p3;
    std::optional<SmallStructSeq> ret = this->opSmallStructSeq(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSmallStructList(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<SmallStructList> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<SmallStructList> iceP_p3;
    std::optional<SmallStructList> ret = this->opSmallStructList(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFixedStructSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<FixedStructSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<FixedStructSeq> iceP_p3;
    std::optional<FixedStructSeq> ret = this->opFixedStructSeq(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFixedStructList(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<FixedStructList> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<FixedStructList> iceP_p3;
    std::optional<FixedStructList> ret = this->opFixedStructList(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opVarStructSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<VarStructSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<VarStructSeq> iceP_p3;
    std::optional<VarStructSeq> ret = this->opVarStructSeq(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSerializable(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<Serializable> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<Serializable> iceP_p3;
    std::optional<Serializable> ret = this->opSerializable(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opIntIntDict(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<IntIntDict> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<IntIntDict> iceP_p3;
    std::optional<IntIntDict> ret = this->opIntIntDict(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opStringIntDict(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<StringIntDict> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<StringIntDict> iceP_p3;
    std::optional<StringIntDict> ret = this->opStringIntDict(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opIntOneOptionalDict(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<IntOneOptionalDict> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    std::optional<IntOneOptionalDict> iceP_p3;
    std::optional<IntOneOptionalDict> ret = this->opIntOneOptionalDict(::std::move(iceP_p1), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 3}, ret, iceP_p3);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opClassAndUnknownOptional(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<A> iceP_p;
    istr->readAll(iceP_p);
    istr->readPendingValues();
    inS.endReadParams();
    this->opClassAndUnknownOptional(::std::move(iceP_p), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_sendOptionalClass(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_req;
    std::optional<::std::shared_ptr<OneOptional>> iceP_o;
    istr->readAll(iceP_req);
    istr->readAll({1}, iceP_o);
    inS.endReadParams();
    this->sendOptionalClass(iceP_req, ::std::move(iceP_o), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_returnOptionalClass(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_req;
    istr->readAll(iceP_req);
    inS.endReadParams();
    std::optional<::std::shared_ptr<OneOptional>> iceP_o;
    this->returnOptionalClass(iceP_req, iceP_o, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1}, iceP_o);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opG(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<G> iceP_g;
    istr->readAll(iceP_g);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<G> ret = this->opG(::std::move(iceP_g), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opVoid(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->opVoid(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

Test::Initial::OpMStruct1MarshaledResult::OpMStruct1MarshaledResult(const std::optional<SmallStruct>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1}, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMStruct1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setMarshaledResult(this->opMStruct1(current));
    return true;
}
/// \endcond

Test::Initial::OpMStruct2MarshaledResult::OpMStruct2MarshaledResult(const std::optional<SmallStruct>& ret, const std::optional<SmallStruct>& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1, 3}, ret, iceP_p2);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMStruct2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<SmallStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    inS.setMarshaledResult(this->opMStruct2(::std::move(iceP_p1), current));
    return true;
}
/// \endcond

Test::Initial::OpMSeq1MarshaledResult::OpMSeq1MarshaledResult(const std::optional<StringSeq>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1}, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMSeq1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setMarshaledResult(this->opMSeq1(current));
    return true;
}
/// \endcond

Test::Initial::OpMSeq2MarshaledResult::OpMSeq2MarshaledResult(const std::optional<StringSeq>& ret, const std::optional<StringSeq>& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1, 3}, ret, iceP_p2);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMSeq2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<StringSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    inS.setMarshaledResult(this->opMSeq2(::std::move(iceP_p1), current));
    return true;
}
/// \endcond

Test::Initial::OpMDict1MarshaledResult::OpMDict1MarshaledResult(const std::optional<StringIntDict>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1}, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMDict1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setMarshaledResult(this->opMDict1(current));
    return true;
}
/// \endcond

Test::Initial::OpMDict2MarshaledResult::OpMDict2MarshaledResult(const std::optional<StringIntDict>& ret, const std::optional<StringIntDict>& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1, 3}, ret, iceP_p2);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMDict2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<StringIntDict> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    inS.setMarshaledResult(this->opMDict2(::std::move(iceP_p1), current));
    return true;
}
/// \endcond

Test::Initial::OpMG1MarshaledResult::OpMG1MarshaledResult(const std::optional<::std::shared_ptr<G>>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1}, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMG1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setMarshaledResult(this->opMG1(current));
    return true;
}
/// \endcond

Test::Initial::OpMG2MarshaledResult::OpMG2MarshaledResult(const std::optional<::std::shared_ptr<G>>& ret, const std::optional<::std::shared_ptr<G>>& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1, 3}, ret, iceP_p2);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMG2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<::std::shared_ptr<G>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    inS.setMarshaledResult(this->opMG2(::std::move(iceP_p1), current));
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsRequiredParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->supportsRequiredParams(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsJavaSerializable(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->supportsJavaSerializable(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsCsharpSerializable(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->supportsCsharpSerializable(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsCppStringView(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->supportsCppStringView(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsNullOptional(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->supportsNullOptional(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial_ops, iceC_Test_Initial_ops + 58, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opBool(in, current);
        }
        case 5:
        {
            return _iceD_opBoolSeq(in, current);
        }
        case 6:
        {
            return _iceD_opByte(in, current);
        }
        case 7:
        {
            return _iceD_opByteSeq(in, current);
        }
        case 8:
        {
            return _iceD_opClassAndUnknownOptional(in, current);
        }
        case 9:
        {
            return _iceD_opDerivedException(in, current);
        }
        case 10:
        {
            return _iceD_opDouble(in, current);
        }
        case 11:
        {
            return _iceD_opDoubleSeq(in, current);
        }
        case 12:
        {
            return _iceD_opFixedStruct(in, current);
        }
        case 13:
        {
            return _iceD_opFixedStructList(in, current);
        }
        case 14:
        {
            return _iceD_opFixedStructSeq(in, current);
        }
        case 15:
        {
            return _iceD_opFloat(in, current);
        }
        case 16:
        {
            return _iceD_opFloatSeq(in, current);
        }
        case 17:
        {
            return _iceD_opG(in, current);
        }
        case 18:
        {
            return _iceD_opInt(in, current);
        }
        case 19:
        {
            return _iceD_opIntIntDict(in, current);
        }
        case 20:
        {
            return _iceD_opIntOneOptionalDict(in, current);
        }
        case 21:
        {
            return _iceD_opIntSeq(in, current);
        }
        case 22:
        {
            return _iceD_opLong(in, current);
        }
        case 23:
        {
            return _iceD_opLongSeq(in, current);
        }
        case 24:
        {
            return _iceD_opMDict1(in, current);
        }
        case 25:
        {
            return _iceD_opMDict2(in, current);
        }
        case 26:
        {
            return _iceD_opMG1(in, current);
        }
        case 27:
        {
            return _iceD_opMG2(in, current);
        }
        case 28:
        {
            return _iceD_opMSeq1(in, current);
        }
        case 29:
        {
            return _iceD_opMSeq2(in, current);
        }
        case 30:
        {
            return _iceD_opMStruct1(in, current);
        }
        case 31:
        {
            return _iceD_opMStruct2(in, current);
        }
        case 32:
        {
            return _iceD_opMyEnum(in, current);
        }
        case 33:
        {
            return _iceD_opMyInterfaceProxy(in, current);
        }
        case 34:
        {
            return _iceD_opOneOptional(in, current);
        }
        case 35:
        {
            return _iceD_opOptionalException(in, current);
        }
        case 36:
        {
            return _iceD_opRequiredException(in, current);
        }
        case 37:
        {
            return _iceD_opSerializable(in, current);
        }
        case 38:
        {
            return _iceD_opShort(in, current);
        }
        case 39:
        {
            return _iceD_opShortSeq(in, current);
        }
        case 40:
        {
            return _iceD_opSmallStruct(in, current);
        }
        case 41:
        {
            return _iceD_opSmallStructList(in, current);
        }
        case 42:
        {
            return _iceD_opSmallStructSeq(in, current);
        }
        case 43:
        {
            return _iceD_opString(in, current);
        }
        case 44:
        {
            return _iceD_opStringIntDict(in, current);
        }
        case 45:
        {
            return _iceD_opStringSeq(in, current);
        }
        case 46:
        {
            return _iceD_opVarStruct(in, current);
        }
        case 47:
        {
            return _iceD_opVarStructSeq(in, current);
        }
        case 48:
        {
            return _iceD_opVoid(in, current);
        }
        case 49:
        {
            return _iceD_pingPong(in, current);
        }
        case 50:
        {
            return _iceD_returnOptionalClass(in, current);
        }
        case 51:
        {
            return _iceD_sendOptionalClass(in, current);
        }
        case 52:
        {
            return _iceD_shutdown(in, current);
        }
        case 53:
        {
            return _iceD_supportsCppStringView(in, current);
        }
        case 54:
        {
            return _iceD_supportsCsharpSerializable(in, current);
        }
        case 55:
        {
            return _iceD_supportsJavaSerializable(in, current);
        }
        case 56:
        {
            return _iceD_supportsNullOptional(in, current);
        }
        case 57:
        {
            return _iceD_supportsRequiredParams(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
