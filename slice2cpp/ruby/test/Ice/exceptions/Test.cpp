//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_Test_Empty_ids[2] =
{
    "::Ice::Object",
    "::Test::Empty"
};
const ::std::string iceC_Test_Empty_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::A> iceC_Test_A_init("::Test::A");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::B> iceC_Test_B_init("::Test::B");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::D> iceC_Test_D_init("::Test::D");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Mod::A> iceC_Test_Mod_A_init("::Test::Mod::A");

const ::std::string iceC_Test_Thrower_ids[2] =
{
    "::Ice::Object",
    "::Test::Thrower"
};
const ::std::string iceC_Test_Thrower_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown",
    "supportsAssertException",
    "supportsUndeclaredExceptions",
    "throwAasA",
    "throwAorDasAorD",
    "throwAssertException",
    "throwBasA",
    "throwBasB",
    "throwCasA",
    "throwCasB",
    "throwCasC",
    "throwLocalException",
    "throwLocalExceptionIdempotent",
    "throwMemoryLimitException",
    "throwModA",
    "throwNonIceException",
    "throwUndeclaredA",
    "throwUndeclaredB",
    "throwUndeclaredC"
};
const ::std::string iceC_Test_Thrower_shutdown_name = "shutdown";
const ::std::string iceC_Test_Thrower_supportsUndeclaredExceptions_name = "supportsUndeclaredExceptions";
const ::std::string iceC_Test_Thrower_supportsAssertException_name = "supportsAssertException";
const ::std::string iceC_Test_Thrower_throwAasA_name = "throwAasA";
const ::std::string iceC_Test_Thrower_throwAorDasAorD_name = "throwAorDasAorD";
const ::std::string iceC_Test_Thrower_throwBasA_name = "throwBasA";
const ::std::string iceC_Test_Thrower_throwCasA_name = "throwCasA";
const ::std::string iceC_Test_Thrower_throwBasB_name = "throwBasB";
const ::std::string iceC_Test_Thrower_throwCasB_name = "throwCasB";
const ::std::string iceC_Test_Thrower_throwCasC_name = "throwCasC";
const ::std::string iceC_Test_Thrower_throwModA_name = "throwModA";
const ::std::string iceC_Test_Thrower_throwUndeclaredA_name = "throwUndeclaredA";
const ::std::string iceC_Test_Thrower_throwUndeclaredB_name = "throwUndeclaredB";
const ::std::string iceC_Test_Thrower_throwUndeclaredC_name = "throwUndeclaredC";
const ::std::string iceC_Test_Thrower_throwLocalException_name = "throwLocalException";
const ::std::string iceC_Test_Thrower_throwNonIceException_name = "throwNonIceException";
const ::std::string iceC_Test_Thrower_throwAssertException_name = "throwAssertException";
const ::std::string iceC_Test_Thrower_throwMemoryLimitException_name = "throwMemoryLimitException";
const ::std::string iceC_Test_Thrower_throwLocalExceptionIdempotent_name = "throwLocalExceptionIdempotent";

const ::std::string iceC_Test_WrongOperation_ids[2] =
{
    "::Ice::Object",
    "::Test::WrongOperation"
};
const ::std::string iceC_Test_WrongOperation_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "noSuchOperation"
};
const ::std::string iceC_Test_WrongOperation_noSuchOperation_name = "noSuchOperation";

}

Test::A::~A()
{
}

const ::std::string&
Test::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

Test::B::~B()
{
}

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

Test::C::~C()
{
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

Test::D::~D()
{
}

const ::std::string&
Test::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

Test::Mod::A::~A()
{
}

const ::std::string&
Test::Mod::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::Mod::A";
    return typeId;
}

bool
Test::Empty::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Empty_ids, iceC_Test_Empty_ids + 2, s);
}

::std::vector<::std::string>
Test::Empty::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Empty_ids[0], &iceC_Test_Empty_ids[2]);
}

::std::string
Test::Empty::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Empty::ice_staticId()
{
    static const ::std::string typeId = "::Test::Empty";
    return typeId;
}

bool
Test::Thrower::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Thrower_ids, iceC_Test_Thrower_ids + 2, s);
}

::std::vector<::std::string>
Test::Thrower::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Thrower_ids[0], &iceC_Test_Thrower_ids[2]);
}

::std::string
Test::Thrower::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Thrower::ice_staticId()
{
    static const ::std::string typeId = "::Test::Thrower";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Thrower::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_supportsUndeclaredExceptions(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->supportsUndeclaredExceptions(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_supportsAssertException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->supportsAssertException(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAasA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->throwAasA(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAorDasAorD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->throwAorDasAorD(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwBasA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    istr->readAll(iceP_a, iceP_b);
    inS.endReadParams();
    this->throwBasA(iceP_a, iceP_b, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwCasA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    int iceP_c;
    istr->readAll(iceP_a, iceP_b, iceP_c);
    inS.endReadParams();
    this->throwCasA(iceP_a, iceP_b, iceP_c, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwBasB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    istr->readAll(iceP_a, iceP_b);
    inS.endReadParams();
    this->throwBasB(iceP_a, iceP_b, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwCasB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    int iceP_c;
    istr->readAll(iceP_a, iceP_b, iceP_c);
    inS.endReadParams();
    this->throwCasB(iceP_a, iceP_b, iceP_c, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwCasC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    int iceP_c;
    istr->readAll(iceP_a, iceP_b, iceP_c);
    inS.endReadParams();
    this->throwCasC(iceP_a, iceP_b, iceP_c, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwModA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_a2;
    istr->readAll(iceP_a, iceP_a2);
    inS.endReadParams();
    this->throwModA(iceP_a, iceP_a2, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwUndeclaredA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->throwUndeclaredA(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwUndeclaredB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    istr->readAll(iceP_a, iceP_b);
    inS.endReadParams();
    this->throwUndeclaredB(iceP_a, iceP_b, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwUndeclaredC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    int iceP_c;
    istr->readAll(iceP_a, iceP_b, iceP_c);
    inS.endReadParams();
    this->throwUndeclaredC(iceP_a, iceP_b, iceP_c, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwLocalException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwLocalException(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwNonIceException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwNonIceException(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAssertException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwAssertException(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwMemoryLimitException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::ByteSeq iceP_seq;
    istr->readAll(iceP_seq);
    inS.endReadParams();
    ::Ice::ByteSeq ret = this->throwMemoryLimitException(::std::move(iceP_seq), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwLocalExceptionIdempotent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    this->throwLocalExceptionIdempotent(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Thrower_ops, iceC_Test_Thrower_ops + 23, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Thrower_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_shutdown(in, current);
        }
        case 5:
        {
            return _iceD_supportsAssertException(in, current);
        }
        case 6:
        {
            return _iceD_supportsUndeclaredExceptions(in, current);
        }
        case 7:
        {
            return _iceD_throwAasA(in, current);
        }
        case 8:
        {
            return _iceD_throwAorDasAorD(in, current);
        }
        case 9:
        {
            return _iceD_throwAssertException(in, current);
        }
        case 10:
        {
            return _iceD_throwBasA(in, current);
        }
        case 11:
        {
            return _iceD_throwBasB(in, current);
        }
        case 12:
        {
            return _iceD_throwCasA(in, current);
        }
        case 13:
        {
            return _iceD_throwCasB(in, current);
        }
        case 14:
        {
            return _iceD_throwCasC(in, current);
        }
        case 15:
        {
            return _iceD_throwLocalException(in, current);
        }
        case 16:
        {
            return _iceD_throwLocalExceptionIdempotent(in, current);
        }
        case 17:
        {
            return _iceD_throwMemoryLimitException(in, current);
        }
        case 18:
        {
            return _iceD_throwModA(in, current);
        }
        case 19:
        {
            return _iceD_throwNonIceException(in, current);
        }
        case 20:
        {
            return _iceD_throwUndeclaredA(in, current);
        }
        case 21:
        {
            return _iceD_throwUndeclaredB(in, current);
        }
        case 22:
        {
            return _iceD_throwUndeclaredC(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::WrongOperation::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_WrongOperation_ids, iceC_Test_WrongOperation_ids + 2, s);
}

::std::vector<::std::string>
Test::WrongOperation::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_WrongOperation_ids[0], &iceC_Test_WrongOperation_ids[2]);
}

::std::string
Test::WrongOperation::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::WrongOperation::ice_staticId()
{
    static const ::std::string typeId = "::Test::WrongOperation";
    return typeId;
}

/// \cond INTERNAL
bool
Test::WrongOperation::_iceD_noSuchOperation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->noSuchOperation(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::WrongOperation::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_WrongOperation_ops, iceC_Test_WrongOperation_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_WrongOperation_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_noSuchOperation(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::EmptyPrx::_newInstance() const
{
    return ::IceInternal::createProxy<EmptyPrx>();
}
/// \endcond

const ::std::string&
Test::EmptyPrx::ice_staticId()
{
    return Empty::ice_staticId();
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_supportsUndeclaredExceptions(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_supportsUndeclaredExceptions_name);
    outAsync->invoke(iceC_Test_Thrower_supportsUndeclaredExceptions_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_supportsAssertException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_supportsAssertException_name);
    outAsync->invoke(iceC_Test_Thrower_supportsAssertException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwAasA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwAasA_name);
    outAsync->invoke(iceC_Test_Thrower_throwAasA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const A&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwAorDasAorD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwAorDasAorD_name);
    outAsync->invoke(iceC_Test_Thrower_throwAorDasAorD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const A&)
            {
                throw;
            }
            catch(const D&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwBasA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwBasA_name);
    outAsync->invoke(iceC_Test_Thrower_throwBasA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const A&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwCasA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwCasA_name);
    outAsync->invoke(iceC_Test_Thrower_throwCasA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b, iceP_c);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const A&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwBasB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwBasB_name);
    outAsync->invoke(iceC_Test_Thrower_throwBasB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const B&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwCasB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwCasB_name);
    outAsync->invoke(iceC_Test_Thrower_throwCasB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b, iceP_c);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const B&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwCasC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwCasC_name);
    outAsync->invoke(iceC_Test_Thrower_throwCasC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b, iceP_c);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const C&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwModA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_a2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwModA_name);
    outAsync->invoke(iceC_Test_Thrower_throwModA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_a2);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Test::Mod::A&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwUndeclaredA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_throwUndeclaredA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwUndeclaredB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_throwUndeclaredB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwUndeclaredC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_throwUndeclaredC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b, iceP_c);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwLocalException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_throwLocalException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwNonIceException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_throwNonIceException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwAssertException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_throwAssertException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwMemoryLimitException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Ice::ByteSeq>>& outAsync, const ::Ice::ByteSeq& iceP_seq, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwMemoryLimitException_name);
    outAsync->invoke(iceC_Test_Thrower_throwMemoryLimitException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_seq);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwLocalExceptionIdempotent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_throwLocalExceptionIdempotent_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::ThrowerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ThrowerPrx>();
}
/// \endcond

const ::std::string&
Test::ThrowerPrx::ice_staticId()
{
    return Thrower::ice_staticId();
}

/// \cond INTERNAL
void
Test::WrongOperationPrx::_iceI_noSuchOperation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_WrongOperation_noSuchOperation_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::WrongOperationPrx::_newInstance() const
{
    return ::IceInternal::createProxy<WrongOperationPrx>();
}
/// \endcond

const ::std::string&
Test::WrongOperationPrx::ice_staticId()
{
    return WrongOperation::ice_staticId();
}
