//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::C1> iceC_Test_C1_init("::Test::C1");

const ::IceInternal::DefaultValueFactoryInit<::Test::C2> iceC_Test_C2_init("::Test::C2");

const ::std::string iceC_Test_I_ids[2] =
{
    "::Ice::Object",
    "::Test::I"
};
const ::std::string iceC_Test_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opC1",
    "opCMap",
    "opCSeq",
    "opE1",
    "opS",
    "opS1",
    "opSMap",
    "opSSeq",
    "shutdown"
};
const ::std::string iceC_Test_I_opS_name = "opS";
const ::std::string iceC_Test_I_opSSeq_name = "opSSeq";
const ::std::string iceC_Test_I_opSMap_name = "opSMap";
const ::std::string iceC_Test_I_opC_name = "opC";
const ::std::string iceC_Test_I_opCSeq_name = "opCSeq";
const ::std::string iceC_Test_I_opCMap_name = "opCMap";
const ::std::string iceC_Test_I_opE1_name = "opE1";
const ::std::string iceC_Test_I_opS1_name = "opS1";
const ::std::string iceC_Test_I_opC1_name = "opC1";
const ::std::string iceC_Test_I_shutdown_name = "shutdown";

const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::Inner2::C> iceC_Test_Inner_Inner2_C_init("::Test::Inner::Inner2::C");

const ::std::string iceC_Test_Inner_Inner2_I_ids[2] =
{
    "::Ice::Object",
    "::Test::Inner::Inner2::I"
};
const ::std::string iceC_Test_Inner_Inner2_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opCMap",
    "opCSeq",
    "opS",
    "opSMap",
    "opSSeq",
    "shutdown"
};
const ::std::string iceC_Test_Inner_Inner2_I_opS_name = "opS";
const ::std::string iceC_Test_Inner_Inner2_I_opSSeq_name = "opSSeq";
const ::std::string iceC_Test_Inner_Inner2_I_opSMap_name = "opSMap";
const ::std::string iceC_Test_Inner_Inner2_I_opC_name = "opC";
const ::std::string iceC_Test_Inner_Inner2_I_opCSeq_name = "opCSeq";
const ::std::string iceC_Test_Inner_Inner2_I_opCMap_name = "opCMap";
const ::std::string iceC_Test_Inner_Inner2_I_shutdown_name = "shutdown";

const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::C> iceC_Test_Inner_C_init("::Test::Inner::C");

const ::std::string iceC_Test_Inner_I_ids[2] =
{
    "::Ice::Object",
    "::Test::Inner::I"
};
const ::std::string iceC_Test_Inner_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opCMap",
    "opCSeq",
    "opS",
    "opSMap",
    "opSSeq",
    "shutdown"
};
const ::std::string iceC_Test_Inner_I_opS_name = "opS";
const ::std::string iceC_Test_Inner_I_opSSeq_name = "opSSeq";
const ::std::string iceC_Test_Inner_I_opSMap_name = "opSMap";
const ::std::string iceC_Test_Inner_I_opC_name = "opC";
const ::std::string iceC_Test_Inner_I_opCSeq_name = "opCSeq";
const ::std::string iceC_Test_Inner_I_opCMap_name = "opCMap";
const ::std::string iceC_Test_Inner_I_shutdown_name = "shutdown";

const ::std::string iceC_Inner_Test_Inner2_I_ids[2] =
{
    "::Ice::Object",
    "::Inner::Test::Inner2::I"
};
const ::std::string iceC_Inner_Test_Inner2_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opCMap",
    "opCSeq",
    "opS",
    "opSMap",
    "opSSeq",
    "shutdown"
};
const ::std::string iceC_Inner_Test_Inner2_I_opS_name = "opS";
const ::std::string iceC_Inner_Test_Inner2_I_opSSeq_name = "opSSeq";
const ::std::string iceC_Inner_Test_Inner2_I_opSMap_name = "opSMap";
const ::std::string iceC_Inner_Test_Inner2_I_opC_name = "opC";
const ::std::string iceC_Inner_Test_Inner2_I_opCSeq_name = "opCSeq";
const ::std::string iceC_Inner_Test_Inner2_I_opCMap_name = "opCMap";
const ::std::string iceC_Inner_Test_Inner2_I_shutdown_name = "shutdown";

}

::Test::S
Test::IPrx::opS(const S& iceP_s1, S& iceP_s2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<S, S>>(true, this, &IPrx::_iceI_opS, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::S, ::Test::S>>
Test::IPrx::opSAsync(const S& iceP_s1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<S, S>, ::std::promise>(false, this, &IPrx::_iceI_opS, iceP_s1, context);
}

::std::function<void()>
Test::IPrx::opSAsync(const S& iceP_s1,
                     ::std::function<void (::Test::S, ::Test::S)> response,
                     ::std::function<void(::std::exception_ptr)> ex,
                     ::std::function<void(bool)> sent,
                     const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<S, S>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<S, S>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opS, iceP_s1, context);
}

/// \cond INTERNAL
void
Test::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<S, S>>>& outAsync, const S& iceP_s1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_I_opS_name);
    outAsync->invoke(iceC_Test_I_opS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<S, S> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::SSeq
Test::IPrx::opSSeq(const SSeq& iceP_s1, SSeq& iceP_s2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<SSeq, SSeq>>(true, this, &IPrx::_iceI_opSSeq, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::SSeq, ::Test::SSeq>>
Test::IPrx::opSSeqAsync(const SSeq& iceP_s1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<SSeq, SSeq>, ::std::promise>(false, this, &IPrx::_iceI_opSSeq, iceP_s1, context);
}

::std::function<void()>
Test::IPrx::opSSeqAsync(const SSeq& iceP_s1,
                        ::std::function<void (::Test::SSeq, ::Test::SSeq)> response,
                        ::std::function<void(::std::exception_ptr)> ex,
                        ::std::function<void(bool)> sent,
                        const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<SSeq, SSeq>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<SSeq, SSeq>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opSSeq, iceP_s1, context);
}

/// \cond INTERNAL
void
Test::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SSeq, SSeq>>>& outAsync, const SSeq& iceP_s1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_I_opSSeq_name);
    outAsync->invoke(iceC_Test_I_opSSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<SSeq, SSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::SMap
Test::IPrx::opSMap(const SMap& iceP_s1, SMap& iceP_s2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<SMap, SMap>>(true, this, &IPrx::_iceI_opSMap, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::SMap, ::Test::SMap>>
Test::IPrx::opSMapAsync(const SMap& iceP_s1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<SMap, SMap>, ::std::promise>(false, this, &IPrx::_iceI_opSMap, iceP_s1, context);
}

::std::function<void()>
Test::IPrx::opSMapAsync(const SMap& iceP_s1,
                        ::std::function<void (::Test::SMap, ::Test::SMap)> response,
                        ::std::function<void(::std::exception_ptr)> ex,
                        ::std::function<void(bool)> sent,
                        const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<SMap, SMap>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<SMap, SMap>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opSMap, iceP_s1, context);
}

/// \cond INTERNAL
void
Test::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SMap, SMap>>>& outAsync, const SMap& iceP_s1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_I_opSMap_name);
    outAsync->invoke(iceC_Test_I_opSMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<SMap, SMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::std::shared_ptr<::Test::C>
Test::IPrx::opC(const ::std::shared_ptr<C>& iceP_c1, ::std::shared_ptr<C>& iceP_c2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>>>(true, this, &IPrx::_iceI_opC, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>>>
Test::IPrx::opCAsync(const ::std::shared_ptr<C>& iceP_c1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>>, ::std::promise>(false, this, &IPrx::_iceI_opC, iceP_c1, context);
}

::std::function<void()>
Test::IPrx::opCAsync(const ::std::shared_ptr<C>& iceP_c1,
                     ::std::function<void (::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>)> response,
                     ::std::function<void(::std::exception_ptr)> ex,
                     ::std::function<void(bool)> sent,
                     const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opC, iceP_c1, context);
}

/// \cond INTERNAL
void
Test::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>>>>& outAsync, const ::std::shared_ptr<C>& iceP_c1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_I_opC_name);
    outAsync->invoke(iceC_Test_I_opC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

::Test::CSeq
Test::IPrx::opCSeq(const CSeq& iceP_s1, CSeq& iceP_s2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<CSeq, CSeq>>(true, this, &IPrx::_iceI_opCSeq, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::CSeq, ::Test::CSeq>>
Test::IPrx::opCSeqAsync(const CSeq& iceP_s1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<CSeq, CSeq>, ::std::promise>(false, this, &IPrx::_iceI_opCSeq, iceP_s1, context);
}

::std::function<void()>
Test::IPrx::opCSeqAsync(const CSeq& iceP_s1,
                        ::std::function<void (::Test::CSeq, ::Test::CSeq)> response,
                        ::std::function<void(::std::exception_ptr)> ex,
                        ::std::function<void(bool)> sent,
                        const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<CSeq, CSeq>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<CSeq, CSeq>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opCSeq, iceP_s1, context);
}

/// \cond INTERNAL
void
Test::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CSeq, CSeq>>>& outAsync, const CSeq& iceP_s1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_I_opCSeq_name);
    outAsync->invoke(iceC_Test_I_opCSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<CSeq, CSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

::Test::CMap
Test::IPrx::opCMap(const CMap& iceP_c1, CMap& iceP_c2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<CMap, CMap>>(true, this, &IPrx::_iceI_opCMap, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::CMap, ::Test::CMap>>
Test::IPrx::opCMapAsync(const CMap& iceP_c1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<CMap, CMap>, ::std::promise>(false, this, &IPrx::_iceI_opCMap, iceP_c1, context);
}

::std::function<void()>
Test::IPrx::opCMapAsync(const CMap& iceP_c1,
                        ::std::function<void (::Test::CMap, ::Test::CMap)> response,
                        ::std::function<void(::std::exception_ptr)> ex,
                        ::std::function<void(bool)> sent,
                        const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<CMap, CMap>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<CMap, CMap>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opCMap, iceP_c1, context);
}

/// \cond INTERNAL
void
Test::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CMap, CMap>>>& outAsync, const CMap& iceP_c1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_I_opCMap_name);
    outAsync->invoke(iceC_Test_I_opCMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<CMap, CMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

::Test::E1
Test::IPrx::opE1(E1 iceP_E1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<E1>(true, this, &IPrx::_iceI_opE1, iceP_E1, context).get();
}

::std::future<::Test::E1>
Test::IPrx::opE1Async(E1 iceP_E1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<E1, ::std::promise>(false, this, &IPrx::_iceI_opE1, iceP_E1, context);
}

::std::function<void()>
Test::IPrx::opE1Async(E1 iceP_E1,
                      ::std::function<void (::Test::E1)> response,
                      ::std::function<void(::std::exception_ptr)> ex,
                      ::std::function<void(bool)> sent,
                      const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<E1>(std::move(response), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opE1, iceP_E1, context);
}

/// \cond INTERNAL
void
Test::IPrx::_iceI_opE1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<E1>>& outAsync, E1 iceP_E1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_I_opE1_name);
    outAsync->invoke(iceC_Test_I_opE1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_E1);
        },
        nullptr);
}
/// \endcond

::Test::S1
Test::IPrx::opS1(const S1& iceP_S1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<S1>(true, this, &IPrx::_iceI_opS1, iceP_S1, context).get();
}

::std::future<::Test::S1>
Test::IPrx::opS1Async(const S1& iceP_S1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<S1, ::std::promise>(false, this, &IPrx::_iceI_opS1, iceP_S1, context);
}

::std::function<void()>
Test::IPrx::opS1Async(const S1& iceP_S1,
                      ::std::function<void (::Test::S1)> response,
                      ::std::function<void(::std::exception_ptr)> ex,
                      ::std::function<void(bool)> sent,
                      const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<S1>(std::move(response), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opS1, iceP_S1, context);
}

/// \cond INTERNAL
void
Test::IPrx::_iceI_opS1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<S1>>& outAsync, const S1& iceP_S1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_I_opS1_name);
    outAsync->invoke(iceC_Test_I_opS1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_S1);
        },
        nullptr);
}
/// \endcond

::std::shared_ptr<::Test::C1>
Test::IPrx::opC1(const ::std::shared_ptr<C1>& iceP_C1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<C1>>(true, this, &IPrx::_iceI_opC1, iceP_C1, context).get();
}

::std::future<::std::shared_ptr<::Test::C1>>
Test::IPrx::opC1Async(const ::std::shared_ptr<C1>& iceP_C1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<C1>, ::std::promise>(false, this, &IPrx::_iceI_opC1, iceP_C1, context);
}

::std::function<void()>
Test::IPrx::opC1Async(const ::std::shared_ptr<C1>& iceP_C1,
                      ::std::function<void (::std::shared_ptr<::Test::C1>)> response,
                      ::std::function<void(::std::exception_ptr)> ex,
                      ::std::function<void(bool)> sent,
                      const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::shared_ptr<C1>>(std::move(response), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opC1, iceP_C1, context);
}

/// \cond INTERNAL
void
Test::IPrx::_iceI_opC1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<C1>>>& outAsync, const ::std::shared_ptr<C1>& iceP_C1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_I_opC1_name);
    outAsync->invoke(iceC_Test_I_opC1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_C1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<C1> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

void
Test::IPrx::shutdown(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &IPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::IPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &IPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::IPrx::shutdownAsync(::std::function<void ()> response,
                          ::std::function<void(::std::exception_ptr)> ex,
                          ::std::function<void(bool)> sent,
                          const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_I_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::IPrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::I";
    return typeId;
}

::Test::Inner::Inner2::S
Test::Inner::Inner2::IPrx::opS(const S& iceP_s1, S& iceP_s2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<S, S>>(true, this, &IPrx::_iceI_opS, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>>
Test::Inner::Inner2::IPrx::opSAsync(const S& iceP_s1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<S, S>, ::std::promise>(false, this, &IPrx::_iceI_opS, iceP_s1, context);
}

::std::function<void()>
Test::Inner::Inner2::IPrx::opSAsync(const S& iceP_s1,
                                    ::std::function<void (::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S)> response,
                                    ::std::function<void(::std::exception_ptr)> ex,
                                    ::std::function<void(bool)> sent,
                                    const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<S, S>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<S, S>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opS, iceP_s1, context);
}

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<S, S>>>& outAsync, const S& iceP_s1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opS_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<S, S> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::Inner::Inner2::SSeq
Test::Inner::Inner2::IPrx::opSSeq(const SSeq& iceP_s1, SSeq& iceP_s2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<SSeq, SSeq>>(true, this, &IPrx::_iceI_opSSeq, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>>
Test::Inner::Inner2::IPrx::opSSeqAsync(const SSeq& iceP_s1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<SSeq, SSeq>, ::std::promise>(false, this, &IPrx::_iceI_opSSeq, iceP_s1, context);
}

::std::function<void()>
Test::Inner::Inner2::IPrx::opSSeqAsync(const SSeq& iceP_s1,
                                       ::std::function<void (::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq)> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<SSeq, SSeq>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<SSeq, SSeq>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opSSeq, iceP_s1, context);
}

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SSeq, SSeq>>>& outAsync, const SSeq& iceP_s1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opSSeq_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opSSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<SSeq, SSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::Inner::Inner2::SMap
Test::Inner::Inner2::IPrx::opSMap(const SMap& iceP_s1, SMap& iceP_s2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<SMap, SMap>>(true, this, &IPrx::_iceI_opSMap, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>>
Test::Inner::Inner2::IPrx::opSMapAsync(const SMap& iceP_s1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<SMap, SMap>, ::std::promise>(false, this, &IPrx::_iceI_opSMap, iceP_s1, context);
}

::std::function<void()>
Test::Inner::Inner2::IPrx::opSMapAsync(const SMap& iceP_s1,
                                       ::std::function<void (::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap)> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<SMap, SMap>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<SMap, SMap>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opSMap, iceP_s1, context);
}

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SMap, SMap>>>& outAsync, const SMap& iceP_s1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opSMap_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opSMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<SMap, SMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::std::shared_ptr<::Test::Inner::Inner2::C>
Test::Inner::Inner2::IPrx::opC(const ::std::shared_ptr<C>& iceP_c1, ::std::shared_ptr<C>& iceP_c2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>>>(true, this, &IPrx::_iceI_opC, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>>>
Test::Inner::Inner2::IPrx::opCAsync(const ::std::shared_ptr<C>& iceP_c1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>>, ::std::promise>(false, this, &IPrx::_iceI_opC, iceP_c1, context);
}

::std::function<void()>
Test::Inner::Inner2::IPrx::opCAsync(const ::std::shared_ptr<C>& iceP_c1,
                                    ::std::function<void (::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>)> response,
                                    ::std::function<void(::std::exception_ptr)> ex,
                                    ::std::function<void(bool)> sent,
                                    const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opC, iceP_c1, context);
}

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>>>>& outAsync, const ::std::shared_ptr<C>& iceP_c1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opC_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

::Test::Inner::Inner2::CSeq
Test::Inner::Inner2::IPrx::opCSeq(const CSeq& iceP_c1, CSeq& iceP_c2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<CSeq, CSeq>>(true, this, &IPrx::_iceI_opCSeq, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>>
Test::Inner::Inner2::IPrx::opCSeqAsync(const CSeq& iceP_c1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<CSeq, CSeq>, ::std::promise>(false, this, &IPrx::_iceI_opCSeq, iceP_c1, context);
}

::std::function<void()>
Test::Inner::Inner2::IPrx::opCSeqAsync(const CSeq& iceP_c1,
                                       ::std::function<void (::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq)> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<CSeq, CSeq>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<CSeq, CSeq>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opCSeq, iceP_c1, context);
}

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CSeq, CSeq>>>& outAsync, const CSeq& iceP_c1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opCSeq_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opCSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<CSeq, CSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

::Test::Inner::Inner2::CMap
Test::Inner::Inner2::IPrx::opCMap(const CMap& iceP_c1, CMap& iceP_c2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<CMap, CMap>>(true, this, &IPrx::_iceI_opCMap, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>>
Test::Inner::Inner2::IPrx::opCMapAsync(const CMap& iceP_c1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<CMap, CMap>, ::std::promise>(false, this, &IPrx::_iceI_opCMap, iceP_c1, context);
}

::std::function<void()>
Test::Inner::Inner2::IPrx::opCMapAsync(const CMap& iceP_c1,
                                       ::std::function<void (::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap)> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<CMap, CMap>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<CMap, CMap>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opCMap, iceP_c1, context);
}

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CMap, CMap>>>& outAsync, const CMap& iceP_c1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opCMap_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opCMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<CMap, CMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

void
Test::Inner::Inner2::IPrx::shutdown(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &IPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::Inner::Inner2::IPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &IPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::Inner::Inner2::IPrx::shutdownAsync(::std::function<void ()> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Inner_Inner2_I_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::Inner::Inner2::IPrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Inner2::I";
    return typeId;
}

::Test::Inner::Inner2::S
Test::Inner::IPrx::opS(const ::Test::Inner::Inner2::S& iceP_s1, ::Test::Inner::Inner2::S& iceP_s2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>>(true, this, &IPrx::_iceI_opS, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>>
Test::Inner::IPrx::opSAsync(const ::Test::Inner::Inner2::S& iceP_s1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>, ::std::promise>(false, this, &IPrx::_iceI_opS, iceP_s1, context);
}

::std::function<void()>
Test::Inner::IPrx::opSAsync(const ::Test::Inner::Inner2::S& iceP_s1,
                            ::std::function<void (::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S)> response,
                            ::std::function<void(::std::exception_ptr)> ex,
                            ::std::function<void(bool)> sent,
                            const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::IPrx::_iceI_opS, iceP_s1, context);
}

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>>>& outAsync, const ::Test::Inner::Inner2::S& iceP_s1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Inner_I_opS_name);
    outAsync->invoke(iceC_Test_Inner_I_opS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::Inner::Inner2::SSeq
Test::Inner::IPrx::opSSeq(const ::Test::Inner::Inner2::SSeq& iceP_s1, ::Test::Inner::Inner2::SSeq& iceP_s2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>>(true, this, &IPrx::_iceI_opSSeq, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>>
Test::Inner::IPrx::opSSeqAsync(const ::Test::Inner::Inner2::SSeq& iceP_s1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>, ::std::promise>(false, this, &IPrx::_iceI_opSSeq, iceP_s1, context);
}

::std::function<void()>
Test::Inner::IPrx::opSSeqAsync(const ::Test::Inner::Inner2::SSeq& iceP_s1,
                               ::std::function<void (::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::IPrx::_iceI_opSSeq, iceP_s1, context);
}

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>>>& outAsync, const ::Test::Inner::Inner2::SSeq& iceP_s1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Inner_I_opSSeq_name);
    outAsync->invoke(iceC_Test_Inner_I_opSSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::Inner::Inner2::SMap
Test::Inner::IPrx::opSMap(const ::Test::Inner::Inner2::SMap& iceP_s1, ::Test::Inner::Inner2::SMap& iceP_s2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>>(true, this, &IPrx::_iceI_opSMap, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>>
Test::Inner::IPrx::opSMapAsync(const ::Test::Inner::Inner2::SMap& iceP_s1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>, ::std::promise>(false, this, &IPrx::_iceI_opSMap, iceP_s1, context);
}

::std::function<void()>
Test::Inner::IPrx::opSMapAsync(const ::Test::Inner::Inner2::SMap& iceP_s1,
                               ::std::function<void (::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::IPrx::_iceI_opSMap, iceP_s1, context);
}

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>>>& outAsync, const ::Test::Inner::Inner2::SMap& iceP_s1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Inner_I_opSMap_name);
    outAsync->invoke(iceC_Test_Inner_I_opSMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::std::shared_ptr<::Test::Inner::Inner2::C>
Test::Inner::IPrx::opC(const ::std::shared_ptr<::Test::Inner::Inner2::C>& iceP_c1, ::std::shared_ptr<::Test::Inner::Inner2::C>& iceP_c2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>>>(true, this, &IPrx::_iceI_opC, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>>>
Test::Inner::IPrx::opCAsync(const ::std::shared_ptr<::Test::Inner::Inner2::C>& iceP_c1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>>, ::std::promise>(false, this, &IPrx::_iceI_opC, iceP_c1, context);
}

::std::function<void()>
Test::Inner::IPrx::opCAsync(const ::std::shared_ptr<::Test::Inner::Inner2::C>& iceP_c1,
                            ::std::function<void (::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>)> response,
                            ::std::function<void(::std::exception_ptr)> ex,
                            ::std::function<void(bool)> sent,
                            const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::IPrx::_iceI_opC, iceP_c1, context);
}

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>>>>& outAsync, const ::std::shared_ptr<::Test::Inner::Inner2::C>& iceP_c1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Inner_I_opC_name);
    outAsync->invoke(iceC_Test_Inner_I_opC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

::Test::Inner::Inner2::CSeq
Test::Inner::IPrx::opCSeq(const ::Test::Inner::Inner2::CSeq& iceP_c1, ::Test::Inner::Inner2::CSeq& iceP_c2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>>(true, this, &IPrx::_iceI_opCSeq, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>>
Test::Inner::IPrx::opCSeqAsync(const ::Test::Inner::Inner2::CSeq& iceP_c1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>, ::std::promise>(false, this, &IPrx::_iceI_opCSeq, iceP_c1, context);
}

::std::function<void()>
Test::Inner::IPrx::opCSeqAsync(const ::Test::Inner::Inner2::CSeq& iceP_c1,
                               ::std::function<void (::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::IPrx::_iceI_opCSeq, iceP_c1, context);
}

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>>>& outAsync, const ::Test::Inner::Inner2::CSeq& iceP_c1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Inner_I_opCSeq_name);
    outAsync->invoke(iceC_Test_Inner_I_opCSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

::Test::Inner::Inner2::CMap
Test::Inner::IPrx::opCMap(const ::Test::Inner::Inner2::CMap& iceP_c1, ::Test::Inner::Inner2::CMap& iceP_c2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>>(true, this, &IPrx::_iceI_opCMap, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>>
Test::Inner::IPrx::opCMapAsync(const ::Test::Inner::Inner2::CMap& iceP_c1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>, ::std::promise>(false, this, &IPrx::_iceI_opCMap, iceP_c1, context);
}

::std::function<void()>
Test::Inner::IPrx::opCMapAsync(const ::Test::Inner::Inner2::CMap& iceP_c1,
                               ::std::function<void (::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::IPrx::_iceI_opCMap, iceP_c1, context);
}

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>>>& outAsync, const ::Test::Inner::Inner2::CMap& iceP_c1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Inner_I_opCMap_name);
    outAsync->invoke(iceC_Test_Inner_I_opCMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

void
Test::Inner::IPrx::shutdown(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &IPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::Inner::IPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &IPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::Inner::IPrx::shutdownAsync(::std::function<void ()> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Inner::IPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Inner_I_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::Inner::IPrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::I";
    return typeId;
}

::Test::S
Inner::Test::Inner2::IPrx::opS(const ::Test::S& iceP_s1, ::Test::S& iceP_s2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<::Test::S, ::Test::S>>(true, this, &IPrx::_iceI_opS, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::S, ::Test::S>>
Inner::Test::Inner2::IPrx::opSAsync(const ::Test::S& iceP_s1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<::Test::S, ::Test::S>, ::std::promise>(false, this, &IPrx::_iceI_opS, iceP_s1, context);
}

::std::function<void()>
Inner::Test::Inner2::IPrx::opSAsync(const ::Test::S& iceP_s1,
                                    ::std::function<void (::Test::S, ::Test::S)> response,
                                    ::std::function<void(::std::exception_ptr)> ex,
                                    ::std::function<void(bool)> sent,
                                    const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<::Test::S, ::Test::S>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::Test::S, ::Test::S>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opS, iceP_s1, context);
}

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::S, ::Test::S>>>& outAsync, const ::Test::S& iceP_s1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opS_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::S, ::Test::S> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::SSeq
Inner::Test::Inner2::IPrx::opSSeq(const ::Test::SSeq& iceP_s1, ::Test::SSeq& iceP_s2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<::Test::SSeq, ::Test::SSeq>>(true, this, &IPrx::_iceI_opSSeq, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::SSeq, ::Test::SSeq>>
Inner::Test::Inner2::IPrx::opSSeqAsync(const ::Test::SSeq& iceP_s1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<::Test::SSeq, ::Test::SSeq>, ::std::promise>(false, this, &IPrx::_iceI_opSSeq, iceP_s1, context);
}

::std::function<void()>
Inner::Test::Inner2::IPrx::opSSeqAsync(const ::Test::SSeq& iceP_s1,
                                       ::std::function<void (::Test::SSeq, ::Test::SSeq)> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<::Test::SSeq, ::Test::SSeq>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::Test::SSeq, ::Test::SSeq>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opSSeq, iceP_s1, context);
}

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::SSeq, ::Test::SSeq>>>& outAsync, const ::Test::SSeq& iceP_s1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opSSeq_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opSSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::SSeq, ::Test::SSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::SMap
Inner::Test::Inner2::IPrx::opSMap(const ::Test::SMap& iceP_s1, ::Test::SMap& iceP_s2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<::Test::SMap, ::Test::SMap>>(true, this, &IPrx::_iceI_opSMap, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::SMap, ::Test::SMap>>
Inner::Test::Inner2::IPrx::opSMapAsync(const ::Test::SMap& iceP_s1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<::Test::SMap, ::Test::SMap>, ::std::promise>(false, this, &IPrx::_iceI_opSMap, iceP_s1, context);
}

::std::function<void()>
Inner::Test::Inner2::IPrx::opSMapAsync(const ::Test::SMap& iceP_s1,
                                       ::std::function<void (::Test::SMap, ::Test::SMap)> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<::Test::SMap, ::Test::SMap>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::Test::SMap, ::Test::SMap>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opSMap, iceP_s1, context);
}

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::SMap, ::Test::SMap>>>& outAsync, const ::Test::SMap& iceP_s1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opSMap_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opSMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::SMap, ::Test::SMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::std::shared_ptr<::Test::C>
Inner::Test::Inner2::IPrx::opC(const ::std::shared_ptr<::Test::C>& iceP_c1, ::std::shared_ptr<::Test::C>& iceP_c2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>>>(true, this, &IPrx::_iceI_opC, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>>>
Inner::Test::Inner2::IPrx::opCAsync(const ::std::shared_ptr<::Test::C>& iceP_c1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>>, ::std::promise>(false, this, &IPrx::_iceI_opC, iceP_c1, context);
}

::std::function<void()>
Inner::Test::Inner2::IPrx::opCAsync(const ::std::shared_ptr<::Test::C>& iceP_c1,
                                    ::std::function<void (::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>)> response,
                                    ::std::function<void(::std::exception_ptr)> ex,
                                    ::std::function<void(bool)> sent,
                                    const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opC, iceP_c1, context);
}

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>>>>& outAsync, const ::std::shared_ptr<::Test::C>& iceP_c1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opC_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

::Test::CSeq
Inner::Test::Inner2::IPrx::opCSeq(const ::Test::CSeq& iceP_c1, ::Test::CSeq& iceP_c2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<::Test::CSeq, ::Test::CSeq>>(true, this, &IPrx::_iceI_opCSeq, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::CSeq, ::Test::CSeq>>
Inner::Test::Inner2::IPrx::opCSeqAsync(const ::Test::CSeq& iceP_c1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<::Test::CSeq, ::Test::CSeq>, ::std::promise>(false, this, &IPrx::_iceI_opCSeq, iceP_c1, context);
}

::std::function<void()>
Inner::Test::Inner2::IPrx::opCSeqAsync(const ::Test::CSeq& iceP_c1,
                                       ::std::function<void (::Test::CSeq, ::Test::CSeq)> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<::Test::CSeq, ::Test::CSeq>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::Test::CSeq, ::Test::CSeq>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opCSeq, iceP_c1, context);
}

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::CSeq, ::Test::CSeq>>>& outAsync, const ::Test::CSeq& iceP_c1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opCSeq_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opCSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::CSeq, ::Test::CSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

::Test::CMap
Inner::Test::Inner2::IPrx::opCMap(const ::Test::CMap& iceP_c1, ::Test::CMap& iceP_c2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<::Test::CMap, ::Test::CMap>>(true, this, &IPrx::_iceI_opCMap, iceP_c1, context).get();
    iceP_c2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::CMap, ::Test::CMap>>
Inner::Test::Inner2::IPrx::opCMapAsync(const ::Test::CMap& iceP_c1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<::Test::CMap, ::Test::CMap>, ::std::promise>(false, this, &IPrx::_iceI_opCMap, iceP_c1, context);
}

::std::function<void()>
Inner::Test::Inner2::IPrx::opCMapAsync(const ::Test::CMap& iceP_c1,
                                       ::std::function<void (::Test::CMap, ::Test::CMap)> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<::Test::CMap, ::Test::CMap>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<::Test::CMap, ::Test::CMap>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opCMap, iceP_c1, context);
}

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::CMap, ::Test::CMap>>>& outAsync, const ::Test::CMap& iceP_c1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opCMap_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opCMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::Test::CMap, ::Test::CMap> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

void
Inner::Test::Inner2::IPrx::shutdown(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &IPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Inner::Test::Inner2::IPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &IPrx::_iceI_shutdown, context);
}

::std::function<void()>
Inner::Test::Inner2::IPrx::shutdownAsync(::std::function<void ()> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Inner_Test_Inner2_I_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Inner::Test::Inner2::IPrx::ice_staticId()
{
    static const ::std::string typeId = "::Inner::Test::Inner2::I";
    return typeId;
}

Test::C::~C()
{
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

Test::C1::~C1()
{
}

const ::std::string&
Test::C1::ice_staticId()
{
    static const ::std::string typeId = "::Test::C1";
    return typeId;
}

Test::C2::~C2()
{
}

const ::std::string&
Test::C2::ice_staticId()
{
    static const ::std::string typeId = "::Test::C2";
    return typeId;
}

Test::Inner::Inner2::C::~C()
{
}

const ::std::string&
Test::Inner::Inner2::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Inner2::C";
    return typeId;
}

Test::Inner::C::~C()
{
}

const ::std::string&
Test::Inner::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::C";
    return typeId;
}

bool
Test::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_I_ids, iceC_Test_I_ids + 2, s);
}

::std::vector<::std::string>
Test::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_I_ids[0], &iceC_Test_I_ids[2]);
}

::std::string
Test::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    S iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    S iceP_s2;
    S ret = this->opS(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SSeq iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    SSeq iceP_s2;
    SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SMap iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    SMap iceP_s2;
    SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<C> iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<C> iceP_c2;
    ::std::shared_ptr<C> ret = this->opC(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CSeq iceP_s1;
    istr->readAll(iceP_s1);
    istr->readPendingValues();
    inS.endReadParams();
    CSeq iceP_s2;
    CSeq ret = this->opCSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    CMap iceP_c2;
    CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opE1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    E1 iceP_E1;
    istr->readAll(iceP_E1);
    inS.endReadParams();
    E1 ret = this->opE1(iceP_E1, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opS1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    S1 iceP_S1;
    istr->readAll(iceP_S1);
    inS.endReadParams();
    S1 ret = this->opS1(::std::move(iceP_S1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opC1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<C1> iceP_C1;
    istr->readAll(iceP_C1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<C1> ret = this->opC1(::std::move(iceP_C1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_I_ops, iceC_Test_I_ops + 14, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_I_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opC1(in, current);
        }
        case 6:
        {
            return _iceD_opCMap(in, current);
        }
        case 7:
        {
            return _iceD_opCSeq(in, current);
        }
        case 8:
        {
            return _iceD_opE1(in, current);
        }
        case 9:
        {
            return _iceD_opS(in, current);
        }
        case 10:
        {
            return _iceD_opS1(in, current);
        }
        case 11:
        {
            return _iceD_opSMap(in, current);
        }
        case 12:
        {
            return _iceD_opSSeq(in, current);
        }
        case 13:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Inner::Inner2::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Inner_Inner2_I_ids, iceC_Test_Inner_Inner2_I_ids + 2, s);
}

::std::vector<::std::string>
Test::Inner::Inner2::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Inner_Inner2_I_ids[0], &iceC_Test_Inner_Inner2_I_ids[2]);
}

::std::string
Test::Inner::Inner2::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Inner::Inner2::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Inner2::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    S iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    S iceP_s2;
    S ret = this->opS(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SSeq iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    SSeq iceP_s2;
    SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SMap iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    SMap iceP_s2;
    SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<C> iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<C> iceP_c2;
    ::std::shared_ptr<C> ret = this->opC(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CSeq iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    CSeq iceP_c2;
    CSeq ret = this->opCSeq(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    CMap iceP_c2;
    CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Inner_Inner2_I_ops, iceC_Test_Inner_Inner2_I_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Inner_Inner2_I_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opCMap(in, current);
        }
        case 6:
        {
            return _iceD_opCSeq(in, current);
        }
        case 7:
        {
            return _iceD_opS(in, current);
        }
        case 8:
        {
            return _iceD_opSMap(in, current);
        }
        case 9:
        {
            return _iceD_opSSeq(in, current);
        }
        case 10:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Inner::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Inner_I_ids, iceC_Test_Inner_I_ids + 2, s);
}

::std::vector<::std::string>
Test::Inner::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Inner_I_ids[0], &iceC_Test_Inner_I_ids[2]);
}

::std::string
Test::Inner::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Inner::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::Inner::Inner2::S iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::Inner::Inner2::S iceP_s2;
    ::Test::Inner::Inner2::S ret = this->opS(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::Inner::Inner2::SSeq iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::Inner::Inner2::SSeq iceP_s2;
    ::Test::Inner::Inner2::SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::Inner::Inner2::SMap iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::Inner::Inner2::SMap iceP_s2;
    ::Test::Inner::Inner2::SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Test::Inner::Inner2::C> iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<::Test::Inner::Inner2::C> iceP_c2;
    ::std::shared_ptr<::Test::Inner::Inner2::C> ret = this->opC(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::Inner::Inner2::CSeq iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::Inner::Inner2::CSeq iceP_c2;
    ::Test::Inner::Inner2::CSeq ret = this->opCSeq(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::Inner::Inner2::CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::Inner::Inner2::CMap iceP_c2;
    ::Test::Inner::Inner2::CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Inner_I_ops, iceC_Test_Inner_I_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Inner_I_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opCMap(in, current);
        }
        case 6:
        {
            return _iceD_opCSeq(in, current);
        }
        case 7:
        {
            return _iceD_opS(in, current);
        }
        case 8:
        {
            return _iceD_opSMap(in, current);
        }
        case 9:
        {
            return _iceD_opSSeq(in, current);
        }
        case 10:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Inner::Test::Inner2::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Inner_Test_Inner2_I_ids, iceC_Inner_Test_Inner2_I_ids + 2, s);
}

::std::vector<::std::string>
Inner::Test::Inner2::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Inner_Test_Inner2_I_ids[0], &iceC_Inner_Test_Inner2_I_ids[2]);
}

::std::string
Inner::Test::Inner2::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Inner::Test::Inner2::I::ice_staticId()
{
    static const ::std::string typeId = "::Inner::Test::Inner2::I";
    return typeId;
}

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::S iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::S iceP_s2;
    ::Test::S ret = this->opS(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::SSeq iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::SSeq iceP_s2;
    ::Test::SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::SMap iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::SMap iceP_s2;
    ::Test::SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Test::C> iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<::Test::C> iceP_c2;
    ::std::shared_ptr<::Test::C> ret = this->opC(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::CSeq iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::CSeq iceP_c2;
    ::Test::CSeq ret = this->opCSeq(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::CMap iceP_c2;
    ::Test::CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Inner_Test_Inner2_I_ops, iceC_Inner_Test_Inner2_I_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Inner_Test_Inner2_I_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opCMap(in, current);
        }
        case 6:
        {
            return _iceD_opCSeq(in, current);
        }
        case 7:
        {
            return _iceD_opS(in, current);
        }
        case 8:
        {
            return _iceD_opSMap(in, current);
        }
        case 9:
        {
            return _iceD_opSSeq(in, current);
        }
        case 10:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

namespace Ice
{
}
