//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::Test::MyClass1> iceC_Test_MyClass1_init("::Test::MyClass1");
}

void
Test::MyClassPrx::shutdown(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &MyClassPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::MyClassPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &MyClassPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::MyClassPrx::shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_shutdown, context);
}

void
Test::MyClassPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

bool
Test::MyClassPrx::supportsCompress(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(true, this, &MyClassPrx::_iceI_supportsCompress, context).get();
}

::std::future<bool>
Test::MyClassPrx::supportsCompressAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<bool>(false, this, &MyClassPrx::_iceI_supportsCompress, context);
}

::std::function<void()>
Test::MyClassPrx::supportsCompressAsync(::std::function<void(bool)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<bool>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_supportsCompress, context);
}

void
Test::MyClassPrx::_iceI_supportsCompress(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "supportsCompress";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
Test::MyClassPrx::opVoid(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &MyClassPrx::_iceI_opVoid, context).get();
}

::std::future<void>
Test::MyClassPrx::opVoidAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &MyClassPrx::_iceI_opVoid, context);
}

::std::function<void()>
Test::MyClassPrx::opVoidAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opVoid, context);
}

void
Test::MyClassPrx::_iceI_opVoid(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opVoid";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::uint8_t
Test::MyClassPrx::opByte(::std::uint8_t iceP_p1, ::std::uint8_t iceP_p2, ::std::uint8_t& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::std::uint8_t, ::std::uint8_t>>(true, this, &MyClassPrx::_iceI_opByte, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::get<1>(result);
    return ::std::get<0>(result);
}

::std::future<::std::tuple<::std::uint8_t, ::std::uint8_t>>
Test::MyClassPrx::opByteAsync(::std::uint8_t iceP_p1, ::std::uint8_t iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::std::uint8_t, ::std::uint8_t>>(false, this, &MyClassPrx::_iceI_opByte, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opByteAsync(::std::uint8_t iceP_p1, ::std::uint8_t iceP_p2, ::std::function<void(::std::uint8_t, ::std::uint8_t)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::std::uint8_t, ::std::uint8_t>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::std::uint8_t, ::std::uint8_t>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opByte, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opByte(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::uint8_t, ::std::uint8_t>>>& outAsync, ::std::uint8_t iceP_p1, ::std::uint8_t iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opByte";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::uint8_t, ::std::uint8_t> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

bool
Test::MyClassPrx::opBool(bool iceP_p1, bool iceP_p2, bool& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<bool, bool>>(true, this, &MyClassPrx::_iceI_opBool, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::get<1>(result);
    return ::std::get<0>(result);
}

::std::future<::std::tuple<bool, bool>>
Test::MyClassPrx::opBoolAsync(bool iceP_p1, bool iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<bool, bool>>(false, this, &MyClassPrx::_iceI_opBool, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opBoolAsync(bool iceP_p1, bool iceP_p2, ::std::function<void(bool, bool)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<bool, bool>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<bool, bool>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opBool, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opBool(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<bool, bool>>>& outAsync, bool iceP_p1, bool iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opBool";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<bool, bool> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::std::int64_t
Test::MyClassPrx::opShortIntLong(::std::int16_t iceP_p1, ::std::int32_t iceP_p2, ::std::int64_t iceP_p3, ::std::int16_t& iceP_p4, ::std::int32_t& iceP_p5, ::std::int64_t& iceP_p6, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::std::int64_t, ::std::int16_t, ::std::int32_t, ::std::int64_t>>(true, this, &MyClassPrx::_iceI_opShortIntLong, iceP_p1, iceP_p2, iceP_p3, context).get();
    iceP_p4 = ::std::get<1>(result);
    iceP_p5 = ::std::get<2>(result);
    iceP_p6 = ::std::get<3>(result);
    return ::std::get<0>(result);
}

::std::future<::std::tuple<::std::int64_t, ::std::int16_t, ::std::int32_t, ::std::int64_t>>
Test::MyClassPrx::opShortIntLongAsync(::std::int16_t iceP_p1, ::std::int32_t iceP_p2, ::std::int64_t iceP_p3, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::std::int64_t, ::std::int16_t, ::std::int32_t, ::std::int64_t>>(false, this, &MyClassPrx::_iceI_opShortIntLong, iceP_p1, iceP_p2, iceP_p3, context);
}

::std::function<void()>
Test::MyClassPrx::opShortIntLongAsync(::std::int16_t iceP_p1, ::std::int32_t iceP_p2, ::std::int64_t iceP_p3, ::std::function<void(::std::int64_t, ::std::int16_t, ::std::int32_t, ::std::int64_t)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::std::int64_t, ::std::int16_t, ::std::int32_t, ::std::int64_t>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::std::int64_t, ::std::int16_t, ::std::int32_t, ::std::int64_t>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opShortIntLong, iceP_p1, iceP_p2, iceP_p3, context);
}

void
Test::MyClassPrx::_iceI_opShortIntLong(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::int64_t, ::std::int16_t, ::std::int32_t, ::std::int64_t>>>& outAsync, ::std::int16_t iceP_p1, ::std::int32_t iceP_p2, ::std::int64_t iceP_p3, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opShortIntLong";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2, iceP_p3);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::int64_t, ::std::int16_t, ::std::int32_t, ::std::int64_t> v;
            istr->readAll(::std::get<1>(v), ::std::get<2>(v), ::std::get<3>(v), ::std::get<0>(v));
            return v;
        });
}

double
Test::MyClassPrx::opFloatDouble(float iceP_p1, double iceP_p2, float& iceP_p3, double& iceP_p4, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<double, float, double>>(true, this, &MyClassPrx::_iceI_opFloatDouble, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::get<1>(result);
    iceP_p4 = ::std::get<2>(result);
    return ::std::get<0>(result);
}

::std::future<::std::tuple<double, float, double>>
Test::MyClassPrx::opFloatDoubleAsync(float iceP_p1, double iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<double, float, double>>(false, this, &MyClassPrx::_iceI_opFloatDouble, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opFloatDoubleAsync(float iceP_p1, double iceP_p2, ::std::function<void(double, float, double)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<double, float, double>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<double, float, double>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opFloatDouble, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opFloatDouble(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<double, float, double>>>& outAsync, float iceP_p1, double iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opFloatDouble";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<double, float, double> v;
            istr->readAll(::std::get<1>(v), ::std::get<2>(v), ::std::get<0>(v));
            return v;
        });
}

::std::string
Test::MyClassPrx::opString(::std::string_view iceP_p1, ::std::string_view iceP_p2, ::std::string& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::std::string, ::std::string>>(true, this, &MyClassPrx::_iceI_opString, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::std::string, ::std::string>>
Test::MyClassPrx::opStringAsync(::std::string_view iceP_p1, ::std::string_view iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::std::string, ::std::string>>(false, this, &MyClassPrx::_iceI_opString, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opStringAsync(::std::string_view iceP_p1, ::std::string_view iceP_p2, ::std::function<void(::std::string, ::std::string)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::std::string, ::std::string>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::std::string, ::std::string>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opString, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::string, ::std::string>>>& outAsync, ::std::string_view iceP_p1, ::std::string_view iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opString";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::string, ::std::string> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::MyEnum
Test::MyClassPrx::opMyEnum(MyEnum iceP_p1, MyEnum& iceP_p2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<MyEnum, MyEnum>>(true, this, &MyClassPrx::_iceI_opMyEnum, iceP_p1, context).get();
    iceP_p2 = ::std::get<1>(result);
    return ::std::get<0>(result);
}

::std::future<::std::tuple<::Test::MyEnum, ::Test::MyEnum>>
Test::MyClassPrx::opMyEnumAsync(MyEnum iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<MyEnum, MyEnum>>(false, this, &MyClassPrx::_iceI_opMyEnum, iceP_p1, context);
}

::std::function<void()>
Test::MyClassPrx::opMyEnumAsync(MyEnum iceP_p1, ::std::function<void(::Test::MyEnum, ::Test::MyEnum)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<MyEnum, MyEnum>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<MyEnum, MyEnum>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opMyEnum, iceP_p1, context);
}

void
Test::MyClassPrx::_iceI_opMyEnum(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<MyEnum, MyEnum>>>& outAsync, MyEnum iceP_p1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opMyEnum";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<MyEnum, MyEnum> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::std::optional<::Test::MyClassPrx>
Test::MyClassPrx::opMyClass(const ::std::optional<MyClassPrx>& iceP_p1, ::std::optional<MyClassPrx>& iceP_p2, ::std::optional<MyClassPrx>& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<::std::optional<MyClassPrx>, ::std::optional<MyClassPrx>, ::std::optional<MyClassPrx>>>(true, this, &MyClassPrx::_iceI_opMyClass, iceP_p1, context).get();
    iceP_p2 = ::std::move(::std::get<1>(result));
    iceP_p3 = ::std::move(::std::get<2>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::std::optional<::Test::MyClassPrx>, ::std::optional<::Test::MyClassPrx>, ::std::optional<::Test::MyClassPrx>>>
Test::MyClassPrx::opMyClassAsync(const ::std::optional<MyClassPrx>& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<::std::optional<MyClassPrx>, ::std::optional<MyClassPrx>, ::std::optional<MyClassPrx>>>(false, this, &MyClassPrx::_iceI_opMyClass, iceP_p1, context);
}

::std::function<void()>
Test::MyClassPrx::opMyClassAsync(const ::std::optional<MyClassPrx>& iceP_p1, ::std::function<void(::std::optional<::Test::MyClassPrx>, ::std::optional<::Test::MyClassPrx>, ::std::optional<::Test::MyClassPrx>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<::std::optional<MyClassPrx>, ::std::optional<MyClassPrx>, ::std::optional<MyClassPrx>>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<::std::optional<MyClassPrx>, ::std::optional<MyClassPrx>, ::std::optional<MyClassPrx>>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opMyClass, iceP_p1, context);
}

void
Test::MyClassPrx::_iceI_opMyClass(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::optional<MyClassPrx>, ::std::optional<MyClassPrx>, ::std::optional<MyClassPrx>>>>& outAsync, const ::std::optional<MyClassPrx>& iceP_p1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opMyClass";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<::std::optional<MyClassPrx>, ::std::optional<MyClassPrx>, ::std::optional<MyClassPrx>> v;
            istr->readAll(::std::get<1>(v), ::std::get<2>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::Structure
Test::MyClassPrx::opStruct(const Structure& iceP_p1, const Structure& iceP_p2, Structure& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<Structure, Structure>>(true, this, &MyClassPrx::_iceI_opStruct, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::Structure, ::Test::Structure>>
Test::MyClassPrx::opStructAsync(const Structure& iceP_p1, const Structure& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<Structure, Structure>>(false, this, &MyClassPrx::_iceI_opStruct, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opStructAsync(const Structure& iceP_p1, const Structure& iceP_p2, ::std::function<void(::Test::Structure, ::Test::Structure)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<Structure, Structure>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<Structure, Structure>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opStruct, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<Structure, Structure>>>& outAsync, const Structure& iceP_p1, const Structure& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStruct";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<Structure, Structure> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::ByteS
Test::MyClassPrx::opByteS(const ByteS& iceP_p1, const ByteS& iceP_p2, ByteS& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<ByteS, ByteS>>(true, this, &MyClassPrx::_iceI_opByteS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::ByteS, ::Test::ByteS>>
Test::MyClassPrx::opByteSAsync(const ByteS& iceP_p1, const ByteS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<ByteS, ByteS>>(false, this, &MyClassPrx::_iceI_opByteS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opByteSAsync(const ByteS& iceP_p1, const ByteS& iceP_p2, ::std::function<void(::Test::ByteS, ::Test::ByteS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<ByteS, ByteS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<ByteS, ByteS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opByteS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opByteS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ByteS, ByteS>>>& outAsync, const ByteS& iceP_p1, const ByteS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opByteS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ByteS, ByteS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::BoolS
Test::MyClassPrx::opBoolS(const BoolS& iceP_p1, const BoolS& iceP_p2, BoolS& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<BoolS, BoolS>>(true, this, &MyClassPrx::_iceI_opBoolS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::BoolS, ::Test::BoolS>>
Test::MyClassPrx::opBoolSAsync(const BoolS& iceP_p1, const BoolS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<BoolS, BoolS>>(false, this, &MyClassPrx::_iceI_opBoolS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opBoolSAsync(const BoolS& iceP_p1, const BoolS& iceP_p2, ::std::function<void(::Test::BoolS, ::Test::BoolS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<BoolS, BoolS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<BoolS, BoolS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opBoolS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opBoolS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<BoolS, BoolS>>>& outAsync, const BoolS& iceP_p1, const BoolS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opBoolS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<BoolS, BoolS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::LongS
Test::MyClassPrx::opShortIntLongS(const ShortS& iceP_p1, const IntS& iceP_p2, const LongS& iceP_p3, ShortS& iceP_p4, IntS& iceP_p5, LongS& iceP_p6, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<LongS, ShortS, IntS, LongS>>(true, this, &MyClassPrx::_iceI_opShortIntLongS, iceP_p1, iceP_p2, iceP_p3, context).get();
    iceP_p4 = ::std::move(::std::get<1>(result));
    iceP_p5 = ::std::move(::std::get<2>(result));
    iceP_p6 = ::std::move(::std::get<3>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::LongS, ::Test::ShortS, ::Test::IntS, ::Test::LongS>>
Test::MyClassPrx::opShortIntLongSAsync(const ShortS& iceP_p1, const IntS& iceP_p2, const LongS& iceP_p3, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<LongS, ShortS, IntS, LongS>>(false, this, &MyClassPrx::_iceI_opShortIntLongS, iceP_p1, iceP_p2, iceP_p3, context);
}

::std::function<void()>
Test::MyClassPrx::opShortIntLongSAsync(const ShortS& iceP_p1, const IntS& iceP_p2, const LongS& iceP_p3, ::std::function<void(::Test::LongS, ::Test::ShortS, ::Test::IntS, ::Test::LongS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<LongS, ShortS, IntS, LongS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<LongS, ShortS, IntS, LongS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opShortIntLongS, iceP_p1, iceP_p2, iceP_p3, context);
}

void
Test::MyClassPrx::_iceI_opShortIntLongS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<LongS, ShortS, IntS, LongS>>>& outAsync, const ShortS& iceP_p1, const IntS& iceP_p2, const LongS& iceP_p3, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opShortIntLongS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2, iceP_p3);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<LongS, ShortS, IntS, LongS> v;
            istr->readAll(::std::get<1>(v), ::std::get<2>(v), ::std::get<3>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::DoubleS
Test::MyClassPrx::opFloatDoubleS(const FloatS& iceP_p1, const DoubleS& iceP_p2, FloatS& iceP_p3, DoubleS& iceP_p4, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<DoubleS, FloatS, DoubleS>>(true, this, &MyClassPrx::_iceI_opFloatDoubleS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    iceP_p4 = ::std::move(::std::get<2>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::DoubleS, ::Test::FloatS, ::Test::DoubleS>>
Test::MyClassPrx::opFloatDoubleSAsync(const FloatS& iceP_p1, const DoubleS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<DoubleS, FloatS, DoubleS>>(false, this, &MyClassPrx::_iceI_opFloatDoubleS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opFloatDoubleSAsync(const FloatS& iceP_p1, const DoubleS& iceP_p2, ::std::function<void(::Test::DoubleS, ::Test::FloatS, ::Test::DoubleS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<DoubleS, FloatS, DoubleS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<DoubleS, FloatS, DoubleS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opFloatDoubleS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opFloatDoubleS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<DoubleS, FloatS, DoubleS>>>& outAsync, const FloatS& iceP_p1, const DoubleS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opFloatDoubleS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<DoubleS, FloatS, DoubleS> v;
            istr->readAll(::std::get<1>(v), ::std::get<2>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::StringS
Test::MyClassPrx::opStringS(const StringS& iceP_p1, const StringS& iceP_p2, StringS& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<StringS, StringS>>(true, this, &MyClassPrx::_iceI_opStringS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::StringS, ::Test::StringS>>
Test::MyClassPrx::opStringSAsync(const StringS& iceP_p1, const StringS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<StringS, StringS>>(false, this, &MyClassPrx::_iceI_opStringS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opStringSAsync(const StringS& iceP_p1, const StringS& iceP_p2, ::std::function<void(::Test::StringS, ::Test::StringS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<StringS, StringS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<StringS, StringS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opStringS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opStringS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<StringS, StringS>>>& outAsync, const StringS& iceP_p1, const StringS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStringS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<StringS, StringS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::ByteSS
Test::MyClassPrx::opByteSS(const ByteSS& iceP_p1, const ByteSS& iceP_p2, ByteSS& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<ByteSS, ByteSS>>(true, this, &MyClassPrx::_iceI_opByteSS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::ByteSS, ::Test::ByteSS>>
Test::MyClassPrx::opByteSSAsync(const ByteSS& iceP_p1, const ByteSS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<ByteSS, ByteSS>>(false, this, &MyClassPrx::_iceI_opByteSS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opByteSSAsync(const ByteSS& iceP_p1, const ByteSS& iceP_p2, ::std::function<void(::Test::ByteSS, ::Test::ByteSS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<ByteSS, ByteSS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<ByteSS, ByteSS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opByteSS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opByteSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ByteSS, ByteSS>>>& outAsync, const ByteSS& iceP_p1, const ByteSS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opByteSS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ByteSS, ByteSS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::BoolSS
Test::MyClassPrx::opBoolSS(const BoolSS& iceP_p1, const BoolSS& iceP_p2, BoolSS& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<BoolSS, BoolSS>>(true, this, &MyClassPrx::_iceI_opBoolSS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::BoolSS, ::Test::BoolSS>>
Test::MyClassPrx::opBoolSSAsync(const BoolSS& iceP_p1, const BoolSS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<BoolSS, BoolSS>>(false, this, &MyClassPrx::_iceI_opBoolSS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opBoolSSAsync(const BoolSS& iceP_p1, const BoolSS& iceP_p2, ::std::function<void(::Test::BoolSS, ::Test::BoolSS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<BoolSS, BoolSS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<BoolSS, BoolSS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opBoolSS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opBoolSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<BoolSS, BoolSS>>>& outAsync, const BoolSS& iceP_p1, const BoolSS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opBoolSS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<BoolSS, BoolSS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::LongSS
Test::MyClassPrx::opShortIntLongSS(const ShortSS& iceP_p1, const IntSS& iceP_p2, const LongSS& iceP_p3, ShortSS& iceP_p4, IntSS& iceP_p5, LongSS& iceP_p6, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<LongSS, ShortSS, IntSS, LongSS>>(true, this, &MyClassPrx::_iceI_opShortIntLongSS, iceP_p1, iceP_p2, iceP_p3, context).get();
    iceP_p4 = ::std::move(::std::get<1>(result));
    iceP_p5 = ::std::move(::std::get<2>(result));
    iceP_p6 = ::std::move(::std::get<3>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::LongSS, ::Test::ShortSS, ::Test::IntSS, ::Test::LongSS>>
Test::MyClassPrx::opShortIntLongSSAsync(const ShortSS& iceP_p1, const IntSS& iceP_p2, const LongSS& iceP_p3, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<LongSS, ShortSS, IntSS, LongSS>>(false, this, &MyClassPrx::_iceI_opShortIntLongSS, iceP_p1, iceP_p2, iceP_p3, context);
}

::std::function<void()>
Test::MyClassPrx::opShortIntLongSSAsync(const ShortSS& iceP_p1, const IntSS& iceP_p2, const LongSS& iceP_p3, ::std::function<void(::Test::LongSS, ::Test::ShortSS, ::Test::IntSS, ::Test::LongSS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<LongSS, ShortSS, IntSS, LongSS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<LongSS, ShortSS, IntSS, LongSS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opShortIntLongSS, iceP_p1, iceP_p2, iceP_p3, context);
}

void
Test::MyClassPrx::_iceI_opShortIntLongSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<LongSS, ShortSS, IntSS, LongSS>>>& outAsync, const ShortSS& iceP_p1, const IntSS& iceP_p2, const LongSS& iceP_p3, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opShortIntLongSS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2, iceP_p3);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<LongSS, ShortSS, IntSS, LongSS> v;
            istr->readAll(::std::get<1>(v), ::std::get<2>(v), ::std::get<3>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::DoubleSS
Test::MyClassPrx::opFloatDoubleSS(const FloatSS& iceP_p1, const DoubleSS& iceP_p2, FloatSS& iceP_p3, DoubleSS& iceP_p4, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<DoubleSS, FloatSS, DoubleSS>>(true, this, &MyClassPrx::_iceI_opFloatDoubleSS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    iceP_p4 = ::std::move(::std::get<2>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::DoubleSS, ::Test::FloatSS, ::Test::DoubleSS>>
Test::MyClassPrx::opFloatDoubleSSAsync(const FloatSS& iceP_p1, const DoubleSS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<DoubleSS, FloatSS, DoubleSS>>(false, this, &MyClassPrx::_iceI_opFloatDoubleSS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opFloatDoubleSSAsync(const FloatSS& iceP_p1, const DoubleSS& iceP_p2, ::std::function<void(::Test::DoubleSS, ::Test::FloatSS, ::Test::DoubleSS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<DoubleSS, FloatSS, DoubleSS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<DoubleSS, FloatSS, DoubleSS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opFloatDoubleSS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opFloatDoubleSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<DoubleSS, FloatSS, DoubleSS>>>& outAsync, const FloatSS& iceP_p1, const DoubleSS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opFloatDoubleSS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<DoubleSS, FloatSS, DoubleSS> v;
            istr->readAll(::std::get<1>(v), ::std::get<2>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::StringSS
Test::MyClassPrx::opStringSS(const StringSS& iceP_p1, const StringSS& iceP_p2, StringSS& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<StringSS, StringSS>>(true, this, &MyClassPrx::_iceI_opStringSS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::StringSS, ::Test::StringSS>>
Test::MyClassPrx::opStringSSAsync(const StringSS& iceP_p1, const StringSS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<StringSS, StringSS>>(false, this, &MyClassPrx::_iceI_opStringSS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opStringSSAsync(const StringSS& iceP_p1, const StringSS& iceP_p2, ::std::function<void(::Test::StringSS, ::Test::StringSS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<StringSS, StringSS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<StringSS, StringSS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opStringSS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opStringSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<StringSS, StringSS>>>& outAsync, const StringSS& iceP_p1, const StringSS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStringSS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<StringSS, StringSS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::StringSSS
Test::MyClassPrx::opStringSSS(const StringSSS& iceP_p1, const StringSSS& iceP_p2, StringSSS& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<StringSSS, StringSSS>>(true, this, &MyClassPrx::_iceI_opStringSSS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::StringSSS, ::Test::StringSSS>>
Test::MyClassPrx::opStringSSSAsync(const StringSSS& iceP_p1, const StringSSS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<StringSSS, StringSSS>>(false, this, &MyClassPrx::_iceI_opStringSSS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opStringSSSAsync(const StringSSS& iceP_p1, const StringSSS& iceP_p2, ::std::function<void(::Test::StringSSS, ::Test::StringSSS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<StringSSS, StringSSS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<StringSSS, StringSSS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opStringSSS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opStringSSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<StringSSS, StringSSS>>>& outAsync, const StringSSS& iceP_p1, const StringSSS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStringSSS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<StringSSS, StringSSS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::ByteBoolD
Test::MyClassPrx::opByteBoolD(const ByteBoolD& iceP_p1, const ByteBoolD& iceP_p2, ByteBoolD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<ByteBoolD, ByteBoolD>>(true, this, &MyClassPrx::_iceI_opByteBoolD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::ByteBoolD, ::Test::ByteBoolD>>
Test::MyClassPrx::opByteBoolDAsync(const ByteBoolD& iceP_p1, const ByteBoolD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<ByteBoolD, ByteBoolD>>(false, this, &MyClassPrx::_iceI_opByteBoolD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opByteBoolDAsync(const ByteBoolD& iceP_p1, const ByteBoolD& iceP_p2, ::std::function<void(::Test::ByteBoolD, ::Test::ByteBoolD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<ByteBoolD, ByteBoolD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<ByteBoolD, ByteBoolD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opByteBoolD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opByteBoolD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ByteBoolD, ByteBoolD>>>& outAsync, const ByteBoolD& iceP_p1, const ByteBoolD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opByteBoolD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ByteBoolD, ByteBoolD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::ShortIntD
Test::MyClassPrx::opShortIntD(const ShortIntD& iceP_p1, const ShortIntD& iceP_p2, ShortIntD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<ShortIntD, ShortIntD>>(true, this, &MyClassPrx::_iceI_opShortIntD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::ShortIntD, ::Test::ShortIntD>>
Test::MyClassPrx::opShortIntDAsync(const ShortIntD& iceP_p1, const ShortIntD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<ShortIntD, ShortIntD>>(false, this, &MyClassPrx::_iceI_opShortIntD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opShortIntDAsync(const ShortIntD& iceP_p1, const ShortIntD& iceP_p2, ::std::function<void(::Test::ShortIntD, ::Test::ShortIntD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<ShortIntD, ShortIntD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<ShortIntD, ShortIntD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opShortIntD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opShortIntD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ShortIntD, ShortIntD>>>& outAsync, const ShortIntD& iceP_p1, const ShortIntD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opShortIntD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ShortIntD, ShortIntD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::LongFloatD
Test::MyClassPrx::opLongFloatD(const LongFloatD& iceP_p1, const LongFloatD& iceP_p2, LongFloatD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<LongFloatD, LongFloatD>>(true, this, &MyClassPrx::_iceI_opLongFloatD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::LongFloatD, ::Test::LongFloatD>>
Test::MyClassPrx::opLongFloatDAsync(const LongFloatD& iceP_p1, const LongFloatD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<LongFloatD, LongFloatD>>(false, this, &MyClassPrx::_iceI_opLongFloatD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opLongFloatDAsync(const LongFloatD& iceP_p1, const LongFloatD& iceP_p2, ::std::function<void(::Test::LongFloatD, ::Test::LongFloatD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<LongFloatD, LongFloatD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<LongFloatD, LongFloatD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opLongFloatD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opLongFloatD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<LongFloatD, LongFloatD>>>& outAsync, const LongFloatD& iceP_p1, const LongFloatD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opLongFloatD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<LongFloatD, LongFloatD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::StringStringD
Test::MyClassPrx::opStringStringD(const StringStringD& iceP_p1, const StringStringD& iceP_p2, StringStringD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<StringStringD, StringStringD>>(true, this, &MyClassPrx::_iceI_opStringStringD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::StringStringD, ::Test::StringStringD>>
Test::MyClassPrx::opStringStringDAsync(const StringStringD& iceP_p1, const StringStringD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<StringStringD, StringStringD>>(false, this, &MyClassPrx::_iceI_opStringStringD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opStringStringDAsync(const StringStringD& iceP_p1, const StringStringD& iceP_p2, ::std::function<void(::Test::StringStringD, ::Test::StringStringD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<StringStringD, StringStringD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<StringStringD, StringStringD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opStringStringD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opStringStringD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<StringStringD, StringStringD>>>& outAsync, const StringStringD& iceP_p1, const StringStringD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStringStringD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<StringStringD, StringStringD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::StringMyEnumD
Test::MyClassPrx::opStringMyEnumD(const StringMyEnumD& iceP_p1, const StringMyEnumD& iceP_p2, StringMyEnumD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<StringMyEnumD, StringMyEnumD>>(true, this, &MyClassPrx::_iceI_opStringMyEnumD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::StringMyEnumD, ::Test::StringMyEnumD>>
Test::MyClassPrx::opStringMyEnumDAsync(const StringMyEnumD& iceP_p1, const StringMyEnumD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<StringMyEnumD, StringMyEnumD>>(false, this, &MyClassPrx::_iceI_opStringMyEnumD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opStringMyEnumDAsync(const StringMyEnumD& iceP_p1, const StringMyEnumD& iceP_p2, ::std::function<void(::Test::StringMyEnumD, ::Test::StringMyEnumD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<StringMyEnumD, StringMyEnumD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<StringMyEnumD, StringMyEnumD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opStringMyEnumD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opStringMyEnumD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<StringMyEnumD, StringMyEnumD>>>& outAsync, const StringMyEnumD& iceP_p1, const StringMyEnumD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStringMyEnumD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<StringMyEnumD, StringMyEnumD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::MyEnumStringD
Test::MyClassPrx::opMyEnumStringD(const MyEnumStringD& iceP_p1, const MyEnumStringD& iceP_p2, MyEnumStringD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<MyEnumStringD, MyEnumStringD>>(true, this, &MyClassPrx::_iceI_opMyEnumStringD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::MyEnumStringD, ::Test::MyEnumStringD>>
Test::MyClassPrx::opMyEnumStringDAsync(const MyEnumStringD& iceP_p1, const MyEnumStringD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<MyEnumStringD, MyEnumStringD>>(false, this, &MyClassPrx::_iceI_opMyEnumStringD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opMyEnumStringDAsync(const MyEnumStringD& iceP_p1, const MyEnumStringD& iceP_p2, ::std::function<void(::Test::MyEnumStringD, ::Test::MyEnumStringD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<MyEnumStringD, MyEnumStringD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<MyEnumStringD, MyEnumStringD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opMyEnumStringD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opMyEnumStringD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<MyEnumStringD, MyEnumStringD>>>& outAsync, const MyEnumStringD& iceP_p1, const MyEnumStringD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opMyEnumStringD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<MyEnumStringD, MyEnumStringD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::MyStructMyEnumD
Test::MyClassPrx::opMyStructMyEnumD(const MyStructMyEnumD& iceP_p1, const MyStructMyEnumD& iceP_p2, MyStructMyEnumD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<MyStructMyEnumD, MyStructMyEnumD>>(true, this, &MyClassPrx::_iceI_opMyStructMyEnumD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::MyStructMyEnumD, ::Test::MyStructMyEnumD>>
Test::MyClassPrx::opMyStructMyEnumDAsync(const MyStructMyEnumD& iceP_p1, const MyStructMyEnumD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<MyStructMyEnumD, MyStructMyEnumD>>(false, this, &MyClassPrx::_iceI_opMyStructMyEnumD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opMyStructMyEnumDAsync(const MyStructMyEnumD& iceP_p1, const MyStructMyEnumD& iceP_p2, ::std::function<void(::Test::MyStructMyEnumD, ::Test::MyStructMyEnumD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<MyStructMyEnumD, MyStructMyEnumD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<MyStructMyEnumD, MyStructMyEnumD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opMyStructMyEnumD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opMyStructMyEnumD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<MyStructMyEnumD, MyStructMyEnumD>>>& outAsync, const MyStructMyEnumD& iceP_p1, const MyStructMyEnumD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opMyStructMyEnumD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<MyStructMyEnumD, MyStructMyEnumD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::ByteBoolDS
Test::MyClassPrx::opByteBoolDS(const ByteBoolDS& iceP_p1, const ByteBoolDS& iceP_p2, ByteBoolDS& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<ByteBoolDS, ByteBoolDS>>(true, this, &MyClassPrx::_iceI_opByteBoolDS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::ByteBoolDS, ::Test::ByteBoolDS>>
Test::MyClassPrx::opByteBoolDSAsync(const ByteBoolDS& iceP_p1, const ByteBoolDS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<ByteBoolDS, ByteBoolDS>>(false, this, &MyClassPrx::_iceI_opByteBoolDS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opByteBoolDSAsync(const ByteBoolDS& iceP_p1, const ByteBoolDS& iceP_p2, ::std::function<void(::Test::ByteBoolDS, ::Test::ByteBoolDS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<ByteBoolDS, ByteBoolDS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<ByteBoolDS, ByteBoolDS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opByteBoolDS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opByteBoolDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ByteBoolDS, ByteBoolDS>>>& outAsync, const ByteBoolDS& iceP_p1, const ByteBoolDS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opByteBoolDS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ByteBoolDS, ByteBoolDS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::ShortIntDS
Test::MyClassPrx::opShortIntDS(const ShortIntDS& iceP_p1, const ShortIntDS& iceP_p2, ShortIntDS& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<ShortIntDS, ShortIntDS>>(true, this, &MyClassPrx::_iceI_opShortIntDS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::ShortIntDS, ::Test::ShortIntDS>>
Test::MyClassPrx::opShortIntDSAsync(const ShortIntDS& iceP_p1, const ShortIntDS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<ShortIntDS, ShortIntDS>>(false, this, &MyClassPrx::_iceI_opShortIntDS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opShortIntDSAsync(const ShortIntDS& iceP_p1, const ShortIntDS& iceP_p2, ::std::function<void(::Test::ShortIntDS, ::Test::ShortIntDS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<ShortIntDS, ShortIntDS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<ShortIntDS, ShortIntDS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opShortIntDS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opShortIntDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ShortIntDS, ShortIntDS>>>& outAsync, const ShortIntDS& iceP_p1, const ShortIntDS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opShortIntDS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ShortIntDS, ShortIntDS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::LongFloatDS
Test::MyClassPrx::opLongFloatDS(const LongFloatDS& iceP_p1, const LongFloatDS& iceP_p2, LongFloatDS& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<LongFloatDS, LongFloatDS>>(true, this, &MyClassPrx::_iceI_opLongFloatDS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::LongFloatDS, ::Test::LongFloatDS>>
Test::MyClassPrx::opLongFloatDSAsync(const LongFloatDS& iceP_p1, const LongFloatDS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<LongFloatDS, LongFloatDS>>(false, this, &MyClassPrx::_iceI_opLongFloatDS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opLongFloatDSAsync(const LongFloatDS& iceP_p1, const LongFloatDS& iceP_p2, ::std::function<void(::Test::LongFloatDS, ::Test::LongFloatDS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<LongFloatDS, LongFloatDS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<LongFloatDS, LongFloatDS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opLongFloatDS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opLongFloatDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<LongFloatDS, LongFloatDS>>>& outAsync, const LongFloatDS& iceP_p1, const LongFloatDS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opLongFloatDS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<LongFloatDS, LongFloatDS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::StringStringDS
Test::MyClassPrx::opStringStringDS(const StringStringDS& iceP_p1, const StringStringDS& iceP_p2, StringStringDS& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<StringStringDS, StringStringDS>>(true, this, &MyClassPrx::_iceI_opStringStringDS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::StringStringDS, ::Test::StringStringDS>>
Test::MyClassPrx::opStringStringDSAsync(const StringStringDS& iceP_p1, const StringStringDS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<StringStringDS, StringStringDS>>(false, this, &MyClassPrx::_iceI_opStringStringDS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opStringStringDSAsync(const StringStringDS& iceP_p1, const StringStringDS& iceP_p2, ::std::function<void(::Test::StringStringDS, ::Test::StringStringDS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<StringStringDS, StringStringDS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<StringStringDS, StringStringDS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opStringStringDS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opStringStringDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<StringStringDS, StringStringDS>>>& outAsync, const StringStringDS& iceP_p1, const StringStringDS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStringStringDS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<StringStringDS, StringStringDS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::StringMyEnumDS
Test::MyClassPrx::opStringMyEnumDS(const StringMyEnumDS& iceP_p1, const StringMyEnumDS& iceP_p2, StringMyEnumDS& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<StringMyEnumDS, StringMyEnumDS>>(true, this, &MyClassPrx::_iceI_opStringMyEnumDS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::StringMyEnumDS, ::Test::StringMyEnumDS>>
Test::MyClassPrx::opStringMyEnumDSAsync(const StringMyEnumDS& iceP_p1, const StringMyEnumDS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<StringMyEnumDS, StringMyEnumDS>>(false, this, &MyClassPrx::_iceI_opStringMyEnumDS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opStringMyEnumDSAsync(const StringMyEnumDS& iceP_p1, const StringMyEnumDS& iceP_p2, ::std::function<void(::Test::StringMyEnumDS, ::Test::StringMyEnumDS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<StringMyEnumDS, StringMyEnumDS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<StringMyEnumDS, StringMyEnumDS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opStringMyEnumDS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opStringMyEnumDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<StringMyEnumDS, StringMyEnumDS>>>& outAsync, const StringMyEnumDS& iceP_p1, const StringMyEnumDS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStringMyEnumDS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<StringMyEnumDS, StringMyEnumDS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::MyEnumStringDS
Test::MyClassPrx::opMyEnumStringDS(const MyEnumStringDS& iceP_p1, const MyEnumStringDS& iceP_p2, MyEnumStringDS& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<MyEnumStringDS, MyEnumStringDS>>(true, this, &MyClassPrx::_iceI_opMyEnumStringDS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::MyEnumStringDS, ::Test::MyEnumStringDS>>
Test::MyClassPrx::opMyEnumStringDSAsync(const MyEnumStringDS& iceP_p1, const MyEnumStringDS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<MyEnumStringDS, MyEnumStringDS>>(false, this, &MyClassPrx::_iceI_opMyEnumStringDS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opMyEnumStringDSAsync(const MyEnumStringDS& iceP_p1, const MyEnumStringDS& iceP_p2, ::std::function<void(::Test::MyEnumStringDS, ::Test::MyEnumStringDS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<MyEnumStringDS, MyEnumStringDS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<MyEnumStringDS, MyEnumStringDS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opMyEnumStringDS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opMyEnumStringDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<MyEnumStringDS, MyEnumStringDS>>>& outAsync, const MyEnumStringDS& iceP_p1, const MyEnumStringDS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opMyEnumStringDS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<MyEnumStringDS, MyEnumStringDS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::MyStructMyEnumDS
Test::MyClassPrx::opMyStructMyEnumDS(const MyStructMyEnumDS& iceP_p1, const MyStructMyEnumDS& iceP_p2, MyStructMyEnumDS& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<MyStructMyEnumDS, MyStructMyEnumDS>>(true, this, &MyClassPrx::_iceI_opMyStructMyEnumDS, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::MyStructMyEnumDS, ::Test::MyStructMyEnumDS>>
Test::MyClassPrx::opMyStructMyEnumDSAsync(const MyStructMyEnumDS& iceP_p1, const MyStructMyEnumDS& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<MyStructMyEnumDS, MyStructMyEnumDS>>(false, this, &MyClassPrx::_iceI_opMyStructMyEnumDS, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opMyStructMyEnumDSAsync(const MyStructMyEnumDS& iceP_p1, const MyStructMyEnumDS& iceP_p2, ::std::function<void(::Test::MyStructMyEnumDS, ::Test::MyStructMyEnumDS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<MyStructMyEnumDS, MyStructMyEnumDS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<MyStructMyEnumDS, MyStructMyEnumDS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opMyStructMyEnumDS, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opMyStructMyEnumDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<MyStructMyEnumDS, MyStructMyEnumDS>>>& outAsync, const MyStructMyEnumDS& iceP_p1, const MyStructMyEnumDS& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opMyStructMyEnumDS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<MyStructMyEnumDS, MyStructMyEnumDS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::ByteByteSD
Test::MyClassPrx::opByteByteSD(const ByteByteSD& iceP_p1, const ByteByteSD& iceP_p2, ByteByteSD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<ByteByteSD, ByteByteSD>>(true, this, &MyClassPrx::_iceI_opByteByteSD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::ByteByteSD, ::Test::ByteByteSD>>
Test::MyClassPrx::opByteByteSDAsync(const ByteByteSD& iceP_p1, const ByteByteSD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<ByteByteSD, ByteByteSD>>(false, this, &MyClassPrx::_iceI_opByteByteSD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opByteByteSDAsync(const ByteByteSD& iceP_p1, const ByteByteSD& iceP_p2, ::std::function<void(::Test::ByteByteSD, ::Test::ByteByteSD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<ByteByteSD, ByteByteSD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<ByteByteSD, ByteByteSD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opByteByteSD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opByteByteSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ByteByteSD, ByteByteSD>>>& outAsync, const ByteByteSD& iceP_p1, const ByteByteSD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opByteByteSD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ByteByteSD, ByteByteSD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::BoolBoolSD
Test::MyClassPrx::opBoolBoolSD(const BoolBoolSD& iceP_p1, const BoolBoolSD& iceP_p2, BoolBoolSD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<BoolBoolSD, BoolBoolSD>>(true, this, &MyClassPrx::_iceI_opBoolBoolSD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::BoolBoolSD, ::Test::BoolBoolSD>>
Test::MyClassPrx::opBoolBoolSDAsync(const BoolBoolSD& iceP_p1, const BoolBoolSD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<BoolBoolSD, BoolBoolSD>>(false, this, &MyClassPrx::_iceI_opBoolBoolSD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opBoolBoolSDAsync(const BoolBoolSD& iceP_p1, const BoolBoolSD& iceP_p2, ::std::function<void(::Test::BoolBoolSD, ::Test::BoolBoolSD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<BoolBoolSD, BoolBoolSD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<BoolBoolSD, BoolBoolSD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opBoolBoolSD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opBoolBoolSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<BoolBoolSD, BoolBoolSD>>>& outAsync, const BoolBoolSD& iceP_p1, const BoolBoolSD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opBoolBoolSD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<BoolBoolSD, BoolBoolSD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::ShortShortSD
Test::MyClassPrx::opShortShortSD(const ShortShortSD& iceP_p1, const ShortShortSD& iceP_p2, ShortShortSD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<ShortShortSD, ShortShortSD>>(true, this, &MyClassPrx::_iceI_opShortShortSD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::ShortShortSD, ::Test::ShortShortSD>>
Test::MyClassPrx::opShortShortSDAsync(const ShortShortSD& iceP_p1, const ShortShortSD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<ShortShortSD, ShortShortSD>>(false, this, &MyClassPrx::_iceI_opShortShortSD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opShortShortSDAsync(const ShortShortSD& iceP_p1, const ShortShortSD& iceP_p2, ::std::function<void(::Test::ShortShortSD, ::Test::ShortShortSD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<ShortShortSD, ShortShortSD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<ShortShortSD, ShortShortSD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opShortShortSD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opShortShortSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ShortShortSD, ShortShortSD>>>& outAsync, const ShortShortSD& iceP_p1, const ShortShortSD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opShortShortSD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ShortShortSD, ShortShortSD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::IntIntSD
Test::MyClassPrx::opIntIntSD(const IntIntSD& iceP_p1, const IntIntSD& iceP_p2, IntIntSD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<IntIntSD, IntIntSD>>(true, this, &MyClassPrx::_iceI_opIntIntSD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::IntIntSD, ::Test::IntIntSD>>
Test::MyClassPrx::opIntIntSDAsync(const IntIntSD& iceP_p1, const IntIntSD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<IntIntSD, IntIntSD>>(false, this, &MyClassPrx::_iceI_opIntIntSD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opIntIntSDAsync(const IntIntSD& iceP_p1, const IntIntSD& iceP_p2, ::std::function<void(::Test::IntIntSD, ::Test::IntIntSD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<IntIntSD, IntIntSD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<IntIntSD, IntIntSD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opIntIntSD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opIntIntSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<IntIntSD, IntIntSD>>>& outAsync, const IntIntSD& iceP_p1, const IntIntSD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opIntIntSD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<IntIntSD, IntIntSD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::LongLongSD
Test::MyClassPrx::opLongLongSD(const LongLongSD& iceP_p1, const LongLongSD& iceP_p2, LongLongSD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<LongLongSD, LongLongSD>>(true, this, &MyClassPrx::_iceI_opLongLongSD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::LongLongSD, ::Test::LongLongSD>>
Test::MyClassPrx::opLongLongSDAsync(const LongLongSD& iceP_p1, const LongLongSD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<LongLongSD, LongLongSD>>(false, this, &MyClassPrx::_iceI_opLongLongSD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opLongLongSDAsync(const LongLongSD& iceP_p1, const LongLongSD& iceP_p2, ::std::function<void(::Test::LongLongSD, ::Test::LongLongSD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<LongLongSD, LongLongSD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<LongLongSD, LongLongSD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opLongLongSD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opLongLongSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<LongLongSD, LongLongSD>>>& outAsync, const LongLongSD& iceP_p1, const LongLongSD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opLongLongSD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<LongLongSD, LongLongSD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::StringFloatSD
Test::MyClassPrx::opStringFloatSD(const StringFloatSD& iceP_p1, const StringFloatSD& iceP_p2, StringFloatSD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<StringFloatSD, StringFloatSD>>(true, this, &MyClassPrx::_iceI_opStringFloatSD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::StringFloatSD, ::Test::StringFloatSD>>
Test::MyClassPrx::opStringFloatSDAsync(const StringFloatSD& iceP_p1, const StringFloatSD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<StringFloatSD, StringFloatSD>>(false, this, &MyClassPrx::_iceI_opStringFloatSD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opStringFloatSDAsync(const StringFloatSD& iceP_p1, const StringFloatSD& iceP_p2, ::std::function<void(::Test::StringFloatSD, ::Test::StringFloatSD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<StringFloatSD, StringFloatSD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<StringFloatSD, StringFloatSD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opStringFloatSD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opStringFloatSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<StringFloatSD, StringFloatSD>>>& outAsync, const StringFloatSD& iceP_p1, const StringFloatSD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStringFloatSD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<StringFloatSD, StringFloatSD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::StringDoubleSD
Test::MyClassPrx::opStringDoubleSD(const StringDoubleSD& iceP_p1, const StringDoubleSD& iceP_p2, StringDoubleSD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<StringDoubleSD, StringDoubleSD>>(true, this, &MyClassPrx::_iceI_opStringDoubleSD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::StringDoubleSD, ::Test::StringDoubleSD>>
Test::MyClassPrx::opStringDoubleSDAsync(const StringDoubleSD& iceP_p1, const StringDoubleSD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<StringDoubleSD, StringDoubleSD>>(false, this, &MyClassPrx::_iceI_opStringDoubleSD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opStringDoubleSDAsync(const StringDoubleSD& iceP_p1, const StringDoubleSD& iceP_p2, ::std::function<void(::Test::StringDoubleSD, ::Test::StringDoubleSD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<StringDoubleSD, StringDoubleSD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<StringDoubleSD, StringDoubleSD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opStringDoubleSD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opStringDoubleSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<StringDoubleSD, StringDoubleSD>>>& outAsync, const StringDoubleSD& iceP_p1, const StringDoubleSD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStringDoubleSD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<StringDoubleSD, StringDoubleSD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::StringStringSD
Test::MyClassPrx::opStringStringSD(const StringStringSD& iceP_p1, const StringStringSD& iceP_p2, StringStringSD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<StringStringSD, StringStringSD>>(true, this, &MyClassPrx::_iceI_opStringStringSD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::StringStringSD, ::Test::StringStringSD>>
Test::MyClassPrx::opStringStringSDAsync(const StringStringSD& iceP_p1, const StringStringSD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<StringStringSD, StringStringSD>>(false, this, &MyClassPrx::_iceI_opStringStringSD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opStringStringSDAsync(const StringStringSD& iceP_p1, const StringStringSD& iceP_p2, ::std::function<void(::Test::StringStringSD, ::Test::StringStringSD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<StringStringSD, StringStringSD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<StringStringSD, StringStringSD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opStringStringSD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opStringStringSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<StringStringSD, StringStringSD>>>& outAsync, const StringStringSD& iceP_p1, const StringStringSD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStringStringSD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<StringStringSD, StringStringSD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::MyEnumMyEnumSD
Test::MyClassPrx::opMyEnumMyEnumSD(const MyEnumMyEnumSD& iceP_p1, const MyEnumMyEnumSD& iceP_p2, MyEnumMyEnumSD& iceP_p3, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<MyEnumMyEnumSD, MyEnumMyEnumSD>>(true, this, &MyClassPrx::_iceI_opMyEnumMyEnumSD, iceP_p1, iceP_p2, context).get();
    iceP_p3 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::MyEnumMyEnumSD, ::Test::MyEnumMyEnumSD>>
Test::MyClassPrx::opMyEnumMyEnumSDAsync(const MyEnumMyEnumSD& iceP_p1, const MyEnumMyEnumSD& iceP_p2, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<MyEnumMyEnumSD, MyEnumMyEnumSD>>(false, this, &MyClassPrx::_iceI_opMyEnumMyEnumSD, iceP_p1, iceP_p2, context);
}

::std::function<void()>
Test::MyClassPrx::opMyEnumMyEnumSDAsync(const MyEnumMyEnumSD& iceP_p1, const MyEnumMyEnumSD& iceP_p2, ::std::function<void(::Test::MyEnumMyEnumSD, ::Test::MyEnumMyEnumSD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<MyEnumMyEnumSD, MyEnumMyEnumSD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<MyEnumMyEnumSD, MyEnumMyEnumSD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opMyEnumMyEnumSD, iceP_p1, iceP_p2, context);
}

void
Test::MyClassPrx::_iceI_opMyEnumMyEnumSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<MyEnumMyEnumSD, MyEnumMyEnumSD>>>& outAsync, const MyEnumMyEnumSD& iceP_p1, const MyEnumMyEnumSD& iceP_p2, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opMyEnumMyEnumSD";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<MyEnumMyEnumSD, MyEnumMyEnumSD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::IntS
Test::MyClassPrx::opIntS(const IntS& iceP_s, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<IntS>(true, this, &MyClassPrx::_iceI_opIntS, iceP_s, context).get();
}

::std::future<::Test::IntS>
Test::MyClassPrx::opIntSAsync(const IntS& iceP_s, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<IntS>(false, this, &MyClassPrx::_iceI_opIntS, iceP_s, context);
}

::std::function<void()>
Test::MyClassPrx::opIntSAsync(const IntS& iceP_s, ::std::function<void(::Test::IntS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<IntS>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opIntS, iceP_s, context);
}

void
Test::MyClassPrx::_iceI_opIntS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<IntS>>& outAsync, const IntS& iceP_s, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opIntS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s);
        },
        nullptr);
}

void
Test::MyClassPrx::opByteSOneway(const ByteS& iceP_s, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &MyClassPrx::_iceI_opByteSOneway, iceP_s, context).get();
}

::std::future<void>
Test::MyClassPrx::opByteSOnewayAsync(const ByteS& iceP_s, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &MyClassPrx::_iceI_opByteSOneway, iceP_s, context);
}

::std::function<void()>
Test::MyClassPrx::opByteSOnewayAsync(const ByteS& iceP_s, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opByteSOneway, iceP_s, context);
}

void
Test::MyClassPrx::_iceI_opByteSOneway(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ByteS& iceP_s, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opByteSOneway";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s);
        },
        nullptr);
}

::std::int32_t
Test::MyClassPrx::opByteSOnewayCallCount(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::int32_t>(true, this, &MyClassPrx::_iceI_opByteSOnewayCallCount, context).get();
}

::std::future<::std::int32_t>
Test::MyClassPrx::opByteSOnewayCallCountAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::int32_t>(false, this, &MyClassPrx::_iceI_opByteSOnewayCallCount, context);
}

::std::function<void()>
Test::MyClassPrx::opByteSOnewayCallCountAsync(::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::int32_t>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opByteSOnewayCallCount, context);
}

void
Test::MyClassPrx::_iceI_opByteSOnewayCallCount(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opByteSOnewayCallCount";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::Ice::Context
Test::MyClassPrx::opContext(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::Ice::Context>(true, this, &MyClassPrx::_iceI_opContext, context).get();
}

::std::future<::Ice::Context>
Test::MyClassPrx::opContextAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::Ice::Context>(false, this, &MyClassPrx::_iceI_opContext, context);
}

::std::function<void()>
Test::MyClassPrx::opContextAsync(::std::function<void(::Ice::Context)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::Ice::Context>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opContext, context);
}

void
Test::MyClassPrx::_iceI_opContext(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Ice::Context>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opContext";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
Test::MyClassPrx::opIdempotent(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &MyClassPrx::_iceI_opIdempotent, context).get();
}

::std::future<void>
Test::MyClassPrx::opIdempotentAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &MyClassPrx::_iceI_opIdempotent, context);
}

::std::function<void()>
Test::MyClassPrx::opIdempotentAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opIdempotent, context);
}

void
Test::MyClassPrx::_iceI_opIdempotent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opIdempotent";

    outAsync->invoke(operationName, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::uint8_t
Test::MyClassPrx::opByte1(::std::uint8_t iceP_opByte1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::uint8_t>(true, this, &MyClassPrx::_iceI_opByte1, iceP_opByte1, context).get();
}

::std::future<::std::uint8_t>
Test::MyClassPrx::opByte1Async(::std::uint8_t iceP_opByte1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::uint8_t>(false, this, &MyClassPrx::_iceI_opByte1, iceP_opByte1, context);
}

::std::function<void()>
Test::MyClassPrx::opByte1Async(::std::uint8_t iceP_opByte1, ::std::function<void(::std::uint8_t)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::uint8_t>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opByte1, iceP_opByte1, context);
}

void
Test::MyClassPrx::_iceI_opByte1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::uint8_t>>& outAsync, ::std::uint8_t iceP_opByte1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opByte1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opByte1);
        },
        nullptr);
}

::std::int16_t
Test::MyClassPrx::opShort1(::std::int16_t iceP_opShort1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::int16_t>(true, this, &MyClassPrx::_iceI_opShort1, iceP_opShort1, context).get();
}

::std::future<::std::int16_t>
Test::MyClassPrx::opShort1Async(::std::int16_t iceP_opShort1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::int16_t>(false, this, &MyClassPrx::_iceI_opShort1, iceP_opShort1, context);
}

::std::function<void()>
Test::MyClassPrx::opShort1Async(::std::int16_t iceP_opShort1, ::std::function<void(::std::int16_t)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::int16_t>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opShort1, iceP_opShort1, context);
}

void
Test::MyClassPrx::_iceI_opShort1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int16_t>>& outAsync, ::std::int16_t iceP_opShort1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opShort1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opShort1);
        },
        nullptr);
}

::std::int32_t
Test::MyClassPrx::opInt1(::std::int32_t iceP_opInt1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::int32_t>(true, this, &MyClassPrx::_iceI_opInt1, iceP_opInt1, context).get();
}

::std::future<::std::int32_t>
Test::MyClassPrx::opInt1Async(::std::int32_t iceP_opInt1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::int32_t>(false, this, &MyClassPrx::_iceI_opInt1, iceP_opInt1, context);
}

::std::function<void()>
Test::MyClassPrx::opInt1Async(::std::int32_t iceP_opInt1, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::int32_t>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opInt1, iceP_opInt1, context);
}

void
Test::MyClassPrx::_iceI_opInt1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>& outAsync, ::std::int32_t iceP_opInt1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opInt1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opInt1);
        },
        nullptr);
}

::std::int64_t
Test::MyClassPrx::opLong1(::std::int64_t iceP_opLong1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::int64_t>(true, this, &MyClassPrx::_iceI_opLong1, iceP_opLong1, context).get();
}

::std::future<::std::int64_t>
Test::MyClassPrx::opLong1Async(::std::int64_t iceP_opLong1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::int64_t>(false, this, &MyClassPrx::_iceI_opLong1, iceP_opLong1, context);
}

::std::function<void()>
Test::MyClassPrx::opLong1Async(::std::int64_t iceP_opLong1, ::std::function<void(::std::int64_t)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::int64_t>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opLong1, iceP_opLong1, context);
}

void
Test::MyClassPrx::_iceI_opLong1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int64_t>>& outAsync, ::std::int64_t iceP_opLong1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opLong1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opLong1);
        },
        nullptr);
}

float
Test::MyClassPrx::opFloat1(float iceP_opFloat1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<float>(true, this, &MyClassPrx::_iceI_opFloat1, iceP_opFloat1, context).get();
}

::std::future<float>
Test::MyClassPrx::opFloat1Async(float iceP_opFloat1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<float>(false, this, &MyClassPrx::_iceI_opFloat1, iceP_opFloat1, context);
}

::std::function<void()>
Test::MyClassPrx::opFloat1Async(float iceP_opFloat1, ::std::function<void(float)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<float>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opFloat1, iceP_opFloat1, context);
}

void
Test::MyClassPrx::_iceI_opFloat1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<float>>& outAsync, float iceP_opFloat1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opFloat1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opFloat1);
        },
        nullptr);
}

double
Test::MyClassPrx::opDouble1(double iceP_opDouble1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<double>(true, this, &MyClassPrx::_iceI_opDouble1, iceP_opDouble1, context).get();
}

::std::future<double>
Test::MyClassPrx::opDouble1Async(double iceP_opDouble1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<double>(false, this, &MyClassPrx::_iceI_opDouble1, iceP_opDouble1, context);
}

::std::function<void()>
Test::MyClassPrx::opDouble1Async(double iceP_opDouble1, ::std::function<void(double)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<double>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opDouble1, iceP_opDouble1, context);
}

void
Test::MyClassPrx::_iceI_opDouble1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<double>>& outAsync, double iceP_opDouble1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opDouble1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opDouble1);
        },
        nullptr);
}

::std::string
Test::MyClassPrx::opString1(::std::string_view iceP_opString1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(true, this, &MyClassPrx::_iceI_opString1, iceP_opString1, context).get();
}

::std::future<::std::string>
Test::MyClassPrx::opString1Async(::std::string_view iceP_opString1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(false, this, &MyClassPrx::_iceI_opString1, iceP_opString1, context);
}

::std::function<void()>
Test::MyClassPrx::opString1Async(::std::string_view iceP_opString1, ::std::function<void(::std::string)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::string>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opString1, iceP_opString1, context);
}

void
Test::MyClassPrx::_iceI_opString1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, ::std::string_view iceP_opString1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opString1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opString1);
        },
        nullptr);
}

::Test::StringS
Test::MyClassPrx::opStringS1(const StringS& iceP_opStringS1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<StringS>(true, this, &MyClassPrx::_iceI_opStringS1, iceP_opStringS1, context).get();
}

::std::future<::Test::StringS>
Test::MyClassPrx::opStringS1Async(const StringS& iceP_opStringS1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<StringS>(false, this, &MyClassPrx::_iceI_opStringS1, iceP_opStringS1, context);
}

::std::function<void()>
Test::MyClassPrx::opStringS1Async(const StringS& iceP_opStringS1, ::std::function<void(::Test::StringS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<StringS>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opStringS1, iceP_opStringS1, context);
}

void
Test::MyClassPrx::_iceI_opStringS1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<StringS>>& outAsync, const StringS& iceP_opStringS1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStringS1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opStringS1);
        },
        nullptr);
}

::Test::ByteBoolD
Test::MyClassPrx::opByteBoolD1(const ByteBoolD& iceP_opByteBoolD1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<ByteBoolD>(true, this, &MyClassPrx::_iceI_opByteBoolD1, iceP_opByteBoolD1, context).get();
}

::std::future<::Test::ByteBoolD>
Test::MyClassPrx::opByteBoolD1Async(const ByteBoolD& iceP_opByteBoolD1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<ByteBoolD>(false, this, &MyClassPrx::_iceI_opByteBoolD1, iceP_opByteBoolD1, context);
}

::std::function<void()>
Test::MyClassPrx::opByteBoolD1Async(const ByteBoolD& iceP_opByteBoolD1, ::std::function<void(::Test::ByteBoolD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<ByteBoolD>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opByteBoolD1, iceP_opByteBoolD1, context);
}

void
Test::MyClassPrx::_iceI_opByteBoolD1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<ByteBoolD>>& outAsync, const ByteBoolD& iceP_opByteBoolD1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opByteBoolD1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opByteBoolD1);
        },
        nullptr);
}

::Test::StringS
Test::MyClassPrx::opStringS2(const StringS& iceP_stringS, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<StringS>(true, this, &MyClassPrx::_iceI_opStringS2, iceP_stringS, context).get();
}

::std::future<::Test::StringS>
Test::MyClassPrx::opStringS2Async(const StringS& iceP_stringS, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<StringS>(false, this, &MyClassPrx::_iceI_opStringS2, iceP_stringS, context);
}

::std::function<void()>
Test::MyClassPrx::opStringS2Async(const StringS& iceP_stringS, ::std::function<void(::Test::StringS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<StringS>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opStringS2, iceP_stringS, context);
}

void
Test::MyClassPrx::_iceI_opStringS2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<StringS>>& outAsync, const StringS& iceP_stringS, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStringS2";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_stringS);
        },
        nullptr);
}

::Test::ByteBoolD
Test::MyClassPrx::opByteBoolD2(const ByteBoolD& iceP_byteBoolD, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<ByteBoolD>(true, this, &MyClassPrx::_iceI_opByteBoolD2, iceP_byteBoolD, context).get();
}

::std::future<::Test::ByteBoolD>
Test::MyClassPrx::opByteBoolD2Async(const ByteBoolD& iceP_byteBoolD, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<ByteBoolD>(false, this, &MyClassPrx::_iceI_opByteBoolD2, iceP_byteBoolD, context);
}

::std::function<void()>
Test::MyClassPrx::opByteBoolD2Async(const ByteBoolD& iceP_byteBoolD, ::std::function<void(::Test::ByteBoolD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<ByteBoolD>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opByteBoolD2, iceP_byteBoolD, context);
}

void
Test::MyClassPrx::_iceI_opByteBoolD2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<ByteBoolD>>& outAsync, const ByteBoolD& iceP_byteBoolD, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opByteBoolD2";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_byteBoolD);
        },
        nullptr);
}

::Test::StringS
Test::MyClassPrx::opStringLiterals(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<StringS>(true, this, &MyClassPrx::_iceI_opStringLiterals, context).get();
}

::std::future<::Test::StringS>
Test::MyClassPrx::opStringLiteralsAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<StringS>(false, this, &MyClassPrx::_iceI_opStringLiterals, context);
}

::std::function<void()>
Test::MyClassPrx::opStringLiteralsAsync(::std::function<void(::Test::StringS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<StringS>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opStringLiterals, context);
}

void
Test::MyClassPrx::_iceI_opStringLiterals(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<StringS>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opStringLiterals";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::Test::Structure
Test::MyClassPrx::opMStruct1(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<Structure>(true, this, &MyClassPrx::_iceI_opMStruct1, context).get();
}

::std::future<::Test::Structure>
Test::MyClassPrx::opMStruct1Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<Structure>(false, this, &MyClassPrx::_iceI_opMStruct1, context);
}

::std::function<void()>
Test::MyClassPrx::opMStruct1Async(::std::function<void(::Test::Structure)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<Structure>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opMStruct1, context);
}

void
Test::MyClassPrx::_iceI_opMStruct1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Structure>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opMStruct1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::Test::Structure
Test::MyClassPrx::opMStruct2(const Structure& iceP_p1, Structure& iceP_p2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<Structure, Structure>>(true, this, &MyClassPrx::_iceI_opMStruct2, iceP_p1, context).get();
    iceP_p2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::Structure, ::Test::Structure>>
Test::MyClassPrx::opMStruct2Async(const Structure& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<Structure, Structure>>(false, this, &MyClassPrx::_iceI_opMStruct2, iceP_p1, context);
}

::std::function<void()>
Test::MyClassPrx::opMStruct2Async(const Structure& iceP_p1, ::std::function<void(::Test::Structure, ::Test::Structure)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<Structure, Structure>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<Structure, Structure>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opMStruct2, iceP_p1, context);
}

void
Test::MyClassPrx::_iceI_opMStruct2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<Structure, Structure>>>& outAsync, const Structure& iceP_p1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opMStruct2";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<Structure, Structure> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::StringS
Test::MyClassPrx::opMSeq1(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<StringS>(true, this, &MyClassPrx::_iceI_opMSeq1, context).get();
}

::std::future<::Test::StringS>
Test::MyClassPrx::opMSeq1Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<StringS>(false, this, &MyClassPrx::_iceI_opMSeq1, context);
}

::std::function<void()>
Test::MyClassPrx::opMSeq1Async(::std::function<void(::Test::StringS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<StringS>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opMSeq1, context);
}

void
Test::MyClassPrx::_iceI_opMSeq1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<StringS>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opMSeq1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::Test::StringS
Test::MyClassPrx::opMSeq2(const StringS& iceP_p1, StringS& iceP_p2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<StringS, StringS>>(true, this, &MyClassPrx::_iceI_opMSeq2, iceP_p1, context).get();
    iceP_p2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::StringS, ::Test::StringS>>
Test::MyClassPrx::opMSeq2Async(const StringS& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<StringS, StringS>>(false, this, &MyClassPrx::_iceI_opMSeq2, iceP_p1, context);
}

::std::function<void()>
Test::MyClassPrx::opMSeq2Async(const StringS& iceP_p1, ::std::function<void(::Test::StringS, ::Test::StringS)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<StringS, StringS>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<StringS, StringS>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opMSeq2, iceP_p1, context);
}

void
Test::MyClassPrx::_iceI_opMSeq2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<StringS, StringS>>>& outAsync, const StringS& iceP_p1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opMSeq2";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<StringS, StringS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::StringStringD
Test::MyClassPrx::opMDict1(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<StringStringD>(true, this, &MyClassPrx::_iceI_opMDict1, context).get();
}

::std::future<::Test::StringStringD>
Test::MyClassPrx::opMDict1Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<StringStringD>(false, this, &MyClassPrx::_iceI_opMDict1, context);
}

::std::function<void()>
Test::MyClassPrx::opMDict1Async(::std::function<void(::Test::StringStringD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<StringStringD>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opMDict1, context);
}

void
Test::MyClassPrx::_iceI_opMDict1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<StringStringD>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opMDict1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::Test::StringStringD
Test::MyClassPrx::opMDict2(const StringStringD& iceP_p1, StringStringD& iceP_p2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<StringStringD, StringStringD>>(true, this, &MyClassPrx::_iceI_opMDict2, iceP_p1, context).get();
    iceP_p2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::StringStringD, ::Test::StringStringD>>
Test::MyClassPrx::opMDict2Async(const StringStringD& iceP_p1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<StringStringD, StringStringD>>(false, this, &MyClassPrx::_iceI_opMDict2, iceP_p1, context);
}

::std::function<void()>
Test::MyClassPrx::opMDict2Async(const StringStringD& iceP_p1, ::std::function<void(::Test::StringStringD, ::Test::StringStringD)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<StringStringD, StringStringD>&& result)
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<StringStringD, StringStringD>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::MyClassPrx::_iceI_opMDict2, iceP_p1, context);
}

void
Test::MyClassPrx::_iceI_opMDict2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<StringStringD, StringStringD>>>& outAsync, const StringStringD& iceP_p1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opMDict2";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<StringStringD, StringStringD> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::std::string_view
Test::MyClassPrx::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MyClass";
    return typeId;
}

void
Test::MyDerivedClassPrx::opDerived(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &MyDerivedClassPrx::_iceI_opDerived, context).get();
}

::std::future<void>
Test::MyDerivedClassPrx::opDerivedAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &MyDerivedClassPrx::_iceI_opDerived, context);
}

::std::function<void()>
Test::MyDerivedClassPrx::opDerivedAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyDerivedClassPrx::_iceI_opDerived, context);
}

void
Test::MyDerivedClassPrx::_iceI_opDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opDerived";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::Test::MyClass1Ptr
Test::MyDerivedClassPrx::opMyClass1(const MyClass1Ptr& iceP_opMyClass1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<MyClass1Ptr>(true, this, &MyDerivedClassPrx::_iceI_opMyClass1, iceP_opMyClass1, context).get();
}

::std::future<::Test::MyClass1Ptr>
Test::MyDerivedClassPrx::opMyClass1Async(const MyClass1Ptr& iceP_opMyClass1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<MyClass1Ptr>(false, this, &MyDerivedClassPrx::_iceI_opMyClass1, iceP_opMyClass1, context);
}

::std::function<void()>
Test::MyDerivedClassPrx::opMyClass1Async(const MyClass1Ptr& iceP_opMyClass1, ::std::function<void(::Test::MyClass1Ptr)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<MyClass1Ptr>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyDerivedClassPrx::_iceI_opMyClass1, iceP_opMyClass1, context);
}

void
Test::MyDerivedClassPrx::_iceI_opMyClass1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass1Ptr>>& outAsync, const MyClass1Ptr& iceP_opMyClass1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opMyClass1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opMyClass1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass1Ptr ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

::Test::MyStruct1
Test::MyDerivedClassPrx::opMyStruct1(const MyStruct1& iceP_opMyStruct1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<MyStruct1>(true, this, &MyDerivedClassPrx::_iceI_opMyStruct1, iceP_opMyStruct1, context).get();
}

::std::future<::Test::MyStruct1>
Test::MyDerivedClassPrx::opMyStruct1Async(const MyStruct1& iceP_opMyStruct1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<MyStruct1>(false, this, &MyDerivedClassPrx::_iceI_opMyStruct1, iceP_opMyStruct1, context);
}

::std::function<void()>
Test::MyDerivedClassPrx::opMyStruct1Async(const MyStruct1& iceP_opMyStruct1, ::std::function<void(::Test::MyStruct1)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<MyStruct1>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::MyDerivedClassPrx::_iceI_opMyStruct1, iceP_opMyStruct1, context);
}

void
Test::MyDerivedClassPrx::_iceI_opMyStruct1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyStruct1>>& outAsync, const MyStruct1& iceP_opMyStruct1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opMyStruct1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opMyStruct1);
        },
        nullptr);
}

::std::string_view
Test::MyDerivedClassPrx::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MyDerivedClass";
    return typeId;
}

::std::string_view
Test2::MyDerivedClassPrx::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test2::MyDerivedClass";
    return typeId;
}

::std::string
Test::MyClass1::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MyClass1::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MyClass1";
    return typeId;
}

::Ice::ValuePtr
Test::MyClass1::_iceCloneImpl() const
{
    return CloneEnabler<MyClass1>::clone(*this);
}

void
Test::MyClass1::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<MyClass1>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MyClass1::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<MyClass1>::read(istr, *this);
    istr->endSlice();
}

::std::vector<::std::string>
Test::MyClass::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::MyClass"};
    return allTypeIds;
}

::std::string
Test::MyClass::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MyClass::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MyClass";
    return typeId;
}

/// \cond INTERNAL
void
Test::MyClass::_iceD_shutdown(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_supportsCompress(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    bool ret = this->supportsCompress(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opVoid(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->opVoid(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opByte(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::uint8_t iceP_p1;
    ::std::uint8_t iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    ::std::uint8_t iceP_p3;
    ::std::uint8_t ret = this->opByte(iceP_p1, iceP_p2, iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opBool(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    bool iceP_p1;
    bool iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    bool iceP_p3;
    bool ret = this->opBool(iceP_p1, iceP_p2, iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opShortIntLong(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::int16_t iceP_p1;
    ::std::int32_t iceP_p2;
    ::std::int64_t iceP_p3;
    istr->readAll(iceP_p1, iceP_p2, iceP_p3);
    istr->endEncapsulation();
    ::std::int16_t iceP_p4;
    ::std::int32_t iceP_p5;
    ::std::int64_t iceP_p6;
    ::std::int64_t ret = this->opShortIntLong(iceP_p1, iceP_p2, iceP_p3, iceP_p4, iceP_p5, iceP_p6, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p4, iceP_p5, iceP_p6, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opFloatDouble(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    float iceP_p1;
    double iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    float iceP_p3;
    double iceP_p4;
    double ret = this->opFloatDouble(iceP_p1, iceP_p2, iceP_p3, iceP_p4, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, iceP_p4, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opString(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::string iceP_p1;
    ::std::string iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    ::std::string iceP_p3;
    ::std::string ret = this->opString(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opMyEnum(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    MyEnum iceP_p1;
    istr->readAll(iceP_p1);
    istr->endEncapsulation();
    MyEnum iceP_p2;
    MyEnum ret = this->opMyEnum(iceP_p1, iceP_p2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opMyClass(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::optional<MyClassPrx> iceP_p1;
    istr->readAll(iceP_p1);
    istr->endEncapsulation();
    ::std::optional<MyClassPrx> iceP_p2;
    ::std::optional<MyClassPrx> iceP_p3;
    ::std::optional<MyClassPrx> ret = this->opMyClass(::std::move(iceP_p1), iceP_p2, iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p2, iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opStruct(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    Structure iceP_p1;
    Structure iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    Structure iceP_p3;
    Structure ret = this->opStruct(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opByteS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ByteS iceP_p1;
    ByteS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    ByteS iceP_p3;
    ByteS ret = this->opByteS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opBoolS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    BoolS iceP_p1;
    BoolS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    BoolS iceP_p3;
    BoolS ret = this->opBoolS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opShortIntLongS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ShortS iceP_p1;
    IntS iceP_p2;
    LongS iceP_p3;
    istr->readAll(iceP_p1, iceP_p2, iceP_p3);
    istr->endEncapsulation();
    ShortS iceP_p4;
    IntS iceP_p5;
    LongS iceP_p6;
    LongS ret = this->opShortIntLongS(::std::move(iceP_p1), ::std::move(iceP_p2), ::std::move(iceP_p3), iceP_p4, iceP_p5, iceP_p6, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p4, iceP_p5, iceP_p6, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opFloatDoubleS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    FloatS iceP_p1;
    DoubleS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    FloatS iceP_p3;
    DoubleS iceP_p4;
    DoubleS ret = this->opFloatDoubleS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, iceP_p4, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, iceP_p4, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opStringS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    StringS iceP_p1;
    StringS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    StringS iceP_p3;
    StringS ret = this->opStringS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opByteSS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ByteSS iceP_p1;
    ByteSS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    ByteSS iceP_p3;
    ByteSS ret = this->opByteSS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opBoolSS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    BoolSS iceP_p1;
    BoolSS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    BoolSS iceP_p3;
    BoolSS ret = this->opBoolSS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opShortIntLongSS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ShortSS iceP_p1;
    IntSS iceP_p2;
    LongSS iceP_p3;
    istr->readAll(iceP_p1, iceP_p2, iceP_p3);
    istr->endEncapsulation();
    ShortSS iceP_p4;
    IntSS iceP_p5;
    LongSS iceP_p6;
    LongSS ret = this->opShortIntLongSS(::std::move(iceP_p1), ::std::move(iceP_p2), ::std::move(iceP_p3), iceP_p4, iceP_p5, iceP_p6, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p4, iceP_p5, iceP_p6, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opFloatDoubleSS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    FloatSS iceP_p1;
    DoubleSS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    FloatSS iceP_p3;
    DoubleSS iceP_p4;
    DoubleSS ret = this->opFloatDoubleSS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, iceP_p4, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, iceP_p4, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opStringSS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    StringSS iceP_p1;
    StringSS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    StringSS iceP_p3;
    StringSS ret = this->opStringSS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opStringSSS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    StringSSS iceP_p1;
    StringSSS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    StringSSS iceP_p3;
    StringSSS ret = this->opStringSSS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opByteBoolD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ByteBoolD iceP_p1;
    ByteBoolD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    ByteBoolD iceP_p3;
    ByteBoolD ret = this->opByteBoolD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opShortIntD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ShortIntD iceP_p1;
    ShortIntD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    ShortIntD iceP_p3;
    ShortIntD ret = this->opShortIntD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opLongFloatD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    LongFloatD iceP_p1;
    LongFloatD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    LongFloatD iceP_p3;
    LongFloatD ret = this->opLongFloatD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opStringStringD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    StringStringD iceP_p1;
    StringStringD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    StringStringD iceP_p3;
    StringStringD ret = this->opStringStringD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opStringMyEnumD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    StringMyEnumD iceP_p1;
    StringMyEnumD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    StringMyEnumD iceP_p3;
    StringMyEnumD ret = this->opStringMyEnumD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opMyEnumStringD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    MyEnumStringD iceP_p1;
    MyEnumStringD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    MyEnumStringD iceP_p3;
    MyEnumStringD ret = this->opMyEnumStringD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opMyStructMyEnumD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    MyStructMyEnumD iceP_p1;
    MyStructMyEnumD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    MyStructMyEnumD iceP_p3;
    MyStructMyEnumD ret = this->opMyStructMyEnumD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opByteBoolDS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ByteBoolDS iceP_p1;
    ByteBoolDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    ByteBoolDS iceP_p3;
    ByteBoolDS ret = this->opByteBoolDS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opShortIntDS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ShortIntDS iceP_p1;
    ShortIntDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    ShortIntDS iceP_p3;
    ShortIntDS ret = this->opShortIntDS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opLongFloatDS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    LongFloatDS iceP_p1;
    LongFloatDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    LongFloatDS iceP_p3;
    LongFloatDS ret = this->opLongFloatDS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opStringStringDS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    StringStringDS iceP_p1;
    StringStringDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    StringStringDS iceP_p3;
    StringStringDS ret = this->opStringStringDS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opStringMyEnumDS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    StringMyEnumDS iceP_p1;
    StringMyEnumDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    StringMyEnumDS iceP_p3;
    StringMyEnumDS ret = this->opStringMyEnumDS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opMyEnumStringDS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    MyEnumStringDS iceP_p1;
    MyEnumStringDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    MyEnumStringDS iceP_p3;
    MyEnumStringDS ret = this->opMyEnumStringDS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opMyStructMyEnumDS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    MyStructMyEnumDS iceP_p1;
    MyStructMyEnumDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    MyStructMyEnumDS iceP_p3;
    MyStructMyEnumDS ret = this->opMyStructMyEnumDS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opByteByteSD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ByteByteSD iceP_p1;
    ByteByteSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    ByteByteSD iceP_p3;
    ByteByteSD ret = this->opByteByteSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opBoolBoolSD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    BoolBoolSD iceP_p1;
    BoolBoolSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    BoolBoolSD iceP_p3;
    BoolBoolSD ret = this->opBoolBoolSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opShortShortSD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ShortShortSD iceP_p1;
    ShortShortSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    ShortShortSD iceP_p3;
    ShortShortSD ret = this->opShortShortSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opIntIntSD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    IntIntSD iceP_p1;
    IntIntSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    IntIntSD iceP_p3;
    IntIntSD ret = this->opIntIntSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opLongLongSD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    LongLongSD iceP_p1;
    LongLongSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    LongLongSD iceP_p3;
    LongLongSD ret = this->opLongLongSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opStringFloatSD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    StringFloatSD iceP_p1;
    StringFloatSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    StringFloatSD iceP_p3;
    StringFloatSD ret = this->opStringFloatSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opStringDoubleSD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    StringDoubleSD iceP_p1;
    StringDoubleSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    StringDoubleSD iceP_p3;
    StringDoubleSD ret = this->opStringDoubleSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opStringStringSD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    StringStringSD iceP_p1;
    StringStringSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    StringStringSD iceP_p3;
    StringStringSD ret = this->opStringStringSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opMyEnumMyEnumSD(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    MyEnumMyEnumSD iceP_p1;
    MyEnumMyEnumSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->endEncapsulation();
    MyEnumMyEnumSD iceP_p3;
    MyEnumMyEnumSD ret = this->opMyEnumMyEnumSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opIntS(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    IntS iceP_s;
    istr->readAll(iceP_s);
    istr->endEncapsulation();
    IntS ret = this->opIntS(::std::move(iceP_s), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opByteSOneway(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ByteS iceP_s;
    istr->readAll(iceP_s);
    istr->endEncapsulation();
    this->opByteSOneway(::std::move(iceP_s), request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opByteSOnewayCallCount(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::int32_t ret = this->opByteSOnewayCallCount(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opContext(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::Ice::Context ret = this->opContext(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opIdempotent(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->opIdempotent(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opByte1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::uint8_t iceP_opByte1;
    istr->readAll(iceP_opByte1);
    istr->endEncapsulation();
    ::std::uint8_t ret = this->opByte1(iceP_opByte1, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opShort1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::int16_t iceP_opShort1;
    istr->readAll(iceP_opShort1);
    istr->endEncapsulation();
    ::std::int16_t ret = this->opShort1(iceP_opShort1, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opInt1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::int32_t iceP_opInt1;
    istr->readAll(iceP_opInt1);
    istr->endEncapsulation();
    ::std::int32_t ret = this->opInt1(iceP_opInt1, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opLong1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::int64_t iceP_opLong1;
    istr->readAll(iceP_opLong1);
    istr->endEncapsulation();
    ::std::int64_t ret = this->opLong1(iceP_opLong1, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opFloat1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    float iceP_opFloat1;
    istr->readAll(iceP_opFloat1);
    istr->endEncapsulation();
    float ret = this->opFloat1(iceP_opFloat1, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opDouble1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    double iceP_opDouble1;
    istr->readAll(iceP_opDouble1);
    istr->endEncapsulation();
    double ret = this->opDouble1(iceP_opDouble1, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opString1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::string iceP_opString1;
    istr->readAll(iceP_opString1);
    istr->endEncapsulation();
    ::std::string ret = this->opString1(::std::move(iceP_opString1), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opStringS1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    StringS iceP_opStringS1;
    istr->readAll(iceP_opStringS1);
    istr->endEncapsulation();
    StringS ret = this->opStringS1(::std::move(iceP_opStringS1), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opByteBoolD1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ByteBoolD iceP_opByteBoolD1;
    istr->readAll(iceP_opByteBoolD1);
    istr->endEncapsulation();
    ByteBoolD ret = this->opByteBoolD1(::std::move(iceP_opByteBoolD1), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opStringS2(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    StringS iceP_stringS;
    istr->readAll(iceP_stringS);
    istr->endEncapsulation();
    StringS ret = this->opStringS2(::std::move(iceP_stringS), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opByteBoolD2(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ByteBoolD iceP_byteBoolD;
    istr->readAll(iceP_byteBoolD);
    istr->endEncapsulation();
    ByteBoolD ret = this->opByteBoolD2(::std::move(iceP_byteBoolD), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opStringLiterals(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    StringS ret = this->opStringLiterals(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

Test::MyClass::OpMStruct1MarshaledResult::OpMStruct1MarshaledResult(const Structure& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ::Ice::OutputStream* ostr = &_ostr;
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
void
Test::MyClass::_iceD_opMStruct1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    sendResponse(::Ice::OutgoingResponse{this->opMStruct1(request.current()).outputStream(), request.current()});
}
/// \endcond

Test::MyClass::OpMStruct2MarshaledResult::OpMStruct2MarshaledResult(const Structure& ret, const Structure& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ::Ice::OutputStream* ostr = &_ostr;
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(iceP_p2, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
void
Test::MyClass::_iceD_opMStruct2(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    Structure iceP_p1;
    istr->readAll(iceP_p1);
    istr->endEncapsulation();
    sendResponse(::Ice::OutgoingResponse{this->opMStruct2(::std::move(iceP_p1), request.current()).outputStream(), request.current()});
}
/// \endcond

Test::MyClass::OpMSeq1MarshaledResult::OpMSeq1MarshaledResult(const StringS& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ::Ice::OutputStream* ostr = &_ostr;
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
void
Test::MyClass::_iceD_opMSeq1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    sendResponse(::Ice::OutgoingResponse{this->opMSeq1(request.current()).outputStream(), request.current()});
}
/// \endcond

Test::MyClass::OpMSeq2MarshaledResult::OpMSeq2MarshaledResult(const StringS& ret, const StringS& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ::Ice::OutputStream* ostr = &_ostr;
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(iceP_p2, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
void
Test::MyClass::_iceD_opMSeq2(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    StringS iceP_p1;
    istr->readAll(iceP_p1);
    istr->endEncapsulation();
    sendResponse(::Ice::OutgoingResponse{this->opMSeq2(::std::move(iceP_p1), request.current()).outputStream(), request.current()});
}
/// \endcond

Test::MyClass::OpMDict1MarshaledResult::OpMDict1MarshaledResult(const StringStringD& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ::Ice::OutputStream* ostr = &_ostr;
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
void
Test::MyClass::_iceD_opMDict1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    sendResponse(::Ice::OutgoingResponse{this->opMDict1(request.current()).outputStream(), request.current()});
}
/// \endcond

Test::MyClass::OpMDict2MarshaledResult::OpMDict2MarshaledResult(const StringStringD& ret, const StringStringD& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ::Ice::OutputStream* ostr = &_ostr;
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(iceP_p2, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
void
Test::MyClass::_iceD_opMDict2(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    StringStringD iceP_p1;
    istr->readAll(iceP_p1);
    istr->endEncapsulation();
    sendResponse(::Ice::OutgoingResponse{this->opMDict2(::std::move(iceP_p1), request.current()).outputStream(), request.current()});
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"ice_id", "ice_ids", "ice_isA", "ice_ping", "opBool", "opBoolBoolSD", "opBoolS", "opBoolSS", "opByte", "opByte1", "opByteBoolD", "opByteBoolD1", "opByteBoolD2", "opByteBoolDS", "opByteByteSD", "opByteS", "opByteSOneway", "opByteSOnewayCallCount", "opByteSS", "opContext", "opDouble1", "opFloat1", "opFloatDouble", "opFloatDoubleS", "opFloatDoubleSS", "opIdempotent", "opInt1", "opIntIntSD", "opIntS", "opLong1", "opLongFloatD", "opLongFloatDS", "opLongLongSD", "opMDict1", "opMDict2", "opMSeq1", "opMSeq2", "opMStruct1", "opMStruct2", "opMyClass", "opMyEnum", "opMyEnumMyEnumSD", "opMyEnumStringD", "opMyEnumStringDS", "opMyStructMyEnumD", "opMyStructMyEnumDS", "opShort1", "opShortIntD", "opShortIntDS", "opShortIntLong", "opShortIntLongS", "opShortIntLongSS", "opShortShortSD", "opString", "opString1", "opStringDoubleSD", "opStringFloatSD", "opStringLiterals", "opStringMyEnumD", "opStringMyEnumDS", "opStringS", "opStringS1", "opStringS2", "opStringSS", "opStringSSS", "opStringStringD", "opStringStringDS", "opStringStringSD", "opStruct", "opVoid", "shutdown", "supportsCompress"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 72, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_opBool(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_opBoolBoolSD(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_opBoolS(request, ::std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_opBoolSS(request, ::std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_opByte(request, ::std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_opByte1(request, ::std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_opByteBoolD(request, ::std::move(sendResponse));
            break;
        }
        case 11:
        {
            _iceD_opByteBoolD1(request, ::std::move(sendResponse));
            break;
        }
        case 12:
        {
            _iceD_opByteBoolD2(request, ::std::move(sendResponse));
            break;
        }
        case 13:
        {
            _iceD_opByteBoolDS(request, ::std::move(sendResponse));
            break;
        }
        case 14:
        {
            _iceD_opByteByteSD(request, ::std::move(sendResponse));
            break;
        }
        case 15:
        {
            _iceD_opByteS(request, ::std::move(sendResponse));
            break;
        }
        case 16:
        {
            _iceD_opByteSOneway(request, ::std::move(sendResponse));
            break;
        }
        case 17:
        {
            _iceD_opByteSOnewayCallCount(request, ::std::move(sendResponse));
            break;
        }
        case 18:
        {
            _iceD_opByteSS(request, ::std::move(sendResponse));
            break;
        }
        case 19:
        {
            _iceD_opContext(request, ::std::move(sendResponse));
            break;
        }
        case 20:
        {
            _iceD_opDouble1(request, ::std::move(sendResponse));
            break;
        }
        case 21:
        {
            _iceD_opFloat1(request, ::std::move(sendResponse));
            break;
        }
        case 22:
        {
            _iceD_opFloatDouble(request, ::std::move(sendResponse));
            break;
        }
        case 23:
        {
            _iceD_opFloatDoubleS(request, ::std::move(sendResponse));
            break;
        }
        case 24:
        {
            _iceD_opFloatDoubleSS(request, ::std::move(sendResponse));
            break;
        }
        case 25:
        {
            _iceD_opIdempotent(request, ::std::move(sendResponse));
            break;
        }
        case 26:
        {
            _iceD_opInt1(request, ::std::move(sendResponse));
            break;
        }
        case 27:
        {
            _iceD_opIntIntSD(request, ::std::move(sendResponse));
            break;
        }
        case 28:
        {
            _iceD_opIntS(request, ::std::move(sendResponse));
            break;
        }
        case 29:
        {
            _iceD_opLong1(request, ::std::move(sendResponse));
            break;
        }
        case 30:
        {
            _iceD_opLongFloatD(request, ::std::move(sendResponse));
            break;
        }
        case 31:
        {
            _iceD_opLongFloatDS(request, ::std::move(sendResponse));
            break;
        }
        case 32:
        {
            _iceD_opLongLongSD(request, ::std::move(sendResponse));
            break;
        }
        case 33:
        {
            _iceD_opMDict1(request, ::std::move(sendResponse));
            break;
        }
        case 34:
        {
            _iceD_opMDict2(request, ::std::move(sendResponse));
            break;
        }
        case 35:
        {
            _iceD_opMSeq1(request, ::std::move(sendResponse));
            break;
        }
        case 36:
        {
            _iceD_opMSeq2(request, ::std::move(sendResponse));
            break;
        }
        case 37:
        {
            _iceD_opMStruct1(request, ::std::move(sendResponse));
            break;
        }
        case 38:
        {
            _iceD_opMStruct2(request, ::std::move(sendResponse));
            break;
        }
        case 39:
        {
            _iceD_opMyClass(request, ::std::move(sendResponse));
            break;
        }
        case 40:
        {
            _iceD_opMyEnum(request, ::std::move(sendResponse));
            break;
        }
        case 41:
        {
            _iceD_opMyEnumMyEnumSD(request, ::std::move(sendResponse));
            break;
        }
        case 42:
        {
            _iceD_opMyEnumStringD(request, ::std::move(sendResponse));
            break;
        }
        case 43:
        {
            _iceD_opMyEnumStringDS(request, ::std::move(sendResponse));
            break;
        }
        case 44:
        {
            _iceD_opMyStructMyEnumD(request, ::std::move(sendResponse));
            break;
        }
        case 45:
        {
            _iceD_opMyStructMyEnumDS(request, ::std::move(sendResponse));
            break;
        }
        case 46:
        {
            _iceD_opShort1(request, ::std::move(sendResponse));
            break;
        }
        case 47:
        {
            _iceD_opShortIntD(request, ::std::move(sendResponse));
            break;
        }
        case 48:
        {
            _iceD_opShortIntDS(request, ::std::move(sendResponse));
            break;
        }
        case 49:
        {
            _iceD_opShortIntLong(request, ::std::move(sendResponse));
            break;
        }
        case 50:
        {
            _iceD_opShortIntLongS(request, ::std::move(sendResponse));
            break;
        }
        case 51:
        {
            _iceD_opShortIntLongSS(request, ::std::move(sendResponse));
            break;
        }
        case 52:
        {
            _iceD_opShortShortSD(request, ::std::move(sendResponse));
            break;
        }
        case 53:
        {
            _iceD_opString(request, ::std::move(sendResponse));
            break;
        }
        case 54:
        {
            _iceD_opString1(request, ::std::move(sendResponse));
            break;
        }
        case 55:
        {
            _iceD_opStringDoubleSD(request, ::std::move(sendResponse));
            break;
        }
        case 56:
        {
            _iceD_opStringFloatSD(request, ::std::move(sendResponse));
            break;
        }
        case 57:
        {
            _iceD_opStringLiterals(request, ::std::move(sendResponse));
            break;
        }
        case 58:
        {
            _iceD_opStringMyEnumD(request, ::std::move(sendResponse));
            break;
        }
        case 59:
        {
            _iceD_opStringMyEnumDS(request, ::std::move(sendResponse));
            break;
        }
        case 60:
        {
            _iceD_opStringS(request, ::std::move(sendResponse));
            break;
        }
        case 61:
        {
            _iceD_opStringS1(request, ::std::move(sendResponse));
            break;
        }
        case 62:
        {
            _iceD_opStringS2(request, ::std::move(sendResponse));
            break;
        }
        case 63:
        {
            _iceD_opStringSS(request, ::std::move(sendResponse));
            break;
        }
        case 64:
        {
            _iceD_opStringSSS(request, ::std::move(sendResponse));
            break;
        }
        case 65:
        {
            _iceD_opStringStringD(request, ::std::move(sendResponse));
            break;
        }
        case 66:
        {
            _iceD_opStringStringDS(request, ::std::move(sendResponse));
            break;
        }
        case 67:
        {
            _iceD_opStringStringSD(request, ::std::move(sendResponse));
            break;
        }
        case 68:
        {
            _iceD_opStruct(request, ::std::move(sendResponse));
            break;
        }
        case 69:
        {
            _iceD_opVoid(request, ::std::move(sendResponse));
            break;
        }
        case 70:
        {
            _iceD_shutdown(request, ::std::move(sendResponse));
            break;
        }
        case 71:
        {
            _iceD_supportsCompress(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Test::MyDerivedClass::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::MyClass", "::Test::MyDerivedClass"};
    return allTypeIds;
}

::std::string
Test::MyDerivedClass::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MyDerivedClass::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MyDerivedClass";
    return typeId;
}

/// \cond INTERNAL
void
Test::MyDerivedClass::_iceD_opDerived(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->opDerived(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyDerivedClass::_iceD_opMyClass1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    MyClass1Ptr iceP_opMyClass1;
    istr->readAll(iceP_opMyClass1);
    istr->readPendingValues();
    istr->endEncapsulation();
    MyClass1Ptr ret = this->opMyClass1(::std::move(iceP_opMyClass1), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyDerivedClass::_iceD_opMyStruct1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    MyStruct1 iceP_opMyStruct1;
    istr->readAll(iceP_opMyStruct1);
    istr->endEncapsulation();
    MyStruct1 ret = this->opMyStruct1(::std::move(iceP_opMyStruct1), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyDerivedClass::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"ice_id", "ice_ids", "ice_isA", "ice_ping", "opBool", "opBoolBoolSD", "opBoolS", "opBoolSS", "opByte", "opByte1", "opByteBoolD", "opByteBoolD1", "opByteBoolD2", "opByteBoolDS", "opByteByteSD", "opByteS", "opByteSOneway", "opByteSOnewayCallCount", "opByteSS", "opContext", "opDerived", "opDouble1", "opFloat1", "opFloatDouble", "opFloatDoubleS", "opFloatDoubleSS", "opIdempotent", "opInt1", "opIntIntSD", "opIntS", "opLong1", "opLongFloatD", "opLongFloatDS", "opLongLongSD", "opMDict1", "opMDict2", "opMSeq1", "opMSeq2", "opMStruct1", "opMStruct2", "opMyClass", "opMyClass1", "opMyEnum", "opMyEnumMyEnumSD", "opMyEnumStringD", "opMyEnumStringDS", "opMyStruct1", "opMyStructMyEnumD", "opMyStructMyEnumDS", "opShort1", "opShortIntD", "opShortIntDS", "opShortIntLong", "opShortIntLongS", "opShortIntLongSS", "opShortShortSD", "opString", "opString1", "opStringDoubleSD", "opStringFloatSD", "opStringLiterals", "opStringMyEnumD", "opStringMyEnumDS", "opStringS", "opStringS1", "opStringS2", "opStringSS", "opStringSSS", "opStringStringD", "opStringStringDS", "opStringStringSD", "opStruct", "opVoid", "shutdown", "supportsCompress"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 75, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_opBool(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_opBoolBoolSD(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_opBoolS(request, ::std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_opBoolSS(request, ::std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_opByte(request, ::std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_opByte1(request, ::std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_opByteBoolD(request, ::std::move(sendResponse));
            break;
        }
        case 11:
        {
            _iceD_opByteBoolD1(request, ::std::move(sendResponse));
            break;
        }
        case 12:
        {
            _iceD_opByteBoolD2(request, ::std::move(sendResponse));
            break;
        }
        case 13:
        {
            _iceD_opByteBoolDS(request, ::std::move(sendResponse));
            break;
        }
        case 14:
        {
            _iceD_opByteByteSD(request, ::std::move(sendResponse));
            break;
        }
        case 15:
        {
            _iceD_opByteS(request, ::std::move(sendResponse));
            break;
        }
        case 16:
        {
            _iceD_opByteSOneway(request, ::std::move(sendResponse));
            break;
        }
        case 17:
        {
            _iceD_opByteSOnewayCallCount(request, ::std::move(sendResponse));
            break;
        }
        case 18:
        {
            _iceD_opByteSS(request, ::std::move(sendResponse));
            break;
        }
        case 19:
        {
            _iceD_opContext(request, ::std::move(sendResponse));
            break;
        }
        case 20:
        {
            _iceD_opDerived(request, ::std::move(sendResponse));
            break;
        }
        case 21:
        {
            _iceD_opDouble1(request, ::std::move(sendResponse));
            break;
        }
        case 22:
        {
            _iceD_opFloat1(request, ::std::move(sendResponse));
            break;
        }
        case 23:
        {
            _iceD_opFloatDouble(request, ::std::move(sendResponse));
            break;
        }
        case 24:
        {
            _iceD_opFloatDoubleS(request, ::std::move(sendResponse));
            break;
        }
        case 25:
        {
            _iceD_opFloatDoubleSS(request, ::std::move(sendResponse));
            break;
        }
        case 26:
        {
            _iceD_opIdempotent(request, ::std::move(sendResponse));
            break;
        }
        case 27:
        {
            _iceD_opInt1(request, ::std::move(sendResponse));
            break;
        }
        case 28:
        {
            _iceD_opIntIntSD(request, ::std::move(sendResponse));
            break;
        }
        case 29:
        {
            _iceD_opIntS(request, ::std::move(sendResponse));
            break;
        }
        case 30:
        {
            _iceD_opLong1(request, ::std::move(sendResponse));
            break;
        }
        case 31:
        {
            _iceD_opLongFloatD(request, ::std::move(sendResponse));
            break;
        }
        case 32:
        {
            _iceD_opLongFloatDS(request, ::std::move(sendResponse));
            break;
        }
        case 33:
        {
            _iceD_opLongLongSD(request, ::std::move(sendResponse));
            break;
        }
        case 34:
        {
            _iceD_opMDict1(request, ::std::move(sendResponse));
            break;
        }
        case 35:
        {
            _iceD_opMDict2(request, ::std::move(sendResponse));
            break;
        }
        case 36:
        {
            _iceD_opMSeq1(request, ::std::move(sendResponse));
            break;
        }
        case 37:
        {
            _iceD_opMSeq2(request, ::std::move(sendResponse));
            break;
        }
        case 38:
        {
            _iceD_opMStruct1(request, ::std::move(sendResponse));
            break;
        }
        case 39:
        {
            _iceD_opMStruct2(request, ::std::move(sendResponse));
            break;
        }
        case 40:
        {
            _iceD_opMyClass(request, ::std::move(sendResponse));
            break;
        }
        case 41:
        {
            _iceD_opMyClass1(request, ::std::move(sendResponse));
            break;
        }
        case 42:
        {
            _iceD_opMyEnum(request, ::std::move(sendResponse));
            break;
        }
        case 43:
        {
            _iceD_opMyEnumMyEnumSD(request, ::std::move(sendResponse));
            break;
        }
        case 44:
        {
            _iceD_opMyEnumStringD(request, ::std::move(sendResponse));
            break;
        }
        case 45:
        {
            _iceD_opMyEnumStringDS(request, ::std::move(sendResponse));
            break;
        }
        case 46:
        {
            _iceD_opMyStruct1(request, ::std::move(sendResponse));
            break;
        }
        case 47:
        {
            _iceD_opMyStructMyEnumD(request, ::std::move(sendResponse));
            break;
        }
        case 48:
        {
            _iceD_opMyStructMyEnumDS(request, ::std::move(sendResponse));
            break;
        }
        case 49:
        {
            _iceD_opShort1(request, ::std::move(sendResponse));
            break;
        }
        case 50:
        {
            _iceD_opShortIntD(request, ::std::move(sendResponse));
            break;
        }
        case 51:
        {
            _iceD_opShortIntDS(request, ::std::move(sendResponse));
            break;
        }
        case 52:
        {
            _iceD_opShortIntLong(request, ::std::move(sendResponse));
            break;
        }
        case 53:
        {
            _iceD_opShortIntLongS(request, ::std::move(sendResponse));
            break;
        }
        case 54:
        {
            _iceD_opShortIntLongSS(request, ::std::move(sendResponse));
            break;
        }
        case 55:
        {
            _iceD_opShortShortSD(request, ::std::move(sendResponse));
            break;
        }
        case 56:
        {
            _iceD_opString(request, ::std::move(sendResponse));
            break;
        }
        case 57:
        {
            _iceD_opString1(request, ::std::move(sendResponse));
            break;
        }
        case 58:
        {
            _iceD_opStringDoubleSD(request, ::std::move(sendResponse));
            break;
        }
        case 59:
        {
            _iceD_opStringFloatSD(request, ::std::move(sendResponse));
            break;
        }
        case 60:
        {
            _iceD_opStringLiterals(request, ::std::move(sendResponse));
            break;
        }
        case 61:
        {
            _iceD_opStringMyEnumD(request, ::std::move(sendResponse));
            break;
        }
        case 62:
        {
            _iceD_opStringMyEnumDS(request, ::std::move(sendResponse));
            break;
        }
        case 63:
        {
            _iceD_opStringS(request, ::std::move(sendResponse));
            break;
        }
        case 64:
        {
            _iceD_opStringS1(request, ::std::move(sendResponse));
            break;
        }
        case 65:
        {
            _iceD_opStringS2(request, ::std::move(sendResponse));
            break;
        }
        case 66:
        {
            _iceD_opStringSS(request, ::std::move(sendResponse));
            break;
        }
        case 67:
        {
            _iceD_opStringSSS(request, ::std::move(sendResponse));
            break;
        }
        case 68:
        {
            _iceD_opStringStringD(request, ::std::move(sendResponse));
            break;
        }
        case 69:
        {
            _iceD_opStringStringDS(request, ::std::move(sendResponse));
            break;
        }
        case 70:
        {
            _iceD_opStringStringSD(request, ::std::move(sendResponse));
            break;
        }
        case 71:
        {
            _iceD_opStruct(request, ::std::move(sendResponse));
            break;
        }
        case 72:
        {
            _iceD_opVoid(request, ::std::move(sendResponse));
            break;
        }
        case 73:
        {
            _iceD_shutdown(request, ::std::move(sendResponse));
            break;
        }
        case 74:
        {
            _iceD_supportsCompress(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        }
    }
}
/// \endcond

::std::vector<::std::string>
Test2::MyDerivedClass::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test2::MyDerivedClass", "::Test::MyClass"};
    return allTypeIds;
}

::std::string
Test2::MyDerivedClass::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test2::MyDerivedClass::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test2::MyDerivedClass";
    return typeId;
}

/// \cond INTERNAL
void
Test2::MyDerivedClass::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"ice_id", "ice_ids", "ice_isA", "ice_ping", "opBool", "opBoolBoolSD", "opBoolS", "opBoolSS", "opByte", "opByte1", "opByteBoolD", "opByteBoolD1", "opByteBoolD2", "opByteBoolDS", "opByteByteSD", "opByteS", "opByteSOneway", "opByteSOnewayCallCount", "opByteSS", "opContext", "opDouble1", "opFloat1", "opFloatDouble", "opFloatDoubleS", "opFloatDoubleSS", "opIdempotent", "opInt1", "opIntIntSD", "opIntS", "opLong1", "opLongFloatD", "opLongFloatDS", "opLongLongSD", "opMDict1", "opMDict2", "opMSeq1", "opMSeq2", "opMStruct1", "opMStruct2", "opMyClass", "opMyEnum", "opMyEnumMyEnumSD", "opMyEnumStringD", "opMyEnumStringDS", "opMyStructMyEnumD", "opMyStructMyEnumDS", "opShort1", "opShortIntD", "opShortIntDS", "opShortIntLong", "opShortIntLongS", "opShortIntLongSS", "opShortShortSD", "opString", "opString1", "opStringDoubleSD", "opStringFloatSD", "opStringLiterals", "opStringMyEnumD", "opStringMyEnumDS", "opStringS", "opStringS1", "opStringS2", "opStringSS", "opStringSSS", "opStringStringD", "opStringStringDS", "opStringStringSD", "opStruct", "opVoid", "shutdown", "supportsCompress"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 72, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_opBool(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_opBoolBoolSD(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_opBoolS(request, ::std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_opBoolSS(request, ::std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_opByte(request, ::std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_opByte1(request, ::std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_opByteBoolD(request, ::std::move(sendResponse));
            break;
        }
        case 11:
        {
            _iceD_opByteBoolD1(request, ::std::move(sendResponse));
            break;
        }
        case 12:
        {
            _iceD_opByteBoolD2(request, ::std::move(sendResponse));
            break;
        }
        case 13:
        {
            _iceD_opByteBoolDS(request, ::std::move(sendResponse));
            break;
        }
        case 14:
        {
            _iceD_opByteByteSD(request, ::std::move(sendResponse));
            break;
        }
        case 15:
        {
            _iceD_opByteS(request, ::std::move(sendResponse));
            break;
        }
        case 16:
        {
            _iceD_opByteSOneway(request, ::std::move(sendResponse));
            break;
        }
        case 17:
        {
            _iceD_opByteSOnewayCallCount(request, ::std::move(sendResponse));
            break;
        }
        case 18:
        {
            _iceD_opByteSS(request, ::std::move(sendResponse));
            break;
        }
        case 19:
        {
            _iceD_opContext(request, ::std::move(sendResponse));
            break;
        }
        case 20:
        {
            _iceD_opDouble1(request, ::std::move(sendResponse));
            break;
        }
        case 21:
        {
            _iceD_opFloat1(request, ::std::move(sendResponse));
            break;
        }
        case 22:
        {
            _iceD_opFloatDouble(request, ::std::move(sendResponse));
            break;
        }
        case 23:
        {
            _iceD_opFloatDoubleS(request, ::std::move(sendResponse));
            break;
        }
        case 24:
        {
            _iceD_opFloatDoubleSS(request, ::std::move(sendResponse));
            break;
        }
        case 25:
        {
            _iceD_opIdempotent(request, ::std::move(sendResponse));
            break;
        }
        case 26:
        {
            _iceD_opInt1(request, ::std::move(sendResponse));
            break;
        }
        case 27:
        {
            _iceD_opIntIntSD(request, ::std::move(sendResponse));
            break;
        }
        case 28:
        {
            _iceD_opIntS(request, ::std::move(sendResponse));
            break;
        }
        case 29:
        {
            _iceD_opLong1(request, ::std::move(sendResponse));
            break;
        }
        case 30:
        {
            _iceD_opLongFloatD(request, ::std::move(sendResponse));
            break;
        }
        case 31:
        {
            _iceD_opLongFloatDS(request, ::std::move(sendResponse));
            break;
        }
        case 32:
        {
            _iceD_opLongLongSD(request, ::std::move(sendResponse));
            break;
        }
        case 33:
        {
            _iceD_opMDict1(request, ::std::move(sendResponse));
            break;
        }
        case 34:
        {
            _iceD_opMDict2(request, ::std::move(sendResponse));
            break;
        }
        case 35:
        {
            _iceD_opMSeq1(request, ::std::move(sendResponse));
            break;
        }
        case 36:
        {
            _iceD_opMSeq2(request, ::std::move(sendResponse));
            break;
        }
        case 37:
        {
            _iceD_opMStruct1(request, ::std::move(sendResponse));
            break;
        }
        case 38:
        {
            _iceD_opMStruct2(request, ::std::move(sendResponse));
            break;
        }
        case 39:
        {
            _iceD_opMyClass(request, ::std::move(sendResponse));
            break;
        }
        case 40:
        {
            _iceD_opMyEnum(request, ::std::move(sendResponse));
            break;
        }
        case 41:
        {
            _iceD_opMyEnumMyEnumSD(request, ::std::move(sendResponse));
            break;
        }
        case 42:
        {
            _iceD_opMyEnumStringD(request, ::std::move(sendResponse));
            break;
        }
        case 43:
        {
            _iceD_opMyEnumStringDS(request, ::std::move(sendResponse));
            break;
        }
        case 44:
        {
            _iceD_opMyStructMyEnumD(request, ::std::move(sendResponse));
            break;
        }
        case 45:
        {
            _iceD_opMyStructMyEnumDS(request, ::std::move(sendResponse));
            break;
        }
        case 46:
        {
            _iceD_opShort1(request, ::std::move(sendResponse));
            break;
        }
        case 47:
        {
            _iceD_opShortIntD(request, ::std::move(sendResponse));
            break;
        }
        case 48:
        {
            _iceD_opShortIntDS(request, ::std::move(sendResponse));
            break;
        }
        case 49:
        {
            _iceD_opShortIntLong(request, ::std::move(sendResponse));
            break;
        }
        case 50:
        {
            _iceD_opShortIntLongS(request, ::std::move(sendResponse));
            break;
        }
        case 51:
        {
            _iceD_opShortIntLongSS(request, ::std::move(sendResponse));
            break;
        }
        case 52:
        {
            _iceD_opShortShortSD(request, ::std::move(sendResponse));
            break;
        }
        case 53:
        {
            _iceD_opString(request, ::std::move(sendResponse));
            break;
        }
        case 54:
        {
            _iceD_opString1(request, ::std::move(sendResponse));
            break;
        }
        case 55:
        {
            _iceD_opStringDoubleSD(request, ::std::move(sendResponse));
            break;
        }
        case 56:
        {
            _iceD_opStringFloatSD(request, ::std::move(sendResponse));
            break;
        }
        case 57:
        {
            _iceD_opStringLiterals(request, ::std::move(sendResponse));
            break;
        }
        case 58:
        {
            _iceD_opStringMyEnumD(request, ::std::move(sendResponse));
            break;
        }
        case 59:
        {
            _iceD_opStringMyEnumDS(request, ::std::move(sendResponse));
            break;
        }
        case 60:
        {
            _iceD_opStringS(request, ::std::move(sendResponse));
            break;
        }
        case 61:
        {
            _iceD_opStringS1(request, ::std::move(sendResponse));
            break;
        }
        case 62:
        {
            _iceD_opStringS2(request, ::std::move(sendResponse));
            break;
        }
        case 63:
        {
            _iceD_opStringSS(request, ::std::move(sendResponse));
            break;
        }
        case 64:
        {
            _iceD_opStringSSS(request, ::std::move(sendResponse));
            break;
        }
        case 65:
        {
            _iceD_opStringStringD(request, ::std::move(sendResponse));
            break;
        }
        case 66:
        {
            _iceD_opStringStringDS(request, ::std::move(sendResponse));
            break;
        }
        case 67:
        {
            _iceD_opStringStringSD(request, ::std::move(sendResponse));
            break;
        }
        case 68:
        {
            _iceD_opStruct(request, ::std::move(sendResponse));
            break;
        }
        case 69:
        {
            _iceD_opVoid(request, ::std::move(sendResponse));
            break;
        }
        case 70:
        {
            _iceD_shutdown(request, ::std::move(sendResponse));
            break;
        }
        case 71:
        {
            _iceD_supportsCompress(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        }
    }
}
/// \endcond
