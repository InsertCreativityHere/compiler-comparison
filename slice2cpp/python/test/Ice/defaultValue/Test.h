//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{


namespace Nested
{


}
class Base;
class Derived;
class ClassNoDefaultsBase;
class ClassNoDefaults;

}

namespace Test
{

enum class Color : unsigned char
{
    red,
    green,
    blue
};

namespace Nested
{

enum class Color : unsigned char
{
    red,
    green,
    blue
};

}

struct Struct1
{
    bool boolFalse = false;
    bool boolTrue = true;
    ::Ice::Byte b = 254;
    short s = 16000;
    int i = 3;
    long long int l = 4LL;
    float f = 5.1F;
    double d = 6.2;
    ::std::string str = "foo \\ \"bar\n \r\n\t\v\f\a\b\? \a \a";
    ::Test::Color c1 = ::Test::Color::red;
    ::Test::Color c2 = ::Test::Color::green;
    ::Test::Color c3 = ::Test::Color::blue;
    ::Test::Nested::Color nc1 = ::Test::Nested::Color::red;
    ::Test::Nested::Color nc2 = ::Test::Nested::Color::green;
    ::Test::Nested::Color nc3 = ::Test::Nested::Color::blue;
    ::std::string noDefault;
    int zeroI = 0;
    long long int zeroL = 0LL;
    float zeroF = 0.0F;
    float zeroDotF = 0.0F;
    double zeroD = 0;
    double zeroDotD = 0;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const bool&, const ::Ice::Byte&, const short&, const int&, const long long int&, const float&, const double&, const ::std::string&, const ::Test::Color&, const ::Test::Color&, const ::Test::Color&, const ::Test::Nested::Color&, const ::Test::Nested::Color&, const ::Test::Nested::Color&, const ::std::string&, const int&, const long long int&, const float&, const float&, const double&, const double&> ice_tuple() const
    {
        return std::tie(boolFalse, boolTrue, b, s, i, l, f, d, str, c1, c2, c3, nc1, nc2, nc3, noDefault, zeroI, zeroL, zeroF, zeroDotF, zeroD, zeroDotD);
    }
};

constexpr bool ConstBool = true;

constexpr ::Ice::Byte ConstByte = 254;

constexpr short ConstShort = 16000;

constexpr int ConstInt = 3;

constexpr long long int ConstLong = 4LL;

constexpr float ConstFloat = 5.1F;

constexpr double ConstDouble = 6.2;

const ::std::string ConstString = "foo \\ \"bar\n \r\n\t\v\f\a\b\? \a \a";

constexpr Color ConstColor1 = ::Test::Color::red;

constexpr Color ConstColor2 = ::Test::Color::green;

constexpr Color ConstColor3 = ::Test::Color::blue;

constexpr ::Test::Nested::Color ConstNestedColor1 = ::Test::Nested::Color::red;

constexpr ::Test::Nested::Color ConstNestedColor2 = ::Test::Nested::Color::green;

constexpr ::Test::Nested::Color ConstNestedColor3 = ::Test::Nested::Color::blue;

constexpr int ConstZeroI = 0;

constexpr long long int ConstZeroL = 0LL;

constexpr float ConstZeroF = 0.0F;

constexpr float ConstZeroDotF = 0.0F;

constexpr double ConstZeroD = 0;

constexpr double ConstZeroDotD = 0;

struct Struct2
{
    bool boolTrue = ::Test::ConstBool;
    ::Ice::Byte b = ::Test::ConstByte;
    short s = ::Test::ConstShort;
    int i = ::Test::ConstInt;
    long long int l = ::Test::ConstLong;
    float f = ::Test::ConstFloat;
    double d = ::Test::ConstDouble;
    ::std::string str = ::Test::ConstString;
    ::Test::Color c1 = ::Test::ConstColor1;
    ::Test::Color c2 = ::Test::ConstColor2;
    ::Test::Color c3 = ::Test::ConstColor3;
    ::Test::Nested::Color nc1 = ::Test::ConstNestedColor1;
    ::Test::Nested::Color nc2 = ::Test::ConstNestedColor2;
    ::Test::Nested::Color nc3 = ::Test::ConstNestedColor3;
    int zeroI = ::Test::ConstZeroI;
    long long int zeroL = ::Test::ConstZeroL;
    float zeroF = ::Test::ConstZeroF;
    float zeroDotF = ::Test::ConstZeroDotF;
    double zeroD = ::Test::ConstZeroD;
    double zeroDotD = ::Test::ConstZeroDotD;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const ::Ice::Byte&, const short&, const int&, const long long int&, const float&, const double&, const ::std::string&, const ::Test::Color&, const ::Test::Color&, const ::Test::Color&, const ::Test::Nested::Color&, const ::Test::Nested::Color&, const ::Test::Nested::Color&, const int&, const long long int&, const float&, const float&, const double&, const double&> ice_tuple() const
    {
        return std::tie(boolTrue, b, s, i, l, f, d, str, c1, c2, c3, nc1, nc2, nc3, zeroI, zeroL, zeroF, zeroDotF, zeroD, zeroDotD);
    }
};

class BaseEx : public ::Ice::UserExceptionHelper<BaseEx, ::Ice::UserException>
{
public:

    virtual ~BaseEx();

    BaseEx(const BaseEx&) = default;

    BaseEx() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    BaseEx(bool boolFalse, bool boolTrue, ::Ice::Byte b, short s, int i, long long int l, float f, double d, const ::std::string& str, const ::std::string& noDefault, int zeroI, long long int zeroL, float zeroF, float zeroDotF, double zeroD, double zeroDotD) :
        boolFalse(boolFalse),
        boolTrue(boolTrue),
        b(b),
        s(s),
        i(i),
        l(l),
        f(f),
        d(d),
        str(str),
        noDefault(noDefault),
        zeroI(zeroI),
        zeroL(zeroL),
        zeroF(zeroF),
        zeroDotF(zeroDotF),
        zeroD(zeroD),
        zeroDotD(zeroDotD)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const bool&, const ::Ice::Byte&, const short&, const int&, const long long int&, const float&, const double&, const ::std::string&, const ::std::string&, const int&, const long long int&, const float&, const float&, const double&, const double&> ice_tuple() const
    {
        return std::tie(boolFalse, boolTrue, b, s, i, l, f, d, str, noDefault, zeroI, zeroL, zeroF, zeroDotF, zeroD, zeroDotD);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    bool boolFalse = false;
    bool boolTrue = true;
    ::Ice::Byte b = 1;
    short s = 2;
    int i = 3;
    long long int l = 4LL;
    float f = 5.1F;
    double d = 6.2;
    ::std::string str = "foo \\ \"bar\n \r\n\t\v\f\a\b\? \a \a";
    ::std::string noDefault;
    int zeroI = 0;
    long long int zeroL = 0LL;
    float zeroF = 0.0F;
    float zeroDotF = 0.0F;
    double zeroD = 0;
    double zeroDotD = 0;
};

/// \cond INTERNAL
static BaseEx _iceS_BaseEx_init;
/// \endcond

class DerivedEx : public ::Ice::UserExceptionHelper<DerivedEx, BaseEx>
{
public:

    virtual ~DerivedEx();

    DerivedEx(const DerivedEx&) = default;

    DerivedEx() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    DerivedEx(bool boolFalse, bool boolTrue, ::Ice::Byte b, short s, int i, long long int l, float f, double d, const ::std::string& str, const ::std::string& noDefault, int zeroI, long long int zeroL, float zeroF, float zeroDotF, double zeroD, double zeroDotD, Color c1, Color c2, Color c3, ::Test::Nested::Color nc1, ::Test::Nested::Color nc2, ::Test::Nested::Color nc3) :
        ::Ice::UserExceptionHelper<DerivedEx, BaseEx>(boolFalse, boolTrue, b, s, i, l, f, d, str, noDefault, zeroI, zeroL, zeroF, zeroDotF, zeroD, zeroDotD),
        c1(c1),
        c2(c2),
        c3(c3),
        nc1(nc1),
        nc2(nc2),
        nc3(nc3)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const bool&, const ::Ice::Byte&, const short&, const int&, const long long int&, const float&, const double&, const ::std::string&, const ::std::string&, const int&, const long long int&, const float&, const float&, const double&, const double&, const ::Test::Color&, const ::Test::Color&, const ::Test::Color&, const ::Test::Nested::Color&, const ::Test::Nested::Color&, const ::Test::Nested::Color&> ice_tuple() const
    {
        return std::tie(boolFalse, boolTrue, b, s, i, l, f, d, str, noDefault, zeroI, zeroL, zeroF, zeroDotF, zeroD, zeroDotD, c1, c2, c3, nc1, nc2, nc3);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::Color c1 = ::Test::ConstColor1;
    ::Test::Color c2 = ::Test::ConstColor2;
    ::Test::Color c3 = ::Test::ConstColor3;
    ::Test::Nested::Color nc1 = ::Test::ConstNestedColor1;
    ::Test::Nested::Color nc2 = ::Test::ConstNestedColor2;
    ::Test::Nested::Color nc3 = ::Test::ConstNestedColor3;
};

using ByteSeq = ::std::vector<::Ice::Byte>;

using IntSeq = ::std::vector<int>;

using IntStringDict = ::std::map<int, ::std::string>;

struct InnerStruct
{
    int a;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(a);
    }
};

struct StructNoDefaults
{
    bool bo;
    ::Ice::Byte b;
    short s;
    int i;
    long long int l;
    float f;
    double d;
    ::std::string str;
    ::Test::Color c1;
    ::Test::ByteSeq bs;
    ::Test::IntSeq iseq;
    ::Test::IntStringDict dict;
    ::Test::InnerStruct st;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const ::Ice::Byte&, const short&, const int&, const long long int&, const float&, const double&, const ::std::string&, const ::Test::Color&, const ::Test::ByteSeq&, const ::Test::IntSeq&, const ::Test::IntStringDict&, const ::Test::InnerStruct&> ice_tuple() const
    {
        return std::tie(bo, b, s, i, l, f, d, str, c1, bs, iseq, dict, st);
    }
};

class ExceptionNoDefaultsBase : public ::Ice::UserExceptionHelper<ExceptionNoDefaultsBase, ::Ice::UserException>
{
public:

    virtual ~ExceptionNoDefaultsBase();

    ExceptionNoDefaultsBase(const ExceptionNoDefaultsBase&) = default;

    ExceptionNoDefaultsBase() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    ExceptionNoDefaultsBase(const ::std::string& str, Color c1, const ByteSeq& bs) :
        str(str),
        c1(c1),
        bs(bs)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::Test::Color&, const ::Test::ByteSeq&> ice_tuple() const
    {
        return std::tie(str, c1, bs);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string str;
    ::Test::Color c1;
    ::Test::ByteSeq bs;
};

class ExceptionNoDefaults : public ::Ice::UserExceptionHelper<ExceptionNoDefaults, ExceptionNoDefaultsBase>
{
public:

    virtual ~ExceptionNoDefaults();

    ExceptionNoDefaults(const ExceptionNoDefaults&) = default;

    ExceptionNoDefaults() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    ExceptionNoDefaults(const ::std::string& str, Color c1, const ByteSeq& bs, const InnerStruct& st, const IntStringDict& dict) :
        ::Ice::UserExceptionHelper<ExceptionNoDefaults, ExceptionNoDefaultsBase>(str, c1, bs),
        st(st),
        dict(dict)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::Test::Color&, const ::Test::ByteSeq&, const ::Test::InnerStruct&, const ::Test::IntStringDict&> ice_tuple() const
    {
        return std::tie(str, c1, bs, st, dict);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::InnerStruct st;
    ::Test::IntStringDict dict;
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test
{

class Base : public ::Ice::ValueHelper<Base, ::Ice::Value>
{
public:

    virtual ~Base();

    Base() = default;

    Base(const Base&) = default;
    Base(Base&&) = default;
    Base& operator=(const Base&) = default;
    Base& operator=(Base&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Base(bool boolFalse, bool boolTrue, ::Ice::Byte b, short s, int i, long long int l, float f, double d, const ::std::string& str, const ::std::string& noDefault, int zeroI, long long int zeroL, float zeroF, float zeroDotF, double zeroD, double zeroDotD) :
        boolFalse(boolFalse),
        boolTrue(boolTrue),
        b(b),
        s(s),
        i(i),
        l(l),
        f(f),
        d(d),
        str(str),
        noDefault(noDefault),
        zeroI(zeroI),
        zeroL(zeroL),
        zeroF(zeroF),
        zeroDotF(zeroDotF),
        zeroD(zeroD),
        zeroDotD(zeroDotD)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const bool&, const ::Ice::Byte&, const short&, const int&, const long long int&, const float&, const double&, const ::std::string&, const ::std::string&, const int&, const long long int&, const float&, const float&, const double&, const double&> ice_tuple() const
    {
        return std::tie(boolFalse, boolTrue, b, s, i, l, f, d, str, noDefault, zeroI, zeroL, zeroF, zeroDotF, zeroD, zeroDotD);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    bool boolFalse = false;
    bool boolTrue = true;
    ::Ice::Byte b = 1;
    short s = 2;
    int i = 3;
    long long int l = 4LL;
    float f = 5.1F;
    double d = 6.2;
    ::std::string str = "foo \\ \"bar\n \r\n\t\v\f\a\b\? \a \a";
    ::std::string noDefault;
    int zeroI = 0;
    long long int zeroL = 0LL;
    float zeroF = 0.0F;
    float zeroDotF = 0.0F;
    double zeroD = 0;
    double zeroDotD = 0;
};

/// \cond INTERNAL
static Base _iceS_Base_init;
/// \endcond

class Derived : public ::Ice::ValueHelper<Derived, Base>
{
public:

    virtual ~Derived();

    Derived() = default;

    Derived(const Derived&) = default;
    Derived(Derived&&) = default;
    Derived& operator=(const Derived&) = default;
    Derived& operator=(Derived&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Derived(bool boolFalse, bool boolTrue, ::Ice::Byte b, short s, int i, long long int l, float f, double d, const ::std::string& str, const ::std::string& noDefault, int zeroI, long long int zeroL, float zeroF, float zeroDotF, double zeroD, double zeroDotD, ::Test::Color c1, ::Test::Color c2, ::Test::Color c3, ::Test::Nested::Color nc1, ::Test::Nested::Color nc2, ::Test::Nested::Color nc3) :
        Ice::ValueHelper<Derived, Base>(boolFalse, boolTrue, b, s, i, l, f, d, str, noDefault, zeroI, zeroL, zeroF, zeroDotF, zeroD, zeroDotD),
        c1(c1),
        c2(c2),
        c3(c3),
        nc1(nc1),
        nc2(nc2),
        nc3(nc3)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const bool&, const ::Ice::Byte&, const short&, const int&, const long long int&, const float&, const double&, const ::std::string&, const ::std::string&, const int&, const long long int&, const float&, const float&, const double&, const double&, const ::Test::Color&, const ::Test::Color&, const ::Test::Color&, const ::Test::Nested::Color&, const ::Test::Nested::Color&, const ::Test::Nested::Color&> ice_tuple() const
    {
        return std::tie(boolFalse, boolTrue, b, s, i, l, f, d, str, noDefault, zeroI, zeroL, zeroF, zeroDotF, zeroD, zeroDotD, c1, c2, c3, nc1, nc2, nc3);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::Color c1 = ::Test::Color::red;
    ::Test::Color c2 = ::Test::Color::green;
    ::Test::Color c3 = ::Test::Color::blue;
    ::Test::Nested::Color nc1 = ::Test::Nested::Color::red;
    ::Test::Nested::Color nc2 = ::Test::Nested::Color::green;
    ::Test::Nested::Color nc3 = ::Test::Nested::Color::blue;
};

class ClassNoDefaultsBase : public ::Ice::ValueHelper<ClassNoDefaultsBase, ::Ice::Value>
{
public:

    virtual ~ClassNoDefaultsBase();

    ClassNoDefaultsBase() = default;

    ClassNoDefaultsBase(const ClassNoDefaultsBase&) = default;
    ClassNoDefaultsBase(ClassNoDefaultsBase&&) = default;
    ClassNoDefaultsBase& operator=(const ClassNoDefaultsBase&) = default;
    ClassNoDefaultsBase& operator=(ClassNoDefaultsBase&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    ClassNoDefaultsBase(const ::std::string& str, ::Test::Color c1, const ::Test::ByteSeq& bs) :
        str(str),
        c1(c1),
        bs(bs)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::Test::Color&, const ::Test::ByteSeq&> ice_tuple() const
    {
        return std::tie(str, c1, bs);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string str;
    ::Test::Color c1;
    ::Test::ByteSeq bs;
};

class ClassNoDefaults : public ::Ice::ValueHelper<ClassNoDefaults, ClassNoDefaultsBase>
{
public:

    virtual ~ClassNoDefaults();

    ClassNoDefaults() = default;

    ClassNoDefaults(const ClassNoDefaults&) = default;
    ClassNoDefaults(ClassNoDefaults&&) = default;
    ClassNoDefaults& operator=(const ClassNoDefaults&) = default;
    ClassNoDefaults& operator=(ClassNoDefaults&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    ClassNoDefaults(const ::std::string& str, ::Test::Color c1, const ::Test::ByteSeq& bs, const ::Test::InnerStruct& st, const ::Test::IntStringDict& dict) :
        Ice::ValueHelper<ClassNoDefaults, ClassNoDefaultsBase>(str, c1, bs),
        st(st),
        dict(dict)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::Test::Color&, const ::Test::ByteSeq&, const ::Test::InnerStruct&, const ::Test::IntStringDict&> ice_tuple() const
    {
        return std::tie(str, c1, bs, st, dict);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::InnerStruct st;
    ::Test::IntStringDict dict;
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Test::Color>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Test::Nested::Color>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::Test::Struct1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 73;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::Struct1, S>
{
    static void read(S* istr, ::Test::Struct1& v)
    {
        istr->readAll(v.boolFalse, v.boolTrue, v.b, v.s, v.i, v.l, v.f, v.d, v.str, v.c1, v.c2, v.c3, v.nc1, v.nc2, v.nc3, v.noDefault, v.zeroI, v.zeroL, v.zeroF, v.zeroDotF, v.zeroD, v.zeroDotD);
    }
};

template<>
struct StreamableTraits<::Test::Struct2>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 71;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::Struct2, S>
{
    static void read(S* istr, ::Test::Struct2& v)
    {
        istr->readAll(v.boolTrue, v.b, v.s, v.i, v.l, v.f, v.d, v.str, v.c1, v.c2, v.c3, v.nc1, v.nc2, v.nc3, v.zeroI, v.zeroL, v.zeroF, v.zeroDotF, v.zeroD, v.zeroDotD);
    }
};

template<typename S>
struct StreamReader<::Test::Base, S>
{
    static void read(S* istr, ::Test::Base& v)
    {
        istr->readAll(v.boolFalse, v.boolTrue, v.b, v.s, v.i, v.l, v.f, v.d, v.str, v.noDefault, v.zeroI, v.zeroL, v.zeroF, v.zeroDotF, v.zeroD, v.zeroDotD);
    }
};

template<typename S>
struct StreamWriter<::Test::Derived, S>
{
    static void write(S* ostr, const ::Test::Derived& v)
    {
        ostr->writeAll(v.c1, v.c2, v.c3, v.nc1, v.nc2, v.nc3);
    }
};

template<typename S>
struct StreamReader<::Test::Derived, S>
{
    static void read(S* istr, ::Test::Derived& v)
    {
        istr->readAll(v.c1, v.c2, v.c3, v.nc1, v.nc2, v.nc3);
    }
};

template<typename S>
struct StreamReader<::Test::BaseEx, S>
{
    static void read(S* istr, ::Test::BaseEx& v)
    {
        istr->readAll(v.boolFalse, v.boolTrue, v.b, v.s, v.i, v.l, v.f, v.d, v.str, v.noDefault, v.zeroI, v.zeroL, v.zeroF, v.zeroDotF, v.zeroD, v.zeroDotD);
    }
};

template<typename S>
struct StreamWriter<::Test::DerivedEx, S>
{
    static void write(S* ostr, const ::Test::DerivedEx& v)
    {
        ostr->writeAll(v.c1, v.c2, v.c3, v.nc1, v.nc2, v.nc3);
    }
};

template<typename S>
struct StreamReader<::Test::DerivedEx, S>
{
    static void read(S* istr, ::Test::DerivedEx& v)
    {
        istr->readAll(v.c1, v.c2, v.c3, v.nc1, v.nc2, v.nc3);
    }
};

template<>
struct StreamableTraits<::Test::InnerStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Test::InnerStruct, S>
{
    static void read(S* istr, ::Test::InnerStruct& v)
    {
        istr->readAll(v.a);
    }
};

template<>
struct StreamableTraits<::Test::StructNoDefaults>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 37;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::StructNoDefaults, S>
{
    static void read(S* istr, ::Test::StructNoDefaults& v)
    {
        istr->readAll(v.bo, v.b, v.s, v.i, v.l, v.f, v.d, v.str, v.c1, v.bs, v.iseq, v.dict, v.st);
    }
};

template<typename S>
struct StreamReader<::Test::ExceptionNoDefaultsBase, S>
{
    static void read(S* istr, ::Test::ExceptionNoDefaultsBase& v)
    {
        istr->readAll(v.str, v.c1, v.bs);
    }
};

template<typename S>
struct StreamWriter<::Test::ExceptionNoDefaults, S>
{
    static void write(S* ostr, const ::Test::ExceptionNoDefaults& v)
    {
        ostr->writeAll(v.st, v.dict);
    }
};

template<typename S>
struct StreamReader<::Test::ExceptionNoDefaults, S>
{
    static void read(S* istr, ::Test::ExceptionNoDefaults& v)
    {
        istr->readAll(v.st, v.dict);
    }
};

template<typename S>
struct StreamReader<::Test::ClassNoDefaultsBase, S>
{
    static void read(S* istr, ::Test::ClassNoDefaultsBase& v)
    {
        istr->readAll(v.str, v.c1, v.bs);
    }
};

template<typename S>
struct StreamWriter<::Test::ClassNoDefaults, S>
{
    static void write(S* ostr, const ::Test::ClassNoDefaults& v)
    {
        ostr->writeAll(v.st, v.dict);
    }
};

template<typename S>
struct StreamReader<::Test::ClassNoDefaults, S>
{
    static void read(S* istr, ::Test::ClassNoDefaults& v)
    {
        istr->readAll(v.st, v.dict);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using BasePtr = ::std::shared_ptr<Base>;

using DerivedPtr = ::std::shared_ptr<Derived>;

using ClassNoDefaultsBasePtr = ::std::shared_ptr<ClassNoDefaultsBase>;

using ClassNoDefaultsPtr = ::std::shared_ptr<ClassNoDefaults>;

}
/// \endcond

#else // C++98 mapping

namespace Test
{

namespace Nested
{

}

class Base;
using BasePtr = ::Ice::SharedPtr<Base>;
/// \cond INTERNAL
void _icePatchValuePtr(BasePtr&, const ::Ice::ValuePtr&);
/// \endcond

class Derived;
using DerivedPtr = ::Ice::SharedPtr<Derived>;
/// \cond INTERNAL
void _icePatchValuePtr(DerivedPtr&, const ::Ice::ValuePtr&);
/// \endcond

class ClassNoDefaultsBase;
using ClassNoDefaultsBasePtr = ::Ice::SharedPtr<ClassNoDefaultsBase>;
/// \cond INTERNAL
void _icePatchValuePtr(ClassNoDefaultsBasePtr&, const ::Ice::ValuePtr&);
/// \endcond

class ClassNoDefaults;
using ClassNoDefaultsPtr = ::Ice::SharedPtr<ClassNoDefaults>;
/// \cond INTERNAL
void _icePatchValuePtr(ClassNoDefaultsPtr&, const ::Ice::ValuePtr&);
/// \endcond

}

namespace Test
{

enum Color
{
    red,
    green,
    blue
};

namespace Nested
{

enum Color
{
    red,
    green,
    blue
};

}

struct Struct1
{
    /** Default constructor that assigns default values to members as specified in the Slice definition. */
    Struct1() :
        boolFalse(false),
        boolTrue(true),
        b(254),
        s(16000),
        i(3),
        l(ICE_INT64(4)),
        f(5.1F),
        d(6.2),
        str("foo \\ \"bar\n \r\n\t\v\f\a\b\? \a \a"),
        c1(red),
        c2(green),
        c3(blue),
        nc1(::Test::Nested::red),
        nc2(::Test::Nested::green),
        nc3(::Test::Nested::blue),
        zeroI(0),
        zeroL(ICE_INT64(0)),
        zeroF(0.0F),
        zeroDotF(0.0F),
        zeroD(0),
        zeroDotD(0)
    {
    }
    
    Struct1(bool boolFalse, bool boolTrue, ::Ice::Byte b, ::Ice::Short s, ::Ice::Int i, ::Ice::Long l, ::Ice::Float f, ::Ice::Double d, const ::std::string& str, Color c1, Color c2, Color c3, ::Test::Nested::Color nc1, ::Test::Nested::Color nc2, ::Test::Nested::Color nc3, const ::std::string& noDefault, ::Ice::Int zeroI, ::Ice::Long zeroL, ::Ice::Float zeroF, ::Ice::Float zeroDotF, ::Ice::Double zeroD, ::Ice::Double zeroDotD) :
        boolFalse(boolFalse),
        boolTrue(boolTrue),
        b(b),
        s(s),
        i(i),
        l(l),
        f(f),
        d(d),
        str(str),
        c1(c1),
        c2(c2),
        c3(c3),
        nc1(nc1),
        nc2(nc2),
        nc3(nc3),
        noDefault(noDefault),
        zeroI(zeroI),
        zeroL(zeroL),
        zeroF(zeroF),
        zeroDotF(zeroDotF),
        zeroD(zeroD),
        zeroDotD(zeroDotD)
    {
    }
    

    bool boolFalse;
    bool boolTrue;
    ::Ice::Byte b;
    ::Ice::Short s;
    ::Ice::Int i;
    ::Ice::Long l;
    ::Ice::Float f;
    ::Ice::Double d;
    ::std::string str;
    ::Test::Color c1;
    ::Test::Color c2;
    ::Test::Color c3;
    ::Test::Nested::Color nc1;
    ::Test::Nested::Color nc2;
    ::Test::Nested::Color nc3;
    ::std::string noDefault;
    ::Ice::Int zeroI;
    ::Ice::Long zeroL;
    ::Ice::Float zeroF;
    ::Ice::Float zeroDotF;
    ::Ice::Double zeroD;
    ::Ice::Double zeroDotD;
};

const bool ConstBool = true;

const ::Ice::Byte ConstByte = 254;

const ::Ice::Short ConstShort = 16000;

const ::Ice::Int ConstInt = 3;

const ::Ice::Long ConstLong = ICE_INT64(4);

const ::Ice::Float ConstFloat = 5.1F;

const ::Ice::Double ConstDouble = 6.2;

const ::std::string ConstString = "foo \\ \"bar\n \r\n\t\v\f\a\b\? \a \a";

const Color ConstColor1 = red;

const Color ConstColor2 = green;

const Color ConstColor3 = blue;

const ::Test::Nested::Color ConstNestedColor1 = ::Test::Nested::red;

const ::Test::Nested::Color ConstNestedColor2 = ::Test::Nested::green;

const ::Test::Nested::Color ConstNestedColor3 = ::Test::Nested::blue;

const ::Ice::Int ConstZeroI = 0;

const ::Ice::Long ConstZeroL = ICE_INT64(0);

const ::Ice::Float ConstZeroF = 0.0F;

const ::Ice::Float ConstZeroDotF = 0.0F;

const ::Ice::Double ConstZeroD = 0;

const ::Ice::Double ConstZeroDotD = 0;

struct Struct2
{
    /** Default constructor that assigns default values to members as specified in the Slice definition. */
    Struct2() :
        boolTrue(ConstBool),
        b(ConstByte),
        s(ConstShort),
        i(ConstInt),
        l(ConstLong),
        f(ConstFloat),
        d(ConstDouble),
        str(ConstString),
        c1(ConstColor1),
        c2(ConstColor2),
        c3(ConstColor3),
        nc1(ConstNestedColor1),
        nc2(ConstNestedColor2),
        nc3(ConstNestedColor3),
        zeroI(ConstZeroI),
        zeroL(ConstZeroL),
        zeroF(ConstZeroF),
        zeroDotF(ConstZeroDotF),
        zeroD(ConstZeroD),
        zeroDotD(ConstZeroDotD)
    {
    }
    
    Struct2(bool boolTrue, ::Ice::Byte b, ::Ice::Short s, ::Ice::Int i, ::Ice::Long l, ::Ice::Float f, ::Ice::Double d, const ::std::string& str, Color c1, Color c2, Color c3, ::Test::Nested::Color nc1, ::Test::Nested::Color nc2, ::Test::Nested::Color nc3, ::Ice::Int zeroI, ::Ice::Long zeroL, ::Ice::Float zeroF, ::Ice::Float zeroDotF, ::Ice::Double zeroD, ::Ice::Double zeroDotD) :
        boolTrue(boolTrue),
        b(b),
        s(s),
        i(i),
        l(l),
        f(f),
        d(d),
        str(str),
        c1(c1),
        c2(c2),
        c3(c3),
        nc1(nc1),
        nc2(nc2),
        nc3(nc3),
        zeroI(zeroI),
        zeroL(zeroL),
        zeroF(zeroF),
        zeroDotF(zeroDotF),
        zeroD(zeroD),
        zeroDotD(zeroDotD)
    {
    }
    

    bool boolTrue;
    ::Ice::Byte b;
    ::Ice::Short s;
    ::Ice::Int i;
    ::Ice::Long l;
    ::Ice::Float f;
    ::Ice::Double d;
    ::std::string str;
    ::Test::Color c1;
    ::Test::Color c2;
    ::Test::Color c3;
    ::Test::Nested::Color nc1;
    ::Test::Nested::Color nc2;
    ::Test::Nested::Color nc3;
    ::Ice::Int zeroI;
    ::Ice::Long zeroL;
    ::Ice::Float zeroF;
    ::Ice::Float zeroDotF;
    ::Ice::Double zeroD;
    ::Ice::Double zeroDotD;
};

class BaseEx : public ::Ice::UserException
{
public:

    /** Default constructor that assigns default values to members as specified in the Slice definition. */
    BaseEx();
    /**
     * One-shot constructor to initialize all data members.
     */
    BaseEx(bool boolFalse, bool boolTrue, ::Ice::Byte b, ::Ice::Short s, ::Ice::Int i, ::Ice::Long l, ::Ice::Float f, ::Ice::Double d, const ::std::string& str, const ::std::string& noDefault, ::Ice::Int zeroI, ::Ice::Long zeroL, ::Ice::Float zeroF, ::Ice::Float zeroDotF, ::Ice::Double zeroD, ::Ice::Double zeroDotD);
    BaseEx(const BaseEx&) = default;
    virtual ~BaseEx();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual BaseEx* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    bool boolFalse;
    bool boolTrue;
    ::Ice::Byte b;
    ::Ice::Short s;
    ::Ice::Int i;
    ::Ice::Long l;
    ::Ice::Float f;
    ::Ice::Double d;
    ::std::string str;
    ::std::string noDefault;
    ::Ice::Int zeroI;
    ::Ice::Long zeroL;
    ::Ice::Float zeroF;
    ::Ice::Float zeroDotF;
    ::Ice::Double zeroD;
    ::Ice::Double zeroDotD;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static BaseEx _iceS_BaseEx_init;
/// \endcond

class DerivedEx : public BaseEx
{
public:

    /** Default constructor that assigns default values to members as specified in the Slice definition. */
    DerivedEx();
    /**
     * One-shot constructor to initialize all data members.
     */
    DerivedEx(bool boolFalse, bool boolTrue, ::Ice::Byte b, ::Ice::Short s, ::Ice::Int i, ::Ice::Long l, ::Ice::Float f, ::Ice::Double d, const ::std::string& str, const ::std::string& noDefault, ::Ice::Int zeroI, ::Ice::Long zeroL, ::Ice::Float zeroF, ::Ice::Float zeroDotF, ::Ice::Double zeroD, ::Ice::Double zeroDotD, Color c1, Color c2, Color c3, ::Test::Nested::Color nc1, ::Test::Nested::Color nc2, ::Test::Nested::Color nc3);
    DerivedEx(const DerivedEx&) = default;
    virtual ~DerivedEx();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual DerivedEx* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Test::Color c1;
    ::Test::Color c2;
    ::Test::Color c3;
    ::Test::Nested::Color nc1;
    ::Test::Nested::Color nc2;
    ::Test::Nested::Color nc3;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

typedef ::std::vector< ::Ice::Byte> ByteSeq;

typedef ::std::vector< ::Ice::Int> IntSeq;

typedef ::std::map< ::Ice::Int, ::std::string> IntStringDict;

struct InnerStruct
{
    ::Ice::Int a;

    bool operator==(const InnerStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(a != rhs_.a)
        {
            return false;
        }
        return true;
    }

    bool operator<(const InnerStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(a < rhs_.a)
        {
            return true;
        }
        else if(rhs_.a < a)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const InnerStruct& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const InnerStruct& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const InnerStruct& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const InnerStruct& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct StructNoDefaults
{
    bool bo;
    ::Ice::Byte b;
    ::Ice::Short s;
    ::Ice::Int i;
    ::Ice::Long l;
    ::Ice::Float f;
    ::Ice::Double d;
    ::std::string str;
    ::Test::Color c1;
    ::Test::ByteSeq bs;
    ::Test::IntSeq iseq;
    ::Test::IntStringDict dict;
    ::Test::InnerStruct st;
};

class ExceptionNoDefaultsBase : public ::Ice::UserException
{
public:

    ExceptionNoDefaultsBase() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    ExceptionNoDefaultsBase(const ::std::string& str, Color c1, const ByteSeq& bs);
    ExceptionNoDefaultsBase(const ExceptionNoDefaultsBase&) = default;
    virtual ~ExceptionNoDefaultsBase();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual ExceptionNoDefaultsBase* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string str;
    ::Test::Color c1;
    ::Test::ByteSeq bs;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class ExceptionNoDefaults : public ExceptionNoDefaultsBase
{
public:

    ExceptionNoDefaults() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    ExceptionNoDefaults(const ::std::string& str, Color c1, const ByteSeq& bs, const InnerStruct& st, const IntStringDict& dict);
    ExceptionNoDefaults(const ExceptionNoDefaults&) = default;
    virtual ~ExceptionNoDefaults();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual ExceptionNoDefaults* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Test::InnerStruct st;
    ::Test::IntStringDict dict;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

}

namespace Test
{

class Base : public ::Ice::Value
{
public:

    typedef BasePtr PointerType;

    virtual ~Base();

    /** Default constructor that assigns default values to members as specified in the Slice definition. */
    Base() :
        boolFalse(false),
        boolTrue(true),
        b(1),
        s(2),
        i(3),
        l(ICE_INT64(4)),
        f(5.1F),
        d(6.2),
        str("foo \\ \"bar\n \r\n\t\v\f\a\b\? \a \a"),
        zeroI(0),
        zeroL(ICE_INT64(0)),
        zeroF(0.0F),
        zeroDotF(0.0F),
        zeroD(0),
        zeroDotD(0)
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    Base(bool boolFalse, bool boolTrue, ::Ice::Byte b, ::Ice::Short s, ::Ice::Int i, ::Ice::Long l, ::Ice::Float f, ::Ice::Double d, const ::std::string& str, const ::std::string& noDefault, ::Ice::Int zeroI, ::Ice::Long zeroL, ::Ice::Float zeroF, ::Ice::Float zeroDotF, ::Ice::Double zeroD, ::Ice::Double zeroDotD) :
        boolFalse(boolFalse),
        boolTrue(boolTrue),
        b(b),
        s(s),
        i(i),
        l(l),
        f(f),
        d(d),
        str(str),
        noDefault(noDefault),
        zeroI(zeroI),
        zeroL(zeroL),
        zeroF(zeroF),
        zeroDotF(zeroDotF),
        zeroD(zeroD),
        zeroDotD(zeroDotD)
    {
    }
    Base(const Base&) = default;
    Base& operator=(const Base&) = default;

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ValuePtr ice_clone() const;

    /**
     * Obtains the Slice type ID of the most-derived class implemented by this instance.
     * @return The type ID.
     */
    virtual ::std::string ice_id() const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return The type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    bool boolFalse;
    bool boolTrue;
    ::Ice::Byte b;
    ::Ice::Short s;
    ::Ice::Int i;
    ::Ice::Long l;
    ::Ice::Float f;
    ::Ice::Double d;
    ::std::string str;
    ::std::string noDefault;
    ::Ice::Int zeroI;
    ::Ice::Long zeroL;
    ::Ice::Float zeroF;
    ::Ice::Float zeroDotF;
    ::Ice::Double zeroD;
    ::Ice::Double zeroDotD;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_Base_init = ::Test::Base::ice_factory();
/// \endcond

class Derived : public Base
{
public:

    typedef DerivedPtr PointerType;

    virtual ~Derived();

    /** Default constructor that assigns default values to members as specified in the Slice definition. */
    Derived() :
        c1(red),
        c2(green),
        c3(blue),
        nc1(::Test::Nested::red),
        nc2(::Test::Nested::green),
        nc3(::Test::Nested::blue)
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    Derived(bool boolFalse, bool boolTrue, ::Ice::Byte b, ::Ice::Short s, ::Ice::Int i, ::Ice::Long l, ::Ice::Float f, ::Ice::Double d, const ::std::string& str, const ::std::string& noDefault, ::Ice::Int zeroI, ::Ice::Long zeroL, ::Ice::Float zeroF, ::Ice::Float zeroDotF, ::Ice::Double zeroD, ::Ice::Double zeroDotD, ::Test::Color c1, ::Test::Color c2, ::Test::Color c3, ::Test::Nested::Color nc1, ::Test::Nested::Color nc2, ::Test::Nested::Color nc3) :
        ::Test::Base(boolFalse, boolTrue, b, s, i, l, f, d, str, noDefault, zeroI, zeroL, zeroF, zeroDotF, zeroD, zeroDotD),
        c1(c1),
        c2(c2),
        c3(c3),
        nc1(nc1),
        nc2(nc2),
        nc3(nc3)
    {
    }
    Derived(const Derived&) = default;
    Derived& operator=(const Derived&) = default;

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ValuePtr ice_clone() const;

    /**
     * Obtains the Slice type ID of the most-derived class implemented by this instance.
     * @return The type ID.
     */
    virtual ::std::string ice_id() const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return The type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Test::Color c1;
    ::Test::Color c2;
    ::Test::Color c3;
    ::Test::Nested::Color nc1;
    ::Test::Nested::Color nc2;
    ::Test::Nested::Color nc3;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_Derived_init = ::Test::Derived::ice_factory();
/// \endcond

class ClassNoDefaultsBase : public ::Ice::Value
{
public:

    typedef ClassNoDefaultsBasePtr PointerType;

    virtual ~ClassNoDefaultsBase();

    ClassNoDefaultsBase()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    ClassNoDefaultsBase(const ::std::string& str, ::Test::Color c1, const ::Test::ByteSeq& bs) :
        str(str),
        c1(c1),
        bs(bs)
    {
    }
    ClassNoDefaultsBase(const ClassNoDefaultsBase&) = default;
    ClassNoDefaultsBase& operator=(const ClassNoDefaultsBase&) = default;

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ValuePtr ice_clone() const;

    /**
     * Obtains the Slice type ID of the most-derived class implemented by this instance.
     * @return The type ID.
     */
    virtual ::std::string ice_id() const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return The type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::std::string str;
    ::Test::Color c1;
    ::Test::ByteSeq bs;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_ClassNoDefaultsBase_init = ::Test::ClassNoDefaultsBase::ice_factory();
/// \endcond

class ClassNoDefaults : public ClassNoDefaultsBase
{
public:

    typedef ClassNoDefaultsPtr PointerType;

    virtual ~ClassNoDefaults();

    ClassNoDefaults()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    ClassNoDefaults(const ::std::string& str, ::Test::Color c1, const ::Test::ByteSeq& bs, const ::Test::InnerStruct& st, const ::Test::IntStringDict& dict) :
        ::Test::ClassNoDefaultsBase(str, c1, bs),
        st(st),
        dict(dict)
    {
    }
    ClassNoDefaults(const ClassNoDefaults&) = default;
    ClassNoDefaults& operator=(const ClassNoDefaults&) = default;

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ValuePtr ice_clone() const;

    /**
     * Obtains the Slice type ID of the most-derived class implemented by this instance.
     * @return The type ID.
     */
    virtual ::std::string ice_id() const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return The type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Test::InnerStruct st;
    ::Test::IntStringDict dict;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_ClassNoDefaults_init = ::Test::ClassNoDefaults::ice_factory();
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Test::Color>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Test::Nested::Color>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Test::Struct1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 73;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Test::Struct1, S>
{
    static void write(S* ostr, const ::Test::Struct1& v)
    {
        ostr->write(v.boolFalse);
        ostr->write(v.boolTrue);
        ostr->write(v.b);
        ostr->write(v.s);
        ostr->write(v.i);
        ostr->write(v.l);
        ostr->write(v.f);
        ostr->write(v.d);
        ostr->write(v.str);
        ostr->write(v.c1);
        ostr->write(v.c2);
        ostr->write(v.c3);
        ostr->write(v.nc1);
        ostr->write(v.nc2);
        ostr->write(v.nc3);
        ostr->write(v.noDefault);
        ostr->write(v.zeroI);
        ostr->write(v.zeroL);
        ostr->write(v.zeroF);
        ostr->write(v.zeroDotF);
        ostr->write(v.zeroD);
        ostr->write(v.zeroDotD);
    }
};

template<typename S>
struct StreamReader< ::Test::Struct1, S>
{
    static void read(S* istr, ::Test::Struct1& v)
    {
        istr->read(v.boolFalse);
        istr->read(v.boolTrue);
        istr->read(v.b);
        istr->read(v.s);
        istr->read(v.i);
        istr->read(v.l);
        istr->read(v.f);
        istr->read(v.d);
        istr->read(v.str);
        istr->read(v.c1);
        istr->read(v.c2);
        istr->read(v.c3);
        istr->read(v.nc1);
        istr->read(v.nc2);
        istr->read(v.nc3);
        istr->read(v.noDefault);
        istr->read(v.zeroI);
        istr->read(v.zeroL);
        istr->read(v.zeroF);
        istr->read(v.zeroDotF);
        istr->read(v.zeroD);
        istr->read(v.zeroDotD);
    }
};

template<>
struct StreamableTraits< ::Test::Struct2>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 71;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Test::Struct2, S>
{
    static void write(S* ostr, const ::Test::Struct2& v)
    {
        ostr->write(v.boolTrue);
        ostr->write(v.b);
        ostr->write(v.s);
        ostr->write(v.i);
        ostr->write(v.l);
        ostr->write(v.f);
        ostr->write(v.d);
        ostr->write(v.str);
        ostr->write(v.c1);
        ostr->write(v.c2);
        ostr->write(v.c3);
        ostr->write(v.nc1);
        ostr->write(v.nc2);
        ostr->write(v.nc3);
        ostr->write(v.zeroI);
        ostr->write(v.zeroL);
        ostr->write(v.zeroF);
        ostr->write(v.zeroDotF);
        ostr->write(v.zeroD);
        ostr->write(v.zeroDotD);
    }
};

template<typename S>
struct StreamReader< ::Test::Struct2, S>
{
    static void read(S* istr, ::Test::Struct2& v)
    {
        istr->read(v.boolTrue);
        istr->read(v.b);
        istr->read(v.s);
        istr->read(v.i);
        istr->read(v.l);
        istr->read(v.f);
        istr->read(v.d);
        istr->read(v.str);
        istr->read(v.c1);
        istr->read(v.c2);
        istr->read(v.c3);
        istr->read(v.nc1);
        istr->read(v.nc2);
        istr->read(v.nc3);
        istr->read(v.zeroI);
        istr->read(v.zeroL);
        istr->read(v.zeroF);
        istr->read(v.zeroDotF);
        istr->read(v.zeroD);
        istr->read(v.zeroDotD);
    }
};

template<typename S>
struct StreamWriter< ::Test::Base, S>
{
    static void write(S* ostr, const ::Test::Base& v)
    {
        ostr->write(v.boolFalse);
        ostr->write(v.boolTrue);
        ostr->write(v.b);
        ostr->write(v.s);
        ostr->write(v.i);
        ostr->write(v.l);
        ostr->write(v.f);
        ostr->write(v.d);
        ostr->write(v.str);
        ostr->write(v.noDefault);
        ostr->write(v.zeroI);
        ostr->write(v.zeroL);
        ostr->write(v.zeroF);
        ostr->write(v.zeroDotF);
        ostr->write(v.zeroD);
        ostr->write(v.zeroDotD);
    }
};

template<typename S>
struct StreamReader< ::Test::Base, S>
{
    static void read(S* istr, ::Test::Base& v)
    {
        istr->read(v.boolFalse);
        istr->read(v.boolTrue);
        istr->read(v.b);
        istr->read(v.s);
        istr->read(v.i);
        istr->read(v.l);
        istr->read(v.f);
        istr->read(v.d);
        istr->read(v.str);
        istr->read(v.noDefault);
        istr->read(v.zeroI);
        istr->read(v.zeroL);
        istr->read(v.zeroF);
        istr->read(v.zeroDotF);
        istr->read(v.zeroD);
        istr->read(v.zeroDotD);
    }
};

template<typename S>
struct StreamWriter< ::Test::Derived, S>
{
    static void write(S* ostr, const ::Test::Derived& v)
    {
        ostr->write(v.c1);
        ostr->write(v.c2);
        ostr->write(v.c3);
        ostr->write(v.nc1);
        ostr->write(v.nc2);
        ostr->write(v.nc3);
    }
};

template<typename S>
struct StreamReader< ::Test::Derived, S>
{
    static void read(S* istr, ::Test::Derived& v)
    {
        istr->read(v.c1);
        istr->read(v.c2);
        istr->read(v.c3);
        istr->read(v.nc1);
        istr->read(v.nc2);
        istr->read(v.nc3);
    }
};

template<>
struct StreamableTraits< ::Test::BaseEx>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::BaseEx, S>
{
    static void write(S* ostr, const ::Test::BaseEx& v)
    {
        ostr->write(v.boolFalse);
        ostr->write(v.boolTrue);
        ostr->write(v.b);
        ostr->write(v.s);
        ostr->write(v.i);
        ostr->write(v.l);
        ostr->write(v.f);
        ostr->write(v.d);
        ostr->write(v.str);
        ostr->write(v.noDefault);
        ostr->write(v.zeroI);
        ostr->write(v.zeroL);
        ostr->write(v.zeroF);
        ostr->write(v.zeroDotF);
        ostr->write(v.zeroD);
        ostr->write(v.zeroDotD);
    }
};

template<typename S>
struct StreamReader< ::Test::BaseEx, S>
{
    static void read(S* istr, ::Test::BaseEx& v)
    {
        istr->read(v.boolFalse);
        istr->read(v.boolTrue);
        istr->read(v.b);
        istr->read(v.s);
        istr->read(v.i);
        istr->read(v.l);
        istr->read(v.f);
        istr->read(v.d);
        istr->read(v.str);
        istr->read(v.noDefault);
        istr->read(v.zeroI);
        istr->read(v.zeroL);
        istr->read(v.zeroF);
        istr->read(v.zeroDotF);
        istr->read(v.zeroD);
        istr->read(v.zeroDotD);
    }
};

template<>
struct StreamableTraits< ::Test::DerivedEx>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::DerivedEx, S>
{
    static void write(S* ostr, const ::Test::DerivedEx& v)
    {
        ostr->write(v.c1);
        ostr->write(v.c2);
        ostr->write(v.c3);
        ostr->write(v.nc1);
        ostr->write(v.nc2);
        ostr->write(v.nc3);
    }
};

template<typename S>
struct StreamReader< ::Test::DerivedEx, S>
{
    static void read(S* istr, ::Test::DerivedEx& v)
    {
        istr->read(v.c1);
        istr->read(v.c2);
        istr->read(v.c3);
        istr->read(v.nc1);
        istr->read(v.nc2);
        istr->read(v.nc3);
    }
};

template<>
struct StreamableTraits< ::Test::InnerStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::Test::InnerStruct, S>
{
    static void write(S* ostr, const ::Test::InnerStruct& v)
    {
        ostr->write(v.a);
    }
};

template<typename S>
struct StreamReader< ::Test::InnerStruct, S>
{
    static void read(S* istr, ::Test::InnerStruct& v)
    {
        istr->read(v.a);
    }
};

template<>
struct StreamableTraits< ::Test::StructNoDefaults>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 37;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Test::StructNoDefaults, S>
{
    static void write(S* ostr, const ::Test::StructNoDefaults& v)
    {
        ostr->write(v.bo);
        ostr->write(v.b);
        ostr->write(v.s);
        ostr->write(v.i);
        ostr->write(v.l);
        ostr->write(v.f);
        ostr->write(v.d);
        ostr->write(v.str);
        ostr->write(v.c1);
        ostr->write(v.bs);
        ostr->write(v.iseq);
        ostr->write(v.dict);
        ostr->write(v.st);
    }
};

template<typename S>
struct StreamReader< ::Test::StructNoDefaults, S>
{
    static void read(S* istr, ::Test::StructNoDefaults& v)
    {
        istr->read(v.bo);
        istr->read(v.b);
        istr->read(v.s);
        istr->read(v.i);
        istr->read(v.l);
        istr->read(v.f);
        istr->read(v.d);
        istr->read(v.str);
        istr->read(v.c1);
        istr->read(v.bs);
        istr->read(v.iseq);
        istr->read(v.dict);
        istr->read(v.st);
    }
};

template<>
struct StreamableTraits< ::Test::ExceptionNoDefaultsBase>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::ExceptionNoDefaultsBase, S>
{
    static void write(S* ostr, const ::Test::ExceptionNoDefaultsBase& v)
    {
        ostr->write(v.str);
        ostr->write(v.c1);
        ostr->write(v.bs);
    }
};

template<typename S>
struct StreamReader< ::Test::ExceptionNoDefaultsBase, S>
{
    static void read(S* istr, ::Test::ExceptionNoDefaultsBase& v)
    {
        istr->read(v.str);
        istr->read(v.c1);
        istr->read(v.bs);
    }
};

template<>
struct StreamableTraits< ::Test::ExceptionNoDefaults>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::ExceptionNoDefaults, S>
{
    static void write(S* ostr, const ::Test::ExceptionNoDefaults& v)
    {
        ostr->write(v.st);
        ostr->write(v.dict);
    }
};

template<typename S>
struct StreamReader< ::Test::ExceptionNoDefaults, S>
{
    static void read(S* istr, ::Test::ExceptionNoDefaults& v)
    {
        istr->read(v.st);
        istr->read(v.dict);
    }
};

template<typename S>
struct StreamWriter< ::Test::ClassNoDefaultsBase, S>
{
    static void write(S* ostr, const ::Test::ClassNoDefaultsBase& v)
    {
        ostr->write(v.str);
        ostr->write(v.c1);
        ostr->write(v.bs);
    }
};

template<typename S>
struct StreamReader< ::Test::ClassNoDefaultsBase, S>
{
    static void read(S* istr, ::Test::ClassNoDefaultsBase& v)
    {
        istr->read(v.str);
        istr->read(v.c1);
        istr->read(v.bs);
    }
};

template<typename S>
struct StreamWriter< ::Test::ClassNoDefaults, S>
{
    static void write(S* ostr, const ::Test::ClassNoDefaults& v)
    {
        ostr->write(v.st);
        ostr->write(v.dict);
    }
};

template<typename S>
struct StreamReader< ::Test::ClassNoDefaults, S>
{
    static void read(S* istr, ::Test::ClassNoDefaults& v)
    {
        istr->read(v.st);
        istr->read(v.dict);
    }
};

}
/// \endcond

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
