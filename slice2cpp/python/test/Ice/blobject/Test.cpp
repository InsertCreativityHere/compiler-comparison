//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::UE> iceC_Test_UE_init("::Test::UE");

const ::std::string iceC_Test_Hello_ids[2] =
{
    "::Ice::Object",
    "::Test::Hello"
};
const ::std::string iceC_Test_Hello_ops[] =
{
    "add",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "raiseUE",
    "sayHello",
    "shutdown"
};
const ::std::string iceC_Test_Hello_sayHello_name = "sayHello";
const ::std::string iceC_Test_Hello_add_name = "add";
const ::std::string iceC_Test_Hello_raiseUE_name = "raiseUE";
const ::std::string iceC_Test_Hello_shutdown_name = "shutdown";

}

Test::UE::~UE()
{
}

const ::std::string&
Test::UE::ice_staticId()
{
    static const ::std::string typeId = "::Test::UE";
    return typeId;
}

bool
Test::Hello::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Hello_ids, iceC_Test_Hello_ids + 2, s);
}

::std::vector<::std::string>
Test::Hello::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Hello_ids[0], &iceC_Test_Hello_ids[2]);
}

::std::string
Test::Hello::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Hello::ice_staticId()
{
    static const ::std::string typeId = "::Test::Hello";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Hello::_iceD_sayHello(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_delay;
    istr->readAll(iceP_delay);
    inS.endReadParams();
    this->sayHello(iceP_delay, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Hello::_iceD_add(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_s1;
    int iceP_s2;
    istr->readAll(iceP_s1, iceP_s2);
    inS.endReadParams();
    int ret = this->add(iceP_s1, iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Hello::_iceD_raiseUE(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->raiseUE(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Hello::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Hello::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Hello_ops, iceC_Test_Hello_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Hello_ops)
    {
        case 0:
        {
            return _iceD_add(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_raiseUE(in, current);
        }
        case 6:
        {
            return _iceD_sayHello(in, current);
        }
        case 7:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Test::HelloPrx::_iceI_sayHello(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_delay, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Hello_sayHello_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_delay);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::HelloPrx::_iceI_add(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_s1, int iceP_s2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Hello_add_name);
    outAsync->invoke(iceC_Test_Hello_add_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1, iceP_s2);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::HelloPrx::_iceI_raiseUE(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Hello_raiseUE_name);
    outAsync->invoke(iceC_Test_Hello_raiseUE_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UE&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::HelloPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Hello_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::HelloPrx::_newInstance() const
{
    return ::IceInternal::createProxy<HelloPrx>();
}
/// \endcond

const ::std::string&
Test::HelloPrx::ice_staticId()
{
    return Hello::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_Hello_sayHello_name = "sayHello";

const ::std::string iceC_Test_Hello_add_name = "add";

const ::std::string iceC_Test_Hello_raiseUE_name = "raiseUE";

const ::std::string iceC_Test_Hello_shutdown_name = "shutdown";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::UE> iceC_Test_UE_init("::Test::UE");

}
Test::UE::~UE()
{
}

::std::string
Test::UE::ice_id() const
{
    return "::Test::UE";
}

Test::UE*
Test::UE::ice_clone() const
{
    return new UE(*this);
}

void
Test::UE::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::UE::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::UE", -1, true);
    ::Ice::StreamWriter< UE, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::UE::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UE, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Hello* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Hello>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Hello;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Hello::_iceI_begin_sayHello(::Ice::Int iceP_delay, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Hello_sayHello_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Hello_sayHello_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_delay);
        result->endWriteParams();
        result->invoke(iceC_Test_Hello_sayHello_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Hello::end_sayHello(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Hello_sayHello_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Hello::_iceI_begin_add(::Ice::Int iceP_s1, ::Ice::Int iceP_s2, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Hello_add_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Hello_add_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Hello_add_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s1);
        ostr->write(iceP_s2);
        result->endWriteParams();
        result->invoke(iceC_Test_Hello_add_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::Hello::end_add(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Hello_add_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Hello::_iceI_begin_raiseUE(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Hello_raiseUE_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Hello_raiseUE_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Hello_raiseUE_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Hello_raiseUE_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Hello::end_raiseUE(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Hello_raiseUE_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::UE&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Hello::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Hello_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Hello_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Hello_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Hello::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Hello_shutdown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Hello::_newInstance() const
{
    return new Hello;
}
/// \endcond

const ::std::string&
IceProxy::Test::Hello::ice_staticId()
{
    return ::Test::Hello::ice_staticId();
}

Test::Hello::~Hello()
{
}

namespace
{
const ::std::string iceC_Test_Hello_ids[2] =
{
    "::Ice::Object",
    "::Test::Hello"
};

}

bool
Test::Hello::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Hello_ids, iceC_Test_Hello_ids + 2, s);
}

::std::vector< ::std::string>
Test::Hello::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Hello_ids[0], &iceC_Test_Hello_ids[2]);
}

::std::string
Test::Hello::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Hello::ice_staticId()
{
    static const ::std::string typeId = "::Test::Hello";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Hello::_iceD_sayHello(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_delay;
    istr->read(iceP_delay);
    inS.endReadParams();
    this->sayHello(iceP_delay, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Hello::_iceD_add(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_s1;
    ::Ice::Int iceP_s2;
    istr->read(iceP_s1);
    istr->read(iceP_s2);
    inS.endReadParams();
    ::Ice::Int ret = this->add(iceP_s1, iceP_s2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Hello::_iceD_raiseUE(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->raiseUE(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Hello::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Hello_all[] =
{
    "add",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "raiseUE",
    "sayHello",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::Hello::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Hello_all, iceC_Test_Hello_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Hello_all)
    {
        case 0:
        {
            return _iceD_add(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_raiseUE(in, current);
        }
        case 6:
        {
            return _iceD_sayHello(in, current);
        }
        case 7:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

namespace Ice
{
}

#endif
