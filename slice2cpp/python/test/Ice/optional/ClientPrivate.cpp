//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include "ClientPrivate.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
}

void
Test::Initial2Prx::opClassAndUnknownOptional(const APtr& iceP_p, const ::std::optional<VarStruct>& iceP_ovs, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &Initial2Prx::_iceI_opClassAndUnknownOptional, iceP_p, iceP_ovs, context).get();
}

::std::future<void>
Test::Initial2Prx::opClassAndUnknownOptionalAsync(const APtr& iceP_p, const ::std::optional<VarStruct>& iceP_ovs, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &Initial2Prx::_iceI_opClassAndUnknownOptional, iceP_p, iceP_ovs, context);
}

::std::function<void()>
Test::Initial2Prx::opClassAndUnknownOptionalAsync(const APtr& iceP_p, const ::std::optional<VarStruct>& iceP_ovs, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::Initial2Prx::_iceI_opClassAndUnknownOptional, iceP_p, iceP_ovs, context);
}

void
Test::Initial2Prx::_iceI_opClassAndUnknownOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const APtr& iceP_p, const ::std::optional<VarStruct>& iceP_ovs, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opClassAndUnknownOptional";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
            ostr->writeAll({1}, iceP_ovs);
            ostr->writePendingValues();
        },
        nullptr);
}

void
Test::Initial2Prx::opVoid(::std::optional<::std::int32_t> iceP_a, ::std::optional<::std::string_view> iceP_v, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &Initial2Prx::_iceI_opVoid, iceP_a, iceP_v, context).get();
}

::std::future<void>
Test::Initial2Prx::opVoidAsync(::std::optional<::std::int32_t> iceP_a, ::std::optional<::std::string_view> iceP_v, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &Initial2Prx::_iceI_opVoid, iceP_a, iceP_v, context);
}

::std::function<void()>
Test::Initial2Prx::opVoidAsync(::std::optional<::std::int32_t> iceP_a, ::std::optional<::std::string_view> iceP_v, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::Initial2Prx::_iceI_opVoid, iceP_a, iceP_v, context);
}

void
Test::Initial2Prx::_iceI_opVoid(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, ::std::optional<::std::int32_t> iceP_a, ::std::optional<::std::string_view> iceP_v, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opVoid";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2}, iceP_a, iceP_v);
        },
        nullptr);
}

const char*
Test::Initial2Prx::ice_staticId() noexcept
{
    return "::Test::Initial2";
}

::std::vector<::std::string>
Test::Initial2::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::Initial2"};
    return allTypeIds;
}

::std::string
Test::Initial2::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
Test::Initial2::ice_staticId() noexcept
{
    return "::Test::Initial2";
}

/// \cond INTERNAL
void
Test::Initial2::_iceD_opClassAndUnknownOptional(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    APtr iceP_p;
    ::std::optional<VarStruct> iceP_ovs;
    istr->readAll(iceP_p);
    istr->readAll({1}, iceP_ovs);
    istr->readPendingValues();
    istr->endEncapsulation();
    this->opClassAndUnknownOptional(::std::move(iceP_p), ::std::move(iceP_ovs), request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial2::_iceD_opVoid(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::optional<::std::int32_t> iceP_a;
    ::std::optional<::std::string> iceP_v;
    istr->readAll({1, 2}, iceP_a, iceP_v);
    istr->endEncapsulation();
    this->opVoid(iceP_a, ::std::move(iceP_v), request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial2::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"ice_id", "ice_ids", "ice_isA", "ice_ping", "opClassAndUnknownOptional", "opVoid"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 6, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_opClassAndUnknownOptional(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_opVoid(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond
