//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_Test_TestIntf_ids[2] =
{
    "::Ice::Object",
    "::Test::TestIntf"
};
const ::std::string iceC_Test_TestIntf_ops[] =
{
    "getAdapterName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_TestIntf_getAdapterName_name = "getAdapterName";

const ::std::string iceC_Test_RemoteObjectAdapter_ids[2] =
{
    "::Ice::Object",
    "::Test::RemoteObjectAdapter"
};
const ::std::string iceC_Test_RemoteObjectAdapter_ops[] =
{
    "deactivate",
    "getTestIntf",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_RemoteObjectAdapter_getTestIntf_name = "getTestIntf";
const ::std::string iceC_Test_RemoteObjectAdapter_deactivate_name = "deactivate";

const ::std::string iceC_Test_RemoteCommunicator_ids[2] =
{
    "::Ice::Object",
    "::Test::RemoteCommunicator"
};
const ::std::string iceC_Test_RemoteCommunicator_ops[] =
{
    "createObjectAdapter",
    "deactivateObjectAdapter",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown"
};
const ::std::string iceC_Test_RemoteCommunicator_createObjectAdapter_name = "createObjectAdapter";
const ::std::string iceC_Test_RemoteCommunicator_deactivateObjectAdapter_name = "deactivateObjectAdapter";
const ::std::string iceC_Test_RemoteCommunicator_shutdown_name = "shutdown";

}

::std::string
Test::TestIntfPrx::getAdapterName(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::string>(true, this, &TestIntfPrx::_iceI_getAdapterName, context).get();
}

::std::future<::std::string>
Test::TestIntfPrx::getAdapterNameAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::string, ::std::promise>(false, this, &TestIntfPrx::_iceI_getAdapterName, context);
}

::std::function<void()>
Test::TestIntfPrx::getAdapterNameAsync(::std::function<void (::std::string)> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_getAdapterName, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_getAdapterName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_getAdapterName_name);
    outAsync->invoke(iceC_Test_TestIntf_getAdapterName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::TestIntfPrx::ice_staticId()
{
    return TestIntf::ice_staticId();
}

::std::shared_ptr<::Test::TestIntfPrx>
Test::RemoteObjectAdapterPrx::getTestIntf(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<TestIntfPrx>>(true, this, &RemoteObjectAdapterPrx::_iceI_getTestIntf, context).get();
}

::std::future<::std::shared_ptr<::Test::TestIntfPrx>>
Test::RemoteObjectAdapterPrx::getTestIntfAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<TestIntfPrx>, ::std::promise>(false, this, &RemoteObjectAdapterPrx::_iceI_getTestIntf, context);
}

::std::function<void()>
Test::RemoteObjectAdapterPrx::getTestIntfAsync(::std::function<void (::std::shared_ptr<::Test::TestIntfPrx>)> response,
                                               ::std::function<void(::std::exception_ptr)> ex,
                                               ::std::function<void(bool)> sent,
                                               const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::shared_ptr<TestIntfPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::RemoteObjectAdapterPrx::_iceI_getTestIntf, context);
}

/// \cond INTERNAL
void
Test::RemoteObjectAdapterPrx::_iceI_getTestIntf(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<TestIntfPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_RemoteObjectAdapter_getTestIntf_name);
    outAsync->invoke(iceC_Test_RemoteObjectAdapter_getTestIntf_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
Test::RemoteObjectAdapterPrx::deactivate(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &RemoteObjectAdapterPrx::_iceI_deactivate, context).get();
}

::std::future<void>
Test::RemoteObjectAdapterPrx::deactivateAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &RemoteObjectAdapterPrx::_iceI_deactivate, context);
}

::std::function<void()>
Test::RemoteObjectAdapterPrx::deactivateAsync(::std::function<void ()> response,
                                              ::std::function<void(::std::exception_ptr)> ex,
                                              ::std::function<void(bool)> sent,
                                              const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::RemoteObjectAdapterPrx::_iceI_deactivate, context);
}

/// \cond INTERNAL
void
Test::RemoteObjectAdapterPrx::_iceI_deactivate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_RemoteObjectAdapter_deactivate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::RemoteObjectAdapterPrx::ice_staticId()
{
    return RemoteObjectAdapter::ice_staticId();
}

::std::shared_ptr<::Test::RemoteObjectAdapterPrx>
Test::RemoteCommunicatorPrx::createObjectAdapter(const ::std::string& iceP_name, const ::std::string& iceP_endpoints, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<RemoteObjectAdapterPrx>>(true, this, &RemoteCommunicatorPrx::_iceI_createObjectAdapter, iceP_name, iceP_endpoints, context).get();
}

::std::future<::std::shared_ptr<::Test::RemoteObjectAdapterPrx>>
Test::RemoteCommunicatorPrx::createObjectAdapterAsync(const ::std::string& iceP_name, const ::std::string& iceP_endpoints, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<RemoteObjectAdapterPrx>, ::std::promise>(false, this, &RemoteCommunicatorPrx::_iceI_createObjectAdapter, iceP_name, iceP_endpoints, context);
}

::std::function<void()>
Test::RemoteCommunicatorPrx::createObjectAdapterAsync(const ::std::string& iceP_name, const ::std::string& iceP_endpoints,
                                                      ::std::function<void (::std::shared_ptr<::Test::RemoteObjectAdapterPrx>)> response,
                                                      ::std::function<void(::std::exception_ptr)> ex,
                                                      ::std::function<void(bool)> sent,
                                                      const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::shared_ptr<RemoteObjectAdapterPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::RemoteCommunicatorPrx::_iceI_createObjectAdapter, iceP_name, iceP_endpoints, context);
}

/// \cond INTERNAL
void
Test::RemoteCommunicatorPrx::_iceI_createObjectAdapter(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<RemoteObjectAdapterPrx>>>& outAsync, const ::std::string& iceP_name, const ::std::string& iceP_endpoints, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_RemoteCommunicator_createObjectAdapter_name);
    outAsync->invoke(iceC_Test_RemoteCommunicator_createObjectAdapter_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name, iceP_endpoints);
        },
        nullptr);
}
/// \endcond

void
Test::RemoteCommunicatorPrx::deactivateObjectAdapter(const ::std::shared_ptr<RemoteObjectAdapterPrx>& iceP_adapter, const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &RemoteCommunicatorPrx::_iceI_deactivateObjectAdapter, iceP_adapter, context).get();
}

::std::future<void>
Test::RemoteCommunicatorPrx::deactivateObjectAdapterAsync(const ::std::shared_ptr<RemoteObjectAdapterPrx>& iceP_adapter, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &RemoteCommunicatorPrx::_iceI_deactivateObjectAdapter, iceP_adapter, context);
}

::std::function<void()>
Test::RemoteCommunicatorPrx::deactivateObjectAdapterAsync(const ::std::shared_ptr<RemoteObjectAdapterPrx>& iceP_adapter,
                                                          ::std::function<void ()> response,
                                                          ::std::function<void(::std::exception_ptr)> ex,
                                                          ::std::function<void(bool)> sent,
                                                          const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::RemoteCommunicatorPrx::_iceI_deactivateObjectAdapter, iceP_adapter, context);
}

/// \cond INTERNAL
void
Test::RemoteCommunicatorPrx::_iceI_deactivateObjectAdapter(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<RemoteObjectAdapterPrx>& iceP_adapter, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_RemoteCommunicator_deactivateObjectAdapter_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_adapter);
        },
        nullptr);
}
/// \endcond

void
Test::RemoteCommunicatorPrx::shutdown(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &RemoteCommunicatorPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::RemoteCommunicatorPrx::shutdownAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &RemoteCommunicatorPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::RemoteCommunicatorPrx::shutdownAsync(::std::function<void ()> response,
                                           ::std::function<void(::std::exception_ptr)> ex,
                                           ::std::function<void(bool)> sent,
                                           const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::RemoteCommunicatorPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::RemoteCommunicatorPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_RemoteCommunicator_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::RemoteCommunicatorPrx::ice_staticId()
{
    return RemoteCommunicator::ice_staticId();
}

bool
Test::TestIntf::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_TestIntf_ids, iceC_Test_TestIntf_ids + 2, s);
}

::std::vector<::std::string>
Test::TestIntf::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_TestIntf_ids[0], &iceC_Test_TestIntf_ids[2]);
}

::std::string
Test::TestIntf::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::TestIntf::ice_staticId()
{
    static const ::std::string typeId = "::Test::TestIntf";
    return typeId;
}

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_getAdapterName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getAdapterName(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_TestIntf_ops, iceC_Test_TestIntf_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_TestIntf_ops)
    {
        case 0:
        {
            return _iceD_getAdapterName(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::RemoteObjectAdapter::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_RemoteObjectAdapter_ids, iceC_Test_RemoteObjectAdapter_ids + 2, s);
}

::std::vector<::std::string>
Test::RemoteObjectAdapter::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_RemoteObjectAdapter_ids[0], &iceC_Test_RemoteObjectAdapter_ids[2]);
}

::std::string
Test::RemoteObjectAdapter::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::RemoteObjectAdapter::ice_staticId()
{
    static const ::std::string typeId = "::Test::RemoteObjectAdapter";
    return typeId;
}

/// \cond INTERNAL
bool
Test::RemoteObjectAdapter::_iceD_getTestIntf(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<TestIntfPrx> ret = this->getTestIntf(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteObjectAdapter::_iceD_deactivate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->deactivate(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteObjectAdapter::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_RemoteObjectAdapter_ops, iceC_Test_RemoteObjectAdapter_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_RemoteObjectAdapter_ops)
    {
        case 0:
        {
            return _iceD_deactivate(in, current);
        }
        case 1:
        {
            return _iceD_getTestIntf(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::RemoteCommunicator::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_RemoteCommunicator_ids, iceC_Test_RemoteCommunicator_ids + 2, s);
}

::std::vector<::std::string>
Test::RemoteCommunicator::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_RemoteCommunicator_ids[0], &iceC_Test_RemoteCommunicator_ids[2]);
}

::std::string
Test::RemoteCommunicator::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::RemoteCommunicator::ice_staticId()
{
    static const ::std::string typeId = "::Test::RemoteCommunicator";
    return typeId;
}

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_createObjectAdapter(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    ::std::string iceP_endpoints;
    istr->readAll(iceP_name, iceP_endpoints);
    inS.endReadParams();
    ::std::shared_ptr<RemoteObjectAdapterPrx> ret = this->createObjectAdapter(::std::move(iceP_name), ::std::move(iceP_endpoints), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_deactivateObjectAdapter(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<RemoteObjectAdapterPrx> iceP_adapter;
    istr->readAll(iceP_adapter);
    inS.endReadParams();
    this->deactivateObjectAdapter(::std::move(iceP_adapter), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::RemoteCommunicator::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_RemoteCommunicator_ops, iceC_Test_RemoteCommunicator_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_RemoteCommunicator_ops)
    {
        case 0:
        {
            return _iceD_createObjectAdapter(in, current);
        }
        case 1:
        {
            return _iceD_deactivateObjectAdapter(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
