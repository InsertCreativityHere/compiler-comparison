//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ServerPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __ServerPrivate_h__
#define __ServerPrivate_h__

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{
    class Empty;
    using EmptyPtr = ::std::shared_ptr<Empty>;

    class AlsoEmpty;
    using AlsoEmptyPtr = ::std::shared_ptr<AlsoEmpty>;

    class UnexpectedObjectExceptionTestPrx;

    class COneMember;
    using COneMemberPtr = ::std::shared_ptr<COneMember>;

    class CTwoMembers;
    using CTwoMembersPtr = ::std::shared_ptr<CTwoMembers>;

    struct SOneMember;

    struct STwoMembers;

    using DOneMember = ::std::map<::std::int32_t, COneMemberPtr>;

    using DTwoMembers = ::std::map<::std::int32_t, CTwoMembersPtr>;

}

namespace Test
{

class UnexpectedObjectExceptionTestPrx : public ::Ice::Proxy<UnexpectedObjectExceptionTestPrx, ::Ice::ObjectPrx>
{
public:

    AlsoEmptyPtr op(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<AlsoEmptyPtr> opAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opAsync(::std::function<void(::Test::AlsoEmptyPtr)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<AlsoEmptyPtr>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;
    UnexpectedObjectExceptionTestPrx(const UnexpectedObjectExceptionTestPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    UnexpectedObjectExceptionTestPrx(UnexpectedObjectExceptionTestPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    UnexpectedObjectExceptionTestPrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    UnexpectedObjectExceptionTestPrx& operator=(const UnexpectedObjectExceptionTestPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    UnexpectedObjectExceptionTestPrx& operator=(UnexpectedObjectExceptionTestPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static UnexpectedObjectExceptionTestPrx _fromReference(::IceInternal::ReferencePtr ref) { return UnexpectedObjectExceptionTestPrx(::std::move(ref)); }

protected:

    UnexpectedObjectExceptionTestPrx() = default;

    explicit UnexpectedObjectExceptionTestPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace Test
{

class Empty : public ::Ice::Value
{
public:
    /**
     * Default constructor.
     */
    Empty() noexcept = default;

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    EmptyPtr ice_clone() const { return ::std::static_pointer_cast<Empty>(_iceCloneImpl()); }

protected:
    Empty(const Empty&) = default;

    ::Ice::ValuePtr _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

/// \cond INTERNAL
static Empty _iceS_Empty_init;
/// \endcond

class AlsoEmpty : public ::Ice::Value
{
public:
    /**
     * Default constructor.
     */
    AlsoEmpty() noexcept = default;

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    AlsoEmptyPtr ice_clone() const { return ::std::static_pointer_cast<AlsoEmpty>(_iceCloneImpl()); }

protected:
    AlsoEmpty(const AlsoEmpty&) = default;

    ::Ice::ValuePtr _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

class COneMember : public ::Ice::Value
{
public:
    /**
     * Default constructor.
     */
    COneMember() noexcept = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit COneMember(::Test::EmptyPtr e) noexcept :
        e(::std::move(e))
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::EmptyPtr&> ice_tuple() const
    {
        return std::tie(e);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    COneMemberPtr ice_clone() const { return ::std::static_pointer_cast<COneMember>(_iceCloneImpl()); }

    ::Test::EmptyPtr e;

protected:
    COneMember(const COneMember&) = default;

    ::Ice::ValuePtr _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

class CTwoMembers : public ::Ice::Value
{
public:
    /**
     * Default constructor.
     */
    CTwoMembers() noexcept = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    CTwoMembers(::Test::EmptyPtr e1, ::Test::EmptyPtr e2) noexcept :
        e1(::std::move(e1)),
        e2(::std::move(e2))
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::EmptyPtr&, const ::Test::EmptyPtr&> ice_tuple() const
    {
        return std::tie(e1, e2);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    CTwoMembersPtr ice_clone() const { return ::std::static_pointer_cast<CTwoMembers>(_iceCloneImpl()); }

    ::Test::EmptyPtr e1;
    ::Test::EmptyPtr e2;

protected:
    CTwoMembers(const CTwoMembers&) = default;

    ::Ice::ValuePtr _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

class EOneMember : public ::Ice::UserException
{
public:
    /**
     * Default constructor.
     */
    EOneMember() noexcept = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    EOneMember(EmptyPtr e) noexcept :
        e(::std::move(e))
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::EmptyPtr&> ice_tuple() const
    {
        return std::tie(e);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    void ice_throw() const override;

    /// \cond STREAM
    bool _usesClasses() const override;
    /// \endcond

    ::Test::EmptyPtr e;

protected:
    void _writeImpl(::Ice::OutputStream*) const override;

    void _readImpl(::Ice::InputStream*) override;
};

class ETwoMembers : public ::Ice::UserException
{
public:
    /**
     * Default constructor.
     */
    ETwoMembers() noexcept = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    ETwoMembers(EmptyPtr e1, EmptyPtr e2) noexcept :
        e1(::std::move(e1)),
        e2(::std::move(e2))
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::EmptyPtr&, const ::Test::EmptyPtr&> ice_tuple() const
    {
        return std::tie(e1, e2);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    void ice_throw() const override;

    /// \cond STREAM
    bool _usesClasses() const override;
    /// \endcond

    ::Test::EmptyPtr e1;
    ::Test::EmptyPtr e2;

protected:
    void _writeImpl(::Ice::OutputStream*) const override;

    void _readImpl(::Ice::InputStream*) override;
};

struct SOneMember
{
    ::Test::EmptyPtr e;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::EmptyPtr&> ice_tuple() const
    {
        return std::tie(e);
    }
};

struct STwoMembers
{
    ::Test::EmptyPtr e1;
    ::Test::EmptyPtr e2;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::EmptyPtr&, const ::Test::EmptyPtr&> ice_tuple() const
    {
        return std::tie(e1, e2);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test
{

class UnexpectedObjectExceptionTest : public virtual ::Ice::Object
{
public:

    using ProxyType = UnexpectedObjectExceptionTestPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    virtual AlsoEmptyPtr op(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_op(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using UnexpectedObjectExceptionTestPtr = ::std::shared_ptr<UnexpectedObjectExceptionTest>;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamReader<::Test::COneMember>
{
    static void read(InputStream* istr, ::Test::COneMember& v)
    {
        istr->readAll(v.e);
    }
};

template<>
struct StreamReader<::Test::CTwoMembers>
{
    static void read(InputStream* istr, ::Test::CTwoMembers& v)
    {
        istr->readAll(v.e1, v.e2);
    }
};

template<>
struct StreamReader<::Test::EOneMember>
{
    static void read(InputStream* istr, ::Test::EOneMember& v)
    {
        istr->readAll(v.e);
    }
};

template<>
struct StreamReader<::Test::ETwoMembers>
{
    static void read(InputStream* istr, ::Test::ETwoMembers& v)
    {
        istr->readAll(v.e1, v.e2);
    }
};

template<>
struct StreamableTraits<::Test::SOneMember>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamReader<::Test::SOneMember>
{
    static void read(InputStream* istr, ::Test::SOneMember& v)
    {
        istr->readAll(v.e);
    }
};

template<>
struct StreamableTraits<::Test::STwoMembers>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<>
struct StreamReader<::Test::STwoMembers>
{
    static void read(InputStream* istr, ::Test::STwoMembers& v)
    {
        istr->readAll(v.e1, v.e2);
    }
};

}
/// \endcond

#include <Ice/PopDisableWarnings.h>
#endif
