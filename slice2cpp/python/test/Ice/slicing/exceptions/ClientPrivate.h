//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __ClientPrivate_h__
#define __ClientPrivate_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Test.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

class PreservedClass;

using PreservedClassPtr = ::std::shared_ptr<PreservedClass>;

}

namespace Test
{

class PreservedClass : public ::Ice::ValueHelper<PreservedClass, BaseClass>
{
public:

    virtual ~PreservedClass();

    PreservedClass() = default;

    PreservedClass(const PreservedClass&) = default;
    PreservedClass(PreservedClass&&) = default;
    PreservedClass& operator=(const PreservedClass&) = default;
    PreservedClass& operator=(PreservedClass&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    PreservedClass(::std::string_view bc, ::std::string_view pc) :
        Ice::ValueHelper<PreservedClass, BaseClass>(bc),
        pc(pc)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(bc, pc);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string pc;
};

/// \cond INTERNAL
static PreservedClass _iceS_PreservedClass_init;
/// \endcond

class Preserved1 : public ::Ice::UserExceptionHelper<Preserved1, KnownPreservedDerived>
{
public:

    virtual ~Preserved1();

    Preserved1(const Preserved1&) = default;

    Preserved1() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Preserved1(::std::string_view b, ::std::string_view kp, ::std::string_view kpd, const ::std::shared_ptr<BaseClass>& p1) :
        ::Ice::UserExceptionHelper<Preserved1, KnownPreservedDerived>(b, kp, kpd),
        p1(p1)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&, const ::std::shared_ptr<::Test::BaseClass>&> ice_tuple() const
    {
        return std::tie(b, kp, kpd, p1);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond STREAM
    virtual bool _usesClasses() const override;
    /// \endcond

    ::std::shared_ptr<::Test::BaseClass> p1;
};

class Preserved2 : public ::Ice::UserExceptionHelper<Preserved2, Preserved1>
{
public:

    virtual ~Preserved2();

    Preserved2(const Preserved2&) = default;

    Preserved2() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Preserved2(::std::string_view b, ::std::string_view kp, ::std::string_view kpd, const ::std::shared_ptr<BaseClass>& p1, const ::std::shared_ptr<BaseClass>& p2) :
        ::Ice::UserExceptionHelper<Preserved2, Preserved1>(b, kp, kpd, p1),
        p2(p2)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&, const ::std::shared_ptr<::Test::BaseClass>&, const ::std::shared_ptr<::Test::BaseClass>&> ice_tuple() const
    {
        return std::tie(b, kp, kpd, p1, p2);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::BaseClass> p2;
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter<::Test::PreservedClass, S>
{
    static void write(S* ostr, const ::Test::PreservedClass& v)
    {
        ostr->writeAll(v.pc);
    }
};

template<typename S>
struct StreamReader<::Test::PreservedClass, S>
{
    static void read(S* istr, ::Test::PreservedClass& v)
    {
        istr->readAll(v.pc);
    }
};

template<typename S>
struct StreamWriter<::Test::Preserved1, S>
{
    static void write(S* ostr, const ::Test::Preserved1& v)
    {
        ostr->writeAll(v.p1);
    }
};

template<typename S>
struct StreamReader<::Test::Preserved1, S>
{
    static void read(S* istr, ::Test::Preserved1& v)
    {
        istr->readAll(v.p1);
    }
};

template<typename S>
struct StreamWriter<::Test::Preserved2, S>
{
    static void write(S* ostr, const ::Test::Preserved2& v)
    {
        ostr->writeAll(v.p2);
    }
};

template<typename S>
struct StreamReader<::Test::Preserved2, S>
{
    static void read(S* istr, ::Test::Preserved2& v)
    {
        istr->readAll(v.p2);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
