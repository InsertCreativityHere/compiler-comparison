//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <ClientPrivate.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::PreservedClass> iceC_Test_PreservedClass_init("::Test::PreservedClass");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Preserved1> iceC_Test_Preserved1_init("::Test::Preserved1");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Preserved2> iceC_Test_Preserved2_init("::Test::Preserved2");

}

Test::PreservedClass::~PreservedClass()
{
}

const ::std::string&
Test::PreservedClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::PreservedClass";
    return typeId;
}

Test::Preserved1::~Preserved1()
{
}

const ::std::string&
Test::Preserved1::ice_staticId()
{
    static const ::std::string typeId = "::Test::Preserved1";
    return typeId;
}

/// \cond STREAM
bool
Test::Preserved1::_usesClasses() const
{
    return true;
}
/// \endcond

Test::Preserved2::~Preserved2()
{
}

const ::std::string&
Test::Preserved2::ice_staticId()
{
    static const ::std::string typeId = "::Test::Preserved2";
    return typeId;
}
