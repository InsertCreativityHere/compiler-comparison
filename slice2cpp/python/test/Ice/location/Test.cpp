//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_Test_TestLocatorRegistry_ids[3] =
{
    "::Ice::LocatorRegistry",
    "::Ice::Object",
    "::Test::TestLocatorRegistry"
};
const ::std::string iceC_Test_TestLocatorRegistry_ops[] =
{
    "addObject",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setAdapterDirectProxy",
    "setReplicatedAdapterDirectProxy",
    "setServerProcessProxy"
};
const ::std::string iceC_Test_TestLocatorRegistry_addObject_name = "addObject";

const ::std::string iceC_Test_TestLocator_ids[3] =
{
    "::Ice::Locator",
    "::Ice::Object",
    "::Test::TestLocator"
};
const ::std::string iceC_Test_TestLocator_ops[] =
{
    "findAdapterById",
    "findObjectById",
    "getRegistry",
    "getRequestCount",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_TestLocator_getRequestCount_name = "getRequestCount";

const ::std::string iceC_Test_ServerManager_ids[2] =
{
    "::Ice::Object",
    "::Test::ServerManager"
};
const ::std::string iceC_Test_ServerManager_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown",
    "startServer"
};
const ::std::string iceC_Test_ServerManager_startServer_name = "startServer";
const ::std::string iceC_Test_ServerManager_shutdown_name = "shutdown";

const ::std::string iceC_Test_Hello_ids[2] =
{
    "::Ice::Object",
    "::Test::Hello"
};
const ::std::string iceC_Test_Hello_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "sayHello"
};
const ::std::string iceC_Test_Hello_sayHello_name = "sayHello";

const ::std::string iceC_Test_TestIntf_ids[2] =
{
    "::Ice::Object",
    "::Test::TestIntf"
};
const ::std::string iceC_Test_TestIntf_ops[] =
{
    "getHello",
    "getReplicatedHello",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "migrateHello",
    "shutdown"
};
const ::std::string iceC_Test_TestIntf_shutdown_name = "shutdown";
const ::std::string iceC_Test_TestIntf_getHello_name = "getHello";
const ::std::string iceC_Test_TestIntf_getReplicatedHello_name = "getReplicatedHello";
const ::std::string iceC_Test_TestIntf_migrateHello_name = "migrateHello";

}

void
Test::TestLocatorRegistryPrx::addObject(const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_obj, const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestLocatorRegistryPrx::_iceI_addObject, iceP_obj, context).get();
}

::std::future<void>
Test::TestLocatorRegistryPrx::addObjectAsync(const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_obj, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestLocatorRegistryPrx::_iceI_addObject, iceP_obj, context);
}

::std::function<void()>
Test::TestLocatorRegistryPrx::addObjectAsync(const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_obj,
                                             ::std::function<void ()> response,
                                             ::std::function<void(::std::exception_ptr)> ex,
                                             ::std::function<void(bool)> sent,
                                             const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestLocatorRegistryPrx::_iceI_addObject, iceP_obj, context);
}

/// \cond INTERNAL
void
Test::TestLocatorRegistryPrx::_iceI_addObject(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_obj, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestLocatorRegistry_addObject_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_obj);
        },
        nullptr);
}
/// \endcond

const ::std::string&
Test::TestLocatorRegistryPrx::ice_staticId()
{
    return TestLocatorRegistry::ice_staticId();
}

int
Test::TestLocatorPrx::getRequestCount(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<int>(true, this, &TestLocatorPrx::_iceI_getRequestCount, context).get();
}

::std::future<int>
Test::TestLocatorPrx::getRequestCountAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<int, ::std::promise>(false, this, &TestLocatorPrx::_iceI_getRequestCount, context);
}

::std::function<void()>
Test::TestLocatorPrx::getRequestCountAsync(::std::function<void (int)> response,
                                           ::std::function<void(::std::exception_ptr)> ex,
                                           ::std::function<void(bool)> sent,
                                           const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestLocatorPrx::_iceI_getRequestCount, context);
}

/// \cond INTERNAL
void
Test::TestLocatorPrx::_iceI_getRequestCount(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestLocator_getRequestCount_name);
    outAsync->invoke(iceC_Test_TestLocator_getRequestCount_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::TestLocatorPrx::ice_staticId()
{
    return TestLocator::ice_staticId();
}

void
Test::ServerManagerPrx::startServer(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &ServerManagerPrx::_iceI_startServer, context).get();
}

::std::future<void>
Test::ServerManagerPrx::startServerAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ServerManagerPrx::_iceI_startServer, context);
}

::std::function<void()>
Test::ServerManagerPrx::startServerAsync(::std::function<void ()> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ServerManagerPrx::_iceI_startServer, context);
}

/// \cond INTERNAL
void
Test::ServerManagerPrx::_iceI_startServer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_ServerManager_startServer_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
Test::ServerManagerPrx::shutdown(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &ServerManagerPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::ServerManagerPrx::shutdownAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ServerManagerPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::ServerManagerPrx::shutdownAsync(::std::function<void ()> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ServerManagerPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::ServerManagerPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_ServerManager_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::ServerManagerPrx::ice_staticId()
{
    return ServerManager::ice_staticId();
}

void
Test::HelloPrx::sayHello(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &HelloPrx::_iceI_sayHello, context).get();
}

::std::future<void>
Test::HelloPrx::sayHelloAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &HelloPrx::_iceI_sayHello, context);
}

::std::function<void()>
Test::HelloPrx::sayHelloAsync(::std::function<void ()> response,
                              ::std::function<void(::std::exception_ptr)> ex,
                              ::std::function<void(bool)> sent,
                              const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::HelloPrx::_iceI_sayHello, context);
}

/// \cond INTERNAL
void
Test::HelloPrx::_iceI_sayHello(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Hello_sayHello_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::HelloPrx::ice_staticId()
{
    return Hello::ice_staticId();
}

void
Test::TestIntfPrx::shutdown(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::TestIntfPrx::shutdownAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestIntfPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::TestIntfPrx::shutdownAsync(::std::function<void ()> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::std::shared_ptr<::Test::HelloPrx>
Test::TestIntfPrx::getHello(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<HelloPrx>>(true, this, &TestIntfPrx::_iceI_getHello, context).get();
}

::std::future<::std::shared_ptr<::Test::HelloPrx>>
Test::TestIntfPrx::getHelloAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<HelloPrx>, ::std::promise>(false, this, &TestIntfPrx::_iceI_getHello, context);
}

::std::function<void()>
Test::TestIntfPrx::getHelloAsync(::std::function<void (::std::shared_ptr<::Test::HelloPrx>)> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::shared_ptr<HelloPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_getHello, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_getHello(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<HelloPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_getHello_name);
    outAsync->invoke(iceC_Test_TestIntf_getHello_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::std::shared_ptr<::Test::HelloPrx>
Test::TestIntfPrx::getReplicatedHello(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<HelloPrx>>(true, this, &TestIntfPrx::_iceI_getReplicatedHello, context).get();
}

::std::future<::std::shared_ptr<::Test::HelloPrx>>
Test::TestIntfPrx::getReplicatedHelloAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<HelloPrx>, ::std::promise>(false, this, &TestIntfPrx::_iceI_getReplicatedHello, context);
}

::std::function<void()>
Test::TestIntfPrx::getReplicatedHelloAsync(::std::function<void (::std::shared_ptr<::Test::HelloPrx>)> response,
                                           ::std::function<void(::std::exception_ptr)> ex,
                                           ::std::function<void(bool)> sent,
                                           const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::shared_ptr<HelloPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_getReplicatedHello, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_getReplicatedHello(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<HelloPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_getReplicatedHello_name);
    outAsync->invoke(iceC_Test_TestIntf_getReplicatedHello_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
Test::TestIntfPrx::migrateHello(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_migrateHello, context).get();
}

::std::future<void>
Test::TestIntfPrx::migrateHelloAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestIntfPrx::_iceI_migrateHello, context);
}

::std::function<void()>
Test::TestIntfPrx::migrateHelloAsync(::std::function<void ()> response,
                                     ::std::function<void(::std::exception_ptr)> ex,
                                     ::std::function<void(bool)> sent,
                                     const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_migrateHello, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_migrateHello(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_migrateHello_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::TestIntfPrx::ice_staticId()
{
    return TestIntf::ice_staticId();
}

bool
Test::TestLocatorRegistry::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_TestLocatorRegistry_ids, iceC_Test_TestLocatorRegistry_ids + 3, s);
}

::std::vector<::std::string>
Test::TestLocatorRegistry::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_TestLocatorRegistry_ids[0], &iceC_Test_TestLocatorRegistry_ids[3]);
}

::std::string
Test::TestLocatorRegistry::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::TestLocatorRegistry::ice_staticId()
{
    static const ::std::string typeId = "::Test::TestLocatorRegistry";
    return typeId;
}

/// \cond INTERNAL
bool
Test::TestLocatorRegistry::_iceD_addObject(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Ice::ObjectPrx> iceP_obj;
    istr->readAll(iceP_obj);
    inS.endReadParams();
    this->addObject(::std::move(iceP_obj), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestLocatorRegistry::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_TestLocatorRegistry_ops, iceC_Test_TestLocatorRegistry_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_TestLocatorRegistry_ops)
    {
        case 0:
        {
            return _iceD_addObject(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_setAdapterDirectProxy(in, current);
        }
        case 6:
        {
            return _iceD_setReplicatedAdapterDirectProxy(in, current);
        }
        case 7:
        {
            return _iceD_setServerProcessProxy(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::TestLocator::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_TestLocator_ids, iceC_Test_TestLocator_ids + 3, s);
}

::std::vector<::std::string>
Test::TestLocator::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_TestLocator_ids[0], &iceC_Test_TestLocator_ids[3]);
}

::std::string
Test::TestLocator::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::TestLocator::ice_staticId()
{
    static const ::std::string typeId = "::Test::TestLocator";
    return typeId;
}

/// \cond INTERNAL
bool
Test::TestLocator::_iceD_getRequestCount(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    int ret = this->getRequestCount(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestLocator::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_TestLocator_ops, iceC_Test_TestLocator_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_TestLocator_ops)
    {
        case 0:
        {
            return _iceD_findAdapterById(in, current);
        }
        case 1:
        {
            return _iceD_findObjectById(in, current);
        }
        case 2:
        {
            return _iceD_getRegistry(in, current);
        }
        case 3:
        {
            return _iceD_getRequestCount(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::ServerManager::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_ServerManager_ids, iceC_Test_ServerManager_ids + 2, s);
}

::std::vector<::std::string>
Test::ServerManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_ServerManager_ids[0], &iceC_Test_ServerManager_ids[2]);
}

::std::string
Test::ServerManager::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::ServerManager::ice_staticId()
{
    static const ::std::string typeId = "::Test::ServerManager";
    return typeId;
}

/// \cond INTERNAL
bool
Test::ServerManager::_iceD_startServer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->startServer(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::ServerManager::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::ServerManager::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_ServerManager_ops, iceC_Test_ServerManager_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_ServerManager_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_shutdown(in, current);
        }
        case 5:
        {
            return _iceD_startServer(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Hello::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Hello_ids, iceC_Test_Hello_ids + 2, s);
}

::std::vector<::std::string>
Test::Hello::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Hello_ids[0], &iceC_Test_Hello_ids[2]);
}

::std::string
Test::Hello::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Hello::ice_staticId()
{
    static const ::std::string typeId = "::Test::Hello";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Hello::_iceD_sayHello(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->sayHello(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Hello::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Hello_ops, iceC_Test_Hello_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Hello_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_sayHello(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::TestIntf::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_TestIntf_ids, iceC_Test_TestIntf_ids + 2, s);
}

::std::vector<::std::string>
Test::TestIntf::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_TestIntf_ids[0], &iceC_Test_TestIntf_ids[2]);
}

::std::string
Test::TestIntf::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::TestIntf::ice_staticId()
{
    static const ::std::string typeId = "::Test::TestIntf";
    return typeId;
}

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_getHello(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<HelloPrx> ret = this->getHello(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_getReplicatedHello(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<HelloPrx> ret = this->getReplicatedHello(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_migrateHello(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->migrateHello(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_TestIntf_ops, iceC_Test_TestIntf_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_TestIntf_ops)
    {
        case 0:
        {
            return _iceD_getHello(in, current);
        }
        case 1:
        {
            return _iceD_getReplicatedHello(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_migrateHello(in, current);
        }
        case 7:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
