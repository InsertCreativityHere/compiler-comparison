//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `TestNumPy.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <TestNumPy.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 9
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::NumPy::D> iceC_Test_NumPy_D_init("::Test::NumPy::D");

const ::std::string iceC_Test_NumPy_Custom_ids[2] =
{
    "::Ice::Object",
    "::Test::NumPy::Custom"
};
const ::std::string iceC_Test_NumPy_Custom_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBogusNumpyArrayType",
    "opBoolMatrix",
    "opBoolSeq",
    "opByteMatrix",
    "opByteSeq",
    "opComplex128Seq",
    "opD",
    "opDoubleMatrix",
    "opDoubleSeq",
    "opFloatMatrix",
    "opFloatSeq",
    "opIntMatrix",
    "opIntSeq",
    "opLongMatrix",
    "opLongSeq",
    "opShortMatrix",
    "opShortSeq",
    "shutdown"
};
const ::std::string iceC_Test_NumPy_Custom_opBoolSeq_name = "opBoolSeq";
const ::std::string iceC_Test_NumPy_Custom_opByteSeq_name = "opByteSeq";
const ::std::string iceC_Test_NumPy_Custom_opShortSeq_name = "opShortSeq";
const ::std::string iceC_Test_NumPy_Custom_opIntSeq_name = "opIntSeq";
const ::std::string iceC_Test_NumPy_Custom_opLongSeq_name = "opLongSeq";
const ::std::string iceC_Test_NumPy_Custom_opFloatSeq_name = "opFloatSeq";
const ::std::string iceC_Test_NumPy_Custom_opDoubleSeq_name = "opDoubleSeq";
const ::std::string iceC_Test_NumPy_Custom_opComplex128Seq_name = "opComplex128Seq";
const ::std::string iceC_Test_NumPy_Custom_opBoolMatrix_name = "opBoolMatrix";
const ::std::string iceC_Test_NumPy_Custom_opByteMatrix_name = "opByteMatrix";
const ::std::string iceC_Test_NumPy_Custom_opShortMatrix_name = "opShortMatrix";
const ::std::string iceC_Test_NumPy_Custom_opIntMatrix_name = "opIntMatrix";
const ::std::string iceC_Test_NumPy_Custom_opLongMatrix_name = "opLongMatrix";
const ::std::string iceC_Test_NumPy_Custom_opFloatMatrix_name = "opFloatMatrix";
const ::std::string iceC_Test_NumPy_Custom_opDoubleMatrix_name = "opDoubleMatrix";
const ::std::string iceC_Test_NumPy_Custom_opBogusNumpyArrayType_name = "opBogusNumpyArrayType";
const ::std::string iceC_Test_NumPy_Custom_opD_name = "opD";
const ::std::string iceC_Test_NumPy_Custom_shutdown_name = "shutdown";

}

bool
Test::NumPy::Custom::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_NumPy_Custom_ids, iceC_Test_NumPy_Custom_ids + 2, s);
}

::std::vector<::std::string>
Test::NumPy::Custom::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_NumPy_Custom_ids[0], &iceC_Test_NumPy_Custom_ids[2]);
}

::std::string
Test::NumPy::Custom::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::NumPy::Custom::ice_staticId()
{
    static const ::std::string typeId = "::Test::NumPy::Custom";
    return typeId;
}

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opBoolSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    BoolSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    BoolSeq2 iceP_v2;
    BoolSeq1 ret = this->opBoolSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opByteSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    ByteSeq2 iceP_v2;
    ByteSeq1 ret = this->opByteSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opShortSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ShortSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    ShortSeq2 iceP_v2;
    ShortSeq1 ret = this->opShortSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opIntSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    IntSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    IntSeq2 iceP_v2;
    IntSeq1 ret = this->opIntSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opLongSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LongSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    LongSeq2 iceP_v2;
    LongSeq1 ret = this->opLongSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opFloatSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    FloatSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    FloatSeq2 iceP_v2;
    FloatSeq1 ret = this->opFloatSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opDoubleSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    DoubleSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    DoubleSeq2 iceP_v2;
    DoubleSeq1 ret = this->opDoubleSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opComplex128Seq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Complex128Seq iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    Complex128Seq ret = this->opComplex128Seq(::std::move(iceP_v1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opBoolMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    BoolSeq1 ret = this->opBoolMatrix(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opByteMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ByteSeq1 ret = this->opByteMatrix(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opShortMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ShortSeq1 ret = this->opShortMatrix(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opIntMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    IntSeq1 ret = this->opIntMatrix(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opLongMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    LongSeq1 ret = this->opLongMatrix(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opFloatMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    FloatSeq1 ret = this->opFloatMatrix(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opDoubleMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    DoubleSeq1 ret = this->opDoubleMatrix(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opBogusNumpyArrayType(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    BoolSeq1 ret = this->opBogusNumpyArrayType(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<D> iceP_d;
    istr->readAll(iceP_d);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<D> ret = this->opD(::std::move(iceP_d), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_NumPy_Custom_ops, iceC_Test_NumPy_Custom_ops + 22, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_NumPy_Custom_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opBogusNumpyArrayType(in, current);
        }
        case 5:
        {
            return _iceD_opBoolMatrix(in, current);
        }
        case 6:
        {
            return _iceD_opBoolSeq(in, current);
        }
        case 7:
        {
            return _iceD_opByteMatrix(in, current);
        }
        case 8:
        {
            return _iceD_opByteSeq(in, current);
        }
        case 9:
        {
            return _iceD_opComplex128Seq(in, current);
        }
        case 10:
        {
            return _iceD_opD(in, current);
        }
        case 11:
        {
            return _iceD_opDoubleMatrix(in, current);
        }
        case 12:
        {
            return _iceD_opDoubleSeq(in, current);
        }
        case 13:
        {
            return _iceD_opFloatMatrix(in, current);
        }
        case 14:
        {
            return _iceD_opFloatSeq(in, current);
        }
        case 15:
        {
            return _iceD_opIntMatrix(in, current);
        }
        case 16:
        {
            return _iceD_opIntSeq(in, current);
        }
        case 17:
        {
            return _iceD_opLongMatrix(in, current);
        }
        case 18:
        {
            return _iceD_opLongSeq(in, current);
        }
        case 19:
        {
            return _iceD_opShortMatrix(in, current);
        }
        case 20:
        {
            return _iceD_opShortSeq(in, current);
        }
        case 21:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::NumPy::D::~D()
{
}

const ::std::string&
Test::NumPy::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::NumPy::D";
    return typeId;
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opBoolSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpBoolSeqResult>>& outAsync, const BoolSeq1& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opBoolSeq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opBoolSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpBoolSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opByteSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpByteSeqResult>>& outAsync, const ByteSeq1& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opByteSeq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opByteSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpByteSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opShortSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpShortSeqResult>>& outAsync, const ShortSeq1& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opShortSeq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opShortSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpShortSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opIntSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpIntSeqResult>>& outAsync, const IntSeq1& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opIntSeq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opIntSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpIntSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opLongSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpLongSeqResult>>& outAsync, const LongSeq1& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opLongSeq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opLongSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpLongSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opFloatSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpFloatSeqResult>>& outAsync, const FloatSeq1& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opFloatSeq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opFloatSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpFloatSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opDoubleSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpDoubleSeqResult>>& outAsync, const DoubleSeq1& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opDoubleSeq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opDoubleSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpDoubleSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opComplex128Seq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::Complex128Seq>>& outAsync, const Complex128Seq& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opComplex128Seq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opComplex128Seq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opBoolMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::BoolSeq1>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opBoolMatrix_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opBoolMatrix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opByteMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::ByteSeq1>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opByteMatrix_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opByteMatrix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opShortMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::ShortSeq1>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opShortMatrix_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opShortMatrix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opIntMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::IntSeq1>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opIntMatrix_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opIntMatrix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opLongMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::LongSeq1>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opLongMatrix_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opLongMatrix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opFloatMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::FloatSeq1>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opFloatMatrix_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opFloatMatrix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opDoubleMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::DoubleSeq1>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opDoubleMatrix_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opDoubleMatrix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opBogusNumpyArrayType(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::BoolSeq1>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opBogusNumpyArrayType_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opBogusNumpyArrayType_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::NumPy::D>>>& outAsync, const ::std::shared_ptr<D>& iceP_d, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opD_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_d);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<D> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_NumPy_Custom_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::NumPy::CustomPrx::_newInstance() const
{
    return ::IceInternal::createProxy<CustomPrx>();
}
/// \endcond

const ::std::string&
Test::NumPy::CustomPrx::ice_staticId()
{
    return Custom::ice_staticId();
}

#else // C++98 mapping

namespace
{

namespace
{

const ::std::string iceC_Test_NumPy_Custom_opBoolSeq_name = "opBoolSeq";

const ::std::string iceC_Test_NumPy_Custom_opByteSeq_name = "opByteSeq";

const ::std::string iceC_Test_NumPy_Custom_opShortSeq_name = "opShortSeq";

const ::std::string iceC_Test_NumPy_Custom_opIntSeq_name = "opIntSeq";

const ::std::string iceC_Test_NumPy_Custom_opLongSeq_name = "opLongSeq";

const ::std::string iceC_Test_NumPy_Custom_opFloatSeq_name = "opFloatSeq";

const ::std::string iceC_Test_NumPy_Custom_opDoubleSeq_name = "opDoubleSeq";

const ::std::string iceC_Test_NumPy_Custom_opComplex128Seq_name = "opComplex128Seq";

const ::std::string iceC_Test_NumPy_Custom_opBoolMatrix_name = "opBoolMatrix";

const ::std::string iceC_Test_NumPy_Custom_opByteMatrix_name = "opByteMatrix";

const ::std::string iceC_Test_NumPy_Custom_opShortMatrix_name = "opShortMatrix";

const ::std::string iceC_Test_NumPy_Custom_opIntMatrix_name = "opIntMatrix";

const ::std::string iceC_Test_NumPy_Custom_opLongMatrix_name = "opLongMatrix";

const ::std::string iceC_Test_NumPy_Custom_opFloatMatrix_name = "opFloatMatrix";

const ::std::string iceC_Test_NumPy_Custom_opDoubleMatrix_name = "opDoubleMatrix";

const ::std::string iceC_Test_NumPy_Custom_opBogusNumpyArrayType_name = "opBogusNumpyArrayType";

const ::std::string iceC_Test_NumPy_Custom_opD_name = "opD";

const ::std::string iceC_Test_NumPy_Custom_shutdown_name = "shutdown";

}

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::NumPy::upCast(D* p) { return p; }

void
::IceProxy::Test::NumPy::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< D>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new D;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::NumPy::D::_newInstance() const
{
    return new D;
}
/// \endcond

const ::std::string&
IceProxy::Test::NumPy::D::ice_staticId()
{
    return ::Test::NumPy::D::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::NumPy::upCast(Custom* p) { return p; }

void
::IceProxy::Test::NumPy::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Custom>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Custom;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opBoolSeq(const ::Test::NumPy::BoolSeq1& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opBoolSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opBoolSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opBoolSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        result->endWriteParams();
        result->invoke(iceC_Test_NumPy_Custom_opBoolSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::BoolSeq1
IceProxy::Test::NumPy::Custom::end_opBoolSeq(::Test::NumPy::BoolSeq2& iceP_v2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opBoolSeq_name);
    ::Test::NumPy::BoolSeq1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::NumPy::Custom::_iceI_end_opBoolSeq(::Test::NumPy::BoolSeq2& iceP_v2, ::Test::NumPy::BoolSeq1& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opBoolSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opByteSeq(const ::Test::NumPy::ByteSeq1& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opByteSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opByteSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opByteSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        result->endWriteParams();
        result->invoke(iceC_Test_NumPy_Custom_opByteSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::ByteSeq1
IceProxy::Test::NumPy::Custom::end_opByteSeq(::Test::NumPy::ByteSeq2& iceP_v2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opByteSeq_name);
    ::Test::NumPy::ByteSeq1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::NumPy::Custom::_iceI_end_opByteSeq(::Test::NumPy::ByteSeq2& iceP_v2, ::Test::NumPy::ByteSeq1& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opByteSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opShortSeq(const ::Test::NumPy::ShortSeq1& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opShortSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opShortSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opShortSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        result->endWriteParams();
        result->invoke(iceC_Test_NumPy_Custom_opShortSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::ShortSeq1
IceProxy::Test::NumPy::Custom::end_opShortSeq(::Test::NumPy::ShortSeq2& iceP_v2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opShortSeq_name);
    ::Test::NumPy::ShortSeq1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::NumPy::Custom::_iceI_end_opShortSeq(::Test::NumPy::ShortSeq2& iceP_v2, ::Test::NumPy::ShortSeq1& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opShortSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opIntSeq(const ::Test::NumPy::IntSeq1& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opIntSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opIntSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opIntSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        result->endWriteParams();
        result->invoke(iceC_Test_NumPy_Custom_opIntSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::IntSeq1
IceProxy::Test::NumPy::Custom::end_opIntSeq(::Test::NumPy::IntSeq2& iceP_v2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opIntSeq_name);
    ::Test::NumPy::IntSeq1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::NumPy::Custom::_iceI_end_opIntSeq(::Test::NumPy::IntSeq2& iceP_v2, ::Test::NumPy::IntSeq1& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opIntSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opLongSeq(const ::Test::NumPy::LongSeq1& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opLongSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opLongSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opLongSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        result->endWriteParams();
        result->invoke(iceC_Test_NumPy_Custom_opLongSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::LongSeq1
IceProxy::Test::NumPy::Custom::end_opLongSeq(::Test::NumPy::LongSeq2& iceP_v2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opLongSeq_name);
    ::Test::NumPy::LongSeq1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::NumPy::Custom::_iceI_end_opLongSeq(::Test::NumPy::LongSeq2& iceP_v2, ::Test::NumPy::LongSeq1& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opLongSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opFloatSeq(const ::Test::NumPy::FloatSeq1& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opFloatSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opFloatSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opFloatSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        result->endWriteParams();
        result->invoke(iceC_Test_NumPy_Custom_opFloatSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::FloatSeq1
IceProxy::Test::NumPy::Custom::end_opFloatSeq(::Test::NumPy::FloatSeq2& iceP_v2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opFloatSeq_name);
    ::Test::NumPy::FloatSeq1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::NumPy::Custom::_iceI_end_opFloatSeq(::Test::NumPy::FloatSeq2& iceP_v2, ::Test::NumPy::FloatSeq1& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opFloatSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opDoubleSeq(const ::Test::NumPy::DoubleSeq1& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opDoubleSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opDoubleSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opDoubleSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        result->endWriteParams();
        result->invoke(iceC_Test_NumPy_Custom_opDoubleSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::DoubleSeq1
IceProxy::Test::NumPy::Custom::end_opDoubleSeq(::Test::NumPy::DoubleSeq2& iceP_v2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opDoubleSeq_name);
    ::Test::NumPy::DoubleSeq1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::NumPy::Custom::_iceI_end_opDoubleSeq(::Test::NumPy::DoubleSeq2& iceP_v2, ::Test::NumPy::DoubleSeq1& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opDoubleSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opComplex128Seq(const ::Test::NumPy::Complex128Seq& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opComplex128Seq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opComplex128Seq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opComplex128Seq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        result->endWriteParams();
        result->invoke(iceC_Test_NumPy_Custom_opComplex128Seq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::Complex128Seq
IceProxy::Test::NumPy::Custom::end_opComplex128Seq(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opComplex128Seq_name);
    ::Test::NumPy::Complex128Seq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opBoolMatrix(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opBoolMatrix_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opBoolMatrix_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opBoolMatrix_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_NumPy_Custom_opBoolMatrix_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::BoolSeq1
IceProxy::Test::NumPy::Custom::end_opBoolMatrix(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opBoolMatrix_name);
    ::Test::NumPy::BoolSeq1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opByteMatrix(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opByteMatrix_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opByteMatrix_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opByteMatrix_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_NumPy_Custom_opByteMatrix_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::ByteSeq1
IceProxy::Test::NumPy::Custom::end_opByteMatrix(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opByteMatrix_name);
    ::Test::NumPy::ByteSeq1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opShortMatrix(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opShortMatrix_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opShortMatrix_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opShortMatrix_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_NumPy_Custom_opShortMatrix_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::ShortSeq1
IceProxy::Test::NumPy::Custom::end_opShortMatrix(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opShortMatrix_name);
    ::Test::NumPy::ShortSeq1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opIntMatrix(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opIntMatrix_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opIntMatrix_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opIntMatrix_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_NumPy_Custom_opIntMatrix_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::IntSeq1
IceProxy::Test::NumPy::Custom::end_opIntMatrix(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opIntMatrix_name);
    ::Test::NumPy::IntSeq1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opLongMatrix(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opLongMatrix_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opLongMatrix_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opLongMatrix_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_NumPy_Custom_opLongMatrix_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::LongSeq1
IceProxy::Test::NumPy::Custom::end_opLongMatrix(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opLongMatrix_name);
    ::Test::NumPy::LongSeq1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opFloatMatrix(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opFloatMatrix_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opFloatMatrix_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opFloatMatrix_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_NumPy_Custom_opFloatMatrix_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::FloatSeq1
IceProxy::Test::NumPy::Custom::end_opFloatMatrix(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opFloatMatrix_name);
    ::Test::NumPy::FloatSeq1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opDoubleMatrix(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opDoubleMatrix_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opDoubleMatrix_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opDoubleMatrix_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_NumPy_Custom_opDoubleMatrix_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::DoubleSeq1
IceProxy::Test::NumPy::Custom::end_opDoubleMatrix(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opDoubleMatrix_name);
    ::Test::NumPy::DoubleSeq1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opBogusNumpyArrayType(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opBogusNumpyArrayType_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opBogusNumpyArrayType_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opBogusNumpyArrayType_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_NumPy_Custom_opBogusNumpyArrayType_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::BoolSeq1
IceProxy::Test::NumPy::Custom::end_opBogusNumpyArrayType(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opBogusNumpyArrayType_name);
    ::Test::NumPy::BoolSeq1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_opD(const ::Test::NumPy::DPtr& iceP_d, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_opD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_opD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_d);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_NumPy_Custom_opD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::NumPy::DPtr
IceProxy::Test::NumPy::Custom::end_opD(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_NumPy_Custom_opD_name);
    ::Test::NumPy::DPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::NumPy::Custom::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_NumPy_Custom_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_NumPy_Custom_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_NumPy_Custom_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::NumPy::Custom::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_NumPy_Custom_shutdown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::NumPy::Custom::_newInstance() const
{
    return new Custom;
}
/// \endcond

const ::std::string&
IceProxy::Test::NumPy::Custom::ice_staticId()
{
    return ::Test::NumPy::Custom::ice_staticId();
}

Test::NumPy::D::~D()
{
}

/// \cond INTERNAL
::Ice::Object* Test::NumPy::upCast(D* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::NumPy::D::ice_clone() const
{
    ::Ice::Object* p = new D(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_NumPy_D_ids[2] =
{
    "::Ice::Object",
    "::Test::NumPy::D"
};

}

bool
Test::NumPy::D::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_NumPy_D_ids, iceC_Test_NumPy_D_ids + 2, s);
}

::std::vector< ::std::string>
Test::NumPy::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_NumPy_D_ids[0], &iceC_Test_NumPy_D_ids[2]);
}

const ::std::string&
Test::NumPy::D::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::NumPy::D::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Test::NumPy::D";
    return typeId;
#else
    return iceC_Test_NumPy_D_ids[1];
#endif
}

/// \cond STREAM
void
Test::NumPy::D::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::NumPy::D::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::NumPy::D> iceC_Test_NumPy_D_init("::Test::NumPy::D");
}

::Ice::ValueFactoryPtr
Test::NumPy::D::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::NumPy::D::ice_staticId());
}

/// \cond INTERNAL
void
Test::NumPy::_icePatchObjectPtr(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(D::ice_staticId(), v);
    }
}
/// \endcond

Test::NumPy::Custom::~Custom()
{
}

/// \cond INTERNAL
::Ice::Object* Test::NumPy::upCast(Custom* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_NumPy_Custom_ids[2] =
{
    "::Ice::Object",
    "::Test::NumPy::Custom"
};

}

bool
Test::NumPy::Custom::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_NumPy_Custom_ids, iceC_Test_NumPy_Custom_ids + 2, s);
}

::std::vector< ::std::string>
Test::NumPy::Custom::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_NumPy_Custom_ids[0], &iceC_Test_NumPy_Custom_ids[2]);
}

const ::std::string&
Test::NumPy::Custom::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::NumPy::Custom::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Test::NumPy::Custom";
    return typeId;
#else
    return iceC_Test_NumPy_Custom_ids[1];
#endif
}

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opBoolSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    BoolSeq1 iceP_v1;
    istr->read(iceP_v1);
    inS.endReadParams();
    BoolSeq2 iceP_v2;
    BoolSeq1 ret = this->opBoolSeq(iceP_v1, iceP_v2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_v2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opByteSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ByteSeq1 iceP_v1;
    istr->read(iceP_v1);
    inS.endReadParams();
    ByteSeq2 iceP_v2;
    ByteSeq1 ret = this->opByteSeq(iceP_v1, iceP_v2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_v2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opShortSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ShortSeq1 iceP_v1;
    istr->read(iceP_v1);
    inS.endReadParams();
    ShortSeq2 iceP_v2;
    ShortSeq1 ret = this->opShortSeq(iceP_v1, iceP_v2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_v2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opIntSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IntSeq1 iceP_v1;
    istr->read(iceP_v1);
    inS.endReadParams();
    IntSeq2 iceP_v2;
    IntSeq1 ret = this->opIntSeq(iceP_v1, iceP_v2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_v2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opLongSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    LongSeq1 iceP_v1;
    istr->read(iceP_v1);
    inS.endReadParams();
    LongSeq2 iceP_v2;
    LongSeq1 ret = this->opLongSeq(iceP_v1, iceP_v2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_v2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opFloatSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    FloatSeq1 iceP_v1;
    istr->read(iceP_v1);
    inS.endReadParams();
    FloatSeq2 iceP_v2;
    FloatSeq1 ret = this->opFloatSeq(iceP_v1, iceP_v2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_v2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opDoubleSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    DoubleSeq1 iceP_v1;
    istr->read(iceP_v1);
    inS.endReadParams();
    DoubleSeq2 iceP_v2;
    DoubleSeq1 ret = this->opDoubleSeq(iceP_v1, iceP_v2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_v2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opComplex128Seq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    Complex128Seq iceP_v1;
    istr->read(iceP_v1);
    inS.endReadParams();
    Complex128Seq ret = this->opComplex128Seq(iceP_v1, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opBoolMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    BoolSeq1 ret = this->opBoolMatrix(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opByteMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ByteSeq1 ret = this->opByteMatrix(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opShortMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ShortSeq1 ret = this->opShortMatrix(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opIntMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    IntSeq1 ret = this->opIntMatrix(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opLongMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    LongSeq1 ret = this->opLongMatrix(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opFloatMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    FloatSeq1 ret = this->opFloatMatrix(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opDoubleMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    DoubleSeq1 ret = this->opDoubleMatrix(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opBogusNumpyArrayType(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    BoolSeq1 ret = this->opBogusNumpyArrayType(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    DPtr iceP_d;
    istr->read(iceP_d);
    istr->readPendingValues();
    inS.endReadParams();
    DPtr ret = this->opD(iceP_d, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_NumPy_Custom_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBogusNumpyArrayType",
    "opBoolMatrix",
    "opBoolSeq",
    "opByteMatrix",
    "opByteSeq",
    "opComplex128Seq",
    "opD",
    "opDoubleMatrix",
    "opDoubleSeq",
    "opFloatMatrix",
    "opFloatSeq",
    "opIntMatrix",
    "opIntSeq",
    "opLongMatrix",
    "opLongSeq",
    "opShortMatrix",
    "opShortSeq",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_NumPy_Custom_all, iceC_Test_NumPy_Custom_all + 22, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_NumPy_Custom_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opBogusNumpyArrayType(in, current);
        }
        case 5:
        {
            return _iceD_opBoolMatrix(in, current);
        }
        case 6:
        {
            return _iceD_opBoolSeq(in, current);
        }
        case 7:
        {
            return _iceD_opByteMatrix(in, current);
        }
        case 8:
        {
            return _iceD_opByteSeq(in, current);
        }
        case 9:
        {
            return _iceD_opComplex128Seq(in, current);
        }
        case 10:
        {
            return _iceD_opD(in, current);
        }
        case 11:
        {
            return _iceD_opDoubleMatrix(in, current);
        }
        case 12:
        {
            return _iceD_opDoubleSeq(in, current);
        }
        case 13:
        {
            return _iceD_opFloatMatrix(in, current);
        }
        case 14:
        {
            return _iceD_opFloatSeq(in, current);
        }
        case 15:
        {
            return _iceD_opIntMatrix(in, current);
        }
        case 16:
        {
            return _iceD_opIntSeq(in, current);
        }
        case 17:
        {
            return _iceD_opLongMatrix(in, current);
        }
        case 18:
        {
            return _iceD_opLongSeq(in, current);
        }
        case 19:
        {
            return _iceD_opShortMatrix(in, current);
        }
        case 20:
        {
            return _iceD_opShortSeq(in, current);
        }
        case 21:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::NumPy::Custom::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Custom, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::NumPy::Custom::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Custom, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::NumPy::_icePatchObjectPtr(CustomPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CustomPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Custom::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
