//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestNumPy.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <TestNumPy.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::NumPy::D> iceC_Test_NumPy_D_init("::Test::NumPy::D");

const ::std::string iceC_Test_NumPy_Custom_ids[2] =
{
    "::Ice::Object",
    "::Test::NumPy::Custom"
};
const ::std::string iceC_Test_NumPy_Custom_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBogusNumpyArrayType",
    "opBoolMatrix",
    "opBoolSeq",
    "opByteMatrix",
    "opByteSeq",
    "opComplex128Seq",
    "opD",
    "opDoubleMatrix",
    "opDoubleSeq",
    "opFloatMatrix",
    "opFloatSeq",
    "opIntMatrix",
    "opIntSeq",
    "opLongMatrix",
    "opLongSeq",
    "opShortMatrix",
    "opShortSeq",
    "shutdown"
};
const ::std::string iceC_Test_NumPy_Custom_opBoolSeq_name = "opBoolSeq";
const ::std::string iceC_Test_NumPy_Custom_opByteSeq_name = "opByteSeq";
const ::std::string iceC_Test_NumPy_Custom_opShortSeq_name = "opShortSeq";
const ::std::string iceC_Test_NumPy_Custom_opIntSeq_name = "opIntSeq";
const ::std::string iceC_Test_NumPy_Custom_opLongSeq_name = "opLongSeq";
const ::std::string iceC_Test_NumPy_Custom_opFloatSeq_name = "opFloatSeq";
const ::std::string iceC_Test_NumPy_Custom_opDoubleSeq_name = "opDoubleSeq";
const ::std::string iceC_Test_NumPy_Custom_opComplex128Seq_name = "opComplex128Seq";
const ::std::string iceC_Test_NumPy_Custom_opBoolMatrix_name = "opBoolMatrix";
const ::std::string iceC_Test_NumPy_Custom_opByteMatrix_name = "opByteMatrix";
const ::std::string iceC_Test_NumPy_Custom_opShortMatrix_name = "opShortMatrix";
const ::std::string iceC_Test_NumPy_Custom_opIntMatrix_name = "opIntMatrix";
const ::std::string iceC_Test_NumPy_Custom_opLongMatrix_name = "opLongMatrix";
const ::std::string iceC_Test_NumPy_Custom_opFloatMatrix_name = "opFloatMatrix";
const ::std::string iceC_Test_NumPy_Custom_opDoubleMatrix_name = "opDoubleMatrix";
const ::std::string iceC_Test_NumPy_Custom_opBogusNumpyArrayType_name = "opBogusNumpyArrayType";
const ::std::string iceC_Test_NumPy_Custom_opD_name = "opD";
const ::std::string iceC_Test_NumPy_Custom_shutdown_name = "shutdown";

}

::Test::NumPy::BoolSeq1
Test::NumPy::CustomPrx::opBoolSeq(const BoolSeq1& iceP_v1, BoolSeq2& iceP_v2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<BoolSeq1, BoolSeq2>>(true, this, &CustomPrx::_iceI_opBoolSeq, iceP_v1, context).get();
    iceP_v2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::NumPy::BoolSeq1, ::Test::NumPy::BoolSeq2>>
Test::NumPy::CustomPrx::opBoolSeqAsync(const BoolSeq1& iceP_v1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<BoolSeq1, BoolSeq2>, ::std::promise>(false, this, &CustomPrx::_iceI_opBoolSeq, iceP_v1, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opBoolSeqAsync(const BoolSeq1& iceP_v1,
                                       ::std::function<void (::Test::NumPy::BoolSeq1, ::Test::NumPy::BoolSeq2)> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<BoolSeq1, BoolSeq2>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<BoolSeq1, BoolSeq2>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opBoolSeq, iceP_v1, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opBoolSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<BoolSeq1, BoolSeq2>>>& outAsync, const BoolSeq1& iceP_v1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opBoolSeq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opBoolSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<BoolSeq1, BoolSeq2> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::NumPy::ByteSeq1
Test::NumPy::CustomPrx::opByteSeq(const ByteSeq1& iceP_v1, ByteSeq2& iceP_v2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<ByteSeq1, ByteSeq2>>(true, this, &CustomPrx::_iceI_opByteSeq, iceP_v1, context).get();
    iceP_v2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::NumPy::ByteSeq1, ::Test::NumPy::ByteSeq2>>
Test::NumPy::CustomPrx::opByteSeqAsync(const ByteSeq1& iceP_v1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<ByteSeq1, ByteSeq2>, ::std::promise>(false, this, &CustomPrx::_iceI_opByteSeq, iceP_v1, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opByteSeqAsync(const ByteSeq1& iceP_v1,
                                       ::std::function<void (::Test::NumPy::ByteSeq1, ::Test::NumPy::ByteSeq2)> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<ByteSeq1, ByteSeq2>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<ByteSeq1, ByteSeq2>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opByteSeq, iceP_v1, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opByteSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ByteSeq1, ByteSeq2>>>& outAsync, const ByteSeq1& iceP_v1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opByteSeq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opByteSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ByteSeq1, ByteSeq2> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::NumPy::ShortSeq1
Test::NumPy::CustomPrx::opShortSeq(const ShortSeq1& iceP_v1, ShortSeq2& iceP_v2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<ShortSeq1, ShortSeq2>>(true, this, &CustomPrx::_iceI_opShortSeq, iceP_v1, context).get();
    iceP_v2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::NumPy::ShortSeq1, ::Test::NumPy::ShortSeq2>>
Test::NumPy::CustomPrx::opShortSeqAsync(const ShortSeq1& iceP_v1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<ShortSeq1, ShortSeq2>, ::std::promise>(false, this, &CustomPrx::_iceI_opShortSeq, iceP_v1, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opShortSeqAsync(const ShortSeq1& iceP_v1,
                                        ::std::function<void (::Test::NumPy::ShortSeq1, ::Test::NumPy::ShortSeq2)> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<ShortSeq1, ShortSeq2>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<ShortSeq1, ShortSeq2>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opShortSeq, iceP_v1, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opShortSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ShortSeq1, ShortSeq2>>>& outAsync, const ShortSeq1& iceP_v1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opShortSeq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opShortSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ShortSeq1, ShortSeq2> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::NumPy::IntSeq1
Test::NumPy::CustomPrx::opIntSeq(const IntSeq1& iceP_v1, IntSeq2& iceP_v2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<IntSeq1, IntSeq2>>(true, this, &CustomPrx::_iceI_opIntSeq, iceP_v1, context).get();
    iceP_v2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::NumPy::IntSeq1, ::Test::NumPy::IntSeq2>>
Test::NumPy::CustomPrx::opIntSeqAsync(const IntSeq1& iceP_v1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<IntSeq1, IntSeq2>, ::std::promise>(false, this, &CustomPrx::_iceI_opIntSeq, iceP_v1, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opIntSeqAsync(const IntSeq1& iceP_v1,
                                      ::std::function<void (::Test::NumPy::IntSeq1, ::Test::NumPy::IntSeq2)> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<IntSeq1, IntSeq2>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<IntSeq1, IntSeq2>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opIntSeq, iceP_v1, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opIntSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<IntSeq1, IntSeq2>>>& outAsync, const IntSeq1& iceP_v1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opIntSeq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opIntSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<IntSeq1, IntSeq2> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::NumPy::LongSeq1
Test::NumPy::CustomPrx::opLongSeq(const LongSeq1& iceP_v1, LongSeq2& iceP_v2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<LongSeq1, LongSeq2>>(true, this, &CustomPrx::_iceI_opLongSeq, iceP_v1, context).get();
    iceP_v2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::NumPy::LongSeq1, ::Test::NumPy::LongSeq2>>
Test::NumPy::CustomPrx::opLongSeqAsync(const LongSeq1& iceP_v1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<LongSeq1, LongSeq2>, ::std::promise>(false, this, &CustomPrx::_iceI_opLongSeq, iceP_v1, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opLongSeqAsync(const LongSeq1& iceP_v1,
                                       ::std::function<void (::Test::NumPy::LongSeq1, ::Test::NumPy::LongSeq2)> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<LongSeq1, LongSeq2>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<LongSeq1, LongSeq2>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opLongSeq, iceP_v1, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opLongSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<LongSeq1, LongSeq2>>>& outAsync, const LongSeq1& iceP_v1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opLongSeq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opLongSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<LongSeq1, LongSeq2> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::NumPy::FloatSeq1
Test::NumPy::CustomPrx::opFloatSeq(const FloatSeq1& iceP_v1, FloatSeq2& iceP_v2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<FloatSeq1, FloatSeq2>>(true, this, &CustomPrx::_iceI_opFloatSeq, iceP_v1, context).get();
    iceP_v2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::NumPy::FloatSeq1, ::Test::NumPy::FloatSeq2>>
Test::NumPy::CustomPrx::opFloatSeqAsync(const FloatSeq1& iceP_v1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<FloatSeq1, FloatSeq2>, ::std::promise>(false, this, &CustomPrx::_iceI_opFloatSeq, iceP_v1, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opFloatSeqAsync(const FloatSeq1& iceP_v1,
                                        ::std::function<void (::Test::NumPy::FloatSeq1, ::Test::NumPy::FloatSeq2)> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<FloatSeq1, FloatSeq2>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<FloatSeq1, FloatSeq2>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opFloatSeq, iceP_v1, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opFloatSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<FloatSeq1, FloatSeq2>>>& outAsync, const FloatSeq1& iceP_v1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opFloatSeq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opFloatSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<FloatSeq1, FloatSeq2> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::NumPy::DoubleSeq1
Test::NumPy::CustomPrx::opDoubleSeq(const DoubleSeq1& iceP_v1, DoubleSeq2& iceP_v2, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<DoubleSeq1, DoubleSeq2>>(true, this, &CustomPrx::_iceI_opDoubleSeq, iceP_v1, context).get();
    iceP_v2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::NumPy::DoubleSeq1, ::Test::NumPy::DoubleSeq2>>
Test::NumPy::CustomPrx::opDoubleSeqAsync(const DoubleSeq1& iceP_v1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<DoubleSeq1, DoubleSeq2>, ::std::promise>(false, this, &CustomPrx::_iceI_opDoubleSeq, iceP_v1, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opDoubleSeqAsync(const DoubleSeq1& iceP_v1,
                                         ::std::function<void (::Test::NumPy::DoubleSeq1, ::Test::NumPy::DoubleSeq2)> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<DoubleSeq1, DoubleSeq2>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<DoubleSeq1, DoubleSeq2>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opDoubleSeq, iceP_v1, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opDoubleSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<DoubleSeq1, DoubleSeq2>>>& outAsync, const DoubleSeq1& iceP_v1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opDoubleSeq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opDoubleSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<DoubleSeq1, DoubleSeq2> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::NumPy::Complex128Seq
Test::NumPy::CustomPrx::opComplex128Seq(const Complex128Seq& iceP_v1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<Complex128Seq>(true, this, &CustomPrx::_iceI_opComplex128Seq, iceP_v1, context).get();
}

::std::future<::Test::NumPy::Complex128Seq>
Test::NumPy::CustomPrx::opComplex128SeqAsync(const Complex128Seq& iceP_v1, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<Complex128Seq, ::std::promise>(false, this, &CustomPrx::_iceI_opComplex128Seq, iceP_v1, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opComplex128SeqAsync(const Complex128Seq& iceP_v1,
                                             ::std::function<void (::Test::NumPy::Complex128Seq)> response,
                                             ::std::function<void(::std::exception_ptr)> ex,
                                             ::std::function<void(bool)> sent,
                                             const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<Complex128Seq>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opComplex128Seq, iceP_v1, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opComplex128Seq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Complex128Seq>>& outAsync, const Complex128Seq& iceP_v1, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opComplex128Seq_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opComplex128Seq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr);
}
/// \endcond

::Test::NumPy::BoolSeq1
Test::NumPy::CustomPrx::opBoolMatrix(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<BoolSeq1>(true, this, &CustomPrx::_iceI_opBoolMatrix, context).get();
}

::std::future<::Test::NumPy::BoolSeq1>
Test::NumPy::CustomPrx::opBoolMatrixAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<BoolSeq1, ::std::promise>(false, this, &CustomPrx::_iceI_opBoolMatrix, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opBoolMatrixAsync(::std::function<void (::Test::NumPy::BoolSeq1)> response,
                                          ::std::function<void(::std::exception_ptr)> ex,
                                          ::std::function<void(bool)> sent,
                                          const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<BoolSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opBoolMatrix, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opBoolMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<BoolSeq1>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opBoolMatrix_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opBoolMatrix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::Test::NumPy::ByteSeq1
Test::NumPy::CustomPrx::opByteMatrix(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<ByteSeq1>(true, this, &CustomPrx::_iceI_opByteMatrix, context).get();
}

::std::future<::Test::NumPy::ByteSeq1>
Test::NumPy::CustomPrx::opByteMatrixAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<ByteSeq1, ::std::promise>(false, this, &CustomPrx::_iceI_opByteMatrix, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opByteMatrixAsync(::std::function<void (::Test::NumPy::ByteSeq1)> response,
                                          ::std::function<void(::std::exception_ptr)> ex,
                                          ::std::function<void(bool)> sent,
                                          const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<ByteSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opByteMatrix, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opByteMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<ByteSeq1>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opByteMatrix_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opByteMatrix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::Test::NumPy::ShortSeq1
Test::NumPy::CustomPrx::opShortMatrix(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<ShortSeq1>(true, this, &CustomPrx::_iceI_opShortMatrix, context).get();
}

::std::future<::Test::NumPy::ShortSeq1>
Test::NumPy::CustomPrx::opShortMatrixAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<ShortSeq1, ::std::promise>(false, this, &CustomPrx::_iceI_opShortMatrix, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opShortMatrixAsync(::std::function<void (::Test::NumPy::ShortSeq1)> response,
                                           ::std::function<void(::std::exception_ptr)> ex,
                                           ::std::function<void(bool)> sent,
                                           const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<ShortSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opShortMatrix, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opShortMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<ShortSeq1>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opShortMatrix_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opShortMatrix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::Test::NumPy::IntSeq1
Test::NumPy::CustomPrx::opIntMatrix(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<IntSeq1>(true, this, &CustomPrx::_iceI_opIntMatrix, context).get();
}

::std::future<::Test::NumPy::IntSeq1>
Test::NumPy::CustomPrx::opIntMatrixAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<IntSeq1, ::std::promise>(false, this, &CustomPrx::_iceI_opIntMatrix, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opIntMatrixAsync(::std::function<void (::Test::NumPy::IntSeq1)> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<IntSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opIntMatrix, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opIntMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<IntSeq1>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opIntMatrix_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opIntMatrix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::Test::NumPy::LongSeq1
Test::NumPy::CustomPrx::opLongMatrix(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<LongSeq1>(true, this, &CustomPrx::_iceI_opLongMatrix, context).get();
}

::std::future<::Test::NumPy::LongSeq1>
Test::NumPy::CustomPrx::opLongMatrixAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<LongSeq1, ::std::promise>(false, this, &CustomPrx::_iceI_opLongMatrix, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opLongMatrixAsync(::std::function<void (::Test::NumPy::LongSeq1)> response,
                                          ::std::function<void(::std::exception_ptr)> ex,
                                          ::std::function<void(bool)> sent,
                                          const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<LongSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opLongMatrix, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opLongMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<LongSeq1>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opLongMatrix_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opLongMatrix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::Test::NumPy::FloatSeq1
Test::NumPy::CustomPrx::opFloatMatrix(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<FloatSeq1>(true, this, &CustomPrx::_iceI_opFloatMatrix, context).get();
}

::std::future<::Test::NumPy::FloatSeq1>
Test::NumPy::CustomPrx::opFloatMatrixAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<FloatSeq1, ::std::promise>(false, this, &CustomPrx::_iceI_opFloatMatrix, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opFloatMatrixAsync(::std::function<void (::Test::NumPy::FloatSeq1)> response,
                                           ::std::function<void(::std::exception_ptr)> ex,
                                           ::std::function<void(bool)> sent,
                                           const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<FloatSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opFloatMatrix, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opFloatMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<FloatSeq1>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opFloatMatrix_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opFloatMatrix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::Test::NumPy::DoubleSeq1
Test::NumPy::CustomPrx::opDoubleMatrix(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<DoubleSeq1>(true, this, &CustomPrx::_iceI_opDoubleMatrix, context).get();
}

::std::future<::Test::NumPy::DoubleSeq1>
Test::NumPy::CustomPrx::opDoubleMatrixAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<DoubleSeq1, ::std::promise>(false, this, &CustomPrx::_iceI_opDoubleMatrix, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opDoubleMatrixAsync(::std::function<void (::Test::NumPy::DoubleSeq1)> response,
                                            ::std::function<void(::std::exception_ptr)> ex,
                                            ::std::function<void(bool)> sent,
                                            const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<DoubleSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opDoubleMatrix, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opDoubleMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<DoubleSeq1>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opDoubleMatrix_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opDoubleMatrix_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::Test::NumPy::BoolSeq1
Test::NumPy::CustomPrx::opBogusNumpyArrayType(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<BoolSeq1>(true, this, &CustomPrx::_iceI_opBogusNumpyArrayType, context).get();
}

::std::future<::Test::NumPy::BoolSeq1>
Test::NumPy::CustomPrx::opBogusNumpyArrayTypeAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<BoolSeq1, ::std::promise>(false, this, &CustomPrx::_iceI_opBogusNumpyArrayType, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opBogusNumpyArrayTypeAsync(::std::function<void (::Test::NumPy::BoolSeq1)> response,
                                                   ::std::function<void(::std::exception_ptr)> ex,
                                                   ::std::function<void(bool)> sent,
                                                   const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<BoolSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opBogusNumpyArrayType, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opBogusNumpyArrayType(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<BoolSeq1>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opBogusNumpyArrayType_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opBogusNumpyArrayType_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::std::shared_ptr<::Test::NumPy::D>
Test::NumPy::CustomPrx::opD(const ::std::shared_ptr<D>& iceP_d, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<D>>(true, this, &CustomPrx::_iceI_opD, iceP_d, context).get();
}

::std::future<::std::shared_ptr<::Test::NumPy::D>>
Test::NumPy::CustomPrx::opDAsync(const ::std::shared_ptr<D>& iceP_d, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<D>, ::std::promise>(false, this, &CustomPrx::_iceI_opD, iceP_d, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::opDAsync(const ::std::shared_ptr<D>& iceP_d,
                                 ::std::function<void (::std::shared_ptr<::Test::NumPy::D>)> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::shared_ptr<D>>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opD, iceP_d, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_opD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<D>>>& outAsync, const ::std::shared_ptr<D>& iceP_d, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_NumPy_Custom_opD_name);
    outAsync->invoke(iceC_Test_NumPy_Custom_opD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_d);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<D> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

void
Test::NumPy::CustomPrx::shutdown(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &CustomPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::NumPy::CustomPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &CustomPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::NumPy::CustomPrx::shutdownAsync(::std::function<void ()> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::NumPy::CustomPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_NumPy_Custom_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::NumPy::CustomPrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::NumPy::Custom";
    return typeId;
}

Test::NumPy::D::~D()
{
}

const ::std::string&
Test::NumPy::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::NumPy::D";
    return typeId;
}

bool
Test::NumPy::Custom::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_NumPy_Custom_ids, iceC_Test_NumPy_Custom_ids + 2, s);
}

::std::vector<::std::string>
Test::NumPy::Custom::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_NumPy_Custom_ids[0], &iceC_Test_NumPy_Custom_ids[2]);
}

::std::string
Test::NumPy::Custom::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::NumPy::Custom::ice_staticId()
{
    static const ::std::string typeId = "::Test::NumPy::Custom";
    return typeId;
}

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opBoolSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    BoolSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    BoolSeq2 iceP_v2;
    BoolSeq1 ret = this->opBoolSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opByteSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    ByteSeq2 iceP_v2;
    ByteSeq1 ret = this->opByteSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opShortSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ShortSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    ShortSeq2 iceP_v2;
    ShortSeq1 ret = this->opShortSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opIntSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    IntSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    IntSeq2 iceP_v2;
    IntSeq1 ret = this->opIntSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opLongSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LongSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    LongSeq2 iceP_v2;
    LongSeq1 ret = this->opLongSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opFloatSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    FloatSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    FloatSeq2 iceP_v2;
    FloatSeq1 ret = this->opFloatSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opDoubleSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    DoubleSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    DoubleSeq2 iceP_v2;
    DoubleSeq1 ret = this->opDoubleSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opComplex128Seq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Complex128Seq iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    Complex128Seq ret = this->opComplex128Seq(::std::move(iceP_v1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opBoolMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    BoolSeq1 ret = this->opBoolMatrix(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opByteMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ByteSeq1 ret = this->opByteMatrix(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opShortMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ShortSeq1 ret = this->opShortMatrix(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opIntMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    IntSeq1 ret = this->opIntMatrix(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opLongMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    LongSeq1 ret = this->opLongMatrix(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opFloatMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    FloatSeq1 ret = this->opFloatMatrix(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opDoubleMatrix(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    DoubleSeq1 ret = this->opDoubleMatrix(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opBogusNumpyArrayType(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    BoolSeq1 ret = this->opBogusNumpyArrayType(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_opD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<D> iceP_d;
    istr->readAll(iceP_d);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<D> ret = this->opD(::std::move(iceP_d), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::NumPy::Custom::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_NumPy_Custom_ops, iceC_Test_NumPy_Custom_ops + 22, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_NumPy_Custom_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opBogusNumpyArrayType(in, current);
        }
        case 5:
        {
            return _iceD_opBoolMatrix(in, current);
        }
        case 6:
        {
            return _iceD_opBoolSeq(in, current);
        }
        case 7:
        {
            return _iceD_opByteMatrix(in, current);
        }
        case 8:
        {
            return _iceD_opByteSeq(in, current);
        }
        case 9:
        {
            return _iceD_opComplex128Seq(in, current);
        }
        case 10:
        {
            return _iceD_opD(in, current);
        }
        case 11:
        {
            return _iceD_opDoubleMatrix(in, current);
        }
        case 12:
        {
            return _iceD_opDoubleSeq(in, current);
        }
        case 13:
        {
            return _iceD_opFloatMatrix(in, current);
        }
        case 14:
        {
            return _iceD_opFloatSeq(in, current);
        }
        case 15:
        {
            return _iceD_opIntMatrix(in, current);
        }
        case 16:
        {
            return _iceD_opIntSeq(in, current);
        }
        case 17:
        {
            return _iceD_opLongMatrix(in, current);
        }
        case 18:
        {
            return _iceD_opLongSeq(in, current);
        }
        case 19:
        {
            return _iceD_opShortMatrix(in, current);
        }
        case 20:
        {
            return _iceD_opShortSeq(in, current);
        }
        case 21:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
