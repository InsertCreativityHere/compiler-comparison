//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `TestNumPy.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __TestNumPy_h__
#define __TestNumPy_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{


namespace NumPy
{

class D;
class Custom;
class CustomPrx;

}

}

namespace Test
{

namespace NumPy
{

using BoolSeq1 = ::std::vector<bool>;

using BoolSeq2 = ::std::vector<bool>;

using ByteSeq1 = ::std::vector<::Ice::Byte>;

using ByteSeq2 = ::std::vector<::Ice::Byte>;

using ShortSeq1 = ::std::vector<short>;

using ShortSeq2 = ::std::vector<short>;

using IntSeq1 = ::std::vector<int>;

using IntSeq2 = ::std::vector<int>;

using LongSeq1 = ::std::vector<long long int>;

using LongSeq2 = ::std::vector<long long int>;

using FloatSeq1 = ::std::vector<float>;

using FloatSeq2 = ::std::vector<float>;

using DoubleSeq1 = ::std::vector<double>;

using DoubleSeq2 = ::std::vector<double>;

using Complex128Seq = ::std::vector<::Ice::Byte>;

}

}

namespace Test
{

namespace NumPy
{

class Custom : public virtual ::Ice::Object
{
public:

    using ProxyType = CustomPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to opBoolSeq.
     */
    struct OpBoolSeqResult
    {
        BoolSeq1 returnValue;
        BoolSeq2 v2;
    };

    virtual BoolSeq1 opBoolSeq(BoolSeq1 v1, BoolSeq2& v2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opBoolSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opByteSeq.
     */
    struct OpByteSeqResult
    {
        ByteSeq1 returnValue;
        ByteSeq2 v2;
    };

    virtual ByteSeq1 opByteSeq(ByteSeq1 v1, ByteSeq2& v2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opByteSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opShortSeq.
     */
    struct OpShortSeqResult
    {
        ShortSeq1 returnValue;
        ShortSeq2 v2;
    };

    virtual ShortSeq1 opShortSeq(ShortSeq1 v1, ShortSeq2& v2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opShortSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opIntSeq.
     */
    struct OpIntSeqResult
    {
        IntSeq1 returnValue;
        IntSeq2 v2;
    };

    virtual IntSeq1 opIntSeq(IntSeq1 v1, IntSeq2& v2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opLongSeq.
     */
    struct OpLongSeqResult
    {
        LongSeq1 returnValue;
        LongSeq2 v2;
    };

    virtual LongSeq1 opLongSeq(LongSeq1 v1, LongSeq2& v2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opLongSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opFloatSeq.
     */
    struct OpFloatSeqResult
    {
        FloatSeq1 returnValue;
        FloatSeq2 v2;
    };

    virtual FloatSeq1 opFloatSeq(FloatSeq1 v1, FloatSeq2& v2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opFloatSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opDoubleSeq.
     */
    struct OpDoubleSeqResult
    {
        DoubleSeq1 returnValue;
        DoubleSeq2 v2;
    };

    virtual DoubleSeq1 opDoubleSeq(DoubleSeq1 v1, DoubleSeq2& v2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opDoubleSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Complex128Seq opComplex128Seq(Complex128Seq v1, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opComplex128Seq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual BoolSeq1 opBoolMatrix(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opBoolMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ByteSeq1 opByteMatrix(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opByteMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ShortSeq1 opShortMatrix(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opShortMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual IntSeq1 opIntMatrix(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual LongSeq1 opLongMatrix(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opLongMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual FloatSeq1 opFloatMatrix(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opFloatMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual DoubleSeq1 opDoubleMatrix(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opDoubleMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual BoolSeq1 opBogusNumpyArrayType(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opBogusNumpyArrayType(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<D> opD(::std::shared_ptr<D> d, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opD(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

}

namespace Test
{

namespace NumPy
{

class D : public ::Ice::ValueHelper<D, ::Ice::Value>
{
public:

    virtual ~D();

    D() = default;

    D(const D&) = default;
    D(D&&) = default;
    D& operator=(const D&) = default;
    D& operator=(D&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    D(const std::optional<::Test::NumPy::BoolSeq1>& boolSeq, const std::optional<::Test::NumPy::ByteSeq1>& byteSeq, const std::optional<::Test::NumPy::ShortSeq1>& shortSeq, const std::optional<::Test::NumPy::IntSeq1>& intSeq, const std::optional<::Test::NumPy::LongSeq1>& longSeq, const std::optional<::Test::NumPy::FloatSeq1>& floatSeq, const std::optional<::Test::NumPy::DoubleSeq1>& doubleSeq) :
        boolSeq(boolSeq),
        byteSeq(byteSeq),
        shortSeq(shortSeq),
        intSeq(intSeq),
        longSeq(longSeq),
        floatSeq(floatSeq),
        doubleSeq(doubleSeq)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional<::Test::NumPy::BoolSeq1>&, const std::optional<::Test::NumPy::ByteSeq1>&, const std::optional<::Test::NumPy::ShortSeq1>&, const std::optional<::Test::NumPy::IntSeq1>&, const std::optional<::Test::NumPy::LongSeq1>&, const std::optional<::Test::NumPy::FloatSeq1>&, const std::optional<::Test::NumPy::DoubleSeq1>&> ice_tuple() const
    {
        return std::tie(boolSeq, byteSeq, shortSeq, intSeq, longSeq, floatSeq, doubleSeq);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional<::Test::NumPy::BoolSeq1> boolSeq;
    std::optional<::Test::NumPy::ByteSeq1> byteSeq;
    std::optional<::Test::NumPy::ShortSeq1> shortSeq;
    std::optional<::Test::NumPy::IntSeq1> intSeq;
    std::optional<::Test::NumPy::LongSeq1> longSeq;
    std::optional<::Test::NumPy::FloatSeq1> floatSeq;
    std::optional<::Test::NumPy::DoubleSeq1> doubleSeq;
};

/// \cond INTERNAL
static D _iceS_D_init;
/// \endcond

}

}

namespace Test
{

namespace NumPy
{

class CustomPrx : public virtual ::Ice::Proxy<CustomPrx, ::Ice::ObjectPrx>
{
public:

    BoolSeq1 opBoolSeq(const BoolSeq1& v1, BoolSeq2& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Custom::OpBoolSeqResult>(true, this, &CustomPrx::_iceI_opBoolSeq, v1, context).get();
        v2 = ::std::move(_result.v2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opBoolSeqAsync(const BoolSeq1& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Custom::OpBoolSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Custom::OpBoolSeqResult, P>(false, this, &CustomPrx::_iceI_opBoolSeq, v1, context);
    }

    ::std::function<void()>
    opBoolSeqAsync(const BoolSeq1& v1,
                   ::std::function<void(::Test::NumPy::BoolSeq1, ::Test::NumPy::BoolSeq2)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Custom::OpBoolSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.v2));
        };
        return _makeLambdaOutgoing<Custom::OpBoolSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opBoolSeq, v1, context);
    }

    /// \cond INTERNAL
    void _iceI_opBoolSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpBoolSeqResult>>&, const BoolSeq1&, const ::Ice::Context&);
    /// \endcond

    ByteSeq1 opByteSeq(const ByteSeq1& v1, ByteSeq2& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Custom::OpByteSeqResult>(true, this, &CustomPrx::_iceI_opByteSeq, v1, context).get();
        v2 = ::std::move(_result.v2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opByteSeqAsync(const ByteSeq1& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Custom::OpByteSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Custom::OpByteSeqResult, P>(false, this, &CustomPrx::_iceI_opByteSeq, v1, context);
    }

    ::std::function<void()>
    opByteSeqAsync(const ByteSeq1& v1,
                   ::std::function<void(::Test::NumPy::ByteSeq1, ::Test::NumPy::ByteSeq2)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Custom::OpByteSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.v2));
        };
        return _makeLambdaOutgoing<Custom::OpByteSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opByteSeq, v1, context);
    }

    /// \cond INTERNAL
    void _iceI_opByteSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpByteSeqResult>>&, const ByteSeq1&, const ::Ice::Context&);
    /// \endcond

    ShortSeq1 opShortSeq(const ShortSeq1& v1, ShortSeq2& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Custom::OpShortSeqResult>(true, this, &CustomPrx::_iceI_opShortSeq, v1, context).get();
        v2 = ::std::move(_result.v2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opShortSeqAsync(const ShortSeq1& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Custom::OpShortSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Custom::OpShortSeqResult, P>(false, this, &CustomPrx::_iceI_opShortSeq, v1, context);
    }

    ::std::function<void()>
    opShortSeqAsync(const ShortSeq1& v1,
                    ::std::function<void(::Test::NumPy::ShortSeq1, ::Test::NumPy::ShortSeq2)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Custom::OpShortSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.v2));
        };
        return _makeLambdaOutgoing<Custom::OpShortSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opShortSeq, v1, context);
    }

    /// \cond INTERNAL
    void _iceI_opShortSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpShortSeqResult>>&, const ShortSeq1&, const ::Ice::Context&);
    /// \endcond

    IntSeq1 opIntSeq(const IntSeq1& v1, IntSeq2& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Custom::OpIntSeqResult>(true, this, &CustomPrx::_iceI_opIntSeq, v1, context).get();
        v2 = ::std::move(_result.v2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opIntSeqAsync(const IntSeq1& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Custom::OpIntSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Custom::OpIntSeqResult, P>(false, this, &CustomPrx::_iceI_opIntSeq, v1, context);
    }

    ::std::function<void()>
    opIntSeqAsync(const IntSeq1& v1,
                  ::std::function<void(::Test::NumPy::IntSeq1, ::Test::NumPy::IntSeq2)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Custom::OpIntSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.v2));
        };
        return _makeLambdaOutgoing<Custom::OpIntSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opIntSeq, v1, context);
    }

    /// \cond INTERNAL
    void _iceI_opIntSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpIntSeqResult>>&, const IntSeq1&, const ::Ice::Context&);
    /// \endcond

    LongSeq1 opLongSeq(const LongSeq1& v1, LongSeq2& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Custom::OpLongSeqResult>(true, this, &CustomPrx::_iceI_opLongSeq, v1, context).get();
        v2 = ::std::move(_result.v2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opLongSeqAsync(const LongSeq1& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Custom::OpLongSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Custom::OpLongSeqResult, P>(false, this, &CustomPrx::_iceI_opLongSeq, v1, context);
    }

    ::std::function<void()>
    opLongSeqAsync(const LongSeq1& v1,
                   ::std::function<void(::Test::NumPy::LongSeq1, ::Test::NumPy::LongSeq2)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Custom::OpLongSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.v2));
        };
        return _makeLambdaOutgoing<Custom::OpLongSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opLongSeq, v1, context);
    }

    /// \cond INTERNAL
    void _iceI_opLongSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpLongSeqResult>>&, const LongSeq1&, const ::Ice::Context&);
    /// \endcond

    FloatSeq1 opFloatSeq(const FloatSeq1& v1, FloatSeq2& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Custom::OpFloatSeqResult>(true, this, &CustomPrx::_iceI_opFloatSeq, v1, context).get();
        v2 = ::std::move(_result.v2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opFloatSeqAsync(const FloatSeq1& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Custom::OpFloatSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Custom::OpFloatSeqResult, P>(false, this, &CustomPrx::_iceI_opFloatSeq, v1, context);
    }

    ::std::function<void()>
    opFloatSeqAsync(const FloatSeq1& v1,
                    ::std::function<void(::Test::NumPy::FloatSeq1, ::Test::NumPy::FloatSeq2)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Custom::OpFloatSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.v2));
        };
        return _makeLambdaOutgoing<Custom::OpFloatSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opFloatSeq, v1, context);
    }

    /// \cond INTERNAL
    void _iceI_opFloatSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpFloatSeqResult>>&, const FloatSeq1&, const ::Ice::Context&);
    /// \endcond

    DoubleSeq1 opDoubleSeq(const DoubleSeq1& v1, DoubleSeq2& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Custom::OpDoubleSeqResult>(true, this, &CustomPrx::_iceI_opDoubleSeq, v1, context).get();
        v2 = ::std::move(_result.v2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opDoubleSeqAsync(const DoubleSeq1& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Custom::OpDoubleSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Custom::OpDoubleSeqResult, P>(false, this, &CustomPrx::_iceI_opDoubleSeq, v1, context);
    }

    ::std::function<void()>
    opDoubleSeqAsync(const DoubleSeq1& v1,
                     ::std::function<void(::Test::NumPy::DoubleSeq1, ::Test::NumPy::DoubleSeq2)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Custom::OpDoubleSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.v2));
        };
        return _makeLambdaOutgoing<Custom::OpDoubleSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opDoubleSeq, v1, context);
    }

    /// \cond INTERNAL
    void _iceI_opDoubleSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpDoubleSeqResult>>&, const DoubleSeq1&, const ::Ice::Context&);
    /// \endcond

    Complex128Seq opComplex128Seq(const Complex128Seq& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::NumPy::Complex128Seq>(true, this, &CustomPrx::_iceI_opComplex128Seq, v1, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opComplex128SeqAsync(const Complex128Seq& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::NumPy::Complex128Seq>>().get_future())
    {
        return _makePromiseOutgoing<::Test::NumPy::Complex128Seq, P>(false, this, &CustomPrx::_iceI_opComplex128Seq, v1, context);
    }

    ::std::function<void()>
    opComplex128SeqAsync(const Complex128Seq& v1,
                         ::std::function<void(::Test::NumPy::Complex128Seq)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::Test::NumPy::Complex128Seq>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opComplex128Seq, v1, context);
    }

    /// \cond INTERNAL
    void _iceI_opComplex128Seq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::Complex128Seq>>&, const Complex128Seq&, const ::Ice::Context&);
    /// \endcond

    BoolSeq1 opBoolMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::NumPy::BoolSeq1>(true, this, &CustomPrx::_iceI_opBoolMatrix, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opBoolMatrixAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::NumPy::BoolSeq1>>().get_future())
    {
        return _makePromiseOutgoing<::Test::NumPy::BoolSeq1, P>(false, this, &CustomPrx::_iceI_opBoolMatrix, context);
    }

    ::std::function<void()>
    opBoolMatrixAsync(::std::function<void(::Test::NumPy::BoolSeq1)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::Test::NumPy::BoolSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opBoolMatrix, context);
    }

    /// \cond INTERNAL
    void _iceI_opBoolMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::BoolSeq1>>&, const ::Ice::Context&);
    /// \endcond

    ByteSeq1 opByteMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::NumPy::ByteSeq1>(true, this, &CustomPrx::_iceI_opByteMatrix, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opByteMatrixAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::NumPy::ByteSeq1>>().get_future())
    {
        return _makePromiseOutgoing<::Test::NumPy::ByteSeq1, P>(false, this, &CustomPrx::_iceI_opByteMatrix, context);
    }

    ::std::function<void()>
    opByteMatrixAsync(::std::function<void(::Test::NumPy::ByteSeq1)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::Test::NumPy::ByteSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opByteMatrix, context);
    }

    /// \cond INTERNAL
    void _iceI_opByteMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::ByteSeq1>>&, const ::Ice::Context&);
    /// \endcond

    ShortSeq1 opShortMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::NumPy::ShortSeq1>(true, this, &CustomPrx::_iceI_opShortMatrix, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opShortMatrixAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::NumPy::ShortSeq1>>().get_future())
    {
        return _makePromiseOutgoing<::Test::NumPy::ShortSeq1, P>(false, this, &CustomPrx::_iceI_opShortMatrix, context);
    }

    ::std::function<void()>
    opShortMatrixAsync(::std::function<void(::Test::NumPy::ShortSeq1)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::Test::NumPy::ShortSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opShortMatrix, context);
    }

    /// \cond INTERNAL
    void _iceI_opShortMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::ShortSeq1>>&, const ::Ice::Context&);
    /// \endcond

    IntSeq1 opIntMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::NumPy::IntSeq1>(true, this, &CustomPrx::_iceI_opIntMatrix, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opIntMatrixAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::NumPy::IntSeq1>>().get_future())
    {
        return _makePromiseOutgoing<::Test::NumPy::IntSeq1, P>(false, this, &CustomPrx::_iceI_opIntMatrix, context);
    }

    ::std::function<void()>
    opIntMatrixAsync(::std::function<void(::Test::NumPy::IntSeq1)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::Test::NumPy::IntSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opIntMatrix, context);
    }

    /// \cond INTERNAL
    void _iceI_opIntMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::IntSeq1>>&, const ::Ice::Context&);
    /// \endcond

    LongSeq1 opLongMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::NumPy::LongSeq1>(true, this, &CustomPrx::_iceI_opLongMatrix, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opLongMatrixAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::NumPy::LongSeq1>>().get_future())
    {
        return _makePromiseOutgoing<::Test::NumPy::LongSeq1, P>(false, this, &CustomPrx::_iceI_opLongMatrix, context);
    }

    ::std::function<void()>
    opLongMatrixAsync(::std::function<void(::Test::NumPy::LongSeq1)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::Test::NumPy::LongSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opLongMatrix, context);
    }

    /// \cond INTERNAL
    void _iceI_opLongMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::LongSeq1>>&, const ::Ice::Context&);
    /// \endcond

    FloatSeq1 opFloatMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::NumPy::FloatSeq1>(true, this, &CustomPrx::_iceI_opFloatMatrix, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opFloatMatrixAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::NumPy::FloatSeq1>>().get_future())
    {
        return _makePromiseOutgoing<::Test::NumPy::FloatSeq1, P>(false, this, &CustomPrx::_iceI_opFloatMatrix, context);
    }

    ::std::function<void()>
    opFloatMatrixAsync(::std::function<void(::Test::NumPy::FloatSeq1)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::Test::NumPy::FloatSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opFloatMatrix, context);
    }

    /// \cond INTERNAL
    void _iceI_opFloatMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::FloatSeq1>>&, const ::Ice::Context&);
    /// \endcond

    DoubleSeq1 opDoubleMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::NumPy::DoubleSeq1>(true, this, &CustomPrx::_iceI_opDoubleMatrix, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opDoubleMatrixAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::NumPy::DoubleSeq1>>().get_future())
    {
        return _makePromiseOutgoing<::Test::NumPy::DoubleSeq1, P>(false, this, &CustomPrx::_iceI_opDoubleMatrix, context);
    }

    ::std::function<void()>
    opDoubleMatrixAsync(::std::function<void(::Test::NumPy::DoubleSeq1)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::Test::NumPy::DoubleSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opDoubleMatrix, context);
    }

    /// \cond INTERNAL
    void _iceI_opDoubleMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::DoubleSeq1>>&, const ::Ice::Context&);
    /// \endcond

    BoolSeq1 opBogusNumpyArrayType(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::NumPy::BoolSeq1>(true, this, &CustomPrx::_iceI_opBogusNumpyArrayType, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opBogusNumpyArrayTypeAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::NumPy::BoolSeq1>>().get_future())
    {
        return _makePromiseOutgoing<::Test::NumPy::BoolSeq1, P>(false, this, &CustomPrx::_iceI_opBogusNumpyArrayType, context);
    }

    ::std::function<void()>
    opBogusNumpyArrayTypeAsync(::std::function<void(::Test::NumPy::BoolSeq1)> response,
                               ::std::function<void(::std::exception_ptr)> ex = nullptr,
                               ::std::function<void(bool)> sent = nullptr,
                               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::Test::NumPy::BoolSeq1>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opBogusNumpyArrayType, context);
    }

    /// \cond INTERNAL
    void _iceI_opBogusNumpyArrayType(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::NumPy::BoolSeq1>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<D> opD(const ::std::shared_ptr<D>& d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::NumPy::D>>(true, this, &CustomPrx::_iceI_opD, d, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opDAsync(const ::std::shared_ptr<D>& d, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::NumPy::D>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::NumPy::D>, P>(false, this, &CustomPrx::_iceI_opD, d, context);
    }

    ::std::function<void()>
    opDAsync(const ::std::shared_ptr<D>& d,
             ::std::function<void(::std::shared_ptr<::Test::NumPy::D>)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::NumPy::D>>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_opD, d, context);
    }

    /// \cond INTERNAL
    void _iceI_opD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::NumPy::D>>>&, const ::std::shared_ptr<D>&, const ::Ice::Context&);
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CustomPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CustomPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::NumPy::CustomPrx::_iceI_shutdown, context);
    }

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    CustomPrx() = default;
    friend ::std::shared_ptr<CustomPrx> IceInternal::createProxy<CustomPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter<::Test::NumPy::D, S>
{
    static void write(S* ostr, const ::Test::NumPy::D& v)
    {
        ostr->writeAll({1, 2, 3, 4, 5, 6, 7}, v.boolSeq, v.byteSeq, v.shortSeq, v.intSeq, v.longSeq, v.floatSeq, v.doubleSeq);
    }
};

template<typename S>
struct StreamReader<::Test::NumPy::D, S>
{
    static void read(S* istr, ::Test::NumPy::D& v)
    {
        istr->readAll({1, 2, 3, 4, 5, 6, 7}, v.boolSeq, v.byteSeq, v.shortSeq, v.intSeq, v.longSeq, v.floatSeq, v.doubleSeq);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

/// \cond INTERNAL
namespace NumPy
{

using DPtr = ::std::shared_ptr<D>;

using CustomPtr = ::std::shared_ptr<Custom>;
using CustomPrxPtr = ::std::shared_ptr<CustomPrx>;

}
/// \endcond

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Test
{

namespace NumPy
{

class Custom;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Custom>&);
::IceProxy::Ice::Object* upCast(Custom*);
/// \endcond

}

}

}

namespace Test
{

namespace NumPy
{

class D;
/// \cond INTERNAL
::Ice::Value* upCast(D*);
/// \endcond
typedef ::IceInternal::Handle< D> DPtr;
/// \cond INTERNAL
void _icePatchValuePtr(DPtr&, const ::Ice::ValuePtr&);
/// \endcond
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::NumPy::Custom> CustomPrx;
typedef CustomPrx CustomPrxPtr;

class Custom;
typedef ::IceInternal::Handle< Custom> CustomPtr;

}

}

namespace Test
{

namespace NumPy
{

typedef ::std::vector<bool> BoolSeq1;

typedef ::std::vector<bool> BoolSeq2;

typedef ::std::vector< ::Ice::Byte> ByteSeq1;

typedef ::std::vector< ::Ice::Byte> ByteSeq2;

typedef ::std::vector< ::Ice::Short> ShortSeq1;

typedef ::std::vector< ::Ice::Short> ShortSeq2;

typedef ::std::vector< ::Ice::Int> IntSeq1;

typedef ::std::vector< ::Ice::Int> IntSeq2;

typedef ::std::vector< ::Ice::Long> LongSeq1;

typedef ::std::vector< ::Ice::Long> LongSeq2;

typedef ::std::vector< ::Ice::Float> FloatSeq1;

typedef ::std::vector< ::Ice::Float> FloatSeq2;

typedef ::std::vector< ::Ice::Double> DoubleSeq1;

typedef ::std::vector< ::Ice::Double> DoubleSeq2;

typedef ::std::vector< ::Ice::Byte> Complex128Seq;

}

}

namespace Test
{

namespace NumPy
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opBoolSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opBoolSeq.
 */
class Callback_Custom_opBoolSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opBoolSeq_Base> Callback_Custom_opBoolSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opByteSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opByteSeq.
 */
class Callback_Custom_opByteSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opByteSeq_Base> Callback_Custom_opByteSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opShortSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opShortSeq.
 */
class Callback_Custom_opShortSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opShortSeq_Base> Callback_Custom_opShortSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opIntSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opIntSeq.
 */
class Callback_Custom_opIntSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opIntSeq_Base> Callback_Custom_opIntSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opLongSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opLongSeq.
 */
class Callback_Custom_opLongSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opLongSeq_Base> Callback_Custom_opLongSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opFloatSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opFloatSeq.
 */
class Callback_Custom_opFloatSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opFloatSeq_Base> Callback_Custom_opFloatSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opDoubleSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opDoubleSeq.
 */
class Callback_Custom_opDoubleSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opDoubleSeq_Base> Callback_Custom_opDoubleSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opComplex128Seq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opComplex128Seq.
 */
class Callback_Custom_opComplex128Seq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opComplex128Seq_Base> Callback_Custom_opComplex128SeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opBoolMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opBoolMatrix.
 */
class Callback_Custom_opBoolMatrix_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opBoolMatrix_Base> Callback_Custom_opBoolMatrixPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opByteMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opByteMatrix.
 */
class Callback_Custom_opByteMatrix_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opByteMatrix_Base> Callback_Custom_opByteMatrixPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opShortMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opShortMatrix.
 */
class Callback_Custom_opShortMatrix_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opShortMatrix_Base> Callback_Custom_opShortMatrixPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opIntMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opIntMatrix.
 */
class Callback_Custom_opIntMatrix_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opIntMatrix_Base> Callback_Custom_opIntMatrixPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opLongMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opLongMatrix.
 */
class Callback_Custom_opLongMatrix_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opLongMatrix_Base> Callback_Custom_opLongMatrixPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opFloatMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opFloatMatrix.
 */
class Callback_Custom_opFloatMatrix_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opFloatMatrix_Base> Callback_Custom_opFloatMatrixPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opDoubleMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opDoubleMatrix.
 */
class Callback_Custom_opDoubleMatrix_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opDoubleMatrix_Base> Callback_Custom_opDoubleMatrixPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opBogusNumpyArrayType.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opBogusNumpyArrayType.
 */
class Callback_Custom_opBogusNumpyArrayType_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opBogusNumpyArrayType_Base> Callback_Custom_opBogusNumpyArrayTypePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opD.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opD.
 */
class Callback_Custom_opD_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_opD_Base> Callback_Custom_opDPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::NumPy::Custom::begin_shutdown.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_shutdown.
 */
class Callback_Custom_shutdown_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Custom_shutdown_Base> Callback_Custom_shutdownPtr;

}

}

namespace IceProxy
{

namespace Test
{

namespace NumPy
{

class Custom : public virtual ::Ice::Proxy<Custom, ::IceProxy::Ice::Object>
{
public:

    ::Test::NumPy::BoolSeq1 opBoolSeq(const ::Test::NumPy::BoolSeq1& v1, ::Test::NumPy::BoolSeq2& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opBoolSeq(v2, _iceI_begin_opBoolSeq(v1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opBoolSeq(const ::Test::NumPy::BoolSeq1& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opBoolSeq(v1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opBoolSeq(const ::Test::NumPy::BoolSeq1& v1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolSeq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBoolSeq(const ::Test::NumPy::BoolSeq1& v1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolSeq(v1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBoolSeq(const ::Test::NumPy::BoolSeq1& v1, const ::Test::NumPy::Callback_Custom_opBoolSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolSeq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBoolSeq(const ::Test::NumPy::BoolSeq1& v1, const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opBoolSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolSeq(v1, context, cb, cookie);
    }

    ::Test::NumPy::BoolSeq1 end_opBoolSeq(::Test::NumPy::BoolSeq2& v2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opBoolSeq(::Test::NumPy::BoolSeq2& iceP_v2, ::Test::NumPy::BoolSeq1& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opBoolSeq(const ::Test::NumPy::BoolSeq1&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::ByteSeq1 opByteSeq(const ::Test::NumPy::ByteSeq1& v1, ::Test::NumPy::ByteSeq2& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opByteSeq(v2, _iceI_begin_opByteSeq(v1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opByteSeq(const ::Test::NumPy::ByteSeq1& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opByteSeq(v1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opByteSeq(const ::Test::NumPy::ByteSeq1& v1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteSeq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteSeq(const ::Test::NumPy::ByteSeq1& v1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteSeq(v1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteSeq(const ::Test::NumPy::ByteSeq1& v1, const ::Test::NumPy::Callback_Custom_opByteSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteSeq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteSeq(const ::Test::NumPy::ByteSeq1& v1, const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opByteSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteSeq(v1, context, cb, cookie);
    }

    ::Test::NumPy::ByteSeq1 end_opByteSeq(::Test::NumPy::ByteSeq2& v2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opByteSeq(::Test::NumPy::ByteSeq2& iceP_v2, ::Test::NumPy::ByteSeq1& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opByteSeq(const ::Test::NumPy::ByteSeq1&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::ShortSeq1 opShortSeq(const ::Test::NumPy::ShortSeq1& v1, ::Test::NumPy::ShortSeq2& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opShortSeq(v2, _iceI_begin_opShortSeq(v1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opShortSeq(const ::Test::NumPy::ShortSeq1& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opShortSeq(v1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opShortSeq(const ::Test::NumPy::ShortSeq1& v1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortSeq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShortSeq(const ::Test::NumPy::ShortSeq1& v1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortSeq(v1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShortSeq(const ::Test::NumPy::ShortSeq1& v1, const ::Test::NumPy::Callback_Custom_opShortSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortSeq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShortSeq(const ::Test::NumPy::ShortSeq1& v1, const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opShortSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortSeq(v1, context, cb, cookie);
    }

    ::Test::NumPy::ShortSeq1 end_opShortSeq(::Test::NumPy::ShortSeq2& v2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opShortSeq(::Test::NumPy::ShortSeq2& iceP_v2, ::Test::NumPy::ShortSeq1& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opShortSeq(const ::Test::NumPy::ShortSeq1&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::IntSeq1 opIntSeq(const ::Test::NumPy::IntSeq1& v1, ::Test::NumPy::IntSeq2& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opIntSeq(v2, _iceI_begin_opIntSeq(v1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opIntSeq(const ::Test::NumPy::IntSeq1& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opIntSeq(v1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opIntSeq(const ::Test::NumPy::IntSeq1& v1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntSeq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntSeq(const ::Test::NumPy::IntSeq1& v1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntSeq(v1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntSeq(const ::Test::NumPy::IntSeq1& v1, const ::Test::NumPy::Callback_Custom_opIntSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntSeq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntSeq(const ::Test::NumPy::IntSeq1& v1, const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opIntSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntSeq(v1, context, cb, cookie);
    }

    ::Test::NumPy::IntSeq1 end_opIntSeq(::Test::NumPy::IntSeq2& v2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opIntSeq(::Test::NumPy::IntSeq2& iceP_v2, ::Test::NumPy::IntSeq1& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opIntSeq(const ::Test::NumPy::IntSeq1&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::LongSeq1 opLongSeq(const ::Test::NumPy::LongSeq1& v1, ::Test::NumPy::LongSeq2& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opLongSeq(v2, _iceI_begin_opLongSeq(v1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opLongSeq(const ::Test::NumPy::LongSeq1& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opLongSeq(v1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opLongSeq(const ::Test::NumPy::LongSeq1& v1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongSeq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLongSeq(const ::Test::NumPy::LongSeq1& v1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongSeq(v1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLongSeq(const ::Test::NumPy::LongSeq1& v1, const ::Test::NumPy::Callback_Custom_opLongSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongSeq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLongSeq(const ::Test::NumPy::LongSeq1& v1, const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opLongSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongSeq(v1, context, cb, cookie);
    }

    ::Test::NumPy::LongSeq1 end_opLongSeq(::Test::NumPy::LongSeq2& v2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opLongSeq(::Test::NumPy::LongSeq2& iceP_v2, ::Test::NumPy::LongSeq1& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opLongSeq(const ::Test::NumPy::LongSeq1&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::FloatSeq1 opFloatSeq(const ::Test::NumPy::FloatSeq1& v1, ::Test::NumPy::FloatSeq2& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opFloatSeq(v2, _iceI_begin_opFloatSeq(v1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opFloatSeq(const ::Test::NumPy::FloatSeq1& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opFloatSeq(v1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opFloatSeq(const ::Test::NumPy::FloatSeq1& v1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatSeq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloatSeq(const ::Test::NumPy::FloatSeq1& v1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatSeq(v1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloatSeq(const ::Test::NumPy::FloatSeq1& v1, const ::Test::NumPy::Callback_Custom_opFloatSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatSeq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloatSeq(const ::Test::NumPy::FloatSeq1& v1, const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opFloatSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatSeq(v1, context, cb, cookie);
    }

    ::Test::NumPy::FloatSeq1 end_opFloatSeq(::Test::NumPy::FloatSeq2& v2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opFloatSeq(::Test::NumPy::FloatSeq2& iceP_v2, ::Test::NumPy::FloatSeq1& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opFloatSeq(const ::Test::NumPy::FloatSeq1&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::DoubleSeq1 opDoubleSeq(const ::Test::NumPy::DoubleSeq1& v1, ::Test::NumPy::DoubleSeq2& v2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opDoubleSeq(v2, _iceI_begin_opDoubleSeq(v1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opDoubleSeq(const ::Test::NumPy::DoubleSeq1& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opDoubleSeq(v1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opDoubleSeq(const ::Test::NumPy::DoubleSeq1& v1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleSeq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDoubleSeq(const ::Test::NumPy::DoubleSeq1& v1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleSeq(v1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDoubleSeq(const ::Test::NumPy::DoubleSeq1& v1, const ::Test::NumPy::Callback_Custom_opDoubleSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleSeq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDoubleSeq(const ::Test::NumPy::DoubleSeq1& v1, const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opDoubleSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleSeq(v1, context, cb, cookie);
    }

    ::Test::NumPy::DoubleSeq1 end_opDoubleSeq(::Test::NumPy::DoubleSeq2& v2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opDoubleSeq(::Test::NumPy::DoubleSeq2& iceP_v2, ::Test::NumPy::DoubleSeq1& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opDoubleSeq(const ::Test::NumPy::DoubleSeq1&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::Complex128Seq opComplex128Seq(const ::Test::NumPy::Complex128Seq& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opComplex128Seq(_iceI_begin_opComplex128Seq(v1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opComplex128Seq(const ::Test::NumPy::Complex128Seq& v1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opComplex128Seq(v1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opComplex128Seq(const ::Test::NumPy::Complex128Seq& v1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opComplex128Seq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opComplex128Seq(const ::Test::NumPy::Complex128Seq& v1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opComplex128Seq(v1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opComplex128Seq(const ::Test::NumPy::Complex128Seq& v1, const ::Test::NumPy::Callback_Custom_opComplex128SeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opComplex128Seq(v1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opComplex128Seq(const ::Test::NumPy::Complex128Seq& v1, const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opComplex128SeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opComplex128Seq(v1, context, cb, cookie);
    }

    ::Test::NumPy::Complex128Seq end_opComplex128Seq(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opComplex128Seq(const ::Test::NumPy::Complex128Seq&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::BoolSeq1 opBoolMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opBoolMatrix(_iceI_begin_opBoolMatrix(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opBoolMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opBoolMatrix(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opBoolMatrix(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBoolMatrix(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolMatrix(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBoolMatrix(const ::Test::NumPy::Callback_Custom_opBoolMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBoolMatrix(const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opBoolMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolMatrix(context, cb, cookie);
    }

    ::Test::NumPy::BoolSeq1 end_opBoolMatrix(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opBoolMatrix(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::ByteSeq1 opByteMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opByteMatrix(_iceI_begin_opByteMatrix(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opByteMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opByteMatrix(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opByteMatrix(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteMatrix(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteMatrix(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteMatrix(const ::Test::NumPy::Callback_Custom_opByteMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteMatrix(const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opByteMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteMatrix(context, cb, cookie);
    }

    ::Test::NumPy::ByteSeq1 end_opByteMatrix(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opByteMatrix(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::ShortSeq1 opShortMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opShortMatrix(_iceI_begin_opShortMatrix(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opShortMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opShortMatrix(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opShortMatrix(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShortMatrix(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortMatrix(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShortMatrix(const ::Test::NumPy::Callback_Custom_opShortMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShortMatrix(const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opShortMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortMatrix(context, cb, cookie);
    }

    ::Test::NumPy::ShortSeq1 end_opShortMatrix(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opShortMatrix(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::IntSeq1 opIntMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opIntMatrix(_iceI_begin_opIntMatrix(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opIntMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opIntMatrix(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opIntMatrix(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntMatrix(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntMatrix(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntMatrix(const ::Test::NumPy::Callback_Custom_opIntMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntMatrix(const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opIntMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntMatrix(context, cb, cookie);
    }

    ::Test::NumPy::IntSeq1 end_opIntMatrix(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opIntMatrix(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::LongSeq1 opLongMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opLongMatrix(_iceI_begin_opLongMatrix(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opLongMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opLongMatrix(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opLongMatrix(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLongMatrix(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongMatrix(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLongMatrix(const ::Test::NumPy::Callback_Custom_opLongMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLongMatrix(const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opLongMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongMatrix(context, cb, cookie);
    }

    ::Test::NumPy::LongSeq1 end_opLongMatrix(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opLongMatrix(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::FloatSeq1 opFloatMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opFloatMatrix(_iceI_begin_opFloatMatrix(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opFloatMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opFloatMatrix(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opFloatMatrix(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloatMatrix(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatMatrix(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloatMatrix(const ::Test::NumPy::Callback_Custom_opFloatMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloatMatrix(const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opFloatMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatMatrix(context, cb, cookie);
    }

    ::Test::NumPy::FloatSeq1 end_opFloatMatrix(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opFloatMatrix(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::DoubleSeq1 opDoubleMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opDoubleMatrix(_iceI_begin_opDoubleMatrix(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opDoubleMatrix(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opDoubleMatrix(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opDoubleMatrix(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDoubleMatrix(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleMatrix(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDoubleMatrix(const ::Test::NumPy::Callback_Custom_opDoubleMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleMatrix(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDoubleMatrix(const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opDoubleMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleMatrix(context, cb, cookie);
    }

    ::Test::NumPy::DoubleSeq1 end_opDoubleMatrix(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opDoubleMatrix(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::BoolSeq1 opBogusNumpyArrayType(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opBogusNumpyArrayType(_iceI_begin_opBogusNumpyArrayType(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opBogusNumpyArrayType(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opBogusNumpyArrayType(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opBogusNumpyArrayType(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBogusNumpyArrayType(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBogusNumpyArrayType(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBogusNumpyArrayType(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBogusNumpyArrayType(const ::Test::NumPy::Callback_Custom_opBogusNumpyArrayTypePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBogusNumpyArrayType(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBogusNumpyArrayType(const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opBogusNumpyArrayTypePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBogusNumpyArrayType(context, cb, cookie);
    }

    ::Test::NumPy::BoolSeq1 end_opBogusNumpyArrayType(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opBogusNumpyArrayType(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NumPy::DPtr opD(const ::Test::NumPy::DPtr& d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opD(_iceI_begin_opD(d, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opD(const ::Test::NumPy::DPtr& d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opD(d, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opD(const ::Test::NumPy::DPtr& d, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opD(d, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opD(const ::Test::NumPy::DPtr& d, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opD(d, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opD(const ::Test::NumPy::DPtr& d, const ::Test::NumPy::Callback_Custom_opDPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opD(d, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opD(const ::Test::NumPy::DPtr& d, const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_opDPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opD(d, context, cb, cookie);
    }

    ::Test::NumPy::DPtr end_opD(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opD(const ::Test::NumPy::DPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_shutdown(_iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::NumPy::Callback_Custom_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Test::NumPy::Callback_Custom_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_shutdown(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

}

namespace Test
{

namespace NumPy
{

class Custom : public virtual ::Ice::Object
{
public:

    typedef CustomPrx ProxyType;

    virtual ~Custom();
    Custom() = default;
    Custom(const Custom&) = default;
    Custom& operator=(const Custom&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual BoolSeq1 opBoolSeq(const BoolSeq1& v1, BoolSeq2& v2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opBoolSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ByteSeq1 opByteSeq(const ByteSeq1& v1, ByteSeq2& v2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opByteSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ShortSeq1 opShortSeq(const ShortSeq1& v1, ShortSeq2& v2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opShortSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual IntSeq1 opIntSeq(const IntSeq1& v1, IntSeq2& v2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual LongSeq1 opLongSeq(const LongSeq1& v1, LongSeq2& v2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opLongSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual FloatSeq1 opFloatSeq(const FloatSeq1& v1, FloatSeq2& v2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opFloatSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual DoubleSeq1 opDoubleSeq(const DoubleSeq1& v1, DoubleSeq2& v2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opDoubleSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Complex128Seq opComplex128Seq(const Complex128Seq& v1, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opComplex128Seq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual BoolSeq1 opBoolMatrix(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opBoolMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ByteSeq1 opByteMatrix(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opByteMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ShortSeq1 opShortMatrix(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opShortMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual IntSeq1 opIntMatrix(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual LongSeq1 opLongMatrix(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opLongMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual FloatSeq1 opFloatMatrix(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opFloatMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual DoubleSeq1 opDoubleMatrix(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opDoubleMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual BoolSeq1 opBogusNumpyArrayType(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opBogusNumpyArrayType(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual DPtr opD(const DPtr& d, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opD(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

}

namespace Test
{

namespace NumPy
{

class D : public virtual ::Ice::Value
{
public:

    typedef DPtr PointerType;

    virtual ~D();

    D()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    D(const std::optional< ::Test::NumPy::BoolSeq1>& boolSeq, const std::optional< ::Test::NumPy::ByteSeq1>& byteSeq, const std::optional< ::Test::NumPy::ShortSeq1>& shortSeq, const std::optional< ::Test::NumPy::IntSeq1>& intSeq, const std::optional< ::Test::NumPy::LongSeq1>& longSeq, const std::optional< ::Test::NumPy::FloatSeq1>& floatSeq, const std::optional< ::Test::NumPy::DoubleSeq1>& doubleSeq) :
        boolSeq(boolSeq),
        byteSeq(byteSeq),
        shortSeq(shortSeq),
        intSeq(intSeq),
        longSeq(longSeq),
        floatSeq(floatSeq),
        doubleSeq(doubleSeq)
    {
    }
    D(const D&) = default;
    D& operator=(const D&) = default;

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ValuePtr ice_clone() const;

    /**
     * Obtains the Slice type ID of the most-derived class implemented by this instance.
     * @return The type ID.
     */
    virtual ::std::string ice_id() const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return The type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    std::optional< ::Test::NumPy::BoolSeq1> boolSeq;
    std::optional< ::Test::NumPy::ByteSeq1> byteSeq;
    std::optional< ::Test::NumPy::ShortSeq1> shortSeq;
    std::optional< ::Test::NumPy::IntSeq1> intSeq;
    std::optional< ::Test::NumPy::LongSeq1> longSeq;
    std::optional< ::Test::NumPy::FloatSeq1> floatSeq;
    std::optional< ::Test::NumPy::DoubleSeq1> doubleSeq;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_D_init = ::Test::NumPy::D::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const D& lhs, const D& rhs)
{
    return static_cast<const ::Ice::Value&>(lhs) == static_cast<const ::Ice::Value&>(rhs);
}

inline bool operator<(const D& lhs, const D& rhs)
{
    return static_cast<const ::Ice::Value&>(lhs) < static_cast<const ::Ice::Value&>(rhs);
}
/// \endcond

}

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::Test::NumPy::D, S>
{
    static void write(S* ostr, const ::Test::NumPy::D& v)
    {
        ostr->write(1, v.boolSeq);
        ostr->write(2, v.byteSeq);
        ostr->write(3, v.shortSeq);
        ostr->write(4, v.intSeq);
        ostr->write(5, v.longSeq);
        ostr->write(6, v.floatSeq);
        ostr->write(7, v.doubleSeq);
    }
};

template<typename S>
struct StreamReader< ::Test::NumPy::D, S>
{
    static void read(S* istr, ::Test::NumPy::D& v)
    {
        istr->read(1, v.boolSeq);
        istr->read(2, v.byteSeq);
        istr->read(3, v.shortSeq);
        istr->read(4, v.intSeq);
        istr->read(5, v.longSeq);
        istr->read(6, v.floatSeq);
        istr->read(7, v.doubleSeq);
    }
};

}
/// \endcond

namespace Test
{

namespace NumPy
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opBoolSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opBoolSeq.
 */
template<class T>
class CallbackNC_Custom_opBoolSeq : public Callback_Custom_opBoolSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const BoolSeq1&, const BoolSeq2&);

    CallbackNC_Custom_opBoolSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        BoolSeq2 iceP_v2;
        BoolSeq1 ret;
        try
        {
            ret = proxy->end_opBoolSeq(iceP_v2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_v2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opBoolSeq.
 */
template<class T> Callback_Custom_opBoolSeqPtr
newCallback_Custom_opBoolSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const BoolSeq1&, const BoolSeq2&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opBoolSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opBoolSeq.
 */
template<class T> Callback_Custom_opBoolSeqPtr
newCallback_Custom_opBoolSeq(T* instance, void (T::*cb)(const BoolSeq1&, const BoolSeq2&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opBoolSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opBoolSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opBoolSeq.
 */
template<class T, typename CT>
class Callback_Custom_opBoolSeq : public Callback_Custom_opBoolSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const BoolSeq1&, const BoolSeq2&, const CT&);

    Callback_Custom_opBoolSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        BoolSeq2 iceP_v2;
        BoolSeq1 ret;
        try
        {
            ret = proxy->end_opBoolSeq(iceP_v2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_v2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opBoolSeq.
 */
template<class T, typename CT> Callback_Custom_opBoolSeqPtr
newCallback_Custom_opBoolSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const BoolSeq1&, const BoolSeq2&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opBoolSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opBoolSeq.
 */
template<class T, typename CT> Callback_Custom_opBoolSeqPtr
newCallback_Custom_opBoolSeq(T* instance, void (T::*cb)(const BoolSeq1&, const BoolSeq2&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opBoolSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opByteSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opByteSeq.
 */
template<class T>
class CallbackNC_Custom_opByteSeq : public Callback_Custom_opByteSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ByteSeq1&, const ByteSeq2&);

    CallbackNC_Custom_opByteSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        ByteSeq2 iceP_v2;
        ByteSeq1 ret;
        try
        {
            ret = proxy->end_opByteSeq(iceP_v2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_v2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opByteSeq.
 */
template<class T> Callback_Custom_opByteSeqPtr
newCallback_Custom_opByteSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ByteSeq1&, const ByteSeq2&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opByteSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opByteSeq.
 */
template<class T> Callback_Custom_opByteSeqPtr
newCallback_Custom_opByteSeq(T* instance, void (T::*cb)(const ByteSeq1&, const ByteSeq2&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opByteSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opByteSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opByteSeq.
 */
template<class T, typename CT>
class Callback_Custom_opByteSeq : public Callback_Custom_opByteSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ByteSeq1&, const ByteSeq2&, const CT&);

    Callback_Custom_opByteSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        ByteSeq2 iceP_v2;
        ByteSeq1 ret;
        try
        {
            ret = proxy->end_opByteSeq(iceP_v2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_v2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opByteSeq.
 */
template<class T, typename CT> Callback_Custom_opByteSeqPtr
newCallback_Custom_opByteSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ByteSeq1&, const ByteSeq2&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opByteSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opByteSeq.
 */
template<class T, typename CT> Callback_Custom_opByteSeqPtr
newCallback_Custom_opByteSeq(T* instance, void (T::*cb)(const ByteSeq1&, const ByteSeq2&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opByteSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opShortSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opShortSeq.
 */
template<class T>
class CallbackNC_Custom_opShortSeq : public Callback_Custom_opShortSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ShortSeq1&, const ShortSeq2&);

    CallbackNC_Custom_opShortSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        ShortSeq2 iceP_v2;
        ShortSeq1 ret;
        try
        {
            ret = proxy->end_opShortSeq(iceP_v2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_v2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opShortSeq.
 */
template<class T> Callback_Custom_opShortSeqPtr
newCallback_Custom_opShortSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ShortSeq1&, const ShortSeq2&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opShortSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opShortSeq.
 */
template<class T> Callback_Custom_opShortSeqPtr
newCallback_Custom_opShortSeq(T* instance, void (T::*cb)(const ShortSeq1&, const ShortSeq2&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opShortSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opShortSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opShortSeq.
 */
template<class T, typename CT>
class Callback_Custom_opShortSeq : public Callback_Custom_opShortSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ShortSeq1&, const ShortSeq2&, const CT&);

    Callback_Custom_opShortSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        ShortSeq2 iceP_v2;
        ShortSeq1 ret;
        try
        {
            ret = proxy->end_opShortSeq(iceP_v2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_v2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opShortSeq.
 */
template<class T, typename CT> Callback_Custom_opShortSeqPtr
newCallback_Custom_opShortSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ShortSeq1&, const ShortSeq2&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opShortSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opShortSeq.
 */
template<class T, typename CT> Callback_Custom_opShortSeqPtr
newCallback_Custom_opShortSeq(T* instance, void (T::*cb)(const ShortSeq1&, const ShortSeq2&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opShortSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opIntSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opIntSeq.
 */
template<class T>
class CallbackNC_Custom_opIntSeq : public Callback_Custom_opIntSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const IntSeq1&, const IntSeq2&);

    CallbackNC_Custom_opIntSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        IntSeq2 iceP_v2;
        IntSeq1 ret;
        try
        {
            ret = proxy->end_opIntSeq(iceP_v2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_v2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opIntSeq.
 */
template<class T> Callback_Custom_opIntSeqPtr
newCallback_Custom_opIntSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const IntSeq1&, const IntSeq2&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opIntSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opIntSeq.
 */
template<class T> Callback_Custom_opIntSeqPtr
newCallback_Custom_opIntSeq(T* instance, void (T::*cb)(const IntSeq1&, const IntSeq2&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opIntSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opIntSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opIntSeq.
 */
template<class T, typename CT>
class Callback_Custom_opIntSeq : public Callback_Custom_opIntSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const IntSeq1&, const IntSeq2&, const CT&);

    Callback_Custom_opIntSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        IntSeq2 iceP_v2;
        IntSeq1 ret;
        try
        {
            ret = proxy->end_opIntSeq(iceP_v2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_v2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opIntSeq.
 */
template<class T, typename CT> Callback_Custom_opIntSeqPtr
newCallback_Custom_opIntSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const IntSeq1&, const IntSeq2&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opIntSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opIntSeq.
 */
template<class T, typename CT> Callback_Custom_opIntSeqPtr
newCallback_Custom_opIntSeq(T* instance, void (T::*cb)(const IntSeq1&, const IntSeq2&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opIntSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opLongSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opLongSeq.
 */
template<class T>
class CallbackNC_Custom_opLongSeq : public Callback_Custom_opLongSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const LongSeq1&, const LongSeq2&);

    CallbackNC_Custom_opLongSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        LongSeq2 iceP_v2;
        LongSeq1 ret;
        try
        {
            ret = proxy->end_opLongSeq(iceP_v2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_v2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opLongSeq.
 */
template<class T> Callback_Custom_opLongSeqPtr
newCallback_Custom_opLongSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const LongSeq1&, const LongSeq2&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opLongSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opLongSeq.
 */
template<class T> Callback_Custom_opLongSeqPtr
newCallback_Custom_opLongSeq(T* instance, void (T::*cb)(const LongSeq1&, const LongSeq2&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opLongSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opLongSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opLongSeq.
 */
template<class T, typename CT>
class Callback_Custom_opLongSeq : public Callback_Custom_opLongSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const LongSeq1&, const LongSeq2&, const CT&);

    Callback_Custom_opLongSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        LongSeq2 iceP_v2;
        LongSeq1 ret;
        try
        {
            ret = proxy->end_opLongSeq(iceP_v2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_v2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opLongSeq.
 */
template<class T, typename CT> Callback_Custom_opLongSeqPtr
newCallback_Custom_opLongSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const LongSeq1&, const LongSeq2&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opLongSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opLongSeq.
 */
template<class T, typename CT> Callback_Custom_opLongSeqPtr
newCallback_Custom_opLongSeq(T* instance, void (T::*cb)(const LongSeq1&, const LongSeq2&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opLongSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opFloatSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opFloatSeq.
 */
template<class T>
class CallbackNC_Custom_opFloatSeq : public Callback_Custom_opFloatSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const FloatSeq1&, const FloatSeq2&);

    CallbackNC_Custom_opFloatSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        FloatSeq2 iceP_v2;
        FloatSeq1 ret;
        try
        {
            ret = proxy->end_opFloatSeq(iceP_v2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_v2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opFloatSeq.
 */
template<class T> Callback_Custom_opFloatSeqPtr
newCallback_Custom_opFloatSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const FloatSeq1&, const FloatSeq2&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opFloatSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opFloatSeq.
 */
template<class T> Callback_Custom_opFloatSeqPtr
newCallback_Custom_opFloatSeq(T* instance, void (T::*cb)(const FloatSeq1&, const FloatSeq2&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opFloatSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opFloatSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opFloatSeq.
 */
template<class T, typename CT>
class Callback_Custom_opFloatSeq : public Callback_Custom_opFloatSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const FloatSeq1&, const FloatSeq2&, const CT&);

    Callback_Custom_opFloatSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        FloatSeq2 iceP_v2;
        FloatSeq1 ret;
        try
        {
            ret = proxy->end_opFloatSeq(iceP_v2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_v2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opFloatSeq.
 */
template<class T, typename CT> Callback_Custom_opFloatSeqPtr
newCallback_Custom_opFloatSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const FloatSeq1&, const FloatSeq2&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opFloatSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opFloatSeq.
 */
template<class T, typename CT> Callback_Custom_opFloatSeqPtr
newCallback_Custom_opFloatSeq(T* instance, void (T::*cb)(const FloatSeq1&, const FloatSeq2&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opFloatSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opDoubleSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opDoubleSeq.
 */
template<class T>
class CallbackNC_Custom_opDoubleSeq : public Callback_Custom_opDoubleSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const DoubleSeq1&, const DoubleSeq2&);

    CallbackNC_Custom_opDoubleSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        DoubleSeq2 iceP_v2;
        DoubleSeq1 ret;
        try
        {
            ret = proxy->end_opDoubleSeq(iceP_v2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_v2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opDoubleSeq.
 */
template<class T> Callback_Custom_opDoubleSeqPtr
newCallback_Custom_opDoubleSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const DoubleSeq1&, const DoubleSeq2&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opDoubleSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opDoubleSeq.
 */
template<class T> Callback_Custom_opDoubleSeqPtr
newCallback_Custom_opDoubleSeq(T* instance, void (T::*cb)(const DoubleSeq1&, const DoubleSeq2&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opDoubleSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opDoubleSeq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opDoubleSeq.
 */
template<class T, typename CT>
class Callback_Custom_opDoubleSeq : public Callback_Custom_opDoubleSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const DoubleSeq1&, const DoubleSeq2&, const CT&);

    Callback_Custom_opDoubleSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        DoubleSeq2 iceP_v2;
        DoubleSeq1 ret;
        try
        {
            ret = proxy->end_opDoubleSeq(iceP_v2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_v2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opDoubleSeq.
 */
template<class T, typename CT> Callback_Custom_opDoubleSeqPtr
newCallback_Custom_opDoubleSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const DoubleSeq1&, const DoubleSeq2&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opDoubleSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opDoubleSeq.
 */
template<class T, typename CT> Callback_Custom_opDoubleSeqPtr
newCallback_Custom_opDoubleSeq(T* instance, void (T::*cb)(const DoubleSeq1&, const DoubleSeq2&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opDoubleSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opComplex128Seq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opComplex128Seq.
 */
template<class T>
class CallbackNC_Custom_opComplex128Seq : public Callback_Custom_opComplex128Seq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Complex128Seq&);

    CallbackNC_Custom_opComplex128Seq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        Complex128Seq ret;
        try
        {
            ret = proxy->end_opComplex128Seq(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opComplex128Seq.
 */
template<class T> Callback_Custom_opComplex128SeqPtr
newCallback_Custom_opComplex128Seq(const IceUtil::Handle<T>& instance, void (T::*cb)(const Complex128Seq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opComplex128Seq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opComplex128Seq.
 */
template<class T> Callback_Custom_opComplex128SeqPtr
newCallback_Custom_opComplex128Seq(T* instance, void (T::*cb)(const Complex128Seq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opComplex128Seq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opComplex128Seq.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opComplex128Seq.
 */
template<class T, typename CT>
class Callback_Custom_opComplex128Seq : public Callback_Custom_opComplex128Seq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Complex128Seq&, const CT&);

    Callback_Custom_opComplex128Seq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        Complex128Seq ret;
        try
        {
            ret = proxy->end_opComplex128Seq(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opComplex128Seq.
 */
template<class T, typename CT> Callback_Custom_opComplex128SeqPtr
newCallback_Custom_opComplex128Seq(const IceUtil::Handle<T>& instance, void (T::*cb)(const Complex128Seq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opComplex128Seq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opComplex128Seq.
 */
template<class T, typename CT> Callback_Custom_opComplex128SeqPtr
newCallback_Custom_opComplex128Seq(T* instance, void (T::*cb)(const Complex128Seq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opComplex128Seq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opBoolMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opBoolMatrix.
 */
template<class T>
class CallbackNC_Custom_opBoolMatrix : public Callback_Custom_opBoolMatrix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const BoolSeq1&);

    CallbackNC_Custom_opBoolMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        BoolSeq1 ret;
        try
        {
            ret = proxy->end_opBoolMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opBoolMatrix.
 */
template<class T> Callback_Custom_opBoolMatrixPtr
newCallback_Custom_opBoolMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const BoolSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opBoolMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opBoolMatrix.
 */
template<class T> Callback_Custom_opBoolMatrixPtr
newCallback_Custom_opBoolMatrix(T* instance, void (T::*cb)(const BoolSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opBoolMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opBoolMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opBoolMatrix.
 */
template<class T, typename CT>
class Callback_Custom_opBoolMatrix : public Callback_Custom_opBoolMatrix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const BoolSeq1&, const CT&);

    Callback_Custom_opBoolMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        BoolSeq1 ret;
        try
        {
            ret = proxy->end_opBoolMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opBoolMatrix.
 */
template<class T, typename CT> Callback_Custom_opBoolMatrixPtr
newCallback_Custom_opBoolMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const BoolSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opBoolMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opBoolMatrix.
 */
template<class T, typename CT> Callback_Custom_opBoolMatrixPtr
newCallback_Custom_opBoolMatrix(T* instance, void (T::*cb)(const BoolSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opBoolMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opByteMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opByteMatrix.
 */
template<class T>
class CallbackNC_Custom_opByteMatrix : public Callback_Custom_opByteMatrix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ByteSeq1&);

    CallbackNC_Custom_opByteMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        ByteSeq1 ret;
        try
        {
            ret = proxy->end_opByteMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opByteMatrix.
 */
template<class T> Callback_Custom_opByteMatrixPtr
newCallback_Custom_opByteMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const ByteSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opByteMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opByteMatrix.
 */
template<class T> Callback_Custom_opByteMatrixPtr
newCallback_Custom_opByteMatrix(T* instance, void (T::*cb)(const ByteSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opByteMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opByteMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opByteMatrix.
 */
template<class T, typename CT>
class Callback_Custom_opByteMatrix : public Callback_Custom_opByteMatrix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ByteSeq1&, const CT&);

    Callback_Custom_opByteMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        ByteSeq1 ret;
        try
        {
            ret = proxy->end_opByteMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opByteMatrix.
 */
template<class T, typename CT> Callback_Custom_opByteMatrixPtr
newCallback_Custom_opByteMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const ByteSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opByteMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opByteMatrix.
 */
template<class T, typename CT> Callback_Custom_opByteMatrixPtr
newCallback_Custom_opByteMatrix(T* instance, void (T::*cb)(const ByteSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opByteMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opShortMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opShortMatrix.
 */
template<class T>
class CallbackNC_Custom_opShortMatrix : public Callback_Custom_opShortMatrix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ShortSeq1&);

    CallbackNC_Custom_opShortMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        ShortSeq1 ret;
        try
        {
            ret = proxy->end_opShortMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opShortMatrix.
 */
template<class T> Callback_Custom_opShortMatrixPtr
newCallback_Custom_opShortMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const ShortSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opShortMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opShortMatrix.
 */
template<class T> Callback_Custom_opShortMatrixPtr
newCallback_Custom_opShortMatrix(T* instance, void (T::*cb)(const ShortSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opShortMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opShortMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opShortMatrix.
 */
template<class T, typename CT>
class Callback_Custom_opShortMatrix : public Callback_Custom_opShortMatrix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ShortSeq1&, const CT&);

    Callback_Custom_opShortMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        ShortSeq1 ret;
        try
        {
            ret = proxy->end_opShortMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opShortMatrix.
 */
template<class T, typename CT> Callback_Custom_opShortMatrixPtr
newCallback_Custom_opShortMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const ShortSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opShortMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opShortMatrix.
 */
template<class T, typename CT> Callback_Custom_opShortMatrixPtr
newCallback_Custom_opShortMatrix(T* instance, void (T::*cb)(const ShortSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opShortMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opIntMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opIntMatrix.
 */
template<class T>
class CallbackNC_Custom_opIntMatrix : public Callback_Custom_opIntMatrix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const IntSeq1&);

    CallbackNC_Custom_opIntMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        IntSeq1 ret;
        try
        {
            ret = proxy->end_opIntMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opIntMatrix.
 */
template<class T> Callback_Custom_opIntMatrixPtr
newCallback_Custom_opIntMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const IntSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opIntMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opIntMatrix.
 */
template<class T> Callback_Custom_opIntMatrixPtr
newCallback_Custom_opIntMatrix(T* instance, void (T::*cb)(const IntSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opIntMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opIntMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opIntMatrix.
 */
template<class T, typename CT>
class Callback_Custom_opIntMatrix : public Callback_Custom_opIntMatrix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const IntSeq1&, const CT&);

    Callback_Custom_opIntMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        IntSeq1 ret;
        try
        {
            ret = proxy->end_opIntMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opIntMatrix.
 */
template<class T, typename CT> Callback_Custom_opIntMatrixPtr
newCallback_Custom_opIntMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const IntSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opIntMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opIntMatrix.
 */
template<class T, typename CT> Callback_Custom_opIntMatrixPtr
newCallback_Custom_opIntMatrix(T* instance, void (T::*cb)(const IntSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opIntMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opLongMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opLongMatrix.
 */
template<class T>
class CallbackNC_Custom_opLongMatrix : public Callback_Custom_opLongMatrix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const LongSeq1&);

    CallbackNC_Custom_opLongMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        LongSeq1 ret;
        try
        {
            ret = proxy->end_opLongMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opLongMatrix.
 */
template<class T> Callback_Custom_opLongMatrixPtr
newCallback_Custom_opLongMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const LongSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opLongMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opLongMatrix.
 */
template<class T> Callback_Custom_opLongMatrixPtr
newCallback_Custom_opLongMatrix(T* instance, void (T::*cb)(const LongSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opLongMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opLongMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opLongMatrix.
 */
template<class T, typename CT>
class Callback_Custom_opLongMatrix : public Callback_Custom_opLongMatrix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const LongSeq1&, const CT&);

    Callback_Custom_opLongMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        LongSeq1 ret;
        try
        {
            ret = proxy->end_opLongMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opLongMatrix.
 */
template<class T, typename CT> Callback_Custom_opLongMatrixPtr
newCallback_Custom_opLongMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const LongSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opLongMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opLongMatrix.
 */
template<class T, typename CT> Callback_Custom_opLongMatrixPtr
newCallback_Custom_opLongMatrix(T* instance, void (T::*cb)(const LongSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opLongMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opFloatMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opFloatMatrix.
 */
template<class T>
class CallbackNC_Custom_opFloatMatrix : public Callback_Custom_opFloatMatrix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const FloatSeq1&);

    CallbackNC_Custom_opFloatMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        FloatSeq1 ret;
        try
        {
            ret = proxy->end_opFloatMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opFloatMatrix.
 */
template<class T> Callback_Custom_opFloatMatrixPtr
newCallback_Custom_opFloatMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const FloatSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opFloatMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opFloatMatrix.
 */
template<class T> Callback_Custom_opFloatMatrixPtr
newCallback_Custom_opFloatMatrix(T* instance, void (T::*cb)(const FloatSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opFloatMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opFloatMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opFloatMatrix.
 */
template<class T, typename CT>
class Callback_Custom_opFloatMatrix : public Callback_Custom_opFloatMatrix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const FloatSeq1&, const CT&);

    Callback_Custom_opFloatMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        FloatSeq1 ret;
        try
        {
            ret = proxy->end_opFloatMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opFloatMatrix.
 */
template<class T, typename CT> Callback_Custom_opFloatMatrixPtr
newCallback_Custom_opFloatMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const FloatSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opFloatMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opFloatMatrix.
 */
template<class T, typename CT> Callback_Custom_opFloatMatrixPtr
newCallback_Custom_opFloatMatrix(T* instance, void (T::*cb)(const FloatSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opFloatMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opDoubleMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opDoubleMatrix.
 */
template<class T>
class CallbackNC_Custom_opDoubleMatrix : public Callback_Custom_opDoubleMatrix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const DoubleSeq1&);

    CallbackNC_Custom_opDoubleMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        DoubleSeq1 ret;
        try
        {
            ret = proxy->end_opDoubleMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opDoubleMatrix.
 */
template<class T> Callback_Custom_opDoubleMatrixPtr
newCallback_Custom_opDoubleMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const DoubleSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opDoubleMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opDoubleMatrix.
 */
template<class T> Callback_Custom_opDoubleMatrixPtr
newCallback_Custom_opDoubleMatrix(T* instance, void (T::*cb)(const DoubleSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opDoubleMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opDoubleMatrix.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opDoubleMatrix.
 */
template<class T, typename CT>
class Callback_Custom_opDoubleMatrix : public Callback_Custom_opDoubleMatrix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const DoubleSeq1&, const CT&);

    Callback_Custom_opDoubleMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        DoubleSeq1 ret;
        try
        {
            ret = proxy->end_opDoubleMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opDoubleMatrix.
 */
template<class T, typename CT> Callback_Custom_opDoubleMatrixPtr
newCallback_Custom_opDoubleMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const DoubleSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opDoubleMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opDoubleMatrix.
 */
template<class T, typename CT> Callback_Custom_opDoubleMatrixPtr
newCallback_Custom_opDoubleMatrix(T* instance, void (T::*cb)(const DoubleSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opDoubleMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opBogusNumpyArrayType.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opBogusNumpyArrayType.
 */
template<class T>
class CallbackNC_Custom_opBogusNumpyArrayType : public Callback_Custom_opBogusNumpyArrayType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const BoolSeq1&);

    CallbackNC_Custom_opBogusNumpyArrayType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        BoolSeq1 ret;
        try
        {
            ret = proxy->end_opBogusNumpyArrayType(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opBogusNumpyArrayType.
 */
template<class T> Callback_Custom_opBogusNumpyArrayTypePtr
newCallback_Custom_opBogusNumpyArrayType(const IceUtil::Handle<T>& instance, void (T::*cb)(const BoolSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opBogusNumpyArrayType<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opBogusNumpyArrayType.
 */
template<class T> Callback_Custom_opBogusNumpyArrayTypePtr
newCallback_Custom_opBogusNumpyArrayType(T* instance, void (T::*cb)(const BoolSeq1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opBogusNumpyArrayType<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opBogusNumpyArrayType.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opBogusNumpyArrayType.
 */
template<class T, typename CT>
class Callback_Custom_opBogusNumpyArrayType : public Callback_Custom_opBogusNumpyArrayType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const BoolSeq1&, const CT&);

    Callback_Custom_opBogusNumpyArrayType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        BoolSeq1 ret;
        try
        {
            ret = proxy->end_opBogusNumpyArrayType(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opBogusNumpyArrayType.
 */
template<class T, typename CT> Callback_Custom_opBogusNumpyArrayTypePtr
newCallback_Custom_opBogusNumpyArrayType(const IceUtil::Handle<T>& instance, void (T::*cb)(const BoolSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opBogusNumpyArrayType<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opBogusNumpyArrayType.
 */
template<class T, typename CT> Callback_Custom_opBogusNumpyArrayTypePtr
newCallback_Custom_opBogusNumpyArrayType(T* instance, void (T::*cb)(const BoolSeq1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opBogusNumpyArrayType<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opD.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opD.
 */
template<class T>
class CallbackNC_Custom_opD : public Callback_Custom_opD_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const DPtr&);

    CallbackNC_Custom_opD(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        DPtr ret;
        try
        {
            ret = proxy->end_opD(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opD.
 */
template<class T> Callback_Custom_opDPtr
newCallback_Custom_opD(const IceUtil::Handle<T>& instance, void (T::*cb)(const DPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opD<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opD.
 */
template<class T> Callback_Custom_opDPtr
newCallback_Custom_opD(T* instance, void (T::*cb)(const DPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_opD<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_opD.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_opD.
 */
template<class T, typename CT>
class Callback_Custom_opD : public Callback_Custom_opD_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const DPtr&, const CT&);

    Callback_Custom_opD(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CustomPrx proxy = CustomPrx::uncheckedCast(result->getProxy());
        DPtr ret;
        try
        {
            ret = proxy->end_opD(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opD.
 */
template<class T, typename CT> Callback_Custom_opDPtr
newCallback_Custom_opD(const IceUtil::Handle<T>& instance, void (T::*cb)(const DPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opD<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_opD.
 */
template<class T, typename CT> Callback_Custom_opDPtr
newCallback_Custom_opD(T* instance, void (T::*cb)(const DPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_opD<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::NumPy::Custom::begin_shutdown.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_shutdown.
 */
template<class T>
class CallbackNC_Custom_shutdown : public Callback_Custom_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Custom_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_shutdown.
 */
template<class T> Callback_Custom_shutdownPtr
newCallback_Custom_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_shutdown.
 */
template<class T> Callback_Custom_shutdownPtr
newCallback_Custom_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_shutdown.
 */
template<class T> Callback_Custom_shutdownPtr
newCallback_Custom_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_shutdown.
 */
template<class T> Callback_Custom_shutdownPtr
newCallback_Custom_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Custom_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::NumPy::Custom::begin_shutdown.
 * Create a wrapper instance by calling ::Test::NumPy::newCallback_Custom_shutdown.
 */
template<class T, typename CT>
class Callback_Custom_shutdown : public Callback_Custom_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Custom_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_shutdown.
 */
template<class T, typename CT> Callback_Custom_shutdownPtr
newCallback_Custom_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_shutdown.
 */
template<class T, typename CT> Callback_Custom_shutdownPtr
newCallback_Custom_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_shutdown.
 */
template<class T, typename CT> Callback_Custom_shutdownPtr
newCallback_Custom_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::NumPy::Custom::begin_shutdown.
 */
template<class T, typename CT> Callback_Custom_shutdownPtr
newCallback_Custom_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Custom_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
