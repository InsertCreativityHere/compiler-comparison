//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::D> iceC_Test_D_init("::Test::D");

const ::std::string iceC_Test_Custom_ids[2] =
{
    "::Ice::Object",
    "::Test::Custom"
};
const ::std::string iceC_Test_Custom_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBogusArrayNoCallableFactory",
    "opBogusArrayNoneFactory",
    "opBogusArrayNotExistsFactory",
    "opBogusArraySignatureFactory",
    "opBogusArrayThrowFactory",
    "opBogusArrayType",
    "opBoolSeq",
    "opByteList1",
    "opByteList2",
    "opByteSeq",
    "opByteString1",
    "opByteString2",
    "opD",
    "opDoubleSeq",
    "opFloatSeq",
    "opIntSeq",
    "opLongSeq",
    "opShortSeq",
    "opStringList1",
    "opStringList2",
    "opStringTuple1",
    "opStringTuple2",
    "sendC",
    "sendS",
    "shutdown"
};
const ::std::string iceC_Test_Custom_opByteString1_name = "opByteString1";
const ::std::string iceC_Test_Custom_opByteString2_name = "opByteString2";
const ::std::string iceC_Test_Custom_opByteList1_name = "opByteList1";
const ::std::string iceC_Test_Custom_opByteList2_name = "opByteList2";
const ::std::string iceC_Test_Custom_opStringList1_name = "opStringList1";
const ::std::string iceC_Test_Custom_opStringList2_name = "opStringList2";
const ::std::string iceC_Test_Custom_opStringTuple1_name = "opStringTuple1";
const ::std::string iceC_Test_Custom_opStringTuple2_name = "opStringTuple2";
const ::std::string iceC_Test_Custom_sendS_name = "sendS";
const ::std::string iceC_Test_Custom_sendC_name = "sendC";
const ::std::string iceC_Test_Custom_opBoolSeq_name = "opBoolSeq";
const ::std::string iceC_Test_Custom_opByteSeq_name = "opByteSeq";
const ::std::string iceC_Test_Custom_opShortSeq_name = "opShortSeq";
const ::std::string iceC_Test_Custom_opIntSeq_name = "opIntSeq";
const ::std::string iceC_Test_Custom_opLongSeq_name = "opLongSeq";
const ::std::string iceC_Test_Custom_opFloatSeq_name = "opFloatSeq";
const ::std::string iceC_Test_Custom_opDoubleSeq_name = "opDoubleSeq";
const ::std::string iceC_Test_Custom_opBogusArrayNotExistsFactory_name = "opBogusArrayNotExistsFactory";
const ::std::string iceC_Test_Custom_opBogusArrayThrowFactory_name = "opBogusArrayThrowFactory";
const ::std::string iceC_Test_Custom_opBogusArrayType_name = "opBogusArrayType";
const ::std::string iceC_Test_Custom_opBogusArrayNoneFactory_name = "opBogusArrayNoneFactory";
const ::std::string iceC_Test_Custom_opBogusArraySignatureFactory_name = "opBogusArraySignatureFactory";
const ::std::string iceC_Test_Custom_opBogusArrayNoCallableFactory_name = "opBogusArrayNoCallableFactory";
const ::std::string iceC_Test_Custom_opD_name = "opD";
const ::std::string iceC_Test_Custom_shutdown_name = "shutdown";

}

bool
Test::Custom::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Custom_ids, iceC_Test_Custom_ids + 2, s);
}

::std::vector<::std::string>
Test::Custom::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Custom_ids[0], &iceC_Test_Custom_ids[2]);
}

::std::string
Test::Custom::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Custom::ice_staticId()
{
    static const ::std::string typeId = "::Test::Custom";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Custom::_iceD_opByteString1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteString iceP_b1;
    istr->readAll(iceP_b1);
    inS.endReadParams();
    ByteString iceP_b2;
    ByteString ret = this->opByteString1(::std::move(iceP_b1), iceP_b2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_b2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opByteString2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteString iceP_b1;
    istr->readAll(iceP_b1);
    inS.endReadParams();
    ByteString iceP_b2;
    ByteString ret = this->opByteString2(::std::move(iceP_b1), iceP_b2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_b2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opByteList1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteList iceP_b1;
    istr->readAll(iceP_b1);
    inS.endReadParams();
    ByteList iceP_b2;
    ByteList ret = this->opByteList1(::std::move(iceP_b1), iceP_b2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_b2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opByteList2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteList iceP_b1;
    istr->readAll(iceP_b1);
    inS.endReadParams();
    ByteList iceP_b2;
    ByteList ret = this->opByteList2(::std::move(iceP_b1), iceP_b2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_b2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opStringList1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringList iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    StringList iceP_s2;
    StringList ret = this->opStringList1(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opStringList2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringList iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    StringList iceP_s2;
    StringList ret = this->opStringList2(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opStringTuple1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringTuple iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    StringTuple iceP_s2;
    StringTuple ret = this->opStringTuple1(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opStringTuple2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringTuple iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    StringTuple iceP_s2;
    StringTuple ret = this->opStringTuple2(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_sendS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    S iceP_val;
    istr->readAll(iceP_val);
    inS.endReadParams();
    this->sendS(::std::move(iceP_val), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_sendC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<C> iceP_val;
    istr->readAll(iceP_val);
    istr->readPendingValues();
    inS.endReadParams();
    this->sendC(::std::move(iceP_val), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opBoolSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    BoolSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    BoolSeq2 iceP_v2;
    BoolSeq1 ret = this->opBoolSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opByteSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    ByteSeq2 iceP_v2;
    ByteSeq1 ret = this->opByteSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opShortSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ShortSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    ShortSeq2 iceP_v2;
    ShortSeq1 ret = this->opShortSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opIntSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    IntSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    IntSeq2 iceP_v2;
    IntSeq1 ret = this->opIntSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opLongSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LongSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    LongSeq2 iceP_v2;
    LongSeq1 ret = this->opLongSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opFloatSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    FloatSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    FloatSeq2 iceP_v2;
    FloatSeq1 ret = this->opFloatSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opDoubleSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    DoubleSeq1 iceP_v1;
    istr->readAll(iceP_v1);
    inS.endReadParams();
    DoubleSeq2 iceP_v2;
    DoubleSeq1 ret = this->opDoubleSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opBogusArrayNotExistsFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    BoolSeq1 ret = this->opBogusArrayNotExistsFactory(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opBogusArrayThrowFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    BoolSeq1 ret = this->opBogusArrayThrowFactory(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opBogusArrayType(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    BoolSeq1 ret = this->opBogusArrayType(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opBogusArrayNoneFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    BoolSeq1 ret = this->opBogusArrayNoneFactory(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opBogusArraySignatureFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    BoolSeq1 ret = this->opBogusArraySignatureFactory(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opBogusArrayNoCallableFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    BoolSeq1 ret = this->opBogusArrayNoCallableFactory(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_opD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<D> iceP_d;
    istr->readAll(iceP_d);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<D> ret = this->opD(::std::move(iceP_d), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Custom::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Custom_ops, iceC_Test_Custom_ops + 29, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Custom_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opBogusArrayNoCallableFactory(in, current);
        }
        case 5:
        {
            return _iceD_opBogusArrayNoneFactory(in, current);
        }
        case 6:
        {
            return _iceD_opBogusArrayNotExistsFactory(in, current);
        }
        case 7:
        {
            return _iceD_opBogusArraySignatureFactory(in, current);
        }
        case 8:
        {
            return _iceD_opBogusArrayThrowFactory(in, current);
        }
        case 9:
        {
            return _iceD_opBogusArrayType(in, current);
        }
        case 10:
        {
            return _iceD_opBoolSeq(in, current);
        }
        case 11:
        {
            return _iceD_opByteList1(in, current);
        }
        case 12:
        {
            return _iceD_opByteList2(in, current);
        }
        case 13:
        {
            return _iceD_opByteSeq(in, current);
        }
        case 14:
        {
            return _iceD_opByteString1(in, current);
        }
        case 15:
        {
            return _iceD_opByteString2(in, current);
        }
        case 16:
        {
            return _iceD_opD(in, current);
        }
        case 17:
        {
            return _iceD_opDoubleSeq(in, current);
        }
        case 18:
        {
            return _iceD_opFloatSeq(in, current);
        }
        case 19:
        {
            return _iceD_opIntSeq(in, current);
        }
        case 20:
        {
            return _iceD_opLongSeq(in, current);
        }
        case 21:
        {
            return _iceD_opShortSeq(in, current);
        }
        case 22:
        {
            return _iceD_opStringList1(in, current);
        }
        case 23:
        {
            return _iceD_opStringList2(in, current);
        }
        case 24:
        {
            return _iceD_opStringTuple1(in, current);
        }
        case 25:
        {
            return _iceD_opStringTuple2(in, current);
        }
        case 26:
        {
            return _iceD_sendC(in, current);
        }
        case 27:
        {
            return _iceD_sendS(in, current);
        }
        case 28:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::C::~C()
{
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

Test::D::~D()
{
}

const ::std::string&
Test::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opByteString1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpByteString1Result>>& outAsync, const ByteString& iceP_b1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opByteString1_name);
    outAsync->invoke(iceC_Test_Custom_opByteString1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_b1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpByteString1Result v;
            istr->readAll(v.b2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opByteString2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpByteString2Result>>& outAsync, const ByteString& iceP_b1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opByteString2_name);
    outAsync->invoke(iceC_Test_Custom_opByteString2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_b1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpByteString2Result v;
            istr->readAll(v.b2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opByteList1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpByteList1Result>>& outAsync, const ByteList& iceP_b1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opByteList1_name);
    outAsync->invoke(iceC_Test_Custom_opByteList1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_b1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpByteList1Result v;
            istr->readAll(v.b2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opByteList2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpByteList2Result>>& outAsync, const ByteList& iceP_b1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opByteList2_name);
    outAsync->invoke(iceC_Test_Custom_opByteList2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_b1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpByteList2Result v;
            istr->readAll(v.b2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opStringList1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpStringList1Result>>& outAsync, const StringList& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opStringList1_name);
    outAsync->invoke(iceC_Test_Custom_opStringList1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpStringList1Result v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opStringList2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpStringList2Result>>& outAsync, const StringList& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opStringList2_name);
    outAsync->invoke(iceC_Test_Custom_opStringList2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpStringList2Result v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opStringTuple1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpStringTuple1Result>>& outAsync, const StringTuple& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opStringTuple1_name);
    outAsync->invoke(iceC_Test_Custom_opStringTuple1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpStringTuple1Result v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opStringTuple2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpStringTuple2Result>>& outAsync, const StringTuple& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opStringTuple2_name);
    outAsync->invoke(iceC_Test_Custom_opStringTuple2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpStringTuple2Result v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_sendS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const S& iceP_val, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Custom_sendS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_val);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_sendC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<C>& iceP_val, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Custom_sendC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_val);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opBoolSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpBoolSeqResult>>& outAsync, const BoolSeq1& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opBoolSeq_name);
    outAsync->invoke(iceC_Test_Custom_opBoolSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpBoolSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opByteSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpByteSeqResult>>& outAsync, const ByteSeq1& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opByteSeq_name);
    outAsync->invoke(iceC_Test_Custom_opByteSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpByteSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opShortSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpShortSeqResult>>& outAsync, const ShortSeq1& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opShortSeq_name);
    outAsync->invoke(iceC_Test_Custom_opShortSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpShortSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opIntSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpIntSeqResult>>& outAsync, const IntSeq1& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opIntSeq_name);
    outAsync->invoke(iceC_Test_Custom_opIntSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpIntSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opLongSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpLongSeqResult>>& outAsync, const LongSeq1& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opLongSeq_name);
    outAsync->invoke(iceC_Test_Custom_opLongSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpLongSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opFloatSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpFloatSeqResult>>& outAsync, const FloatSeq1& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opFloatSeq_name);
    outAsync->invoke(iceC_Test_Custom_opFloatSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpFloatSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opDoubleSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Custom::OpDoubleSeqResult>>& outAsync, const DoubleSeq1& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opDoubleSeq_name);
    outAsync->invoke(iceC_Test_Custom_opDoubleSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Custom::OpDoubleSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opBogusArrayNotExistsFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::BoolSeq1>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opBogusArrayNotExistsFactory_name);
    outAsync->invoke(iceC_Test_Custom_opBogusArrayNotExistsFactory_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opBogusArrayThrowFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::BoolSeq1>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opBogusArrayThrowFactory_name);
    outAsync->invoke(iceC_Test_Custom_opBogusArrayThrowFactory_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opBogusArrayType(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::BoolSeq1>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opBogusArrayType_name);
    outAsync->invoke(iceC_Test_Custom_opBogusArrayType_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opBogusArrayNoneFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::BoolSeq1>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opBogusArrayNoneFactory_name);
    outAsync->invoke(iceC_Test_Custom_opBogusArrayNoneFactory_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opBogusArraySignatureFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::BoolSeq1>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opBogusArraySignatureFactory_name);
    outAsync->invoke(iceC_Test_Custom_opBogusArraySignatureFactory_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opBogusArrayNoCallableFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::BoolSeq1>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opBogusArrayNoCallableFactory_name);
    outAsync->invoke(iceC_Test_Custom_opBogusArrayNoCallableFactory_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_opD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::D>>>& outAsync, const ::std::shared_ptr<D>& iceP_d, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Custom_opD_name);
    outAsync->invoke(iceC_Test_Custom_opD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_d);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<D> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::CustomPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Custom_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::CustomPrx::ice_staticId()
{
    return Custom::ice_staticId();
}

namespace Ice
{
}
