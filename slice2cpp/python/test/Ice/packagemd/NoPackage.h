//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `NoPackage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __NoPackage_h__
#define __NoPackage_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test1
{

class C1;

using C1Ptr = ::std::shared_ptr<C1>;
class C2;

using C2Ptr = ::std::shared_ptr<C2>;

}

namespace Test1
{

class C1 : public ::Ice::Value
{
public:

    C1() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C1(::std::int32_t i) :
        i(i)
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    ::std::string ice_id() const override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(i);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    ::std::shared_ptr<C1> ice_clone() const { return ::std::static_pointer_cast <C1>(_iceCloneImpl()); }

    ::std::int32_t i;

protected:

    C1(const C1&) = default;

    ::std::shared_ptr<::Ice::Value> _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

/// \cond INTERNAL
static C1 _iceS_C1_init;
/// \endcond

class C2 : public C1
{
public:

    C2() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C2(::std::int32_t i, ::std::int64_t l) :
        C1(i),
        l(l)
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    ::std::string ice_id() const override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int64_t&> ice_tuple() const
    {
        return std::tie(i, l);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    ::std::shared_ptr<C2> ice_clone() const { return ::std::static_pointer_cast <C2>(_iceCloneImpl()); }

    ::std::int64_t l;

protected:

    C2(const C2&) = default;

    ::std::shared_ptr<::Ice::Value> _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

class E1 : public ::Ice::UserException
{
public:
    using ::Ice::UserException::UserException;

    /**
     * One-shot constructor to initialize all data members.
     */
    E1(::std::int32_t i) noexcept :
        i(i)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(i);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    ::std::string ice_id() const override;

    void ice_throw() const override;

    ::std::int32_t i;

protected:
    void _writeImpl(::Ice::OutputStream*) const override;

    void _readImpl(::Ice::InputStream*) override;
};

class E2 : public E1
{
public:
    using E1::E1;

    /**
     * One-shot constructor to initialize all data members.
     */
    E2(::std::int32_t i, ::std::int64_t l) noexcept :
        E1(i),
        l(l)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int64_t&> ice_tuple() const
    {
        return std::tie(i, l);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    ::std::string ice_id() const override;

    void ice_throw() const override;

    ::std::int64_t l;

protected:
    void _writeImpl(::Ice::OutputStream*) const override;

    void _readImpl(::Ice::InputStream*) override;
};

/**
 * Test keyword escape.
 */
class def : public ::Ice::UserException
{
public:
    using ::Ice::UserException::UserException;

    /**
     * One-shot constructor to initialize all data members.
     */
    def(::std::int32_t i) noexcept :
        i(i)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(i);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    ::std::string ice_id() const override;

    void ice_throw() const override;

    ::std::int32_t i;

protected:
    void _writeImpl(::Ice::OutputStream*) const override;

    void _readImpl(::Ice::InputStream*) override;
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::Test1::C1, S>
{
    static void read(S* istr, ::Test1::C1& v)
    {
        istr->readAll(v.i);
    }
};

template<typename S>
struct StreamWriter<::Test1::C2, S>
{
    static void write(S* ostr, const ::Test1::C2& v)
    {
        ostr->writeAll(v.l);
    }
};

template<typename S>
struct StreamReader<::Test1::C2, S>
{
    static void read(S* istr, ::Test1::C2& v)
    {
        istr->readAll(v.l);
    }
};

template<typename S>
struct StreamReader<::Test1::E1, S>
{
    static void read(S* istr, ::Test1::E1& v)
    {
        istr->readAll(v.i);
    }
};

template<typename S>
struct StreamWriter<::Test1::E2, S>
{
    static void write(S* ostr, const ::Test1::E2& v)
    {
        ostr->writeAll(v.l);
    }
};

template<typename S>
struct StreamReader<::Test1::E2, S>
{
    static void read(S* istr, ::Test1::E2& v)
    {
        istr->readAll(v.l);
    }
};

template<typename S>
struct StreamReader<::Test1::def, S>
{
    static void read(S* istr, ::Test1::def& v)
    {
        istr->readAll(v.i);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
