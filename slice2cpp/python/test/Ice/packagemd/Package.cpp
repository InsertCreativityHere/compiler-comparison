//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Package.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Package.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test2::C1> iceC_Test2_C1_init("::Test2::C1");

const ::IceInternal::DefaultValueFactoryInit<::Test2::C2> iceC_Test2_C2_init("::Test2::C2");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test2::E1> iceC_Test2_E1_init("::Test2::E1");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test2::E2> iceC_Test2_E2_init("::Test2::E2");

const ::IceInternal::DefaultValueFactoryInit<::Test3::C1> iceC_Test3_C1_init("::Test3::C1");

const ::IceInternal::DefaultValueFactoryInit<::Test3::C2> iceC_Test3_C2_init("::Test3::C2");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test3::E1> iceC_Test3_E1_init("::Test3::E1");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test3::E2> iceC_Test3_E2_init("::Test3::E2");

}

Test2::E1::~E1()
{
}

const ::std::string&
Test2::E1::ice_staticId()
{
    static const ::std::string typeId = "::Test2::E1";
    return typeId;
}

Test2::E2::~E2()
{
}

const ::std::string&
Test2::E2::ice_staticId()
{
    static const ::std::string typeId = "::Test2::E2";
    return typeId;
}

Test3::E1::~E1()
{
}

const ::std::string&
Test3::E1::ice_staticId()
{
    static const ::std::string typeId = "::Test3::E1";
    return typeId;
}

Test3::E2::~E2()
{
}

const ::std::string&
Test3::E2::ice_staticId()
{
    static const ::std::string typeId = "::Test3::E2";
    return typeId;
}

Test2::C1::~C1()
{
}

const ::std::string&
Test2::C1::ice_staticId()
{
    static const ::std::string typeId = "::Test2::C1";
    return typeId;
}

Test2::C2::~C2()
{
}

const ::std::string&
Test2::C2::ice_staticId()
{
    static const ::std::string typeId = "::Test2::C2";
    return typeId;
}

Test3::C1::~C1()
{
}

const ::std::string&
Test3::C1::ice_staticId()
{
    static const ::std::string typeId = "::Test3::C1";
    return typeId;
}

Test3::C2::~C2()
{
}

const ::std::string&
Test3::C2::ice_staticId()
{
    static const ::std::string typeId = "::Test3::C2";
    return typeId;
}
