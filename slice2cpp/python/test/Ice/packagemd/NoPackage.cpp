//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `NoPackage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <NoPackage.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test1::C1> iceC_Test1_C1_init("::Test1::C1");

const ::IceInternal::DefaultValueFactoryInit<::Test1::C2> iceC_Test1_C2_init("::Test1::C2");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test1::E1> iceC_Test1_E1_init("::Test1::E1");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test1::E2> iceC_Test1_E2_init("::Test1::E2");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test1::def> iceC_Test1_def_init("::Test1::def");

}

Test1::E1::~E1()
{
}

const ::std::string&
Test1::E1::ice_staticId()
{
    static const ::std::string typeId = "::Test1::E1";
    return typeId;
}

Test1::E2::~E2()
{
}

const ::std::string&
Test1::E2::ice_staticId()
{
    static const ::std::string typeId = "::Test1::E2";
    return typeId;
}

Test1::def::~def()
{
}

const ::std::string&
Test1::def::ice_staticId()
{
    static const ::std::string typeId = "::Test1::def";
    return typeId;
}

Test1::C1::~C1()
{
}

const ::std::string&
Test1::C1::ice_staticId()
{
    static const ::std::string typeId = "::Test1::C1";
    return typeId;
}

Test1::C2::~C2()
{
}

const ::std::string&
Test1::C2::ice_staticId()
{
    static const ::std::string typeId = "::Test1::C2";
    return typeId;
}

#else // C++98 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test1::C1> iceC_Test1_C1_init("::Test1::C1");

const ::IceInternal::DefaultValueFactoryInit<::Test1::C2> iceC_Test1_C2_init("::Test1::C2");

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test1::E1> iceC_Test1_E1_init("::Test1::E1");

}

Test1::E1::E1(::Ice::Int i) :
    ::Ice::UserException(),
    i(i)
{
}
Test1::E1::~E1()
{
}

::std::string
Test1::E1::ice_id() const
{
    return "::Test1::E1";
}

Test1::E1*
Test1::E1::ice_clone() const
{
    return new E1(*this);
}

void
Test1::E1::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test1::E1::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test1::E1", -1, true);
    ::Ice::StreamWriter< E1, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test1::E1::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< E1, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test1::E2> iceC_Test1_E2_init("::Test1::E2");

}

Test1::E2::E2(::Ice::Int i, ::Ice::Long l) :
    E1(i),
    l(l)
{
}
Test1::E2::~E2()
{
}

::std::string
Test1::E2::ice_id() const
{
    return "::Test1::E2";
}

Test1::E2*
Test1::E2::ice_clone() const
{
    return new E2(*this);
}

void
Test1::E2::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test1::E2::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test1::E2", -1, false);
    ::Ice::StreamWriter< E2, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    E1::_writeImpl(ostr);
}

void
Test1::E2::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< E2, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    E1::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test1::def> iceC_Test1_def_init("::Test1::def");

}

Test1::def::def(::Ice::Int i) :
    ::Ice::UserException(),
    i(i)
{
}
Test1::def::~def()
{
}

::std::string
Test1::def::ice_id() const
{
    return "::Test1::def";
}

Test1::def*
Test1::def::ice_clone() const
{
    return new def(*this);
}

void
Test1::def::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test1::def::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test1::def", -1, true);
    ::Ice::StreamWriter< def, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test1::def::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< def, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

Test1::C1::~C1()
{
}

const ::std::string&
Test1::C1::ice_staticId()
{
    static const ::std::string typeId = "::Test1::C1";
    return typeId;
}

Test1::C2::~C2()
{
}

const ::std::string&
Test1::C2::ice_staticId()
{
    static const ::std::string typeId = "::Test1::C2";
    return typeId;
}

namespace Ice
{
}

#endif
