//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_Test_Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};
const ::std::string iceC_Test_Initial_ops[] =
{
    "getTest1C2AsC1",
    "getTest1C2AsC2",
    "getTest2C2AsC1",
    "getTest2C2AsC2",
    "getTest3C2AsC1",
    "getTest3C2AsC2",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown",
    "throwTest1Def",
    "throwTest1E2AsE1",
    "throwTest1E2AsE2",
    "throwTest2E2AsE1",
    "throwTest2E2AsE2",
    "throwTest3E2AsE1",
    "throwTest3E2AsE2"
};
const ::std::string iceC_Test_Initial_getTest1C2AsC1_name = "getTest1C2AsC1";
const ::std::string iceC_Test_Initial_getTest1C2AsC2_name = "getTest1C2AsC2";
const ::std::string iceC_Test_Initial_throwTest1E2AsE1_name = "throwTest1E2AsE1";
const ::std::string iceC_Test_Initial_throwTest1E2AsE2_name = "throwTest1E2AsE2";
const ::std::string iceC_Test_Initial_throwTest1Def_name = "throwTest1Def";
const ::std::string iceC_Test_Initial_getTest2C2AsC1_name = "getTest2C2AsC1";
const ::std::string iceC_Test_Initial_getTest2C2AsC2_name = "getTest2C2AsC2";
const ::std::string iceC_Test_Initial_throwTest2E2AsE1_name = "throwTest2E2AsE1";
const ::std::string iceC_Test_Initial_throwTest2E2AsE2_name = "throwTest2E2AsE2";
const ::std::string iceC_Test_Initial_getTest3C2AsC1_name = "getTest3C2AsC1";
const ::std::string iceC_Test_Initial_getTest3C2AsC2_name = "getTest3C2AsC2";
const ::std::string iceC_Test_Initial_throwTest3E2AsE1_name = "throwTest3E2AsE1";
const ::std::string iceC_Test_Initial_throwTest3E2AsE2_name = "throwTest3E2AsE2";
const ::std::string iceC_Test_Initial_shutdown_name = "shutdown";

}

::std::shared_ptr<::Test1::C1>
Test::InitialPrx::getTest1C2AsC1(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test1::C1>>(true, this, &InitialPrx::_iceI_getTest1C2AsC1, context).get();
}

::std::future<::std::shared_ptr<::Test1::C1>>
Test::InitialPrx::getTest1C2AsC1Async(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test1::C1>, ::std::promise>(false, this, &InitialPrx::_iceI_getTest1C2AsC1, context);
}

::std::function<void()>
Test::InitialPrx::getTest1C2AsC1Async(::std::function<void (::std::shared_ptr<::Test1::C1>)> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::shared_ptr<::Test1::C1>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getTest1C2AsC1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getTest1C2AsC1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test1::C1>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_getTest1C2AsC1_name);
    outAsync->invoke(iceC_Test_Initial_getTest1C2AsC1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Test1::C1> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

::std::shared_ptr<::Test1::C2>
Test::InitialPrx::getTest1C2AsC2(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test1::C2>>(true, this, &InitialPrx::_iceI_getTest1C2AsC2, context).get();
}

::std::future<::std::shared_ptr<::Test1::C2>>
Test::InitialPrx::getTest1C2AsC2Async(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test1::C2>, ::std::promise>(false, this, &InitialPrx::_iceI_getTest1C2AsC2, context);
}

::std::function<void()>
Test::InitialPrx::getTest1C2AsC2Async(::std::function<void (::std::shared_ptr<::Test1::C2>)> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::shared_ptr<::Test1::C2>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getTest1C2AsC2, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getTest1C2AsC2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test1::C2>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_getTest1C2AsC2_name);
    outAsync->invoke(iceC_Test_Initial_getTest1C2AsC2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Test1::C2> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

void
Test::InitialPrx::throwTest1E2AsE1(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwTest1E2AsE1, context).get();
}

::std::future<void>
Test::InitialPrx::throwTest1E2AsE1Async(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &InitialPrx::_iceI_throwTest1E2AsE1, context);
}

::std::function<void()>
Test::InitialPrx::throwTest1E2AsE1Async(::std::function<void ()> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_throwTest1E2AsE1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_throwTest1E2AsE1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_throwTest1E2AsE1_name);
    outAsync->invoke(iceC_Test_Initial_throwTest1E2AsE1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Test1::E1&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::InitialPrx::throwTest1E2AsE2(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwTest1E2AsE2, context).get();
}

::std::future<void>
Test::InitialPrx::throwTest1E2AsE2Async(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &InitialPrx::_iceI_throwTest1E2AsE2, context);
}

::std::function<void()>
Test::InitialPrx::throwTest1E2AsE2Async(::std::function<void ()> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_throwTest1E2AsE2, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_throwTest1E2AsE2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_throwTest1E2AsE2_name);
    outAsync->invoke(iceC_Test_Initial_throwTest1E2AsE2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Test1::E2&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::InitialPrx::throwTest1Def(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwTest1Def, context).get();
}

::std::future<void>
Test::InitialPrx::throwTest1DefAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &InitialPrx::_iceI_throwTest1Def, context);
}

::std::function<void()>
Test::InitialPrx::throwTest1DefAsync(::std::function<void ()> response,
                                     ::std::function<void(::std::exception_ptr)> ex,
                                     ::std::function<void(bool)> sent,
                                     const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_throwTest1Def, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_throwTest1Def(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_throwTest1Def_name);
    outAsync->invoke(iceC_Test_Initial_throwTest1Def_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Test1::def&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

::std::shared_ptr<::Test2::C1>
Test::InitialPrx::getTest2C2AsC1(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test2::C1>>(true, this, &InitialPrx::_iceI_getTest2C2AsC1, context).get();
}

::std::future<::std::shared_ptr<::Test2::C1>>
Test::InitialPrx::getTest2C2AsC1Async(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test2::C1>, ::std::promise>(false, this, &InitialPrx::_iceI_getTest2C2AsC1, context);
}

::std::function<void()>
Test::InitialPrx::getTest2C2AsC1Async(::std::function<void (::std::shared_ptr<::Test2::C1>)> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::shared_ptr<::Test2::C1>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getTest2C2AsC1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getTest2C2AsC1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test2::C1>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_getTest2C2AsC1_name);
    outAsync->invoke(iceC_Test_Initial_getTest2C2AsC1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Test2::C1> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

::std::shared_ptr<::Test2::C2>
Test::InitialPrx::getTest2C2AsC2(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test2::C2>>(true, this, &InitialPrx::_iceI_getTest2C2AsC2, context).get();
}

::std::future<::std::shared_ptr<::Test2::C2>>
Test::InitialPrx::getTest2C2AsC2Async(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test2::C2>, ::std::promise>(false, this, &InitialPrx::_iceI_getTest2C2AsC2, context);
}

::std::function<void()>
Test::InitialPrx::getTest2C2AsC2Async(::std::function<void (::std::shared_ptr<::Test2::C2>)> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::shared_ptr<::Test2::C2>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getTest2C2AsC2, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getTest2C2AsC2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test2::C2>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_getTest2C2AsC2_name);
    outAsync->invoke(iceC_Test_Initial_getTest2C2AsC2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Test2::C2> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

void
Test::InitialPrx::throwTest2E2AsE1(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwTest2E2AsE1, context).get();
}

::std::future<void>
Test::InitialPrx::throwTest2E2AsE1Async(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &InitialPrx::_iceI_throwTest2E2AsE1, context);
}

::std::function<void()>
Test::InitialPrx::throwTest2E2AsE1Async(::std::function<void ()> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_throwTest2E2AsE1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_throwTest2E2AsE1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_throwTest2E2AsE1_name);
    outAsync->invoke(iceC_Test_Initial_throwTest2E2AsE1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Test2::E1&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::InitialPrx::throwTest2E2AsE2(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwTest2E2AsE2, context).get();
}

::std::future<void>
Test::InitialPrx::throwTest2E2AsE2Async(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &InitialPrx::_iceI_throwTest2E2AsE2, context);
}

::std::function<void()>
Test::InitialPrx::throwTest2E2AsE2Async(::std::function<void ()> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_throwTest2E2AsE2, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_throwTest2E2AsE2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_throwTest2E2AsE2_name);
    outAsync->invoke(iceC_Test_Initial_throwTest2E2AsE2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Test2::E2&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

::std::shared_ptr<::Test3::C1>
Test::InitialPrx::getTest3C2AsC1(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test3::C1>>(true, this, &InitialPrx::_iceI_getTest3C2AsC1, context).get();
}

::std::future<::std::shared_ptr<::Test3::C1>>
Test::InitialPrx::getTest3C2AsC1Async(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test3::C1>, ::std::promise>(false, this, &InitialPrx::_iceI_getTest3C2AsC1, context);
}

::std::function<void()>
Test::InitialPrx::getTest3C2AsC1Async(::std::function<void (::std::shared_ptr<::Test3::C1>)> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::shared_ptr<::Test3::C1>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getTest3C2AsC1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getTest3C2AsC1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test3::C1>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_getTest3C2AsC1_name);
    outAsync->invoke(iceC_Test_Initial_getTest3C2AsC1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Test3::C1> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

::std::shared_ptr<::Test3::C2>
Test::InitialPrx::getTest3C2AsC2(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test3::C2>>(true, this, &InitialPrx::_iceI_getTest3C2AsC2, context).get();
}

::std::future<::std::shared_ptr<::Test3::C2>>
Test::InitialPrx::getTest3C2AsC2Async(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test3::C2>, ::std::promise>(false, this, &InitialPrx::_iceI_getTest3C2AsC2, context);
}

::std::function<void()>
Test::InitialPrx::getTest3C2AsC2Async(::std::function<void (::std::shared_ptr<::Test3::C2>)> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::shared_ptr<::Test3::C2>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getTest3C2AsC2, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getTest3C2AsC2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test3::C2>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_getTest3C2AsC2_name);
    outAsync->invoke(iceC_Test_Initial_getTest3C2AsC2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Test3::C2> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

void
Test::InitialPrx::throwTest3E2AsE1(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwTest3E2AsE1, context).get();
}

::std::future<void>
Test::InitialPrx::throwTest3E2AsE1Async(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &InitialPrx::_iceI_throwTest3E2AsE1, context);
}

::std::function<void()>
Test::InitialPrx::throwTest3E2AsE1Async(::std::function<void ()> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_throwTest3E2AsE1, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_throwTest3E2AsE1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_throwTest3E2AsE1_name);
    outAsync->invoke(iceC_Test_Initial_throwTest3E2AsE1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Test3::E1&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::InitialPrx::throwTest3E2AsE2(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwTest3E2AsE2, context).get();
}

::std::future<void>
Test::InitialPrx::throwTest3E2AsE2Async(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &InitialPrx::_iceI_throwTest3E2AsE2, context);
}

::std::function<void()>
Test::InitialPrx::throwTest3E2AsE2Async(::std::function<void ()> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_throwTest3E2AsE2, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_throwTest3E2AsE2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Initial_throwTest3E2AsE2_name);
    outAsync->invoke(iceC_Test_Initial_throwTest3E2AsE2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Test3::E2&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::InitialPrx::shutdown(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::InitialPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &InitialPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::InitialPrx::shutdownAsync(::std::function<void ()> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Initial_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::InitialPrx::ice_staticId()
{
    return Initial::ice_staticId();
}

bool
Test::Initial::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial_ids, iceC_Test_Initial_ids + 2, s);
}

::std::vector<::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Initial_ids[0], &iceC_Test_Initial_ids[2]);
}

::std::string
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_getTest1C2AsC1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test1::C1> ret = this->getTest1C2AsC1(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getTest1C2AsC2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test1::C2> ret = this->getTest1C2AsC2(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwTest1E2AsE1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwTest1E2AsE1(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwTest1E2AsE2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwTest1E2AsE2(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwTest1Def(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwTest1Def(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getTest2C2AsC1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test2::C1> ret = this->getTest2C2AsC1(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getTest2C2AsC2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test2::C2> ret = this->getTest2C2AsC2(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwTest2E2AsE1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwTest2E2AsE1(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwTest2E2AsE2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwTest2E2AsE2(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getTest3C2AsC1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test3::C1> ret = this->getTest3C2AsC1(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getTest3C2AsC2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test3::C2> ret = this->getTest3C2AsC2(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwTest3E2AsE1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwTest3E2AsE1(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwTest3E2AsE2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwTest3E2AsE2(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial_ops, iceC_Test_Initial_ops + 18, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial_ops)
    {
        case 0:
        {
            return _iceD_getTest1C2AsC1(in, current);
        }
        case 1:
        {
            return _iceD_getTest1C2AsC2(in, current);
        }
        case 2:
        {
            return _iceD_getTest2C2AsC1(in, current);
        }
        case 3:
        {
            return _iceD_getTest2C2AsC2(in, current);
        }
        case 4:
        {
            return _iceD_getTest3C2AsC1(in, current);
        }
        case 5:
        {
            return _iceD_getTest3C2AsC2(in, current);
        }
        case 6:
        {
            return _iceD_ice_id(in, current);
        }
        case 7:
        {
            return _iceD_ice_ids(in, current);
        }
        case 8:
        {
            return _iceD_ice_isA(in, current);
        }
        case 9:
        {
            return _iceD_ice_ping(in, current);
        }
        case 10:
        {
            return _iceD_shutdown(in, current);
        }
        case 11:
        {
            return _iceD_throwTest1Def(in, current);
        }
        case 12:
        {
            return _iceD_throwTest1E2AsE1(in, current);
        }
        case 13:
        {
            return _iceD_throwTest1E2AsE2(in, current);
        }
        case 14:
        {
            return _iceD_throwTest2E2AsE1(in, current);
        }
        case 15:
        {
            return _iceD_throwTest2E2AsE2(in, current);
        }
        case 16:
        {
            return _iceD_throwTest3E2AsE1(in, current);
        }
        case 17:
        {
            return _iceD_throwTest3E2AsE2(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
