// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

// clang-format off

#ifndef Test_h_
#define Test_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{
    class TestIntfPrx;

}

namespace Test
{

class TestIntfPrx : public Ice::Proxy<TestIntfPrx, Ice::ObjectPrx>
{
public:

    ::std::int32_t op(const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

    [[nodiscard]] ::std::future<::std::int32_t> opAsync(const Ice::Context& context = Ice::noExplicitContext) const;

    ::std::function<void()> // NOLINT(modernize-use-nodiscard)
    opAsync(::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_op(const ::std::shared_ptr<IceInternal::OutgoingAsyncT<::std::int32_t>>&, const Ice::Context&) const;
    /// \endcond

    ::std::int32_t callOpOn(const ::std::optional<TestIntfPrx>& proxy, const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

    [[nodiscard]] ::std::future<::std::int32_t> callOpOnAsync(const ::std::optional<TestIntfPrx>& proxy, const Ice::Context& context = Ice::noExplicitContext) const;

    ::std::function<void()> // NOLINT(modernize-use-nodiscard)
    callOpOnAsync(const ::std::optional<TestIntfPrx>& proxy, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_callOpOn(const ::std::shared_ptr<IceInternal::OutgoingAsyncT<::std::int32_t>>&, const ::std::optional<TestIntfPrx>&, const Ice::Context&) const;
    /// \endcond

    void throwUserException1(const Ice::Context& context = Ice::noExplicitContext) const;

    [[nodiscard]] ::std::future<void> throwUserException1Async(const Ice::Context& context = Ice::noExplicitContext) const;

    ::std::function<void()> // NOLINT(modernize-use-nodiscard)
    throwUserException1Async(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_throwUserException1(const ::std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;
    /// \endcond

    void throwUserException2(const Ice::Context& context = Ice::noExplicitContext) const;

    [[nodiscard]] ::std::future<void> throwUserException2Async(const Ice::Context& context = Ice::noExplicitContext) const;

    ::std::function<void()> // NOLINT(modernize-use-nodiscard)
    throwUserException2Async(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_throwUserException2(const ::std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;
    /// \endcond

    void throwUnhandledException1(const Ice::Context& context = Ice::noExplicitContext) const;

    [[nodiscard]] ::std::future<void> throwUnhandledException1Async(const Ice::Context& context = Ice::noExplicitContext) const;

    ::std::function<void()> // NOLINT(modernize-use-nodiscard)
    throwUnhandledException1Async(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_throwUnhandledException1(const ::std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;
    /// \endcond

    void throwUnhandledException2(const Ice::Context& context = Ice::noExplicitContext) const;

    [[nodiscard]] ::std::future<void> throwUnhandledException2Async(const Ice::Context& context = Ice::noExplicitContext) const;

    ::std::function<void()> // NOLINT(modernize-use-nodiscard)
    throwUnhandledException2Async(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_throwUnhandledException2(const ::std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;
    /// \endcond

    void sleep(::std::int32_t ms, const Ice::Context& context = Ice::noExplicitContext) const;

    [[nodiscard]] ::std::future<void> sleepAsync(::std::int32_t ms, const Ice::Context& context = Ice::noExplicitContext) const;

    ::std::function<void()> // NOLINT(modernize-use-nodiscard)
    sleepAsync(::std::int32_t ms, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_sleep(const ::std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, ::std::int32_t, const Ice::Context&) const;
    /// \endcond

    void shutdown(const Ice::Context& context = Ice::noExplicitContext) const;

    [[nodiscard]] ::std::future<void> shutdownAsync(const Ice::Context& context = Ice::noExplicitContext) const;

    ::std::function<void()> // NOLINT(modernize-use-nodiscard)
    shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;
    /// \endcond

    /// Obtains the Slice type ID of this interface.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    TestIntfPrx(const TestIntfPrx& other) noexcept : Ice::ObjectPrx(other) {} // NOLINT(modernize-use-equals-default)

    TestIntfPrx(TestIntfPrx&& other) noexcept : Ice::ObjectPrx(std::move(other)) {} // NOLINT(modernize-use-equals-default)

    TestIntfPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx(communicator, proxyString) {} // NOLINT(modernize-use-equals-default)

    ~TestIntfPrx() override;

    TestIntfPrx& operator=(const TestIntfPrx& rhs) noexcept
    {
        if (this != &rhs)
        {
            Ice::ObjectPrx::operator=(rhs);
        }
        return *this;
    }

    TestIntfPrx& operator=(TestIntfPrx&& rhs) noexcept
    {
        if (this != &rhs)
        {
            Ice::ObjectPrx::operator=(std::move(rhs));
        }
        return *this;
    }

    /// \cond INTERNAL
    static TestIntfPrx _fromReference(IceInternal::ReferencePtr ref) { return TestIntfPrx(std::move(ref)); }

protected:

    TestIntfPrx() = default;

    explicit TestIntfPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx(std::move(ref))
    {
    }
    /// \endcond
};

}

namespace Test
{

class TestException : public Ice::UserException
{
public:
    /// Obtains the Slice type ID of this exception.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    [[nodiscard]] const char* ice_id() const noexcept override;

    void ice_throw() const override;

protected:
    void _writeImpl(Ice::OutputStream*) const override;

    void _readImpl(Ice::InputStream*) override;
};

}

namespace Test
{

class TestIntf : public virtual Ice::Object
{
public:

    using ProxyType = TestIntfPrx;

    /// Obtains a list of the Slice type IDs representing the interfaces supported by this object.
    /// @param current The Current object for the invocation.
    /// @return A list of fully-scoped type IDs.
    [[nodiscard]] ::std::vector<::std::string> ice_ids(const Ice::Current& current) const override;

    /// Obtains a Slice type ID representing the most-derived interface supported by this object.
    /// @param current The Current object for the invocation.
    /// @return A fully-scoped type ID.
    [[nodiscard]] ::std::string ice_id(const Ice::Current& current) const override;

    /// Obtains the Slice type ID corresponding to this interface.
    /// @return A fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    virtual ::std::int32_t op(const Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_op(Ice::IncomingRequest&, ::std::function<void(Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::std::int32_t callOpOn(::std::optional<TestIntfPrx> proxy, const Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_callOpOn(Ice::IncomingRequest&, ::std::function<void(Ice::OutgoingResponse)>);
    /// \endcond

    virtual void throwUserException1(const Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_throwUserException1(Ice::IncomingRequest&, ::std::function<void(Ice::OutgoingResponse)>);
    /// \endcond

    virtual void throwUserException2(const Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_throwUserException2(Ice::IncomingRequest&, ::std::function<void(Ice::OutgoingResponse)>);
    /// \endcond

    virtual void throwUnhandledException1(const Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_throwUnhandledException1(Ice::IncomingRequest&, ::std::function<void(Ice::OutgoingResponse)>);
    /// \endcond

    virtual void throwUnhandledException2(const Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_throwUnhandledException2(Ice::IncomingRequest&, ::std::function<void(Ice::OutgoingResponse)>);
    /// \endcond

    virtual void sleep(::std::int32_t ms, const Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_sleep(Ice::IncomingRequest&, ::std::function<void(Ice::OutgoingResponse)>);
    /// \endcond

    virtual void shutdown(const Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_shutdown(Ice::IncomingRequest&, ::std::function<void(Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(Ice::IncomingRequest&, ::std::function<void(Ice::OutgoingResponse)>) override;
    /// \endcond
};

using TestIntfPtr = ::std::shared_ptr<TestIntf>;

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

#include <Ice/PopDisableWarnings.h>
#endif
