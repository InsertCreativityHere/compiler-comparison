//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{

class Default;
class NoDefault;

}

namespace Test
{

class Default : public ::Ice::ValueHelper<Default, ::Ice::Value>
{
public:

    virtual ~Default();

    Default() = default;

    Default(const Default&) = default;
    Default(Default&&) = default;
    Default& operator=(const Default&) = default;
    Default& operator=(Default&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Default(int x, int y) :
        x(x),
        y(y)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&> ice_tuple() const
    {
        return std::tie(x, y);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int x;
    int y;
};

/// \cond INTERNAL
static Default _iceS_Default_init;
/// \endcond

class NoDefault : public ::Ice::ValueHelper<NoDefault, ::Ice::Value>
{
public:

    virtual ~NoDefault();

    NoDefault() = default;

    NoDefault(const NoDefault&) = default;
    NoDefault(NoDefault&&) = default;
    NoDefault& operator=(const NoDefault&) = default;
    NoDefault& operator=(NoDefault&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    NoDefault(int x, int y) :
        x(x),
        y(y)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&> ice_tuple() const
    {
        return std::tie(x, y);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int x = 10;
    int y = 10;
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::Test::Default, S>
{
    static void read(S* istr, ::Test::Default& v)
    {
        istr->readAll(v.x, v.y);
    }
};

template<typename S>
struct StreamReader<::Test::NoDefault, S>
{
    static void read(S* istr, ::Test::NoDefault& v)
    {
        istr->readAll(v.x, v.y);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using DefaultPtr = ::std::shared_ptr<Default>;

using NoDefaultPtr = ::std::shared_ptr<NoDefault>;

}
/// \endcond

#else // C++98 mapping

namespace Test
{

class Default;
using DefaultPtr = ::Ice::SharedPtr<Default>;

class NoDefault;
using NoDefaultPtr = ::Ice::SharedPtr<NoDefault>;

}

namespace Test
{

class Default : public ::Ice::ValueHelper<Default, ::Ice::Value>
{
public:

    virtual ~Default();

    Default() = default;

    Default(const Default&) = default;
    Default(Default&&) = default;
    Default& operator=(const Default&) = default;
    Default& operator=(Default&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Default(::Ice::Int x, ::Ice::Int y) :
        x(x),
        y(y)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Int&, const ::Ice::Int&> ice_tuple() const
    {
        return std::tie(x, y);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Ice::Int x;
    ::Ice::Int y;
};

/// \cond INTERNAL
static Default _iceS_Default_init;
/// \endcond

class NoDefault : public ::Ice::ValueHelper<NoDefault, ::Ice::Value>
{
public:

    virtual ~NoDefault();

    NoDefault() = default;

    NoDefault(const NoDefault&) = default;
    NoDefault(NoDefault&&) = default;
    NoDefault& operator=(const NoDefault&) = default;
    NoDefault& operator=(NoDefault&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    NoDefault(::Ice::Int x, ::Ice::Int y) :
        x(x),
        y(y)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Int&, const ::Ice::Int&> ice_tuple() const
    {
        return std::tie(x, y);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Ice::Int x = 10;
    ::Ice::Int y = 10;
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::Test::Default, S>
{
    static void write(S* ostr, const ::Test::Default& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
    }
};

template<typename S>
struct StreamReader< ::Test::Default, S>
{
    static void read(S* istr, ::Test::Default& v)
    {
        istr->read(v.x);
        istr->read(v.y);
    }
};

template<typename S>
struct StreamWriter< ::Test::NoDefault, S>
{
    static void write(S* ostr, const ::Test::NoDefault& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
    }
};

template<typename S>
struct StreamReader< ::Test::NoDefault, S>
{
    static void read(S* istr, ::Test::NoDefault& v)
    {
        istr->read(v.x);
        istr->read(v.y);
    }
};

}
/// \endcond

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
