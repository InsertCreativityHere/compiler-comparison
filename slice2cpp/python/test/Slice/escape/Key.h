//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Key_h__
#define __Key_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace _cpp_and
{
    enum class assert : ::std::uint8_t
    {
        _cpp_break
    };

    struct _cpp_continue;

    class delPrx;

    class execPrx;

    class _cpp_for;
    using forPtr = ::std::shared_ptr<_cpp_for>;

    class ifPrx;

    using import = ::std::vector<assert>;

    using in = ::std::map<::std::string, assert>;

    class printPrx;

    constexpr ::std::int32_t lambda = 0;

    enum class EnumNone : ::std::uint8_t
    {
        None
    };

}

namespace _cpp_and
{

class delPrx : public ::Ice::Proxy<delPrx, ::Ice::ObjectPrx>
{
public:

    void elif(::std::int32_t _cpp_else, ::std::int32_t& except, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::int32_t> elifAsync(::std::int32_t _cpp_else, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    elifAsync(::std::int32_t _cpp_else, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_elif(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>&, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    explicit delPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    delPrx(const delPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    delPrx(delPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    delPrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    delPrx& operator=(const delPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    delPrx& operator=(delPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static delPrx _fromReference(::IceInternal::ReferencePtr ref) { return delPrx(::std::move(ref)); }

protected:

    delPrx() = default;

    explicit delPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

class execPrx : public ::Ice::Proxy<execPrx, ::Ice::ObjectPrx>
{
public:

    void finally(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> finallyAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    finallyAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_finally(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    explicit execPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    execPrx(const execPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    execPrx(execPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    execPrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    execPrx& operator=(const execPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    execPrx& operator=(execPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static execPrx _fromReference(::IceInternal::ReferencePtr ref) { return execPrx(::std::move(ref)); }

protected:

    execPrx() = default;

    explicit execPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

class ifPrx : public ::Ice::Proxy<ifPrx, execPrx, delPrx>
{
public:

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

#if defined(__GNUC__)
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wextra" // initialize all virtual bases in correct order
#endif

    explicit ifPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    ifPrx(const ifPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    ifPrx(ifPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    ifPrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    ifPrx& operator=(const ifPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    ifPrx& operator=(ifPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static ifPrx _fromReference(::IceInternal::ReferencePtr ref) { return ifPrx(::std::move(ref)); }

protected:

    ifPrx() = default;

    explicit ifPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond

#if defined(__GNUC__)
#   pragma GCC diagnostic pop
#endif
};

class printPrx : public ::Ice::Proxy<printPrx, ::Ice::ObjectPrx>
{
public:

    assert raise(const _cpp_continue& _cpp_else, const ::and::forPtr& _cpp_return, const ::std::optional<delPrx>& _cpp_while, const ::std::optional<execPrx>& yield, const ::std::optional<ifPrx>& _cpp_or, ::std::int32_t global, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<assert> raiseAsync(const _cpp_continue& _cpp_else, const ::and::forPtr& _cpp_return, const ::std::optional<delPrx>& _cpp_while, const ::std::optional<execPrx>& yield, const ::std::optional<ifPrx>& _cpp_or, ::std::int32_t global, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    raiseAsync(const _cpp_continue& _cpp_else, const ::and::forPtr& _cpp_return, const ::std::optional<delPrx>& _cpp_while, const ::std::optional<execPrx>& yield, const ::std::optional<ifPrx>& _cpp_or, ::std::int32_t global, ::std::function<void(::_cpp_and::assert)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_raise(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<assert>>&, const _cpp_continue&, const ::and::forPtr&, const ::std::optional<delPrx>&, const ::std::optional<execPrx>&, const ::std::optional<ifPrx>&, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    explicit printPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    printPrx(const printPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    printPrx(printPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    printPrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    printPrx& operator=(const printPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    printPrx& operator=(printPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static printPrx _fromReference(::IceInternal::ReferencePtr ref) { return printPrx(::std::move(ref)); }

protected:

    printPrx() = default;

    explicit printPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace _cpp_and
{

struct _cpp_continue
{
    ::std::int32_t def;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(def);
    }
};

class _cpp_for : public ::Ice::Value
{
public:

    _cpp_for() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_for(::std::int32_t lambda, ::std::optional<::_cpp_and::execPrx> from, ::std::int32_t global) :
        lambda(lambda),
        from(::std::move(from)),
        global(global)
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    ::std::string ice_id() const override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::optional<::_cpp_and::execPrx>&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(lambda, from, global);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    forPtr ice_clone() const { return ::std::static_pointer_cast <_cpp_for>(_iceCloneImpl()); }

    ::std::int32_t lambda;
    ::std::optional<::_cpp_and::execPrx> from;
    ::std::int32_t global;

protected:

    _cpp_for(const _cpp_for&) = default;

    ::Ice::ValuePtr _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

/// \cond INTERNAL
static _cpp_for _iceS_for_init;
/// \endcond

class is : public ::Ice::UserException
{
public:
    using ::Ice::UserException::UserException;

    /**
     * One-shot constructor to initialize all data members.
     */
    is(::std::int32_t lambda) noexcept :
        lambda(lambda)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(lambda);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    ::std::string ice_id() const override;

    void ice_throw() const override;

    ::std::int32_t lambda;

protected:
    void _writeImpl(::Ice::OutputStream*) const override;

    void _readImpl(::Ice::InputStream*) override;
};

class _cpp_not : public is
{
public:
    using is::is;

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_not(::std::int32_t lambda, ::std::int32_t _cpp_or, ::std::int32_t pass) noexcept :
        is(lambda),
        _cpp_or(_cpp_or),
        pass(pass)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(lambda, _cpp_or, pass);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    ::std::string ice_id() const override;

    void ice_throw() const override;

    ::std::int32_t _cpp_or;
    ::std::int32_t pass;

protected:
    void _writeImpl(::Ice::OutputStream*) const override;

    void _readImpl(::Ice::InputStream*) override;
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace _cpp_and
{

class del : public virtual ::Ice::Object
{
public:

    using ProxyType = delPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    virtual void elifAsync(::std::int32_t _cpp_else, ::std::function<void(::std::int32_t except)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_elif(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using delPtr = ::std::shared_ptr<del>;

class exec : public virtual ::Ice::Object
{
public:

    using ProxyType = execPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    virtual void finally(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_finally(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using execPtr = ::std::shared_ptr<exec>;

class _cpp_if : public virtual exec,
                public virtual del
{
public:

    using ProxyType = ifPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using ifPtr = ::std::shared_ptr<_cpp_if>;

class print : public virtual ::Ice::Object
{
public:

    using ProxyType = printPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    virtual assert raise(_cpp_continue _cpp_else, ::and::forPtr _cpp_return, ::std::optional<delPrx> _cpp_while, ::std::optional<execPrx> yield, ::std::optional<ifPrx> _cpp_or, ::std::int32_t global, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_raise(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using printPtr = ::std::shared_ptr<print>;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::_cpp_and::assert>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::_cpp_and::_cpp_continue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<>
struct StreamReader<::_cpp_and::_cpp_continue>
{
    static void read(InputStream* istr, ::_cpp_and::_cpp_continue& v)
    {
        istr->readAll(v.def);
    }
};

template<>
struct StreamReader<::_cpp_and::_cpp_for>
{
    static void read(InputStream* istr, ::_cpp_and::_cpp_for& v)
    {
        istr->readAll(v.lambda, v.from, v.global);
    }
};

template<>
struct StreamReader<::_cpp_and::is>
{
    static void read(InputStream* istr, ::_cpp_and::is& v)
    {
        istr->readAll(v.lambda);
    }
};

template<>
struct StreamWriter<::_cpp_and::_cpp_not>
{
    static void write(OutputStream* ostr, const ::_cpp_and::_cpp_not& v)
    {
        ostr->writeAll(v._cpp_or, v.pass);
    }
};

template<>
struct StreamReader<::_cpp_and::_cpp_not>
{
    static void read(InputStream* istr, ::_cpp_and::_cpp_not& v)
    {
        istr->readAll(v._cpp_or, v.pass);
    }
};

template<>
struct StreamableTraits< ::_cpp_and::EnumNone>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
