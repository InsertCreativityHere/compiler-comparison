//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Key_h__
#define __Key_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace _cpp_and
{

class del;
class delPrx;
class exec;
class execPrx;
class _cpp_for;
class _cpp_if;
class ifPrx;
class print;
class printPrx;

}

namespace _cpp_and
{

enum class assert : unsigned char
{
    _cpp_break
};

struct _cpp_continue
{
    int def;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(def);
    }
};

using import = ::std::vector<assert>;

using in = ::std::map<::std::string, assert>;

class is : public ::Ice::UserExceptionHelper<is, ::Ice::UserException>
{
public:

    virtual ~is();

    is(const is&) = default;

    is() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    is(int lambda) :
        lambda(lambda)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(lambda);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int lambda;
};

/// \cond INTERNAL
static is _iceS_is_init;
/// \endcond

class _cpp_not : public ::Ice::UserExceptionHelper<_cpp_not, is>
{
public:

    virtual ~_cpp_not();

    _cpp_not(const _cpp_not&) = default;

    _cpp_not() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_not(int lambda, int _cpp_or, int pass) :
        ::Ice::UserExceptionHelper<_cpp_not, is>(lambda),
        _cpp_or(_cpp_or),
        pass(pass)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(lambda, _cpp_or, pass);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_or;
    int pass;
};

constexpr int lambda = 0;

enum class EnumNone : unsigned char
{
    None
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace _cpp_and
{

class del : public virtual ::Ice::Object
{
public:

    using ProxyType = delPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void elifAsync(int _cpp_else, ::std::function<void(int except)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_elif(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class exec : public virtual ::Ice::Object
{
public:

    using ProxyType = execPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void finally(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_finally(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class _cpp_if : public virtual exec,
                public virtual del
{
public:

    using ProxyType = ifPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class print : public virtual ::Ice::Object
{
public:

    using ProxyType = printPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual assert raise(_cpp_continue _cpp_else, ::std::shared_ptr<::and::for> _cpp_return, ::std::shared_ptr<delPrx> _cpp_while, ::std::shared_ptr<execPrx> yield, ::std::shared_ptr<ifPrx> _cpp_or, int global, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_raise(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace _cpp_and
{

class _cpp_for : public ::Ice::ValueHelper<_cpp_for, ::Ice::Value>
{
public:

    virtual ~_cpp_for();

    _cpp_for() = default;

    _cpp_for(const _cpp_for&) = default;
    _cpp_for(_cpp_for&&) = default;
    _cpp_for& operator=(const _cpp_for&) = default;
    _cpp_for& operator=(_cpp_for&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_for(int lambda, const ::std::shared_ptr<::_cpp_and::execPrx>& from, int global) :
        lambda(lambda),
        from(from),
        global(global)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const ::std::shared_ptr<::_cpp_and::execPrx>&, const int&> ice_tuple() const
    {
        return std::tie(lambda, from, global);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int lambda;
    ::std::shared_ptr<::_cpp_and::execPrx> from;
    int global;
};

/// \cond INTERNAL
static _cpp_for _iceS_for_init;
/// \endcond

}

namespace _cpp_and
{

class delPrx : public virtual ::Ice::Proxy<delPrx, ::Ice::ObjectPrx>
{
public:

    void elif(int _cpp_else, int& except, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        except = _makePromiseOutgoing<int>(true, this, &delPrx::_iceI_elif, _cpp_else, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto elifAsync(int _cpp_else, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &delPrx::_iceI_elif, _cpp_else, context);
    }

    ::std::function<void()>
    elifAsync(int _cpp_else,
              ::std::function<void(int)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::delPrx::_iceI_elif, _cpp_else, context);
    }

    /// \cond INTERNAL
    void _iceI_elif(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    delPrx() = default;
    friend ::std::shared_ptr<delPrx> IceInternal::createProxy<delPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class execPrx : public virtual ::Ice::Proxy<execPrx, ::Ice::ObjectPrx>
{
public:

    void finally(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &execPrx::_iceI_finally, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto finallyAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &execPrx::_iceI_finally, context);
    }

    ::std::function<void()>
    finallyAsync(::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::execPrx::_iceI_finally, context);
    }

    /// \cond INTERNAL
    void _iceI_finally(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    execPrx() = default;
    friend ::std::shared_ptr<execPrx> IceInternal::createProxy<execPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class ifPrx : public virtual ::Ice::Proxy<ifPrx, execPrx, delPrx>
{
public:

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ifPrx() = default;
    friend ::std::shared_ptr<ifPrx> IceInternal::createProxy<ifPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class printPrx : public virtual ::Ice::Proxy<printPrx, ::Ice::ObjectPrx>
{
public:

    assert raise(const _cpp_continue& _cpp_else, const ::std::shared_ptr<_cpp_for>& _cpp_return, const ::std::shared_ptr<delPrx>& _cpp_while, const ::std::shared_ptr<execPrx>& yield, const ::std::shared_ptr<ifPrx>& _cpp_or, int global, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::_cpp_and::assert>(true, this, &printPrx::_iceI_raise, _cpp_else, _cpp_return, _cpp_while, yield, _cpp_or, global, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto raiseAsync(const _cpp_continue& _cpp_else, const ::std::shared_ptr<_cpp_for>& _cpp_return, const ::std::shared_ptr<delPrx>& _cpp_while, const ::std::shared_ptr<execPrx>& yield, const ::std::shared_ptr<ifPrx>& _cpp_or, int global, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::_cpp_and::assert>>().get_future())
    {
        return _makePromiseOutgoing<::_cpp_and::assert, P>(false, this, &printPrx::_iceI_raise, _cpp_else, _cpp_return, _cpp_while, yield, _cpp_or, global, context);
    }

    ::std::function<void()>
    raiseAsync(const _cpp_continue& _cpp_else, const ::std::shared_ptr<_cpp_for>& _cpp_return, const ::std::shared_ptr<delPrx>& _cpp_while, const ::std::shared_ptr<execPrx>& yield, const ::std::shared_ptr<ifPrx>& _cpp_or, int global,
               ::std::function<void(::_cpp_and::assert)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::_cpp_and::assert>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::printPrx::_iceI_raise, _cpp_else, _cpp_return, _cpp_while, yield, _cpp_or, global, context);
    }

    /// \cond INTERNAL
    void _iceI_raise(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::_cpp_and::assert>>&, const _cpp_continue&, const ::std::shared_ptr<_cpp_for>&, const ::std::shared_ptr<delPrx>&, const ::std::shared_ptr<execPrx>&, const ::std::shared_ptr<ifPrx>&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    printPrx() = default;
    friend ::std::shared_ptr<printPrx> IceInternal::createProxy<printPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::_cpp_and::assert>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::_cpp_and::_cpp_continue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::_cpp_and::_cpp_continue, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_continue& v)
    {
        istr->readAll(v.def);
    }
};

template<typename S>
struct StreamReader<::_cpp_and::_cpp_for, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_for& v)
    {
        istr->readAll(v.lambda, v.from, v.global);
    }
};

template<typename S>
struct StreamReader<::_cpp_and::is, S>
{
    static void read(S* istr, ::_cpp_and::is& v)
    {
        istr->readAll(v.lambda);
    }
};

template<typename S>
struct StreamWriter<::_cpp_and::_cpp_not, S>
{
    static void write(S* ostr, const ::_cpp_and::_cpp_not& v)
    {
        ostr->writeAll(v._cpp_or, v.pass);
    }
};

template<typename S>
struct StreamReader<::_cpp_and::_cpp_not, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_not& v)
    {
        istr->readAll(v._cpp_or, v.pass);
    }
};

template<>
struct StreamableTraits< ::_cpp_and::EnumNone>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}
/// \endcond

/// \cond INTERNAL
namespace _cpp_and
{

using delPtr = ::std::shared_ptr<del>;
using delPrxPtr = ::std::shared_ptr<delPrx>;

using execPtr = ::std::shared_ptr<exec>;
using execPrxPtr = ::std::shared_ptr<execPrx>;

using forPtr = ::std::shared_ptr<_cpp_for>;

using ifPtr = ::std::shared_ptr<_cpp_if>;
using ifPrxPtr = ::std::shared_ptr<ifPrx>;

using printPtr = ::std::shared_ptr<print>;
using printPrxPtr = ::std::shared_ptr<printPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace _cpp_and
{

class del;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< del>&);
::IceProxy::Ice::Object* upCast(del*);
/// \endcond

class exec;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< exec>&);
::IceProxy::Ice::Object* upCast(exec*);
/// \endcond

class _cpp_if;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_if>&);
::IceProxy::Ice::Object* upCast(_cpp_if*);
/// \endcond

class print;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< print>&);
::IceProxy::Ice::Object* upCast(print*);
/// \endcond

}

}

namespace _cpp_and
{
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::del> delPrx;
typedef delPrx delPrxPtr;

class del;
using delPtr = ::Ice::SharedPtr< del>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::exec> execPrx;
typedef execPrx execPrxPtr;

class exec;
using execPtr = ::Ice::SharedPtr< exec>;

class _cpp_for;
using forPtr = ::Ice::SharedPtr<_cpp_for>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_if> ifPrx;
typedef ifPrx ifPrxPtr;

class _cpp_if;
using ifPtr = ::Ice::SharedPtr< _cpp_if>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::print> printPrx;
typedef printPrx printPrxPtr;

class print;
using printPtr = ::Ice::SharedPtr< print>;

}

namespace _cpp_and
{

enum assert
{
    _cpp_break
};

struct _cpp_continue
{
    ::Ice::Int def;

    bool operator==(const _cpp_continue& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(def != rhs_.def)
        {
            return false;
        }
        return true;
    }

    bool operator<(const _cpp_continue& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(def < rhs_.def)
        {
            return true;
        }
        else if(rhs_.def < def)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const _cpp_continue& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const _cpp_continue& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const _cpp_continue& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const _cpp_continue& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector<assert> import;

typedef ::std::map< ::std::string, assert> in;

class is : public ::Ice::UserException
{
public:

    is() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit is(::Ice::Int lambda);
    is(const is&) = default;
    virtual ~is();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual is* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int lambda;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static is _iceS_is_init;
/// \endcond

class _cpp_not : public is
{
public:

    _cpp_not() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_not(::Ice::Int lambda, ::Ice::Int _cpp_or, ::Ice::Int pass);
    _cpp_not(const _cpp_not&) = default;
    virtual ~_cpp_not();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual _cpp_not* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int _cpp_or;
    ::Ice::Int pass;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

const ::Ice::Int lambda = 0;

enum EnumNone
{
    None
};

}

namespace _cpp_and
{

/**
 * AMD callback class for _cpp_and::del::elif_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_del_elif : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_del_elif();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(::Ice::Int except) = 0;
};

typedef ::IceUtil::Handle< ::_cpp_and::AMD_del_elif> AMD_del_elifPtr;

}

/// \cond INTERNAL
namespace IceAsync
{

namespace _cpp_and
{

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_del_elif : public ::_cpp_and::AMD_del_elif, public ::IceInternal::IncomingAsync
{
public:

    AMD_del_elif(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

}

}
/// \endcond

namespace _cpp_and
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::del::begin_elif.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_del_elif.
 */
class Callback_del_elif_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_del_elif_Base> Callback_del_elifPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::exec::begin_finally.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_exec_finally.
 */
class Callback_exec_finally_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_exec_finally_Base> Callback_exec_finallyPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::print::begin_raise.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_print_raise.
 */
class Callback_print_raise_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_print_raise_Base> Callback_print_raisePtr;

}

namespace IceProxy
{

namespace _cpp_and
{

class del : public virtual ::Ice::Proxy<del, ::IceProxy::Ice::Object>
{
public:

    void elif(::Ice::Int _cpp_else, ::Ice::Int& except, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_elif(except, _iceI_begin_elif(_cpp_else, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_elif(::Ice::Int _cpp_else, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_elif(_cpp_else, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_elif(::Ice::Int _cpp_else, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_elif(_cpp_else, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_elif(::Ice::Int _cpp_else, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_elif(_cpp_else, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_elif(::Ice::Int _cpp_else, const ::_cpp_and::Callback_del_elifPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_elif(_cpp_else, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_elif(::Ice::Int _cpp_else, const ::Ice::Context& context, const ::_cpp_and::Callback_del_elifPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_elif(_cpp_else, context, cb, cookie);
    }

    void end_elif(::Ice::Int& except, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_elif(::Ice::Int& iceP_except, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_elif(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class exec : public virtual ::Ice::Proxy<exec, ::IceProxy::Ice::Object>
{
public:

    void finally(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_finally(_iceI_begin_finally(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_finally(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_finally(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finally(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_finally(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_finally(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_finally(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_finally(const ::_cpp_and::Callback_exec_finallyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_finally(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_finally(const ::Ice::Context& context, const ::_cpp_and::Callback_exec_finallyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_finally(context, cb, cookie);
    }

    void end_finally(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_finally(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

/// \cond INTERNAL
class _ifBase : public virtual ::IceProxy::_cpp_and::exec, 
                public virtual ::IceProxy::_cpp_and::del
{
public:

    virtual ~_ifBase();

protected:

    virtual Object* _newInstance() const = 0;
};
/// \endcond

class _cpp_if : public virtual ::Ice::Proxy<_cpp_if, _ifBase>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class print : public virtual ::Ice::Proxy<print, ::IceProxy::Ice::Object>
{
public:

    ::_cpp_and::assert raise(const ::_cpp_and::_cpp_continue& _cpp_else, const ::_cpp_and::forPtr& _cpp_return, const ::_cpp_and::delPrx& _cpp_while, const ::_cpp_and::execPrx& yield, const ::_cpp_and::ifPrx& _cpp_or, ::Ice::Int global, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_raise(_iceI_begin_raise(_cpp_else, _cpp_return, _cpp_while, yield, _cpp_or, global, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_raise(const ::_cpp_and::_cpp_continue& _cpp_else, const ::_cpp_and::forPtr& _cpp_return, const ::_cpp_and::delPrx& _cpp_while, const ::_cpp_and::execPrx& yield, const ::_cpp_and::ifPrx& _cpp_or, ::Ice::Int global, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_raise(_cpp_else, _cpp_return, _cpp_while, yield, _cpp_or, global, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_raise(const ::_cpp_and::_cpp_continue& _cpp_else, const ::_cpp_and::forPtr& _cpp_return, const ::_cpp_and::delPrx& _cpp_while, const ::_cpp_and::execPrx& yield, const ::_cpp_and::ifPrx& _cpp_or, ::Ice::Int global, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_raise(_cpp_else, _cpp_return, _cpp_while, yield, _cpp_or, global, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_raise(const ::_cpp_and::_cpp_continue& _cpp_else, const ::_cpp_and::forPtr& _cpp_return, const ::_cpp_and::delPrx& _cpp_while, const ::_cpp_and::execPrx& yield, const ::_cpp_and::ifPrx& _cpp_or, ::Ice::Int global, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_raise(_cpp_else, _cpp_return, _cpp_while, yield, _cpp_or, global, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_raise(const ::_cpp_and::_cpp_continue& _cpp_else, const ::_cpp_and::forPtr& _cpp_return, const ::_cpp_and::delPrx& _cpp_while, const ::_cpp_and::execPrx& yield, const ::_cpp_and::ifPrx& _cpp_or, ::Ice::Int global, const ::_cpp_and::Callback_print_raisePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_raise(_cpp_else, _cpp_return, _cpp_while, yield, _cpp_or, global, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_raise(const ::_cpp_and::_cpp_continue& _cpp_else, const ::_cpp_and::forPtr& _cpp_return, const ::_cpp_and::delPrx& _cpp_while, const ::_cpp_and::execPrx& yield, const ::_cpp_and::ifPrx& _cpp_or, ::Ice::Int global, const ::Ice::Context& context, const ::_cpp_and::Callback_print_raisePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_raise(_cpp_else, _cpp_return, _cpp_while, yield, _cpp_or, global, context, cb, cookie);
    }

    ::_cpp_and::assert end_raise(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_raise(const ::_cpp_and::_cpp_continue&, const ::_cpp_and::forPtr&, const ::_cpp_and::delPrx&, const ::_cpp_and::execPrx&, const ::_cpp_and::ifPrx&, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace _cpp_and
{

class del : public virtual ::Ice::Object
{
public:

    typedef delPrx ProxyType;

    virtual ~del();
    del() = default;
    del(const del&) = default;
    del& operator=(const del&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void elif_async(const ::_cpp_and::AMD_del_elifPtr& cb, ::Ice::Int _cpp_else, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_elif(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class exec : public virtual ::Ice::Object
{
public:

    typedef execPrx ProxyType;

    virtual ~exec();
    exec() = default;
    exec(const exec&) = default;
    exec& operator=(const exec&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void finally(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_finally(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class _cpp_if : public virtual exec,
                public virtual del
{
public:

    typedef ifPrx ProxyType;

    virtual ~_cpp_if();
    _cpp_if() = default;
    _cpp_if(const _cpp_if&) = default;
    _cpp_if& operator=(const _cpp_if&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class print : public virtual ::Ice::Object
{
public:

    typedef printPrx ProxyType;

    virtual ~print();
    print() = default;
    print(const print&) = default;
    print& operator=(const print&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual assert raise(const _cpp_continue& _cpp_else, const forPtr& _cpp_return, const delPrx& _cpp_while, const execPrx& yield, const ifPrx& _cpp_or, ::Ice::Int global, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_raise(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

namespace _cpp_and
{

class _cpp_for : public ::Ice::ValueHelper<_cpp_for, ::Ice::Value>
{
public:

    virtual ~_cpp_for();

    _cpp_for() = default;

    _cpp_for(const _cpp_for&) = default;
    _cpp_for(_cpp_for&&) = default;
    _cpp_for& operator=(const _cpp_for&) = default;
    _cpp_for& operator=(_cpp_for&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_for(::Ice::Int lambda, const ::_cpp_and::execPrx& from, ::Ice::Int global) :
        lambda(lambda),
        from(from),
        global(global)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Int&, const ::_cpp_and::execPrx&, const ::Ice::Int&> ice_tuple() const
    {
        return std::tie(lambda, from, global);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Ice::Int lambda;
    ::_cpp_and::execPrx from;
    ::Ice::Int global;
};

/// \cond INTERNAL
static _cpp_for _iceS_for_init;
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::_cpp_and::assert>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::_cpp_and::_cpp_continue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::_cpp_and::_cpp_continue, S>
{
    static void write(S* ostr, const ::_cpp_and::_cpp_continue& v)
    {
        ostr->write(v.def);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::_cpp_continue, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_continue& v)
    {
        istr->read(v.def);
    }
};

template<typename S>
struct StreamWriter< ::_cpp_and::_cpp_for, S>
{
    static void write(S* ostr, const ::_cpp_and::_cpp_for& v)
    {
        ostr->write(v.lambda);
        ostr->write(v.from);
        ostr->write(v.global);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::_cpp_for, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_for& v)
    {
        istr->read(v.lambda);
        istr->read(v.from);
        istr->read(v.global);
    }
};

template<>
struct StreamableTraits< ::_cpp_and::is>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::_cpp_and::is, S>
{
    static void write(S* ostr, const ::_cpp_and::is& v)
    {
        ostr->write(v.lambda);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::is, S>
{
    static void read(S* istr, ::_cpp_and::is& v)
    {
        istr->read(v.lambda);
    }
};

template<>
struct StreamableTraits< ::_cpp_and::_cpp_not>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::_cpp_and::_cpp_not, S>
{
    static void write(S* ostr, const ::_cpp_and::_cpp_not& v)
    {
        ostr->write(v._cpp_or);
        ostr->write(v.pass);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::_cpp_not, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_not& v)
    {
        istr->read(v._cpp_or);
        istr->read(v.pass);
    }
};

template<>
struct StreamableTraits< ::_cpp_and::EnumNone>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}
/// \endcond

namespace _cpp_and
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::del::begin_elif.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_del_elif.
 */
template<class T>
class CallbackNC_del_elif : public Callback_del_elif_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_del_elif(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        delPrx proxy = delPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_except;
        try
        {
            proxy->end_elif(iceP_except, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_except);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::del::begin_elif.
 */
template<class T> Callback_del_elifPtr
newCallback_del_elif(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_del_elif<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::del::begin_elif.
 */
template<class T> Callback_del_elifPtr
newCallback_del_elif(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_del_elif<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::del::begin_elif.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_del_elif.
 */
template<class T, typename CT>
class Callback_del_elif : public Callback_del_elif_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_del_elif(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        delPrx proxy = delPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_except;
        try
        {
            proxy->end_elif(iceP_except, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_except, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::del::begin_elif.
 */
template<class T, typename CT> Callback_del_elifPtr
newCallback_del_elif(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_del_elif<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::del::begin_elif.
 */
template<class T, typename CT> Callback_del_elifPtr
newCallback_del_elif(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_del_elif<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::exec::begin_finally.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_exec_finally.
 */
template<class T>
class CallbackNC_exec_finally : public Callback_exec_finally_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_exec_finally(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::exec::begin_finally.
 */
template<class T> Callback_exec_finallyPtr
newCallback_exec_finally(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_exec_finally<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::exec::begin_finally.
 */
template<class T> Callback_exec_finallyPtr
newCallback_exec_finally(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_exec_finally<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::exec::begin_finally.
 */
template<class T> Callback_exec_finallyPtr
newCallback_exec_finally(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_exec_finally<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::exec::begin_finally.
 */
template<class T> Callback_exec_finallyPtr
newCallback_exec_finally(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_exec_finally<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::exec::begin_finally.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_exec_finally.
 */
template<class T, typename CT>
class Callback_exec_finally : public Callback_exec_finally_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_exec_finally(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::exec::begin_finally.
 */
template<class T, typename CT> Callback_exec_finallyPtr
newCallback_exec_finally(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_exec_finally<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::exec::begin_finally.
 */
template<class T, typename CT> Callback_exec_finallyPtr
newCallback_exec_finally(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_exec_finally<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::exec::begin_finally.
 */
template<class T, typename CT> Callback_exec_finallyPtr
newCallback_exec_finally(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_exec_finally<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::exec::begin_finally.
 */
template<class T, typename CT> Callback_exec_finallyPtr
newCallback_exec_finally(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_exec_finally<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::print::begin_raise.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_print_raise.
 */
template<class T>
class CallbackNC_print_raise : public Callback_print_raise_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(assert);

    CallbackNC_print_raise(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        printPrx proxy = printPrx::uncheckedCast(result->getProxy());
        assert ret;
        try
        {
            ret = proxy->end_raise(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::print::begin_raise.
 */
template<class T> Callback_print_raisePtr
newCallback_print_raise(const IceUtil::Handle<T>& instance, void (T::*cb)(assert), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_print_raise<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::print::begin_raise.
 */
template<class T> Callback_print_raisePtr
newCallback_print_raise(T* instance, void (T::*cb)(assert), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_print_raise<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::print::begin_raise.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_print_raise.
 */
template<class T, typename CT>
class Callback_print_raise : public Callback_print_raise_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(assert, const CT&);

    Callback_print_raise(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        printPrx proxy = printPrx::uncheckedCast(result->getProxy());
        assert ret;
        try
        {
            ret = proxy->end_raise(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::print::begin_raise.
 */
template<class T, typename CT> Callback_print_raisePtr
newCallback_print_raise(const IceUtil::Handle<T>& instance, void (T::*cb)(assert, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_print_raise<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::print::begin_raise.
 */
template<class T, typename CT> Callback_print_raisePtr
newCallback_print_raise(T* instance, void (T::*cb)(assert, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_print_raise<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
