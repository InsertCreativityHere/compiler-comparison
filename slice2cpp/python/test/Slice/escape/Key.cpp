//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Key.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_and_del_ids[2] =
{
    "::Ice::Object",
    "::and::del"
};
const ::std::string iceC_and_del_ops[] =
{
    "elif",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_and_del_elif_name = "elif";

const ::std::string iceC_and_exec_ids[2] =
{
    "::Ice::Object",
    "::and::exec"
};
const ::std::string iceC_and_exec_ops[] =
{
    "finally",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_and_exec_finally_name = "finally";

const ::IceInternal::DefaultValueFactoryInit<::_cpp_and::_cpp_for> iceC_and_for_init("::and::for");

const ::std::string iceC_and_if_ids[4] =
{
    "::Ice::Object",
    "::and::del",
    "::and::exec",
    "::and::if"
};
const ::std::string iceC_and_if_ops[] =
{
    "elif",
    "finally",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

const ::IceInternal::DefaultUserExceptionFactoryInit<::_cpp_and::is> iceC_and_is_init("::and::is");

const ::IceInternal::DefaultUserExceptionFactoryInit<::_cpp_and::_cpp_not> iceC_and_not_init("::and::not");

}

_cpp_and::is::~is()
{
}

const ::std::string&
_cpp_and::is::ice_staticId()
{
    static const ::std::string typeId = "::and::is";
    return typeId;
}

_cpp_and::_cpp_not::~_cpp_not()
{
}

const ::std::string&
_cpp_and::_cpp_not::ice_staticId()
{
    static const ::std::string typeId = "::and::not";
    return typeId;
}

bool
_cpp_and::del::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_del_ids, iceC_and_del_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::del::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_del_ids[0], &iceC_and_del_ids[2]);
}

::std::string
_cpp_and::del::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::del::ice_staticId()
{
    static const ::std::string typeId = "::and::del";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::del::_iceD_elif(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_else;
    istr->readAll(iceP_else);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_except)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_except);
        inA->endWriteParams();
        inA->completed();
    };
    this->elifAsync(iceP_else, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::del::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_del_ops, iceC_and_del_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_del_ops)
    {
        case 0:
        {
            return _iceD_elif(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::exec::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_exec_ids, iceC_and_exec_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::exec::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_exec_ids[0], &iceC_and_exec_ids[2]);
}

::std::string
_cpp_and::exec::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::exec::ice_staticId()
{
    static const ::std::string typeId = "::and::exec";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::exec::_iceD_finally(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->finally(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::exec::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_exec_ops, iceC_and_exec_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_exec_ops)
    {
        case 0:
        {
            return _iceD_finally(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::_cpp_if::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_if_ids, iceC_and_if_ids + 4, s);
}

::std::vector<::std::string>
_cpp_and::_cpp_if::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_if_ids[0], &iceC_and_if_ids[4]);
}

::std::string
_cpp_and::_cpp_if::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_if::ice_staticId()
{
    static const ::std::string typeId = "::and::if";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_if::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_if_ops, iceC_and_if_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_if_ops)
    {
        case 0:
        {
            return _iceD_elif(in, current);
        }
        case 1:
        {
            return _iceD_finally(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

_cpp_and::_cpp_for::~_cpp_for()
{
}

const ::std::string&
_cpp_and::_cpp_for::ice_staticId()
{
    static const ::std::string typeId = "::and::for";
    return typeId;
}

/// \cond INTERNAL
void
_cpp_and::delPrx::_iceI_elif(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_else, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_and_del_elif_name);
    outAsync->invoke(iceC_and_del_elif_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_else);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
_cpp_and::delPrx::_newInstance() const
{
    return ::IceInternal::createProxy<delPrx>();
}
/// \endcond

const ::std::string&
_cpp_and::delPrx::ice_staticId()
{
    return del::ice_staticId();
}

/// \cond INTERNAL
void
_cpp_and::execPrx::_iceI_finally(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_and_exec_finally_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
_cpp_and::execPrx::_newInstance() const
{
    return ::IceInternal::createProxy<execPrx>();
}
/// \endcond

const ::std::string&
_cpp_and::execPrx::ice_staticId()
{
    return exec::ice_staticId();
}

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
_cpp_and::ifPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ifPrx>();
}
/// \endcond

const ::std::string&
_cpp_and::ifPrx::ice_staticId()
{
    return _cpp_if::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_and_del_elif_name = "elif";

const ::std::string iceC_and_exec_finally_name = "finally";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::_cpp_and::is> iceC_and_is_init("::and::is");

}

_cpp_and::is::is(::Ice::Int lambda) :
    ::Ice::UserException(),
    lambda(lambda)
{
}

#ifdef ICE_CPP11_COMPILER
_cpp_and::is::~is()
{
}
#else
_cpp_and::is::~is() throw()
{
}
#endif

::std::string
_cpp_and::is::ice_id() const
{
    return "::and::is";
}

_cpp_and::is*
_cpp_and::is::ice_clone() const
{
    return new is(*this);
}

void
_cpp_and::is::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
_cpp_and::is::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::and::is", -1, true);
    ::Ice::StreamWriter< is, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
_cpp_and::is::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< is, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::_cpp_and::_cpp_not> iceC_and_not_init("::and::not");

}

_cpp_and::_cpp_not::_cpp_not(::Ice::Int lambda, ::Ice::Int _cpp_or, ::Ice::Int pass) :
    is(lambda),
    _cpp_or(_cpp_or),
    pass(pass)
{
}

#ifdef ICE_CPP11_COMPILER
_cpp_and::_cpp_not::~_cpp_not()
{
}
#else
_cpp_and::_cpp_not::~_cpp_not() throw()
{
}
#endif

::std::string
_cpp_and::_cpp_not::ice_id() const
{
    return "::and::not";
}

_cpp_and::_cpp_not*
_cpp_and::_cpp_not::ice_clone() const
{
    return new _cpp_not(*this);
}

void
_cpp_and::_cpp_not::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
_cpp_and::_cpp_not::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::and::not", -1, false);
    ::Ice::StreamWriter< _cpp_not, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    is::_writeImpl(ostr);
}

void
_cpp_and::_cpp_not::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< _cpp_not, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    is::_readImpl(istr);
}
/// \endcond

_cpp_and::AMD_del_elif::~AMD_del_elif()
{
}

/// \cond INTERNAL
IceAsync::_cpp_and::AMD_del_elif::AMD_del_elif(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::_cpp_and::AMD_del_elif::ice_response(::Ice::Int except)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(except);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(del* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< del>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new del;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::_cpp_and::del::_iceI_begin_elif(::Ice::Int iceP_else, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_and_del_elif_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_and_del_elif_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_and_del_elif_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_else);
        result->endWriteParams();
        result->invoke(iceC_and_del_elif_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::_cpp_and::del::end_elif(::Ice::Int& iceP_except, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_and_del_elif_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_except);
    result->_endReadParams();
}

void IceProxy::_cpp_and::del::_iceI_end_elif(::Ice::Int& iceP_except, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_and_del_elif_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_except);
    result->_endReadParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::del::_newInstance() const
{
    return new del;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::del::ice_staticId()
{
    return ::_cpp_and::del::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(exec* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< exec>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new exec;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::_cpp_and::exec::_iceI_begin_finally(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_and_exec_finally_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_and_exec_finally_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_and_exec_finally_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::_cpp_and::exec::end_finally(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_and_exec_finally_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::exec::_newInstance() const
{
    return new exec;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::exec::ice_staticId()
{
    return ::_cpp_and::exec::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(_cpp_for* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< _cpp_for>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new _cpp_for;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::_cpp_for::_newInstance() const
{
    return new _cpp_for;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::_cpp_for::ice_staticId()
{
    return ::_cpp_and::_cpp_for::ice_staticId();
}

::IceProxy::_cpp_and::_ifBase::~_ifBase()
{
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(_cpp_if* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< _cpp_if>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new _cpp_if;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::_cpp_if::_newInstance() const
{
    return new _cpp_if;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::_cpp_if::ice_staticId()
{
    return ::_cpp_and::_cpp_if::ice_staticId();
}

_cpp_and::del::~del()
{
}

/// \cond INTERNAL
::Ice::Object* _cpp_and::upCast(del* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_and_del_ids[2] =
{
    "::Ice::Object",
    "::and::del"
};

}

bool
_cpp_and::del::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_del_ids, iceC_and_del_ids + 2, s);
}

::std::vector< ::std::string>
_cpp_and::del::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_del_ids[0], &iceC_and_del_ids[2]);
}

const ::std::string&
_cpp_and::del::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::del::ice_staticId()
{
    static const ::std::string typeId = "::and::del";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::del::_iceD_elif(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_else;
    istr->read(iceP_else);
    inS.endReadParams();
    this->elif_async(new IceAsync::_cpp_and::AMD_del_elif(inS), iceP_else, current);
    return false;
}
/// \endcond

namespace
{
const ::std::string iceC_and_del_all[] =
{
    "elif",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
_cpp_and::del::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_del_all, iceC_and_del_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_del_all)
    {
        case 0:
        {
            return _iceD_elif(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
_cpp_and::del::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< del, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
_cpp_and::del::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< del, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
_cpp_and::_icePatchObjectPtr(delPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = delPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(del::ice_staticId(), v);
    }
}
/// \endcond

_cpp_and::exec::~exec()
{
}

/// \cond INTERNAL
::Ice::Object* _cpp_and::upCast(exec* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_and_exec_ids[2] =
{
    "::Ice::Object",
    "::and::exec"
};

}

bool
_cpp_and::exec::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_exec_ids, iceC_and_exec_ids + 2, s);
}

::std::vector< ::std::string>
_cpp_and::exec::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_exec_ids[0], &iceC_and_exec_ids[2]);
}

const ::std::string&
_cpp_and::exec::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::exec::ice_staticId()
{
    static const ::std::string typeId = "::and::exec";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::exec::_iceD_finally(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->finally(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_and_exec_all[] =
{
    "finally",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
_cpp_and::exec::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_exec_all, iceC_and_exec_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_exec_all)
    {
        case 0:
        {
            return _iceD_finally(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
_cpp_and::exec::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< exec, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
_cpp_and::exec::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< exec, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
_cpp_and::_icePatchObjectPtr(execPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = execPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(exec::ice_staticId(), v);
    }
}
/// \endcond

_cpp_and::_cpp_for::~_cpp_for()
{
}

/// \cond INTERNAL
::Ice::Object* _cpp_and::upCast(_cpp_for* p) { return p; }

/// \endcond
::Ice::ObjectPtr
_cpp_and::_cpp_for::ice_clone() const
{
    ::Ice::Object* p = new _cpp_for(*this);
    return p;
}

namespace
{
const ::std::string iceC_and_for_ids[2] =
{
    "::Ice::Object",
    "::and::for"
};

}

bool
_cpp_and::_cpp_for::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_for_ids, iceC_and_for_ids + 2, s);
}

::std::vector< ::std::string>
_cpp_and::_cpp_for::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_for_ids[0], &iceC_and_for_ids[2]);
}

const ::std::string&
_cpp_and::_cpp_for::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_for::ice_staticId()
{
    static const ::std::string typeId = "::and::for";
    return typeId;
}

/// \cond STREAM
void
_cpp_and::_cpp_for::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< _cpp_for, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
_cpp_and::_cpp_for::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< _cpp_for, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::_cpp_and::_cpp_for> iceC_and_for_init("::and::for");
}

::Ice::ValueFactoryPtr
_cpp_and::_cpp_for::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::_cpp_and::_cpp_for::ice_staticId());
}

/// \cond INTERNAL
void
_cpp_and::_icePatchObjectPtr(forPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = forPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(_cpp_for::ice_staticId(), v);
    }
}
/// \endcond

_cpp_and::_cpp_if::~_cpp_if()
{
}

/// \cond INTERNAL
::Ice::Object* _cpp_and::upCast(_cpp_if* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_and_if_ids[4] =
{
    "::Ice::Object",
    "::and::del",
    "::and::exec",
    "::and::if"
};

}

bool
_cpp_and::_cpp_if::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_if_ids, iceC_and_if_ids + 4, s);
}

::std::vector< ::std::string>
_cpp_and::_cpp_if::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_if_ids[0], &iceC_and_if_ids[4]);
}

const ::std::string&
_cpp_and::_cpp_if::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_if::ice_staticId()
{
    static const ::std::string typeId = "::and::if";
    return typeId;
}

namespace
{
const ::std::string iceC_and_if_all[] =
{
    "elif",
    "finally",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
_cpp_and::_cpp_if::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_if_all, iceC_and_if_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_if_all)
    {
        case 0:
        {
            return _iceD_elif(in, current);
        }
        case 1:
        {
            return _iceD_finally(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
_cpp_and::_cpp_if::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< _cpp_if, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
_cpp_and::_cpp_if::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< _cpp_if, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
_cpp_and::_icePatchObjectPtr(ifPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ifPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(_cpp_if::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
