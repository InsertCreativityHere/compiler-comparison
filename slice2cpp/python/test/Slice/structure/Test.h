//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>
#include <list>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{


using IntSeq = ::std::vector<::std::int32_t>;

using StringDict = ::std::map<::std::string, ::std::string>;
struct S1;
struct S2;
class C;

using CPtr = ::std::shared_ptr<C>;
struct S3;

}

namespace Test
{

struct S1
{
    ::std::string name;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(name);
    }
};

struct S2
{
    bool bo;
    ::std::uint8_t by;
    ::std::int16_t sh;
    ::std::int32_t i;
    ::std::int64_t l;
    ::std::string str;
    ::Test::IntSeq seq;
    ::Test::S1 s;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const ::std::uint8_t&, const ::std::int16_t&, const ::std::int32_t&, const ::std::int64_t&, const ::std::string&, const ::Test::IntSeq&, const ::Test::S1&> ice_tuple() const
    {
        return std::tie(bo, by, sh, i, l, str, seq, s);
    }
};

class C : public ::Ice::ValueHelper<C, ::Ice::Value>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C(const ::std::string& name) :
        name(name)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(name);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string name;
};

/// \cond INTERNAL
static C _iceS_C_init;
/// \endcond

struct S3
{
    ::std::shared_ptr<::Test::C> obj;
    ::Test::StringDict sd;
    ::std::optional<::Ice::ObjectPrx> prx;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::C>&, const ::Test::StringDict&, const ::std::optional<::Ice::ObjectPrx>&> ice_tuple() const
    {
        return std::tie(obj, sd, prx);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::Test::S1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::S1, S>
{
    static void read(S* istr, ::Test::S1& v)
    {
        istr->readAll(v.name);
    }
};

template<>
struct StreamableTraits<::Test::S2>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 19;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::S2, S>
{
    static void read(S* istr, ::Test::S2& v)
    {
        istr->readAll(v.bo, v.by, v.sh, v.i, v.l, v.str, v.seq, v.s);
    }
};

template<typename S>
struct StreamReader<::Test::C, S>
{
    static void read(S* istr, ::Test::C& v)
    {
        istr->readAll(v.name);
    }
};

template<>
struct StreamableTraits<::Test::S3>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::S3, S>
{
    static void read(S* istr, ::Test::S3& v)
    {
        istr->readAll(v.obj, v.sd, v.prx);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
