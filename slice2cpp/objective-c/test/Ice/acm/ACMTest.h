//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ACMTest.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __ACMTest_h__
#define __ACMTest_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{

class TestIntf;
class TestIntfPrx;
class RemoteObjectAdapter;
class RemoteObjectAdapterPrx;
class RemoteCommunicator;
class RemoteCommunicatorPrx;

}

namespace Test
{

class TestIntf : public virtual ::Ice::Object
{
public:

    using ProxyType = TestIntfPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void sleep(int seconds, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sleep(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sleepAndHold(int seconds, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sleepAndHold(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void interruptSleep(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_interruptSleep(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void startHeartbeatCount(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_startHeartbeatCount(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void waitForHeartbeatCount(int count, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_waitForHeartbeatCount(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class RemoteObjectAdapter : public virtual ::Ice::Object
{
public:

    using ProxyType = RemoteObjectAdapterPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<TestIntfPrx> getTestIntf(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getTestIntf(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void activate(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_activate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void hold(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_hold(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void deactivate(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_deactivate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class RemoteCommunicator : public virtual ::Ice::Object
{
public:

    using ProxyType = RemoteCommunicatorPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<RemoteObjectAdapterPrx> createObjectAdapter(int acmTimeout, int close, int heartbeat, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_createObjectAdapter(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test
{

class TestIntfPrx : public virtual ::Ice::Proxy<TestIntfPrx, ::Ice::ObjectPrx>
{
public:

    void sleep(int seconds, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_sleep, seconds, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sleepAsync(int seconds, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TestIntfPrx::_iceI_sleep, seconds, context);
    }

    ::std::function<void()>
    sleepAsync(int seconds,
               ::std::function<void()> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_sleep, seconds, context);
    }

    /// \cond INTERNAL
    void _iceI_sleep(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::Ice::Context&);
    /// \endcond

    void sleepAndHold(int seconds, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_sleepAndHold, seconds, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sleepAndHoldAsync(int seconds, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TestIntfPrx::_iceI_sleepAndHold, seconds, context);
    }

    ::std::function<void()>
    sleepAndHoldAsync(int seconds,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_sleepAndHold, seconds, context);
    }

    /// \cond INTERNAL
    void _iceI_sleepAndHold(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::Ice::Context&);
    /// \endcond

    void interruptSleep(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_interruptSleep, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto interruptSleepAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TestIntfPrx::_iceI_interruptSleep, context);
    }

    ::std::function<void()>
    interruptSleepAsync(::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_interruptSleep, context);
    }

    /// \cond INTERNAL
    void _iceI_interruptSleep(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void startHeartbeatCount(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_startHeartbeatCount, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto startHeartbeatCountAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TestIntfPrx::_iceI_startHeartbeatCount, context);
    }

    ::std::function<void()>
    startHeartbeatCountAsync(::std::function<void()> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_startHeartbeatCount, context);
    }

    /// \cond INTERNAL
    void _iceI_startHeartbeatCount(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void waitForHeartbeatCount(int count, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_waitForHeartbeatCount, count, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto waitForHeartbeatCountAsync(int count, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TestIntfPrx::_iceI_waitForHeartbeatCount, count, context);
    }

    ::std::function<void()>
    waitForHeartbeatCountAsync(int count,
                               ::std::function<void()> response,
                               ::std::function<void(::std::exception_ptr)> ex = nullptr,
                               ::std::function<void(bool)> sent = nullptr,
                               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_waitForHeartbeatCount, count, context);
    }

    /// \cond INTERNAL
    void _iceI_waitForHeartbeatCount(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    TestIntfPrx() = default;
    friend ::std::shared_ptr<TestIntfPrx> IceInternal::createProxy<TestIntfPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class RemoteObjectAdapterPrx : public virtual ::Ice::Proxy<RemoteObjectAdapterPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<TestIntfPrx> getTestIntf(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::TestIntfPrx>>(true, this, &RemoteObjectAdapterPrx::_iceI_getTestIntf, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getTestIntfAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::TestIntfPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::TestIntfPrx>, P>(false, this, &RemoteObjectAdapterPrx::_iceI_getTestIntf, context);
    }

    ::std::function<void()>
    getTestIntfAsync(::std::function<void(::std::shared_ptr<::Test::TestIntfPrx>)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::TestIntfPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::RemoteObjectAdapterPrx::_iceI_getTestIntf, context);
    }

    /// \cond INTERNAL
    void _iceI_getTestIntf(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::TestIntfPrx>>>&, const ::Ice::Context&);
    /// \endcond

    void activate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RemoteObjectAdapterPrx::_iceI_activate, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto activateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RemoteObjectAdapterPrx::_iceI_activate, context);
    }

    ::std::function<void()>
    activateAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::RemoteObjectAdapterPrx::_iceI_activate, context);
    }

    /// \cond INTERNAL
    void _iceI_activate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void hold(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RemoteObjectAdapterPrx::_iceI_hold, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto holdAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RemoteObjectAdapterPrx::_iceI_hold, context);
    }

    ::std::function<void()>
    holdAsync(::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::RemoteObjectAdapterPrx::_iceI_hold, context);
    }

    /// \cond INTERNAL
    void _iceI_hold(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void deactivate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RemoteObjectAdapterPrx::_iceI_deactivate, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto deactivateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RemoteObjectAdapterPrx::_iceI_deactivate, context);
    }

    ::std::function<void()>
    deactivateAsync(::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::RemoteObjectAdapterPrx::_iceI_deactivate, context);
    }

    /// \cond INTERNAL
    void _iceI_deactivate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    RemoteObjectAdapterPrx() = default;
    friend ::std::shared_ptr<RemoteObjectAdapterPrx> IceInternal::createProxy<RemoteObjectAdapterPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class RemoteCommunicatorPrx : public virtual ::Ice::Proxy<RemoteCommunicatorPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<RemoteObjectAdapterPrx> createObjectAdapter(int acmTimeout, int close, int heartbeat, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::RemoteObjectAdapterPrx>>(true, this, &RemoteCommunicatorPrx::_iceI_createObjectAdapter, acmTimeout, close, heartbeat, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto createObjectAdapterAsync(int acmTimeout, int close, int heartbeat, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::RemoteObjectAdapterPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::RemoteObjectAdapterPrx>, P>(false, this, &RemoteCommunicatorPrx::_iceI_createObjectAdapter, acmTimeout, close, heartbeat, context);
    }

    ::std::function<void()>
    createObjectAdapterAsync(int acmTimeout, int close, int heartbeat,
                             ::std::function<void(::std::shared_ptr<::Test::RemoteObjectAdapterPrx>)> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::RemoteObjectAdapterPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::RemoteCommunicatorPrx::_iceI_createObjectAdapter, acmTimeout, close, heartbeat, context);
    }

    /// \cond INTERNAL
    void _iceI_createObjectAdapter(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::RemoteObjectAdapterPrx>>>&, int, int, int, const ::Ice::Context&);
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RemoteCommunicatorPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RemoteCommunicatorPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::RemoteCommunicatorPrx::_iceI_shutdown, context);
    }

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    RemoteCommunicatorPrx() = default;
    friend ::std::shared_ptr<RemoteCommunicatorPrx> IceInternal::createProxy<RemoteCommunicatorPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using TestIntfPtr = ::std::shared_ptr<TestIntf>;
using TestIntfPrxPtr = ::std::shared_ptr<TestIntfPrx>;

using RemoteObjectAdapterPtr = ::std::shared_ptr<RemoteObjectAdapter>;
using RemoteObjectAdapterPrxPtr = ::std::shared_ptr<RemoteObjectAdapterPrx>;

using RemoteCommunicatorPtr = ::std::shared_ptr<RemoteCommunicator>;
using RemoteCommunicatorPrxPtr = ::std::shared_ptr<RemoteCommunicatorPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Test
{

class TestIntf;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< TestIntf>&);
::IceProxy::Ice::Object* upCast(TestIntf*);
/// \endcond

class RemoteObjectAdapter;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< RemoteObjectAdapter>&);
::IceProxy::Ice::Object* upCast(RemoteObjectAdapter*);
/// \endcond

class RemoteCommunicator;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< RemoteCommunicator>&);
::IceProxy::Ice::Object* upCast(RemoteCommunicator*);
/// \endcond

}

}

namespace Test
{

class TestIntf;
/// \cond INTERNAL
::Ice::Object* upCast(TestIntf*);
/// \endcond
typedef ::IceInternal::Handle< TestIntf> TestIntfPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::TestIntf> TestIntfPrx;
typedef TestIntfPrx TestIntfPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(TestIntfPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class RemoteObjectAdapter;
/// \cond INTERNAL
::Ice::Object* upCast(RemoteObjectAdapter*);
/// \endcond
typedef ::IceInternal::Handle< RemoteObjectAdapter> RemoteObjectAdapterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::RemoteObjectAdapter> RemoteObjectAdapterPrx;
typedef RemoteObjectAdapterPrx RemoteObjectAdapterPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(RemoteObjectAdapterPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class RemoteCommunicator;
/// \cond INTERNAL
::Ice::Object* upCast(RemoteCommunicator*);
/// \endcond
typedef ::IceInternal::Handle< RemoteCommunicator> RemoteCommunicatorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::RemoteCommunicator> RemoteCommunicatorPrx;
typedef RemoteCommunicatorPrx RemoteCommunicatorPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(RemoteCommunicatorPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Test
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::TestIntf::begin_sleep.
 * Create a wrapper instance by calling ::Test::newCallback_TestIntf_sleep.
 */
class Callback_TestIntf_sleep_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_sleep_Base> Callback_TestIntf_sleepPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::TestIntf::begin_sleepAndHold.
 * Create a wrapper instance by calling ::Test::newCallback_TestIntf_sleepAndHold.
 */
class Callback_TestIntf_sleepAndHold_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_sleepAndHold_Base> Callback_TestIntf_sleepAndHoldPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::TestIntf::begin_interruptSleep.
 * Create a wrapper instance by calling ::Test::newCallback_TestIntf_interruptSleep.
 */
class Callback_TestIntf_interruptSleep_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_interruptSleep_Base> Callback_TestIntf_interruptSleepPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::TestIntf::begin_startHeartbeatCount.
 * Create a wrapper instance by calling ::Test::newCallback_TestIntf_startHeartbeatCount.
 */
class Callback_TestIntf_startHeartbeatCount_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_startHeartbeatCount_Base> Callback_TestIntf_startHeartbeatCountPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::TestIntf::begin_waitForHeartbeatCount.
 * Create a wrapper instance by calling ::Test::newCallback_TestIntf_waitForHeartbeatCount.
 */
class Callback_TestIntf_waitForHeartbeatCount_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestIntf_waitForHeartbeatCount_Base> Callback_TestIntf_waitForHeartbeatCountPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::RemoteObjectAdapter::begin_getTestIntf.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteObjectAdapter_getTestIntf.
 */
class Callback_RemoteObjectAdapter_getTestIntf_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RemoteObjectAdapter_getTestIntf_Base> Callback_RemoteObjectAdapter_getTestIntfPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::RemoteObjectAdapter::begin_activate.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteObjectAdapter_activate.
 */
class Callback_RemoteObjectAdapter_activate_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RemoteObjectAdapter_activate_Base> Callback_RemoteObjectAdapter_activatePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::RemoteObjectAdapter::begin_hold.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteObjectAdapter_hold.
 */
class Callback_RemoteObjectAdapter_hold_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RemoteObjectAdapter_hold_Base> Callback_RemoteObjectAdapter_holdPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::RemoteObjectAdapter::begin_deactivate.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteObjectAdapter_deactivate.
 */
class Callback_RemoteObjectAdapter_deactivate_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RemoteObjectAdapter_deactivate_Base> Callback_RemoteObjectAdapter_deactivatePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::RemoteCommunicator::begin_createObjectAdapter.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteCommunicator_createObjectAdapter.
 */
class Callback_RemoteCommunicator_createObjectAdapter_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RemoteCommunicator_createObjectAdapter_Base> Callback_RemoteCommunicator_createObjectAdapterPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::RemoteCommunicator::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteCommunicator_shutdown.
 */
class Callback_RemoteCommunicator_shutdown_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RemoteCommunicator_shutdown_Base> Callback_RemoteCommunicator_shutdownPtr;

}

namespace IceProxy
{

namespace Test
{

class TestIntf : public virtual ::Ice::Proxy<TestIntf, ::IceProxy::Ice::Object>
{
public:

    void sleep(::Ice::Int seconds, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sleep(_iceI_begin_sleep(seconds, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sleep(::Ice::Int seconds, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sleep(seconds, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sleep(::Ice::Int seconds, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sleep(seconds, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sleep(::Ice::Int seconds, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sleep(seconds, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sleep(::Ice::Int seconds, const ::Test::Callback_TestIntf_sleepPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sleep(seconds, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sleep(::Ice::Int seconds, const ::Ice::Context& context, const ::Test::Callback_TestIntf_sleepPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sleep(seconds, context, cb, cookie);
    }

    void end_sleep(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sleep(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void sleepAndHold(::Ice::Int seconds, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sleepAndHold(_iceI_begin_sleepAndHold(seconds, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sleepAndHold(::Ice::Int seconds, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sleepAndHold(seconds, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sleepAndHold(::Ice::Int seconds, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sleepAndHold(seconds, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sleepAndHold(::Ice::Int seconds, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sleepAndHold(seconds, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sleepAndHold(::Ice::Int seconds, const ::Test::Callback_TestIntf_sleepAndHoldPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sleepAndHold(seconds, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sleepAndHold(::Ice::Int seconds, const ::Ice::Context& context, const ::Test::Callback_TestIntf_sleepAndHoldPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sleepAndHold(seconds, context, cb, cookie);
    }

    void end_sleepAndHold(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sleepAndHold(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void interruptSleep(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_interruptSleep(_iceI_begin_interruptSleep(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_interruptSleep(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_interruptSleep(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_interruptSleep(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_interruptSleep(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_interruptSleep(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_interruptSleep(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_interruptSleep(const ::Test::Callback_TestIntf_interruptSleepPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_interruptSleep(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_interruptSleep(const ::Ice::Context& context, const ::Test::Callback_TestIntf_interruptSleepPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_interruptSleep(context, cb, cookie);
    }

    void end_interruptSleep(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_interruptSleep(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void startHeartbeatCount(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_startHeartbeatCount(_iceI_begin_startHeartbeatCount(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_startHeartbeatCount(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_startHeartbeatCount(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startHeartbeatCount(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startHeartbeatCount(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_startHeartbeatCount(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startHeartbeatCount(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_startHeartbeatCount(const ::Test::Callback_TestIntf_startHeartbeatCountPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startHeartbeatCount(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_startHeartbeatCount(const ::Ice::Context& context, const ::Test::Callback_TestIntf_startHeartbeatCountPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startHeartbeatCount(context, cb, cookie);
    }

    void end_startHeartbeatCount(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_startHeartbeatCount(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void waitForHeartbeatCount(::Ice::Int count, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_waitForHeartbeatCount(_iceI_begin_waitForHeartbeatCount(count, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_waitForHeartbeatCount(::Ice::Int count, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_waitForHeartbeatCount(count, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_waitForHeartbeatCount(::Ice::Int count, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitForHeartbeatCount(count, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_waitForHeartbeatCount(::Ice::Int count, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitForHeartbeatCount(count, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_waitForHeartbeatCount(::Ice::Int count, const ::Test::Callback_TestIntf_waitForHeartbeatCountPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitForHeartbeatCount(count, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_waitForHeartbeatCount(::Ice::Int count, const ::Ice::Context& context, const ::Test::Callback_TestIntf_waitForHeartbeatCountPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitForHeartbeatCount(count, context, cb, cookie);
    }

    void end_waitForHeartbeatCount(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_waitForHeartbeatCount(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class RemoteObjectAdapter : public virtual ::Ice::Proxy<RemoteObjectAdapter, ::IceProxy::Ice::Object>
{
public:

    ::Test::TestIntfPrx getTestIntf(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getTestIntf(_iceI_begin_getTestIntf(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getTestIntf(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getTestIntf(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTestIntf(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTestIntf(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getTestIntf(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTestIntf(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getTestIntf(const ::Test::Callback_RemoteObjectAdapter_getTestIntfPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTestIntf(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getTestIntf(const ::Ice::Context& context, const ::Test::Callback_RemoteObjectAdapter_getTestIntfPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTestIntf(context, cb, cookie);
    }

    ::Test::TestIntfPrx end_getTestIntf(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getTestIntf(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void activate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_activate(_iceI_begin_activate(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_activate(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_activate(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_activate(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Test::Callback_RemoteObjectAdapter_activatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_activate(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context& context, const ::Test::Callback_RemoteObjectAdapter_activatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_activate(context, cb, cookie);
    }

    void end_activate(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_activate(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void hold(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_hold(_iceI_begin_hold(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_hold(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_hold(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_hold(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_hold(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_hold(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_hold(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_hold(const ::Test::Callback_RemoteObjectAdapter_holdPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_hold(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_hold(const ::Ice::Context& context, const ::Test::Callback_RemoteObjectAdapter_holdPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_hold(context, cb, cookie);
    }

    void end_hold(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_hold(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void deactivate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_deactivate(_iceI_begin_deactivate(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_deactivate(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deactivate(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deactivate(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Test::Callback_RemoteObjectAdapter_deactivatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deactivate(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_deactivate(const ::Ice::Context& context, const ::Test::Callback_RemoteObjectAdapter_deactivatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deactivate(context, cb, cookie);
    }

    void end_deactivate(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_deactivate(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class RemoteCommunicator : public virtual ::Ice::Proxy<RemoteCommunicator, ::IceProxy::Ice::Object>
{
public:

    ::Test::RemoteObjectAdapterPrx createObjectAdapter(::Ice::Int acmTimeout, ::Ice::Int close, ::Ice::Int heartbeat, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_createObjectAdapter(_iceI_begin_createObjectAdapter(acmTimeout, close, heartbeat, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_createObjectAdapter(::Ice::Int acmTimeout, ::Ice::Int close, ::Ice::Int heartbeat, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_createObjectAdapter(acmTimeout, close, heartbeat, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createObjectAdapter(::Ice::Int acmTimeout, ::Ice::Int close, ::Ice::Int heartbeat, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createObjectAdapter(acmTimeout, close, heartbeat, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createObjectAdapter(::Ice::Int acmTimeout, ::Ice::Int close, ::Ice::Int heartbeat, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createObjectAdapter(acmTimeout, close, heartbeat, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createObjectAdapter(::Ice::Int acmTimeout, ::Ice::Int close, ::Ice::Int heartbeat, const ::Test::Callback_RemoteCommunicator_createObjectAdapterPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createObjectAdapter(acmTimeout, close, heartbeat, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createObjectAdapter(::Ice::Int acmTimeout, ::Ice::Int close, ::Ice::Int heartbeat, const ::Ice::Context& context, const ::Test::Callback_RemoteCommunicator_createObjectAdapterPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createObjectAdapter(acmTimeout, close, heartbeat, context, cb, cookie);
    }

    ::Test::RemoteObjectAdapterPrx end_createObjectAdapter(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_createObjectAdapter(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_shutdown(_iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_RemoteCommunicator_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Test::Callback_RemoteCommunicator_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_shutdown(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Test
{

class TestIntf : public virtual ::Ice::Object
{
public:

    typedef TestIntfPrx ProxyType;
    typedef TestIntfPtr PointerType;

    virtual ~TestIntf();
    TestIntf() = default;
    TestIntf(const TestIntf&) = default;
    TestIntf& operator=(const TestIntf&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void sleep(::Ice::Int seconds, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sleep(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sleepAndHold(::Ice::Int seconds, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sleepAndHold(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void interruptSleep(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_interruptSleep(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void startHeartbeatCount(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_startHeartbeatCount(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void waitForHeartbeatCount(::Ice::Int count, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_waitForHeartbeatCount(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const TestIntf& lhs, const TestIntf& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const TestIntf& lhs, const TestIntf& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class RemoteObjectAdapter : public virtual ::Ice::Object
{
public:

    typedef RemoteObjectAdapterPrx ProxyType;
    typedef RemoteObjectAdapterPtr PointerType;

    virtual ~RemoteObjectAdapter();
    RemoteObjectAdapter() = default;
    RemoteObjectAdapter(const RemoteObjectAdapter&) = default;
    RemoteObjectAdapter& operator=(const RemoteObjectAdapter&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TestIntfPrx getTestIntf(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getTestIntf(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void activate(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_activate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void hold(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_hold(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void deactivate(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_deactivate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const RemoteObjectAdapter& lhs, const RemoteObjectAdapter& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const RemoteObjectAdapter& lhs, const RemoteObjectAdapter& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class RemoteCommunicator : public virtual ::Ice::Object
{
public:

    typedef RemoteCommunicatorPrx ProxyType;
    typedef RemoteCommunicatorPtr PointerType;

    virtual ~RemoteCommunicator();
    RemoteCommunicator() = default;
    RemoteCommunicator(const RemoteCommunicator&) = default;
    RemoteCommunicator& operator=(const RemoteCommunicator&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual RemoteObjectAdapterPrx createObjectAdapter(::Ice::Int acmTimeout, ::Ice::Int close, ::Ice::Int heartbeat, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_createObjectAdapter(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const RemoteCommunicator& lhs, const RemoteCommunicator& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const RemoteCommunicator& lhs, const RemoteCommunicator& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

namespace Test
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::TestIntf::begin_sleep.
 * Create a wrapper instance by calling ::Test::newCallback_TestIntf_sleep.
 */
template<class T>
class CallbackNC_TestIntf_sleep : public Callback_TestIntf_sleep_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_sleep(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleep.
 */
template<class T> Callback_TestIntf_sleepPtr
newCallback_TestIntf_sleep(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_sleep<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleep.
 */
template<class T> Callback_TestIntf_sleepPtr
newCallback_TestIntf_sleep(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_sleep<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleep.
 */
template<class T> Callback_TestIntf_sleepPtr
newCallback_TestIntf_sleep(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_sleep<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleep.
 */
template<class T> Callback_TestIntf_sleepPtr
newCallback_TestIntf_sleep(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_sleep<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::TestIntf::begin_sleep.
 * Create a wrapper instance by calling ::Test::newCallback_TestIntf_sleep.
 */
template<class T, typename CT>
class Callback_TestIntf_sleep : public Callback_TestIntf_sleep_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_sleep(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleep.
 */
template<class T, typename CT> Callback_TestIntf_sleepPtr
newCallback_TestIntf_sleep(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_sleep<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleep.
 */
template<class T, typename CT> Callback_TestIntf_sleepPtr
newCallback_TestIntf_sleep(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_sleep<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleep.
 */
template<class T, typename CT> Callback_TestIntf_sleepPtr
newCallback_TestIntf_sleep(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_sleep<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleep.
 */
template<class T, typename CT> Callback_TestIntf_sleepPtr
newCallback_TestIntf_sleep(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_sleep<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::TestIntf::begin_sleepAndHold.
 * Create a wrapper instance by calling ::Test::newCallback_TestIntf_sleepAndHold.
 */
template<class T>
class CallbackNC_TestIntf_sleepAndHold : public Callback_TestIntf_sleepAndHold_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_sleepAndHold(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleepAndHold.
 */
template<class T> Callback_TestIntf_sleepAndHoldPtr
newCallback_TestIntf_sleepAndHold(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_sleepAndHold<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleepAndHold.
 */
template<class T> Callback_TestIntf_sleepAndHoldPtr
newCallback_TestIntf_sleepAndHold(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_sleepAndHold<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleepAndHold.
 */
template<class T> Callback_TestIntf_sleepAndHoldPtr
newCallback_TestIntf_sleepAndHold(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_sleepAndHold<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleepAndHold.
 */
template<class T> Callback_TestIntf_sleepAndHoldPtr
newCallback_TestIntf_sleepAndHold(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_sleepAndHold<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::TestIntf::begin_sleepAndHold.
 * Create a wrapper instance by calling ::Test::newCallback_TestIntf_sleepAndHold.
 */
template<class T, typename CT>
class Callback_TestIntf_sleepAndHold : public Callback_TestIntf_sleepAndHold_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_sleepAndHold(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleepAndHold.
 */
template<class T, typename CT> Callback_TestIntf_sleepAndHoldPtr
newCallback_TestIntf_sleepAndHold(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_sleepAndHold<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleepAndHold.
 */
template<class T, typename CT> Callback_TestIntf_sleepAndHoldPtr
newCallback_TestIntf_sleepAndHold(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_sleepAndHold<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleepAndHold.
 */
template<class T, typename CT> Callback_TestIntf_sleepAndHoldPtr
newCallback_TestIntf_sleepAndHold(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_sleepAndHold<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_sleepAndHold.
 */
template<class T, typename CT> Callback_TestIntf_sleepAndHoldPtr
newCallback_TestIntf_sleepAndHold(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_sleepAndHold<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::TestIntf::begin_interruptSleep.
 * Create a wrapper instance by calling ::Test::newCallback_TestIntf_interruptSleep.
 */
template<class T>
class CallbackNC_TestIntf_interruptSleep : public Callback_TestIntf_interruptSleep_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_interruptSleep(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_interruptSleep.
 */
template<class T> Callback_TestIntf_interruptSleepPtr
newCallback_TestIntf_interruptSleep(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_interruptSleep<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_interruptSleep.
 */
template<class T> Callback_TestIntf_interruptSleepPtr
newCallback_TestIntf_interruptSleep(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_interruptSleep<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_interruptSleep.
 */
template<class T> Callback_TestIntf_interruptSleepPtr
newCallback_TestIntf_interruptSleep(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_interruptSleep<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_interruptSleep.
 */
template<class T> Callback_TestIntf_interruptSleepPtr
newCallback_TestIntf_interruptSleep(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_interruptSleep<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::TestIntf::begin_interruptSleep.
 * Create a wrapper instance by calling ::Test::newCallback_TestIntf_interruptSleep.
 */
template<class T, typename CT>
class Callback_TestIntf_interruptSleep : public Callback_TestIntf_interruptSleep_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_interruptSleep(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_interruptSleep.
 */
template<class T, typename CT> Callback_TestIntf_interruptSleepPtr
newCallback_TestIntf_interruptSleep(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_interruptSleep<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_interruptSleep.
 */
template<class T, typename CT> Callback_TestIntf_interruptSleepPtr
newCallback_TestIntf_interruptSleep(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_interruptSleep<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_interruptSleep.
 */
template<class T, typename CT> Callback_TestIntf_interruptSleepPtr
newCallback_TestIntf_interruptSleep(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_interruptSleep<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_interruptSleep.
 */
template<class T, typename CT> Callback_TestIntf_interruptSleepPtr
newCallback_TestIntf_interruptSleep(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_interruptSleep<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::TestIntf::begin_startHeartbeatCount.
 * Create a wrapper instance by calling ::Test::newCallback_TestIntf_startHeartbeatCount.
 */
template<class T>
class CallbackNC_TestIntf_startHeartbeatCount : public Callback_TestIntf_startHeartbeatCount_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_startHeartbeatCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_startHeartbeatCount.
 */
template<class T> Callback_TestIntf_startHeartbeatCountPtr
newCallback_TestIntf_startHeartbeatCount(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_startHeartbeatCount<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_startHeartbeatCount.
 */
template<class T> Callback_TestIntf_startHeartbeatCountPtr
newCallback_TestIntf_startHeartbeatCount(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_startHeartbeatCount<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_startHeartbeatCount.
 */
template<class T> Callback_TestIntf_startHeartbeatCountPtr
newCallback_TestIntf_startHeartbeatCount(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_startHeartbeatCount<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_startHeartbeatCount.
 */
template<class T> Callback_TestIntf_startHeartbeatCountPtr
newCallback_TestIntf_startHeartbeatCount(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_startHeartbeatCount<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::TestIntf::begin_startHeartbeatCount.
 * Create a wrapper instance by calling ::Test::newCallback_TestIntf_startHeartbeatCount.
 */
template<class T, typename CT>
class Callback_TestIntf_startHeartbeatCount : public Callback_TestIntf_startHeartbeatCount_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_startHeartbeatCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_startHeartbeatCount.
 */
template<class T, typename CT> Callback_TestIntf_startHeartbeatCountPtr
newCallback_TestIntf_startHeartbeatCount(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_startHeartbeatCount<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_startHeartbeatCount.
 */
template<class T, typename CT> Callback_TestIntf_startHeartbeatCountPtr
newCallback_TestIntf_startHeartbeatCount(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_startHeartbeatCount<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_startHeartbeatCount.
 */
template<class T, typename CT> Callback_TestIntf_startHeartbeatCountPtr
newCallback_TestIntf_startHeartbeatCount(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_startHeartbeatCount<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_startHeartbeatCount.
 */
template<class T, typename CT> Callback_TestIntf_startHeartbeatCountPtr
newCallback_TestIntf_startHeartbeatCount(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_startHeartbeatCount<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::TestIntf::begin_waitForHeartbeatCount.
 * Create a wrapper instance by calling ::Test::newCallback_TestIntf_waitForHeartbeatCount.
 */
template<class T>
class CallbackNC_TestIntf_waitForHeartbeatCount : public Callback_TestIntf_waitForHeartbeatCount_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestIntf_waitForHeartbeatCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_waitForHeartbeatCount.
 */
template<class T> Callback_TestIntf_waitForHeartbeatCountPtr
newCallback_TestIntf_waitForHeartbeatCount(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_waitForHeartbeatCount<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_waitForHeartbeatCount.
 */
template<class T> Callback_TestIntf_waitForHeartbeatCountPtr
newCallback_TestIntf_waitForHeartbeatCount(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_waitForHeartbeatCount<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_waitForHeartbeatCount.
 */
template<class T> Callback_TestIntf_waitForHeartbeatCountPtr
newCallback_TestIntf_waitForHeartbeatCount(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_waitForHeartbeatCount<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_waitForHeartbeatCount.
 */
template<class T> Callback_TestIntf_waitForHeartbeatCountPtr
newCallback_TestIntf_waitForHeartbeatCount(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestIntf_waitForHeartbeatCount<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::TestIntf::begin_waitForHeartbeatCount.
 * Create a wrapper instance by calling ::Test::newCallback_TestIntf_waitForHeartbeatCount.
 */
template<class T, typename CT>
class Callback_TestIntf_waitForHeartbeatCount : public Callback_TestIntf_waitForHeartbeatCount_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestIntf_waitForHeartbeatCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_waitForHeartbeatCount.
 */
template<class T, typename CT> Callback_TestIntf_waitForHeartbeatCountPtr
newCallback_TestIntf_waitForHeartbeatCount(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_waitForHeartbeatCount<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_waitForHeartbeatCount.
 */
template<class T, typename CT> Callback_TestIntf_waitForHeartbeatCountPtr
newCallback_TestIntf_waitForHeartbeatCount(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_waitForHeartbeatCount<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_waitForHeartbeatCount.
 */
template<class T, typename CT> Callback_TestIntf_waitForHeartbeatCountPtr
newCallback_TestIntf_waitForHeartbeatCount(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_waitForHeartbeatCount<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::TestIntf::begin_waitForHeartbeatCount.
 */
template<class T, typename CT> Callback_TestIntf_waitForHeartbeatCountPtr
newCallback_TestIntf_waitForHeartbeatCount(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestIntf_waitForHeartbeatCount<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::RemoteObjectAdapter::begin_getTestIntf.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteObjectAdapter_getTestIntf.
 */
template<class T>
class CallbackNC_RemoteObjectAdapter_getTestIntf : public Callback_RemoteObjectAdapter_getTestIntf_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TestIntfPrx&);

    CallbackNC_RemoteObjectAdapter_getTestIntf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RemoteObjectAdapterPrx proxy = RemoteObjectAdapterPrx::uncheckedCast(result->getProxy());
        TestIntfPrx ret;
        try
        {
            ret = proxy->end_getTestIntf(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_getTestIntf.
 */
template<class T> Callback_RemoteObjectAdapter_getTestIntfPtr
newCallback_RemoteObjectAdapter_getTestIntf(const IceUtil::Handle<T>& instance, void (T::*cb)(const TestIntfPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteObjectAdapter_getTestIntf<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_getTestIntf.
 */
template<class T> Callback_RemoteObjectAdapter_getTestIntfPtr
newCallback_RemoteObjectAdapter_getTestIntf(T* instance, void (T::*cb)(const TestIntfPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteObjectAdapter_getTestIntf<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::RemoteObjectAdapter::begin_getTestIntf.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteObjectAdapter_getTestIntf.
 */
template<class T, typename CT>
class Callback_RemoteObjectAdapter_getTestIntf : public Callback_RemoteObjectAdapter_getTestIntf_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TestIntfPrx&, const CT&);

    Callback_RemoteObjectAdapter_getTestIntf(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RemoteObjectAdapterPrx proxy = RemoteObjectAdapterPrx::uncheckedCast(result->getProxy());
        TestIntfPrx ret;
        try
        {
            ret = proxy->end_getTestIntf(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_getTestIntf.
 */
template<class T, typename CT> Callback_RemoteObjectAdapter_getTestIntfPtr
newCallback_RemoteObjectAdapter_getTestIntf(const IceUtil::Handle<T>& instance, void (T::*cb)(const TestIntfPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteObjectAdapter_getTestIntf<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_getTestIntf.
 */
template<class T, typename CT> Callback_RemoteObjectAdapter_getTestIntfPtr
newCallback_RemoteObjectAdapter_getTestIntf(T* instance, void (T::*cb)(const TestIntfPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteObjectAdapter_getTestIntf<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::RemoteObjectAdapter::begin_activate.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteObjectAdapter_activate.
 */
template<class T>
class CallbackNC_RemoteObjectAdapter_activate : public Callback_RemoteObjectAdapter_activate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RemoteObjectAdapter_activate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_activate.
 */
template<class T> Callback_RemoteObjectAdapter_activatePtr
newCallback_RemoteObjectAdapter_activate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteObjectAdapter_activate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_activate.
 */
template<class T> Callback_RemoteObjectAdapter_activatePtr
newCallback_RemoteObjectAdapter_activate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteObjectAdapter_activate<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_activate.
 */
template<class T> Callback_RemoteObjectAdapter_activatePtr
newCallback_RemoteObjectAdapter_activate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteObjectAdapter_activate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_activate.
 */
template<class T> Callback_RemoteObjectAdapter_activatePtr
newCallback_RemoteObjectAdapter_activate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteObjectAdapter_activate<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::RemoteObjectAdapter::begin_activate.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteObjectAdapter_activate.
 */
template<class T, typename CT>
class Callback_RemoteObjectAdapter_activate : public Callback_RemoteObjectAdapter_activate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RemoteObjectAdapter_activate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_activate.
 */
template<class T, typename CT> Callback_RemoteObjectAdapter_activatePtr
newCallback_RemoteObjectAdapter_activate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteObjectAdapter_activate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_activate.
 */
template<class T, typename CT> Callback_RemoteObjectAdapter_activatePtr
newCallback_RemoteObjectAdapter_activate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteObjectAdapter_activate<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_activate.
 */
template<class T, typename CT> Callback_RemoteObjectAdapter_activatePtr
newCallback_RemoteObjectAdapter_activate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteObjectAdapter_activate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_activate.
 */
template<class T, typename CT> Callback_RemoteObjectAdapter_activatePtr
newCallback_RemoteObjectAdapter_activate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteObjectAdapter_activate<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::RemoteObjectAdapter::begin_hold.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteObjectAdapter_hold.
 */
template<class T>
class CallbackNC_RemoteObjectAdapter_hold : public Callback_RemoteObjectAdapter_hold_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RemoteObjectAdapter_hold(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_hold.
 */
template<class T> Callback_RemoteObjectAdapter_holdPtr
newCallback_RemoteObjectAdapter_hold(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteObjectAdapter_hold<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_hold.
 */
template<class T> Callback_RemoteObjectAdapter_holdPtr
newCallback_RemoteObjectAdapter_hold(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteObjectAdapter_hold<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_hold.
 */
template<class T> Callback_RemoteObjectAdapter_holdPtr
newCallback_RemoteObjectAdapter_hold(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteObjectAdapter_hold<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_hold.
 */
template<class T> Callback_RemoteObjectAdapter_holdPtr
newCallback_RemoteObjectAdapter_hold(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteObjectAdapter_hold<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::RemoteObjectAdapter::begin_hold.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteObjectAdapter_hold.
 */
template<class T, typename CT>
class Callback_RemoteObjectAdapter_hold : public Callback_RemoteObjectAdapter_hold_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RemoteObjectAdapter_hold(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_hold.
 */
template<class T, typename CT> Callback_RemoteObjectAdapter_holdPtr
newCallback_RemoteObjectAdapter_hold(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteObjectAdapter_hold<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_hold.
 */
template<class T, typename CT> Callback_RemoteObjectAdapter_holdPtr
newCallback_RemoteObjectAdapter_hold(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteObjectAdapter_hold<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_hold.
 */
template<class T, typename CT> Callback_RemoteObjectAdapter_holdPtr
newCallback_RemoteObjectAdapter_hold(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteObjectAdapter_hold<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_hold.
 */
template<class T, typename CT> Callback_RemoteObjectAdapter_holdPtr
newCallback_RemoteObjectAdapter_hold(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteObjectAdapter_hold<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::RemoteObjectAdapter::begin_deactivate.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteObjectAdapter_deactivate.
 */
template<class T>
class CallbackNC_RemoteObjectAdapter_deactivate : public Callback_RemoteObjectAdapter_deactivate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RemoteObjectAdapter_deactivate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_deactivate.
 */
template<class T> Callback_RemoteObjectAdapter_deactivatePtr
newCallback_RemoteObjectAdapter_deactivate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteObjectAdapter_deactivate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_deactivate.
 */
template<class T> Callback_RemoteObjectAdapter_deactivatePtr
newCallback_RemoteObjectAdapter_deactivate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteObjectAdapter_deactivate<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_deactivate.
 */
template<class T> Callback_RemoteObjectAdapter_deactivatePtr
newCallback_RemoteObjectAdapter_deactivate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteObjectAdapter_deactivate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_deactivate.
 */
template<class T> Callback_RemoteObjectAdapter_deactivatePtr
newCallback_RemoteObjectAdapter_deactivate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteObjectAdapter_deactivate<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::RemoteObjectAdapter::begin_deactivate.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteObjectAdapter_deactivate.
 */
template<class T, typename CT>
class Callback_RemoteObjectAdapter_deactivate : public Callback_RemoteObjectAdapter_deactivate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RemoteObjectAdapter_deactivate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_deactivate.
 */
template<class T, typename CT> Callback_RemoteObjectAdapter_deactivatePtr
newCallback_RemoteObjectAdapter_deactivate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteObjectAdapter_deactivate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_deactivate.
 */
template<class T, typename CT> Callback_RemoteObjectAdapter_deactivatePtr
newCallback_RemoteObjectAdapter_deactivate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteObjectAdapter_deactivate<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_deactivate.
 */
template<class T, typename CT> Callback_RemoteObjectAdapter_deactivatePtr
newCallback_RemoteObjectAdapter_deactivate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteObjectAdapter_deactivate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteObjectAdapter::begin_deactivate.
 */
template<class T, typename CT> Callback_RemoteObjectAdapter_deactivatePtr
newCallback_RemoteObjectAdapter_deactivate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteObjectAdapter_deactivate<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::RemoteCommunicator::begin_createObjectAdapter.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteCommunicator_createObjectAdapter.
 */
template<class T>
class CallbackNC_RemoteCommunicator_createObjectAdapter : public Callback_RemoteCommunicator_createObjectAdapter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const RemoteObjectAdapterPrx&);

    CallbackNC_RemoteCommunicator_createObjectAdapter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RemoteCommunicatorPrx proxy = RemoteCommunicatorPrx::uncheckedCast(result->getProxy());
        RemoteObjectAdapterPrx ret;
        try
        {
            ret = proxy->end_createObjectAdapter(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteCommunicator::begin_createObjectAdapter.
 */
template<class T> Callback_RemoteCommunicator_createObjectAdapterPtr
newCallback_RemoteCommunicator_createObjectAdapter(const IceUtil::Handle<T>& instance, void (T::*cb)(const RemoteObjectAdapterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteCommunicator_createObjectAdapter<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteCommunicator::begin_createObjectAdapter.
 */
template<class T> Callback_RemoteCommunicator_createObjectAdapterPtr
newCallback_RemoteCommunicator_createObjectAdapter(T* instance, void (T::*cb)(const RemoteObjectAdapterPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteCommunicator_createObjectAdapter<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::RemoteCommunicator::begin_createObjectAdapter.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteCommunicator_createObjectAdapter.
 */
template<class T, typename CT>
class Callback_RemoteCommunicator_createObjectAdapter : public Callback_RemoteCommunicator_createObjectAdapter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const RemoteObjectAdapterPrx&, const CT&);

    Callback_RemoteCommunicator_createObjectAdapter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        RemoteCommunicatorPrx proxy = RemoteCommunicatorPrx::uncheckedCast(result->getProxy());
        RemoteObjectAdapterPrx ret;
        try
        {
            ret = proxy->end_createObjectAdapter(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteCommunicator::begin_createObjectAdapter.
 */
template<class T, typename CT> Callback_RemoteCommunicator_createObjectAdapterPtr
newCallback_RemoteCommunicator_createObjectAdapter(const IceUtil::Handle<T>& instance, void (T::*cb)(const RemoteObjectAdapterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteCommunicator_createObjectAdapter<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteCommunicator::begin_createObjectAdapter.
 */
template<class T, typename CT> Callback_RemoteCommunicator_createObjectAdapterPtr
newCallback_RemoteCommunicator_createObjectAdapter(T* instance, void (T::*cb)(const RemoteObjectAdapterPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteCommunicator_createObjectAdapter<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::RemoteCommunicator::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteCommunicator_shutdown.
 */
template<class T>
class CallbackNC_RemoteCommunicator_shutdown : public Callback_RemoteCommunicator_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RemoteCommunicator_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteCommunicator::begin_shutdown.
 */
template<class T> Callback_RemoteCommunicator_shutdownPtr
newCallback_RemoteCommunicator_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteCommunicator_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteCommunicator::begin_shutdown.
 */
template<class T> Callback_RemoteCommunicator_shutdownPtr
newCallback_RemoteCommunicator_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteCommunicator_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteCommunicator::begin_shutdown.
 */
template<class T> Callback_RemoteCommunicator_shutdownPtr
newCallback_RemoteCommunicator_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteCommunicator_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteCommunicator::begin_shutdown.
 */
template<class T> Callback_RemoteCommunicator_shutdownPtr
newCallback_RemoteCommunicator_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RemoteCommunicator_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::RemoteCommunicator::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_RemoteCommunicator_shutdown.
 */
template<class T, typename CT>
class Callback_RemoteCommunicator_shutdown : public Callback_RemoteCommunicator_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RemoteCommunicator_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteCommunicator::begin_shutdown.
 */
template<class T, typename CT> Callback_RemoteCommunicator_shutdownPtr
newCallback_RemoteCommunicator_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteCommunicator_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteCommunicator::begin_shutdown.
 */
template<class T, typename CT> Callback_RemoteCommunicator_shutdownPtr
newCallback_RemoteCommunicator_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteCommunicator_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteCommunicator::begin_shutdown.
 */
template<class T, typename CT> Callback_RemoteCommunicator_shutdownPtr
newCallback_RemoteCommunicator_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteCommunicator_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::RemoteCommunicator::begin_shutdown.
 */
template<class T, typename CT> Callback_RemoteCommunicator_shutdownPtr
newCallback_RemoteCommunicator_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RemoteCommunicator_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
