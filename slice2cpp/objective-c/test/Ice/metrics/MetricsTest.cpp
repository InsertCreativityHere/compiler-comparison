//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `MetricsTest.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <MetricsTest.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::UserEx> iceC_Test_UserEx_init("::Test::UserEx");

const ::std::string iceC_Test_Metrics_ids[2] =
{
    "::Ice::Object",
    "::Test::Metrics"
};
const ::std::string iceC_Test_Metrics_ops[] =
{
    "fail",
    "getAdmin",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op",
    "opByteS",
    "opWithLocalException",
    "opWithRequestFailedException",
    "opWithUnknownException",
    "opWithUserException",
    "shutdown"
};
const ::std::string iceC_Test_Metrics_op_name = "op";
const ::std::string iceC_Test_Metrics_fail_name = "fail";
const ::std::string iceC_Test_Metrics_opWithUserException_name = "opWithUserException";
const ::std::string iceC_Test_Metrics_opWithRequestFailedException_name = "opWithRequestFailedException";
const ::std::string iceC_Test_Metrics_opWithLocalException_name = "opWithLocalException";
const ::std::string iceC_Test_Metrics_opWithUnknownException_name = "opWithUnknownException";
const ::std::string iceC_Test_Metrics_opByteS_name = "opByteS";
const ::std::string iceC_Test_Metrics_getAdmin_name = "getAdmin";
const ::std::string iceC_Test_Metrics_shutdown_name = "shutdown";

const ::std::string iceC_Test_Controller_ids[2] =
{
    "::Ice::Object",
    "::Test::Controller"
};
const ::std::string iceC_Test_Controller_ops[] =
{
    "hold",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "resume"
};
const ::std::string iceC_Test_Controller_hold_name = "hold";
const ::std::string iceC_Test_Controller_resume_name = "resume";

}

Test::UserEx::~UserEx()
{
}

const ::std::string&
Test::UserEx::ice_staticId()
{
    static const ::std::string typeId = "::Test::UserEx";
    return typeId;
}

bool
Test::Metrics::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Metrics_ids, iceC_Test_Metrics_ids + 2, s);
}

::std::vector<::std::string>
Test::Metrics::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Metrics_ids[0], &iceC_Test_Metrics_ids[2]);
}

::std::string
Test::Metrics::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Metrics::ice_staticId()
{
    static const ::std::string typeId = "::Test::Metrics";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Metrics::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_fail(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    this->fail(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_opWithUserException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->opWithUserException(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_opWithRequestFailedException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->opWithRequestFailedException(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_opWithLocalException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->opWithLocalException(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_opWithUnknownException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->opWithUnknownException(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_opByteS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteSeq iceP_bs;
    istr->readAll(iceP_bs);
    inS.endReadParams();
    this->opByteS(::std::move(iceP_bs), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_getAdmin(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Ice::ObjectPrx> ret = this->getAdmin(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Metrics_ops, iceC_Test_Metrics_ops + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Metrics_ops)
    {
        case 0:
        {
            return _iceD_fail(in, current);
        }
        case 1:
        {
            return _iceD_getAdmin(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_op(in, current);
        }
        case 7:
        {
            return _iceD_opByteS(in, current);
        }
        case 8:
        {
            return _iceD_opWithLocalException(in, current);
        }
        case 9:
        {
            return _iceD_opWithRequestFailedException(in, current);
        }
        case 10:
        {
            return _iceD_opWithUnknownException(in, current);
        }
        case 11:
        {
            return _iceD_opWithUserException(in, current);
        }
        case 12:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Controller::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Controller_ids, iceC_Test_Controller_ids + 2, s);
}

::std::vector<::std::string>
Test::Controller::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Controller_ids[0], &iceC_Test_Controller_ids[2]);
}

::std::string
Test::Controller::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Controller::ice_staticId()
{
    static const ::std::string typeId = "::Test::Controller";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Controller::_iceD_hold(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->hold(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Controller::_iceD_resume(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->resume(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Controller::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Controller_ops, iceC_Test_Controller_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Controller_ops)
    {
        case 0:
        {
            return _iceD_hold(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_resume(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Test::MetricsPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Metrics_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MetricsPrx::_iceI_fail(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Metrics_fail_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MetricsPrx::_iceI_opWithUserException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Metrics_opWithUserException_name);
    outAsync->invoke(iceC_Test_Metrics_opWithUserException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserEx&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MetricsPrx::_iceI_opWithRequestFailedException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Metrics_opWithRequestFailedException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MetricsPrx::_iceI_opWithLocalException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Metrics_opWithLocalException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MetricsPrx::_iceI_opWithUnknownException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Metrics_opWithUnknownException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MetricsPrx::_iceI_opByteS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ByteSeq& iceP_bs, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Metrics_opByteS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_bs);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MetricsPrx::_iceI_getAdmin(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::ObjectPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Metrics_getAdmin_name);
    outAsync->invoke(iceC_Test_Metrics_getAdmin_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MetricsPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Metrics_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::MetricsPrx::_newInstance() const
{
    return ::IceInternal::createProxy<MetricsPrx>();
}
/// \endcond

const ::std::string&
Test::MetricsPrx::ice_staticId()
{
    return Metrics::ice_staticId();
}

/// \cond INTERNAL
void
Test::ControllerPrx::_iceI_hold(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Controller_hold_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ControllerPrx::_iceI_resume(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Controller_resume_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::ControllerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ControllerPrx>();
}
/// \endcond

const ::std::string&
Test::ControllerPrx::ice_staticId()
{
    return Controller::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_Metrics_op_name = "op";

const ::std::string iceC_Test_Metrics_fail_name = "fail";

const ::std::string iceC_Test_Metrics_opWithUserException_name = "opWithUserException";

const ::std::string iceC_Test_Metrics_opWithRequestFailedException_name = "opWithRequestFailedException";

const ::std::string iceC_Test_Metrics_opWithLocalException_name = "opWithLocalException";

const ::std::string iceC_Test_Metrics_opWithUnknownException_name = "opWithUnknownException";

const ::std::string iceC_Test_Metrics_opByteS_name = "opByteS";

const ::std::string iceC_Test_Metrics_getAdmin_name = "getAdmin";

const ::std::string iceC_Test_Metrics_shutdown_name = "shutdown";

const ::std::string iceC_Test_Controller_hold_name = "hold";

const ::std::string iceC_Test_Controller_resume_name = "resume";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::UserEx> iceC_Test_UserEx_init("::Test::UserEx");

}

#ifdef ICE_CPP11_COMPILER
Test::UserEx::~UserEx()
{
}
#else
Test::UserEx::~UserEx() throw()
{
}
#endif

::std::string
Test::UserEx::ice_id() const
{
    return "::Test::UserEx";
}

Test::UserEx*
Test::UserEx::ice_clone() const
{
    return new UserEx(*this);
}

void
Test::UserEx::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::UserEx::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::UserEx", -1, true);
    ::Ice::StreamWriter< UserEx, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::UserEx::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UserEx, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Metrics* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Metrics>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Metrics;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Metrics::_iceI_begin_op(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Metrics_op_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Metrics_op_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Metrics_op_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Metrics::end_op(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Metrics_op_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Metrics::_iceI_begin_fail(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Metrics_fail_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Metrics_fail_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Metrics_fail_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Metrics::end_fail(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Metrics_fail_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Metrics::_iceI_begin_opWithUserException(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Metrics_opWithUserException_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Metrics_opWithUserException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Metrics_opWithUserException_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Metrics_opWithUserException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Metrics::end_opWithUserException(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Metrics_opWithUserException_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::UserEx&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Metrics::_iceI_begin_opWithRequestFailedException(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Metrics_opWithRequestFailedException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Metrics_opWithRequestFailedException_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Metrics_opWithRequestFailedException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Metrics::end_opWithRequestFailedException(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Metrics_opWithRequestFailedException_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Metrics::_iceI_begin_opWithLocalException(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Metrics_opWithLocalException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Metrics_opWithLocalException_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Metrics_opWithLocalException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Metrics::end_opWithLocalException(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Metrics_opWithLocalException_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Metrics::_iceI_begin_opWithUnknownException(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Metrics_opWithUnknownException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Metrics_opWithUnknownException_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Metrics_opWithUnknownException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Metrics::end_opWithUnknownException(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Metrics_opWithUnknownException_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Metrics::_iceI_begin_opByteS(const ::Test::ByteSeq& iceP_bs, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Metrics_opByteS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Metrics_opByteS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_bs);
        result->endWriteParams();
        result->invoke(iceC_Test_Metrics_opByteS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Metrics::end_opByteS(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Metrics_opByteS_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Metrics::_iceI_begin_getAdmin(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Metrics_getAdmin_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Metrics_getAdmin_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Metrics_getAdmin_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Metrics_getAdmin_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::ObjectPrx
IceProxy::Test::Metrics::end_getAdmin(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Metrics_getAdmin_name);
    ::Ice::ObjectPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Metrics::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Metrics_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Metrics_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Metrics_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Metrics::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Metrics_shutdown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Metrics::_newInstance() const
{
    return new Metrics;
}
/// \endcond

const ::std::string&
IceProxy::Test::Metrics::ice_staticId()
{
    return ::Test::Metrics::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Controller* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Controller>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Controller;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Controller::_iceI_begin_hold(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Controller_hold_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Controller_hold_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Controller_hold_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Controller::end_hold(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Controller_hold_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Controller::_iceI_begin_resume(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Controller_resume_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Controller_resume_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Controller_resume_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Controller::end_resume(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Controller_resume_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Controller::_newInstance() const
{
    return new Controller;
}
/// \endcond

const ::std::string&
IceProxy::Test::Controller::ice_staticId()
{
    return ::Test::Controller::ice_staticId();
}

Test::Metrics::~Metrics()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Metrics* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_Metrics_ids[2] =
{
    "::Ice::Object",
    "::Test::Metrics"
};

}

bool
Test::Metrics::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Metrics_ids, iceC_Test_Metrics_ids + 2, s);
}

::std::vector< ::std::string>
Test::Metrics::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Metrics_ids[0], &iceC_Test_Metrics_ids[2]);
}

const ::std::string&
Test::Metrics::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Metrics::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Test::Metrics";
    return typeId;
#else
    return iceC_Test_Metrics_ids[1];
#endif
}

/// \cond INTERNAL
bool
Test::Metrics::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_fail(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    this->fail(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_opWithUserException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opWithUserException(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_opWithRequestFailedException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opWithRequestFailedException(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_opWithLocalException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opWithLocalException(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_opWithUnknownException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opWithUnknownException(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_opByteS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ByteSeq iceP_bs;
    istr->read(iceP_bs);
    inS.endReadParams();
    this->opByteS(iceP_bs, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_getAdmin(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::ObjectPrx ret = this->getAdmin(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Metrics::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Metrics_all[] =
{
    "fail",
    "getAdmin",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op",
    "opByteS",
    "opWithLocalException",
    "opWithRequestFailedException",
    "opWithUnknownException",
    "opWithUserException",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::Metrics::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Metrics_all, iceC_Test_Metrics_all + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Metrics_all)
    {
        case 0:
        {
            return _iceD_fail(in, current);
        }
        case 1:
        {
            return _iceD_getAdmin(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_op(in, current);
        }
        case 7:
        {
            return _iceD_opByteS(in, current);
        }
        case 8:
        {
            return _iceD_opWithLocalException(in, current);
        }
        case 9:
        {
            return _iceD_opWithRequestFailedException(in, current);
        }
        case 10:
        {
            return _iceD_opWithUnknownException(in, current);
        }
        case 11:
        {
            return _iceD_opWithUserException(in, current);
        }
        case 12:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::Metrics::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Metrics, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Metrics::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Metrics, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(MetricsPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = MetricsPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Metrics::ice_staticId(), v);
    }
}
/// \endcond

Test::Controller::~Controller()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Controller* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_Controller_ids[2] =
{
    "::Ice::Object",
    "::Test::Controller"
};

}

bool
Test::Controller::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Controller_ids, iceC_Test_Controller_ids + 2, s);
}

::std::vector< ::std::string>
Test::Controller::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Controller_ids[0], &iceC_Test_Controller_ids[2]);
}

const ::std::string&
Test::Controller::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Controller::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Test::Controller";
    return typeId;
#else
    return iceC_Test_Controller_ids[1];
#endif
}

/// \cond INTERNAL
bool
Test::Controller::_iceD_hold(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->hold(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Controller::_iceD_resume(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->resume(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Controller_all[] =
{
    "hold",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "resume"
};

}

/// \cond INTERNAL
bool
Test::Controller::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Controller_all, iceC_Test_Controller_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Controller_all)
    {
        case 0:
        {
            return _iceD_hold(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_resume(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::Controller::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Controller, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Controller::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Controller, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(ControllerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ControllerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Controller::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
