//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `HashTest.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <HashTest.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::BaseException> iceC_Test_BaseException_init("::Test::BaseException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::InvalidPointException> iceC_Test_InvalidPointException_init("::Test::InvalidPointException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::InvalidLengthException> iceC_Test_InvalidLengthException_init("::Test::InvalidLengthException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::OtherException> iceC_Test_OtherException_init("::Test::OtherException");

const ::IceInternal::DefaultValueFactoryInit<::Test::Pen> iceC_Test_Pen_init("::Test::Pen");

}

Test::BaseException::~BaseException()
{
}

const ::std::string&
Test::BaseException::ice_staticId()
{
    static const ::std::string typeId = "::Test::BaseException";
    return typeId;
}

Test::InvalidPointException::~InvalidPointException()
{
}

const ::std::string&
Test::InvalidPointException::ice_staticId()
{
    static const ::std::string typeId = "::Test::InvalidPointException";
    return typeId;
}

Test::InvalidLengthException::~InvalidLengthException()
{
}

const ::std::string&
Test::InvalidLengthException::ice_staticId()
{
    static const ::std::string typeId = "::Test::InvalidLengthException";
    return typeId;
}

Test::OtherException::~OtherException()
{
}

const ::std::string&
Test::OtherException::ice_staticId()
{
    static const ::std::string typeId = "::Test::OtherException";
    return typeId;
}

Test::Pen::~Pen()
{
}

const ::std::string&
Test::Pen::ice_staticId()
{
    static const ::std::string typeId = "::Test::Pen";
    return typeId;
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::BaseException> iceC_Test_BaseException_init("::Test::BaseException");

}

#ifdef ICE_CPP11_COMPILER
Test::BaseException::~BaseException()
{
}
#else
Test::BaseException::~BaseException() throw()
{
}
#endif

::std::string
Test::BaseException::ice_id() const
{
    return "::Test::BaseException";
}

Test::BaseException*
Test::BaseException::ice_clone() const
{
    return new BaseException(*this);
}

void
Test::BaseException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::BaseException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::BaseException", -1, true);
    ::Ice::StreamWriter< BaseException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::BaseException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< BaseException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::InvalidPointException> iceC_Test_InvalidPointException_init("::Test::InvalidPointException");

}

Test::InvalidPointException::InvalidPointException(::Ice::Int index) :
    BaseException(),
    index(index)
{
}

#ifdef ICE_CPP11_COMPILER
Test::InvalidPointException::~InvalidPointException()
{
}
#else
Test::InvalidPointException::~InvalidPointException() throw()
{
}
#endif

::std::string
Test::InvalidPointException::ice_id() const
{
    return "::Test::InvalidPointException";
}

Test::InvalidPointException*
Test::InvalidPointException::ice_clone() const
{
    return new InvalidPointException(*this);
}

void
Test::InvalidPointException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::InvalidPointException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::InvalidPointException", -1, false);
    ::Ice::StreamWriter< InvalidPointException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    BaseException::_writeImpl(ostr);
}

void
Test::InvalidPointException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< InvalidPointException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    BaseException::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::InvalidLengthException> iceC_Test_InvalidLengthException_init("::Test::InvalidLengthException");

}

Test::InvalidLengthException::InvalidLengthException(::Ice::Int length) :
    BaseException(),
    length(length)
{
}

#ifdef ICE_CPP11_COMPILER
Test::InvalidLengthException::~InvalidLengthException()
{
}
#else
Test::InvalidLengthException::~InvalidLengthException() throw()
{
}
#endif

::std::string
Test::InvalidLengthException::ice_id() const
{
    return "::Test::InvalidLengthException";
}

Test::InvalidLengthException*
Test::InvalidLengthException::ice_clone() const
{
    return new InvalidLengthException(*this);
}

void
Test::InvalidLengthException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::InvalidLengthException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::InvalidLengthException", -1, false);
    ::Ice::StreamWriter< InvalidLengthException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    BaseException::_writeImpl(ostr);
}

void
Test::InvalidLengthException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< InvalidLengthException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    BaseException::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::OtherException> iceC_Test_OtherException_init("::Test::OtherException");

}

Test::OtherException::OtherException(::Ice::Int x, ::Ice::Int y, ::Ice::Int z, bool b) :
    ::Ice::UserException(),
    x(x),
    y(y),
    z(z),
    b(b)
{
}

#ifdef ICE_CPP11_COMPILER
Test::OtherException::~OtherException()
{
}
#else
Test::OtherException::~OtherException() throw()
{
}
#endif

::std::string
Test::OtherException::ice_id() const
{
    return "::Test::OtherException";
}

Test::OtherException*
Test::OtherException::ice_clone() const
{
    return new OtherException(*this);
}

void
Test::OtherException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::OtherException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::OtherException", -1, true);
    ::Ice::StreamWriter< OtherException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::OtherException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< OtherException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Pen* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Pen>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Pen;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Pen::_newInstance() const
{
    return new Pen;
}
/// \endcond

const ::std::string&
IceProxy::Test::Pen::ice_staticId()
{
    return ::Test::Pen::ice_staticId();
}

Test::Pen::~Pen()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Pen* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::Pen::ice_clone() const
{
    ::Ice::Object* p = new Pen(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_Pen_ids[2] =
{
    "::Ice::Object",
    "::Test::Pen"
};

}

bool
Test::Pen::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Pen_ids, iceC_Test_Pen_ids + 2, s);
}

::std::vector< ::std::string>
Test::Pen::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Pen_ids[0], &iceC_Test_Pen_ids[2]);
}

const ::std::string&
Test::Pen::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Pen::ice_staticId()
{
    static const ::std::string typeId = "::Test::Pen";
    return typeId;
}

/// \cond STREAM
void
Test::Pen::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Pen, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Pen::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Pen, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Pen> iceC_Test_Pen_init("::Test::Pen");
}

::Ice::ValueFactoryPtr
Test::Pen::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Pen::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(PenPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = PenPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Pen::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
