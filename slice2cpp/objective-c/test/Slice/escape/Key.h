//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Key_h__
#define __Key_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace _cpp_and
{

class _cpp_break;
class breakPrx;
class _cpp_char;
class charPrx;
class _cpp_switch;
class switchPrx;
class _cpp_do;
class _cpp_friend;
class friendPrx;

}

namespace _cpp_and
{

enum class _cpp_continue : unsigned char
{
    _cpp_asm
};

struct _cpp_auto
{
    int _cpp_default;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(_cpp_default);
    }
};

struct _cpp_delete
{
    ::std::string _cpp_else;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(_cpp_else);
    }
};

using _cpp_extern = ::std::vector<_cpp_auto>;

using _cpp_for = ::std::map<::std::string, _cpp_auto>;

class _cpp_return : public ::Ice::UserExceptionHelper<_cpp_return, ::Ice::UserException>
{
public:

    virtual ~_cpp_return();

    _cpp_return(const _cpp_return&) = default;

    _cpp_return() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_return(int _cpp_signed) :
        _cpp_signed(_cpp_signed)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(_cpp_signed);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_signed;
};

/// \cond INTERNAL
static _cpp_return _iceS_return_init;
/// \endcond

class _cpp_sizeof : public ::Ice::UserExceptionHelper<_cpp_sizeof, _cpp_return>
{
public:

    virtual ~_cpp_sizeof();

    _cpp_sizeof(const _cpp_sizeof&) = default;

    _cpp_sizeof() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_sizeof(int _cpp_signed, int _cpp_static, int _cpp_switch) :
        ::Ice::UserExceptionHelper<_cpp_sizeof, _cpp_return>(_cpp_signed),
        _cpp_static(_cpp_static),
        _cpp_switch(_cpp_switch)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(_cpp_signed, _cpp_static, _cpp_switch);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_static;
    int _cpp_switch;
};

constexpr int _cpp_template = 0;

constexpr int _cpp_this = 0;

constexpr int _cpp_throw = 0;

constexpr int _cpp_typedef = 0;

constexpr int _cpp_typeid = 0;

constexpr int _cpp_typename = 0;

constexpr int _cpp_union = 0;

constexpr int _cpp_unsigned = 0;

constexpr int _cpp_using = 0;

constexpr int _cpp_virtual = 0;

constexpr int _cpp_while = 0;

constexpr int _cpp_xor = 0;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace _cpp_and
{

class _cpp_break : public virtual ::Ice::Object
{
public:

    using ProxyType = breakPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_case(int _cpp_catch, int& _cpp_try, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_case(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class _cpp_char : public virtual ::Ice::Object
{
public:

    using ProxyType = charPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_explicit(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_explicit(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class _cpp_switch : public virtual ::Ice::Object
{
public:

    using ProxyType = switchPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void foo(::std::shared_ptr<charPrx> _cpp_export, int& _cpp_volatile, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_foo(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void foo2(::std::shared_ptr<charPrx> _cpp_export, int YES, int& nil, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_foo2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void foo3(::std::shared_ptr<charPrx> _cpp_export, int& nil, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_foo3(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class _cpp_friend : public virtual ::Ice::Object
{
public:

    using ProxyType = friendPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual _cpp_auto _cpp_goto(_cpp_continue _cpp_if, _cpp_auto d, _cpp_delete _cpp_inline, ::std::shared_ptr<::and::do> _cpp_mutable, ::std::shared_ptr<breakPrx> _cpp_namespace, ::std::shared_ptr<charPrx> _cpp_new, ::std::shared_ptr<switchPrx> _cpp_not, int _cpp_or, int _cpp_protected, int _cpp_public, int _cpp_register, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_goto(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void objc(int bycopy, int byref, int id, int IMP, int in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_objc(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace _cpp_and
{

class _cpp_do : public ::Ice::ValueHelper<_cpp_do, ::Ice::Value>
{
public:

    virtual ~_cpp_do();

    _cpp_do() = default;

    _cpp_do(const _cpp_do&) = default;
    _cpp_do(_cpp_do&&) = default;
    _cpp_do& operator=(const _cpp_do&) = default;
    _cpp_do& operator=(_cpp_do&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit _cpp_do(int _cpp_if) :
        _cpp_if(_cpp_if)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(_cpp_if);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_if;
};

/// \cond INTERNAL
static _cpp_do _iceS_do_init;
/// \endcond

}

namespace _cpp_and
{

class breakPrx : public virtual ::Ice::Proxy<breakPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_case(int _cpp_catch, int& _cpp_try, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _cpp_try = _makePromiseOutgoing<int>(true, this, &breakPrx::_iceI_case, _cpp_catch, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto caseAsync(int _cpp_catch, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &breakPrx::_iceI_case, _cpp_catch, context);
    }

    ::std::function<void()>
    caseAsync(int _cpp_catch,
              ::std::function<void(int)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::breakPrx::_iceI_case, _cpp_catch, context);
    }

    /// \cond INTERNAL
    void _iceI_case(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    breakPrx() = default;
    friend ::std::shared_ptr<breakPrx> IceInternal::createProxy<breakPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class charPrx : public virtual ::Ice::Proxy<charPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_explicit(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &charPrx::_iceI_explicit, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto explicitAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &charPrx::_iceI_explicit, context);
    }

    ::std::function<void()>
    explicitAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::charPrx::_iceI_explicit, context);
    }

    /// \cond INTERNAL
    void _iceI_explicit(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    charPrx() = default;
    friend ::std::shared_ptr<charPrx> IceInternal::createProxy<charPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class switchPrx : public virtual ::Ice::Proxy<switchPrx, ::Ice::ObjectPrx>
{
public:

    void foo(const ::std::shared_ptr<charPrx>& _cpp_export, int& _cpp_volatile, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _cpp_volatile = _makePromiseOutgoing<int>(true, this, &switchPrx::_iceI_foo, _cpp_export, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto fooAsync(const ::std::shared_ptr<charPrx>& _cpp_export, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &switchPrx::_iceI_foo, _cpp_export, context);
    }

    ::std::function<void()>
    fooAsync(const ::std::shared_ptr<charPrx>& _cpp_export,
             ::std::function<void(int)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::switchPrx::_iceI_foo, _cpp_export, context);
    }

    /// \cond INTERNAL
    void _iceI_foo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::std::shared_ptr<charPrx>&, const ::Ice::Context&);
    /// \endcond

    void foo2(const ::std::shared_ptr<charPrx>& _cpp_export, int YES, int& nil, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        nil = _makePromiseOutgoing<int>(true, this, &switchPrx::_iceI_foo2, _cpp_export, YES, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto foo2Async(const ::std::shared_ptr<charPrx>& _cpp_export, int YES, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &switchPrx::_iceI_foo2, _cpp_export, YES, context);
    }

    ::std::function<void()>
    foo2Async(const ::std::shared_ptr<charPrx>& _cpp_export, int YES,
              ::std::function<void(int)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::switchPrx::_iceI_foo2, _cpp_export, YES, context);
    }

    /// \cond INTERNAL
    void _iceI_foo2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::std::shared_ptr<charPrx>&, int, const ::Ice::Context&);
    /// \endcond

    void foo3(const ::std::shared_ptr<charPrx>& _cpp_export, int& nil, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        nil = _makePromiseOutgoing<int>(true, this, &switchPrx::_iceI_foo3, _cpp_export, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto foo3Async(const ::std::shared_ptr<charPrx>& _cpp_export, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &switchPrx::_iceI_foo3, _cpp_export, context);
    }

    ::std::function<void()>
    foo3Async(const ::std::shared_ptr<charPrx>& _cpp_export,
              ::std::function<void(int)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::switchPrx::_iceI_foo3, _cpp_export, context);
    }

    /// \cond INTERNAL
    void _iceI_foo3(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::std::shared_ptr<charPrx>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    switchPrx() = default;
    friend ::std::shared_ptr<switchPrx> IceInternal::createProxy<switchPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class friendPrx : public virtual ::Ice::Proxy<friendPrx, ::Ice::ObjectPrx>
{
public:

    _cpp_auto _cpp_goto(_cpp_continue _cpp_if, const _cpp_auto& d, const _cpp_delete& _cpp_inline, const ::std::shared_ptr<_cpp_do>& _cpp_mutable, const ::std::shared_ptr<breakPrx>& _cpp_namespace, const ::std::shared_ptr<charPrx>& _cpp_new, const ::std::shared_ptr<switchPrx>& _cpp_not, int _cpp_or, int _cpp_protected, int _cpp_public, int _cpp_register, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::_cpp_and::_cpp_auto>(true, this, &friendPrx::_iceI_goto, _cpp_if, d, _cpp_inline, _cpp_mutable, _cpp_namespace, _cpp_new, _cpp_not, _cpp_or, _cpp_protected, _cpp_public, _cpp_register, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto gotoAsync(_cpp_continue _cpp_if, const _cpp_auto& d, const _cpp_delete& _cpp_inline, const ::std::shared_ptr<_cpp_do>& _cpp_mutable, const ::std::shared_ptr<breakPrx>& _cpp_namespace, const ::std::shared_ptr<charPrx>& _cpp_new, const ::std::shared_ptr<switchPrx>& _cpp_not, int _cpp_or, int _cpp_protected, int _cpp_public, int _cpp_register, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::_cpp_and::_cpp_auto>>().get_future())
    {
        return _makePromiseOutgoing<::_cpp_and::_cpp_auto, P>(false, this, &friendPrx::_iceI_goto, _cpp_if, d, _cpp_inline, _cpp_mutable, _cpp_namespace, _cpp_new, _cpp_not, _cpp_or, _cpp_protected, _cpp_public, _cpp_register, context);
    }

    ::std::function<void()>
    gotoAsync(_cpp_continue _cpp_if, const _cpp_auto& d, const _cpp_delete& _cpp_inline, const ::std::shared_ptr<_cpp_do>& _cpp_mutable, const ::std::shared_ptr<breakPrx>& _cpp_namespace, const ::std::shared_ptr<charPrx>& _cpp_new, const ::std::shared_ptr<switchPrx>& _cpp_not, int _cpp_or, int _cpp_protected, int _cpp_public, int _cpp_register,
              ::std::function<void(::_cpp_and::_cpp_auto)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::_cpp_and::_cpp_auto>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::friendPrx::_iceI_goto, _cpp_if, d, _cpp_inline, _cpp_mutable, _cpp_namespace, _cpp_new, _cpp_not, _cpp_or, _cpp_protected, _cpp_public, _cpp_register, context);
    }

    /// \cond INTERNAL
    void _iceI_goto(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::_cpp_and::_cpp_auto>>&, _cpp_continue, const _cpp_auto&, const _cpp_delete&, const ::std::shared_ptr<_cpp_do>&, const ::std::shared_ptr<breakPrx>&, const ::std::shared_ptr<charPrx>&, const ::std::shared_ptr<switchPrx>&, int, int, int, int, const ::Ice::Context&);
    /// \endcond

    void objc(int bycopy, int byref, int id, int IMP, int in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &friendPrx::_iceI_objc, bycopy, byref, id, IMP, in, inout, nil, NO, oneway, SEL, super, YES, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto objcAsync(int bycopy, int byref, int id, int IMP, int in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &friendPrx::_iceI_objc, bycopy, byref, id, IMP, in, inout, nil, NO, oneway, SEL, super, YES, context);
    }

    ::std::function<void()>
    objcAsync(int bycopy, int byref, int id, int IMP, int in, int inout, int nil, int NO, int oneway, int SEL, int super, int YES,
              ::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::friendPrx::_iceI_objc, bycopy, byref, id, IMP, in, inout, nil, NO, oneway, SEL, super, YES, context);
    }

    /// \cond INTERNAL
    void _iceI_objc(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, int, int, int, int, int, int, int, int, int, int, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    friendPrx() = default;
    friend ::std::shared_ptr<friendPrx> IceInternal::createProxy<friendPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::_cpp_and::_cpp_continue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::_cpp_and::_cpp_auto>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::_cpp_and::_cpp_auto, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_auto& v)
    {
        istr->readAll(v._cpp_default);
    }
};

template<>
struct StreamableTraits<::_cpp_and::_cpp_delete>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::_cpp_and::_cpp_delete, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_delete& v)
    {
        istr->readAll(v._cpp_else);
    }
};

template<typename S>
struct StreamReader<::_cpp_and::_cpp_do, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_do& v)
    {
        istr->readAll(v._cpp_if);
    }
};

template<typename S>
struct StreamReader<::_cpp_and::_cpp_return, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_return& v)
    {
        istr->readAll(v._cpp_signed);
    }
};

template<typename S>
struct StreamWriter<::_cpp_and::_cpp_sizeof, S>
{
    static void write(S* ostr, const ::_cpp_and::_cpp_sizeof& v)
    {
        ostr->writeAll(v._cpp_static, v._cpp_switch);
    }
};

template<typename S>
struct StreamReader<::_cpp_and::_cpp_sizeof, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_sizeof& v)
    {
        istr->readAll(v._cpp_static, v._cpp_switch);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace _cpp_and
{

using breakPtr = ::std::shared_ptr<_cpp_break>;
using breakPrxPtr = ::std::shared_ptr<breakPrx>;

using charPtr = ::std::shared_ptr<_cpp_char>;
using charPrxPtr = ::std::shared_ptr<charPrx>;

using switchPtr = ::std::shared_ptr<_cpp_switch>;
using switchPrxPtr = ::std::shared_ptr<switchPrx>;

using doPtr = ::std::shared_ptr<_cpp_do>;

using friendPtr = ::std::shared_ptr<_cpp_friend>;
using friendPrxPtr = ::std::shared_ptr<friendPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace _cpp_and
{

class _cpp_break;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_break>&);
::IceProxy::Ice::Object* upCast(_cpp_break*);
/// \endcond

class _cpp_char;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_char>&);
::IceProxy::Ice::Object* upCast(_cpp_char*);
/// \endcond

class _cpp_switch;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_switch>&);
::IceProxy::Ice::Object* upCast(_cpp_switch*);
/// \endcond

class _cpp_friend;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_friend>&);
::IceProxy::Ice::Object* upCast(_cpp_friend*);
/// \endcond

}

}

namespace _cpp_and
{
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_break> breakPrx;
typedef breakPrx breakPrxPtr;

class _cpp_break;
typedef ::IceInternal::Handle< _cpp_break> breakPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_char> charPrx;
typedef charPrx charPrxPtr;

class _cpp_char;
typedef ::IceInternal::Handle< _cpp_char> charPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_switch> switchPrx;
typedef switchPrx switchPrxPtr;

class _cpp_switch;
typedef ::IceInternal::Handle< _cpp_switch> switchPtr;

class _cpp_do;
using doPtr = ::Ice::SharedPtr<_cpp_do>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_friend> friendPrx;
typedef friendPrx friendPrxPtr;

class _cpp_friend;
typedef ::IceInternal::Handle< _cpp_friend> friendPtr;

}

namespace _cpp_and
{

enum _cpp_continue
{
    _cpp_asm
};

struct _cpp_auto
{
    ::Ice::Int _cpp_default;

    bool operator==(const _cpp_auto& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(_cpp_default != rhs_._cpp_default)
        {
            return false;
        }
        return true;
    }

    bool operator<(const _cpp_auto& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(_cpp_default < rhs_._cpp_default)
        {
            return true;
        }
        else if(rhs_._cpp_default < _cpp_default)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const _cpp_auto& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const _cpp_auto& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const _cpp_auto& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const _cpp_auto& rhs_) const
    {
        return !operator<(rhs_);
    }
};

class _cpp_delete : public IceUtil::Shared
{
public:
    
    _cpp_delete() {}
    explicit _cpp_delete(const ::std::string& _cpp_else) :
        _cpp_else(_cpp_else)
    {
    }
    

    ::std::string _cpp_else;

    bool operator==(const _cpp_delete& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(_cpp_else != rhs_._cpp_else)
        {
            return false;
        }
        return true;
    }

    bool operator<(const _cpp_delete& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(_cpp_else < rhs_._cpp_else)
        {
            return true;
        }
        else if(rhs_._cpp_else < _cpp_else)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const _cpp_delete& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const _cpp_delete& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const _cpp_delete& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const _cpp_delete& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::IceUtil::Handle< ::_cpp_and::_cpp_delete> deletePtr;

typedef ::std::vector<_cpp_auto> _cpp_extern;

typedef ::std::map< ::std::string, _cpp_auto> _cpp_for;

class _cpp_return : public ::Ice::UserException
{
public:

    _cpp_return() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit _cpp_return(::Ice::Int _cpp_signed);
    _cpp_return(const _cpp_return&) = default;
    virtual ~_cpp_return();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual _cpp_return* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int _cpp_signed;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static _cpp_return _iceS_return_init;
/// \endcond

class _cpp_sizeof : public _cpp_return
{
public:

    _cpp_sizeof() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_sizeof(::Ice::Int _cpp_signed, ::Ice::Int _cpp_static, ::Ice::Int _cpp_switch);
    _cpp_sizeof(const _cpp_sizeof&) = default;
    virtual ~_cpp_sizeof();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual _cpp_sizeof* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int _cpp_static;
    ::Ice::Int _cpp_switch;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

const ::Ice::Int _cpp_template = 0;

const ::Ice::Int _cpp_this = 0;

const ::Ice::Int _cpp_throw = 0;

const ::Ice::Int _cpp_typedef = 0;

const ::Ice::Int _cpp_typeid = 0;

const ::Ice::Int _cpp_typename = 0;

const ::Ice::Int _cpp_union = 0;

const ::Ice::Int _cpp_unsigned = 0;

const ::Ice::Int _cpp_using = 0;

const ::Ice::Int _cpp_virtual = 0;

const ::Ice::Int _cpp_while = 0;

const ::Ice::Int _cpp_xor = 0;

}

namespace _cpp_and
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::_cpp_break::begin_case.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_break_case.
 */
class Callback_break_case_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_break_case_Base> Callback_break_casePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::_cpp_char::begin_explicit.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_char_explicit.
 */
class Callback_char_explicit_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_char_explicit_Base> Callback_char_explicitPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::_cpp_switch::begin_foo.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_switch_foo.
 */
class Callback_switch_foo_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_switch_foo_Base> Callback_switch_fooPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::_cpp_switch::begin_foo2.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_switch_foo2.
 */
class Callback_switch_foo2_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_switch_foo2_Base> Callback_switch_foo2Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::_cpp_switch::begin_foo3.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_switch_foo3.
 */
class Callback_switch_foo3_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_switch_foo3_Base> Callback_switch_foo3Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::_cpp_friend::begin_goto.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_friend_goto.
 */
class Callback_friend_goto_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_friend_goto_Base> Callback_friend_gotoPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::_cpp_friend::begin_objc.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_friend_objc.
 */
class Callback_friend_objc_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_friend_objc_Base> Callback_friend_objcPtr;

}

namespace IceProxy
{

namespace _cpp_and
{

class _cpp_break : public virtual ::Ice::Proxy<_cpp_break, ::IceProxy::Ice::Object>
{
public:

    void _cpp_case(::Ice::Int _cpp_catch, ::Ice::Int& _cpp_try, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_case(_cpp_try, _iceI_begin_case(_cpp_catch, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_case(_cpp_catch, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(_cpp_catch, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(_cpp_catch, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::_cpp_and::Callback_break_casePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(_cpp_catch, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::Context& context, const ::_cpp_and::Callback_break_casePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(_cpp_catch, context, cb, cookie);
    }

    void end_case(::Ice::Int& _cpp_try, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_case(::Ice::Int& iceP_try, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_case(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class _cpp_char : public virtual ::Ice::Proxy<_cpp_char, ::IceProxy::Ice::Object>
{
public:

    void _cpp_explicit(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_explicit(_iceI_begin_explicit(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_explicit(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_explicit(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_explicit(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_explicit(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_explicit(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_explicit(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_explicit(const ::_cpp_and::Callback_char_explicitPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_explicit(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_explicit(const ::Ice::Context& context, const ::_cpp_and::Callback_char_explicitPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_explicit(context, cb, cookie);
    }

    void end_explicit(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_explicit(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class _cpp_switch : public virtual ::Ice::Proxy<_cpp_switch, ::IceProxy::Ice::Object>
{
public:

    void foo(const ::_cpp_and::charPrx& _cpp_export, ::Ice::Int& _cpp_volatile, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_foo(_cpp_volatile, _iceI_begin_foo(_cpp_export, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_foo(_cpp_export, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foo(_cpp_export, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foo(_cpp_export, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::_cpp_and::Callback_switch_fooPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foo(_cpp_export, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_foo(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::Context& context, const ::_cpp_and::Callback_switch_fooPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foo(_cpp_export, context, cb, cookie);
    }

    void end_foo(::Ice::Int& _cpp_volatile, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_foo(::Ice::Int& iceP_volatile, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_foo(const ::_cpp_and::charPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void foo2(const ::_cpp_and::charPrx& _cpp_export, ::Ice::Int YES, ::Ice::Int& nil, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_foo2(nil, _iceI_begin_foo2(_cpp_export, YES, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_foo2(const ::_cpp_and::charPrx& _cpp_export, ::Ice::Int YES, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_foo2(_cpp_export, YES, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_foo2(const ::_cpp_and::charPrx& _cpp_export, ::Ice::Int YES, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foo2(_cpp_export, YES, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_foo2(const ::_cpp_and::charPrx& _cpp_export, ::Ice::Int YES, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foo2(_cpp_export, YES, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_foo2(const ::_cpp_and::charPrx& _cpp_export, ::Ice::Int YES, const ::_cpp_and::Callback_switch_foo2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foo2(_cpp_export, YES, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_foo2(const ::_cpp_and::charPrx& _cpp_export, ::Ice::Int YES, const ::Ice::Context& context, const ::_cpp_and::Callback_switch_foo2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foo2(_cpp_export, YES, context, cb, cookie);
    }

    void end_foo2(::Ice::Int& nil, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_foo2(::Ice::Int& iceP_nil, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_foo2(const ::_cpp_and::charPrx&, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void foo3(const ::_cpp_and::charPrx& _cpp_export, ::Ice::Int& nil, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_foo3(nil, _iceI_begin_foo3(_cpp_export, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_foo3(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_foo3(_cpp_export, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_foo3(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foo3(_cpp_export, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_foo3(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foo3(_cpp_export, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_foo3(const ::_cpp_and::charPrx& _cpp_export, const ::_cpp_and::Callback_switch_foo3Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foo3(_cpp_export, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_foo3(const ::_cpp_and::charPrx& _cpp_export, const ::Ice::Context& context, const ::_cpp_and::Callback_switch_foo3Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foo3(_cpp_export, context, cb, cookie);
    }

    void end_foo3(::Ice::Int& nil, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_foo3(::Ice::Int& iceP_nil, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_foo3(const ::_cpp_and::charPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class _cpp_friend : public virtual ::Ice::Proxy<_cpp_friend, ::IceProxy::Ice::Object>
{
public:

    ::_cpp_and::_cpp_auto _cpp_goto(::_cpp_and::_cpp_continue _cpp_if, const ::_cpp_and::_cpp_auto& d, const ::_cpp_and::deletePtr& _cpp_inline, const ::_cpp_and::doPtr& _cpp_mutable, const ::_cpp_and::breakPrx& _cpp_namespace, const ::_cpp_and::charPrx& _cpp_new, const ::_cpp_and::switchPrx& _cpp_not, ::Ice::Int _cpp_or, ::Ice::Int _cpp_protected, ::Ice::Int _cpp_public, ::Ice::Int _cpp_register, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_goto(_iceI_begin_goto(_cpp_if, d, _cpp_inline, _cpp_mutable, _cpp_namespace, _cpp_new, _cpp_not, _cpp_or, _cpp_protected, _cpp_public, _cpp_register, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_goto(::_cpp_and::_cpp_continue _cpp_if, const ::_cpp_and::_cpp_auto& d, const ::_cpp_and::deletePtr& _cpp_inline, const ::_cpp_and::doPtr& _cpp_mutable, const ::_cpp_and::breakPrx& _cpp_namespace, const ::_cpp_and::charPrx& _cpp_new, const ::_cpp_and::switchPrx& _cpp_not, ::Ice::Int _cpp_or, ::Ice::Int _cpp_protected, ::Ice::Int _cpp_public, ::Ice::Int _cpp_register, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_goto(_cpp_if, d, _cpp_inline, _cpp_mutable, _cpp_namespace, _cpp_new, _cpp_not, _cpp_or, _cpp_protected, _cpp_public, _cpp_register, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_goto(::_cpp_and::_cpp_continue _cpp_if, const ::_cpp_and::_cpp_auto& d, const ::_cpp_and::deletePtr& _cpp_inline, const ::_cpp_and::doPtr& _cpp_mutable, const ::_cpp_and::breakPrx& _cpp_namespace, const ::_cpp_and::charPrx& _cpp_new, const ::_cpp_and::switchPrx& _cpp_not, ::Ice::Int _cpp_or, ::Ice::Int _cpp_protected, ::Ice::Int _cpp_public, ::Ice::Int _cpp_register, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_goto(_cpp_if, d, _cpp_inline, _cpp_mutable, _cpp_namespace, _cpp_new, _cpp_not, _cpp_or, _cpp_protected, _cpp_public, _cpp_register, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_goto(::_cpp_and::_cpp_continue _cpp_if, const ::_cpp_and::_cpp_auto& d, const ::_cpp_and::deletePtr& _cpp_inline, const ::_cpp_and::doPtr& _cpp_mutable, const ::_cpp_and::breakPrx& _cpp_namespace, const ::_cpp_and::charPrx& _cpp_new, const ::_cpp_and::switchPrx& _cpp_not, ::Ice::Int _cpp_or, ::Ice::Int _cpp_protected, ::Ice::Int _cpp_public, ::Ice::Int _cpp_register, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_goto(_cpp_if, d, _cpp_inline, _cpp_mutable, _cpp_namespace, _cpp_new, _cpp_not, _cpp_or, _cpp_protected, _cpp_public, _cpp_register, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_goto(::_cpp_and::_cpp_continue _cpp_if, const ::_cpp_and::_cpp_auto& d, const ::_cpp_and::deletePtr& _cpp_inline, const ::_cpp_and::doPtr& _cpp_mutable, const ::_cpp_and::breakPrx& _cpp_namespace, const ::_cpp_and::charPrx& _cpp_new, const ::_cpp_and::switchPrx& _cpp_not, ::Ice::Int _cpp_or, ::Ice::Int _cpp_protected, ::Ice::Int _cpp_public, ::Ice::Int _cpp_register, const ::_cpp_and::Callback_friend_gotoPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_goto(_cpp_if, d, _cpp_inline, _cpp_mutable, _cpp_namespace, _cpp_new, _cpp_not, _cpp_or, _cpp_protected, _cpp_public, _cpp_register, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_goto(::_cpp_and::_cpp_continue _cpp_if, const ::_cpp_and::_cpp_auto& d, const ::_cpp_and::deletePtr& _cpp_inline, const ::_cpp_and::doPtr& _cpp_mutable, const ::_cpp_and::breakPrx& _cpp_namespace, const ::_cpp_and::charPrx& _cpp_new, const ::_cpp_and::switchPrx& _cpp_not, ::Ice::Int _cpp_or, ::Ice::Int _cpp_protected, ::Ice::Int _cpp_public, ::Ice::Int _cpp_register, const ::Ice::Context& context, const ::_cpp_and::Callback_friend_gotoPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_goto(_cpp_if, d, _cpp_inline, _cpp_mutable, _cpp_namespace, _cpp_new, _cpp_not, _cpp_or, _cpp_protected, _cpp_public, _cpp_register, context, cb, cookie);
    }

    ::_cpp_and::_cpp_auto end_goto(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_goto(::_cpp_and::_cpp_continue, const ::_cpp_and::_cpp_auto&, const ::_cpp_and::deletePtr&, const ::_cpp_and::doPtr&, const ::_cpp_and::breakPrx&, const ::_cpp_and::charPrx&, const ::_cpp_and::switchPrx&, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void objc(::Ice::Int bycopy, ::Ice::Int byref, ::Ice::Int id, ::Ice::Int IMP, ::Ice::Int in, ::Ice::Int inout, ::Ice::Int nil, ::Ice::Int NO, ::Ice::Int oneway, ::Ice::Int SEL, ::Ice::Int super, ::Ice::Int YES, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_objc(_iceI_begin_objc(bycopy, byref, id, IMP, in, inout, nil, NO, oneway, SEL, super, YES, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_objc(::Ice::Int bycopy, ::Ice::Int byref, ::Ice::Int id, ::Ice::Int IMP, ::Ice::Int in, ::Ice::Int inout, ::Ice::Int nil, ::Ice::Int NO, ::Ice::Int oneway, ::Ice::Int SEL, ::Ice::Int super, ::Ice::Int YES, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_objc(bycopy, byref, id, IMP, in, inout, nil, NO, oneway, SEL, super, YES, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_objc(::Ice::Int bycopy, ::Ice::Int byref, ::Ice::Int id, ::Ice::Int IMP, ::Ice::Int in, ::Ice::Int inout, ::Ice::Int nil, ::Ice::Int NO, ::Ice::Int oneway, ::Ice::Int SEL, ::Ice::Int super, ::Ice::Int YES, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_objc(bycopy, byref, id, IMP, in, inout, nil, NO, oneway, SEL, super, YES, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_objc(::Ice::Int bycopy, ::Ice::Int byref, ::Ice::Int id, ::Ice::Int IMP, ::Ice::Int in, ::Ice::Int inout, ::Ice::Int nil, ::Ice::Int NO, ::Ice::Int oneway, ::Ice::Int SEL, ::Ice::Int super, ::Ice::Int YES, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_objc(bycopy, byref, id, IMP, in, inout, nil, NO, oneway, SEL, super, YES, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_objc(::Ice::Int bycopy, ::Ice::Int byref, ::Ice::Int id, ::Ice::Int IMP, ::Ice::Int in, ::Ice::Int inout, ::Ice::Int nil, ::Ice::Int NO, ::Ice::Int oneway, ::Ice::Int SEL, ::Ice::Int super, ::Ice::Int YES, const ::_cpp_and::Callback_friend_objcPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_objc(bycopy, byref, id, IMP, in, inout, nil, NO, oneway, SEL, super, YES, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_objc(::Ice::Int bycopy, ::Ice::Int byref, ::Ice::Int id, ::Ice::Int IMP, ::Ice::Int in, ::Ice::Int inout, ::Ice::Int nil, ::Ice::Int NO, ::Ice::Int oneway, ::Ice::Int SEL, ::Ice::Int super, ::Ice::Int YES, const ::Ice::Context& context, const ::_cpp_and::Callback_friend_objcPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_objc(bycopy, byref, id, IMP, in, inout, nil, NO, oneway, SEL, super, YES, context, cb, cookie);
    }

    void end_objc(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_objc(::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace _cpp_and
{

class _cpp_break : public virtual ::Ice::Object
{
public:

    typedef breakPrx ProxyType;

    virtual ~_cpp_break();
    _cpp_break() = default;
    _cpp_break(const _cpp_break&) = default;
    _cpp_break& operator=(const _cpp_break&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_case(::Ice::Int _cpp_catch, ::Ice::Int& _cpp_try, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_case(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class _cpp_char : public virtual ::Ice::Object
{
public:

    typedef charPrx ProxyType;

    virtual ~_cpp_char();
    _cpp_char() = default;
    _cpp_char(const _cpp_char&) = default;
    _cpp_char& operator=(const _cpp_char&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_explicit(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_explicit(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class _cpp_switch : public virtual ::Ice::Object
{
public:

    typedef switchPrx ProxyType;

    virtual ~_cpp_switch();
    _cpp_switch() = default;
    _cpp_switch(const _cpp_switch&) = default;
    _cpp_switch& operator=(const _cpp_switch&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void foo(const charPrx& _cpp_export, ::Ice::Int& _cpp_volatile, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_foo(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void foo2(const charPrx& _cpp_export, ::Ice::Int YES, ::Ice::Int& nil, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_foo2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void foo3(const charPrx& _cpp_export, ::Ice::Int& nil, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_foo3(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class _cpp_friend : public virtual ::Ice::Object
{
public:

    typedef friendPrx ProxyType;

    virtual ~_cpp_friend();
    _cpp_friend() = default;
    _cpp_friend(const _cpp_friend&) = default;
    _cpp_friend& operator=(const _cpp_friend&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual _cpp_auto _cpp_goto(_cpp_continue _cpp_if, const _cpp_auto& d, const deletePtr& _cpp_inline, const doPtr& _cpp_mutable, const breakPrx& _cpp_namespace, const charPrx& _cpp_new, const switchPrx& _cpp_not, ::Ice::Int _cpp_or, ::Ice::Int _cpp_protected, ::Ice::Int _cpp_public, ::Ice::Int _cpp_register, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_goto(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void objc(::Ice::Int bycopy, ::Ice::Int byref, ::Ice::Int id, ::Ice::Int IMP, ::Ice::Int in, ::Ice::Int inout, ::Ice::Int nil, ::Ice::Int NO, ::Ice::Int oneway, ::Ice::Int SEL, ::Ice::Int super, ::Ice::Int YES, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_objc(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

namespace _cpp_and
{

class _cpp_do : public ::Ice::ValueHelper<_cpp_do, ::Ice::Value>
{
public:

    virtual ~_cpp_do();

    _cpp_do() = default;

    _cpp_do(const _cpp_do&) = default;
    _cpp_do(_cpp_do&&) = default;
    _cpp_do& operator=(const _cpp_do&) = default;
    _cpp_do& operator=(_cpp_do&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit _cpp_do(::Ice::Int _cpp_if) :
        _cpp_if(_cpp_if)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Int&> ice_tuple() const
    {
        return std::tie(_cpp_if);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Ice::Int _cpp_if;
};

/// \cond INTERNAL
static _cpp_do _iceS_do_init;
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::_cpp_and::_cpp_continue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::_cpp_and::_cpp_auto>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::_cpp_and::_cpp_auto, S>
{
    static void write(S* ostr, const ::_cpp_and::_cpp_auto& v)
    {
        ostr->write(v._cpp_default);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::_cpp_auto, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_auto& v)
    {
        istr->read(v._cpp_default);
    }
};

template<>
struct StreamableTraits< ::_cpp_and::deletePtr>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStructClass;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::_cpp_and::deletePtr, S>
{
    static void write(S* ostr, const ::_cpp_and::deletePtr& v)
    {
        ostr->write(v->_cpp_else);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::deletePtr, S>
{
    static void read(S* istr, ::_cpp_and::deletePtr& v)
    {
        istr->read(v->_cpp_else);
    }
};

template<typename S>
struct StreamWriter< ::_cpp_and::_cpp_do, S>
{
    static void write(S* ostr, const ::_cpp_and::_cpp_do& v)
    {
        ostr->write(v._cpp_if);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::_cpp_do, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_do& v)
    {
        istr->read(v._cpp_if);
    }
};

template<>
struct StreamableTraits< ::_cpp_and::_cpp_return>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::_cpp_and::_cpp_return, S>
{
    static void write(S* ostr, const ::_cpp_and::_cpp_return& v)
    {
        ostr->write(v._cpp_signed);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::_cpp_return, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_return& v)
    {
        istr->read(v._cpp_signed);
    }
};

template<>
struct StreamableTraits< ::_cpp_and::_cpp_sizeof>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::_cpp_and::_cpp_sizeof, S>
{
    static void write(S* ostr, const ::_cpp_and::_cpp_sizeof& v)
    {
        ostr->write(v._cpp_static);
        ostr->write(v._cpp_switch);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::_cpp_sizeof, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_sizeof& v)
    {
        istr->read(v._cpp_static);
        istr->read(v._cpp_switch);
    }
};

}
/// \endcond

namespace _cpp_and
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::_cpp_break::begin_case.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_break_case.
 */
template<class T>
class CallbackNC_break_case : public Callback_break_case_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_break_case(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        breakPrx proxy = breakPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_try;
        try
        {
            proxy->end_case(iceP_try, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_try);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::break::begin_case.
 */
template<class T> Callback_break_casePtr
newCallback_break_case(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_case<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::break::begin_case.
 */
template<class T> Callback_break_casePtr
newCallback_break_case(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_case<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::_cpp_break::begin_case.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_break_case.
 */
template<class T, typename CT>
class Callback_break_case : public Callback_break_case_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_break_case(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        breakPrx proxy = breakPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_try;
        try
        {
            proxy->end_case(iceP_try, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_try, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::break::begin_case.
 */
template<class T, typename CT> Callback_break_casePtr
newCallback_break_case(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_case<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::break::begin_case.
 */
template<class T, typename CT> Callback_break_casePtr
newCallback_break_case(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_case<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::_cpp_char::begin_explicit.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_char_explicit.
 */
template<class T>
class CallbackNC_char_explicit : public Callback_char_explicit_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_char_explicit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::char::begin_explicit.
 */
template<class T> Callback_char_explicitPtr
newCallback_char_explicit(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_char_explicit<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::char::begin_explicit.
 */
template<class T> Callback_char_explicitPtr
newCallback_char_explicit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_char_explicit<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::char::begin_explicit.
 */
template<class T> Callback_char_explicitPtr
newCallback_char_explicit(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_char_explicit<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::char::begin_explicit.
 */
template<class T> Callback_char_explicitPtr
newCallback_char_explicit(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_char_explicit<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::_cpp_char::begin_explicit.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_char_explicit.
 */
template<class T, typename CT>
class Callback_char_explicit : public Callback_char_explicit_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_char_explicit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::char::begin_explicit.
 */
template<class T, typename CT> Callback_char_explicitPtr
newCallback_char_explicit(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_char_explicit<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::char::begin_explicit.
 */
template<class T, typename CT> Callback_char_explicitPtr
newCallback_char_explicit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_char_explicit<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::char::begin_explicit.
 */
template<class T, typename CT> Callback_char_explicitPtr
newCallback_char_explicit(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_char_explicit<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::char::begin_explicit.
 */
template<class T, typename CT> Callback_char_explicitPtr
newCallback_char_explicit(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_char_explicit<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::_cpp_switch::begin_foo.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_switch_foo.
 */
template<class T>
class CallbackNC_switch_foo : public Callback_switch_foo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_switch_foo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        switchPrx proxy = switchPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_volatile;
        try
        {
            proxy->end_foo(iceP_volatile, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_volatile);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::switch::begin_foo.
 */
template<class T> Callback_switch_fooPtr
newCallback_switch_foo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_switch_foo<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::switch::begin_foo.
 */
template<class T> Callback_switch_fooPtr
newCallback_switch_foo(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_switch_foo<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::_cpp_switch::begin_foo.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_switch_foo.
 */
template<class T, typename CT>
class Callback_switch_foo : public Callback_switch_foo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_switch_foo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        switchPrx proxy = switchPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_volatile;
        try
        {
            proxy->end_foo(iceP_volatile, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_volatile, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::switch::begin_foo.
 */
template<class T, typename CT> Callback_switch_fooPtr
newCallback_switch_foo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_switch_foo<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::switch::begin_foo.
 */
template<class T, typename CT> Callback_switch_fooPtr
newCallback_switch_foo(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_switch_foo<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::_cpp_switch::begin_foo2.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_switch_foo2.
 */
template<class T>
class CallbackNC_switch_foo2 : public Callback_switch_foo2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_switch_foo2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        switchPrx proxy = switchPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_nil;
        try
        {
            proxy->end_foo2(iceP_nil, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_nil);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::switch::begin_foo2.
 */
template<class T> Callback_switch_foo2Ptr
newCallback_switch_foo2(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_switch_foo2<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::switch::begin_foo2.
 */
template<class T> Callback_switch_foo2Ptr
newCallback_switch_foo2(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_switch_foo2<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::_cpp_switch::begin_foo2.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_switch_foo2.
 */
template<class T, typename CT>
class Callback_switch_foo2 : public Callback_switch_foo2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_switch_foo2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        switchPrx proxy = switchPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_nil;
        try
        {
            proxy->end_foo2(iceP_nil, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_nil, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::switch::begin_foo2.
 */
template<class T, typename CT> Callback_switch_foo2Ptr
newCallback_switch_foo2(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_switch_foo2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::switch::begin_foo2.
 */
template<class T, typename CT> Callback_switch_foo2Ptr
newCallback_switch_foo2(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_switch_foo2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::_cpp_switch::begin_foo3.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_switch_foo3.
 */
template<class T>
class CallbackNC_switch_foo3 : public Callback_switch_foo3_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_switch_foo3(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        switchPrx proxy = switchPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_nil;
        try
        {
            proxy->end_foo3(iceP_nil, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_nil);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::switch::begin_foo3.
 */
template<class T> Callback_switch_foo3Ptr
newCallback_switch_foo3(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_switch_foo3<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::switch::begin_foo3.
 */
template<class T> Callback_switch_foo3Ptr
newCallback_switch_foo3(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_switch_foo3<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::_cpp_switch::begin_foo3.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_switch_foo3.
 */
template<class T, typename CT>
class Callback_switch_foo3 : public Callback_switch_foo3_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_switch_foo3(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        switchPrx proxy = switchPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_nil;
        try
        {
            proxy->end_foo3(iceP_nil, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_nil, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::switch::begin_foo3.
 */
template<class T, typename CT> Callback_switch_foo3Ptr
newCallback_switch_foo3(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_switch_foo3<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::switch::begin_foo3.
 */
template<class T, typename CT> Callback_switch_foo3Ptr
newCallback_switch_foo3(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_switch_foo3<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::_cpp_friend::begin_goto.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_friend_goto.
 */
template<class T>
class CallbackNC_friend_goto : public Callback_friend_goto_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const _cpp_auto&);

    CallbackNC_friend_goto(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        friendPrx proxy = friendPrx::uncheckedCast(result->getProxy());
        _cpp_auto ret;
        try
        {
            ret = proxy->end_goto(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::friend::begin_goto.
 */
template<class T> Callback_friend_gotoPtr
newCallback_friend_goto(const IceUtil::Handle<T>& instance, void (T::*cb)(const _cpp_auto&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_friend_goto<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::friend::begin_goto.
 */
template<class T> Callback_friend_gotoPtr
newCallback_friend_goto(T* instance, void (T::*cb)(const _cpp_auto&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_friend_goto<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::_cpp_friend::begin_goto.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_friend_goto.
 */
template<class T, typename CT>
class Callback_friend_goto : public Callback_friend_goto_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const _cpp_auto&, const CT&);

    Callback_friend_goto(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        friendPrx proxy = friendPrx::uncheckedCast(result->getProxy());
        _cpp_auto ret;
        try
        {
            ret = proxy->end_goto(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::friend::begin_goto.
 */
template<class T, typename CT> Callback_friend_gotoPtr
newCallback_friend_goto(const IceUtil::Handle<T>& instance, void (T::*cb)(const _cpp_auto&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_friend_goto<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::friend::begin_goto.
 */
template<class T, typename CT> Callback_friend_gotoPtr
newCallback_friend_goto(T* instance, void (T::*cb)(const _cpp_auto&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_friend_goto<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::_cpp_friend::begin_objc.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_friend_objc.
 */
template<class T>
class CallbackNC_friend_objc : public Callback_friend_objc_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_friend_objc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::friend::begin_objc.
 */
template<class T> Callback_friend_objcPtr
newCallback_friend_objc(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_friend_objc<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::friend::begin_objc.
 */
template<class T> Callback_friend_objcPtr
newCallback_friend_objc(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_friend_objc<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::friend::begin_objc.
 */
template<class T> Callback_friend_objcPtr
newCallback_friend_objc(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_friend_objc<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::friend::begin_objc.
 */
template<class T> Callback_friend_objcPtr
newCallback_friend_objc(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_friend_objc<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::_cpp_friend::begin_objc.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_friend_objc.
 */
template<class T, typename CT>
class Callback_friend_objc : public Callback_friend_objc_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_friend_objc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::friend::begin_objc.
 */
template<class T, typename CT> Callback_friend_objcPtr
newCallback_friend_objc(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_friend_objc<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::friend::begin_objc.
 */
template<class T, typename CT> Callback_friend_objcPtr
newCallback_friend_objc(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_friend_objc<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::friend::begin_objc.
 */
template<class T, typename CT> Callback_friend_objcPtr
newCallback_friend_objc(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_friend_objc<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::friend::begin_objc.
 */
template<class T, typename CT> Callback_friend_objcPtr
newCallback_friend_objc(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_friend_objc<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
