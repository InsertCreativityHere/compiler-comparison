//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Inherit.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Inherit.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 9
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Exception1> iceC_Test_Exception1_init("::Test::Exception1");

const ::IceInternal::DefaultValueFactoryInit<::Test::Class1> iceC_Test_Class1_init("::Test::Class1");

const ::std::string iceC_Test_Intf1_ids[2] =
{
    "::Ice::Object",
    "::Test::Intf1"
};
const ::std::string iceC_Test_Intf1_ops[] =
{
    "autorelease",
    "classForCoder",
    "copy",
    "dealloc",
    "description",
    "hash",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "init",
    "isProxy",
    "isa",
    "mutableCopy",
    "reason",
    "release",
    "retain",
    "retainCount",
    "self",
    "superclass",
    "zone"
};
const ::std::string iceC_Test_Intf1_isa_name = "isa";
const ::std::string iceC_Test_Intf1_reason_name = "reason";
const ::std::string iceC_Test_Intf1_autorelease_name = "autorelease";
const ::std::string iceC_Test_Intf1_classForCoder_name = "classForCoder";
const ::std::string iceC_Test_Intf1_copy_name = "copy";
const ::std::string iceC_Test_Intf1_dealloc_name = "dealloc";
const ::std::string iceC_Test_Intf1_description_name = "description";
const ::std::string iceC_Test_Intf1_hash_name = "hash";
const ::std::string iceC_Test_Intf1_init_name = "init";
const ::std::string iceC_Test_Intf1_isProxy_name = "isProxy";
const ::std::string iceC_Test_Intf1_mutableCopy_name = "mutableCopy";
const ::std::string iceC_Test_Intf1_release_name = "release";
const ::std::string iceC_Test_Intf1_retain_name = "retain";
const ::std::string iceC_Test_Intf1_retainCount_name = "retainCount";
const ::std::string iceC_Test_Intf1_self_name = "self";
const ::std::string iceC_Test_Intf1_superclass_name = "superclass";
const ::std::string iceC_Test_Intf1_zone_name = "zone";

const ::std::string iceC_Test_Intf2_ids[2] =
{
    "::Ice::Object",
    "::Test::Intf2"
};
const ::std::string iceC_Test_Intf2_ops[] =
{
    "autorelease",
    "classForCoder",
    "copy",
    "dealloc",
    "description",
    "hash",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "init",
    "isProxy",
    "isa",
    "mutableCopy",
    "reason",
    "release",
    "retain",
    "retainCount",
    "self",
    "superclass",
    "zone"
};
const ::std::string iceC_Test_Intf2_isa_name = "isa";
const ::std::string iceC_Test_Intf2_reason_name = "reason";
const ::std::string iceC_Test_Intf2_autorelease_name = "autorelease";
const ::std::string iceC_Test_Intf2_classForCoder_name = "classForCoder";
const ::std::string iceC_Test_Intf2_copy_name = "copy";
const ::std::string iceC_Test_Intf2_dealloc_name = "dealloc";
const ::std::string iceC_Test_Intf2_description_name = "description";
const ::std::string iceC_Test_Intf2_hash_name = "hash";
const ::std::string iceC_Test_Intf2_init_name = "init";
const ::std::string iceC_Test_Intf2_isProxy_name = "isProxy";
const ::std::string iceC_Test_Intf2_mutableCopy_name = "mutableCopy";
const ::std::string iceC_Test_Intf2_release_name = "release";
const ::std::string iceC_Test_Intf2_retain_name = "retain";
const ::std::string iceC_Test_Intf2_retainCount_name = "retainCount";
const ::std::string iceC_Test_Intf2_self_name = "self";
const ::std::string iceC_Test_Intf2_superclass_name = "superclass";
const ::std::string iceC_Test_Intf2_zone_name = "zone";

}

Test::Exception1::~Exception1()
{
}

const ::std::string&
Test::Exception1::ice_staticId()
{
    static const ::std::string typeId = "::Test::Exception1";
    return typeId;
}

bool
Test::Intf1::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Intf1_ids, iceC_Test_Intf1_ids + 2, s);
}

::std::vector<::std::string>
Test::Intf1::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Intf1_ids[0], &iceC_Test_Intf1_ids[2]);
}

::std::string
Test::Intf1::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Intf1::ice_staticId()
{
    static const ::std::string typeId = "::Test::Intf1";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Intf1::_iceD_isa(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->isa(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_reason(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->reason(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_autorelease(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->autorelease(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_classForCoder(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->classForCoder(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_copy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->copy(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_dealloc(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->dealloc(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_description(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->description(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_hash(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->hash(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_init(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->init(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_isProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->isProxy(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_mutableCopy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->mutableCopy(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_release(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->release(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_retain(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->retain(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_retainCount(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->retainCount(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_self(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->self(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_superclass(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->superclass(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_zone(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->zone(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Intf1_ops, iceC_Test_Intf1_ops + 21, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Intf1_ops)
    {
        case 0:
        {
            return _iceD_autorelease(in, current);
        }
        case 1:
        {
            return _iceD_classForCoder(in, current);
        }
        case 2:
        {
            return _iceD_copy(in, current);
        }
        case 3:
        {
            return _iceD_dealloc(in, current);
        }
        case 4:
        {
            return _iceD_description(in, current);
        }
        case 5:
        {
            return _iceD_hash(in, current);
        }
        case 6:
        {
            return _iceD_ice_id(in, current);
        }
        case 7:
        {
            return _iceD_ice_ids(in, current);
        }
        case 8:
        {
            return _iceD_ice_isA(in, current);
        }
        case 9:
        {
            return _iceD_ice_ping(in, current);
        }
        case 10:
        {
            return _iceD_init(in, current);
        }
        case 11:
        {
            return _iceD_isProxy(in, current);
        }
        case 12:
        {
            return _iceD_isa(in, current);
        }
        case 13:
        {
            return _iceD_mutableCopy(in, current);
        }
        case 14:
        {
            return _iceD_reason(in, current);
        }
        case 15:
        {
            return _iceD_release(in, current);
        }
        case 16:
        {
            return _iceD_retain(in, current);
        }
        case 17:
        {
            return _iceD_retainCount(in, current);
        }
        case 18:
        {
            return _iceD_self(in, current);
        }
        case 19:
        {
            return _iceD_superclass(in, current);
        }
        case 20:
        {
            return _iceD_zone(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Intf2::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Intf2_ids, iceC_Test_Intf2_ids + 2, s);
}

::std::vector<::std::string>
Test::Intf2::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Intf2_ids[0], &iceC_Test_Intf2_ids[2]);
}

::std::string
Test::Intf2::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Intf2::ice_staticId()
{
    static const ::std::string typeId = "::Test::Intf2";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Intf2::_iceD_isa(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->isa(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_reason(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->reason(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_autorelease(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->autorelease(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_classForCoder(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->classForCoder(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_copy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->copy(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_dealloc(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->dealloc(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_description(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->description(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_hash(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->hash(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_init(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->init(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_isProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->isProxy(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_mutableCopy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->mutableCopy(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_release(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->release(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_retain(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->retain(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_retainCount(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->retainCount(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_self(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->self(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_superclass(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->superclass(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_zone(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    this->zone(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Intf2_ops, iceC_Test_Intf2_ops + 21, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Intf2_ops)
    {
        case 0:
        {
            return _iceD_autorelease(in, current);
        }
        case 1:
        {
            return _iceD_classForCoder(in, current);
        }
        case 2:
        {
            return _iceD_copy(in, current);
        }
        case 3:
        {
            return _iceD_dealloc(in, current);
        }
        case 4:
        {
            return _iceD_description(in, current);
        }
        case 5:
        {
            return _iceD_hash(in, current);
        }
        case 6:
        {
            return _iceD_ice_id(in, current);
        }
        case 7:
        {
            return _iceD_ice_ids(in, current);
        }
        case 8:
        {
            return _iceD_ice_isA(in, current);
        }
        case 9:
        {
            return _iceD_ice_ping(in, current);
        }
        case 10:
        {
            return _iceD_init(in, current);
        }
        case 11:
        {
            return _iceD_isProxy(in, current);
        }
        case 12:
        {
            return _iceD_isa(in, current);
        }
        case 13:
        {
            return _iceD_mutableCopy(in, current);
        }
        case 14:
        {
            return _iceD_reason(in, current);
        }
        case 15:
        {
            return _iceD_release(in, current);
        }
        case 16:
        {
            return _iceD_retain(in, current);
        }
        case 17:
        {
            return _iceD_retainCount(in, current);
        }
        case 18:
        {
            return _iceD_self(in, current);
        }
        case 19:
        {
            return _iceD_superclass(in, current);
        }
        case 20:
        {
            return _iceD_zone(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::Class1::~Class1()
{
}

const ::std::string&
Test::Class1::ice_staticId()
{
    static const ::std::string typeId = "::Test::Class1";
    return typeId;
}

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_isa(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_isa_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_reason(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_reason_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_autorelease(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_autorelease_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_classForCoder(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_classForCoder_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_copy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_copy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_dealloc(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_dealloc_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_description(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_description_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_hash(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_hash_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_init(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_init_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_isProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_isProxy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_mutableCopy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_mutableCopy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_release(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_release_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_retain(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_retain_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_retainCount(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_retainCount_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_self(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_self_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_superclass(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_superclass_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf1Prx::_iceI_zone(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf1_zone_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::Intf1Prx::_newInstance() const
{
    return ::IceInternal::createProxy<Intf1Prx>();
}
/// \endcond

const ::std::string&
Test::Intf1Prx::ice_staticId()
{
    return Intf1::ice_staticId();
}

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_isa(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_isa_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_reason(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_reason_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_autorelease(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_autorelease_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_classForCoder(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_classForCoder_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_copy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_copy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_dealloc(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_dealloc_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_description(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_description_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_hash(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_hash_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_init(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_init_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_isProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_isProxy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_mutableCopy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_mutableCopy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_release(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_release_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_retain(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_retain_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_retainCount(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_retainCount_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_self(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_self_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_superclass(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_superclass_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Intf2Prx::_iceI_zone(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Intf2_zone_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::Intf2Prx::_newInstance() const
{
    return ::IceInternal::createProxy<Intf2Prx>();
}
/// \endcond

const ::std::string&
Test::Intf2Prx::ice_staticId()
{
    return Intf2::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_Intf1_isa_name = "isa";

const ::std::string iceC_Test_Intf1_reason_name = "reason";

const ::std::string iceC_Test_Intf1_autorelease_name = "autorelease";

const ::std::string iceC_Test_Intf1_classForCoder_name = "classForCoder";

const ::std::string iceC_Test_Intf1_copy_name = "copy";

const ::std::string iceC_Test_Intf1_dealloc_name = "dealloc";

const ::std::string iceC_Test_Intf1_description_name = "description";

const ::std::string iceC_Test_Intf1_hash_name = "hash";

const ::std::string iceC_Test_Intf1_init_name = "init";

const ::std::string iceC_Test_Intf1_isProxy_name = "isProxy";

const ::std::string iceC_Test_Intf1_mutableCopy_name = "mutableCopy";

const ::std::string iceC_Test_Intf1_release_name = "release";

const ::std::string iceC_Test_Intf1_retain_name = "retain";

const ::std::string iceC_Test_Intf1_retainCount_name = "retainCount";

const ::std::string iceC_Test_Intf1_self_name = "self";

const ::std::string iceC_Test_Intf1_superclass_name = "superclass";

const ::std::string iceC_Test_Intf1_zone_name = "zone";

const ::std::string iceC_Test_Intf2_isa_name = "isa";

const ::std::string iceC_Test_Intf2_reason_name = "reason";

const ::std::string iceC_Test_Intf2_autorelease_name = "autorelease";

const ::std::string iceC_Test_Intf2_classForCoder_name = "classForCoder";

const ::std::string iceC_Test_Intf2_copy_name = "copy";

const ::std::string iceC_Test_Intf2_dealloc_name = "dealloc";

const ::std::string iceC_Test_Intf2_description_name = "description";

const ::std::string iceC_Test_Intf2_hash_name = "hash";

const ::std::string iceC_Test_Intf2_init_name = "init";

const ::std::string iceC_Test_Intf2_isProxy_name = "isProxy";

const ::std::string iceC_Test_Intf2_mutableCopy_name = "mutableCopy";

const ::std::string iceC_Test_Intf2_release_name = "release";

const ::std::string iceC_Test_Intf2_retain_name = "retain";

const ::std::string iceC_Test_Intf2_retainCount_name = "retainCount";

const ::std::string iceC_Test_Intf2_self_name = "self";

const ::std::string iceC_Test_Intf2_superclass_name = "superclass";

const ::std::string iceC_Test_Intf2_zone_name = "zone";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::Exception1> iceC_Test_Exception1_init("::Test::Exception1");

}

Test::Exception1::Exception1(::Ice::Int isa, ::Ice::Int reason, ::Ice::Int raise, ::Ice::Int name, ::Ice::Int callStackReturnAddresses, ::Ice::Int userInfo, ::Ice::Int reserved) :
    ::Ice::UserException(),
    isa(isa),
    reason(reason),
    raise(raise),
    name(name),
    callStackReturnAddresses(callStackReturnAddresses),
    userInfo(userInfo),
    reserved(reserved)
{
}

#ifdef ICE_CPP11_COMPILER
Test::Exception1::~Exception1()
{
}
#else
Test::Exception1::~Exception1() throw()
{
}
#endif

::std::string
Test::Exception1::ice_id() const
{
    return "::Test::Exception1";
}

Test::Exception1*
Test::Exception1::ice_clone() const
{
    return new Exception1(*this);
}

void
Test::Exception1::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::Exception1::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::Exception1", -1, true);
    ::Ice::StreamWriter< Exception1, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Exception1::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Exception1, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Class1* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Class1>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Class1;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Class1::_newInstance() const
{
    return new Class1;
}
/// \endcond

const ::std::string&
IceProxy::Test::Class1::ice_staticId()
{
    return ::Test::Class1::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Intf1* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Intf1>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Intf1;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_isa(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_isa_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_isa_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_isa_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_isa(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_isa_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_reason(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_reason_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_reason_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_reason_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_reason(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_reason_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_autorelease(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_autorelease_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_autorelease_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_autorelease_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_autorelease(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_autorelease_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_classForCoder(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_classForCoder_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_classForCoder_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_classForCoder_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_classForCoder(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_classForCoder_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_copy(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_copy_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_copy_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_copy_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_copy(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_copy_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_dealloc(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_dealloc_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_dealloc_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_dealloc_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_dealloc(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_dealloc_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_description(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_description_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_description_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_description_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_description(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_description_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_hash(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_hash_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_hash_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_hash_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_hash(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_hash_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_init(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_init_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_init_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_init_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_init(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_init_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_isProxy(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_isProxy_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_isProxy_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_isProxy_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_isProxy(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_isProxy_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_mutableCopy(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_mutableCopy_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_mutableCopy_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_mutableCopy_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_mutableCopy(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_mutableCopy_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_release(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_release_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_release_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_release_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_release(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_release_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_retain(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_retain_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_retain_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_retain_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_retain(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_retain_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_retainCount(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_retainCount_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_retainCount_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_retainCount_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_retainCount(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_retainCount_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_self(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_self_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_self_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_self_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_self(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_self_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_superclass(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_superclass_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_superclass_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_superclass_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_superclass(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_superclass_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf1::_iceI_begin_zone(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf1_zone_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf1_zone_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Intf1_zone_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf1::end_zone(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf1_zone_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Intf1::_newInstance() const
{
    return new Intf1;
}
/// \endcond

const ::std::string&
IceProxy::Test::Intf1::ice_staticId()
{
    return ::Test::Intf1::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Intf2* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Intf2>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Intf2;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_isa(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_isa_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_isa_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_isa_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_isa(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_isa_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_reason(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_reason_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_reason_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_reason_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_reason(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_reason_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_autorelease(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_autorelease_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_autorelease_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_autorelease_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_autorelease(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_autorelease_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_classForCoder(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_classForCoder_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_classForCoder_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_classForCoder_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_classForCoder(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_classForCoder_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_copy(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_copy_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_copy_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_copy_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_copy(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_copy_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_dealloc(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_dealloc_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_dealloc_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_dealloc_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_dealloc(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_dealloc_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_description(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_description_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_description_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_description_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_description(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_description_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_hash(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_hash_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_hash_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_hash_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_hash(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_hash_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_init(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_init_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_init_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_init_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_init(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_init_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_isProxy(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_isProxy_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_isProxy_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_isProxy_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_isProxy(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_isProxy_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_mutableCopy(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_mutableCopy_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_mutableCopy_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_mutableCopy_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_mutableCopy(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_mutableCopy_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_release(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_release_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_release_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_release_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_release(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_release_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_retain(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_retain_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_retain_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_retain_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_retain(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_retain_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_retainCount(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_retainCount_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_retainCount_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_retainCount_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_retainCount(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_retainCount_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_self(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_self_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_self_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_self_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_self(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_self_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_superclass(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_superclass_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_superclass_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_superclass_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_superclass(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_superclass_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Intf2::_iceI_begin_zone(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Intf2_zone_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Intf2_zone_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Intf2_zone_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Intf2::end_zone(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Intf2_zone_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Intf2::_newInstance() const
{
    return new Intf2;
}
/// \endcond

const ::std::string&
IceProxy::Test::Intf2::ice_staticId()
{
    return ::Test::Intf2::ice_staticId();
}

Test::Class1::~Class1()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Class1* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::Class1::ice_clone() const
{
    ::Ice::Object* p = new Class1(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_Class1_ids[2] =
{
    "::Ice::Object",
    "::Test::Class1"
};

}

bool
Test::Class1::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Class1_ids, iceC_Test_Class1_ids + 2, s);
}

::std::vector< ::std::string>
Test::Class1::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Class1_ids[0], &iceC_Test_Class1_ids[2]);
}

const ::std::string&
Test::Class1::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Class1::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Test::Class1";
    return typeId;
#else
    return iceC_Test_Class1_ids[1];
#endif
}

/// \cond STREAM
void
Test::Class1::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Class1, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Class1::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Class1, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Class1> iceC_Test_Class1_init("::Test::Class1");
}

::Ice::ValueFactoryPtr
Test::Class1::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Class1::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(Class1Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = Class1Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Class1::ice_staticId(), v);
    }
}
/// \endcond

Test::Intf1::~Intf1()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Intf1* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_Intf1_ids[2] =
{
    "::Ice::Object",
    "::Test::Intf1"
};

}

bool
Test::Intf1::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Intf1_ids, iceC_Test_Intf1_ids + 2, s);
}

::std::vector< ::std::string>
Test::Intf1::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Intf1_ids[0], &iceC_Test_Intf1_ids[2]);
}

const ::std::string&
Test::Intf1::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Intf1::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Test::Intf1";
    return typeId;
#else
    return iceC_Test_Intf1_ids[1];
#endif
}

/// \cond INTERNAL
bool
Test::Intf1::_iceD_isa(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->isa(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_reason(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->reason(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_autorelease(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->autorelease(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_classForCoder(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->classForCoder(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_copy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->copy(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_dealloc(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->dealloc(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_description(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->description(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_hash(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->hash(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_init(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->init(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_isProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->isProxy(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_mutableCopy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->mutableCopy(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_release(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->release(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_retain(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->retain(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_retainCount(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->retainCount(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_self(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->self(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_superclass(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->superclass(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf1::_iceD_zone(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->zone(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Intf1_all[] =
{
    "autorelease",
    "classForCoder",
    "copy",
    "dealloc",
    "description",
    "hash",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "init",
    "isProxy",
    "isa",
    "mutableCopy",
    "reason",
    "release",
    "retain",
    "retainCount",
    "self",
    "superclass",
    "zone"
};

}

/// \cond INTERNAL
bool
Test::Intf1::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Intf1_all, iceC_Test_Intf1_all + 21, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Intf1_all)
    {
        case 0:
        {
            return _iceD_autorelease(in, current);
        }
        case 1:
        {
            return _iceD_classForCoder(in, current);
        }
        case 2:
        {
            return _iceD_copy(in, current);
        }
        case 3:
        {
            return _iceD_dealloc(in, current);
        }
        case 4:
        {
            return _iceD_description(in, current);
        }
        case 5:
        {
            return _iceD_hash(in, current);
        }
        case 6:
        {
            return _iceD_ice_id(in, current);
        }
        case 7:
        {
            return _iceD_ice_ids(in, current);
        }
        case 8:
        {
            return _iceD_ice_isA(in, current);
        }
        case 9:
        {
            return _iceD_ice_ping(in, current);
        }
        case 10:
        {
            return _iceD_init(in, current);
        }
        case 11:
        {
            return _iceD_isProxy(in, current);
        }
        case 12:
        {
            return _iceD_isa(in, current);
        }
        case 13:
        {
            return _iceD_mutableCopy(in, current);
        }
        case 14:
        {
            return _iceD_reason(in, current);
        }
        case 15:
        {
            return _iceD_release(in, current);
        }
        case 16:
        {
            return _iceD_retain(in, current);
        }
        case 17:
        {
            return _iceD_retainCount(in, current);
        }
        case 18:
        {
            return _iceD_self(in, current);
        }
        case 19:
        {
            return _iceD_superclass(in, current);
        }
        case 20:
        {
            return _iceD_zone(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::Intf1::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Intf1, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Intf1::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Intf1, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(Intf1Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = Intf1Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Intf1::ice_staticId(), v);
    }
}
/// \endcond

Test::Intf2::~Intf2()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Intf2* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_Intf2_ids[2] =
{
    "::Ice::Object",
    "::Test::Intf2"
};

}

bool
Test::Intf2::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Intf2_ids, iceC_Test_Intf2_ids + 2, s);
}

::std::vector< ::std::string>
Test::Intf2::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Intf2_ids[0], &iceC_Test_Intf2_ids[2]);
}

const ::std::string&
Test::Intf2::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Intf2::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Test::Intf2";
    return typeId;
#else
    return iceC_Test_Intf2_ids[1];
#endif
}

/// \cond INTERNAL
bool
Test::Intf2::_iceD_isa(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->isa(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_reason(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->reason(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_autorelease(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->autorelease(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_classForCoder(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->classForCoder(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_copy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->copy(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_dealloc(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->dealloc(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_description(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->description(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_hash(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->hash(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_init(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->init(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_isProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->isProxy(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_mutableCopy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->mutableCopy(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_release(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->release(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_retain(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->retain(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_retainCount(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->retainCount(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_self(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->self(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_superclass(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->superclass(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Intf2::_iceD_zone(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->zone(iceP_a, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Intf2_all[] =
{
    "autorelease",
    "classForCoder",
    "copy",
    "dealloc",
    "description",
    "hash",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "init",
    "isProxy",
    "isa",
    "mutableCopy",
    "reason",
    "release",
    "retain",
    "retainCount",
    "self",
    "superclass",
    "zone"
};

}

/// \cond INTERNAL
bool
Test::Intf2::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Intf2_all, iceC_Test_Intf2_all + 21, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Intf2_all)
    {
        case 0:
        {
            return _iceD_autorelease(in, current);
        }
        case 1:
        {
            return _iceD_classForCoder(in, current);
        }
        case 2:
        {
            return _iceD_copy(in, current);
        }
        case 3:
        {
            return _iceD_dealloc(in, current);
        }
        case 4:
        {
            return _iceD_description(in, current);
        }
        case 5:
        {
            return _iceD_hash(in, current);
        }
        case 6:
        {
            return _iceD_ice_id(in, current);
        }
        case 7:
        {
            return _iceD_ice_ids(in, current);
        }
        case 8:
        {
            return _iceD_ice_isA(in, current);
        }
        case 9:
        {
            return _iceD_ice_ping(in, current);
        }
        case 10:
        {
            return _iceD_init(in, current);
        }
        case 11:
        {
            return _iceD_isProxy(in, current);
        }
        case 12:
        {
            return _iceD_isa(in, current);
        }
        case 13:
        {
            return _iceD_mutableCopy(in, current);
        }
        case 14:
        {
            return _iceD_reason(in, current);
        }
        case 15:
        {
            return _iceD_release(in, current);
        }
        case 16:
        {
            return _iceD_retain(in, current);
        }
        case 17:
        {
            return _iceD_retainCount(in, current);
        }
        case 18:
        {
            return _iceD_self(in, current);
        }
        case 19:
        {
            return _iceD_superclass(in, current);
        }
        case 20:
        {
            return _iceD_zone(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::Intf2::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Intf2, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Intf2::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Intf2, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(Intf2Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = Intf2Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Intf2::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
