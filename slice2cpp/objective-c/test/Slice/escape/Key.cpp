//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Key.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_and_break_ids[2] =
{
    "::Ice::Object",
    "::and::break"
};
const ::std::string iceC_and_break_ops[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_and_break_case_name = "case";

const ::std::string iceC_and_char_ids[2] =
{
    "::Ice::Object",
    "::and::char"
};
const ::std::string iceC_and_char_ops[] =
{
    "explicit",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_and_char_explicit_name = "explicit";

const ::std::string iceC_and_switch_ids[2] =
{
    "::Ice::Object",
    "::and::switch"
};
const ::std::string iceC_and_switch_ops[] =
{
    "foo",
    "foo2",
    "foo3",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_and_switch_foo_name = "foo";
const ::std::string iceC_and_switch_foo2_name = "foo2";
const ::std::string iceC_and_switch_foo3_name = "foo3";

const ::IceInternal::DefaultValueFactoryInit<::_cpp_and::_cpp_do> iceC_and_do_init("::and::do");

const ::IceInternal::DefaultUserExceptionFactoryInit<::_cpp_and::_cpp_return> iceC_and_return_init("::and::return");

const ::IceInternal::DefaultUserExceptionFactoryInit<::_cpp_and::_cpp_sizeof> iceC_and_sizeof_init("::and::sizeof");

const ::std::string iceC_and_friend_ids[2] =
{
    "::Ice::Object",
    "::and::friend"
};
const ::std::string iceC_and_friend_ops[] =
{
    "goto",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "objc"
};
const ::std::string iceC_and_friend_goto_name = "goto";
const ::std::string iceC_and_friend_objc_name = "objc";

}

_cpp_and::_cpp_return::~_cpp_return()
{
}

const ::std::string&
_cpp_and::_cpp_return::ice_staticId()
{
    static const ::std::string typeId = "::and::return";
    return typeId;
}

_cpp_and::_cpp_sizeof::~_cpp_sizeof()
{
}

const ::std::string&
_cpp_and::_cpp_sizeof::ice_staticId()
{
    static const ::std::string typeId = "::and::sizeof";
    return typeId;
}

bool
_cpp_and::_cpp_break::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_break_ids, iceC_and_break_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::_cpp_break::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_break_ids[0], &iceC_and_break_ids[2]);
}

::std::string
_cpp_and::_cpp_break::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_break::ice_staticId()
{
    static const ::std::string typeId = "::and::break";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceD_case(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_catch;
    istr->readAll(iceP_catch);
    inS.endReadParams();
    int iceP_try;
    this->_cpp_case(iceP_catch, iceP_try, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_try);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_break_ops, iceC_and_break_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_break_ops)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::_cpp_char::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_char_ids, iceC_and_char_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::_cpp_char::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_char_ids[0], &iceC_and_char_ids[2]);
}

::std::string
_cpp_and::_cpp_char::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_char::ice_staticId()
{
    static const ::std::string typeId = "::and::char";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_char::_iceD_explicit(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_explicit(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::_cpp_char::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_char_ops, iceC_and_char_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_char_ops)
    {
        case 0:
        {
            return _iceD_explicit(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::_cpp_switch::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_switch_ids, iceC_and_switch_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::_cpp_switch::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_switch_ids[0], &iceC_and_switch_ids[2]);
}

::std::string
_cpp_and::_cpp_switch::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_switch::ice_staticId()
{
    static const ::std::string typeId = "::and::switch";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_switch::_iceD_foo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<charPrx> iceP_export;
    istr->readAll(iceP_export);
    inS.endReadParams();
    int iceP_volatile;
    this->foo(::std::move(iceP_export), iceP_volatile, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_volatile);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::_cpp_switch::_iceD_foo2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<charPrx> iceP_export;
    int iceP_YES;
    istr->readAll(iceP_export, iceP_YES);
    inS.endReadParams();
    int iceP_nil;
    this->foo2(::std::move(iceP_export), iceP_YES, iceP_nil, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_nil);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::_cpp_switch::_iceD_foo3(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<charPrx> iceP_export;
    istr->readAll(iceP_export);
    inS.endReadParams();
    int iceP_nil;
    this->foo3(::std::move(iceP_export), iceP_nil, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_nil);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::_cpp_switch::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_switch_ops, iceC_and_switch_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_switch_ops)
    {
        case 0:
        {
            return _iceD_foo(in, current);
        }
        case 1:
        {
            return _iceD_foo2(in, current);
        }
        case 2:
        {
            return _iceD_foo3(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::_cpp_friend::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_friend_ids, iceC_and_friend_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::_cpp_friend::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_friend_ids[0], &iceC_and_friend_ids[2]);
}

::std::string
_cpp_and::_cpp_friend::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_friend::ice_staticId()
{
    static const ::std::string typeId = "::and::friend";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_friend::_iceD_goto(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    _cpp_continue iceP_if;
    _cpp_auto iceP_d;
    _cpp_delete iceP_inline;
    ::std::shared_ptr<::and::do> iceP_mutable;
    ::std::shared_ptr<breakPrx> iceP_namespace;
    ::std::shared_ptr<charPrx> iceP_new;
    ::std::shared_ptr<switchPrx> iceP_not;
    int iceP_or;
    int iceP_protected;
    int iceP_public;
    int iceP_register;
    istr->readAll(iceP_if, iceP_d, iceP_inline, iceP_mutable, iceP_namespace, iceP_new, iceP_not, iceP_or, iceP_protected, iceP_public, iceP_register);
    istr->readPendingValues();
    inS.endReadParams();
    _cpp_auto ret = this->_cpp_goto(iceP_if, ::std::move(iceP_d), ::std::move(iceP_inline), ::std::move(iceP_mutable), ::std::move(iceP_namespace), ::std::move(iceP_new), ::std::move(iceP_not), iceP_or, iceP_protected, iceP_public, iceP_register, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::_cpp_friend::_iceD_objc(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_bycopy;
    int iceP_byref;
    int iceP_id;
    int iceP_IMP;
    int iceP_in;
    int iceP_inout;
    int iceP_nil;
    int iceP_NO;
    int iceP_oneway;
    int iceP_SEL;
    int iceP_super;
    int iceP_YES;
    istr->readAll(iceP_bycopy, iceP_byref, iceP_id, iceP_IMP, iceP_in, iceP_inout, iceP_nil, iceP_NO, iceP_oneway, iceP_SEL, iceP_super, iceP_YES);
    inS.endReadParams();
    this->objc(iceP_bycopy, iceP_byref, iceP_id, iceP_IMP, iceP_in, iceP_inout, iceP_nil, iceP_NO, iceP_oneway, iceP_SEL, iceP_super, iceP_YES, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::_cpp_friend::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_friend_ops, iceC_and_friend_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_friend_ops)
    {
        case 0:
        {
            return _iceD_goto(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_objc(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

_cpp_and::_cpp_do::~_cpp_do()
{
}

const ::std::string&
_cpp_and::_cpp_do::ice_staticId()
{
    static const ::std::string typeId = "::and::do";
    return typeId;
}

/// \cond INTERNAL
void
_cpp_and::breakPrx::_iceI_case(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_catch, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_and_break_case_name);
    outAsync->invoke(iceC_and_break_case_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_catch);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
_cpp_and::breakPrx::_newInstance() const
{
    return ::IceInternal::createProxy<breakPrx>();
}
/// \endcond

const ::std::string&
_cpp_and::breakPrx::ice_staticId()
{
    return _cpp_break::ice_staticId();
}

/// \cond INTERNAL
void
_cpp_and::charPrx::_iceI_explicit(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_and_char_explicit_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
_cpp_and::charPrx::_newInstance() const
{
    return ::IceInternal::createProxy<charPrx>();
}
/// \endcond

const ::std::string&
_cpp_and::charPrx::ice_staticId()
{
    return _cpp_char::ice_staticId();
}

/// \cond INTERNAL
void
_cpp_and::switchPrx::_iceI_foo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::std::shared_ptr<charPrx>& iceP_export, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_and_switch_foo_name);
    outAsync->invoke(iceC_and_switch_foo_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_export);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
_cpp_and::switchPrx::_iceI_foo2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::std::shared_ptr<charPrx>& iceP_export, int iceP_YES, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_and_switch_foo2_name);
    outAsync->invoke(iceC_and_switch_foo2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_export, iceP_YES);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
_cpp_and::switchPrx::_iceI_foo3(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::std::shared_ptr<charPrx>& iceP_export, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_and_switch_foo3_name);
    outAsync->invoke(iceC_and_switch_foo3_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_export);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
_cpp_and::switchPrx::_newInstance() const
{
    return ::IceInternal::createProxy<switchPrx>();
}
/// \endcond

const ::std::string&
_cpp_and::switchPrx::ice_staticId()
{
    return _cpp_switch::ice_staticId();
}

/// \cond INTERNAL
void
_cpp_and::friendPrx::_iceI_goto(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::_cpp_and::_cpp_auto>>& outAsync, _cpp_continue iceP_if, const _cpp_auto& iceP_d, const _cpp_delete& iceP_inline, const ::std::shared_ptr<_cpp_do>& iceP_mutable, const ::std::shared_ptr<breakPrx>& iceP_namespace, const ::std::shared_ptr<charPrx>& iceP_new, const ::std::shared_ptr<switchPrx>& iceP_not, int iceP_or, int iceP_protected, int iceP_public, int iceP_register, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_and_friend_goto_name);
    outAsync->invoke(iceC_and_friend_goto_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_if, iceP_d, iceP_inline, iceP_mutable, iceP_namespace, iceP_new, iceP_not, iceP_or, iceP_protected, iceP_public, iceP_register);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const _cpp_sizeof&)
            {
                throw;
            }
            catch(const _cpp_return&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
_cpp_and::friendPrx::_iceI_objc(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_bycopy, int iceP_byref, int iceP_id, int iceP_IMP, int iceP_in, int iceP_inout, int iceP_nil, int iceP_NO, int iceP_oneway, int iceP_SEL, int iceP_super, int iceP_YES, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_and_friend_objc_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_bycopy, iceP_byref, iceP_id, iceP_IMP, iceP_in, iceP_inout, iceP_nil, iceP_NO, iceP_oneway, iceP_SEL, iceP_super, iceP_YES);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
_cpp_and::friendPrx::_newInstance() const
{
    return ::IceInternal::createProxy<friendPrx>();
}
/// \endcond

const ::std::string&
_cpp_and::friendPrx::ice_staticId()
{
    return _cpp_friend::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_and_break_case_name = "case";

const ::std::string iceC_and_char_explicit_name = "explicit";

const ::std::string iceC_and_switch_foo_name = "foo";

const ::std::string iceC_and_switch_foo2_name = "foo2";

const ::std::string iceC_and_switch_foo3_name = "foo3";

const ::std::string iceC_and_friend_goto_name = "goto";

const ::std::string iceC_and_friend_objc_name = "objc";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::_cpp_and::_cpp_return> iceC_and_return_init("::and::return");

}

_cpp_and::_cpp_return::_cpp_return(::Ice::Int _cpp_signed) :
    ::Ice::UserException(),
    _cpp_signed(_cpp_signed)
{
}
_cpp_and::_cpp_return::~_cpp_return()
{
}

::std::string
_cpp_and::_cpp_return::ice_id() const
{
    return "::and::return";
}

_cpp_and::_cpp_return*
_cpp_and::_cpp_return::ice_clone() const
{
    return new _cpp_return(*this);
}

void
_cpp_and::_cpp_return::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
_cpp_and::_cpp_return::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::and::return", -1, true);
    ::Ice::StreamWriter< _cpp_return, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
_cpp_and::_cpp_return::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< _cpp_return, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::_cpp_and::_cpp_sizeof> iceC_and_sizeof_init("::and::sizeof");

}

_cpp_and::_cpp_sizeof::_cpp_sizeof(::Ice::Int _cpp_signed, ::Ice::Int _cpp_static, ::Ice::Int _cpp_switch) :
    _cpp_return(_cpp_signed),
    _cpp_static(_cpp_static),
    _cpp_switch(_cpp_switch)
{
}
_cpp_and::_cpp_sizeof::~_cpp_sizeof()
{
}

::std::string
_cpp_and::_cpp_sizeof::ice_id() const
{
    return "::and::sizeof";
}

_cpp_and::_cpp_sizeof*
_cpp_and::_cpp_sizeof::ice_clone() const
{
    return new _cpp_sizeof(*this);
}

void
_cpp_and::_cpp_sizeof::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
_cpp_and::_cpp_sizeof::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::and::sizeof", -1, false);
    ::Ice::StreamWriter< _cpp_sizeof, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    _cpp_return::_writeImpl(ostr);
}

void
_cpp_and::_cpp_sizeof::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< _cpp_sizeof, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    _cpp_return::_readImpl(istr);
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(_cpp_break* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< _cpp_break>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new _cpp_break;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::_cpp_and::_cpp_break::_iceI_begin_case(::Ice::Int iceP_catch, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_and_break_case_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_and_break_case_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_and_break_case_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_catch);
        result->endWriteParams();
        result->invoke(iceC_and_break_case_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::_cpp_and::_cpp_break::end_case(::Ice::Int& iceP_try, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_and_break_case_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_try);
    result->_endReadParams();
}

void IceProxy::_cpp_and::_cpp_break::_iceI_end_case(::Ice::Int& iceP_try, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_and_break_case_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_try);
    result->_endReadParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::_cpp_break::_newInstance() const
{
    return new _cpp_break;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::_cpp_break::ice_staticId()
{
    return ::_cpp_and::_cpp_break::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(_cpp_char* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< _cpp_char>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new _cpp_char;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::_cpp_and::_cpp_char::_iceI_begin_explicit(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_and_char_explicit_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_and_char_explicit_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_and_char_explicit_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::_cpp_and::_cpp_char::end_explicit(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_and_char_explicit_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::_cpp_char::_newInstance() const
{
    return new _cpp_char;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::_cpp_char::ice_staticId()
{
    return ::_cpp_and::_cpp_char::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(_cpp_switch* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< _cpp_switch>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new _cpp_switch;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::_cpp_and::_cpp_switch::_iceI_begin_foo(const ::_cpp_and::charPrx& iceP_export, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_and_switch_foo_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_and_switch_foo_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_and_switch_foo_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_export);
        result->endWriteParams();
        result->invoke(iceC_and_switch_foo_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::_cpp_and::_cpp_switch::end_foo(::Ice::Int& iceP_volatile, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_and_switch_foo_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_volatile);
    result->_endReadParams();
}

void IceProxy::_cpp_and::_cpp_switch::_iceI_end_foo(::Ice::Int& iceP_volatile, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_and_switch_foo_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_volatile);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::_cpp_and::_cpp_switch::_iceI_begin_foo2(const ::_cpp_and::charPrx& iceP_export, ::Ice::Int iceP_YES, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_and_switch_foo2_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_and_switch_foo2_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_and_switch_foo2_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_export);
        ostr->write(iceP_YES);
        result->endWriteParams();
        result->invoke(iceC_and_switch_foo2_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::_cpp_and::_cpp_switch::end_foo2(::Ice::Int& iceP_nil, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_and_switch_foo2_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_nil);
    result->_endReadParams();
}

void IceProxy::_cpp_and::_cpp_switch::_iceI_end_foo2(::Ice::Int& iceP_nil, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_and_switch_foo2_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_nil);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::_cpp_and::_cpp_switch::_iceI_begin_foo3(const ::_cpp_and::charPrx& iceP_export, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_and_switch_foo3_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_and_switch_foo3_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_and_switch_foo3_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_export);
        result->endWriteParams();
        result->invoke(iceC_and_switch_foo3_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::_cpp_and::_cpp_switch::end_foo3(::Ice::Int& iceP_nil, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_and_switch_foo3_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_nil);
    result->_endReadParams();
}

void IceProxy::_cpp_and::_cpp_switch::_iceI_end_foo3(::Ice::Int& iceP_nil, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_and_switch_foo3_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_nil);
    result->_endReadParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::_cpp_switch::_newInstance() const
{
    return new _cpp_switch;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::_cpp_switch::ice_staticId()
{
    return ::_cpp_and::_cpp_switch::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(_cpp_friend* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< _cpp_friend>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new _cpp_friend;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::_cpp_and::_cpp_friend::_iceI_begin_goto(::_cpp_and::_cpp_continue iceP_if, const ::_cpp_and::_cpp_auto& iceP_d, const ::_cpp_and::deletePtr& iceP_inline, const ::_cpp_and::doPtr& iceP_mutable, const ::_cpp_and::breakPrx& iceP_namespace, const ::_cpp_and::charPrx& iceP_new, const ::_cpp_and::switchPrx& iceP_not, ::Ice::Int iceP_or, ::Ice::Int iceP_protected, ::Ice::Int iceP_public, ::Ice::Int iceP_register, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_and_friend_goto_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_and_friend_goto_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_and_friend_goto_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_if);
        ostr->write(iceP_d);
        ostr->write(iceP_inline);
        ostr->write(iceP_mutable);
        ostr->write(iceP_namespace);
        ostr->write(iceP_new);
        ostr->write(iceP_not);
        ostr->write(iceP_or);
        ostr->write(iceP_protected);
        ostr->write(iceP_public);
        ostr->write(iceP_register);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_and_friend_goto_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::_cpp_and::_cpp_auto
IceProxy::_cpp_and::_cpp_friend::end_goto(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_and_friend_goto_name);
    ::_cpp_and::_cpp_auto ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::_cpp_and::_cpp_sizeof&)
        {
            throw;
        }
        catch(const ::_cpp_and::_cpp_return&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::_cpp_and::_cpp_friend::_iceI_begin_objc(::Ice::Int iceP_bycopy, ::Ice::Int iceP_byref, ::Ice::Int iceP_id, ::Ice::Int iceP_IMP, ::Ice::Int iceP_in, ::Ice::Int iceP_inout, ::Ice::Int iceP_nil, ::Ice::Int iceP_NO, ::Ice::Int iceP_oneway, ::Ice::Int iceP_SEL, ::Ice::Int iceP_super, ::Ice::Int iceP_YES, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_and_friend_objc_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_and_friend_objc_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_bycopy);
        ostr->write(iceP_byref);
        ostr->write(iceP_id);
        ostr->write(iceP_IMP);
        ostr->write(iceP_in);
        ostr->write(iceP_inout);
        ostr->write(iceP_nil);
        ostr->write(iceP_NO);
        ostr->write(iceP_oneway);
        ostr->write(iceP_SEL);
        ostr->write(iceP_super);
        ostr->write(iceP_YES);
        result->endWriteParams();
        result->invoke(iceC_and_friend_objc_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::_cpp_and::_cpp_friend::end_objc(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_and_friend_objc_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::_cpp_friend::_newInstance() const
{
    return new _cpp_friend;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::_cpp_friend::ice_staticId()
{
    return ::_cpp_and::_cpp_friend::ice_staticId();
}

_cpp_and::_cpp_break::~_cpp_break()
{
}

namespace
{
const ::std::string iceC_and_break_ids[2] =
{
    "::Ice::Object",
    "::and::break"
};

}

bool
_cpp_and::_cpp_break::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_break_ids, iceC_and_break_ids + 2, s);
}

::std::vector< ::std::string>
_cpp_and::_cpp_break::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_break_ids[0], &iceC_and_break_ids[2]);
}

const ::std::string&
_cpp_and::_cpp_break::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_break::ice_staticId()
{
    static const ::std::string typeId = "::and::break";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceD_case(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_catch;
    istr->read(iceP_catch);
    inS.endReadParams();
    ::Ice::Int iceP_try;
    this->_cpp_case(iceP_catch, iceP_try, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_try);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_and_break_all[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_break_all, iceC_and_break_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_break_all)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

_cpp_and::_cpp_char::~_cpp_char()
{
}

namespace
{
const ::std::string iceC_and_char_ids[2] =
{
    "::Ice::Object",
    "::and::char"
};

}

bool
_cpp_and::_cpp_char::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_char_ids, iceC_and_char_ids + 2, s);
}

::std::vector< ::std::string>
_cpp_and::_cpp_char::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_char_ids[0], &iceC_and_char_ids[2]);
}

const ::std::string&
_cpp_and::_cpp_char::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_char::ice_staticId()
{
    static const ::std::string typeId = "::and::char";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_char::_iceD_explicit(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_explicit(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_and_char_all[] =
{
    "explicit",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
_cpp_and::_cpp_char::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_char_all, iceC_and_char_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_char_all)
    {
        case 0:
        {
            return _iceD_explicit(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

_cpp_and::_cpp_switch::~_cpp_switch()
{
}

namespace
{
const ::std::string iceC_and_switch_ids[2] =
{
    "::Ice::Object",
    "::and::switch"
};

}

bool
_cpp_and::_cpp_switch::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_switch_ids, iceC_and_switch_ids + 2, s);
}

::std::vector< ::std::string>
_cpp_and::_cpp_switch::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_switch_ids[0], &iceC_and_switch_ids[2]);
}

const ::std::string&
_cpp_and::_cpp_switch::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_switch::ice_staticId()
{
    static const ::std::string typeId = "::and::switch";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_switch::_iceD_foo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    charPrx iceP_export;
    istr->read(iceP_export);
    inS.endReadParams();
    ::Ice::Int iceP_volatile;
    this->foo(iceP_export, iceP_volatile, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_volatile);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::_cpp_switch::_iceD_foo2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    charPrx iceP_export;
    ::Ice::Int iceP_YES;
    istr->read(iceP_export);
    istr->read(iceP_YES);
    inS.endReadParams();
    ::Ice::Int iceP_nil;
    this->foo2(iceP_export, iceP_YES, iceP_nil, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_nil);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::_cpp_switch::_iceD_foo3(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    charPrx iceP_export;
    istr->read(iceP_export);
    inS.endReadParams();
    ::Ice::Int iceP_nil;
    this->foo3(iceP_export, iceP_nil, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_nil);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_and_switch_all[] =
{
    "foo",
    "foo2",
    "foo3",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
_cpp_and::_cpp_switch::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_switch_all, iceC_and_switch_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_switch_all)
    {
        case 0:
        {
            return _iceD_foo(in, current);
        }
        case 1:
        {
            return _iceD_foo2(in, current);
        }
        case 2:
        {
            return _iceD_foo3(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

_cpp_and::_cpp_friend::~_cpp_friend()
{
}

namespace
{
const ::std::string iceC_and_friend_ids[2] =
{
    "::Ice::Object",
    "::and::friend"
};

}

bool
_cpp_and::_cpp_friend::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_friend_ids, iceC_and_friend_ids + 2, s);
}

::std::vector< ::std::string>
_cpp_and::_cpp_friend::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_friend_ids[0], &iceC_and_friend_ids[2]);
}

const ::std::string&
_cpp_and::_cpp_friend::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_friend::ice_staticId()
{
    static const ::std::string typeId = "::and::friend";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_friend::_iceD_goto(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    _cpp_continue iceP_if;
    _cpp_auto iceP_d;
    deletePtr iceP_inline;
    ::and::doPtr iceP_mutable;
    breakPrx iceP_namespace;
    charPrx iceP_new;
    switchPrx iceP_not;
    ::Ice::Int iceP_or;
    ::Ice::Int iceP_protected;
    ::Ice::Int iceP_public;
    ::Ice::Int iceP_register;
    istr->read(iceP_if);
    istr->read(iceP_d);
    istr->read(iceP_inline);
    istr->read(iceP_mutable);
    istr->read(iceP_namespace);
    istr->read(iceP_new);
    istr->read(iceP_not);
    istr->read(iceP_or);
    istr->read(iceP_protected);
    istr->read(iceP_public);
    istr->read(iceP_register);
    istr->readPendingValues();
    inS.endReadParams();
    _cpp_auto ret = this->_cpp_goto(iceP_if, iceP_d, iceP_inline, iceP_mutable, iceP_namespace, iceP_new, iceP_not, iceP_or, iceP_protected, iceP_public, iceP_register, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::_cpp_friend::_iceD_objc(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_bycopy;
    ::Ice::Int iceP_byref;
    ::Ice::Int iceP_id;
    ::Ice::Int iceP_IMP;
    ::Ice::Int iceP_in;
    ::Ice::Int iceP_inout;
    ::Ice::Int iceP_nil;
    ::Ice::Int iceP_NO;
    ::Ice::Int iceP_oneway;
    ::Ice::Int iceP_SEL;
    ::Ice::Int iceP_super;
    ::Ice::Int iceP_YES;
    istr->read(iceP_bycopy);
    istr->read(iceP_byref);
    istr->read(iceP_id);
    istr->read(iceP_IMP);
    istr->read(iceP_in);
    istr->read(iceP_inout);
    istr->read(iceP_nil);
    istr->read(iceP_NO);
    istr->read(iceP_oneway);
    istr->read(iceP_SEL);
    istr->read(iceP_super);
    istr->read(iceP_YES);
    inS.endReadParams();
    this->objc(iceP_bycopy, iceP_byref, iceP_id, iceP_IMP, iceP_in, iceP_inout, iceP_nil, iceP_NO, iceP_oneway, iceP_SEL, iceP_super, iceP_YES, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_and_friend_all[] =
{
    "goto",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "objc"
};

}

/// \cond INTERNAL
bool
_cpp_and::_cpp_friend::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_friend_all, iceC_and_friend_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_friend_all)
    {
        case 0:
        {
            return _iceD_goto(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_objc(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

_cpp_and::_cpp_do::~_cpp_do()
{
}

/// \cond INTERNAL
::Ice::Value* _cpp_and::upCast(_cpp_do* p) { return p; }

/// \endcond
::Ice::ValuePtr
_cpp_and::_cpp_do::ice_clone() const
{
    ::Ice::Value* p = new _cpp_do(*this);
    return p;
}

std::string
_cpp_and::_cpp_do::ice_id() const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_do::ice_staticId()
{
    static const ::std::string typeId = "::and::do";
    return typeId;
}

/// \cond STREAM
void
_cpp_and::_cpp_do::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< _cpp_do, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
_cpp_and::_cpp_do::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< _cpp_do, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::_cpp_and::_cpp_do> iceC_and_do_init("::and::do");
}

::Ice::ValueFactoryPtr
_cpp_and::_cpp_do::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::_cpp_and::_cpp_do::ice_staticId());
}

/// \cond INTERNAL
void
_cpp_and::_icePatchValuePtr(doPtr& handle, const ::Ice::ValuePtr& v)
{
    handle = doPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(_cpp_do::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
