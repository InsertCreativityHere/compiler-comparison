//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{
    class Default;
    using DefaultPtr = ::std::shared_ptr<Default>;

    class NoDefault;
    using NoDefaultPtr = ::std::shared_ptr<NoDefault>;

}

namespace Test
{

class Default : public ::Ice::Value
{
public:
    /**
     * Default constructor.
     */
    Default() noexcept = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Default(::std::int32_t x, ::std::int32_t y) noexcept :
        x(x),
        y(y)
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(x, y);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    DefaultPtr ice_clone() const { return ::std::static_pointer_cast<Default>(_iceCloneImpl()); }

    ::std::int32_t x;
    ::std::int32_t y;

protected:
    Default(const Default&) = default;

    ::Ice::ValuePtr _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

class NoDefault : public ::Ice::Value
{
public:
    /**
     * Default constructor.
     */
    NoDefault() noexcept = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    NoDefault(::std::int32_t x, ::std::int32_t y) noexcept :
        x(x),
        y(y)
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(x, y);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    NoDefaultPtr ice_clone() const { return ::std::static_pointer_cast<NoDefault>(_iceCloneImpl()); }

    ::std::int32_t x = 10;
    ::std::int32_t y = 10;

protected:
    NoDefault(const NoDefault&) = default;

    ::Ice::ValuePtr _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

using Ice::Tuple::operator<;
using Ice::Tuple::operator<=;
using Ice::Tuple::operator>;
using Ice::Tuple::operator>=;
using Ice::Tuple::operator==;
using Ice::Tuple::operator!=;

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

#include <Ice/PopDisableWarnings.h>
#endif
