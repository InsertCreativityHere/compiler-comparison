//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Key_h__
#define __Key_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace _cpp_and
{

class _cpp_break;
class breakPrx;
class function;
class functionPrx;
class die;
class diePrx;
class echo;
class enddeclare;
class enddeclarePrx;
class _cpp_for;
class forPrx;

}

namespace _cpp_and
{

enum class array : unsigned char
{
    as
};

struct _cpp_xor
{
    int abstract;
    int clone;
    int _cpp_private;
    int _cpp_protected;
    int _cpp_public;
    int _cpp_this;
    int _cpp_throw;
    int use;
    int var;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(abstract, clone, _cpp_private, _cpp_protected, _cpp_public, _cpp_this, _cpp_throw, use, var);
    }
};

using endfor = ::std::vector<array>;

using endforeach = ::std::map<::std::string, array>;

class endif : public ::Ice::UserExceptionHelper<endif, ::Ice::UserException>
{
public:

    virtual ~endif();

    endif(const endif&) = default;

    endif() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    endif(int endswitch) :
        endswitch(endswitch)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(endswitch);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int endswitch;
};

/// \cond INTERNAL
static endif _iceS_endif_init;
/// \endcond

class endwhile : public ::Ice::UserExceptionHelper<endwhile, endif>
{
public:

    virtual ~endwhile();

    endwhile(const endwhile&) = default;

    endwhile() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    endwhile(int endswitch, int eval, int exit) :
        ::Ice::UserExceptionHelper<endwhile, endif>(endswitch),
        eval(eval),
        exit(exit)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(endswitch, eval, exit);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int eval;
    int exit;
};

constexpr int _cpp_or = 0;

constexpr int print = 0;

constexpr int require_once = 0;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace _cpp_and
{

class _cpp_break : public virtual ::Ice::Object
{
public:

    using ProxyType = breakPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_case(int _cpp_catch, int& _cpp_try, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_case(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class function : public virtual ::Ice::Object
{
public:

    using ProxyType = functionPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_continue(int declare, int _cpp_default, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_continue(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class die : public virtual ::Ice::Object
{
public:

    using ProxyType = diePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_do(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_do(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class enddeclare : public virtual die,
                   public virtual function
{
public:

    using ProxyType = enddeclarePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class _cpp_for : public virtual ::Ice::Object
{
public:

    using ProxyType = forPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual array foreach(::std::shared_ptr<breakPrx> _cpp_if, ::std::shared_ptr<::and::echo> global, ::std::shared_ptr<functionPrx> include, ::std::shared_ptr<diePrx> _cpp_return, ::std::shared_ptr<enddeclarePrx> list, int _cpp_new, int _cpp_static, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_foreach(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace _cpp_and
{

class echo : public ::Ice::ValueHelper<echo, ::Ice::Value>
{
public:

    virtual ~echo();

    echo() = default;

    echo(const echo&) = default;
    echo(echo&&) = default;
    echo& operator=(const echo&) = default;
    echo& operator=(echo&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    echo(int _cpp_if, int _cpp_else, const ::std::shared_ptr<::_cpp_and::diePrx>& elseif, int empty) :
        _cpp_if(_cpp_if),
        _cpp_else(_cpp_else),
        elseif(elseif),
        empty(empty)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const ::std::shared_ptr<::_cpp_and::diePrx>&, const int&> ice_tuple() const
    {
        return std::tie(_cpp_if, _cpp_else, elseif, empty);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_if;
    int _cpp_else;
    ::std::shared_ptr<::_cpp_and::diePrx> elseif;
    int empty;
};

/// \cond INTERNAL
static echo _iceS_echo_init;
/// \endcond

}

namespace _cpp_and
{

class breakPrx : public virtual ::Ice::Proxy<breakPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_case(int _cpp_catch, int& _cpp_try, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _cpp_try = _makePromiseOutgoing<int>(true, this, &breakPrx::_iceI_case, _cpp_catch, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto caseAsync(int _cpp_catch, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &breakPrx::_iceI_case, _cpp_catch, context);
    }

    ::std::function<void()>
    caseAsync(int _cpp_catch,
              ::std::function<void(int)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::breakPrx::_iceI_case, _cpp_catch, context);
    }

    /// \cond INTERNAL
    void _iceI_case(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    breakPrx() = default;
    friend ::std::shared_ptr<breakPrx> IceInternal::createProxy<breakPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class functionPrx : public virtual ::Ice::Proxy<functionPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_continue(int declare, int _cpp_default, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &functionPrx::_iceI_continue, declare, _cpp_default, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto continueAsync(int declare, int _cpp_default, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &functionPrx::_iceI_continue, declare, _cpp_default, context);
    }

    ::std::function<void()>
    continueAsync(int declare, int _cpp_default,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::functionPrx::_iceI_continue, declare, _cpp_default, context);
    }

    /// \cond INTERNAL
    void _iceI_continue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    functionPrx() = default;
    friend ::std::shared_ptr<functionPrx> IceInternal::createProxy<functionPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class diePrx : public virtual ::Ice::Proxy<diePrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_do(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &diePrx::_iceI_do, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto doAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &diePrx::_iceI_do, context);
    }

    ::std::function<void()>
    doAsync(::std::function<void()> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::diePrx::_iceI_do, context);
    }

    /// \cond INTERNAL
    void _iceI_do(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    diePrx() = default;
    friend ::std::shared_ptr<diePrx> IceInternal::createProxy<diePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class enddeclarePrx : public virtual ::Ice::Proxy<enddeclarePrx, diePrx, functionPrx>
{
public:

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    enddeclarePrx() = default;
    friend ::std::shared_ptr<enddeclarePrx> IceInternal::createProxy<enddeclarePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class forPrx : public virtual ::Ice::Proxy<forPrx, ::Ice::ObjectPrx>
{
public:

    array foreach(const ::std::shared_ptr<breakPrx>& _cpp_if, const ::std::shared_ptr<echo>& global, const ::std::shared_ptr<functionPrx>& include, const ::std::shared_ptr<diePrx>& _cpp_return, const ::std::shared_ptr<enddeclarePrx>& list, int _cpp_new, int _cpp_static, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::_cpp_and::array>(true, this, &forPrx::_iceI_foreach, _cpp_if, global, include, _cpp_return, list, _cpp_new, _cpp_static, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto foreachAsync(const ::std::shared_ptr<breakPrx>& _cpp_if, const ::std::shared_ptr<echo>& global, const ::std::shared_ptr<functionPrx>& include, const ::std::shared_ptr<diePrx>& _cpp_return, const ::std::shared_ptr<enddeclarePrx>& list, int _cpp_new, int _cpp_static, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::_cpp_and::array>>().get_future())
    {
        return _makePromiseOutgoing<::_cpp_and::array, P>(false, this, &forPrx::_iceI_foreach, _cpp_if, global, include, _cpp_return, list, _cpp_new, _cpp_static, context);
    }

    ::std::function<void()>
    foreachAsync(const ::std::shared_ptr<breakPrx>& _cpp_if, const ::std::shared_ptr<echo>& global, const ::std::shared_ptr<functionPrx>& include, const ::std::shared_ptr<diePrx>& _cpp_return, const ::std::shared_ptr<enddeclarePrx>& list, int _cpp_new, int _cpp_static,
                 ::std::function<void(::_cpp_and::array)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::_cpp_and::array>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::forPrx::_iceI_foreach, _cpp_if, global, include, _cpp_return, list, _cpp_new, _cpp_static, context);
    }

    /// \cond INTERNAL
    void _iceI_foreach(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::_cpp_and::array>>&, const ::std::shared_ptr<breakPrx>&, const ::std::shared_ptr<echo>&, const ::std::shared_ptr<functionPrx>&, const ::std::shared_ptr<diePrx>&, const ::std::shared_ptr<enddeclarePrx>&, int, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    forPrx() = default;
    friend ::std::shared_ptr<forPrx> IceInternal::createProxy<forPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::_cpp_and::array>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::_cpp_and::_cpp_xor>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 36;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::_cpp_and::_cpp_xor, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_xor& v)
    {
        istr->readAll(v.abstract, v.clone, v._cpp_private, v._cpp_protected, v._cpp_public, v._cpp_this, v._cpp_throw, v.use, v.var);
    }
};

template<typename S>
struct StreamReader<::_cpp_and::echo, S>
{
    static void read(S* istr, ::_cpp_and::echo& v)
    {
        istr->readAll(v._cpp_if, v._cpp_else, v.elseif, v.empty);
    }
};

template<typename S>
struct StreamReader<::_cpp_and::endif, S>
{
    static void read(S* istr, ::_cpp_and::endif& v)
    {
        istr->readAll(v.endswitch);
    }
};

template<typename S>
struct StreamWriter<::_cpp_and::endwhile, S>
{
    static void write(S* ostr, const ::_cpp_and::endwhile& v)
    {
        ostr->writeAll(v.eval, v.exit);
    }
};

template<typename S>
struct StreamReader<::_cpp_and::endwhile, S>
{
    static void read(S* istr, ::_cpp_and::endwhile& v)
    {
        istr->readAll(v.eval, v.exit);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace _cpp_and
{

using breakPtr = ::std::shared_ptr<_cpp_break>;
using breakPrxPtr = ::std::shared_ptr<breakPrx>;

using functionPtr = ::std::shared_ptr<function>;
using functionPrxPtr = ::std::shared_ptr<functionPrx>;

using diePtr = ::std::shared_ptr<die>;
using diePrxPtr = ::std::shared_ptr<diePrx>;

using echoPtr = ::std::shared_ptr<echo>;

using enddeclarePtr = ::std::shared_ptr<enddeclare>;
using enddeclarePrxPtr = ::std::shared_ptr<enddeclarePrx>;

using forPtr = ::std::shared_ptr<_cpp_for>;
using forPrxPtr = ::std::shared_ptr<forPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace _cpp_and
{

class _cpp_break;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_break>&);
::IceProxy::Ice::Object* upCast(_cpp_break*);
/// \endcond

class function;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< function>&);
::IceProxy::Ice::Object* upCast(function*);
/// \endcond

class die;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< die>&);
::IceProxy::Ice::Object* upCast(die*);
/// \endcond

class enddeclare;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< enddeclare>&);
::IceProxy::Ice::Object* upCast(enddeclare*);
/// \endcond

class _cpp_for;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_for>&);
::IceProxy::Ice::Object* upCast(_cpp_for*);
/// \endcond

}

}

namespace _cpp_and
{
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_break> breakPrx;
typedef breakPrx breakPrxPtr;

class _cpp_break;
using breakPtr = ::Ice::SharedPtr< _cpp_break>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::function> functionPrx;
typedef functionPrx functionPrxPtr;

class function;
using functionPtr = ::Ice::SharedPtr< function>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::die> diePrx;
typedef diePrx diePrxPtr;

class die;
using diePtr = ::Ice::SharedPtr< die>;

class echo;
using echoPtr = ::Ice::SharedPtr<echo>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::enddeclare> enddeclarePrx;
typedef enddeclarePrx enddeclarePrxPtr;

class enddeclare;
using enddeclarePtr = ::Ice::SharedPtr< enddeclare>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_for> forPrx;
typedef forPrx forPrxPtr;

class _cpp_for;
using forPtr = ::Ice::SharedPtr< _cpp_for>;

}

namespace _cpp_and
{

enum array
{
    as
};

struct _cpp_xor
{
    ::Ice::Int abstract;
    ::Ice::Int clone;
    ::Ice::Int _cpp_private;
    ::Ice::Int _cpp_protected;
    ::Ice::Int _cpp_public;
    ::Ice::Int _cpp_this;
    ::Ice::Int _cpp_throw;
    ::Ice::Int use;
    ::Ice::Int var;

    bool operator==(const _cpp_xor& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(abstract != rhs_.abstract)
        {
            return false;
        }
        if(clone != rhs_.clone)
        {
            return false;
        }
        if(_cpp_private != rhs_._cpp_private)
        {
            return false;
        }
        if(_cpp_protected != rhs_._cpp_protected)
        {
            return false;
        }
        if(_cpp_public != rhs_._cpp_public)
        {
            return false;
        }
        if(_cpp_this != rhs_._cpp_this)
        {
            return false;
        }
        if(_cpp_throw != rhs_._cpp_throw)
        {
            return false;
        }
        if(use != rhs_.use)
        {
            return false;
        }
        if(var != rhs_.var)
        {
            return false;
        }
        return true;
    }

    bool operator<(const _cpp_xor& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(abstract < rhs_.abstract)
        {
            return true;
        }
        else if(rhs_.abstract < abstract)
        {
            return false;
        }
        if(clone < rhs_.clone)
        {
            return true;
        }
        else if(rhs_.clone < clone)
        {
            return false;
        }
        if(_cpp_private < rhs_._cpp_private)
        {
            return true;
        }
        else if(rhs_._cpp_private < _cpp_private)
        {
            return false;
        }
        if(_cpp_protected < rhs_._cpp_protected)
        {
            return true;
        }
        else if(rhs_._cpp_protected < _cpp_protected)
        {
            return false;
        }
        if(_cpp_public < rhs_._cpp_public)
        {
            return true;
        }
        else if(rhs_._cpp_public < _cpp_public)
        {
            return false;
        }
        if(_cpp_this < rhs_._cpp_this)
        {
            return true;
        }
        else if(rhs_._cpp_this < _cpp_this)
        {
            return false;
        }
        if(_cpp_throw < rhs_._cpp_throw)
        {
            return true;
        }
        else if(rhs_._cpp_throw < _cpp_throw)
        {
            return false;
        }
        if(use < rhs_.use)
        {
            return true;
        }
        else if(rhs_.use < use)
        {
            return false;
        }
        if(var < rhs_.var)
        {
            return true;
        }
        else if(rhs_.var < var)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const _cpp_xor& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const _cpp_xor& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const _cpp_xor& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const _cpp_xor& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector<array> endfor;

typedef ::std::map< ::std::string, array> endforeach;

class endif : public ::Ice::UserException
{
public:

    endif() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit endif(::Ice::Int endswitch);
    endif(const endif&) = default;
    virtual ~endif();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual endif* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int endswitch;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static endif _iceS_endif_init;
/// \endcond

class endwhile : public endif
{
public:

    endwhile() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    endwhile(::Ice::Int endswitch, ::Ice::Int eval, ::Ice::Int exit);
    endwhile(const endwhile&) = default;
    virtual ~endwhile();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual endwhile* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int eval;
    ::Ice::Int exit;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

const ::Ice::Int _cpp_or = 0;

const ::Ice::Int print = 0;

const ::Ice::Int require_once = 0;

}

namespace _cpp_and
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::_cpp_break::begin_case.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_break_case.
 */
class Callback_break_case_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_break_case_Base> Callback_break_casePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::function::begin_continue.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_function_continue.
 */
class Callback_function_continue_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_function_continue_Base> Callback_function_continuePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::die::begin_do.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_die_do.
 */
class Callback_die_do_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_die_do_Base> Callback_die_doPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::_cpp_for::begin_foreach.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_for_foreach.
 */
class Callback_for_foreach_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_for_foreach_Base> Callback_for_foreachPtr;

}

namespace IceProxy
{

namespace _cpp_and
{

class _cpp_break : public virtual ::Ice::Proxy<_cpp_break, ::IceProxy::Ice::Object>
{
public:

    void _cpp_case(::Ice::Int _cpp_catch, ::Ice::Int& _cpp_try, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_case(_cpp_try, _iceI_begin_case(_cpp_catch, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_case(_cpp_catch, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(_cpp_catch, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(_cpp_catch, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::_cpp_and::Callback_break_casePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(_cpp_catch, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::Context& context, const ::_cpp_and::Callback_break_casePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(_cpp_catch, context, cb, cookie);
    }

    void end_case(::Ice::Int& _cpp_try, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_case(::Ice::Int& iceP_try, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_case(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class function : public virtual ::Ice::Proxy<function, ::IceProxy::Ice::Object>
{
public:

    void _cpp_continue(::Ice::Int declare, ::Ice::Int _cpp_default, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_continue(_iceI_begin_continue(declare, _cpp_default, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_continue(::Ice::Int declare, ::Ice::Int _cpp_default, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_continue(declare, _cpp_default, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_continue(::Ice::Int declare, ::Ice::Int _cpp_default, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_continue(declare, _cpp_default, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_continue(::Ice::Int declare, ::Ice::Int _cpp_default, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_continue(declare, _cpp_default, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_continue(::Ice::Int declare, ::Ice::Int _cpp_default, const ::_cpp_and::Callback_function_continuePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_continue(declare, _cpp_default, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_continue(::Ice::Int declare, ::Ice::Int _cpp_default, const ::Ice::Context& context, const ::_cpp_and::Callback_function_continuePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_continue(declare, _cpp_default, context, cb, cookie);
    }

    void end_continue(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_continue(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class die : public virtual ::Ice::Proxy<die, ::IceProxy::Ice::Object>
{
public:

    void _cpp_do(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_do(_iceI_begin_do(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_do(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_do(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_do(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_do(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_do(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_do(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_do(const ::_cpp_and::Callback_die_doPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_do(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_do(const ::Ice::Context& context, const ::_cpp_and::Callback_die_doPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_do(context, cb, cookie);
    }

    void end_do(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_do(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

/// \cond INTERNAL
class _enddeclareBase : public virtual ::IceProxy::_cpp_and::die, 
                        public virtual ::IceProxy::_cpp_and::function
{
public:

    virtual ~_enddeclareBase();

protected:

    virtual Object* _newInstance() const = 0;
};
/// \endcond

class enddeclare : public virtual ::Ice::Proxy<enddeclare, _enddeclareBase>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class _cpp_for : public virtual ::Ice::Proxy<_cpp_for, ::IceProxy::Ice::Object>
{
public:

    ::_cpp_and::array foreach(const ::_cpp_and::breakPrx& _cpp_if, const ::_cpp_and::echoPtr& global, const ::_cpp_and::functionPrx& include, const ::_cpp_and::diePrx& _cpp_return, const ::_cpp_and::enddeclarePrx& list, ::Ice::Int _cpp_new, ::Ice::Int _cpp_static, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_foreach(_iceI_begin_foreach(_cpp_if, global, include, _cpp_return, list, _cpp_new, _cpp_static, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_foreach(const ::_cpp_and::breakPrx& _cpp_if, const ::_cpp_and::echoPtr& global, const ::_cpp_and::functionPrx& include, const ::_cpp_and::diePrx& _cpp_return, const ::_cpp_and::enddeclarePrx& list, ::Ice::Int _cpp_new, ::Ice::Int _cpp_static, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_foreach(_cpp_if, global, include, _cpp_return, list, _cpp_new, _cpp_static, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_foreach(const ::_cpp_and::breakPrx& _cpp_if, const ::_cpp_and::echoPtr& global, const ::_cpp_and::functionPrx& include, const ::_cpp_and::diePrx& _cpp_return, const ::_cpp_and::enddeclarePrx& list, ::Ice::Int _cpp_new, ::Ice::Int _cpp_static, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foreach(_cpp_if, global, include, _cpp_return, list, _cpp_new, _cpp_static, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_foreach(const ::_cpp_and::breakPrx& _cpp_if, const ::_cpp_and::echoPtr& global, const ::_cpp_and::functionPrx& include, const ::_cpp_and::diePrx& _cpp_return, const ::_cpp_and::enddeclarePrx& list, ::Ice::Int _cpp_new, ::Ice::Int _cpp_static, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foreach(_cpp_if, global, include, _cpp_return, list, _cpp_new, _cpp_static, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_foreach(const ::_cpp_and::breakPrx& _cpp_if, const ::_cpp_and::echoPtr& global, const ::_cpp_and::functionPrx& include, const ::_cpp_and::diePrx& _cpp_return, const ::_cpp_and::enddeclarePrx& list, ::Ice::Int _cpp_new, ::Ice::Int _cpp_static, const ::_cpp_and::Callback_for_foreachPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foreach(_cpp_if, global, include, _cpp_return, list, _cpp_new, _cpp_static, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_foreach(const ::_cpp_and::breakPrx& _cpp_if, const ::_cpp_and::echoPtr& global, const ::_cpp_and::functionPrx& include, const ::_cpp_and::diePrx& _cpp_return, const ::_cpp_and::enddeclarePrx& list, ::Ice::Int _cpp_new, ::Ice::Int _cpp_static, const ::Ice::Context& context, const ::_cpp_and::Callback_for_foreachPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foreach(_cpp_if, global, include, _cpp_return, list, _cpp_new, _cpp_static, context, cb, cookie);
    }

    ::_cpp_and::array end_foreach(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_foreach(const ::_cpp_and::breakPrx&, const ::_cpp_and::echoPtr&, const ::_cpp_and::functionPrx&, const ::_cpp_and::diePrx&, const ::_cpp_and::enddeclarePrx&, ::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace _cpp_and
{

class _cpp_break : public virtual ::Ice::Object
{
public:

    typedef breakPrx ProxyType;

    virtual ~_cpp_break();
    _cpp_break() = default;
    _cpp_break(const _cpp_break&) = default;
    _cpp_break& operator=(const _cpp_break&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_case(::Ice::Int _cpp_catch, ::Ice::Int& _cpp_try, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_case(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class function : public virtual ::Ice::Object
{
public:

    typedef functionPrx ProxyType;

    virtual ~function();
    function() = default;
    function(const function&) = default;
    function& operator=(const function&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_continue(::Ice::Int declare, ::Ice::Int _cpp_default, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_continue(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class die : public virtual ::Ice::Object
{
public:

    typedef diePrx ProxyType;

    virtual ~die();
    die() = default;
    die(const die&) = default;
    die& operator=(const die&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_do(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_do(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class enddeclare : public virtual die,
                   public virtual function
{
public:

    typedef enddeclarePrx ProxyType;

    virtual ~enddeclare();
    enddeclare() = default;
    enddeclare(const enddeclare&) = default;
    enddeclare& operator=(const enddeclare&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class _cpp_for : public virtual ::Ice::Object
{
public:

    typedef forPrx ProxyType;

    virtual ~_cpp_for();
    _cpp_for() = default;
    _cpp_for(const _cpp_for&) = default;
    _cpp_for& operator=(const _cpp_for&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual array foreach(const breakPrx& _cpp_if, const echoPtr& global, const functionPrx& include, const diePrx& _cpp_return, const enddeclarePrx& list, ::Ice::Int _cpp_new, ::Ice::Int _cpp_static, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_foreach(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

namespace _cpp_and
{

class echo : public ::Ice::ValueHelper<echo, ::Ice::Value>
{
public:

    virtual ~echo();

    echo() = default;

    echo(const echo&) = default;
    echo(echo&&) = default;
    echo& operator=(const echo&) = default;
    echo& operator=(echo&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    echo(::Ice::Int _cpp_if, ::Ice::Int _cpp_else, const ::_cpp_and::diePrx& elseif, ::Ice::Int empty) :
        _cpp_if(_cpp_if),
        _cpp_else(_cpp_else),
        elseif(elseif),
        empty(empty)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Int&, const ::Ice::Int&, const ::_cpp_and::diePrx&, const ::Ice::Int&> ice_tuple() const
    {
        return std::tie(_cpp_if, _cpp_else, elseif, empty);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Ice::Int _cpp_if;
    ::Ice::Int _cpp_else;
    ::_cpp_and::diePrx elseif;
    ::Ice::Int empty;
};

/// \cond INTERNAL
static echo _iceS_echo_init;
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::_cpp_and::array>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::_cpp_and::_cpp_xor>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 36;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::_cpp_and::_cpp_xor, S>
{
    static void write(S* ostr, const ::_cpp_and::_cpp_xor& v)
    {
        ostr->write(v.abstract);
        ostr->write(v.clone);
        ostr->write(v._cpp_private);
        ostr->write(v._cpp_protected);
        ostr->write(v._cpp_public);
        ostr->write(v._cpp_this);
        ostr->write(v._cpp_throw);
        ostr->write(v.use);
        ostr->write(v.var);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::_cpp_xor, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_xor& v)
    {
        istr->read(v.abstract);
        istr->read(v.clone);
        istr->read(v._cpp_private);
        istr->read(v._cpp_protected);
        istr->read(v._cpp_public);
        istr->read(v._cpp_this);
        istr->read(v._cpp_throw);
        istr->read(v.use);
        istr->read(v.var);
    }
};

template<typename S>
struct StreamWriter< ::_cpp_and::echo, S>
{
    static void write(S* ostr, const ::_cpp_and::echo& v)
    {
        ostr->write(v._cpp_if);
        ostr->write(v._cpp_else);
        ostr->write(v.elseif);
        ostr->write(v.empty);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::echo, S>
{
    static void read(S* istr, ::_cpp_and::echo& v)
    {
        istr->read(v._cpp_if);
        istr->read(v._cpp_else);
        istr->read(v.elseif);
        istr->read(v.empty);
    }
};

template<>
struct StreamableTraits< ::_cpp_and::endif>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::_cpp_and::endif, S>
{
    static void write(S* ostr, const ::_cpp_and::endif& v)
    {
        ostr->write(v.endswitch);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::endif, S>
{
    static void read(S* istr, ::_cpp_and::endif& v)
    {
        istr->read(v.endswitch);
    }
};

template<>
struct StreamableTraits< ::_cpp_and::endwhile>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::_cpp_and::endwhile, S>
{
    static void write(S* ostr, const ::_cpp_and::endwhile& v)
    {
        ostr->write(v.eval);
        ostr->write(v.exit);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::endwhile, S>
{
    static void read(S* istr, ::_cpp_and::endwhile& v)
    {
        istr->read(v.eval);
        istr->read(v.exit);
    }
};

}
/// \endcond

namespace _cpp_and
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::_cpp_break::begin_case.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_break_case.
 */
template<class T>
class CallbackNC_break_case : public Callback_break_case_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_break_case(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        breakPrx proxy = breakPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_try;
        try
        {
            proxy->end_case(iceP_try, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_try);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::break::begin_case.
 */
template<class T> Callback_break_casePtr
newCallback_break_case(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_case<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::break::begin_case.
 */
template<class T> Callback_break_casePtr
newCallback_break_case(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_case<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::_cpp_break::begin_case.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_break_case.
 */
template<class T, typename CT>
class Callback_break_case : public Callback_break_case_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_break_case(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        breakPrx proxy = breakPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_try;
        try
        {
            proxy->end_case(iceP_try, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_try, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::break::begin_case.
 */
template<class T, typename CT> Callback_break_casePtr
newCallback_break_case(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_case<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::break::begin_case.
 */
template<class T, typename CT> Callback_break_casePtr
newCallback_break_case(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_case<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::function::begin_continue.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_function_continue.
 */
template<class T>
class CallbackNC_function_continue : public Callback_function_continue_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_function_continue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::function::begin_continue.
 */
template<class T> Callback_function_continuePtr
newCallback_function_continue(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_function_continue<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::function::begin_continue.
 */
template<class T> Callback_function_continuePtr
newCallback_function_continue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_function_continue<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::function::begin_continue.
 */
template<class T> Callback_function_continuePtr
newCallback_function_continue(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_function_continue<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::function::begin_continue.
 */
template<class T> Callback_function_continuePtr
newCallback_function_continue(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_function_continue<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::function::begin_continue.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_function_continue.
 */
template<class T, typename CT>
class Callback_function_continue : public Callback_function_continue_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_function_continue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::function::begin_continue.
 */
template<class T, typename CT> Callback_function_continuePtr
newCallback_function_continue(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_function_continue<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::function::begin_continue.
 */
template<class T, typename CT> Callback_function_continuePtr
newCallback_function_continue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_function_continue<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::function::begin_continue.
 */
template<class T, typename CT> Callback_function_continuePtr
newCallback_function_continue(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_function_continue<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::function::begin_continue.
 */
template<class T, typename CT> Callback_function_continuePtr
newCallback_function_continue(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_function_continue<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::die::begin_do.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_die_do.
 */
template<class T>
class CallbackNC_die_do : public Callback_die_do_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_die_do(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::die::begin_do.
 */
template<class T> Callback_die_doPtr
newCallback_die_do(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_die_do<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::die::begin_do.
 */
template<class T> Callback_die_doPtr
newCallback_die_do(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_die_do<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::die::begin_do.
 */
template<class T> Callback_die_doPtr
newCallback_die_do(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_die_do<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::die::begin_do.
 */
template<class T> Callback_die_doPtr
newCallback_die_do(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_die_do<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::die::begin_do.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_die_do.
 */
template<class T, typename CT>
class Callback_die_do : public Callback_die_do_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_die_do(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::die::begin_do.
 */
template<class T, typename CT> Callback_die_doPtr
newCallback_die_do(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_die_do<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::die::begin_do.
 */
template<class T, typename CT> Callback_die_doPtr
newCallback_die_do(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_die_do<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::die::begin_do.
 */
template<class T, typename CT> Callback_die_doPtr
newCallback_die_do(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_die_do<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::die::begin_do.
 */
template<class T, typename CT> Callback_die_doPtr
newCallback_die_do(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_die_do<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::_cpp_for::begin_foreach.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_for_foreach.
 */
template<class T>
class CallbackNC_for_foreach : public Callback_for_foreach_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(array);

    CallbackNC_for_foreach(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        forPrx proxy = forPrx::uncheckedCast(result->getProxy());
        array ret;
        try
        {
            ret = proxy->end_foreach(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::for::begin_foreach.
 */
template<class T> Callback_for_foreachPtr
newCallback_for_foreach(const IceUtil::Handle<T>& instance, void (T::*cb)(array), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_for_foreach<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::for::begin_foreach.
 */
template<class T> Callback_for_foreachPtr
newCallback_for_foreach(T* instance, void (T::*cb)(array), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_for_foreach<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::_cpp_for::begin_foreach.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_for_foreach.
 */
template<class T, typename CT>
class Callback_for_foreach : public Callback_for_foreach_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(array, const CT&);

    Callback_for_foreach(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        forPrx proxy = forPrx::uncheckedCast(result->getProxy());
        array ret;
        try
        {
            ret = proxy->end_foreach(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::for::begin_foreach.
 */
template<class T, typename CT> Callback_for_foreachPtr
newCallback_for_foreach(const IceUtil::Handle<T>& instance, void (T::*cb)(array, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_for_foreach<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::for::begin_foreach.
 */
template<class T, typename CT> Callback_for_foreachPtr
newCallback_for_foreach(T* instance, void (T::*cb)(array, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_for_foreach<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
