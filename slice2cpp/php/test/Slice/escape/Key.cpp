// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Key.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

std::ostream&
and::operator<<(std::ostream& os, array value)
{
    switch (value)
    {
        case array::as:
            return os << "as";
        default:
            return os << static_cast<std::int32_t>(value);
    }
}

namespace
{
    const IceInternal::FactoryTableInit iceC_factoryTableInit;
    const IceInternal::DefaultValueFactoryInit<::and::echo> iceC_and_echo_init("::and::echo");
    const IceInternal::DefaultUserExceptionFactoryInit<::and::endif> iceC_and_endif_init("::and::endif");
    const IceInternal::DefaultUserExceptionFactoryInit<::and::endwhile> iceC_and_endwhile_init("::and::endwhile");
}

void
and::breakPrx::case(std::int32_t iceP_catch, std::int32_t& iceP_try, const Ice::Context& context) const
{
    iceP_try = IceInternal::makePromiseOutgoing<std::int32_t>(true, this, &breakPrx::_iceI_case, iceP_catch, context).get();
}

std::future<std::int32_t>
and::breakPrx::caseAsync(std::int32_t iceP_catch, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::int32_t>(false, this, &breakPrx::_iceI_case, iceP_catch, context);
}

std::function<void()>
and::breakPrx::caseAsync(std::int32_t iceP_catch, std::function<void(std::int32_t)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::int32_t>(std::move(response), std::move(exception), std::move(sent), this, &and::breakPrx::_iceI_case, iceP_catch, context);
}

void
and::breakPrx::_iceI_case(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int32_t>>& outAsync, std::int32_t iceP_catch, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "case";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_catch);
        },
        nullptr);
}

and::breakPrx::~breakPrx() = default;

const char*
and::breakPrx::ice_staticId() noexcept
{
    return "::and::break";
}

void
and::functionPrx::continue(std::int32_t iceP_declare, std::int32_t iceP_default, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &functionPrx::_iceI_continue, iceP_declare, iceP_default, context).get();
}

std::future<void>
and::functionPrx::continueAsync(std::int32_t iceP_declare, std::int32_t iceP_default, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &functionPrx::_iceI_continue, iceP_declare, iceP_default, context);
}

std::function<void()>
and::functionPrx::continueAsync(std::int32_t iceP_declare, std::int32_t iceP_default, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &and::functionPrx::_iceI_continue, iceP_declare, iceP_default, context);
}

void
and::functionPrx::_iceI_continue(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, std::int32_t iceP_declare, std::int32_t iceP_default, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "continue";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_declare, iceP_default);
        },
        nullptr);
}

and::functionPrx::~functionPrx() = default;

const char*
and::functionPrx::ice_staticId() noexcept
{
    return "::and::function";
}

void
and::diePrx::do(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &diePrx::_iceI_do, context).get();
}

std::future<void>
and::diePrx::doAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &diePrx::_iceI_do, context);
}

std::function<void()>
and::diePrx::doAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &and::diePrx::_iceI_do, context);
}

void
and::diePrx::_iceI_do(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "do";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

and::diePrx::~diePrx() = default;

const char*
and::diePrx::ice_staticId() noexcept
{
    return "::and::die";
}

and::enddeclarePrx::~enddeclarePrx() = default;

const char*
and::enddeclarePrx::ice_staticId() noexcept
{
    return "::and::enddeclare";
}

::and::array
and::forPrx::foreach(const std::optional<breakPrx>& iceP_if, const echoPtr& iceP_global, const std::optional<functionPrx>& iceP_include, const std::optional<diePrx>& iceP_return, const std::optional<enddeclarePrx>& iceP_list, std::int32_t iceP_new, std::int32_t iceP_static, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<array>(true, this, &forPrx::_iceI_foreach, iceP_if, iceP_global, iceP_include, iceP_return, iceP_list, iceP_new, iceP_static, context).get();
}

std::future<::and::array>
and::forPrx::foreachAsync(const std::optional<breakPrx>& iceP_if, const echoPtr& iceP_global, const std::optional<functionPrx>& iceP_include, const std::optional<diePrx>& iceP_return, const std::optional<enddeclarePrx>& iceP_list, std::int32_t iceP_new, std::int32_t iceP_static, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<array>(false, this, &forPrx::_iceI_foreach, iceP_if, iceP_global, iceP_include, iceP_return, iceP_list, iceP_new, iceP_static, context);
}

std::function<void()>
and::forPrx::foreachAsync(const std::optional<breakPrx>& iceP_if, const echoPtr& iceP_global, const std::optional<functionPrx>& iceP_include, const std::optional<diePrx>& iceP_return, const std::optional<enddeclarePrx>& iceP_list, std::int32_t iceP_new, std::int32_t iceP_static, std::function<void(::and::array)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<array>(std::move(response), std::move(exception), std::move(sent), this, &and::forPrx::_iceI_foreach, iceP_if, iceP_global, iceP_include, iceP_return, iceP_list, iceP_new, iceP_static, context);
}

void
and::forPrx::_iceI_foreach(const std::shared_ptr<IceInternal::OutgoingAsyncT<array>>& outAsync, const std::optional<breakPrx>& iceP_if, const echoPtr& iceP_global, const std::optional<functionPrx>& iceP_include, const std::optional<diePrx>& iceP_return, const std::optional<enddeclarePrx>& iceP_list, std::int32_t iceP_new, std::int32_t iceP_static, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "foreach";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_if, iceP_global, iceP_include, iceP_return, iceP_list, iceP_new, iceP_static);
            ostr->writePendingValues();
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const endwhile&)
            {
                throw;
            }
            catch (const endif&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

and::forPrx::~forPrx() = default;

const char*
and::forPrx::ice_staticId() noexcept
{
    return "::and::for";
}

void
and::xor::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "abstract = ", this->abstract);
    Ice::print(os << ", clone = ", this->clone);
    Ice::print(os << ", private = ", this->private);
    Ice::print(os << ", protected = ", this->protected);
    Ice::print(os << ", public = ", this->public);
    Ice::print(os << ", this = ", this->this);
    Ice::print(os << ", throw = ", this->throw);
    Ice::print(os << ", use = ", this->use);
    Ice::print(os << ", var = ", this->var);
}

std::ostream&
and::operator<<(std::ostream& os, const ::and::xor& value)
{
    os << "and::xor{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
and::echo::ice_staticId() noexcept
{
    return "::and::echo";
}

const char*
and::echo::ice_id() const noexcept
{
    return ice_staticId();
}

void
and::echo::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "if = ", this->if);
    Ice::print(os << ", else = ", this->else);
    Ice::print(os << ", elseif = ", this->elseif);
    Ice::print(os << ", empty = ", this->empty);
}

Ice::ValuePtr
and::echo::_iceCloneImpl() const
{
    return CloneEnabler<echo>::clone(*this);
}

void
and::echo::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->if, this->else, this->elseif, this->empty);
    ostr->endSlice();
}

void
and::echo::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->if, this->else, this->elseif, this->empty);
    istr->endSlice();
}

void
and::endif::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "endswitch = ", this->endswitch);
}

const char*
and::endif::ice_staticId() noexcept
{
    return "::and::endif";
}

const char*
and::endif::ice_id() const noexcept
{
    return ice_staticId();
}

void
and::endif::ice_throw() const
{
    throw *this;
}

void
and::endif::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->endswitch);
    ostr->endSlice();
}

void
and::endif::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->endswitch);
    istr->endSlice();
}

void
and::endwhile::ice_printFields(std::ostream& os) const
{
    endif::ice_printFields(os);
    Ice::print(os << ", eval = ", this->eval);
    Ice::print(os << ", exit = ", this->exit);
}

const char*
and::endwhile::ice_staticId() noexcept
{
    return "::and::endwhile";
}

const char*
and::endwhile::ice_id() const noexcept
{
    return ice_staticId();
}

void
and::endwhile::ice_throw() const
{
    throw *this;
}

void
and::endwhile::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->eval, this->exit);
    ostr->endSlice();
    endif::_writeImpl(ostr);
}

void
and::endwhile::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->eval, this->exit);
    istr->endSlice();
    endif::_readImpl(istr);
}

std::vector<std::string>
and::break::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::and::break"};
    return allTypeIds;
}

std::string
and::break::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
and::break::ice_staticId() noexcept
{
    return "::and::break";
}

/// \cond INTERNAL
void
and::break::_iceD_case(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::int32_t iceP_catch;
    istr->readAll(iceP_catch);
    istr->endEncapsulation();
    std::int32_t iceP_try;
    this->case(iceP_catch, iceP_try, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_try);
        },
        request.current()));
}
/// \endcond

void
and::break::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"case", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_case(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
and::function::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::and::function"};
    return allTypeIds;
}

std::string
and::function::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
and::function::ice_staticId() noexcept
{
    return "::and::function";
}

/// \cond INTERNAL
void
and::function::_iceD_continue(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::int32_t iceP_declare;
    std::int32_t iceP_default;
    istr->readAll(iceP_declare, iceP_default);
    istr->endEncapsulation();
    this->continue(iceP_declare, iceP_default, request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

void
and::function::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"continue", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_continue(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
and::die::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::and::die"};
    return allTypeIds;
}

std::string
and::die::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
and::die::ice_staticId() noexcept
{
    return "::and::die";
}

/// \cond INTERNAL
void
and::die::_iceD_do(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->do(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

void
and::die::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"do", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_do(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
and::enddeclare::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::and::die", "::and::enddeclare", "::and::function"};
    return allTypeIds;
}

std::string
and::enddeclare::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
and::enddeclare::ice_staticId() noexcept
{
    return "::and::enddeclare";
}

void
and::enddeclare::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 6> allOperations{"continue", "do", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_continue(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_do(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
and::for::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::and::for"};
    return allTypeIds;
}

std::string
and::for::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
and::for::ice_staticId() noexcept
{
    return "::and::for";
}

/// \cond INTERNAL
void
and::for::_iceD_foreach(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<breakPrx> iceP_if;
    echoPtr iceP_global;
    std::optional<functionPrx> iceP_include;
    std::optional<diePrx> iceP_return;
    std::optional<enddeclarePrx> iceP_list;
    std::int32_t iceP_new;
    std::int32_t iceP_static;
    istr->readAll(iceP_if, iceP_global, iceP_include, iceP_return, iceP_list, iceP_new, iceP_static);
    istr->readPendingValues();
    istr->endEncapsulation();
    const array ret = this->foreach(std::move(iceP_if), std::move(iceP_global), std::move(iceP_include), std::move(iceP_return), std::move(iceP_list), iceP_new, iceP_static, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

void
and::for::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"foreach", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_foreach(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
