//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Key.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_and_break_ids[2] =
{
    "::Ice::Object",
    "::and::break"
};
const ::std::string iceC_and_break_ops[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_and_break_case_name = "case";

const ::std::string iceC_and_function_ids[2] =
{
    "::Ice::Object",
    "::and::function"
};
const ::std::string iceC_and_function_ops[] =
{
    "continue",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_and_function_continue_name = "continue";

const ::std::string iceC_and_die_ids[2] =
{
    "::Ice::Object",
    "::and::die"
};
const ::std::string iceC_and_die_ops[] =
{
    "do",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_and_die_do_name = "do";

const ::IceInternal::DefaultValueFactoryInit<::_cpp_and::echo> iceC_and_echo_init("::and::echo");

const ::std::string iceC_and_enddeclare_ids[4] =
{
    "::Ice::Object",
    "::and::die",
    "::and::enddeclare",
    "::and::function"
};
const ::std::string iceC_and_enddeclare_ops[] =
{
    "continue",
    "do",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

const ::IceInternal::DefaultUserExceptionFactoryInit<::_cpp_and::endif> iceC_and_endif_init("::and::endif");

const ::IceInternal::DefaultUserExceptionFactoryInit<::_cpp_and::endwhile> iceC_and_endwhile_init("::and::endwhile");

}

_cpp_and::endif::~endif()
{
}

const ::std::string&
_cpp_and::endif::ice_staticId()
{
    static const ::std::string typeId = "::and::endif";
    return typeId;
}

_cpp_and::endwhile::~endwhile()
{
}

const ::std::string&
_cpp_and::endwhile::ice_staticId()
{
    static const ::std::string typeId = "::and::endwhile";
    return typeId;
}

bool
_cpp_and::_cpp_break::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_break_ids, iceC_and_break_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::_cpp_break::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_break_ids[0], &iceC_and_break_ids[2]);
}

::std::string
_cpp_and::_cpp_break::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_break::ice_staticId()
{
    static const ::std::string typeId = "::and::break";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceD_case(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_catch;
    istr->readAll(iceP_catch);
    inS.endReadParams();
    int iceP_try;
    this->_cpp_case(iceP_catch, iceP_try, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_try);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_break_ops, iceC_and_break_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_break_ops)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::function::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_function_ids, iceC_and_function_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::function::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_function_ids[0], &iceC_and_function_ids[2]);
}

::std::string
_cpp_and::function::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::function::ice_staticId()
{
    static const ::std::string typeId = "::and::function";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::function::_iceD_continue(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_declare;
    int iceP_default;
    istr->readAll(iceP_declare, iceP_default);
    inS.endReadParams();
    this->_cpp_continue(iceP_declare, iceP_default, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::function::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_function_ops, iceC_and_function_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_function_ops)
    {
        case 0:
        {
            return _iceD_continue(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::die::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_die_ids, iceC_and_die_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::die::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_die_ids[0], &iceC_and_die_ids[2]);
}

::std::string
_cpp_and::die::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::die::ice_staticId()
{
    static const ::std::string typeId = "::and::die";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::die::_iceD_do(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_do(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::die::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_die_ops, iceC_and_die_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_die_ops)
    {
        case 0:
        {
            return _iceD_do(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::enddeclare::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_enddeclare_ids, iceC_and_enddeclare_ids + 4, s);
}

::std::vector<::std::string>
_cpp_and::enddeclare::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_enddeclare_ids[0], &iceC_and_enddeclare_ids[4]);
}

::std::string
_cpp_and::enddeclare::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::enddeclare::ice_staticId()
{
    static const ::std::string typeId = "::and::enddeclare";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::enddeclare::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_enddeclare_ops, iceC_and_enddeclare_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_enddeclare_ops)
    {
        case 0:
        {
            return _iceD_continue(in, current);
        }
        case 1:
        {
            return _iceD_do(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

_cpp_and::echo::~echo()
{
}

const ::std::string&
_cpp_and::echo::ice_staticId()
{
    static const ::std::string typeId = "::and::echo";
    return typeId;
}

/// \cond INTERNAL
void
_cpp_and::breakPrx::_iceI_case(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_catch, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_and_break_case_name);
    outAsync->invoke(iceC_and_break_case_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_catch);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
_cpp_and::breakPrx::_newInstance() const
{
    return ::IceInternal::createProxy<breakPrx>();
}
/// \endcond

const ::std::string&
_cpp_and::breakPrx::ice_staticId()
{
    return _cpp_break::ice_staticId();
}

/// \cond INTERNAL
void
_cpp_and::functionPrx::_iceI_continue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_declare, int iceP_default, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_and_function_continue_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_declare, iceP_default);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
_cpp_and::functionPrx::_newInstance() const
{
    return ::IceInternal::createProxy<functionPrx>();
}
/// \endcond

const ::std::string&
_cpp_and::functionPrx::ice_staticId()
{
    return function::ice_staticId();
}

/// \cond INTERNAL
void
_cpp_and::diePrx::_iceI_do(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_and_die_do_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
_cpp_and::diePrx::_newInstance() const
{
    return ::IceInternal::createProxy<diePrx>();
}
/// \endcond

const ::std::string&
_cpp_and::diePrx::ice_staticId()
{
    return die::ice_staticId();
}

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
_cpp_and::enddeclarePrx::_newInstance() const
{
    return ::IceInternal::createProxy<enddeclarePrx>();
}
/// \endcond

const ::std::string&
_cpp_and::enddeclarePrx::ice_staticId()
{
    return enddeclare::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_and_break_case_name = "case";

const ::std::string iceC_and_function_continue_name = "continue";

const ::std::string iceC_and_die_do_name = "do";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::_cpp_and::endif> iceC_and_endif_init("::and::endif");

}

_cpp_and::endif::endif(::Ice::Int endswitch) :
    ::Ice::UserException(),
    endswitch(endswitch)
{
}

#ifdef ICE_CPP11_COMPILER
_cpp_and::endif::~endif()
{
}
#else
_cpp_and::endif::~endif() throw()
{
}
#endif

::std::string
_cpp_and::endif::ice_id() const
{
    return "::and::endif";
}

_cpp_and::endif*
_cpp_and::endif::ice_clone() const
{
    return new endif(*this);
}

void
_cpp_and::endif::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
_cpp_and::endif::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::and::endif", -1, true);
    ::Ice::StreamWriter< endif, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
_cpp_and::endif::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< endif, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::_cpp_and::endwhile> iceC_and_endwhile_init("::and::endwhile");

}

_cpp_and::endwhile::endwhile(::Ice::Int endswitch, ::Ice::Int eval, ::Ice::Int exit) :
    endif(endswitch),
    eval(eval),
    exit(exit)
{
}

#ifdef ICE_CPP11_COMPILER
_cpp_and::endwhile::~endwhile()
{
}
#else
_cpp_and::endwhile::~endwhile() throw()
{
}
#endif

::std::string
_cpp_and::endwhile::ice_id() const
{
    return "::and::endwhile";
}

_cpp_and::endwhile*
_cpp_and::endwhile::ice_clone() const
{
    return new endwhile(*this);
}

void
_cpp_and::endwhile::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
_cpp_and::endwhile::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::and::endwhile", -1, false);
    ::Ice::StreamWriter< endwhile, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    endif::_writeImpl(ostr);
}

void
_cpp_and::endwhile::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< endwhile, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    endif::_readImpl(istr);
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(_cpp_break* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< _cpp_break>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new _cpp_break;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::_cpp_and::_cpp_break::_iceI_begin_case(::Ice::Int iceP_catch, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_and_break_case_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_and_break_case_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_and_break_case_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_catch);
        result->endWriteParams();
        result->invoke(iceC_and_break_case_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::_cpp_and::_cpp_break::end_case(::Ice::Int& iceP_try, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_and_break_case_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_try);
    result->_endReadParams();
}

void IceProxy::_cpp_and::_cpp_break::_iceI_end_case(::Ice::Int& iceP_try, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_and_break_case_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_try);
    result->_endReadParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::_cpp_break::_newInstance() const
{
    return new _cpp_break;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::_cpp_break::ice_staticId()
{
    return ::_cpp_and::_cpp_break::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(function* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< function>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new function;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::_cpp_and::function::_iceI_begin_continue(::Ice::Int iceP_declare, ::Ice::Int iceP_default, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_and_function_continue_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_and_function_continue_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_declare);
        ostr->write(iceP_default);
        result->endWriteParams();
        result->invoke(iceC_and_function_continue_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::_cpp_and::function::end_continue(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_and_function_continue_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::function::_newInstance() const
{
    return new function;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::function::ice_staticId()
{
    return ::_cpp_and::function::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(die* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< die>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new die;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::_cpp_and::die::_iceI_begin_do(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_and_die_do_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_and_die_do_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_and_die_do_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::_cpp_and::die::end_do(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_and_die_do_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::die::_newInstance() const
{
    return new die;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::die::ice_staticId()
{
    return ::_cpp_and::die::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(echo* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< echo>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new echo;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::echo::_newInstance() const
{
    return new echo;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::echo::ice_staticId()
{
    return ::_cpp_and::echo::ice_staticId();
}

::IceProxy::_cpp_and::_enddeclareBase::~_enddeclareBase()
{
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(enddeclare* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< enddeclare>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new enddeclare;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::enddeclare::_newInstance() const
{
    return new enddeclare;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::enddeclare::ice_staticId()
{
    return ::_cpp_and::enddeclare::ice_staticId();
}

_cpp_and::_cpp_break::~_cpp_break()
{
}

/// \cond INTERNAL
::Ice::Object* _cpp_and::upCast(_cpp_break* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_and_break_ids[2] =
{
    "::Ice::Object",
    "::and::break"
};

}

bool
_cpp_and::_cpp_break::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_break_ids, iceC_and_break_ids + 2, s);
}

::std::vector< ::std::string>
_cpp_and::_cpp_break::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_break_ids[0], &iceC_and_break_ids[2]);
}

const ::std::string&
_cpp_and::_cpp_break::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_break::ice_staticId()
{
    static const ::std::string typeId = "::and::break";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceD_case(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_catch;
    istr->read(iceP_catch);
    inS.endReadParams();
    ::Ice::Int iceP_try;
    this->_cpp_case(iceP_catch, iceP_try, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_try);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_and_break_all[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_break_all, iceC_and_break_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_break_all)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
_cpp_and::_cpp_break::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< _cpp_break, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
_cpp_and::_cpp_break::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< _cpp_break, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
_cpp_and::_icePatchObjectPtr(breakPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = breakPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(_cpp_break::ice_staticId(), v);
    }
}
/// \endcond

_cpp_and::function::~function()
{
}

/// \cond INTERNAL
::Ice::Object* _cpp_and::upCast(function* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_and_function_ids[2] =
{
    "::Ice::Object",
    "::and::function"
};

}

bool
_cpp_and::function::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_function_ids, iceC_and_function_ids + 2, s);
}

::std::vector< ::std::string>
_cpp_and::function::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_function_ids[0], &iceC_and_function_ids[2]);
}

const ::std::string&
_cpp_and::function::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::function::ice_staticId()
{
    static const ::std::string typeId = "::and::function";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::function::_iceD_continue(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_declare;
    ::Ice::Int iceP_default;
    istr->read(iceP_declare);
    istr->read(iceP_default);
    inS.endReadParams();
    this->_cpp_continue(iceP_declare, iceP_default, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_and_function_all[] =
{
    "continue",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
_cpp_and::function::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_function_all, iceC_and_function_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_function_all)
    {
        case 0:
        {
            return _iceD_continue(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
_cpp_and::function::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< function, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
_cpp_and::function::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< function, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
_cpp_and::_icePatchObjectPtr(functionPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = functionPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(function::ice_staticId(), v);
    }
}
/// \endcond

_cpp_and::die::~die()
{
}

/// \cond INTERNAL
::Ice::Object* _cpp_and::upCast(die* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_and_die_ids[2] =
{
    "::Ice::Object",
    "::and::die"
};

}

bool
_cpp_and::die::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_die_ids, iceC_and_die_ids + 2, s);
}

::std::vector< ::std::string>
_cpp_and::die::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_die_ids[0], &iceC_and_die_ids[2]);
}

const ::std::string&
_cpp_and::die::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::die::ice_staticId()
{
    static const ::std::string typeId = "::and::die";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::die::_iceD_do(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_do(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_and_die_all[] =
{
    "do",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
_cpp_and::die::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_die_all, iceC_and_die_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_die_all)
    {
        case 0:
        {
            return _iceD_do(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
_cpp_and::die::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< die, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
_cpp_and::die::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< die, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
_cpp_and::_icePatchObjectPtr(diePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = diePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(die::ice_staticId(), v);
    }
}
/// \endcond

_cpp_and::echo::~echo()
{
}

/// \cond INTERNAL
::Ice::Object* _cpp_and::upCast(echo* p) { return p; }

/// \endcond
::Ice::ObjectPtr
_cpp_and::echo::ice_clone() const
{
    ::Ice::Object* p = new echo(*this);
    return p;
}

namespace
{
const ::std::string iceC_and_echo_ids[2] =
{
    "::Ice::Object",
    "::and::echo"
};

}

bool
_cpp_and::echo::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_echo_ids, iceC_and_echo_ids + 2, s);
}

::std::vector< ::std::string>
_cpp_and::echo::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_echo_ids[0], &iceC_and_echo_ids[2]);
}

const ::std::string&
_cpp_and::echo::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::echo::ice_staticId()
{
    static const ::std::string typeId = "::and::echo";
    return typeId;
}

/// \cond STREAM
void
_cpp_and::echo::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< echo, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
_cpp_and::echo::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< echo, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::_cpp_and::echo> iceC_and_echo_init("::and::echo");
}

::Ice::ValueFactoryPtr
_cpp_and::echo::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::_cpp_and::echo::ice_staticId());
}

/// \cond INTERNAL
void
_cpp_and::_icePatchObjectPtr(echoPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = echoPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(echo::ice_staticId(), v);
    }
}
/// \endcond

_cpp_and::enddeclare::~enddeclare()
{
}

/// \cond INTERNAL
::Ice::Object* _cpp_and::upCast(enddeclare* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_and_enddeclare_ids[4] =
{
    "::Ice::Object",
    "::and::die",
    "::and::enddeclare",
    "::and::function"
};

}

bool
_cpp_and::enddeclare::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_enddeclare_ids, iceC_and_enddeclare_ids + 4, s);
}

::std::vector< ::std::string>
_cpp_and::enddeclare::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_enddeclare_ids[0], &iceC_and_enddeclare_ids[4]);
}

const ::std::string&
_cpp_and::enddeclare::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::enddeclare::ice_staticId()
{
    static const ::std::string typeId = "::and::enddeclare";
    return typeId;
}

namespace
{
const ::std::string iceC_and_enddeclare_all[] =
{
    "continue",
    "do",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
_cpp_and::enddeclare::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_enddeclare_all, iceC_and_enddeclare_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_enddeclare_all)
    {
        case 0:
        {
            return _iceD_continue(in, current);
        }
        case 1:
        {
            return _iceD_do(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
_cpp_and::enddeclare::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< enddeclare, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
_cpp_and::enddeclare::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< enddeclare, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
_cpp_and::_icePatchObjectPtr(enddeclarePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = enddeclarePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(enddeclare::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
