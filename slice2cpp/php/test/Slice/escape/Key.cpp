//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Key.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_and_break_ids[2] =
{
    "::Ice::Object",
    "::and::break"
};
const ::std::string iceC_and_break_ops[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_and_break_case_name = "case";

const ::std::string iceC_and_function_ids[2] =
{
    "::Ice::Object",
    "::and::function"
};
const ::std::string iceC_and_function_ops[] =
{
    "continue",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_and_function_continue_name = "continue";

const ::std::string iceC_and_die_ids[2] =
{
    "::Ice::Object",
    "::and::die"
};
const ::std::string iceC_and_die_ops[] =
{
    "do",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_and_die_do_name = "do";

const ::IceInternal::DefaultValueFactoryInit<::_cpp_and::echo> iceC_and_echo_init("::and::echo");

const ::std::string iceC_and_enddeclare_ids[4] =
{
    "::Ice::Object",
    "::and::die",
    "::and::enddeclare",
    "::and::function"
};
const ::std::string iceC_and_enddeclare_ops[] =
{
    "continue",
    "do",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

const ::IceInternal::DefaultUserExceptionFactoryInit<::_cpp_and::endif> iceC_and_endif_init("::and::endif");

const ::IceInternal::DefaultUserExceptionFactoryInit<::_cpp_and::endwhile> iceC_and_endwhile_init("::and::endwhile");

const ::std::string iceC_and_for_ids[2] =
{
    "::Ice::Object",
    "::and::for"
};
const ::std::string iceC_and_for_ops[] =
{
    "foreach",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_and_for_foreach_name = "foreach";

}

_cpp_and::endif::~endif()
{
}

const ::std::string&
_cpp_and::endif::ice_staticId()
{
    static const ::std::string typeId = "::and::endif";
    return typeId;
}

_cpp_and::endwhile::~endwhile()
{
}

const ::std::string&
_cpp_and::endwhile::ice_staticId()
{
    static const ::std::string typeId = "::and::endwhile";
    return typeId;
}

bool
_cpp_and::_cpp_break::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_break_ids, iceC_and_break_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::_cpp_break::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_break_ids[0], &iceC_and_break_ids[2]);
}

::std::string
_cpp_and::_cpp_break::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_break::ice_staticId()
{
    static const ::std::string typeId = "::_cpp_and::_cpp_break";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceD_case(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_catch;
    istr->readAll(iceP_catch);
    inS.endReadParams();
    int iceP_try;
    this->_cpp_case(iceP_catch, iceP_try, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_try);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_break_ops, iceC_and_break_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_break_ops)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::function::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_function_ids, iceC_and_function_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::function::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_function_ids[0], &iceC_and_function_ids[2]);
}

::std::string
_cpp_and::function::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::function::ice_staticId()
{
    static const ::std::string typeId = "::_cpp_and::function";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::function::_iceD_continue(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_declare;
    int iceP_default;
    istr->readAll(iceP_declare, iceP_default);
    inS.endReadParams();
    this->_cpp_continue(iceP_declare, iceP_default, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::function::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_function_ops, iceC_and_function_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_function_ops)
    {
        case 0:
        {
            return _iceD_continue(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::die::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_die_ids, iceC_and_die_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::die::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_die_ids[0], &iceC_and_die_ids[2]);
}

::std::string
_cpp_and::die::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::die::ice_staticId()
{
    static const ::std::string typeId = "::_cpp_and::die";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::die::_iceD_do(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_do(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::die::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_die_ops, iceC_and_die_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_die_ops)
    {
        case 0:
        {
            return _iceD_do(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::enddeclare::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_enddeclare_ids, iceC_and_enddeclare_ids + 4, s);
}

::std::vector<::std::string>
_cpp_and::enddeclare::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_enddeclare_ids[0], &iceC_and_enddeclare_ids[4]);
}

::std::string
_cpp_and::enddeclare::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::enddeclare::ice_staticId()
{
    static const ::std::string typeId = "::_cpp_and::enddeclare";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::enddeclare::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_enddeclare_ops, iceC_and_enddeclare_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_enddeclare_ops)
    {
        case 0:
        {
            return _iceD_continue(in, current);
        }
        case 1:
        {
            return _iceD_do(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::_cpp_for::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_for_ids, iceC_and_for_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::_cpp_for::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_for_ids[0], &iceC_and_for_ids[2]);
}

::std::string
_cpp_and::_cpp_for::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_for::ice_staticId()
{
    static const ::std::string typeId = "::_cpp_and::_cpp_for";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_for::_iceD_foreach(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<breakPrx> iceP_if;
    ::std::shared_ptr<::and::echo> iceP_global;
    ::std::shared_ptr<functionPrx> iceP_include;
    ::std::shared_ptr<diePrx> iceP_return;
    ::std::shared_ptr<enddeclarePrx> iceP_list;
    int iceP_new;
    int iceP_static;
    istr->readAll(iceP_if, iceP_global, iceP_include, iceP_return, iceP_list, iceP_new, iceP_static);
    istr->readPendingValues();
    inS.endReadParams();
    array ret = this->foreach(::std::move(iceP_if), ::std::move(iceP_global), ::std::move(iceP_include), ::std::move(iceP_return), ::std::move(iceP_list), iceP_new, iceP_static, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::_cpp_for::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_for_ops, iceC_and_for_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_for_ops)
    {
        case 0:
        {
            return _iceD_foreach(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

_cpp_and::echo::~echo()
{
}

const ::std::string&
_cpp_and::echo::ice_staticId()
{
    static const ::std::string typeId = "::and::echo";
    return typeId;
}

/// \cond INTERNAL
void
_cpp_and::breakPrx::_iceI_case(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_catch, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_and_break_case_name);
    outAsync->invoke(iceC_and_break_case_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_catch);
        },
        nullptr);
}
/// \endcond

const ::std::string&
_cpp_and::breakPrx::ice_staticId()
{
    return _cpp_break::ice_staticId();
}

/// \cond INTERNAL
void
_cpp_and::functionPrx::_iceI_continue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_declare, int iceP_default, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_and_function_continue_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_declare, iceP_default);
        },
        nullptr);
}
/// \endcond

const ::std::string&
_cpp_and::functionPrx::ice_staticId()
{
    return function::ice_staticId();
}

/// \cond INTERNAL
void
_cpp_and::diePrx::_iceI_do(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_and_die_do_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
_cpp_and::diePrx::ice_staticId()
{
    return die::ice_staticId();
}

const ::std::string&
_cpp_and::enddeclarePrx::ice_staticId()
{
    return enddeclare::ice_staticId();
}

/// \cond INTERNAL
void
_cpp_and::forPrx::_iceI_foreach(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::_cpp_and::array>>& outAsync, const ::std::shared_ptr<breakPrx>& iceP_if, const ::std::shared_ptr<echo>& iceP_global, const ::std::shared_ptr<functionPrx>& iceP_include, const ::std::shared_ptr<diePrx>& iceP_return, const ::std::shared_ptr<enddeclarePrx>& iceP_list, int iceP_new, int iceP_static, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_and_for_foreach_name);
    outAsync->invoke(iceC_and_for_foreach_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_if, iceP_global, iceP_include, iceP_return, iceP_list, iceP_new, iceP_static);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const endwhile&)
            {
                throw;
            }
            catch(const endif&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

const ::std::string&
_cpp_and::forPrx::ice_staticId()
{
    return _cpp_for::ice_staticId();
}

namespace Ice
{
}
