//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_Test_Empty_ids[2] =
{
    "::Ice::Object",
    "::Test::Empty"
};
const ::std::string iceC_Test_Empty_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

const ::std::string iceC_Test_A_ids[2] =
{
    "::Ice::Object",
    "::Test::A"
};
const ::std::string iceC_Test_A_ops[] =
{
    "callA",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_A_callA_name = "callA";

const ::std::string iceC_Test_B_ids[3] =
{
    "::Ice::Object",
    "::Test::A",
    "::Test::B"
};
const ::std::string iceC_Test_B_ops[] =
{
    "callA",
    "callB",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_B_callB_name = "callB";

const ::std::string iceC_Test_C_ids[3] =
{
    "::Ice::Object",
    "::Test::A",
    "::Test::C"
};
const ::std::string iceC_Test_C_ops[] =
{
    "callA",
    "callC",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_C_callC_name = "callC";

const ::std::string iceC_Test_D_ids[5] =
{
    "::Ice::Object",
    "::Test::A",
    "::Test::B",
    "::Test::C",
    "::Test::D"
};
const ::std::string iceC_Test_D_ops[] =
{
    "callA",
    "callB",
    "callC",
    "callD",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_D_callD_name = "callD";

const ::std::string iceC_Test_E_ids[2] =
{
    "::Ice::Object",
    "::Test::E"
};
const ::std::string iceC_Test_E_ops[] =
{
    "callE",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_E_callE_name = "callE";

const ::std::string iceC_Test_F_ids[3] =
{
    "::Ice::Object",
    "::Test::E",
    "::Test::F"
};
const ::std::string iceC_Test_F_ops[] =
{
    "callE",
    "callF",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_F_callF_name = "callF";

const ::std::string iceC_Test_G_ids[2] =
{
    "::Ice::Object",
    "::Test::G"
};
const ::std::string iceC_Test_G_ops[] =
{
    "callG",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown"
};
const ::std::string iceC_Test_G_shutdown_name = "shutdown";
const ::std::string iceC_Test_G_callG_name = "callG";

const ::std::string iceC_Test_H_ids[3] =
{
    "::Ice::Object",
    "::Test::G",
    "::Test::H"
};
const ::std::string iceC_Test_H_ops[] =
{
    "callG",
    "callH",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown"
};
const ::std::string iceC_Test_H_callH_name = "callH";

}

const ::std::string&
Test::EmptyPrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::Empty";
    return typeId;
}

::std::string
Test::APrx::callA(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(true, this, &APrx::_iceI_callA, context).get();
}

::std::future<::std::string>
Test::APrx::callAAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(false, this, &APrx::_iceI_callA, context);
}

::std::function<void()>
Test::APrx::callAAsync(::std::function<void (::std::string)> response,
                       ::std::function<void(::std::exception_ptr)> ex,
                       ::std::function<void(bool)> sent,
                       const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::APrx::_iceI_callA, context);
}

/// \cond INTERNAL
void
Test::APrx::_iceI_callA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_A_callA_name);
    outAsync->invoke(iceC_Test_A_callA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::APrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

::std::string
Test::BPrx::callB(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(true, this, &BPrx::_iceI_callB, context).get();
}

::std::future<::std::string>
Test::BPrx::callBAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(false, this, &BPrx::_iceI_callB, context);
}

::std::function<void()>
Test::BPrx::callBAsync(::std::function<void (::std::string)> response,
                       ::std::function<void(::std::exception_ptr)> ex,
                       ::std::function<void(bool)> sent,
                       const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::BPrx::_iceI_callB, context);
}

/// \cond INTERNAL
void
Test::BPrx::_iceI_callB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_B_callB_name);
    outAsync->invoke(iceC_Test_B_callB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::BPrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

::std::string
Test::CPrx::callC(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(true, this, &CPrx::_iceI_callC, context).get();
}

::std::future<::std::string>
Test::CPrx::callCAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(false, this, &CPrx::_iceI_callC, context);
}

::std::function<void()>
Test::CPrx::callCAsync(::std::function<void (::std::string)> response,
                       ::std::function<void(::std::exception_ptr)> ex,
                       ::std::function<void(bool)> sent,
                       const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::CPrx::_iceI_callC, context);
}

/// \cond INTERNAL
void
Test::CPrx::_iceI_callC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_C_callC_name);
    outAsync->invoke(iceC_Test_C_callC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::CPrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

::std::string
Test::DPrx::callD(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(true, this, &DPrx::_iceI_callD, context).get();
}

::std::future<::std::string>
Test::DPrx::callDAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(false, this, &DPrx::_iceI_callD, context);
}

::std::function<void()>
Test::DPrx::callDAsync(::std::function<void (::std::string)> response,
                       ::std::function<void(::std::exception_ptr)> ex,
                       ::std::function<void(bool)> sent,
                       const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::DPrx::_iceI_callD, context);
}

/// \cond INTERNAL
void
Test::DPrx::_iceI_callD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_D_callD_name);
    outAsync->invoke(iceC_Test_D_callD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::DPrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

::std::string
Test::EPrx::callE(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(true, this, &EPrx::_iceI_callE, context).get();
}

::std::future<::std::string>
Test::EPrx::callEAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(false, this, &EPrx::_iceI_callE, context);
}

::std::function<void()>
Test::EPrx::callEAsync(::std::function<void (::std::string)> response,
                       ::std::function<void(::std::exception_ptr)> ex,
                       ::std::function<void(bool)> sent,
                       const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::EPrx::_iceI_callE, context);
}

/// \cond INTERNAL
void
Test::EPrx::_iceI_callE(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_E_callE_name);
    outAsync->invoke(iceC_Test_E_callE_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::EPrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::E";
    return typeId;
}

::std::string
Test::FPrx::callF(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(true, this, &FPrx::_iceI_callF, context).get();
}

::std::future<::std::string>
Test::FPrx::callFAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(false, this, &FPrx::_iceI_callF, context);
}

::std::function<void()>
Test::FPrx::callFAsync(::std::function<void (::std::string)> response,
                       ::std::function<void(::std::exception_ptr)> ex,
                       ::std::function<void(bool)> sent,
                       const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::FPrx::_iceI_callF, context);
}

/// \cond INTERNAL
void
Test::FPrx::_iceI_callF(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_F_callF_name);
    outAsync->invoke(iceC_Test_F_callF_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::FPrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::F";
    return typeId;
}

void
Test::GPrx::shutdown(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &GPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::GPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &GPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::GPrx::shutdownAsync(::std::function<void ()> response,
                          ::std::function<void(::std::exception_ptr)> ex,
                          ::std::function<void(bool)> sent,
                          const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::GPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::GPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_G_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::std::string
Test::GPrx::callG(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(true, this, &GPrx::_iceI_callG, context).get();
}

::std::future<::std::string>
Test::GPrx::callGAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(false, this, &GPrx::_iceI_callG, context);
}

::std::function<void()>
Test::GPrx::callGAsync(::std::function<void (::std::string)> response,
                       ::std::function<void(::std::exception_ptr)> ex,
                       ::std::function<void(bool)> sent,
                       const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::GPrx::_iceI_callG, context);
}

/// \cond INTERNAL
void
Test::GPrx::_iceI_callG(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_G_callG_name);
    outAsync->invoke(iceC_Test_G_callG_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::GPrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::G";
    return typeId;
}

::std::string
Test::HPrx::callH(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(true, this, &HPrx::_iceI_callH, context).get();
}

::std::future<::std::string>
Test::HPrx::callHAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::string>(false, this, &HPrx::_iceI_callH, context);
}

::std::function<void()>
Test::HPrx::callHAsync(::std::function<void (::std::string)> response,
                       ::std::function<void(::std::exception_ptr)> ex,
                       ::std::function<void(bool)> sent,
                       const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::HPrx::_iceI_callH, context);
}

/// \cond INTERNAL
void
Test::HPrx::_iceI_callH(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_H_callH_name);
    outAsync->invoke(iceC_Test_H_callH_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::HPrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::H";
    return typeId;
}

bool
Test::Empty::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Empty_ids, iceC_Test_Empty_ids + 2, s);
}

::std::vector<::std::string>
Test::Empty::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Empty_ids[0], &iceC_Test_Empty_ids[2]);
}

::std::string
Test::Empty::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Empty::ice_staticId()
{
    static const ::std::string typeId = "::Test::Empty";
    return typeId;
}

bool
Test::A::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_A_ids, iceC_Test_A_ids + 2, s);
}

::std::vector<::std::string>
Test::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_A_ids[0], &iceC_Test_A_ids[2]);
}

::std::string
Test::A::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

/// \cond INTERNAL
bool
Test::A::_iceD_callA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callA(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::A::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_A_ops, iceC_Test_A_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_A_ops)
    {
        case 0:
        {
            return _iceD_callA(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::B::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_B_ids, iceC_Test_B_ids + 3, s);
}

::std::vector<::std::string>
Test::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_B_ids[0], &iceC_Test_B_ids[3]);
}

::std::string
Test::B::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

/// \cond INTERNAL
bool
Test::B::_iceD_callB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callB(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::B::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_B_ops, iceC_Test_B_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_B_ops)
    {
        case 0:
        {
            return _iceD_callA(in, current);
        }
        case 1:
        {
            return _iceD_callB(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::C::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_C_ids, iceC_Test_C_ids + 3, s);
}

::std::vector<::std::string>
Test::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_C_ids[0], &iceC_Test_C_ids[3]);
}

::std::string
Test::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

/// \cond INTERNAL
bool
Test::C::_iceD_callC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callC(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::C::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_C_ops, iceC_Test_C_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_C_ops)
    {
        case 0:
        {
            return _iceD_callA(in, current);
        }
        case 1:
        {
            return _iceD_callC(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::D::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_D_ids, iceC_Test_D_ids + 5, s);
}

::std::vector<::std::string>
Test::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_D_ids[0], &iceC_Test_D_ids[5]);
}

::std::string
Test::D::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

/// \cond INTERNAL
bool
Test::D::_iceD_callD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callD(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::D::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_D_ops, iceC_Test_D_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_D_ops)
    {
        case 0:
        {
            return _iceD_callA(in, current);
        }
        case 1:
        {
            return _iceD_callB(in, current);
        }
        case 2:
        {
            return _iceD_callC(in, current);
        }
        case 3:
        {
            return _iceD_callD(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::E::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_E_ids, iceC_Test_E_ids + 2, s);
}

::std::vector<::std::string>
Test::E::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_E_ids[0], &iceC_Test_E_ids[2]);
}

::std::string
Test::E::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::E::ice_staticId()
{
    static const ::std::string typeId = "::Test::E";
    return typeId;
}

/// \cond INTERNAL
bool
Test::E::_iceD_callE(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callE(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::E::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_E_ops, iceC_Test_E_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_E_ops)
    {
        case 0:
        {
            return _iceD_callE(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::F::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_F_ids, iceC_Test_F_ids + 3, s);
}

::std::vector<::std::string>
Test::F::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_F_ids[0], &iceC_Test_F_ids[3]);
}

::std::string
Test::F::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::F::ice_staticId()
{
    static const ::std::string typeId = "::Test::F";
    return typeId;
}

/// \cond INTERNAL
bool
Test::F::_iceD_callF(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callF(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::F::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_F_ops, iceC_Test_F_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_F_ops)
    {
        case 0:
        {
            return _iceD_callE(in, current);
        }
        case 1:
        {
            return _iceD_callF(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::G::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_G_ids, iceC_Test_G_ids + 2, s);
}

::std::vector<::std::string>
Test::G::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_G_ids[0], &iceC_Test_G_ids[2]);
}

::std::string
Test::G::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::G::ice_staticId()
{
    static const ::std::string typeId = "::Test::G";
    return typeId;
}

/// \cond INTERNAL
bool
Test::G::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::G::_iceD_callG(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callG(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::G::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_G_ops, iceC_Test_G_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_G_ops)
    {
        case 0:
        {
            return _iceD_callG(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::H::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_H_ids, iceC_Test_H_ids + 3, s);
}

::std::vector<::std::string>
Test::H::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_H_ids[0], &iceC_Test_H_ids[3]);
}

::std::string
Test::H::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::H::ice_staticId()
{
    static const ::std::string typeId = "::Test::H";
    return typeId;
}

/// \cond INTERNAL
bool
Test::H::_iceD_callH(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->callH(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::H::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_H_ops, iceC_Test_H_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_H_ops)
    {
        case 0:
        {
            return _iceD_callG(in, current);
        }
        case 1:
        {
            return _iceD_callH(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
