//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

class TestIntf;
class TestIntfPrx;
class RemoteObjectAdapter;
class RemoteObjectAdapterPrx;
class RemoteCommunicator;
class RemoteCommunicatorPrx;

}

namespace Test
{

}

namespace Test
{

class TestIntfPrx : public ::Ice::Proxy<TestIntfPrx, ::Ice::ObjectPrx>
{
public:

    void sleep(int seconds, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<void> sleepAsync(int seconds, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    sleepAsync(int seconds,
               ::std::function<void()> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_sleep(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::Ice::Context&);
    /// \endcond

    void sleepAndHold(int seconds, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<void> sleepAndHoldAsync(int seconds, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    sleepAndHoldAsync(int seconds,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_sleepAndHold(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::Ice::Context&);
    /// \endcond

    void interruptSleep(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<void> interruptSleepAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    interruptSleepAsync(::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_interruptSleep(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void startHeartbeatCount(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<void> startHeartbeatCountAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    startHeartbeatCountAsync(::std::function<void()> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_startHeartbeatCount(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void waitForHeartbeatCount(int count, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<void> waitForHeartbeatCountAsync(int count, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    waitForHeartbeatCountAsync(int count,
                               ::std::function<void()> response,
                               ::std::function<void(::std::exception_ptr)> ex = nullptr,
                               ::std::function<void(bool)> sent = nullptr,
                               const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_waitForHeartbeatCount(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit TestIntfPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    TestIntfPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    TestIntfPrx() = default;
    /// \endcond
};

class RemoteObjectAdapterPrx : public ::Ice::Proxy<RemoteObjectAdapterPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<TestIntfPrx> getTestIntf(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<::std::shared_ptr<TestIntfPrx>> getTestIntfAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    getTestIntfAsync(::std::function<void(::std::shared_ptr<::Test::TestIntfPrx>)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_getTestIntf(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<TestIntfPrx>>>&, const ::Ice::Context&);
    /// \endcond

    void activate(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<void> activateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    activateAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_activate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void hold(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<void> holdAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    holdAsync(::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_hold(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void deactivate(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<void> deactivateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    deactivateAsync(::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_deactivate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit RemoteObjectAdapterPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    RemoteObjectAdapterPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    RemoteObjectAdapterPrx() = default;
    /// \endcond
};

class RemoteCommunicatorPrx : public ::Ice::Proxy<RemoteCommunicatorPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<RemoteObjectAdapterPrx> createObjectAdapter(int acmTimeout, int close, int heartbeat, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<::std::shared_ptr<RemoteObjectAdapterPrx>> createObjectAdapterAsync(int acmTimeout, int close, int heartbeat, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    createObjectAdapterAsync(int acmTimeout, int close, int heartbeat,
                             ::std::function<void(::std::shared_ptr<::Test::RemoteObjectAdapterPrx>)> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_createObjectAdapter(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<RemoteObjectAdapterPrx>>>&, int, int, int, const ::Ice::Context&);
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit RemoteCommunicatorPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    RemoteCommunicatorPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    RemoteCommunicatorPrx() = default;
    /// \endcond
};

}

namespace Test
{

class TestIntf : public virtual ::Ice::Object
{
public:

    using ProxyType = TestIntfPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void sleep(int seconds, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sleep(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sleepAndHold(int seconds, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sleepAndHold(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void interruptSleep(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_interruptSleep(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void startHeartbeatCount(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_startHeartbeatCount(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void waitForHeartbeatCount(int count, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_waitForHeartbeatCount(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class RemoteObjectAdapter : public virtual ::Ice::Object
{
public:

    using ProxyType = RemoteObjectAdapterPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<TestIntfPrx> getTestIntf(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getTestIntf(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void activate(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_activate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void hold(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_hold(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void deactivate(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_deactivate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class RemoteCommunicator : public virtual ::Ice::Object
{
public:

    using ProxyType = RemoteCommunicatorPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<RemoteObjectAdapterPrx> createObjectAdapter(int acmTimeout, int close, int heartbeat, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_createObjectAdapter(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

/// \cond INTERNAL
namespace Test
{

using TestIntfPtr = ::std::shared_ptr<TestIntf>;

using TestIntfPrxPtr = ::std::shared_ptr<TestIntfPrx>;

using RemoteObjectAdapterPtr = ::std::shared_ptr<RemoteObjectAdapter>;

using RemoteObjectAdapterPrxPtr = ::std::shared_ptr<RemoteObjectAdapterPrx>;

using RemoteCommunicatorPtr = ::std::shared_ptr<RemoteCommunicator>;

using RemoteCommunicatorPrxPtr = ::std::shared_ptr<RemoteCommunicatorPrx>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
