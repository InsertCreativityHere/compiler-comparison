//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Controller.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Controller.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::Common::Config> iceC_Test_Common_Config_init("::Test::Common::Config");

const ::IceInternal::DefaultValueFactoryInit<::Test::Common::OptionOverrides> iceC_Test_Common_OptionOverrides_init("::Test::Common::OptionOverrides");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Common::TestCaseNotExistException> iceC_Test_Common_TestCaseNotExistException_init("::Test::Common::TestCaseNotExistException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Common::TestCaseFailedException> iceC_Test_Common_TestCaseFailedException_init("::Test::Common::TestCaseFailedException");

const ::std::string iceC_Test_Common_TestCase_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::TestCase"
};
const ::std::string iceC_Test_Common_TestCase_ops[] =
{
    "destroy",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "runClientSide",
    "startServerSide",
    "stopServerSide"
};
const ::std::string iceC_Test_Common_TestCase_startServerSide_name = "startServerSide";
const ::std::string iceC_Test_Common_TestCase_stopServerSide_name = "stopServerSide";
const ::std::string iceC_Test_Common_TestCase_runClientSide_name = "runClientSide";
const ::std::string iceC_Test_Common_TestCase_destroy_name = "destroy";

const ::std::string iceC_Test_Common_Controller_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::Controller"
};
const ::std::string iceC_Test_Common_Controller_ops[] =
{
    "getHost",
    "getOptionOverrides",
    "getTestSuites",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "runTestCase"
};
const ::std::string iceC_Test_Common_Controller_runTestCase_name = "runTestCase";
const ::std::string iceC_Test_Common_Controller_getOptionOverrides_name = "getOptionOverrides";
const ::std::string iceC_Test_Common_Controller_getTestSuites_name = "getTestSuites";
const ::std::string iceC_Test_Common_Controller_getHost_name = "getHost";

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Common::ProcessFailedException> iceC_Test_Common_ProcessFailedException_init("::Test::Common::ProcessFailedException");

const ::std::string iceC_Test_Common_Process_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::Process"
};
const ::std::string iceC_Test_Common_Process_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "terminate",
    "waitReady",
    "waitSuccess"
};
const ::std::string iceC_Test_Common_Process_waitReady_name = "waitReady";
const ::std::string iceC_Test_Common_Process_waitSuccess_name = "waitSuccess";
const ::std::string iceC_Test_Common_Process_terminate_name = "terminate";

const ::std::string iceC_Test_Common_ProcessController_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::ProcessController"
};
const ::std::string iceC_Test_Common_ProcessController_ops[] =
{
    "getHost",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "start"
};
const ::std::string iceC_Test_Common_ProcessController_start_name = "start";
const ::std::string iceC_Test_Common_ProcessController_getHost_name = "getHost";

const ::std::string iceC_Test_Common_BrowserProcessController_ids[3] =
{
    "::Ice::Object",
    "::Test::Common::BrowserProcessController",
    "::Test::Common::ProcessController"
};
const ::std::string iceC_Test_Common_BrowserProcessController_ops[] =
{
    "getHost",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "redirect",
    "start"
};
const ::std::string iceC_Test_Common_BrowserProcessController_redirect_name = "redirect";

const ::std::string iceC_Test_Common_ProcessControllerRegistry_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::ProcessControllerRegistry"
};
const ::std::string iceC_Test_Common_ProcessControllerRegistry_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setProcessController"
};
const ::std::string iceC_Test_Common_ProcessControllerRegistry_setProcessController_name = "setProcessController";

}

Test::Common::TestCaseNotExistException::~TestCaseNotExistException()
{
}

const ::std::string&
Test::Common::TestCaseNotExistException::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::TestCaseNotExistException";
    return typeId;
}

Test::Common::TestCaseFailedException::~TestCaseFailedException()
{
}

const ::std::string&
Test::Common::TestCaseFailedException::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::TestCaseFailedException";
    return typeId;
}

Test::Common::ProcessFailedException::~ProcessFailedException()
{
}

const ::std::string&
Test::Common::ProcessFailedException::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::ProcessFailedException";
    return typeId;
}

bool
Test::Common::TestCase::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_TestCase_ids, iceC_Test_Common_TestCase_ids + 2, s);
}

::std::vector<::std::string>
Test::Common::TestCase::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Common_TestCase_ids[0], &iceC_Test_Common_TestCase_ids[2]);
}

::std::string
Test::Common::TestCase::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::TestCase::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::TestCase";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::TestCase::_iceD_startServerSide(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<Config> iceP_config;
    istr->readAll(iceP_config);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::string ret = this->startServerSide(::std::move(iceP_config), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::TestCase::_iceD_stopServerSide(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_success;
    istr->readAll(iceP_success);
    inS.endReadParams();
    ::std::string ret = this->stopServerSide(iceP_success, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::TestCase::_iceD_runClientSide(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_host;
    ::std::shared_ptr<Config> iceP_config;
    istr->readAll(iceP_host, iceP_config);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::string ret = this->runClientSide(::std::move(iceP_host), ::std::move(iceP_config), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::TestCase::_iceD_destroy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->destroy(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::TestCase::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_TestCase_ops, iceC_Test_Common_TestCase_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_TestCase_ops)
    {
        case 0:
        {
            return _iceD_destroy(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_runClientSide(in, current);
        }
        case 6:
        {
            return _iceD_startServerSide(in, current);
        }
        case 7:
        {
            return _iceD_stopServerSide(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Common::Controller::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_Controller_ids, iceC_Test_Common_Controller_ids + 2, s);
}

::std::vector<::std::string>
Test::Common::Controller::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Common_Controller_ids[0], &iceC_Test_Common_Controller_ids[2]);
}

::std::string
Test::Common::Controller::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::Controller::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::Controller";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::Controller::_iceD_runTestCase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_mapping;
    ::std::string iceP_testsuite;
    ::std::string iceP_testcase;
    ::std::string iceP_cross;
    istr->readAll(iceP_mapping, iceP_testsuite, iceP_testcase, iceP_cross);
    inS.endReadParams();
    ::std::shared_ptr<TestCasePrx> ret = this->runTestCase(::std::move(iceP_mapping), ::std::move(iceP_testsuite), ::std::move(iceP_testcase), ::std::move(iceP_cross), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Controller::_iceD_getOptionOverrides(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<OptionOverrides> ret = this->getOptionOverrides(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Controller::_iceD_getTestSuites(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_mapping;
    istr->readAll(iceP_mapping);
    inS.endReadParams();
    StringSeq ret = this->getTestSuites(::std::move(iceP_mapping), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Controller::_iceD_getHost(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_protocol;
    bool iceP_ipv6;
    istr->readAll(iceP_protocol, iceP_ipv6);
    inS.endReadParams();
    ::std::string ret = this->getHost(::std::move(iceP_protocol), iceP_ipv6, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Controller::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_Controller_ops, iceC_Test_Common_Controller_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_Controller_ops)
    {
        case 0:
        {
            return _iceD_getHost(in, current);
        }
        case 1:
        {
            return _iceD_getOptionOverrides(in, current);
        }
        case 2:
        {
            return _iceD_getTestSuites(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_runTestCase(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Common::Process::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_Process_ids, iceC_Test_Common_Process_ids + 2, s);
}

::std::vector<::std::string>
Test::Common::Process::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Common_Process_ids[0], &iceC_Test_Common_Process_ids[2]);
}

::std::string
Test::Common::Process::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::Process::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::Process";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::Process::_iceD_waitReady(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_timeout;
    istr->readAll(iceP_timeout);
    inS.endReadParams();
    this->waitReady(iceP_timeout, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Process::_iceD_waitSuccess(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_timeout;
    istr->readAll(iceP_timeout);
    inS.endReadParams();
    int ret = this->waitSuccess(iceP_timeout, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Process::_iceD_terminate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->terminate(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Process::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_Process_ops, iceC_Test_Common_Process_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_Process_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_terminate(in, current);
        }
        case 5:
        {
            return _iceD_waitReady(in, current);
        }
        case 6:
        {
            return _iceD_waitSuccess(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Common::ProcessController::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_ProcessController_ids, iceC_Test_Common_ProcessController_ids + 2, s);
}

::std::vector<::std::string>
Test::Common::ProcessController::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Common_ProcessController_ids[0], &iceC_Test_Common_ProcessController_ids[2]);
}

::std::string
Test::Common::ProcessController::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::ProcessController::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::ProcessController";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::ProcessController::_iceD_start(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_testsuite;
    ::std::string iceP_exe;
    StringSeq iceP_args;
    istr->readAll(iceP_testsuite, iceP_exe, iceP_args);
    inS.endReadParams();
    ::std::shared_ptr<ProcessPrx> ret = this->start(::std::move(iceP_testsuite), ::std::move(iceP_exe), ::std::move(iceP_args), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::ProcessController::_iceD_getHost(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_protocol;
    bool iceP_ipv6;
    istr->readAll(iceP_protocol, iceP_ipv6);
    inS.endReadParams();
    ::std::string ret = this->getHost(::std::move(iceP_protocol), iceP_ipv6, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::ProcessController::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_ProcessController_ops, iceC_Test_Common_ProcessController_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_ProcessController_ops)
    {
        case 0:
        {
            return _iceD_getHost(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_start(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Common::BrowserProcessController::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_BrowserProcessController_ids, iceC_Test_Common_BrowserProcessController_ids + 3, s);
}

::std::vector<::std::string>
Test::Common::BrowserProcessController::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Common_BrowserProcessController_ids[0], &iceC_Test_Common_BrowserProcessController_ids[3]);
}

::std::string
Test::Common::BrowserProcessController::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::BrowserProcessController::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::BrowserProcessController";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::BrowserProcessController::_iceD_redirect(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_url;
    istr->readAll(iceP_url);
    inS.endReadParams();
    this->redirect(::std::move(iceP_url), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::BrowserProcessController::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_BrowserProcessController_ops, iceC_Test_Common_BrowserProcessController_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_BrowserProcessController_ops)
    {
        case 0:
        {
            return _iceD_getHost(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_redirect(in, current);
        }
        case 6:
        {
            return _iceD_start(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Common::ProcessControllerRegistry::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_ProcessControllerRegistry_ids, iceC_Test_Common_ProcessControllerRegistry_ids + 2, s);
}

::std::vector<::std::string>
Test::Common::ProcessControllerRegistry::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Common_ProcessControllerRegistry_ids[0], &iceC_Test_Common_ProcessControllerRegistry_ids[2]);
}

::std::string
Test::Common::ProcessControllerRegistry::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::ProcessControllerRegistry::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::ProcessControllerRegistry";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::ProcessControllerRegistry::_iceD_setProcessController(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<ProcessControllerPrx> iceP_controller;
    istr->readAll(iceP_controller);
    inS.endReadParams();
    this->setProcessController(::std::move(iceP_controller), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::ProcessControllerRegistry::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_ProcessControllerRegistry_ops, iceC_Test_Common_ProcessControllerRegistry_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_ProcessControllerRegistry_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_setProcessController(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::Common::Config::~Config()
{
}

const ::std::string&
Test::Common::Config::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::Config";
    return typeId;
}

Test::Common::OptionOverrides::~OptionOverrides()
{
}

const ::std::string&
Test::Common::OptionOverrides::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::OptionOverrides";
    return typeId;
}

/// \cond INTERNAL
void
Test::Common::TestCasePrx::_iceI_startServerSide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::shared_ptr<Config>& iceP_config, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_TestCase_startServerSide_name);
    outAsync->invoke(iceC_Test_Common_TestCase_startServerSide_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_config);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const TestCaseFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Common::TestCasePrx::_iceI_stopServerSide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, bool iceP_success, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_TestCase_stopServerSide_name);
    outAsync->invoke(iceC_Test_Common_TestCase_stopServerSide_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_success);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const TestCaseFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Common::TestCasePrx::_iceI_runClientSide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::string& iceP_host, const ::std::shared_ptr<Config>& iceP_config, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_TestCase_runClientSide_name);
    outAsync->invoke(iceC_Test_Common_TestCase_runClientSide_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_host, iceP_config);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const TestCaseFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Common::TestCasePrx::_iceI_destroy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Common_TestCase_destroy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::Common::TestCasePrx::_newInstance() const
{
    return ::IceInternal::createProxy<TestCasePrx>();
}
/// \endcond

const ::std::string&
Test::Common::TestCasePrx::ice_staticId()
{
    return TestCase::ice_staticId();
}

/// \cond INTERNAL
void
Test::Common::ControllerPrx::_iceI_runTestCase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Common::TestCasePrx>>>& outAsync, const ::std::string& iceP_mapping, const ::std::string& iceP_testsuite, const ::std::string& iceP_testcase, const ::std::string& iceP_cross, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_Controller_runTestCase_name);
    outAsync->invoke(iceC_Test_Common_Controller_runTestCase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_mapping, iceP_testsuite, iceP_testcase, iceP_cross);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const TestCaseNotExistException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Common::ControllerPrx::_iceI_getOptionOverrides(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Common::OptionOverrides>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_Controller_getOptionOverrides_name);
    outAsync->invoke(iceC_Test_Common_Controller_getOptionOverrides_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<OptionOverrides> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Common::ControllerPrx::_iceI_getTestSuites(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::Common::StringSeq>>& outAsync, const ::std::string& iceP_mapping, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_Controller_getTestSuites_name);
    outAsync->invoke(iceC_Test_Common_Controller_getTestSuites_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_mapping);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Common::ControllerPrx::_iceI_getHost(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::string& iceP_protocol, bool iceP_ipv6, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_Controller_getHost_name);
    outAsync->invoke(iceC_Test_Common_Controller_getHost_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_protocol, iceP_ipv6);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::Common::ControllerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ControllerPrx>();
}
/// \endcond

const ::std::string&
Test::Common::ControllerPrx::ice_staticId()
{
    return Controller::ice_staticId();
}

/// \cond INTERNAL
void
Test::Common::ProcessPrx::_iceI_waitReady(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_timeout, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_Process_waitReady_name);
    outAsync->invoke(iceC_Test_Common_Process_waitReady_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_timeout);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ProcessFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Common::ProcessPrx::_iceI_waitSuccess(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_timeout, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_Process_waitSuccess_name);
    outAsync->invoke(iceC_Test_Common_Process_waitSuccess_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_timeout);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ProcessFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Common::ProcessPrx::_iceI_terminate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_Process_terminate_name);
    outAsync->invoke(iceC_Test_Common_Process_terminate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::Common::ProcessPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ProcessPrx>();
}
/// \endcond

const ::std::string&
Test::Common::ProcessPrx::ice_staticId()
{
    return Process::ice_staticId();
}

/// \cond INTERNAL
void
Test::Common::ProcessControllerPrx::_iceI_start(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Common::ProcessPrx>>>& outAsync, const ::std::string& iceP_testsuite, const ::std::string& iceP_exe, const StringSeq& iceP_args, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_ProcessController_start_name);
    outAsync->invoke(iceC_Test_Common_ProcessController_start_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_testsuite, iceP_exe, iceP_args);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ProcessFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Common::ProcessControllerPrx::_iceI_getHost(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::string& iceP_protocol, bool iceP_ipv6, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_ProcessController_getHost_name);
    outAsync->invoke(iceC_Test_Common_ProcessController_getHost_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_protocol, iceP_ipv6);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::Common::ProcessControllerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ProcessControllerPrx>();
}
/// \endcond

const ::std::string&
Test::Common::ProcessControllerPrx::ice_staticId()
{
    return ProcessController::ice_staticId();
}

/// \cond INTERNAL
void
Test::Common::BrowserProcessControllerPrx::_iceI_redirect(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_url, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Common_BrowserProcessController_redirect_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_url);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::Common::BrowserProcessControllerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<BrowserProcessControllerPrx>();
}
/// \endcond

const ::std::string&
Test::Common::BrowserProcessControllerPrx::ice_staticId()
{
    return BrowserProcessController::ice_staticId();
}

/// \cond INTERNAL
void
Test::Common::ProcessControllerRegistryPrx::_iceI_setProcessController(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<ProcessControllerPrx>& iceP_controller, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Common_ProcessControllerRegistry_setProcessController_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_controller);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::Common::ProcessControllerRegistryPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ProcessControllerRegistryPrx>();
}
/// \endcond

const ::std::string&
Test::Common::ProcessControllerRegistryPrx::ice_staticId()
{
    return ProcessControllerRegistry::ice_staticId();
}

#else // C++98 mapping

namespace
{

namespace
{

const ::std::string iceC_Test_Common_TestCase_startServerSide_name = "startServerSide";

const ::std::string iceC_Test_Common_TestCase_stopServerSide_name = "stopServerSide";

const ::std::string iceC_Test_Common_TestCase_runClientSide_name = "runClientSide";

const ::std::string iceC_Test_Common_TestCase_destroy_name = "destroy";

const ::std::string iceC_Test_Common_Controller_runTestCase_name = "runTestCase";

const ::std::string iceC_Test_Common_Controller_getOptionOverrides_name = "getOptionOverrides";

const ::std::string iceC_Test_Common_Controller_getTestSuites_name = "getTestSuites";

const ::std::string iceC_Test_Common_Controller_getHost_name = "getHost";

const ::std::string iceC_Test_Common_Process_waitReady_name = "waitReady";

const ::std::string iceC_Test_Common_Process_waitSuccess_name = "waitSuccess";

const ::std::string iceC_Test_Common_Process_terminate_name = "terminate";

const ::std::string iceC_Test_Common_ProcessController_start_name = "start";

const ::std::string iceC_Test_Common_ProcessController_getHost_name = "getHost";

const ::std::string iceC_Test_Common_BrowserProcessController_redirect_name = "redirect";

const ::std::string iceC_Test_Common_ProcessControllerRegistry_setProcessController_name = "setProcessController";

}

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::Common::TestCaseNotExistException> iceC_Test_Common_TestCaseNotExistException_init("::Test::Common::TestCaseNotExistException");

}

Test::Common::TestCaseNotExistException::TestCaseNotExistException(const ::std::string& reason) :
    ::Ice::UserException(),
    reason(reason)
{
}
Test::Common::TestCaseNotExistException::~TestCaseNotExistException()
{
}

::std::string
Test::Common::TestCaseNotExistException::ice_id() const
{
    return "::Test::Common::TestCaseNotExistException";
}

Test::Common::TestCaseNotExistException*
Test::Common::TestCaseNotExistException::ice_clone() const
{
    return new TestCaseNotExistException(*this);
}

void
Test::Common::TestCaseNotExistException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::Common::TestCaseNotExistException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::Common::TestCaseNotExistException", -1, true);
    ::Ice::StreamWriter< TestCaseNotExistException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Common::TestCaseNotExistException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< TestCaseNotExistException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::Common::TestCaseFailedException> iceC_Test_Common_TestCaseFailedException_init("::Test::Common::TestCaseFailedException");

}

Test::Common::TestCaseFailedException::TestCaseFailedException(const ::std::string& output) :
    ::Ice::UserException(),
    output(output)
{
}
Test::Common::TestCaseFailedException::~TestCaseFailedException()
{
}

::std::string
Test::Common::TestCaseFailedException::ice_id() const
{
    return "::Test::Common::TestCaseFailedException";
}

Test::Common::TestCaseFailedException*
Test::Common::TestCaseFailedException::ice_clone() const
{
    return new TestCaseFailedException(*this);
}

void
Test::Common::TestCaseFailedException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::Common::TestCaseFailedException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::Common::TestCaseFailedException", -1, true);
    ::Ice::StreamWriter< TestCaseFailedException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Common::TestCaseFailedException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< TestCaseFailedException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::Common::ProcessFailedException> iceC_Test_Common_ProcessFailedException_init("::Test::Common::ProcessFailedException");

}

Test::Common::ProcessFailedException::ProcessFailedException(const ::std::string& reason) :
    ::Ice::UserException(),
    reason(reason)
{
}
Test::Common::ProcessFailedException::~ProcessFailedException()
{
}

::std::string
Test::Common::ProcessFailedException::ice_id() const
{
    return "::Test::Common::ProcessFailedException";
}

Test::Common::ProcessFailedException*
Test::Common::ProcessFailedException::ice_clone() const
{
    return new ProcessFailedException(*this);
}

void
Test::Common::ProcessFailedException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::Common::ProcessFailedException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::Common::ProcessFailedException", -1, true);
    ::Ice::StreamWriter< ProcessFailedException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Common::ProcessFailedException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ProcessFailedException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::Common::upCast(TestCase* p) { return p; }

void
::IceProxy::Test::Common::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< TestCase>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new TestCase;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Common::TestCase::_iceI_begin_startServerSide(const ::Test::Common::ConfigPtr& iceP_config, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Common_TestCase_startServerSide_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Common_TestCase_startServerSide_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Common_TestCase_startServerSide_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_config);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Common_TestCase_startServerSide_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::Common::TestCase::end_startServerSide(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Common_TestCase_startServerSide_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::Common::TestCaseFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Common::TestCase::_iceI_begin_stopServerSide(bool iceP_success, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Common_TestCase_stopServerSide_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Common_TestCase_stopServerSide_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Common_TestCase_stopServerSide_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_success);
        result->endWriteParams();
        result->invoke(iceC_Test_Common_TestCase_stopServerSide_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::Common::TestCase::end_stopServerSide(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Common_TestCase_stopServerSide_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::Common::TestCaseFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Common::TestCase::_iceI_begin_runClientSide(const ::std::string& iceP_host, const ::Test::Common::ConfigPtr& iceP_config, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Common_TestCase_runClientSide_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Common_TestCase_runClientSide_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Common_TestCase_runClientSide_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_host);
        ostr->write(iceP_config);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Common_TestCase_runClientSide_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::Common::TestCase::end_runClientSide(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Common_TestCase_runClientSide_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::Common::TestCaseFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Common::TestCase::_iceI_begin_destroy(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Common_TestCase_destroy_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Common_TestCase_destroy_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Common_TestCase_destroy_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Common::TestCase::end_destroy(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Common_TestCase_destroy_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Common::TestCase::_newInstance() const
{
    return new TestCase;
}
/// \endcond

const ::std::string&
IceProxy::Test::Common::TestCase::ice_staticId()
{
    return ::Test::Common::TestCase::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::Common::upCast(Controller* p) { return p; }

void
::IceProxy::Test::Common::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Controller>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Controller;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Common::Controller::_iceI_begin_runTestCase(const ::std::string& iceP_mapping, const ::std::string& iceP_testsuite, const ::std::string& iceP_testcase, const ::std::string& iceP_cross, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Common_Controller_runTestCase_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Common_Controller_runTestCase_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Common_Controller_runTestCase_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_mapping);
        ostr->write(iceP_testsuite);
        ostr->write(iceP_testcase);
        ostr->write(iceP_cross);
        result->endWriteParams();
        result->invoke(iceC_Test_Common_Controller_runTestCase_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Common::TestCasePrx
IceProxy::Test::Common::Controller::end_runTestCase(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Common_Controller_runTestCase_name);
    ::Test::Common::TestCasePrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::Common::TestCaseNotExistException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Common::Controller::_iceI_begin_getOptionOverrides(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Common_Controller_getOptionOverrides_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Common_Controller_getOptionOverrides_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Common_Controller_getOptionOverrides_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Common_Controller_getOptionOverrides_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Common::OptionOverridesPtr
IceProxy::Test::Common::Controller::end_getOptionOverrides(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Common_Controller_getOptionOverrides_name);
    ::Test::Common::OptionOverridesPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Common::Controller::_iceI_begin_getTestSuites(const ::std::string& iceP_mapping, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Common_Controller_getTestSuites_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Common_Controller_getTestSuites_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Common_Controller_getTestSuites_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_mapping);
        result->endWriteParams();
        result->invoke(iceC_Test_Common_Controller_getTestSuites_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Common::StringSeq
IceProxy::Test::Common::Controller::end_getTestSuites(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Common_Controller_getTestSuites_name);
    ::Test::Common::StringSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Common::Controller::_iceI_begin_getHost(const ::std::string& iceP_protocol, bool iceP_ipv6, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Common_Controller_getHost_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Common_Controller_getHost_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Common_Controller_getHost_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_protocol);
        ostr->write(iceP_ipv6);
        result->endWriteParams();
        result->invoke(iceC_Test_Common_Controller_getHost_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::Common::Controller::end_getHost(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Common_Controller_getHost_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Common::Controller::_newInstance() const
{
    return new Controller;
}
/// \endcond

const ::std::string&
IceProxy::Test::Common::Controller::ice_staticId()
{
    return ::Test::Common::Controller::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::Common::upCast(Process* p) { return p; }

void
::IceProxy::Test::Common::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Process>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Process;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Common::Process::_iceI_begin_waitReady(::Ice::Int iceP_timeout, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Common_Process_waitReady_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Common_Process_waitReady_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Common_Process_waitReady_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_timeout);
        result->endWriteParams();
        result->invoke(iceC_Test_Common_Process_waitReady_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Common::Process::end_waitReady(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Common_Process_waitReady_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::Common::ProcessFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Common::Process::_iceI_begin_waitSuccess(::Ice::Int iceP_timeout, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Common_Process_waitSuccess_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Common_Process_waitSuccess_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Common_Process_waitSuccess_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_timeout);
        result->endWriteParams();
        result->invoke(iceC_Test_Common_Process_waitSuccess_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::Common::Process::end_waitSuccess(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Common_Process_waitSuccess_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::Common::ProcessFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Common::Process::_iceI_begin_terminate(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Common_Process_terminate_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Common_Process_terminate_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Common_Process_terminate_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Common_Process_terminate_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::Common::Process::end_terminate(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Common_Process_terminate_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Common::Process::_newInstance() const
{
    return new Process;
}
/// \endcond

const ::std::string&
IceProxy::Test::Common::Process::ice_staticId()
{
    return ::Test::Common::Process::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::Common::upCast(ProcessController* p) { return p; }

void
::IceProxy::Test::Common::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ProcessController>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ProcessController;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Common::ProcessController::_iceI_begin_start(const ::std::string& iceP_testsuite, const ::std::string& iceP_exe, const ::Test::Common::StringSeq& iceP_args, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Common_ProcessController_start_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Common_ProcessController_start_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Common_ProcessController_start_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_testsuite);
        ostr->write(iceP_exe);
        ostr->write(iceP_args);
        result->endWriteParams();
        result->invoke(iceC_Test_Common_ProcessController_start_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Common::ProcessPrx
IceProxy::Test::Common::ProcessController::end_start(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Common_ProcessController_start_name);
    ::Test::Common::ProcessPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::Common::ProcessFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Common::ProcessController::_iceI_begin_getHost(const ::std::string& iceP_protocol, bool iceP_ipv6, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Common_ProcessController_getHost_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Common_ProcessController_getHost_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Common_ProcessController_getHost_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_protocol);
        ostr->write(iceP_ipv6);
        result->endWriteParams();
        result->invoke(iceC_Test_Common_ProcessController_getHost_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Test::Common::ProcessController::end_getHost(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Common_ProcessController_getHost_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Common::ProcessController::_newInstance() const
{
    return new ProcessController;
}
/// \endcond

const ::std::string&
IceProxy::Test::Common::ProcessController::ice_staticId()
{
    return ::Test::Common::ProcessController::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::Common::upCast(BrowserProcessController* p) { return p; }

void
::IceProxy::Test::Common::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< BrowserProcessController>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new BrowserProcessController;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Common::BrowserProcessController::_iceI_begin_redirect(const ::std::string& iceP_url, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Common_BrowserProcessController_redirect_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Common_BrowserProcessController_redirect_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_url);
        result->endWriteParams();
        result->invoke(iceC_Test_Common_BrowserProcessController_redirect_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Common::BrowserProcessController::end_redirect(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Common_BrowserProcessController_redirect_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Common::BrowserProcessController::_newInstance() const
{
    return new BrowserProcessController;
}
/// \endcond

const ::std::string&
IceProxy::Test::Common::BrowserProcessController::ice_staticId()
{
    return ::Test::Common::BrowserProcessController::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::Common::upCast(ProcessControllerRegistry* p) { return p; }

void
::IceProxy::Test::Common::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ProcessControllerRegistry>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ProcessControllerRegistry;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Common::ProcessControllerRegistry::_iceI_begin_setProcessController(const ::Test::Common::ProcessControllerPrx& iceP_controller, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Common_ProcessControllerRegistry_setProcessController_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Common_ProcessControllerRegistry_setProcessController_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_controller);
        result->endWriteParams();
        result->invoke(iceC_Test_Common_ProcessControllerRegistry_setProcessController_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Common::ProcessControllerRegistry::end_setProcessController(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Common_ProcessControllerRegistry_setProcessController_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Common::ProcessControllerRegistry::_newInstance() const
{
    return new ProcessControllerRegistry;
}
/// \endcond

const ::std::string&
IceProxy::Test::Common::ProcessControllerRegistry::ice_staticId()
{
    return ::Test::Common::ProcessControllerRegistry::ice_staticId();
}

Test::Common::TestCase::~TestCase()
{
}

namespace
{
const ::std::string iceC_Test_Common_TestCase_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::TestCase"
};

}

bool
Test::Common::TestCase::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_TestCase_ids, iceC_Test_Common_TestCase_ids + 2, s);
}

::std::vector< ::std::string>
Test::Common::TestCase::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Common_TestCase_ids[0], &iceC_Test_Common_TestCase_ids[2]);
}

const ::std::string&
Test::Common::TestCase::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::TestCase::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::TestCase";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::TestCase::_iceD_startServerSide(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ConfigPtr iceP_config;
    istr->read(iceP_config);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::string ret = this->startServerSide(iceP_config, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::TestCase::_iceD_stopServerSide(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    bool iceP_success;
    istr->read(iceP_success);
    inS.endReadParams();
    ::std::string ret = this->stopServerSide(iceP_success, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::TestCase::_iceD_runClientSide(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_host;
    ConfigPtr iceP_config;
    istr->read(iceP_host);
    istr->read(iceP_config);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::string ret = this->runClientSide(iceP_host, iceP_config, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::TestCase::_iceD_destroy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->destroy(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Common_TestCase_all[] =
{
    "destroy",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "runClientSide",
    "startServerSide",
    "stopServerSide"
};

}

/// \cond INTERNAL
bool
Test::Common::TestCase::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_TestCase_all, iceC_Test_Common_TestCase_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_TestCase_all)
    {
        case 0:
        {
            return _iceD_destroy(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_runClientSide(in, current);
        }
        case 6:
        {
            return _iceD_startServerSide(in, current);
        }
        case 7:
        {
            return _iceD_stopServerSide(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::Common::Controller::~Controller()
{
}

namespace
{
const ::std::string iceC_Test_Common_Controller_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::Controller"
};

}

bool
Test::Common::Controller::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_Controller_ids, iceC_Test_Common_Controller_ids + 2, s);
}

::std::vector< ::std::string>
Test::Common::Controller::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Common_Controller_ids[0], &iceC_Test_Common_Controller_ids[2]);
}

const ::std::string&
Test::Common::Controller::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::Controller::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::Controller";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::Controller::_iceD_runTestCase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_mapping;
    ::std::string iceP_testsuite;
    ::std::string iceP_testcase;
    ::std::string iceP_cross;
    istr->read(iceP_mapping);
    istr->read(iceP_testsuite);
    istr->read(iceP_testcase);
    istr->read(iceP_cross);
    inS.endReadParams();
    TestCasePrx ret = this->runTestCase(iceP_mapping, iceP_testsuite, iceP_testcase, iceP_cross, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Controller::_iceD_getOptionOverrides(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    OptionOverridesPtr ret = this->getOptionOverrides(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Controller::_iceD_getTestSuites(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_mapping;
    istr->read(iceP_mapping);
    inS.endReadParams();
    StringSeq ret = this->getTestSuites(iceP_mapping, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Controller::_iceD_getHost(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_protocol;
    bool iceP_ipv6;
    istr->read(iceP_protocol);
    istr->read(iceP_ipv6);
    inS.endReadParams();
    ::std::string ret = this->getHost(iceP_protocol, iceP_ipv6, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Common_Controller_all[] =
{
    "getHost",
    "getOptionOverrides",
    "getTestSuites",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "runTestCase"
};

}

/// \cond INTERNAL
bool
Test::Common::Controller::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_Controller_all, iceC_Test_Common_Controller_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_Controller_all)
    {
        case 0:
        {
            return _iceD_getHost(in, current);
        }
        case 1:
        {
            return _iceD_getOptionOverrides(in, current);
        }
        case 2:
        {
            return _iceD_getTestSuites(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_runTestCase(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::Common::Process::~Process()
{
}

namespace
{
const ::std::string iceC_Test_Common_Process_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::Process"
};

}

bool
Test::Common::Process::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_Process_ids, iceC_Test_Common_Process_ids + 2, s);
}

::std::vector< ::std::string>
Test::Common::Process::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Common_Process_ids[0], &iceC_Test_Common_Process_ids[2]);
}

const ::std::string&
Test::Common::Process::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::Process::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::Process";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::Process::_iceD_waitReady(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_timeout;
    istr->read(iceP_timeout);
    inS.endReadParams();
    this->waitReady(iceP_timeout, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Process::_iceD_waitSuccess(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_timeout;
    istr->read(iceP_timeout);
    inS.endReadParams();
    ::Ice::Int ret = this->waitSuccess(iceP_timeout, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Process::_iceD_terminate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->terminate(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Common_Process_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "terminate",
    "waitReady",
    "waitSuccess"
};

}

/// \cond INTERNAL
bool
Test::Common::Process::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_Process_all, iceC_Test_Common_Process_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_Process_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_terminate(in, current);
        }
        case 5:
        {
            return _iceD_waitReady(in, current);
        }
        case 6:
        {
            return _iceD_waitSuccess(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::Common::ProcessController::~ProcessController()
{
}

namespace
{
const ::std::string iceC_Test_Common_ProcessController_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::ProcessController"
};

}

bool
Test::Common::ProcessController::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_ProcessController_ids, iceC_Test_Common_ProcessController_ids + 2, s);
}

::std::vector< ::std::string>
Test::Common::ProcessController::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Common_ProcessController_ids[0], &iceC_Test_Common_ProcessController_ids[2]);
}

const ::std::string&
Test::Common::ProcessController::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::ProcessController::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::ProcessController";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::ProcessController::_iceD_start(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_testsuite;
    ::std::string iceP_exe;
    StringSeq iceP_args;
    istr->read(iceP_testsuite);
    istr->read(iceP_exe);
    istr->read(iceP_args);
    inS.endReadParams();
    ProcessPrx ret = this->start(iceP_testsuite, iceP_exe, iceP_args, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::ProcessController::_iceD_getHost(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_protocol;
    bool iceP_ipv6;
    istr->read(iceP_protocol);
    istr->read(iceP_ipv6);
    inS.endReadParams();
    ::std::string ret = this->getHost(iceP_protocol, iceP_ipv6, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Common_ProcessController_all[] =
{
    "getHost",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "start"
};

}

/// \cond INTERNAL
bool
Test::Common::ProcessController::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_ProcessController_all, iceC_Test_Common_ProcessController_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_ProcessController_all)
    {
        case 0:
        {
            return _iceD_getHost(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_start(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::Common::BrowserProcessController::~BrowserProcessController()
{
}

namespace
{
const ::std::string iceC_Test_Common_BrowserProcessController_ids[3] =
{
    "::Ice::Object",
    "::Test::Common::BrowserProcessController",
    "::Test::Common::ProcessController"
};

}

bool
Test::Common::BrowserProcessController::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_BrowserProcessController_ids, iceC_Test_Common_BrowserProcessController_ids + 3, s);
}

::std::vector< ::std::string>
Test::Common::BrowserProcessController::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Common_BrowserProcessController_ids[0], &iceC_Test_Common_BrowserProcessController_ids[3]);
}

const ::std::string&
Test::Common::BrowserProcessController::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::BrowserProcessController::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::BrowserProcessController";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::BrowserProcessController::_iceD_redirect(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_url;
    istr->read(iceP_url);
    inS.endReadParams();
    this->redirect(iceP_url, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Common_BrowserProcessController_all[] =
{
    "getHost",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "redirect",
    "start"
};

}

/// \cond INTERNAL
bool
Test::Common::BrowserProcessController::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_BrowserProcessController_all, iceC_Test_Common_BrowserProcessController_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_BrowserProcessController_all)
    {
        case 0:
        {
            return _iceD_getHost(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_redirect(in, current);
        }
        case 6:
        {
            return _iceD_start(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::Common::ProcessControllerRegistry::~ProcessControllerRegistry()
{
}

namespace
{
const ::std::string iceC_Test_Common_ProcessControllerRegistry_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::ProcessControllerRegistry"
};

}

bool
Test::Common::ProcessControllerRegistry::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_ProcessControllerRegistry_ids, iceC_Test_Common_ProcessControllerRegistry_ids + 2, s);
}

::std::vector< ::std::string>
Test::Common::ProcessControllerRegistry::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Common_ProcessControllerRegistry_ids[0], &iceC_Test_Common_ProcessControllerRegistry_ids[2]);
}

const ::std::string&
Test::Common::ProcessControllerRegistry::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::ProcessControllerRegistry::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::ProcessControllerRegistry";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::ProcessControllerRegistry::_iceD_setProcessController(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ProcessControllerPrx iceP_controller;
    istr->read(iceP_controller);
    inS.endReadParams();
    this->setProcessController(iceP_controller, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Common_ProcessControllerRegistry_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setProcessController"
};

}

/// \cond INTERNAL
bool
Test::Common::ProcessControllerRegistry::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_ProcessControllerRegistry_all, iceC_Test_Common_ProcessControllerRegistry_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_ProcessControllerRegistry_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_setProcessController(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::Common::Config::~Config()
{
}

/// \cond INTERNAL
::Ice::Object* Test::Common::upCast(Config* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::Common::Config::ice_clone() const
{
    ::Ice::Object* p = new Config(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_Common_Config_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::Config"
};

}

bool
Test::Common::Config::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_Config_ids, iceC_Test_Common_Config_ids + 2, s);
}

::std::vector< ::std::string>
Test::Common::Config::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Common_Config_ids[0], &iceC_Test_Common_Config_ids[2]);
}

const ::std::string&
Test::Common::Config::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::Config::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::Config";
    return typeId;
}

/// \cond STREAM
void
Test::Common::Config::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Config, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Common::Config::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Config, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Common::Config> iceC_Test_Common_Config_init("::Test::Common::Config");
}

::Ice::ValueFactoryPtr
Test::Common::Config::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Common::Config::ice_staticId());
}

/// \cond INTERNAL
void
Test::Common::_icePatchObjectPtr(ConfigPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ConfigPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Config::ice_staticId(), v);
    }
}
/// \endcond

Test::Common::OptionOverrides::~OptionOverrides()
{
}

/// \cond INTERNAL
::Ice::Object* Test::Common::upCast(OptionOverrides* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::Common::OptionOverrides::ice_clone() const
{
    ::Ice::Object* p = new OptionOverrides(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_Common_OptionOverrides_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::OptionOverrides"
};

}

bool
Test::Common::OptionOverrides::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_OptionOverrides_ids, iceC_Test_Common_OptionOverrides_ids + 2, s);
}

::std::vector< ::std::string>
Test::Common::OptionOverrides::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Common_OptionOverrides_ids[0], &iceC_Test_Common_OptionOverrides_ids[2]);
}

const ::std::string&
Test::Common::OptionOverrides::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::OptionOverrides::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::OptionOverrides";
    return typeId;
}

/// \cond STREAM
void
Test::Common::OptionOverrides::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< OptionOverrides, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Common::OptionOverrides::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< OptionOverrides, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Common::OptionOverrides> iceC_Test_Common_OptionOverrides_init("::Test::Common::OptionOverrides");
}

::Ice::ValueFactoryPtr
Test::Common::OptionOverrides::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Common::OptionOverrides::ice_staticId());
}

/// \cond INTERNAL
void
Test::Common::_icePatchObjectPtr(OptionOverridesPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = OptionOverridesPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(OptionOverrides::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
