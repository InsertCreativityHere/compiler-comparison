//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Controller.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Controller.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::Common::Config> iceC_Test_Common_Config_init("::Test::Common::Config");

const ::IceInternal::DefaultValueFactoryInit<::Test::Common::OptionOverrides> iceC_Test_Common_OptionOverrides_init("::Test::Common::OptionOverrides");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Common::TestCaseNotExistException> iceC_Test_Common_TestCaseNotExistException_init("::Test::Common::TestCaseNotExistException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Common::TestCaseFailedException> iceC_Test_Common_TestCaseFailedException_init("::Test::Common::TestCaseFailedException");

const ::std::string iceC_Test_Common_TestCase_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::TestCase"
};
const ::std::string iceC_Test_Common_TestCase_ops[] =
{
    "destroy",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "runClientSide",
    "startServerSide",
    "stopServerSide"
};
const ::std::string iceC_Test_Common_TestCase_startServerSide_name = "startServerSide";
const ::std::string iceC_Test_Common_TestCase_stopServerSide_name = "stopServerSide";
const ::std::string iceC_Test_Common_TestCase_runClientSide_name = "runClientSide";
const ::std::string iceC_Test_Common_TestCase_destroy_name = "destroy";

const ::std::string iceC_Test_Common_Controller_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::Controller"
};
const ::std::string iceC_Test_Common_Controller_ops[] =
{
    "getHost",
    "getOptionOverrides",
    "getTestSuites",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "runTestCase"
};
const ::std::string iceC_Test_Common_Controller_runTestCase_name = "runTestCase";
const ::std::string iceC_Test_Common_Controller_getOptionOverrides_name = "getOptionOverrides";
const ::std::string iceC_Test_Common_Controller_getTestSuites_name = "getTestSuites";
const ::std::string iceC_Test_Common_Controller_getHost_name = "getHost";

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Common::ProcessFailedException> iceC_Test_Common_ProcessFailedException_init("::Test::Common::ProcessFailedException");

const ::std::string iceC_Test_Common_Process_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::Process"
};
const ::std::string iceC_Test_Common_Process_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "terminate",
    "waitReady",
    "waitSuccess"
};
const ::std::string iceC_Test_Common_Process_waitReady_name = "waitReady";
const ::std::string iceC_Test_Common_Process_waitSuccess_name = "waitSuccess";
const ::std::string iceC_Test_Common_Process_terminate_name = "terminate";

const ::std::string iceC_Test_Common_ProcessController_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::ProcessController"
};
const ::std::string iceC_Test_Common_ProcessController_ops[] =
{
    "getHost",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "start"
};
const ::std::string iceC_Test_Common_ProcessController_start_name = "start";
const ::std::string iceC_Test_Common_ProcessController_getHost_name = "getHost";

const ::std::string iceC_Test_Common_BrowserProcessController_ids[3] =
{
    "::Ice::Object",
    "::Test::Common::BrowserProcessController",
    "::Test::Common::ProcessController"
};
const ::std::string iceC_Test_Common_BrowserProcessController_ops[] =
{
    "getHost",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "redirect",
    "start"
};
const ::std::string iceC_Test_Common_BrowserProcessController_redirect_name = "redirect";

const ::std::string iceC_Test_Common_ProcessControllerRegistry_ids[2] =
{
    "::Ice::Object",
    "::Test::Common::ProcessControllerRegistry"
};
const ::std::string iceC_Test_Common_ProcessControllerRegistry_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setProcessController"
};
const ::std::string iceC_Test_Common_ProcessControllerRegistry_setProcessController_name = "setProcessController";

}

::std::string
Test::Common::TestCasePrx::startServerSide(const ::std::shared_ptr<Config>& iceP_config, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::string>(true, this, &TestCasePrx::_iceI_startServerSide, iceP_config, context).get();
}

::std::future<::std::string>
Test::Common::TestCasePrx::startServerSideAsync(const ::std::shared_ptr<Config>& iceP_config, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::string, ::std::promise>(false, this, &TestCasePrx::_iceI_startServerSide, iceP_config, context);
}

::std::function<void()>
Test::Common::TestCasePrx::startServerSideAsync(const ::std::shared_ptr<Config>& iceP_config,
                                                ::std::function<void (::std::string)> response,
                                                ::std::function<void(::std::exception_ptr)> ex,
                                                ::std::function<void(bool)> sent,
                                                const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::TestCasePrx::_iceI_startServerSide, iceP_config, context);
}

/// \cond INTERNAL
void
Test::Common::TestCasePrx::_iceI_startServerSide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::shared_ptr<Config>& iceP_config, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_TestCase_startServerSide_name);
    outAsync->invoke(iceC_Test_Common_TestCase_startServerSide_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_config);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const TestCaseFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

::std::string
Test::Common::TestCasePrx::stopServerSide(bool iceP_success, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::string>(true, this, &TestCasePrx::_iceI_stopServerSide, iceP_success, context).get();
}

::std::future<::std::string>
Test::Common::TestCasePrx::stopServerSideAsync(bool iceP_success, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::string, ::std::promise>(false, this, &TestCasePrx::_iceI_stopServerSide, iceP_success, context);
}

::std::function<void()>
Test::Common::TestCasePrx::stopServerSideAsync(bool iceP_success,
                                               ::std::function<void (::std::string)> response,
                                               ::std::function<void(::std::exception_ptr)> ex,
                                               ::std::function<void(bool)> sent,
                                               const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::TestCasePrx::_iceI_stopServerSide, iceP_success, context);
}

/// \cond INTERNAL
void
Test::Common::TestCasePrx::_iceI_stopServerSide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, bool iceP_success, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_TestCase_stopServerSide_name);
    outAsync->invoke(iceC_Test_Common_TestCase_stopServerSide_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_success);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const TestCaseFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

::std::string
Test::Common::TestCasePrx::runClientSide(const ::std::string& iceP_host, const ::std::shared_ptr<Config>& iceP_config, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::string>(true, this, &TestCasePrx::_iceI_runClientSide, iceP_host, iceP_config, context).get();
}

::std::future<::std::string>
Test::Common::TestCasePrx::runClientSideAsync(const ::std::string& iceP_host, const ::std::shared_ptr<Config>& iceP_config, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::string, ::std::promise>(false, this, &TestCasePrx::_iceI_runClientSide, iceP_host, iceP_config, context);
}

::std::function<void()>
Test::Common::TestCasePrx::runClientSideAsync(const ::std::string& iceP_host, const ::std::shared_ptr<Config>& iceP_config,
                                              ::std::function<void (::std::string)> response,
                                              ::std::function<void(::std::exception_ptr)> ex,
                                              ::std::function<void(bool)> sent,
                                              const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::TestCasePrx::_iceI_runClientSide, iceP_host, iceP_config, context);
}

/// \cond INTERNAL
void
Test::Common::TestCasePrx::_iceI_runClientSide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::string& iceP_host, const ::std::shared_ptr<Config>& iceP_config, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_TestCase_runClientSide_name);
    outAsync->invoke(iceC_Test_Common_TestCase_runClientSide_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_host, iceP_config);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const TestCaseFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::Common::TestCasePrx::destroy(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestCasePrx::_iceI_destroy, context).get();
}

::std::future<void>
Test::Common::TestCasePrx::destroyAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestCasePrx::_iceI_destroy, context);
}

::std::function<void()>
Test::Common::TestCasePrx::destroyAsync(::std::function<void ()> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::TestCasePrx::_iceI_destroy, context);
}

/// \cond INTERNAL
void
Test::Common::TestCasePrx::_iceI_destroy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Common_TestCase_destroy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::Common::TestCasePrx::ice_staticId()
{
    return TestCase::ice_staticId();
}

::std::shared_ptr<::Test::Common::TestCasePrx>
Test::Common::ControllerPrx::runTestCase(const ::std::string& iceP_mapping, const ::std::string& iceP_testsuite, const ::std::string& iceP_testcase, const ::std::string& iceP_cross, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<TestCasePrx>>(true, this, &ControllerPrx::_iceI_runTestCase, iceP_mapping, iceP_testsuite, iceP_testcase, iceP_cross, context).get();
}

::std::future<::std::shared_ptr<::Test::Common::TestCasePrx>>
Test::Common::ControllerPrx::runTestCaseAsync(const ::std::string& iceP_mapping, const ::std::string& iceP_testsuite, const ::std::string& iceP_testcase, const ::std::string& iceP_cross, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<TestCasePrx>, ::std::promise>(false, this, &ControllerPrx::_iceI_runTestCase, iceP_mapping, iceP_testsuite, iceP_testcase, iceP_cross, context);
}

::std::function<void()>
Test::Common::ControllerPrx::runTestCaseAsync(const ::std::string& iceP_mapping, const ::std::string& iceP_testsuite, const ::std::string& iceP_testcase, const ::std::string& iceP_cross,
                                              ::std::function<void (::std::shared_ptr<::Test::Common::TestCasePrx>)> response,
                                              ::std::function<void(::std::exception_ptr)> ex,
                                              ::std::function<void(bool)> sent,
                                              const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::shared_ptr<TestCasePrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ControllerPrx::_iceI_runTestCase, iceP_mapping, iceP_testsuite, iceP_testcase, iceP_cross, context);
}

/// \cond INTERNAL
void
Test::Common::ControllerPrx::_iceI_runTestCase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<TestCasePrx>>>& outAsync, const ::std::string& iceP_mapping, const ::std::string& iceP_testsuite, const ::std::string& iceP_testcase, const ::std::string& iceP_cross, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_Controller_runTestCase_name);
    outAsync->invoke(iceC_Test_Common_Controller_runTestCase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_mapping, iceP_testsuite, iceP_testcase, iceP_cross);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const TestCaseNotExistException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

::std::shared_ptr<::Test::Common::OptionOverrides>
Test::Common::ControllerPrx::getOptionOverrides(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<OptionOverrides>>(true, this, &ControllerPrx::_iceI_getOptionOverrides, context).get();
}

::std::future<::std::shared_ptr<::Test::Common::OptionOverrides>>
Test::Common::ControllerPrx::getOptionOverridesAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<OptionOverrides>, ::std::promise>(false, this, &ControllerPrx::_iceI_getOptionOverrides, context);
}

::std::function<void()>
Test::Common::ControllerPrx::getOptionOverridesAsync(::std::function<void (::std::shared_ptr<::Test::Common::OptionOverrides>)> response,
                                                     ::std::function<void(::std::exception_ptr)> ex,
                                                     ::std::function<void(bool)> sent,
                                                     const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::shared_ptr<OptionOverrides>>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ControllerPrx::_iceI_getOptionOverrides, context);
}

/// \cond INTERNAL
void
Test::Common::ControllerPrx::_iceI_getOptionOverrides(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<OptionOverrides>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_Controller_getOptionOverrides_name);
    outAsync->invoke(iceC_Test_Common_Controller_getOptionOverrides_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<OptionOverrides> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

::Test::Common::StringSeq
Test::Common::ControllerPrx::getTestSuites(const ::std::string& iceP_mapping, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<StringSeq>(true, this, &ControllerPrx::_iceI_getTestSuites, iceP_mapping, context).get();
}

::std::future<::Test::Common::StringSeq>
Test::Common::ControllerPrx::getTestSuitesAsync(const ::std::string& iceP_mapping, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<StringSeq, ::std::promise>(false, this, &ControllerPrx::_iceI_getTestSuites, iceP_mapping, context);
}

::std::function<void()>
Test::Common::ControllerPrx::getTestSuitesAsync(const ::std::string& iceP_mapping,
                                                ::std::function<void (::Test::Common::StringSeq)> response,
                                                ::std::function<void(::std::exception_ptr)> ex,
                                                ::std::function<void(bool)> sent,
                                                const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<StringSeq>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ControllerPrx::_iceI_getTestSuites, iceP_mapping, context);
}

/// \cond INTERNAL
void
Test::Common::ControllerPrx::_iceI_getTestSuites(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<StringSeq>>& outAsync, const ::std::string& iceP_mapping, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_Controller_getTestSuites_name);
    outAsync->invoke(iceC_Test_Common_Controller_getTestSuites_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_mapping);
        },
        nullptr);
}
/// \endcond

::std::string
Test::Common::ControllerPrx::getHost(const ::std::string& iceP_protocol, bool iceP_ipv6, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::string>(true, this, &ControllerPrx::_iceI_getHost, iceP_protocol, iceP_ipv6, context).get();
}

::std::future<::std::string>
Test::Common::ControllerPrx::getHostAsync(const ::std::string& iceP_protocol, bool iceP_ipv6, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::string, ::std::promise>(false, this, &ControllerPrx::_iceI_getHost, iceP_protocol, iceP_ipv6, context);
}

::std::function<void()>
Test::Common::ControllerPrx::getHostAsync(const ::std::string& iceP_protocol, bool iceP_ipv6,
                                          ::std::function<void (::std::string)> response,
                                          ::std::function<void(::std::exception_ptr)> ex,
                                          ::std::function<void(bool)> sent,
                                          const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ControllerPrx::_iceI_getHost, iceP_protocol, iceP_ipv6, context);
}

/// \cond INTERNAL
void
Test::Common::ControllerPrx::_iceI_getHost(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::string& iceP_protocol, bool iceP_ipv6, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_Controller_getHost_name);
    outAsync->invoke(iceC_Test_Common_Controller_getHost_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_protocol, iceP_ipv6);
        },
        nullptr);
}
/// \endcond

const ::std::string&
Test::Common::ControllerPrx::ice_staticId()
{
    return Controller::ice_staticId();
}

void
Test::Common::ProcessPrx::waitReady(int iceP_timeout, const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &ProcessPrx::_iceI_waitReady, iceP_timeout, context).get();
}

::std::future<void>
Test::Common::ProcessPrx::waitReadyAsync(int iceP_timeout, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ProcessPrx::_iceI_waitReady, iceP_timeout, context);
}

::std::function<void()>
Test::Common::ProcessPrx::waitReadyAsync(int iceP_timeout,
                                         ::std::function<void ()> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessPrx::_iceI_waitReady, iceP_timeout, context);
}

/// \cond INTERNAL
void
Test::Common::ProcessPrx::_iceI_waitReady(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_timeout, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_Process_waitReady_name);
    outAsync->invoke(iceC_Test_Common_Process_waitReady_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_timeout);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ProcessFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

int
Test::Common::ProcessPrx::waitSuccess(int iceP_timeout, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<int>(true, this, &ProcessPrx::_iceI_waitSuccess, iceP_timeout, context).get();
}

::std::future<int>
Test::Common::ProcessPrx::waitSuccessAsync(int iceP_timeout, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<int, ::std::promise>(false, this, &ProcessPrx::_iceI_waitSuccess, iceP_timeout, context);
}

::std::function<void()>
Test::Common::ProcessPrx::waitSuccessAsync(int iceP_timeout,
                                           ::std::function<void (int)> response,
                                           ::std::function<void(::std::exception_ptr)> ex,
                                           ::std::function<void(bool)> sent,
                                           const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessPrx::_iceI_waitSuccess, iceP_timeout, context);
}

/// \cond INTERNAL
void
Test::Common::ProcessPrx::_iceI_waitSuccess(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_timeout, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_Process_waitSuccess_name);
    outAsync->invoke(iceC_Test_Common_Process_waitSuccess_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_timeout);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ProcessFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

::std::string
Test::Common::ProcessPrx::terminate(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::string>(true, this, &ProcessPrx::_iceI_terminate, context).get();
}

::std::future<::std::string>
Test::Common::ProcessPrx::terminateAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::string, ::std::promise>(false, this, &ProcessPrx::_iceI_terminate, context);
}

::std::function<void()>
Test::Common::ProcessPrx::terminateAsync(::std::function<void (::std::string)> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessPrx::_iceI_terminate, context);
}

/// \cond INTERNAL
void
Test::Common::ProcessPrx::_iceI_terminate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_Process_terminate_name);
    outAsync->invoke(iceC_Test_Common_Process_terminate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::Common::ProcessPrx::ice_staticId()
{
    return Process::ice_staticId();
}

::std::shared_ptr<::Test::Common::ProcessPrx>
Test::Common::ProcessControllerPrx::start(const ::std::string& iceP_testsuite, const ::std::string& iceP_exe, const StringSeq& iceP_args, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<ProcessPrx>>(true, this, &ProcessControllerPrx::_iceI_start, iceP_testsuite, iceP_exe, iceP_args, context).get();
}

::std::future<::std::shared_ptr<::Test::Common::ProcessPrx>>
Test::Common::ProcessControllerPrx::startAsync(const ::std::string& iceP_testsuite, const ::std::string& iceP_exe, const StringSeq& iceP_args, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<ProcessPrx>, ::std::promise>(false, this, &ProcessControllerPrx::_iceI_start, iceP_testsuite, iceP_exe, iceP_args, context);
}

::std::function<void()>
Test::Common::ProcessControllerPrx::startAsync(const ::std::string& iceP_testsuite, const ::std::string& iceP_exe, const StringSeq& iceP_args,
                                               ::std::function<void (::std::shared_ptr<::Test::Common::ProcessPrx>)> response,
                                               ::std::function<void(::std::exception_ptr)> ex,
                                               ::std::function<void(bool)> sent,
                                               const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::shared_ptr<ProcessPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessControllerPrx::_iceI_start, iceP_testsuite, iceP_exe, iceP_args, context);
}

/// \cond INTERNAL
void
Test::Common::ProcessControllerPrx::_iceI_start(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<ProcessPrx>>>& outAsync, const ::std::string& iceP_testsuite, const ::std::string& iceP_exe, const StringSeq& iceP_args, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_ProcessController_start_name);
    outAsync->invoke(iceC_Test_Common_ProcessController_start_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_testsuite, iceP_exe, iceP_args);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ProcessFailedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

::std::string
Test::Common::ProcessControllerPrx::getHost(const ::std::string& iceP_protocol, bool iceP_ipv6, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::string>(true, this, &ProcessControllerPrx::_iceI_getHost, iceP_protocol, iceP_ipv6, context).get();
}

::std::future<::std::string>
Test::Common::ProcessControllerPrx::getHostAsync(const ::std::string& iceP_protocol, bool iceP_ipv6, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::string, ::std::promise>(false, this, &ProcessControllerPrx::_iceI_getHost, iceP_protocol, iceP_ipv6, context);
}

::std::function<void()>
Test::Common::ProcessControllerPrx::getHostAsync(const ::std::string& iceP_protocol, bool iceP_ipv6,
                                                 ::std::function<void (::std::string)> response,
                                                 ::std::function<void(::std::exception_ptr)> ex,
                                                 ::std::function<void(bool)> sent,
                                                 const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessControllerPrx::_iceI_getHost, iceP_protocol, iceP_ipv6, context);
}

/// \cond INTERNAL
void
Test::Common::ProcessControllerPrx::_iceI_getHost(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::string& iceP_protocol, bool iceP_ipv6, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Common_ProcessController_getHost_name);
    outAsync->invoke(iceC_Test_Common_ProcessController_getHost_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_protocol, iceP_ipv6);
        },
        nullptr);
}
/// \endcond

const ::std::string&
Test::Common::ProcessControllerPrx::ice_staticId()
{
    return ProcessController::ice_staticId();
}

void
Test::Common::BrowserProcessControllerPrx::redirect(const ::std::string& iceP_url, const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &BrowserProcessControllerPrx::_iceI_redirect, iceP_url, context).get();
}

::std::future<void>
Test::Common::BrowserProcessControllerPrx::redirectAsync(const ::std::string& iceP_url, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &BrowserProcessControllerPrx::_iceI_redirect, iceP_url, context);
}

::std::function<void()>
Test::Common::BrowserProcessControllerPrx::redirectAsync(const ::std::string& iceP_url,
                                                         ::std::function<void ()> response,
                                                         ::std::function<void(::std::exception_ptr)> ex,
                                                         ::std::function<void(bool)> sent,
                                                         const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::BrowserProcessControllerPrx::_iceI_redirect, iceP_url, context);
}

/// \cond INTERNAL
void
Test::Common::BrowserProcessControllerPrx::_iceI_redirect(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_url, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Common_BrowserProcessController_redirect_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_url);
        },
        nullptr);
}
/// \endcond

const ::std::string&
Test::Common::BrowserProcessControllerPrx::ice_staticId()
{
    return BrowserProcessController::ice_staticId();
}

void
Test::Common::ProcessControllerRegistryPrx::setProcessController(const ::std::shared_ptr<ProcessControllerPrx>& iceP_controller, const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &ProcessControllerRegistryPrx::_iceI_setProcessController, iceP_controller, context).get();
}

::std::future<void>
Test::Common::ProcessControllerRegistryPrx::setProcessControllerAsync(const ::std::shared_ptr<ProcessControllerPrx>& iceP_controller, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ProcessControllerRegistryPrx::_iceI_setProcessController, iceP_controller, context);
}

::std::function<void()>
Test::Common::ProcessControllerRegistryPrx::setProcessControllerAsync(const ::std::shared_ptr<ProcessControllerPrx>& iceP_controller,
                                                                      ::std::function<void ()> response,
                                                                      ::std::function<void(::std::exception_ptr)> ex,
                                                                      ::std::function<void(bool)> sent,
                                                                      const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessControllerRegistryPrx::_iceI_setProcessController, iceP_controller, context);
}

/// \cond INTERNAL
void
Test::Common::ProcessControllerRegistryPrx::_iceI_setProcessController(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<ProcessControllerPrx>& iceP_controller, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Common_ProcessControllerRegistry_setProcessController_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_controller);
        },
        nullptr);
}
/// \endcond

const ::std::string&
Test::Common::ProcessControllerRegistryPrx::ice_staticId()
{
    return ProcessControllerRegistry::ice_staticId();
}

Test::Common::Config::~Config()
{
}

const ::std::string&
Test::Common::Config::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::Config";
    return typeId;
}

Test::Common::OptionOverrides::~OptionOverrides()
{
}

const ::std::string&
Test::Common::OptionOverrides::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::OptionOverrides";
    return typeId;
}

Test::Common::TestCaseNotExistException::~TestCaseNotExistException()
{
}

const ::std::string&
Test::Common::TestCaseNotExistException::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::TestCaseNotExistException";
    return typeId;
}

Test::Common::TestCaseFailedException::~TestCaseFailedException()
{
}

const ::std::string&
Test::Common::TestCaseFailedException::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::TestCaseFailedException";
    return typeId;
}

Test::Common::ProcessFailedException::~ProcessFailedException()
{
}

const ::std::string&
Test::Common::ProcessFailedException::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::ProcessFailedException";
    return typeId;
}

bool
Test::Common::TestCase::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_TestCase_ids, iceC_Test_Common_TestCase_ids + 2, s);
}

::std::vector<::std::string>
Test::Common::TestCase::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Common_TestCase_ids[0], &iceC_Test_Common_TestCase_ids[2]);
}

::std::string
Test::Common::TestCase::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::TestCase::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::TestCase";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::TestCase::_iceD_startServerSide(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<Config> iceP_config;
    istr->readAll(iceP_config);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::string ret = this->startServerSide(::std::move(iceP_config), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::TestCase::_iceD_stopServerSide(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_success;
    istr->readAll(iceP_success);
    inS.endReadParams();
    ::std::string ret = this->stopServerSide(iceP_success, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::TestCase::_iceD_runClientSide(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_host;
    ::std::shared_ptr<Config> iceP_config;
    istr->readAll(iceP_host, iceP_config);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::string ret = this->runClientSide(::std::move(iceP_host), ::std::move(iceP_config), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::TestCase::_iceD_destroy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->destroy(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::TestCase::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_TestCase_ops, iceC_Test_Common_TestCase_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_TestCase_ops)
    {
        case 0:
        {
            return _iceD_destroy(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_runClientSide(in, current);
        }
        case 6:
        {
            return _iceD_startServerSide(in, current);
        }
        case 7:
        {
            return _iceD_stopServerSide(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Common::Controller::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_Controller_ids, iceC_Test_Common_Controller_ids + 2, s);
}

::std::vector<::std::string>
Test::Common::Controller::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Common_Controller_ids[0], &iceC_Test_Common_Controller_ids[2]);
}

::std::string
Test::Common::Controller::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::Controller::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::Controller";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::Controller::_iceD_runTestCase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_mapping;
    ::std::string iceP_testsuite;
    ::std::string iceP_testcase;
    ::std::string iceP_cross;
    istr->readAll(iceP_mapping, iceP_testsuite, iceP_testcase, iceP_cross);
    inS.endReadParams();
    ::std::shared_ptr<TestCasePrx> ret = this->runTestCase(::std::move(iceP_mapping), ::std::move(iceP_testsuite), ::std::move(iceP_testcase), ::std::move(iceP_cross), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Controller::_iceD_getOptionOverrides(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<OptionOverrides> ret = this->getOptionOverrides(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Controller::_iceD_getTestSuites(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_mapping;
    istr->readAll(iceP_mapping);
    inS.endReadParams();
    StringSeq ret = this->getTestSuites(::std::move(iceP_mapping), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Controller::_iceD_getHost(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_protocol;
    bool iceP_ipv6;
    istr->readAll(iceP_protocol, iceP_ipv6);
    inS.endReadParams();
    ::std::string ret = this->getHost(::std::move(iceP_protocol), iceP_ipv6, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Controller::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_Controller_ops, iceC_Test_Common_Controller_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_Controller_ops)
    {
        case 0:
        {
            return _iceD_getHost(in, current);
        }
        case 1:
        {
            return _iceD_getOptionOverrides(in, current);
        }
        case 2:
        {
            return _iceD_getTestSuites(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_runTestCase(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Common::Process::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_Process_ids, iceC_Test_Common_Process_ids + 2, s);
}

::std::vector<::std::string>
Test::Common::Process::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Common_Process_ids[0], &iceC_Test_Common_Process_ids[2]);
}

::std::string
Test::Common::Process::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::Process::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::Process";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::Process::_iceD_waitReady(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_timeout;
    istr->readAll(iceP_timeout);
    inS.endReadParams();
    this->waitReady(iceP_timeout, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Process::_iceD_waitSuccess(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_timeout;
    istr->readAll(iceP_timeout);
    inS.endReadParams();
    int ret = this->waitSuccess(iceP_timeout, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Process::_iceD_terminate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->terminate(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::Process::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_Process_ops, iceC_Test_Common_Process_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_Process_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_terminate(in, current);
        }
        case 5:
        {
            return _iceD_waitReady(in, current);
        }
        case 6:
        {
            return _iceD_waitSuccess(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Common::ProcessController::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_ProcessController_ids, iceC_Test_Common_ProcessController_ids + 2, s);
}

::std::vector<::std::string>
Test::Common::ProcessController::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Common_ProcessController_ids[0], &iceC_Test_Common_ProcessController_ids[2]);
}

::std::string
Test::Common::ProcessController::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::ProcessController::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::ProcessController";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::ProcessController::_iceD_start(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_testsuite;
    ::std::string iceP_exe;
    StringSeq iceP_args;
    istr->readAll(iceP_testsuite, iceP_exe, iceP_args);
    inS.endReadParams();
    ::std::shared_ptr<ProcessPrx> ret = this->start(::std::move(iceP_testsuite), ::std::move(iceP_exe), ::std::move(iceP_args), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::ProcessController::_iceD_getHost(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_protocol;
    bool iceP_ipv6;
    istr->readAll(iceP_protocol, iceP_ipv6);
    inS.endReadParams();
    ::std::string ret = this->getHost(::std::move(iceP_protocol), iceP_ipv6, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::ProcessController::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_ProcessController_ops, iceC_Test_Common_ProcessController_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_ProcessController_ops)
    {
        case 0:
        {
            return _iceD_getHost(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_start(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Common::BrowserProcessController::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_BrowserProcessController_ids, iceC_Test_Common_BrowserProcessController_ids + 3, s);
}

::std::vector<::std::string>
Test::Common::BrowserProcessController::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Common_BrowserProcessController_ids[0], &iceC_Test_Common_BrowserProcessController_ids[3]);
}

::std::string
Test::Common::BrowserProcessController::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::BrowserProcessController::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::BrowserProcessController";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::BrowserProcessController::_iceD_redirect(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_url;
    istr->readAll(iceP_url);
    inS.endReadParams();
    this->redirect(::std::move(iceP_url), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::BrowserProcessController::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_BrowserProcessController_ops, iceC_Test_Common_BrowserProcessController_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_BrowserProcessController_ops)
    {
        case 0:
        {
            return _iceD_getHost(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_redirect(in, current);
        }
        case 6:
        {
            return _iceD_start(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Common::ProcessControllerRegistry::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Common_ProcessControllerRegistry_ids, iceC_Test_Common_ProcessControllerRegistry_ids + 2, s);
}

::std::vector<::std::string>
Test::Common::ProcessControllerRegistry::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Common_ProcessControllerRegistry_ids[0], &iceC_Test_Common_ProcessControllerRegistry_ids[2]);
}

::std::string
Test::Common::ProcessControllerRegistry::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Common::ProcessControllerRegistry::ice_staticId()
{
    static const ::std::string typeId = "::Test::Common::ProcessControllerRegistry";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Common::ProcessControllerRegistry::_iceD_setProcessController(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<ProcessControllerPrx> iceP_controller;
    istr->readAll(iceP_controller);
    inS.endReadParams();
    this->setProcessController(::std::move(iceP_controller), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Common::ProcessControllerRegistry::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Common_ProcessControllerRegistry_ops, iceC_Test_Common_ProcessControllerRegistry_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Common_ProcessControllerRegistry_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_setProcessController(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
