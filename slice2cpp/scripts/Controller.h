//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Controller.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Controller_h__
#define __Controller_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{


namespace Common
{

class Config;
class OptionOverrides;
class TestCase;
class TestCasePrx;
class Controller;
class ControllerPrx;
class Process;
class ProcessPrx;
class ProcessController;
class ProcessControllerPrx;
class BrowserProcessController;
class BrowserProcessControllerPrx;
class ProcessControllerRegistry;
class ProcessControllerRegistryPrx;

}

}

namespace Test
{

namespace Common
{

using BoolSeq = ::std::vector<bool>;

using StringSeq = ::std::vector<::std::string>;

class TestCaseNotExistException : public ::Ice::UserExceptionHelper<TestCaseNotExistException, ::Ice::UserException>
{
public:

    virtual ~TestCaseNotExistException();

    TestCaseNotExistException(const TestCaseNotExistException&) = default;

    TestCaseNotExistException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    TestCaseNotExistException(const ::std::string& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string reason;
};

/// \cond INTERNAL
static TestCaseNotExistException _iceS_TestCaseNotExistException_init;
/// \endcond

class TestCaseFailedException : public ::Ice::UserExceptionHelper<TestCaseFailedException, ::Ice::UserException>
{
public:

    virtual ~TestCaseFailedException();

    TestCaseFailedException(const TestCaseFailedException&) = default;

    TestCaseFailedException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    TestCaseFailedException(const ::std::string& output) :
        output(output)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(output);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string output;
};

class ProcessFailedException : public ::Ice::UserExceptionHelper<ProcessFailedException, ::Ice::UserException>
{
public:

    virtual ~ProcessFailedException();

    ProcessFailedException(const ProcessFailedException&) = default;

    ProcessFailedException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    ProcessFailedException(const ::std::string& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string reason;
};

}

}

namespace Test
{

namespace Common
{

class TestCase : public virtual ::Ice::Object
{
public:

    using ProxyType = TestCasePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::string startServerSide(::std::shared_ptr<Config> config, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_startServerSide(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string stopServerSide(bool success, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_stopServerSide(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string runClientSide(::std::string host, ::std::shared_ptr<Config> config, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_runClientSide(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void destroy(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_destroy(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class Controller : public virtual ::Ice::Object
{
public:

    using ProxyType = ControllerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<TestCasePrx> runTestCase(::std::string mapping, ::std::string testsuite, ::std::string testcase, ::std::string cross, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_runTestCase(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<OptionOverrides> getOptionOverrides(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getOptionOverrides(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual StringSeq getTestSuites(::std::string mapping, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getTestSuites(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getHost(::std::string protocol, bool ipv6, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getHost(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class Process : public virtual ::Ice::Object
{
public:

    using ProxyType = ProcessPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void waitReady(int timeout, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_waitReady(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int waitSuccess(int timeout, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_waitSuccess(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string terminate(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_terminate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class ProcessController : public virtual ::Ice::Object
{
public:

    using ProxyType = ProcessControllerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<ProcessPrx> start(::std::string testsuite, ::std::string exe, StringSeq args, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_start(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getHost(::std::string protocol, bool ipv6, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getHost(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class BrowserProcessController : public virtual ProcessController
{
public:

    using ProxyType = BrowserProcessControllerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void redirect(::std::string url, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_redirect(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class ProcessControllerRegistry : public virtual ::Ice::Object
{
public:

    using ProxyType = ProcessControllerRegistryPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void setProcessController(::std::shared_ptr<ProcessControllerPrx> controller, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setProcessController(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

}

namespace Test
{

namespace Common
{

class Config : public ::Ice::ValueHelper<Config, ::Ice::Value>
{
public:

    virtual ~Config();

    Config() = default;

    Config(const Config&) = default;
    Config(Config&&) = default;
    Config& operator=(const Config&) = default;
    Config& operator=(Config&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Config(const std::optional<::std::string>& protocol, const std::optional<bool>& mx, const std::optional<bool>& serialize, const std::optional<bool>& compress, const std::optional<bool>& ipv6, const std::optional<::Test::Common::StringSeq>& cprops, const std::optional<::Test::Common::StringSeq>& sprops) :
        protocol(protocol),
        mx(mx),
        serialize(serialize),
        compress(compress),
        ipv6(ipv6),
        cprops(cprops),
        sprops(sprops)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional<::std::string>&, const std::optional<bool>&, const std::optional<bool>&, const std::optional<bool>&, const std::optional<bool>&, const std::optional<::Test::Common::StringSeq>&, const std::optional<::Test::Common::StringSeq>&> ice_tuple() const
    {
        return std::tie(protocol, mx, serialize, compress, ipv6, cprops, sprops);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional<::std::string> protocol;
    std::optional<bool> mx;
    std::optional<bool> serialize;
    std::optional<bool> compress;
    std::optional<bool> ipv6;
    std::optional<::Test::Common::StringSeq> cprops;
    std::optional<::Test::Common::StringSeq> sprops;
};

/// \cond INTERNAL
static Config _iceS_Config_init;
/// \endcond

class OptionOverrides : public ::Ice::ValueHelper<OptionOverrides, ::Ice::Value>
{
public:

    virtual ~OptionOverrides();

    OptionOverrides() = default;

    OptionOverrides(const OptionOverrides&) = default;
    OptionOverrides(OptionOverrides&&) = default;
    OptionOverrides& operator=(const OptionOverrides&) = default;
    OptionOverrides& operator=(OptionOverrides&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    OptionOverrides(const std::optional<::Test::Common::StringSeq>& protocol, const std::optional<::Test::Common::BoolSeq>& mx, const std::optional<::Test::Common::BoolSeq>& serialize, const std::optional<::Test::Common::BoolSeq>& compress, const std::optional<::Test::Common::BoolSeq>& ipv6) :
        protocol(protocol),
        mx(mx),
        serialize(serialize),
        compress(compress),
        ipv6(ipv6)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional<::Test::Common::StringSeq>&, const std::optional<::Test::Common::BoolSeq>&, const std::optional<::Test::Common::BoolSeq>&, const std::optional<::Test::Common::BoolSeq>&, const std::optional<::Test::Common::BoolSeq>&> ice_tuple() const
    {
        return std::tie(protocol, mx, serialize, compress, ipv6);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional<::Test::Common::StringSeq> protocol;
    std::optional<::Test::Common::BoolSeq> mx;
    std::optional<::Test::Common::BoolSeq> serialize;
    std::optional<::Test::Common::BoolSeq> compress;
    std::optional<::Test::Common::BoolSeq> ipv6;
};

}

}

namespace Test
{

namespace Common
{

class TestCasePrx : public virtual ::Ice::Proxy<TestCasePrx, ::Ice::ObjectPrx>
{
public:

    ::std::string startServerSide(const ::std::shared_ptr<Config>& config, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &TestCasePrx::_iceI_startServerSide, config, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto startServerSideAsync(const ::std::shared_ptr<Config>& config, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &TestCasePrx::_iceI_startServerSide, config, context);
    }

    ::std::function<void()>
    startServerSideAsync(const ::std::shared_ptr<Config>& config,
                         ::std::function<void(::std::string)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::TestCasePrx::_iceI_startServerSide, config, context);
    }

    /// \cond INTERNAL
    void _iceI_startServerSide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::std::shared_ptr<Config>&, const ::Ice::Context&);
    /// \endcond

    ::std::string stopServerSide(bool success, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &TestCasePrx::_iceI_stopServerSide, success, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto stopServerSideAsync(bool success, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &TestCasePrx::_iceI_stopServerSide, success, context);
    }

    ::std::function<void()>
    stopServerSideAsync(bool success,
                        ::std::function<void(::std::string)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::TestCasePrx::_iceI_stopServerSide, success, context);
    }

    /// \cond INTERNAL
    void _iceI_stopServerSide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, bool, const ::Ice::Context&);
    /// \endcond

    ::std::string runClientSide(const ::std::string& host, const ::std::shared_ptr<Config>& config, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &TestCasePrx::_iceI_runClientSide, host, config, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto runClientSideAsync(const ::std::string& host, const ::std::shared_ptr<Config>& config, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &TestCasePrx::_iceI_runClientSide, host, config, context);
    }

    ::std::function<void()>
    runClientSideAsync(const ::std::string& host, const ::std::shared_ptr<Config>& config,
                       ::std::function<void(::std::string)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::TestCasePrx::_iceI_runClientSide, host, config, context);
    }

    /// \cond INTERNAL
    void _iceI_runClientSide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::std::string&, const ::std::shared_ptr<Config>&, const ::Ice::Context&);
    /// \endcond

    void destroy(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TestCasePrx::_iceI_destroy, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto destroyAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TestCasePrx::_iceI_destroy, context);
    }

    ::std::function<void()>
    destroyAsync(::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::TestCasePrx::_iceI_destroy, context);
    }

    /// \cond INTERNAL
    void _iceI_destroy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    TestCasePrx() = default;
    friend ::std::shared_ptr<TestCasePrx> IceInternal::createProxy<TestCasePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class ControllerPrx : public virtual ::Ice::Proxy<ControllerPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<TestCasePrx> runTestCase(const ::std::string& mapping, const ::std::string& testsuite, const ::std::string& testcase, const ::std::string& cross, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Common::TestCasePrx>>(true, this, &ControllerPrx::_iceI_runTestCase, mapping, testsuite, testcase, cross, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto runTestCaseAsync(const ::std::string& mapping, const ::std::string& testsuite, const ::std::string& testcase, const ::std::string& cross, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::Common::TestCasePrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Common::TestCasePrx>, P>(false, this, &ControllerPrx::_iceI_runTestCase, mapping, testsuite, testcase, cross, context);
    }

    ::std::function<void()>
    runTestCaseAsync(const ::std::string& mapping, const ::std::string& testsuite, const ::std::string& testcase, const ::std::string& cross,
                     ::std::function<void(::std::shared_ptr<::Test::Common::TestCasePrx>)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::Common::TestCasePrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ControllerPrx::_iceI_runTestCase, mapping, testsuite, testcase, cross, context);
    }

    /// \cond INTERNAL
    void _iceI_runTestCase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Common::TestCasePrx>>>&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<OptionOverrides> getOptionOverrides(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Common::OptionOverrides>>(true, this, &ControllerPrx::_iceI_getOptionOverrides, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getOptionOverridesAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::Common::OptionOverrides>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Common::OptionOverrides>, P>(false, this, &ControllerPrx::_iceI_getOptionOverrides, context);
    }

    ::std::function<void()>
    getOptionOverridesAsync(::std::function<void(::std::shared_ptr<::Test::Common::OptionOverrides>)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::Common::OptionOverrides>>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ControllerPrx::_iceI_getOptionOverrides, context);
    }

    /// \cond INTERNAL
    void _iceI_getOptionOverrides(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Common::OptionOverrides>>>&, const ::Ice::Context&);
    /// \endcond

    StringSeq getTestSuites(const ::std::string& mapping, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::Common::StringSeq>(true, this, &ControllerPrx::_iceI_getTestSuites, mapping, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getTestSuitesAsync(const ::std::string& mapping, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::Common::StringSeq>>().get_future())
    {
        return _makePromiseOutgoing<::Test::Common::StringSeq, P>(false, this, &ControllerPrx::_iceI_getTestSuites, mapping, context);
    }

    ::std::function<void()>
    getTestSuitesAsync(const ::std::string& mapping,
                       ::std::function<void(::Test::Common::StringSeq)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::Test::Common::StringSeq>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ControllerPrx::_iceI_getTestSuites, mapping, context);
    }

    /// \cond INTERNAL
    void _iceI_getTestSuites(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::Common::StringSeq>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::string getHost(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &ControllerPrx::_iceI_getHost, protocol, ipv6, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getHostAsync(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &ControllerPrx::_iceI_getHost, protocol, ipv6, context);
    }

    ::std::function<void()>
    getHostAsync(const ::std::string& protocol, bool ipv6,
                 ::std::function<void(::std::string)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ControllerPrx::_iceI_getHost, protocol, ipv6, context);
    }

    /// \cond INTERNAL
    void _iceI_getHost(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::std::string&, bool, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ControllerPrx() = default;
    friend ::std::shared_ptr<ControllerPrx> IceInternal::createProxy<ControllerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class ProcessPrx : public virtual ::Ice::Proxy<ProcessPrx, ::Ice::ObjectPrx>
{
public:

    void waitReady(int timeout, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ProcessPrx::_iceI_waitReady, timeout, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto waitReadyAsync(int timeout, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ProcessPrx::_iceI_waitReady, timeout, context);
    }

    ::std::function<void()>
    waitReadyAsync(int timeout,
                   ::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessPrx::_iceI_waitReady, timeout, context);
    }

    /// \cond INTERNAL
    void _iceI_waitReady(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::Ice::Context&);
    /// \endcond

    int waitSuccess(int timeout, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &ProcessPrx::_iceI_waitSuccess, timeout, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto waitSuccessAsync(int timeout, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &ProcessPrx::_iceI_waitSuccess, timeout, context);
    }

    ::std::function<void()>
    waitSuccessAsync(int timeout,
                     ::std::function<void(int)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessPrx::_iceI_waitSuccess, timeout, context);
    }

    /// \cond INTERNAL
    void _iceI_waitSuccess(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, const ::Ice::Context&);
    /// \endcond

    ::std::string terminate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &ProcessPrx::_iceI_terminate, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto terminateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &ProcessPrx::_iceI_terminate, context);
    }

    ::std::function<void()>
    terminateAsync(::std::function<void(::std::string)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessPrx::_iceI_terminate, context);
    }

    /// \cond INTERNAL
    void _iceI_terminate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ProcessPrx() = default;
    friend ::std::shared_ptr<ProcessPrx> IceInternal::createProxy<ProcessPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class ProcessControllerPrx : public virtual ::Ice::Proxy<ProcessControllerPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<ProcessPrx> start(const ::std::string& testsuite, const ::std::string& exe, const StringSeq& args, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Common::ProcessPrx>>(true, this, &ProcessControllerPrx::_iceI_start, testsuite, exe, args, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto startAsync(const ::std::string& testsuite, const ::std::string& exe, const StringSeq& args, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::Common::ProcessPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Common::ProcessPrx>, P>(false, this, &ProcessControllerPrx::_iceI_start, testsuite, exe, args, context);
    }

    ::std::function<void()>
    startAsync(const ::std::string& testsuite, const ::std::string& exe, const StringSeq& args,
               ::std::function<void(::std::shared_ptr<::Test::Common::ProcessPrx>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::Common::ProcessPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessControllerPrx::_iceI_start, testsuite, exe, args, context);
    }

    /// \cond INTERNAL
    void _iceI_start(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Common::ProcessPrx>>>&, const ::std::string&, const ::std::string&, const StringSeq&, const ::Ice::Context&);
    /// \endcond

    ::std::string getHost(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &ProcessControllerPrx::_iceI_getHost, protocol, ipv6, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getHostAsync(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &ProcessControllerPrx::_iceI_getHost, protocol, ipv6, context);
    }

    ::std::function<void()>
    getHostAsync(const ::std::string& protocol, bool ipv6,
                 ::std::function<void(::std::string)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessControllerPrx::_iceI_getHost, protocol, ipv6, context);
    }

    /// \cond INTERNAL
    void _iceI_getHost(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::std::string&, bool, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ProcessControllerPrx() = default;
    friend ::std::shared_ptr<ProcessControllerPrx> IceInternal::createProxy<ProcessControllerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class BrowserProcessControllerPrx : public virtual ::Ice::Proxy<BrowserProcessControllerPrx, ProcessControllerPrx>
{
public:

    void redirect(const ::std::string& url, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &BrowserProcessControllerPrx::_iceI_redirect, url, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto redirectAsync(const ::std::string& url, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &BrowserProcessControllerPrx::_iceI_redirect, url, context);
    }

    ::std::function<void()>
    redirectAsync(const ::std::string& url,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::BrowserProcessControllerPrx::_iceI_redirect, url, context);
    }

    /// \cond INTERNAL
    void _iceI_redirect(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    BrowserProcessControllerPrx() = default;
    friend ::std::shared_ptr<BrowserProcessControllerPrx> IceInternal::createProxy<BrowserProcessControllerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class ProcessControllerRegistryPrx : public virtual ::Ice::Proxy<ProcessControllerRegistryPrx, ::Ice::ObjectPrx>
{
public:

    void setProcessController(const ::std::shared_ptr<ProcessControllerPrx>& controller, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ProcessControllerRegistryPrx::_iceI_setProcessController, controller, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setProcessControllerAsync(const ::std::shared_ptr<ProcessControllerPrx>& controller, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ProcessControllerRegistryPrx::_iceI_setProcessController, controller, context);
    }

    ::std::function<void()>
    setProcessControllerAsync(const ::std::shared_ptr<ProcessControllerPrx>& controller,
                              ::std::function<void()> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessControllerRegistryPrx::_iceI_setProcessController, controller, context);
    }

    /// \cond INTERNAL
    void _iceI_setProcessController(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<ProcessControllerPrx>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ProcessControllerRegistryPrx() = default;
    friend ::std::shared_ptr<ProcessControllerRegistryPrx> IceInternal::createProxy<ProcessControllerRegistryPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter<::Test::Common::Config, S>
{
    static void write(S* ostr, const ::Test::Common::Config& v)
    {
        ostr->writeAll({1, 2, 3, 4, 5, 6, 7}, v.protocol, v.mx, v.serialize, v.compress, v.ipv6, v.cprops, v.sprops);
    }
};

template<typename S>
struct StreamReader<::Test::Common::Config, S>
{
    static void read(S* istr, ::Test::Common::Config& v)
    {
        istr->readAll({1, 2, 3, 4, 5, 6, 7}, v.protocol, v.mx, v.serialize, v.compress, v.ipv6, v.cprops, v.sprops);
    }
};

template<typename S>
struct StreamWriter<::Test::Common::OptionOverrides, S>
{
    static void write(S* ostr, const ::Test::Common::OptionOverrides& v)
    {
        ostr->writeAll({1, 2, 3, 4, 5}, v.protocol, v.mx, v.serialize, v.compress, v.ipv6);
    }
};

template<typename S>
struct StreamReader<::Test::Common::OptionOverrides, S>
{
    static void read(S* istr, ::Test::Common::OptionOverrides& v)
    {
        istr->readAll({1, 2, 3, 4, 5}, v.protocol, v.mx, v.serialize, v.compress, v.ipv6);
    }
};

template<typename S>
struct StreamReader<::Test::Common::TestCaseNotExistException, S>
{
    static void read(S* istr, ::Test::Common::TestCaseNotExistException& v)
    {
        istr->readAll(v.reason);
    }
};

template<typename S>
struct StreamReader<::Test::Common::TestCaseFailedException, S>
{
    static void read(S* istr, ::Test::Common::TestCaseFailedException& v)
    {
        istr->readAll(v.output);
    }
};

template<typename S>
struct StreamReader<::Test::Common::ProcessFailedException, S>
{
    static void read(S* istr, ::Test::Common::ProcessFailedException& v)
    {
        istr->readAll(v.reason);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

/// \cond INTERNAL
namespace Common
{

using ConfigPtr = ::std::shared_ptr<Config>;

using OptionOverridesPtr = ::std::shared_ptr<OptionOverrides>;

using TestCasePtr = ::std::shared_ptr<TestCase>;
using TestCasePrxPtr = ::std::shared_ptr<TestCasePrx>;

using ControllerPtr = ::std::shared_ptr<Controller>;
using ControllerPrxPtr = ::std::shared_ptr<ControllerPrx>;

using ProcessPtr = ::std::shared_ptr<Process>;
using ProcessPrxPtr = ::std::shared_ptr<ProcessPrx>;

using ProcessControllerPtr = ::std::shared_ptr<ProcessController>;
using ProcessControllerPrxPtr = ::std::shared_ptr<ProcessControllerPrx>;

using BrowserProcessControllerPtr = ::std::shared_ptr<BrowserProcessController>;
using BrowserProcessControllerPrxPtr = ::std::shared_ptr<BrowserProcessControllerPrx>;

using ProcessControllerRegistryPtr = ::std::shared_ptr<ProcessControllerRegistry>;
using ProcessControllerRegistryPrxPtr = ::std::shared_ptr<ProcessControllerRegistryPrx>;

}
/// \endcond

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
