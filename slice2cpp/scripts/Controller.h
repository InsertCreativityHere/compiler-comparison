//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Controller.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Controller_h__
#define __Controller_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{


namespace Common
{


using BoolSeq = ::std::vector<bool>;

using StringSeq = ::std::vector<::std::string>;
class Config;

using ConfigPtr = ::std::shared_ptr<Config>;
class OptionOverrides;

using OptionOverridesPtr = ::std::shared_ptr<OptionOverrides>;
class TestCasePrx;

using TestCasePrxPtr = ::std::optional<TestCasePrx>;
class ControllerPrx;

using ControllerPrxPtr = ::std::optional<ControllerPrx>;
class ProcessPrx;

using ProcessPrxPtr = ::std::optional<ProcessPrx>;
class ProcessControllerPrx;

using ProcessControllerPrxPtr = ::std::optional<ProcessControllerPrx>;
class BrowserProcessControllerPrx;

using BrowserProcessControllerPrxPtr = ::std::optional<BrowserProcessControllerPrx>;
class ProcessControllerRegistryPrx;

using ProcessControllerRegistryPrxPtr = ::std::optional<ProcessControllerRegistryPrx>;

}

}

namespace Test
{

namespace Common
{

class TestCasePrx : public ::Ice::Proxy<TestCasePrx, ::Ice::ObjectPrx>
{
public:

    ::std::string startServerSide(const ::std::shared_ptr<Config>& config, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::string> startServerSideAsync(const ::std::shared_ptr<Config>& config, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    startServerSideAsync(const ::std::shared_ptr<Config>& config, ::std::function<void(::std::string)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_startServerSide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::std::shared_ptr<Config>&, const ::Ice::Context&) const;
    /// \endcond

    ::std::string stopServerSide(bool success, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::string> stopServerSideAsync(bool success, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    stopServerSideAsync(bool success, ::std::function<void(::std::string)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_stopServerSide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, bool, const ::Ice::Context&) const;
    /// \endcond

    ::std::string runClientSide(::std::string_view host, const ::std::shared_ptr<Config>& config, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::string> runClientSideAsync(::std::string_view host, const ::std::shared_ptr<Config>& config, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    runClientSideAsync(::std::string_view host, const ::std::shared_ptr<Config>& config, ::std::function<void(::std::string)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_runClientSide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, ::std::string_view, const ::std::shared_ptr<Config>&, const ::Ice::Context&) const;
    /// \endcond

    void destroy(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> destroyAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    destroyAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_destroy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    explicit TestCasePrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    TestCasePrx(const TestCasePrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    TestCasePrx(TestCasePrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    TestCasePrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    TestCasePrx& operator=(const TestCasePrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    TestCasePrx& operator=(TestCasePrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static TestCasePrx _fromReference(::IceInternal::ReferencePtr ref) { return TestCasePrx(::std::move(ref)); }

protected:

    TestCasePrx() = default;

    explicit TestCasePrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

class ControllerPrx : public ::Ice::Proxy<ControllerPrx, ::Ice::ObjectPrx>
{
public:

    ::std::optional<TestCasePrx> runTestCase(::std::string_view mapping, ::std::string_view testsuite, ::std::string_view testcase, ::std::string_view cross, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::optional<TestCasePrx>> runTestCaseAsync(::std::string_view mapping, ::std::string_view testsuite, ::std::string_view testcase, ::std::string_view cross, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    runTestCaseAsync(::std::string_view mapping, ::std::string_view testsuite, ::std::string_view testcase, ::std::string_view cross, ::std::function<void(::std::optional<::Test::Common::TestCasePrx>)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_runTestCase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<TestCasePrx>>>&, ::std::string_view, ::std::string_view, ::std::string_view, ::std::string_view, const ::Ice::Context&) const;
    /// \endcond

    ::std::shared_ptr<OptionOverrides> getOptionOverrides(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::shared_ptr<OptionOverrides>> getOptionOverridesAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    getOptionOverridesAsync(::std::function<void(::std::shared_ptr<::Test::Common::OptionOverrides>)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getOptionOverrides(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<OptionOverrides>>>&, const ::Ice::Context&) const;
    /// \endcond

    StringSeq getTestSuites(::std::string_view mapping, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<StringSeq> getTestSuitesAsync(::std::string_view mapping, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    getTestSuitesAsync(::std::string_view mapping, ::std::function<void(::Test::Common::StringSeq)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getTestSuites(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<StringSeq>>&, ::std::string_view, const ::Ice::Context&) const;
    /// \endcond

    ::std::string getHost(::std::string_view protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::string> getHostAsync(::std::string_view protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    getHostAsync(::std::string_view protocol, bool ipv6, ::std::function<void(::std::string)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getHost(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, ::std::string_view, bool, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    explicit ControllerPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    ControllerPrx(const ControllerPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    ControllerPrx(ControllerPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    ControllerPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    ControllerPrx& operator=(const ControllerPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    ControllerPrx& operator=(ControllerPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static ControllerPrx _fromReference(::IceInternal::ReferencePtr ref) { return ControllerPrx(::std::move(ref)); }

protected:

    ControllerPrx() = default;

    explicit ControllerPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

class ProcessPrx : public ::Ice::Proxy<ProcessPrx, ::Ice::ObjectPrx>
{
public:

    void waitReady(::std::int32_t timeout, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> waitReadyAsync(::std::int32_t timeout, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    waitReadyAsync(::std::int32_t timeout, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_waitReady(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    ::std::int32_t waitSuccess(::std::int32_t timeout, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::int32_t> waitSuccessAsync(::std::int32_t timeout, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    waitSuccessAsync(::std::int32_t timeout, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_waitSuccess(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>&, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    ::std::string terminate(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::string> terminateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    terminateAsync(::std::function<void(::std::string)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_terminate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    explicit ProcessPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    ProcessPrx(const ProcessPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    ProcessPrx(ProcessPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    ProcessPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    ProcessPrx& operator=(const ProcessPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    ProcessPrx& operator=(ProcessPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static ProcessPrx _fromReference(::IceInternal::ReferencePtr ref) { return ProcessPrx(::std::move(ref)); }

protected:

    ProcessPrx() = default;

    explicit ProcessPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

class ProcessControllerPrx : public ::Ice::Proxy<ProcessControllerPrx, ::Ice::ObjectPrx>
{
public:

    ::std::optional<ProcessPrx> start(::std::string_view testsuite, ::std::string_view exe, const StringSeq& args, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::optional<ProcessPrx>> startAsync(::std::string_view testsuite, ::std::string_view exe, const StringSeq& args, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    startAsync(::std::string_view testsuite, ::std::string_view exe, const StringSeq& args, ::std::function<void(::std::optional<::Test::Common::ProcessPrx>)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_start(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<ProcessPrx>>>&, ::std::string_view, ::std::string_view, const StringSeq&, const ::Ice::Context&) const;
    /// \endcond

    ::std::string getHost(::std::string_view protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::string> getHostAsync(::std::string_view protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    getHostAsync(::std::string_view protocol, bool ipv6, ::std::function<void(::std::string)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getHost(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, ::std::string_view, bool, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    explicit ProcessControllerPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    ProcessControllerPrx(const ProcessControllerPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    ProcessControllerPrx(ProcessControllerPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    ProcessControllerPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    ProcessControllerPrx& operator=(const ProcessControllerPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    ProcessControllerPrx& operator=(ProcessControllerPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static ProcessControllerPrx _fromReference(::IceInternal::ReferencePtr ref) { return ProcessControllerPrx(::std::move(ref)); }

protected:

    ProcessControllerPrx() = default;

    explicit ProcessControllerPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

class BrowserProcessControllerPrx : public ::Ice::Proxy<BrowserProcessControllerPrx, ProcessControllerPrx>
{
public:

    void redirect(::std::string_view url, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> redirectAsync(::std::string_view url, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    redirectAsync(::std::string_view url, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_redirect(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, ::std::string_view, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

#if defined(__GNUC__)
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wextra" // initialize all virtual bases in correct order
#endif

    explicit BrowserProcessControllerPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    BrowserProcessControllerPrx(const BrowserProcessControllerPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    BrowserProcessControllerPrx(BrowserProcessControllerPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    BrowserProcessControllerPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    BrowserProcessControllerPrx& operator=(const BrowserProcessControllerPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    BrowserProcessControllerPrx& operator=(BrowserProcessControllerPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static BrowserProcessControllerPrx _fromReference(::IceInternal::ReferencePtr ref) { return BrowserProcessControllerPrx(::std::move(ref)); }

protected:

    BrowserProcessControllerPrx() = default;

    explicit BrowserProcessControllerPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond

#if defined(__GNUC__)
#   pragma GCC diagnostic pop
#endif
};

class ProcessControllerRegistryPrx : public ::Ice::Proxy<ProcessControllerRegistryPrx, ::Ice::ObjectPrx>
{
public:

    void setProcessController(const ::std::optional<ProcessControllerPrx>& controller, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> setProcessControllerAsync(const ::std::optional<ProcessControllerPrx>& controller, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    setProcessControllerAsync(const ::std::optional<ProcessControllerPrx>& controller, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_setProcessController(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::optional<ProcessControllerPrx>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    explicit ProcessControllerRegistryPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    ProcessControllerRegistryPrx(const ProcessControllerRegistryPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    ProcessControllerRegistryPrx(ProcessControllerRegistryPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    ProcessControllerRegistryPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    ProcessControllerRegistryPrx& operator=(const ProcessControllerRegistryPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    ProcessControllerRegistryPrx& operator=(ProcessControllerRegistryPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static ProcessControllerRegistryPrx _fromReference(::IceInternal::ReferencePtr ref) { return ProcessControllerRegistryPrx(::std::move(ref)); }

protected:

    ProcessControllerRegistryPrx() = default;

    explicit ProcessControllerRegistryPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

}

namespace Test
{

namespace Common
{

class Config : public ::Ice::ValueHelper<Config, ::Ice::Value>
{
public:

    virtual ~Config();

    Config() = default;

    Config(const Config&) = default;
    Config(Config&&) = default;
    Config& operator=(const Config&) = default;
    Config& operator=(Config&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Config(::std::optional<::std::string_view> protocol, ::std::optional<bool> mx, ::std::optional<bool> serialize, ::std::optional<bool> compress, ::std::optional<bool> ipv6, const ::std::optional<::Test::Common::StringSeq>& cprops, const ::std::optional<::Test::Common::StringSeq>& sprops) :
        protocol(protocol),
        mx(mx),
        serialize(serialize),
        compress(compress),
        ipv6(ipv6),
        cprops(cprops),
        sprops(sprops)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::optional<::std::string>&, const ::std::optional<bool>&, const ::std::optional<bool>&, const ::std::optional<bool>&, const ::std::optional<bool>&, const ::std::optional<::Test::Common::StringSeq>&, const ::std::optional<::Test::Common::StringSeq>&> ice_tuple() const
    {
        return std::tie(protocol, mx, serialize, compress, ipv6, cprops, sprops);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    ::std::optional<::std::string> protocol;
    ::std::optional<bool> mx;
    ::std::optional<bool> serialize;
    ::std::optional<bool> compress;
    ::std::optional<bool> ipv6;
    ::std::optional<::Test::Common::StringSeq> cprops;
    ::std::optional<::Test::Common::StringSeq> sprops;
};

/// \cond INTERNAL
static Config _iceS_Config_init;
/// \endcond

class OptionOverrides : public ::Ice::ValueHelper<OptionOverrides, ::Ice::Value>
{
public:

    virtual ~OptionOverrides();

    OptionOverrides() = default;

    OptionOverrides(const OptionOverrides&) = default;
    OptionOverrides(OptionOverrides&&) = default;
    OptionOverrides& operator=(const OptionOverrides&) = default;
    OptionOverrides& operator=(OptionOverrides&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    OptionOverrides(const ::std::optional<::Test::Common::StringSeq>& protocol, const ::std::optional<::Test::Common::BoolSeq>& mx, const ::std::optional<::Test::Common::BoolSeq>& serialize, const ::std::optional<::Test::Common::BoolSeq>& compress, const ::std::optional<::Test::Common::BoolSeq>& ipv6) :
        protocol(protocol),
        mx(mx),
        serialize(serialize),
        compress(compress),
        ipv6(ipv6)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::optional<::Test::Common::StringSeq>&, const ::std::optional<::Test::Common::BoolSeq>&, const ::std::optional<::Test::Common::BoolSeq>&, const ::std::optional<::Test::Common::BoolSeq>&, const ::std::optional<::Test::Common::BoolSeq>&> ice_tuple() const
    {
        return std::tie(protocol, mx, serialize, compress, ipv6);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    ::std::optional<::Test::Common::StringSeq> protocol;
    ::std::optional<::Test::Common::BoolSeq> mx;
    ::std::optional<::Test::Common::BoolSeq> serialize;
    ::std::optional<::Test::Common::BoolSeq> compress;
    ::std::optional<::Test::Common::BoolSeq> ipv6;
};

class TestCaseNotExistException : public ::Ice::UserExceptionHelper<TestCaseNotExistException, ::Ice::UserException>
{
public:

    virtual ~TestCaseNotExistException();

    TestCaseNotExistException(const TestCaseNotExistException&) = default;

    TestCaseNotExistException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    TestCaseNotExistException(::std::string_view reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    ::std::string reason;
};

class TestCaseFailedException : public ::Ice::UserExceptionHelper<TestCaseFailedException, ::Ice::UserException>
{
public:

    virtual ~TestCaseFailedException();

    TestCaseFailedException(const TestCaseFailedException&) = default;

    TestCaseFailedException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    TestCaseFailedException(::std::string_view output) :
        output(output)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(output);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    ::std::string output;
};

class ProcessFailedException : public ::Ice::UserExceptionHelper<ProcessFailedException, ::Ice::UserException>
{
public:

    virtual ~ProcessFailedException();

    ProcessFailedException(const ProcessFailedException&) = default;

    ProcessFailedException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    ProcessFailedException(::std::string_view reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    ::std::string reason;
};

}

}

namespace Test
{

namespace Common
{

class TestCase : public virtual ::Ice::Object
{
public:

    using ProxyType = TestCasePrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    virtual ::std::string startServerSide(::std::shared_ptr<Config> config, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_startServerSide(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::std::string stopServerSide(bool success, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_stopServerSide(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::std::string runClientSide(::std::string host, ::std::shared_ptr<Config> config, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_runClientSide(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual void destroy(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_destroy(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using TestCasePtr = ::std::shared_ptr<TestCase>;

class Controller : public virtual ::Ice::Object
{
public:

    using ProxyType = ControllerPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    virtual ::std::optional<TestCasePrx> runTestCase(::std::string mapping, ::std::string testsuite, ::std::string testcase, ::std::string cross, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_runTestCase(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::std::shared_ptr<OptionOverrides> getOptionOverrides(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_getOptionOverrides(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual StringSeq getTestSuites(::std::string mapping, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_getTestSuites(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::std::string getHost(::std::string protocol, bool ipv6, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_getHost(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using ControllerPtr = ::std::shared_ptr<Controller>;

class Process : public virtual ::Ice::Object
{
public:

    using ProxyType = ProcessPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    virtual void waitReady(::std::int32_t timeout, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_waitReady(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::std::int32_t waitSuccess(::std::int32_t timeout, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_waitSuccess(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::std::string terminate(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_terminate(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using ProcessPtr = ::std::shared_ptr<Process>;

class ProcessController : public virtual ::Ice::Object
{
public:

    using ProxyType = ProcessControllerPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    virtual ::std::optional<ProcessPrx> start(::std::string testsuite, ::std::string exe, StringSeq args, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_start(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::std::string getHost(::std::string protocol, bool ipv6, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_getHost(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using ProcessControllerPtr = ::std::shared_ptr<ProcessController>;

class BrowserProcessController : public virtual ProcessController
{
public:

    using ProxyType = BrowserProcessControllerPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    virtual void redirect(::std::string url, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_redirect(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using BrowserProcessControllerPtr = ::std::shared_ptr<BrowserProcessController>;

class ProcessControllerRegistry : public virtual ::Ice::Object
{
public:

    using ProxyType = ProcessControllerRegistryPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    virtual void setProcessController(::std::optional<ProcessControllerPrx> controller, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_setProcessController(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using ProcessControllerRegistryPtr = ::std::shared_ptr<ProcessControllerRegistry>;

}

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter<::Test::Common::Config, S>
{
    static void write(S* ostr, const ::Test::Common::Config& v)
    {
        ostr->writeAll({1, 2, 3, 4, 5, 6, 7}, v.protocol, v.mx, v.serialize, v.compress, v.ipv6, v.cprops, v.sprops);
    }
};

template<typename S>
struct StreamReader<::Test::Common::Config, S>
{
    static void read(S* istr, ::Test::Common::Config& v)
    {
        istr->readAll({1, 2, 3, 4, 5, 6, 7}, v.protocol, v.mx, v.serialize, v.compress, v.ipv6, v.cprops, v.sprops);
    }
};

template<typename S>
struct StreamWriter<::Test::Common::OptionOverrides, S>
{
    static void write(S* ostr, const ::Test::Common::OptionOverrides& v)
    {
        ostr->writeAll({1, 2, 3, 4, 5}, v.protocol, v.mx, v.serialize, v.compress, v.ipv6);
    }
};

template<typename S>
struct StreamReader<::Test::Common::OptionOverrides, S>
{
    static void read(S* istr, ::Test::Common::OptionOverrides& v)
    {
        istr->readAll({1, 2, 3, 4, 5}, v.protocol, v.mx, v.serialize, v.compress, v.ipv6);
    }
};

template<typename S>
struct StreamReader<::Test::Common::TestCaseNotExistException, S>
{
    static void read(S* istr, ::Test::Common::TestCaseNotExistException& v)
    {
        istr->readAll(v.reason);
    }
};

template<typename S>
struct StreamReader<::Test::Common::TestCaseFailedException, S>
{
    static void read(S* istr, ::Test::Common::TestCaseFailedException& v)
    {
        istr->readAll(v.output);
    }
};

template<typename S>
struct StreamReader<::Test::Common::ProcessFailedException, S>
{
    static void read(S* istr, ::Test::Common::ProcessFailedException& v)
    {
        istr->readAll(v.reason);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
