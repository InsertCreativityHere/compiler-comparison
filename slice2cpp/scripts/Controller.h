//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Controller.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Controller_h__
#define __Controller_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{


namespace Common
{

class Config;
class OptionOverrides;
class TestCase;
class TestCasePrx;
class Controller;
class ControllerPrx;
class Process;
class ProcessPrx;
class ProcessController;
class ProcessControllerPrx;
class BrowserProcessController;
class BrowserProcessControllerPrx;
class ProcessControllerRegistry;
class ProcessControllerRegistryPrx;

}

}

namespace Test
{

namespace Common
{

using BoolSeq = ::std::vector<bool>;

using StringSeq = ::std::vector<::std::string>;

class TestCaseNotExistException : public ::Ice::UserExceptionHelper<TestCaseNotExistException, ::Ice::UserException>
{
public:

    virtual ~TestCaseNotExistException();

    TestCaseNotExistException(const TestCaseNotExistException&) = default;

    TestCaseNotExistException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    TestCaseNotExistException(const ::std::string& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string reason;
};

/// \cond INTERNAL
static TestCaseNotExistException _iceS_TestCaseNotExistException_init;
/// \endcond

class TestCaseFailedException : public ::Ice::UserExceptionHelper<TestCaseFailedException, ::Ice::UserException>
{
public:

    virtual ~TestCaseFailedException();

    TestCaseFailedException(const TestCaseFailedException&) = default;

    TestCaseFailedException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    TestCaseFailedException(const ::std::string& output) :
        output(output)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(output);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string output;
};

class ProcessFailedException : public ::Ice::UserExceptionHelper<ProcessFailedException, ::Ice::UserException>
{
public:

    virtual ~ProcessFailedException();

    ProcessFailedException(const ProcessFailedException&) = default;

    ProcessFailedException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    ProcessFailedException(const ::std::string& reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string reason;
};

}

}

namespace Test
{

namespace Common
{

class TestCase : public virtual ::Ice::Object
{
public:

    using ProxyType = TestCasePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::string startServerSide(::std::shared_ptr<Config> config, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_startServerSide(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string stopServerSide(bool success, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_stopServerSide(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string runClientSide(::std::string host, ::std::shared_ptr<Config> config, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_runClientSide(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void destroy(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_destroy(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class Controller : public virtual ::Ice::Object
{
public:

    using ProxyType = ControllerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<TestCasePrx> runTestCase(::std::string mapping, ::std::string testsuite, ::std::string testcase, ::std::string cross, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_runTestCase(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<OptionOverrides> getOptionOverrides(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getOptionOverrides(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual StringSeq getTestSuites(::std::string mapping, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getTestSuites(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getHost(::std::string protocol, bool ipv6, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getHost(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class Process : public virtual ::Ice::Object
{
public:

    using ProxyType = ProcessPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void waitReady(int timeout, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_waitReady(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int waitSuccess(int timeout, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_waitSuccess(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string terminate(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_terminate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class ProcessController : public virtual ::Ice::Object
{
public:

    using ProxyType = ProcessControllerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<ProcessPrx> start(::std::string testsuite, ::std::string exe, StringSeq args, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_start(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getHost(::std::string protocol, bool ipv6, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getHost(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class BrowserProcessController : public virtual ProcessController
{
public:

    using ProxyType = BrowserProcessControllerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void redirect(::std::string url, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_redirect(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class ProcessControllerRegistry : public virtual ::Ice::Object
{
public:

    using ProxyType = ProcessControllerRegistryPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void setProcessController(::std::shared_ptr<ProcessControllerPrx> controller, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setProcessController(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

}

namespace Test
{

namespace Common
{

class Config : public ::Ice::ValueHelper<Config, ::Ice::Value>
{
public:

    virtual ~Config();

    Config() = default;

    Config(const Config&) = default;
    Config(Config&&) = default;
    Config& operator=(const Config&) = default;
    Config& operator=(Config&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Config(const std::optional<::std::string>& protocol, const std::optional<bool>& mx, const std::optional<bool>& serialize, const std::optional<bool>& compress, const std::optional<bool>& ipv6, const std::optional<::Test::Common::StringSeq>& cprops, const std::optional<::Test::Common::StringSeq>& sprops) :
        protocol(protocol),
        mx(mx),
        serialize(serialize),
        compress(compress),
        ipv6(ipv6),
        cprops(cprops),
        sprops(sprops)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional<::std::string>&, const std::optional<bool>&, const std::optional<bool>&, const std::optional<bool>&, const std::optional<bool>&, const std::optional<::Test::Common::StringSeq>&, const std::optional<::Test::Common::StringSeq>&> ice_tuple() const
    {
        return std::tie(protocol, mx, serialize, compress, ipv6, cprops, sprops);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional<::std::string> protocol;
    std::optional<bool> mx;
    std::optional<bool> serialize;
    std::optional<bool> compress;
    std::optional<bool> ipv6;
    std::optional<::Test::Common::StringSeq> cprops;
    std::optional<::Test::Common::StringSeq> sprops;
};

/// \cond INTERNAL
static Config _iceS_Config_init;
/// \endcond

class OptionOverrides : public ::Ice::ValueHelper<OptionOverrides, ::Ice::Value>
{
public:

    virtual ~OptionOverrides();

    OptionOverrides() = default;

    OptionOverrides(const OptionOverrides&) = default;
    OptionOverrides(OptionOverrides&&) = default;
    OptionOverrides& operator=(const OptionOverrides&) = default;
    OptionOverrides& operator=(OptionOverrides&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    OptionOverrides(const std::optional<::Test::Common::StringSeq>& protocol, const std::optional<::Test::Common::BoolSeq>& mx, const std::optional<::Test::Common::BoolSeq>& serialize, const std::optional<::Test::Common::BoolSeq>& compress, const std::optional<::Test::Common::BoolSeq>& ipv6) :
        protocol(protocol),
        mx(mx),
        serialize(serialize),
        compress(compress),
        ipv6(ipv6)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional<::Test::Common::StringSeq>&, const std::optional<::Test::Common::BoolSeq>&, const std::optional<::Test::Common::BoolSeq>&, const std::optional<::Test::Common::BoolSeq>&, const std::optional<::Test::Common::BoolSeq>&> ice_tuple() const
    {
        return std::tie(protocol, mx, serialize, compress, ipv6);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional<::Test::Common::StringSeq> protocol;
    std::optional<::Test::Common::BoolSeq> mx;
    std::optional<::Test::Common::BoolSeq> serialize;
    std::optional<::Test::Common::BoolSeq> compress;
    std::optional<::Test::Common::BoolSeq> ipv6;
};

}

}

namespace Test
{

namespace Common
{

class TestCasePrx : public virtual ::Ice::Proxy<TestCasePrx, ::Ice::ObjectPrx>
{
public:

    ::std::string startServerSide(const ::std::shared_ptr<Config>& config, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &TestCasePrx::_iceI_startServerSide, config, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto startServerSideAsync(const ::std::shared_ptr<Config>& config, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &TestCasePrx::_iceI_startServerSide, config, context);
    }

    ::std::function<void()>
    startServerSideAsync(const ::std::shared_ptr<Config>& config,
                         ::std::function<void(::std::string)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::TestCasePrx::_iceI_startServerSide, config, context);
    }

    /// \cond INTERNAL
    void _iceI_startServerSide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::std::shared_ptr<Config>&, const ::Ice::Context&);
    /// \endcond

    ::std::string stopServerSide(bool success, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &TestCasePrx::_iceI_stopServerSide, success, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto stopServerSideAsync(bool success, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &TestCasePrx::_iceI_stopServerSide, success, context);
    }

    ::std::function<void()>
    stopServerSideAsync(bool success,
                        ::std::function<void(::std::string)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::TestCasePrx::_iceI_stopServerSide, success, context);
    }

    /// \cond INTERNAL
    void _iceI_stopServerSide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, bool, const ::Ice::Context&);
    /// \endcond

    ::std::string runClientSide(const ::std::string& host, const ::std::shared_ptr<Config>& config, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &TestCasePrx::_iceI_runClientSide, host, config, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto runClientSideAsync(const ::std::string& host, const ::std::shared_ptr<Config>& config, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &TestCasePrx::_iceI_runClientSide, host, config, context);
    }

    ::std::function<void()>
    runClientSideAsync(const ::std::string& host, const ::std::shared_ptr<Config>& config,
                       ::std::function<void(::std::string)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::TestCasePrx::_iceI_runClientSide, host, config, context);
    }

    /// \cond INTERNAL
    void _iceI_runClientSide(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::std::string&, const ::std::shared_ptr<Config>&, const ::Ice::Context&);
    /// \endcond

    void destroy(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TestCasePrx::_iceI_destroy, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto destroyAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TestCasePrx::_iceI_destroy, context);
    }

    ::std::function<void()>
    destroyAsync(::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::TestCasePrx::_iceI_destroy, context);
    }

    /// \cond INTERNAL
    void _iceI_destroy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    TestCasePrx() = default;
    friend ::std::shared_ptr<TestCasePrx> IceInternal::createProxy<TestCasePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class ControllerPrx : public virtual ::Ice::Proxy<ControllerPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<TestCasePrx> runTestCase(const ::std::string& mapping, const ::std::string& testsuite, const ::std::string& testcase, const ::std::string& cross, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Common::TestCasePrx>>(true, this, &ControllerPrx::_iceI_runTestCase, mapping, testsuite, testcase, cross, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto runTestCaseAsync(const ::std::string& mapping, const ::std::string& testsuite, const ::std::string& testcase, const ::std::string& cross, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::Common::TestCasePrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Common::TestCasePrx>, P>(false, this, &ControllerPrx::_iceI_runTestCase, mapping, testsuite, testcase, cross, context);
    }

    ::std::function<void()>
    runTestCaseAsync(const ::std::string& mapping, const ::std::string& testsuite, const ::std::string& testcase, const ::std::string& cross,
                     ::std::function<void(::std::shared_ptr<::Test::Common::TestCasePrx>)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::Common::TestCasePrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ControllerPrx::_iceI_runTestCase, mapping, testsuite, testcase, cross, context);
    }

    /// \cond INTERNAL
    void _iceI_runTestCase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Common::TestCasePrx>>>&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<OptionOverrides> getOptionOverrides(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Common::OptionOverrides>>(true, this, &ControllerPrx::_iceI_getOptionOverrides, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getOptionOverridesAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::Common::OptionOverrides>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Common::OptionOverrides>, P>(false, this, &ControllerPrx::_iceI_getOptionOverrides, context);
    }

    ::std::function<void()>
    getOptionOverridesAsync(::std::function<void(::std::shared_ptr<::Test::Common::OptionOverrides>)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::Common::OptionOverrides>>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ControllerPrx::_iceI_getOptionOverrides, context);
    }

    /// \cond INTERNAL
    void _iceI_getOptionOverrides(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Common::OptionOverrides>>>&, const ::Ice::Context&);
    /// \endcond

    StringSeq getTestSuites(const ::std::string& mapping, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::Common::StringSeq>(true, this, &ControllerPrx::_iceI_getTestSuites, mapping, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getTestSuitesAsync(const ::std::string& mapping, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::Common::StringSeq>>().get_future())
    {
        return _makePromiseOutgoing<::Test::Common::StringSeq, P>(false, this, &ControllerPrx::_iceI_getTestSuites, mapping, context);
    }

    ::std::function<void()>
    getTestSuitesAsync(const ::std::string& mapping,
                       ::std::function<void(::Test::Common::StringSeq)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::Test::Common::StringSeq>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ControllerPrx::_iceI_getTestSuites, mapping, context);
    }

    /// \cond INTERNAL
    void _iceI_getTestSuites(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::Common::StringSeq>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::string getHost(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &ControllerPrx::_iceI_getHost, protocol, ipv6, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getHostAsync(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &ControllerPrx::_iceI_getHost, protocol, ipv6, context);
    }

    ::std::function<void()>
    getHostAsync(const ::std::string& protocol, bool ipv6,
                 ::std::function<void(::std::string)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ControllerPrx::_iceI_getHost, protocol, ipv6, context);
    }

    /// \cond INTERNAL
    void _iceI_getHost(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::std::string&, bool, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ControllerPrx() = default;
    friend ::std::shared_ptr<ControllerPrx> IceInternal::createProxy<ControllerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class ProcessPrx : public virtual ::Ice::Proxy<ProcessPrx, ::Ice::ObjectPrx>
{
public:

    void waitReady(int timeout, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ProcessPrx::_iceI_waitReady, timeout, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto waitReadyAsync(int timeout, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ProcessPrx::_iceI_waitReady, timeout, context);
    }

    ::std::function<void()>
    waitReadyAsync(int timeout,
                   ::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessPrx::_iceI_waitReady, timeout, context);
    }

    /// \cond INTERNAL
    void _iceI_waitReady(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, const ::Ice::Context&);
    /// \endcond

    int waitSuccess(int timeout, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &ProcessPrx::_iceI_waitSuccess, timeout, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto waitSuccessAsync(int timeout, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &ProcessPrx::_iceI_waitSuccess, timeout, context);
    }

    ::std::function<void()>
    waitSuccessAsync(int timeout,
                     ::std::function<void(int)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessPrx::_iceI_waitSuccess, timeout, context);
    }

    /// \cond INTERNAL
    void _iceI_waitSuccess(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, const ::Ice::Context&);
    /// \endcond

    ::std::string terminate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &ProcessPrx::_iceI_terminate, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto terminateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &ProcessPrx::_iceI_terminate, context);
    }

    ::std::function<void()>
    terminateAsync(::std::function<void(::std::string)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessPrx::_iceI_terminate, context);
    }

    /// \cond INTERNAL
    void _iceI_terminate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ProcessPrx() = default;
    friend ::std::shared_ptr<ProcessPrx> IceInternal::createProxy<ProcessPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class ProcessControllerPrx : public virtual ::Ice::Proxy<ProcessControllerPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<ProcessPrx> start(const ::std::string& testsuite, const ::std::string& exe, const StringSeq& args, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Common::ProcessPrx>>(true, this, &ProcessControllerPrx::_iceI_start, testsuite, exe, args, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto startAsync(const ::std::string& testsuite, const ::std::string& exe, const StringSeq& args, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::Common::ProcessPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::Common::ProcessPrx>, P>(false, this, &ProcessControllerPrx::_iceI_start, testsuite, exe, args, context);
    }

    ::std::function<void()>
    startAsync(const ::std::string& testsuite, const ::std::string& exe, const StringSeq& args,
               ::std::function<void(::std::shared_ptr<::Test::Common::ProcessPrx>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::Common::ProcessPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessControllerPrx::_iceI_start, testsuite, exe, args, context);
    }

    /// \cond INTERNAL
    void _iceI_start(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Common::ProcessPrx>>>&, const ::std::string&, const ::std::string&, const StringSeq&, const ::Ice::Context&);
    /// \endcond

    ::std::string getHost(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &ProcessControllerPrx::_iceI_getHost, protocol, ipv6, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getHostAsync(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &ProcessControllerPrx::_iceI_getHost, protocol, ipv6, context);
    }

    ::std::function<void()>
    getHostAsync(const ::std::string& protocol, bool ipv6,
                 ::std::function<void(::std::string)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::string>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessControllerPrx::_iceI_getHost, protocol, ipv6, context);
    }

    /// \cond INTERNAL
    void _iceI_getHost(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::std::string&, bool, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ProcessControllerPrx() = default;
    friend ::std::shared_ptr<ProcessControllerPrx> IceInternal::createProxy<ProcessControllerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class BrowserProcessControllerPrx : public virtual ::Ice::Proxy<BrowserProcessControllerPrx, ProcessControllerPrx>
{
public:

    void redirect(const ::std::string& url, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &BrowserProcessControllerPrx::_iceI_redirect, url, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto redirectAsync(const ::std::string& url, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &BrowserProcessControllerPrx::_iceI_redirect, url, context);
    }

    ::std::function<void()>
    redirectAsync(const ::std::string& url,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::BrowserProcessControllerPrx::_iceI_redirect, url, context);
    }

    /// \cond INTERNAL
    void _iceI_redirect(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    BrowserProcessControllerPrx() = default;
    friend ::std::shared_ptr<BrowserProcessControllerPrx> IceInternal::createProxy<BrowserProcessControllerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class ProcessControllerRegistryPrx : public virtual ::Ice::Proxy<ProcessControllerRegistryPrx, ::Ice::ObjectPrx>
{
public:

    void setProcessController(const ::std::shared_ptr<ProcessControllerPrx>& controller, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ProcessControllerRegistryPrx::_iceI_setProcessController, controller, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setProcessControllerAsync(const ::std::shared_ptr<ProcessControllerPrx>& controller, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ProcessControllerRegistryPrx::_iceI_setProcessController, controller, context);
    }

    ::std::function<void()>
    setProcessControllerAsync(const ::std::shared_ptr<ProcessControllerPrx>& controller,
                              ::std::function<void()> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Common::ProcessControllerRegistryPrx::_iceI_setProcessController, controller, context);
    }

    /// \cond INTERNAL
    void _iceI_setProcessController(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<ProcessControllerPrx>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ProcessControllerRegistryPrx() = default;
    friend ::std::shared_ptr<ProcessControllerRegistryPrx> IceInternal::createProxy<ProcessControllerRegistryPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter<::Test::Common::Config, S>
{
    static void write(S* ostr, const ::Test::Common::Config& v)
    {
        ostr->writeAll({1, 2, 3, 4, 5, 6, 7}, v.protocol, v.mx, v.serialize, v.compress, v.ipv6, v.cprops, v.sprops);
    }
};

template<typename S>
struct StreamReader<::Test::Common::Config, S>
{
    static void read(S* istr, ::Test::Common::Config& v)
    {
        istr->readAll({1, 2, 3, 4, 5, 6, 7}, v.protocol, v.mx, v.serialize, v.compress, v.ipv6, v.cprops, v.sprops);
    }
};

template<typename S>
struct StreamWriter<::Test::Common::OptionOverrides, S>
{
    static void write(S* ostr, const ::Test::Common::OptionOverrides& v)
    {
        ostr->writeAll({1, 2, 3, 4, 5}, v.protocol, v.mx, v.serialize, v.compress, v.ipv6);
    }
};

template<typename S>
struct StreamReader<::Test::Common::OptionOverrides, S>
{
    static void read(S* istr, ::Test::Common::OptionOverrides& v)
    {
        istr->readAll({1, 2, 3, 4, 5}, v.protocol, v.mx, v.serialize, v.compress, v.ipv6);
    }
};

template<typename S>
struct StreamReader<::Test::Common::TestCaseNotExistException, S>
{
    static void read(S* istr, ::Test::Common::TestCaseNotExistException& v)
    {
        istr->readAll(v.reason);
    }
};

template<typename S>
struct StreamReader<::Test::Common::TestCaseFailedException, S>
{
    static void read(S* istr, ::Test::Common::TestCaseFailedException& v)
    {
        istr->readAll(v.output);
    }
};

template<typename S>
struct StreamReader<::Test::Common::ProcessFailedException, S>
{
    static void read(S* istr, ::Test::Common::ProcessFailedException& v)
    {
        istr->readAll(v.reason);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

/// \cond INTERNAL
namespace Common
{

using ConfigPtr = ::std::shared_ptr<Config>;

using OptionOverridesPtr = ::std::shared_ptr<OptionOverrides>;

using TestCasePtr = ::std::shared_ptr<TestCase>;
using TestCasePrxPtr = ::std::shared_ptr<TestCasePrx>;

using ControllerPtr = ::std::shared_ptr<Controller>;
using ControllerPrxPtr = ::std::shared_ptr<ControllerPrx>;

using ProcessPtr = ::std::shared_ptr<Process>;
using ProcessPrxPtr = ::std::shared_ptr<ProcessPrx>;

using ProcessControllerPtr = ::std::shared_ptr<ProcessController>;
using ProcessControllerPrxPtr = ::std::shared_ptr<ProcessControllerPrx>;

using BrowserProcessControllerPtr = ::std::shared_ptr<BrowserProcessController>;
using BrowserProcessControllerPrxPtr = ::std::shared_ptr<BrowserProcessControllerPrx>;

using ProcessControllerRegistryPtr = ::std::shared_ptr<ProcessControllerRegistry>;
using ProcessControllerRegistryPrxPtr = ::std::shared_ptr<ProcessControllerRegistryPrx>;

}
/// \endcond

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Test
{

namespace Common
{

class TestCase;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< TestCase>&);
::IceProxy::Ice::Object* upCast(TestCase*);
/// \endcond

class Controller;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Controller>&);
::IceProxy::Ice::Object* upCast(Controller*);
/// \endcond

class Process;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Process>&);
::IceProxy::Ice::Object* upCast(Process*);
/// \endcond

class ProcessController;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ProcessController>&);
::IceProxy::Ice::Object* upCast(ProcessController*);
/// \endcond

class BrowserProcessController;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< BrowserProcessController>&);
::IceProxy::Ice::Object* upCast(BrowserProcessController*);
/// \endcond

class ProcessControllerRegistry;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ProcessControllerRegistry>&);
::IceProxy::Ice::Object* upCast(ProcessControllerRegistry*);
/// \endcond

}

}

}

namespace Test
{

namespace Common
{

class Config;
using ConfigPtr = ::Ice::SharedPtr<Config>;

class OptionOverrides;
using OptionOverridesPtr = ::Ice::SharedPtr<OptionOverrides>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Common::TestCase> TestCasePrx;
typedef TestCasePrx TestCasePrxPtr;

class TestCase;
using TestCasePtr = ::Ice::SharedPtr< TestCase>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Common::Controller> ControllerPrx;
typedef ControllerPrx ControllerPrxPtr;

class Controller;
using ControllerPtr = ::Ice::SharedPtr< Controller>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Common::Process> ProcessPrx;
typedef ProcessPrx ProcessPrxPtr;

class Process;
using ProcessPtr = ::Ice::SharedPtr< Process>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Common::ProcessController> ProcessControllerPrx;
typedef ProcessControllerPrx ProcessControllerPrxPtr;

class ProcessController;
using ProcessControllerPtr = ::Ice::SharedPtr< ProcessController>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Common::BrowserProcessController> BrowserProcessControllerPrx;
typedef BrowserProcessControllerPrx BrowserProcessControllerPrxPtr;

class BrowserProcessController;
using BrowserProcessControllerPtr = ::Ice::SharedPtr< BrowserProcessController>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Common::ProcessControllerRegistry> ProcessControllerRegistryPrx;
typedef ProcessControllerRegistryPrx ProcessControllerRegistryPrxPtr;

class ProcessControllerRegistry;
using ProcessControllerRegistryPtr = ::Ice::SharedPtr< ProcessControllerRegistry>;

}

}

namespace Test
{

namespace Common
{

typedef ::std::vector<bool> BoolSeq;

typedef ::std::vector< ::std::string> StringSeq;

class TestCaseNotExistException : public ::Ice::UserException
{
public:

    TestCaseNotExistException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit TestCaseNotExistException(const ::std::string& reason);
    TestCaseNotExistException(const TestCaseNotExistException&) = default;
    virtual ~TestCaseNotExistException();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual TestCaseNotExistException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string reason;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static TestCaseNotExistException _iceS_TestCaseNotExistException_init;
/// \endcond

class TestCaseFailedException : public ::Ice::UserException
{
public:

    TestCaseFailedException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit TestCaseFailedException(const ::std::string& output);
    TestCaseFailedException(const TestCaseFailedException&) = default;
    virtual ~TestCaseFailedException();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual TestCaseFailedException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string output;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class ProcessFailedException : public ::Ice::UserException
{
public:

    ProcessFailedException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit ProcessFailedException(const ::std::string& reason);
    ProcessFailedException(const ProcessFailedException&) = default;
    virtual ~ProcessFailedException();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual ProcessFailedException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string reason;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

}

}

namespace Test
{

namespace Common
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Common::TestCase::begin_startServerSide.
 * Create a wrapper instance by calling ::Test::Common::newCallback_TestCase_startServerSide.
 */
class Callback_TestCase_startServerSide_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestCase_startServerSide_Base> Callback_TestCase_startServerSidePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Common::TestCase::begin_stopServerSide.
 * Create a wrapper instance by calling ::Test::Common::newCallback_TestCase_stopServerSide.
 */
class Callback_TestCase_stopServerSide_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestCase_stopServerSide_Base> Callback_TestCase_stopServerSidePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Common::TestCase::begin_runClientSide.
 * Create a wrapper instance by calling ::Test::Common::newCallback_TestCase_runClientSide.
 */
class Callback_TestCase_runClientSide_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestCase_runClientSide_Base> Callback_TestCase_runClientSidePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Common::TestCase::begin_destroy.
 * Create a wrapper instance by calling ::Test::Common::newCallback_TestCase_destroy.
 */
class Callback_TestCase_destroy_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TestCase_destroy_Base> Callback_TestCase_destroyPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Common::Controller::begin_runTestCase.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Controller_runTestCase.
 */
class Callback_Controller_runTestCase_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Controller_runTestCase_Base> Callback_Controller_runTestCasePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Common::Controller::begin_getOptionOverrides.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Controller_getOptionOverrides.
 */
class Callback_Controller_getOptionOverrides_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Controller_getOptionOverrides_Base> Callback_Controller_getOptionOverridesPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Common::Controller::begin_getTestSuites.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Controller_getTestSuites.
 */
class Callback_Controller_getTestSuites_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Controller_getTestSuites_Base> Callback_Controller_getTestSuitesPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Common::Controller::begin_getHost.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Controller_getHost.
 */
class Callback_Controller_getHost_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Controller_getHost_Base> Callback_Controller_getHostPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Common::Process::begin_waitReady.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Process_waitReady.
 */
class Callback_Process_waitReady_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Process_waitReady_Base> Callback_Process_waitReadyPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Common::Process::begin_waitSuccess.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Process_waitSuccess.
 */
class Callback_Process_waitSuccess_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Process_waitSuccess_Base> Callback_Process_waitSuccessPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Common::Process::begin_terminate.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Process_terminate.
 */
class Callback_Process_terminate_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Process_terminate_Base> Callback_Process_terminatePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Common::ProcessController::begin_start.
 * Create a wrapper instance by calling ::Test::Common::newCallback_ProcessController_start.
 */
class Callback_ProcessController_start_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ProcessController_start_Base> Callback_ProcessController_startPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Common::ProcessController::begin_getHost.
 * Create a wrapper instance by calling ::Test::Common::newCallback_ProcessController_getHost.
 */
class Callback_ProcessController_getHost_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ProcessController_getHost_Base> Callback_ProcessController_getHostPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Common::BrowserProcessController::begin_redirect.
 * Create a wrapper instance by calling ::Test::Common::newCallback_BrowserProcessController_redirect.
 */
class Callback_BrowserProcessController_redirect_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BrowserProcessController_redirect_Base> Callback_BrowserProcessController_redirectPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Common::ProcessControllerRegistry::begin_setProcessController.
 * Create a wrapper instance by calling ::Test::Common::newCallback_ProcessControllerRegistry_setProcessController.
 */
class Callback_ProcessControllerRegistry_setProcessController_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ProcessControllerRegistry_setProcessController_Base> Callback_ProcessControllerRegistry_setProcessControllerPtr;

}

}

namespace IceProxy
{

namespace Test
{

namespace Common
{

class TestCase : public virtual ::Ice::Proxy<TestCase, ::IceProxy::Ice::Object>
{
public:

    ::std::string startServerSide(const ::Test::Common::ConfigPtr& config, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_startServerSide(_iceI_begin_startServerSide(config, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_startServerSide(const ::Test::Common::ConfigPtr& config, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_startServerSide(config, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startServerSide(const ::Test::Common::ConfigPtr& config, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startServerSide(config, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_startServerSide(const ::Test::Common::ConfigPtr& config, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startServerSide(config, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_startServerSide(const ::Test::Common::ConfigPtr& config, const ::Test::Common::Callback_TestCase_startServerSidePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startServerSide(config, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_startServerSide(const ::Test::Common::ConfigPtr& config, const ::Ice::Context& context, const ::Test::Common::Callback_TestCase_startServerSidePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_startServerSide(config, context, cb, cookie);
    }

    ::std::string end_startServerSide(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_startServerSide(const ::Test::Common::ConfigPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string stopServerSide(bool success, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_stopServerSide(_iceI_begin_stopServerSide(success, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_stopServerSide(bool success, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_stopServerSide(success, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopServerSide(bool success, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopServerSide(success, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopServerSide(bool success, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopServerSide(success, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopServerSide(bool success, const ::Test::Common::Callback_TestCase_stopServerSidePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopServerSide(success, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopServerSide(bool success, const ::Ice::Context& context, const ::Test::Common::Callback_TestCase_stopServerSidePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopServerSide(success, context, cb, cookie);
    }

    ::std::string end_stopServerSide(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_stopServerSide(bool, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string runClientSide(const ::std::string& host, const ::Test::Common::ConfigPtr& config, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_runClientSide(_iceI_begin_runClientSide(host, config, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_runClientSide(const ::std::string& host, const ::Test::Common::ConfigPtr& config, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_runClientSide(host, config, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runClientSide(const ::std::string& host, const ::Test::Common::ConfigPtr& config, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_runClientSide(host, config, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_runClientSide(const ::std::string& host, const ::Test::Common::ConfigPtr& config, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_runClientSide(host, config, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_runClientSide(const ::std::string& host, const ::Test::Common::ConfigPtr& config, const ::Test::Common::Callback_TestCase_runClientSidePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_runClientSide(host, config, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_runClientSide(const ::std::string& host, const ::Test::Common::ConfigPtr& config, const ::Ice::Context& context, const ::Test::Common::Callback_TestCase_runClientSidePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_runClientSide(host, config, context, cb, cookie);
    }

    ::std::string end_runClientSide(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_runClientSide(const ::std::string&, const ::Test::Common::ConfigPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void destroy(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_destroy(_iceI_begin_destroy(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_destroy(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_destroy(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_destroy(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Test::Common::Callback_TestCase_destroyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_destroy(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& context, const ::Test::Common::Callback_TestCase_destroyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_destroy(context, cb, cookie);
    }

    void end_destroy(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_destroy(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Controller : public virtual ::Ice::Proxy<Controller, ::IceProxy::Ice::Object>
{
public:

    ::Test::Common::TestCasePrx runTestCase(const ::std::string& mapping, const ::std::string& testsuite, const ::std::string& testcase, const ::std::string& cross, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_runTestCase(_iceI_begin_runTestCase(mapping, testsuite, testcase, cross, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_runTestCase(const ::std::string& mapping, const ::std::string& testsuite, const ::std::string& testcase, const ::std::string& cross, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_runTestCase(mapping, testsuite, testcase, cross, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_runTestCase(const ::std::string& mapping, const ::std::string& testsuite, const ::std::string& testcase, const ::std::string& cross, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_runTestCase(mapping, testsuite, testcase, cross, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_runTestCase(const ::std::string& mapping, const ::std::string& testsuite, const ::std::string& testcase, const ::std::string& cross, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_runTestCase(mapping, testsuite, testcase, cross, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_runTestCase(const ::std::string& mapping, const ::std::string& testsuite, const ::std::string& testcase, const ::std::string& cross, const ::Test::Common::Callback_Controller_runTestCasePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_runTestCase(mapping, testsuite, testcase, cross, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_runTestCase(const ::std::string& mapping, const ::std::string& testsuite, const ::std::string& testcase, const ::std::string& cross, const ::Ice::Context& context, const ::Test::Common::Callback_Controller_runTestCasePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_runTestCase(mapping, testsuite, testcase, cross, context, cb, cookie);
    }

    ::Test::Common::TestCasePrx end_runTestCase(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_runTestCase(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::Common::OptionOverridesPtr getOptionOverrides(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getOptionOverrides(_iceI_begin_getOptionOverrides(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getOptionOverrides(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getOptionOverrides(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOptionOverrides(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getOptionOverrides(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getOptionOverrides(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getOptionOverrides(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getOptionOverrides(const ::Test::Common::Callback_Controller_getOptionOverridesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getOptionOverrides(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getOptionOverrides(const ::Ice::Context& context, const ::Test::Common::Callback_Controller_getOptionOverridesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getOptionOverrides(context, cb, cookie);
    }

    ::Test::Common::OptionOverridesPtr end_getOptionOverrides(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getOptionOverrides(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::Common::StringSeq getTestSuites(const ::std::string& mapping, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getTestSuites(_iceI_begin_getTestSuites(mapping, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getTestSuites(const ::std::string& mapping, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getTestSuites(mapping, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTestSuites(const ::std::string& mapping, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTestSuites(mapping, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getTestSuites(const ::std::string& mapping, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTestSuites(mapping, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getTestSuites(const ::std::string& mapping, const ::Test::Common::Callback_Controller_getTestSuitesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTestSuites(mapping, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getTestSuites(const ::std::string& mapping, const ::Ice::Context& context, const ::Test::Common::Callback_Controller_getTestSuitesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getTestSuites(mapping, context, cb, cookie);
    }

    ::Test::Common::StringSeq end_getTestSuites(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getTestSuites(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string getHost(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getHost(_iceI_begin_getHost(protocol, ipv6, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getHost(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getHost(protocol, ipv6, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHost(const ::std::string& protocol, bool ipv6, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHost(protocol, ipv6, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHost(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHost(protocol, ipv6, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHost(const ::std::string& protocol, bool ipv6, const ::Test::Common::Callback_Controller_getHostPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHost(protocol, ipv6, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHost(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context, const ::Test::Common::Callback_Controller_getHostPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHost(protocol, ipv6, context, cb, cookie);
    }

    ::std::string end_getHost(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getHost(const ::std::string&, bool, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Process : public virtual ::Ice::Proxy<Process, ::IceProxy::Ice::Object>
{
public:

    void waitReady(::Ice::Int timeout, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_waitReady(_iceI_begin_waitReady(timeout, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_waitReady(::Ice::Int timeout, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_waitReady(timeout, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_waitReady(::Ice::Int timeout, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitReady(timeout, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_waitReady(::Ice::Int timeout, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitReady(timeout, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_waitReady(::Ice::Int timeout, const ::Test::Common::Callback_Process_waitReadyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitReady(timeout, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_waitReady(::Ice::Int timeout, const ::Ice::Context& context, const ::Test::Common::Callback_Process_waitReadyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitReady(timeout, context, cb, cookie);
    }

    void end_waitReady(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_waitReady(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int waitSuccess(::Ice::Int timeout, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_waitSuccess(_iceI_begin_waitSuccess(timeout, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_waitSuccess(::Ice::Int timeout, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_waitSuccess(timeout, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_waitSuccess(::Ice::Int timeout, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitSuccess(timeout, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_waitSuccess(::Ice::Int timeout, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitSuccess(timeout, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_waitSuccess(::Ice::Int timeout, const ::Test::Common::Callback_Process_waitSuccessPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitSuccess(timeout, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_waitSuccess(::Ice::Int timeout, const ::Ice::Context& context, const ::Test::Common::Callback_Process_waitSuccessPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_waitSuccess(timeout, context, cb, cookie);
    }

    ::Ice::Int end_waitSuccess(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_waitSuccess(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string terminate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_terminate(_iceI_begin_terminate(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_terminate(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_terminate(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_terminate(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_terminate(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_terminate(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_terminate(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_terminate(const ::Test::Common::Callback_Process_terminatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_terminate(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_terminate(const ::Ice::Context& context, const ::Test::Common::Callback_Process_terminatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_terminate(context, cb, cookie);
    }

    ::std::string end_terminate(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_terminate(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class ProcessController : public virtual ::Ice::Proxy<ProcessController, ::IceProxy::Ice::Object>
{
public:

    ::Test::Common::ProcessPrx start(const ::std::string& testsuite, const ::std::string& exe, const ::Test::Common::StringSeq& args, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_start(_iceI_begin_start(testsuite, exe, args, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_start(const ::std::string& testsuite, const ::std::string& exe, const ::Test::Common::StringSeq& args, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_start(testsuite, exe, args, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_start(const ::std::string& testsuite, const ::std::string& exe, const ::Test::Common::StringSeq& args, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_start(testsuite, exe, args, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_start(const ::std::string& testsuite, const ::std::string& exe, const ::Test::Common::StringSeq& args, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_start(testsuite, exe, args, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_start(const ::std::string& testsuite, const ::std::string& exe, const ::Test::Common::StringSeq& args, const ::Test::Common::Callback_ProcessController_startPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_start(testsuite, exe, args, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_start(const ::std::string& testsuite, const ::std::string& exe, const ::Test::Common::StringSeq& args, const ::Ice::Context& context, const ::Test::Common::Callback_ProcessController_startPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_start(testsuite, exe, args, context, cb, cookie);
    }

    ::Test::Common::ProcessPrx end_start(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_start(const ::std::string&, const ::std::string&, const ::Test::Common::StringSeq&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string getHost(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getHost(_iceI_begin_getHost(protocol, ipv6, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getHost(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getHost(protocol, ipv6, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHost(const ::std::string& protocol, bool ipv6, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHost(protocol, ipv6, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHost(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHost(protocol, ipv6, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHost(const ::std::string& protocol, bool ipv6, const ::Test::Common::Callback_ProcessController_getHostPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHost(protocol, ipv6, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHost(const ::std::string& protocol, bool ipv6, const ::Ice::Context& context, const ::Test::Common::Callback_ProcessController_getHostPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHost(protocol, ipv6, context, cb, cookie);
    }

    ::std::string end_getHost(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getHost(const ::std::string&, bool, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class BrowserProcessController : public virtual ::Ice::Proxy<BrowserProcessController, ::IceProxy::Test::Common::ProcessController>
{
public:

    void redirect(const ::std::string& url, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_redirect(_iceI_begin_redirect(url, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_redirect(const ::std::string& url, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_redirect(url, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_redirect(const ::std::string& url, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_redirect(url, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_redirect(const ::std::string& url, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_redirect(url, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_redirect(const ::std::string& url, const ::Test::Common::Callback_BrowserProcessController_redirectPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_redirect(url, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_redirect(const ::std::string& url, const ::Ice::Context& context, const ::Test::Common::Callback_BrowserProcessController_redirectPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_redirect(url, context, cb, cookie);
    }

    void end_redirect(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_redirect(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class ProcessControllerRegistry : public virtual ::Ice::Proxy<ProcessControllerRegistry, ::IceProxy::Ice::Object>
{
public:

    void setProcessController(const ::Test::Common::ProcessControllerPrx& controller, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setProcessController(_iceI_begin_setProcessController(controller, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setProcessController(const ::Test::Common::ProcessControllerPrx& controller, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setProcessController(controller, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setProcessController(const ::Test::Common::ProcessControllerPrx& controller, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setProcessController(controller, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setProcessController(const ::Test::Common::ProcessControllerPrx& controller, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setProcessController(controller, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setProcessController(const ::Test::Common::ProcessControllerPrx& controller, const ::Test::Common::Callback_ProcessControllerRegistry_setProcessControllerPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setProcessController(controller, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setProcessController(const ::Test::Common::ProcessControllerPrx& controller, const ::Ice::Context& context, const ::Test::Common::Callback_ProcessControllerRegistry_setProcessControllerPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setProcessController(controller, context, cb, cookie);
    }

    void end_setProcessController(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setProcessController(const ::Test::Common::ProcessControllerPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

}

namespace Test
{

namespace Common
{

class TestCase : public virtual ::Ice::Object
{
public:

    typedef TestCasePrx ProxyType;

    virtual ~TestCase();
    TestCase() = default;
    TestCase(const TestCase&) = default;
    TestCase& operator=(const TestCase&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::string startServerSide(const ConfigPtr& config, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_startServerSide(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string stopServerSide(bool success, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_stopServerSide(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string runClientSide(const ::std::string& host, const ConfigPtr& config, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_runClientSide(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void destroy(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_destroy(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class Controller : public virtual ::Ice::Object
{
public:

    typedef ControllerPrx ProxyType;

    virtual ~Controller();
    Controller() = default;
    Controller(const Controller&) = default;
    Controller& operator=(const Controller&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TestCasePrx runTestCase(const ::std::string& mapping, const ::std::string& testsuite, const ::std::string& testcase, const ::std::string& cross, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_runTestCase(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual OptionOverridesPtr getOptionOverrides(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getOptionOverrides(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual StringSeq getTestSuites(const ::std::string& mapping, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getTestSuites(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getHost(const ::std::string& protocol, bool ipv6, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getHost(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class Process : public virtual ::Ice::Object
{
public:

    typedef ProcessPrx ProxyType;

    virtual ~Process();
    Process() = default;
    Process(const Process&) = default;
    Process& operator=(const Process&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void waitReady(::Ice::Int timeout, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_waitReady(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Int waitSuccess(::Ice::Int timeout, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_waitSuccess(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string terminate(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_terminate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class ProcessController : public virtual ::Ice::Object
{
public:

    typedef ProcessControllerPrx ProxyType;

    virtual ~ProcessController();
    ProcessController() = default;
    ProcessController(const ProcessController&) = default;
    ProcessController& operator=(const ProcessController&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ProcessPrx start(const ::std::string& testsuite, const ::std::string& exe, const StringSeq& args, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_start(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getHost(const ::std::string& protocol, bool ipv6, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getHost(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class BrowserProcessController : public virtual ProcessController
{
public:

    typedef BrowserProcessControllerPrx ProxyType;

    virtual ~BrowserProcessController();
    BrowserProcessController() = default;
    BrowserProcessController(const BrowserProcessController&) = default;
    BrowserProcessController& operator=(const BrowserProcessController&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void redirect(const ::std::string& url, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_redirect(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class ProcessControllerRegistry : public virtual ::Ice::Object
{
public:

    typedef ProcessControllerRegistryPrx ProxyType;

    virtual ~ProcessControllerRegistry();
    ProcessControllerRegistry() = default;
    ProcessControllerRegistry(const ProcessControllerRegistry&) = default;
    ProcessControllerRegistry& operator=(const ProcessControllerRegistry&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void setProcessController(const ProcessControllerPrx& controller, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setProcessController(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

}

namespace Test
{

namespace Common
{

class Config : public ::Ice::ValueHelper<Config, ::Ice::Value>
{
public:

    virtual ~Config();

    Config() = default;

    Config(const Config&) = default;
    Config(Config&&) = default;
    Config& operator=(const Config&) = default;
    Config& operator=(Config&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Config(const std::optional< ::std::string>& protocol, const std::optional<bool>& mx, const std::optional<bool>& serialize, const std::optional<bool>& compress, const std::optional<bool>& ipv6, const std::optional< ::Test::Common::StringSeq>& cprops, const std::optional< ::Test::Common::StringSeq>& sprops) :
        protocol(protocol),
        mx(mx),
        serialize(serialize),
        compress(compress),
        ipv6(ipv6),
        cprops(cprops),
        sprops(sprops)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional< ::std::string>&, const std::optional<bool>&, const std::optional<bool>&, const std::optional<bool>&, const std::optional<bool>&, const std::optional< ::Test::Common::StringSeq>&, const std::optional< ::Test::Common::StringSeq>&> ice_tuple() const
    {
        return std::tie(protocol, mx, serialize, compress, ipv6, cprops, sprops);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional< ::std::string> protocol;
    std::optional<bool> mx;
    std::optional<bool> serialize;
    std::optional<bool> compress;
    std::optional<bool> ipv6;
    std::optional< ::Test::Common::StringSeq> cprops;
    std::optional< ::Test::Common::StringSeq> sprops;
};

/// \cond INTERNAL
static Config _iceS_Config_init;
/// \endcond

class OptionOverrides : public ::Ice::ValueHelper<OptionOverrides, ::Ice::Value>
{
public:

    virtual ~OptionOverrides();

    OptionOverrides() = default;

    OptionOverrides(const OptionOverrides&) = default;
    OptionOverrides(OptionOverrides&&) = default;
    OptionOverrides& operator=(const OptionOverrides&) = default;
    OptionOverrides& operator=(OptionOverrides&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    OptionOverrides(const std::optional< ::Test::Common::StringSeq>& protocol, const std::optional< ::Test::Common::BoolSeq>& mx, const std::optional< ::Test::Common::BoolSeq>& serialize, const std::optional< ::Test::Common::BoolSeq>& compress, const std::optional< ::Test::Common::BoolSeq>& ipv6) :
        protocol(protocol),
        mx(mx),
        serialize(serialize),
        compress(compress),
        ipv6(ipv6)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional< ::Test::Common::StringSeq>&, const std::optional< ::Test::Common::BoolSeq>&, const std::optional< ::Test::Common::BoolSeq>&, const std::optional< ::Test::Common::BoolSeq>&, const std::optional< ::Test::Common::BoolSeq>&> ice_tuple() const
    {
        return std::tie(protocol, mx, serialize, compress, ipv6);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional< ::Test::Common::StringSeq> protocol;
    std::optional< ::Test::Common::BoolSeq> mx;
    std::optional< ::Test::Common::BoolSeq> serialize;
    std::optional< ::Test::Common::BoolSeq> compress;
    std::optional< ::Test::Common::BoolSeq> ipv6;
};

}

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::Test::Common::Config, S>
{
    static void write(S* ostr, const ::Test::Common::Config& v)
    {
        ostr->write(1, v.protocol);
        ostr->write(2, v.mx);
        ostr->write(3, v.serialize);
        ostr->write(4, v.compress);
        ostr->write(5, v.ipv6);
        ostr->write(6, v.cprops);
        ostr->write(7, v.sprops);
    }
};

template<typename S>
struct StreamReader< ::Test::Common::Config, S>
{
    static void read(S* istr, ::Test::Common::Config& v)
    {
        istr->read(1, v.protocol);
        istr->read(2, v.mx);
        istr->read(3, v.serialize);
        istr->read(4, v.compress);
        istr->read(5, v.ipv6);
        istr->read(6, v.cprops);
        istr->read(7, v.sprops);
    }
};

template<typename S>
struct StreamWriter< ::Test::Common::OptionOverrides, S>
{
    static void write(S* ostr, const ::Test::Common::OptionOverrides& v)
    {
        ostr->write(1, v.protocol);
        ostr->write(2, v.mx);
        ostr->write(3, v.serialize);
        ostr->write(4, v.compress);
        ostr->write(5, v.ipv6);
    }
};

template<typename S>
struct StreamReader< ::Test::Common::OptionOverrides, S>
{
    static void read(S* istr, ::Test::Common::OptionOverrides& v)
    {
        istr->read(1, v.protocol);
        istr->read(2, v.mx);
        istr->read(3, v.serialize);
        istr->read(4, v.compress);
        istr->read(5, v.ipv6);
    }
};

template<>
struct StreamableTraits< ::Test::Common::TestCaseNotExistException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::Common::TestCaseNotExistException, S>
{
    static void write(S* ostr, const ::Test::Common::TestCaseNotExistException& v)
    {
        ostr->write(v.reason);
    }
};

template<typename S>
struct StreamReader< ::Test::Common::TestCaseNotExistException, S>
{
    static void read(S* istr, ::Test::Common::TestCaseNotExistException& v)
    {
        istr->read(v.reason);
    }
};

template<>
struct StreamableTraits< ::Test::Common::TestCaseFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::Common::TestCaseFailedException, S>
{
    static void write(S* ostr, const ::Test::Common::TestCaseFailedException& v)
    {
        ostr->write(v.output);
    }
};

template<typename S>
struct StreamReader< ::Test::Common::TestCaseFailedException, S>
{
    static void read(S* istr, ::Test::Common::TestCaseFailedException& v)
    {
        istr->read(v.output);
    }
};

template<>
struct StreamableTraits< ::Test::Common::ProcessFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::Common::ProcessFailedException, S>
{
    static void write(S* ostr, const ::Test::Common::ProcessFailedException& v)
    {
        ostr->write(v.reason);
    }
};

template<typename S>
struct StreamReader< ::Test::Common::ProcessFailedException, S>
{
    static void read(S* istr, ::Test::Common::ProcessFailedException& v)
    {
        istr->read(v.reason);
    }
};

}
/// \endcond

namespace Test
{

namespace Common
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Common::TestCase::begin_startServerSide.
 * Create a wrapper instance by calling ::Test::Common::newCallback_TestCase_startServerSide.
 */
template<class T>
class CallbackNC_TestCase_startServerSide : public Callback_TestCase_startServerSide_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_TestCase_startServerSide(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        TestCasePrx proxy = TestCasePrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_startServerSide(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_startServerSide.
 */
template<class T> Callback_TestCase_startServerSidePtr
newCallback_TestCase_startServerSide(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestCase_startServerSide<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_startServerSide.
 */
template<class T> Callback_TestCase_startServerSidePtr
newCallback_TestCase_startServerSide(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestCase_startServerSide<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Common::TestCase::begin_startServerSide.
 * Create a wrapper instance by calling ::Test::Common::newCallback_TestCase_startServerSide.
 */
template<class T, typename CT>
class Callback_TestCase_startServerSide : public Callback_TestCase_startServerSide_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_TestCase_startServerSide(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        TestCasePrx proxy = TestCasePrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_startServerSide(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_startServerSide.
 */
template<class T, typename CT> Callback_TestCase_startServerSidePtr
newCallback_TestCase_startServerSide(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestCase_startServerSide<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_startServerSide.
 */
template<class T, typename CT> Callback_TestCase_startServerSidePtr
newCallback_TestCase_startServerSide(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestCase_startServerSide<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Common::TestCase::begin_stopServerSide.
 * Create a wrapper instance by calling ::Test::Common::newCallback_TestCase_stopServerSide.
 */
template<class T>
class CallbackNC_TestCase_stopServerSide : public Callback_TestCase_stopServerSide_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_TestCase_stopServerSide(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        TestCasePrx proxy = TestCasePrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_stopServerSide(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_stopServerSide.
 */
template<class T> Callback_TestCase_stopServerSidePtr
newCallback_TestCase_stopServerSide(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestCase_stopServerSide<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_stopServerSide.
 */
template<class T> Callback_TestCase_stopServerSidePtr
newCallback_TestCase_stopServerSide(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestCase_stopServerSide<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Common::TestCase::begin_stopServerSide.
 * Create a wrapper instance by calling ::Test::Common::newCallback_TestCase_stopServerSide.
 */
template<class T, typename CT>
class Callback_TestCase_stopServerSide : public Callback_TestCase_stopServerSide_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_TestCase_stopServerSide(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        TestCasePrx proxy = TestCasePrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_stopServerSide(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_stopServerSide.
 */
template<class T, typename CT> Callback_TestCase_stopServerSidePtr
newCallback_TestCase_stopServerSide(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestCase_stopServerSide<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_stopServerSide.
 */
template<class T, typename CT> Callback_TestCase_stopServerSidePtr
newCallback_TestCase_stopServerSide(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestCase_stopServerSide<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Common::TestCase::begin_runClientSide.
 * Create a wrapper instance by calling ::Test::Common::newCallback_TestCase_runClientSide.
 */
template<class T>
class CallbackNC_TestCase_runClientSide : public Callback_TestCase_runClientSide_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_TestCase_runClientSide(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        TestCasePrx proxy = TestCasePrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_runClientSide(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_runClientSide.
 */
template<class T> Callback_TestCase_runClientSidePtr
newCallback_TestCase_runClientSide(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestCase_runClientSide<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_runClientSide.
 */
template<class T> Callback_TestCase_runClientSidePtr
newCallback_TestCase_runClientSide(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestCase_runClientSide<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Common::TestCase::begin_runClientSide.
 * Create a wrapper instance by calling ::Test::Common::newCallback_TestCase_runClientSide.
 */
template<class T, typename CT>
class Callback_TestCase_runClientSide : public Callback_TestCase_runClientSide_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_TestCase_runClientSide(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        TestCasePrx proxy = TestCasePrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_runClientSide(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_runClientSide.
 */
template<class T, typename CT> Callback_TestCase_runClientSidePtr
newCallback_TestCase_runClientSide(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestCase_runClientSide<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_runClientSide.
 */
template<class T, typename CT> Callback_TestCase_runClientSidePtr
newCallback_TestCase_runClientSide(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestCase_runClientSide<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Common::TestCase::begin_destroy.
 * Create a wrapper instance by calling ::Test::Common::newCallback_TestCase_destroy.
 */
template<class T>
class CallbackNC_TestCase_destroy : public Callback_TestCase_destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TestCase_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_destroy.
 */
template<class T> Callback_TestCase_destroyPtr
newCallback_TestCase_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestCase_destroy<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_destroy.
 */
template<class T> Callback_TestCase_destroyPtr
newCallback_TestCase_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestCase_destroy<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_destroy.
 */
template<class T> Callback_TestCase_destroyPtr
newCallback_TestCase_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestCase_destroy<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_destroy.
 */
template<class T> Callback_TestCase_destroyPtr
newCallback_TestCase_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TestCase_destroy<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Common::TestCase::begin_destroy.
 * Create a wrapper instance by calling ::Test::Common::newCallback_TestCase_destroy.
 */
template<class T, typename CT>
class Callback_TestCase_destroy : public Callback_TestCase_destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TestCase_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_destroy.
 */
template<class T, typename CT> Callback_TestCase_destroyPtr
newCallback_TestCase_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestCase_destroy<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_destroy.
 */
template<class T, typename CT> Callback_TestCase_destroyPtr
newCallback_TestCase_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestCase_destroy<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_destroy.
 */
template<class T, typename CT> Callback_TestCase_destroyPtr
newCallback_TestCase_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestCase_destroy<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::TestCase::begin_destroy.
 */
template<class T, typename CT> Callback_TestCase_destroyPtr
newCallback_TestCase_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TestCase_destroy<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Common::Controller::begin_runTestCase.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Controller_runTestCase.
 */
template<class T>
class CallbackNC_Controller_runTestCase : public Callback_Controller_runTestCase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TestCasePrx&);

    CallbackNC_Controller_runTestCase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ControllerPrx proxy = ControllerPrx::uncheckedCast(result->getProxy());
        TestCasePrx ret;
        try
        {
            ret = proxy->end_runTestCase(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_runTestCase.
 */
template<class T> Callback_Controller_runTestCasePtr
newCallback_Controller_runTestCase(const IceUtil::Handle<T>& instance, void (T::*cb)(const TestCasePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_runTestCase<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_runTestCase.
 */
template<class T> Callback_Controller_runTestCasePtr
newCallback_Controller_runTestCase(T* instance, void (T::*cb)(const TestCasePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_runTestCase<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Common::Controller::begin_runTestCase.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Controller_runTestCase.
 */
template<class T, typename CT>
class Callback_Controller_runTestCase : public Callback_Controller_runTestCase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TestCasePrx&, const CT&);

    Callback_Controller_runTestCase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ControllerPrx proxy = ControllerPrx::uncheckedCast(result->getProxy());
        TestCasePrx ret;
        try
        {
            ret = proxy->end_runTestCase(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_runTestCase.
 */
template<class T, typename CT> Callback_Controller_runTestCasePtr
newCallback_Controller_runTestCase(const IceUtil::Handle<T>& instance, void (T::*cb)(const TestCasePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_runTestCase<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_runTestCase.
 */
template<class T, typename CT> Callback_Controller_runTestCasePtr
newCallback_Controller_runTestCase(T* instance, void (T::*cb)(const TestCasePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_runTestCase<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Common::Controller::begin_getOptionOverrides.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Controller_getOptionOverrides.
 */
template<class T>
class CallbackNC_Controller_getOptionOverrides : public Callback_Controller_getOptionOverrides_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const OptionOverridesPtr&);

    CallbackNC_Controller_getOptionOverrides(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ControllerPrx proxy = ControllerPrx::uncheckedCast(result->getProxy());
        OptionOverridesPtr ret;
        try
        {
            ret = proxy->end_getOptionOverrides(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_getOptionOverrides.
 */
template<class T> Callback_Controller_getOptionOverridesPtr
newCallback_Controller_getOptionOverrides(const IceUtil::Handle<T>& instance, void (T::*cb)(const OptionOverridesPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_getOptionOverrides<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_getOptionOverrides.
 */
template<class T> Callback_Controller_getOptionOverridesPtr
newCallback_Controller_getOptionOverrides(T* instance, void (T::*cb)(const OptionOverridesPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_getOptionOverrides<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Common::Controller::begin_getOptionOverrides.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Controller_getOptionOverrides.
 */
template<class T, typename CT>
class Callback_Controller_getOptionOverrides : public Callback_Controller_getOptionOverrides_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const OptionOverridesPtr&, const CT&);

    Callback_Controller_getOptionOverrides(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ControllerPrx proxy = ControllerPrx::uncheckedCast(result->getProxy());
        OptionOverridesPtr ret;
        try
        {
            ret = proxy->end_getOptionOverrides(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_getOptionOverrides.
 */
template<class T, typename CT> Callback_Controller_getOptionOverridesPtr
newCallback_Controller_getOptionOverrides(const IceUtil::Handle<T>& instance, void (T::*cb)(const OptionOverridesPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_getOptionOverrides<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_getOptionOverrides.
 */
template<class T, typename CT> Callback_Controller_getOptionOverridesPtr
newCallback_Controller_getOptionOverrides(T* instance, void (T::*cb)(const OptionOverridesPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_getOptionOverrides<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Common::Controller::begin_getTestSuites.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Controller_getTestSuites.
 */
template<class T>
class CallbackNC_Controller_getTestSuites : public Callback_Controller_getTestSuites_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const StringSeq&);

    CallbackNC_Controller_getTestSuites(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ControllerPrx proxy = ControllerPrx::uncheckedCast(result->getProxy());
        StringSeq ret;
        try
        {
            ret = proxy->end_getTestSuites(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_getTestSuites.
 */
template<class T> Callback_Controller_getTestSuitesPtr
newCallback_Controller_getTestSuites(const IceUtil::Handle<T>& instance, void (T::*cb)(const StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_getTestSuites<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_getTestSuites.
 */
template<class T> Callback_Controller_getTestSuitesPtr
newCallback_Controller_getTestSuites(T* instance, void (T::*cb)(const StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_getTestSuites<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Common::Controller::begin_getTestSuites.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Controller_getTestSuites.
 */
template<class T, typename CT>
class Callback_Controller_getTestSuites : public Callback_Controller_getTestSuites_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const StringSeq&, const CT&);

    Callback_Controller_getTestSuites(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ControllerPrx proxy = ControllerPrx::uncheckedCast(result->getProxy());
        StringSeq ret;
        try
        {
            ret = proxy->end_getTestSuites(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_getTestSuites.
 */
template<class T, typename CT> Callback_Controller_getTestSuitesPtr
newCallback_Controller_getTestSuites(const IceUtil::Handle<T>& instance, void (T::*cb)(const StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_getTestSuites<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_getTestSuites.
 */
template<class T, typename CT> Callback_Controller_getTestSuitesPtr
newCallback_Controller_getTestSuites(T* instance, void (T::*cb)(const StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_getTestSuites<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Common::Controller::begin_getHost.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Controller_getHost.
 */
template<class T>
class CallbackNC_Controller_getHost : public Callback_Controller_getHost_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Controller_getHost(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ControllerPrx proxy = ControllerPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getHost(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_getHost.
 */
template<class T> Callback_Controller_getHostPtr
newCallback_Controller_getHost(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_getHost<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_getHost.
 */
template<class T> Callback_Controller_getHostPtr
newCallback_Controller_getHost(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Controller_getHost<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Common::Controller::begin_getHost.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Controller_getHost.
 */
template<class T, typename CT>
class Callback_Controller_getHost : public Callback_Controller_getHost_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Controller_getHost(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ControllerPrx proxy = ControllerPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getHost(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_getHost.
 */
template<class T, typename CT> Callback_Controller_getHostPtr
newCallback_Controller_getHost(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_getHost<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Controller::begin_getHost.
 */
template<class T, typename CT> Callback_Controller_getHostPtr
newCallback_Controller_getHost(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Controller_getHost<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Common::Process::begin_waitReady.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Process_waitReady.
 */
template<class T>
class CallbackNC_Process_waitReady : public Callback_Process_waitReady_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Process_waitReady(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ProcessPrx proxy = ProcessPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_waitReady(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_waitReady.
 */
template<class T> Callback_Process_waitReadyPtr
newCallback_Process_waitReady(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Process_waitReady<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_waitReady.
 */
template<class T> Callback_Process_waitReadyPtr
newCallback_Process_waitReady(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Process_waitReady<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_waitReady.
 */
template<class T> Callback_Process_waitReadyPtr
newCallback_Process_waitReady(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Process_waitReady<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_waitReady.
 */
template<class T> Callback_Process_waitReadyPtr
newCallback_Process_waitReady(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Process_waitReady<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Common::Process::begin_waitReady.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Process_waitReady.
 */
template<class T, typename CT>
class Callback_Process_waitReady : public Callback_Process_waitReady_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Process_waitReady(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ProcessPrx proxy = ProcessPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_waitReady(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_waitReady.
 */
template<class T, typename CT> Callback_Process_waitReadyPtr
newCallback_Process_waitReady(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Process_waitReady<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_waitReady.
 */
template<class T, typename CT> Callback_Process_waitReadyPtr
newCallback_Process_waitReady(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Process_waitReady<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_waitReady.
 */
template<class T, typename CT> Callback_Process_waitReadyPtr
newCallback_Process_waitReady(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Process_waitReady<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_waitReady.
 */
template<class T, typename CT> Callback_Process_waitReadyPtr
newCallback_Process_waitReady(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Process_waitReady<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Common::Process::begin_waitSuccess.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Process_waitSuccess.
 */
template<class T>
class CallbackNC_Process_waitSuccess : public Callback_Process_waitSuccess_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Process_waitSuccess(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ProcessPrx proxy = ProcessPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_waitSuccess(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_waitSuccess.
 */
template<class T> Callback_Process_waitSuccessPtr
newCallback_Process_waitSuccess(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Process_waitSuccess<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_waitSuccess.
 */
template<class T> Callback_Process_waitSuccessPtr
newCallback_Process_waitSuccess(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Process_waitSuccess<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Common::Process::begin_waitSuccess.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Process_waitSuccess.
 */
template<class T, typename CT>
class Callback_Process_waitSuccess : public Callback_Process_waitSuccess_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Process_waitSuccess(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ProcessPrx proxy = ProcessPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_waitSuccess(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_waitSuccess.
 */
template<class T, typename CT> Callback_Process_waitSuccessPtr
newCallback_Process_waitSuccess(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Process_waitSuccess<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_waitSuccess.
 */
template<class T, typename CT> Callback_Process_waitSuccessPtr
newCallback_Process_waitSuccess(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Process_waitSuccess<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Common::Process::begin_terminate.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Process_terminate.
 */
template<class T>
class CallbackNC_Process_terminate : public Callback_Process_terminate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Process_terminate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ProcessPrx proxy = ProcessPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_terminate(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_terminate.
 */
template<class T> Callback_Process_terminatePtr
newCallback_Process_terminate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Process_terminate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_terminate.
 */
template<class T> Callback_Process_terminatePtr
newCallback_Process_terminate(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Process_terminate<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Common::Process::begin_terminate.
 * Create a wrapper instance by calling ::Test::Common::newCallback_Process_terminate.
 */
template<class T, typename CT>
class Callback_Process_terminate : public Callback_Process_terminate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Process_terminate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ProcessPrx proxy = ProcessPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_terminate(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_terminate.
 */
template<class T, typename CT> Callback_Process_terminatePtr
newCallback_Process_terminate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Process_terminate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::Process::begin_terminate.
 */
template<class T, typename CT> Callback_Process_terminatePtr
newCallback_Process_terminate(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Process_terminate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Common::ProcessController::begin_start.
 * Create a wrapper instance by calling ::Test::Common::newCallback_ProcessController_start.
 */
template<class T>
class CallbackNC_ProcessController_start : public Callback_ProcessController_start_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ProcessPrx&);

    CallbackNC_ProcessController_start(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ProcessControllerPrx proxy = ProcessControllerPrx::uncheckedCast(result->getProxy());
        ProcessPrx ret;
        try
        {
            ret = proxy->end_start(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessController::begin_start.
 */
template<class T> Callback_ProcessController_startPtr
newCallback_ProcessController_start(const IceUtil::Handle<T>& instance, void (T::*cb)(const ProcessPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProcessController_start<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessController::begin_start.
 */
template<class T> Callback_ProcessController_startPtr
newCallback_ProcessController_start(T* instance, void (T::*cb)(const ProcessPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProcessController_start<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Common::ProcessController::begin_start.
 * Create a wrapper instance by calling ::Test::Common::newCallback_ProcessController_start.
 */
template<class T, typename CT>
class Callback_ProcessController_start : public Callback_ProcessController_start_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ProcessPrx&, const CT&);

    Callback_ProcessController_start(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ProcessControllerPrx proxy = ProcessControllerPrx::uncheckedCast(result->getProxy());
        ProcessPrx ret;
        try
        {
            ret = proxy->end_start(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessController::begin_start.
 */
template<class T, typename CT> Callback_ProcessController_startPtr
newCallback_ProcessController_start(const IceUtil::Handle<T>& instance, void (T::*cb)(const ProcessPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProcessController_start<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessController::begin_start.
 */
template<class T, typename CT> Callback_ProcessController_startPtr
newCallback_ProcessController_start(T* instance, void (T::*cb)(const ProcessPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProcessController_start<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Common::ProcessController::begin_getHost.
 * Create a wrapper instance by calling ::Test::Common::newCallback_ProcessController_getHost.
 */
template<class T>
class CallbackNC_ProcessController_getHost : public Callback_ProcessController_getHost_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_ProcessController_getHost(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ProcessControllerPrx proxy = ProcessControllerPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getHost(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessController::begin_getHost.
 */
template<class T> Callback_ProcessController_getHostPtr
newCallback_ProcessController_getHost(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProcessController_getHost<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessController::begin_getHost.
 */
template<class T> Callback_ProcessController_getHostPtr
newCallback_ProcessController_getHost(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProcessController_getHost<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Common::ProcessController::begin_getHost.
 * Create a wrapper instance by calling ::Test::Common::newCallback_ProcessController_getHost.
 */
template<class T, typename CT>
class Callback_ProcessController_getHost : public Callback_ProcessController_getHost_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_ProcessController_getHost(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ProcessControllerPrx proxy = ProcessControllerPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getHost(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessController::begin_getHost.
 */
template<class T, typename CT> Callback_ProcessController_getHostPtr
newCallback_ProcessController_getHost(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProcessController_getHost<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessController::begin_getHost.
 */
template<class T, typename CT> Callback_ProcessController_getHostPtr
newCallback_ProcessController_getHost(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProcessController_getHost<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Common::BrowserProcessController::begin_redirect.
 * Create a wrapper instance by calling ::Test::Common::newCallback_BrowserProcessController_redirect.
 */
template<class T>
class CallbackNC_BrowserProcessController_redirect : public Callback_BrowserProcessController_redirect_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BrowserProcessController_redirect(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::BrowserProcessController::begin_redirect.
 */
template<class T> Callback_BrowserProcessController_redirectPtr
newCallback_BrowserProcessController_redirect(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BrowserProcessController_redirect<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::BrowserProcessController::begin_redirect.
 */
template<class T> Callback_BrowserProcessController_redirectPtr
newCallback_BrowserProcessController_redirect(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BrowserProcessController_redirect<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::BrowserProcessController::begin_redirect.
 */
template<class T> Callback_BrowserProcessController_redirectPtr
newCallback_BrowserProcessController_redirect(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BrowserProcessController_redirect<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::BrowserProcessController::begin_redirect.
 */
template<class T> Callback_BrowserProcessController_redirectPtr
newCallback_BrowserProcessController_redirect(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BrowserProcessController_redirect<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Common::BrowserProcessController::begin_redirect.
 * Create a wrapper instance by calling ::Test::Common::newCallback_BrowserProcessController_redirect.
 */
template<class T, typename CT>
class Callback_BrowserProcessController_redirect : public Callback_BrowserProcessController_redirect_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BrowserProcessController_redirect(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::BrowserProcessController::begin_redirect.
 */
template<class T, typename CT> Callback_BrowserProcessController_redirectPtr
newCallback_BrowserProcessController_redirect(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BrowserProcessController_redirect<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::BrowserProcessController::begin_redirect.
 */
template<class T, typename CT> Callback_BrowserProcessController_redirectPtr
newCallback_BrowserProcessController_redirect(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BrowserProcessController_redirect<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::BrowserProcessController::begin_redirect.
 */
template<class T, typename CT> Callback_BrowserProcessController_redirectPtr
newCallback_BrowserProcessController_redirect(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BrowserProcessController_redirect<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::BrowserProcessController::begin_redirect.
 */
template<class T, typename CT> Callback_BrowserProcessController_redirectPtr
newCallback_BrowserProcessController_redirect(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BrowserProcessController_redirect<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Common::ProcessControllerRegistry::begin_setProcessController.
 * Create a wrapper instance by calling ::Test::Common::newCallback_ProcessControllerRegistry_setProcessController.
 */
template<class T>
class CallbackNC_ProcessControllerRegistry_setProcessController : public Callback_ProcessControllerRegistry_setProcessController_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ProcessControllerRegistry_setProcessController(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessControllerRegistry::begin_setProcessController.
 */
template<class T> Callback_ProcessControllerRegistry_setProcessControllerPtr
newCallback_ProcessControllerRegistry_setProcessController(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProcessControllerRegistry_setProcessController<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessControllerRegistry::begin_setProcessController.
 */
template<class T> Callback_ProcessControllerRegistry_setProcessControllerPtr
newCallback_ProcessControllerRegistry_setProcessController(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProcessControllerRegistry_setProcessController<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessControllerRegistry::begin_setProcessController.
 */
template<class T> Callback_ProcessControllerRegistry_setProcessControllerPtr
newCallback_ProcessControllerRegistry_setProcessController(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProcessControllerRegistry_setProcessController<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessControllerRegistry::begin_setProcessController.
 */
template<class T> Callback_ProcessControllerRegistry_setProcessControllerPtr
newCallback_ProcessControllerRegistry_setProcessController(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProcessControllerRegistry_setProcessController<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Common::ProcessControllerRegistry::begin_setProcessController.
 * Create a wrapper instance by calling ::Test::Common::newCallback_ProcessControllerRegistry_setProcessController.
 */
template<class T, typename CT>
class Callback_ProcessControllerRegistry_setProcessController : public Callback_ProcessControllerRegistry_setProcessController_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ProcessControllerRegistry_setProcessController(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessControllerRegistry::begin_setProcessController.
 */
template<class T, typename CT> Callback_ProcessControllerRegistry_setProcessControllerPtr
newCallback_ProcessControllerRegistry_setProcessController(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProcessControllerRegistry_setProcessController<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessControllerRegistry::begin_setProcessController.
 */
template<class T, typename CT> Callback_ProcessControllerRegistry_setProcessControllerPtr
newCallback_ProcessControllerRegistry_setProcessController(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProcessControllerRegistry_setProcessController<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessControllerRegistry::begin_setProcessController.
 */
template<class T, typename CT> Callback_ProcessControllerRegistry_setProcessControllerPtr
newCallback_ProcessControllerRegistry_setProcessController(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProcessControllerRegistry_setProcessController<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Common::ProcessControllerRegistry::begin_setProcessController.
 */
template<class T, typename CT> Callback_ProcessControllerRegistry_setProcessControllerPtr
newCallback_ProcessControllerRegistry_setProcessController(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProcessControllerRegistry_setProcessController<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
