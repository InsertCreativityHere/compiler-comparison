//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/AsyncResponseHandler.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

}

::std::shared_ptr<::NoNamespace::C1>
Test::InitialPrx::getNoNamespaceC2AsC1(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<::NoNamespace::C1>>(true, this, &InitialPrx::_iceI_getNoNamespaceC2AsC1, context).get();
}

::std::future<::std::shared_ptr<::NoNamespace::C1>>
Test::InitialPrx::getNoNamespaceC2AsC1Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<::NoNamespace::C1>>(false, this, &InitialPrx::_iceI_getNoNamespaceC2AsC1, context);
}

::std::function<void()>
Test::InitialPrx::getNoNamespaceC2AsC1Async(::std::function<void(::std::shared_ptr<::NoNamespace::C1>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<::NoNamespace::C1>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getNoNamespaceC2AsC1, context);
}

void
Test::InitialPrx::_iceI_getNoNamespaceC2AsC1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::NoNamespace::C1>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getNoNamespaceC2AsC1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::NoNamespace::C1> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

::std::shared_ptr<::NoNamespace::C2>
Test::InitialPrx::getNoNamespaceC2AsC2(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<::NoNamespace::C2>>(true, this, &InitialPrx::_iceI_getNoNamespaceC2AsC2, context).get();
}

::std::future<::std::shared_ptr<::NoNamespace::C2>>
Test::InitialPrx::getNoNamespaceC2AsC2Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<::NoNamespace::C2>>(false, this, &InitialPrx::_iceI_getNoNamespaceC2AsC2, context);
}

::std::function<void()>
Test::InitialPrx::getNoNamespaceC2AsC2Async(::std::function<void(::std::shared_ptr<::NoNamespace::C2>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<::NoNamespace::C2>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getNoNamespaceC2AsC2, context);
}

void
Test::InitialPrx::_iceI_getNoNamespaceC2AsC2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::NoNamespace::C2>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getNoNamespaceC2AsC2";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::NoNamespace::C2> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

void
Test::InitialPrx::throwNoNamespaceE2AsE1(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwNoNamespaceE2AsE1, context).get();
}

::std::future<void>
Test::InitialPrx::throwNoNamespaceE2AsE1Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_throwNoNamespaceE2AsE1, context);
}

::std::function<void()>
Test::InitialPrx::throwNoNamespaceE2AsE1Async(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_throwNoNamespaceE2AsE1, context);
}

void
Test::InitialPrx::_iceI_throwNoNamespaceE2AsE1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "throwNoNamespaceE2AsE1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::NoNamespace::E1&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Test::InitialPrx::throwNoNamespaceE2AsE2(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwNoNamespaceE2AsE2, context).get();
}

::std::future<void>
Test::InitialPrx::throwNoNamespaceE2AsE2Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_throwNoNamespaceE2AsE2, context);
}

::std::function<void()>
Test::InitialPrx::throwNoNamespaceE2AsE2Async(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_throwNoNamespaceE2AsE2, context);
}

void
Test::InitialPrx::_iceI_throwNoNamespaceE2AsE2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "throwNoNamespaceE2AsE2";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::NoNamespace::E2&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Test::InitialPrx::throwNoNamespaceNotify(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwNoNamespaceNotify, context).get();
}

::std::future<void>
Test::InitialPrx::throwNoNamespaceNotifyAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_throwNoNamespaceNotify, context);
}

::std::function<void()>
Test::InitialPrx::throwNoNamespaceNotifyAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_throwNoNamespaceNotify, context);
}

void
Test::InitialPrx::_iceI_throwNoNamespaceNotify(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "throwNoNamespaceNotify";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::NoNamespace::notify&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

::std::shared_ptr<::WithNamespace::C1>
Test::InitialPrx::getWithNamespaceC2AsC1(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<::WithNamespace::C1>>(true, this, &InitialPrx::_iceI_getWithNamespaceC2AsC1, context).get();
}

::std::future<::std::shared_ptr<::WithNamespace::C1>>
Test::InitialPrx::getWithNamespaceC2AsC1Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<::WithNamespace::C1>>(false, this, &InitialPrx::_iceI_getWithNamespaceC2AsC1, context);
}

::std::function<void()>
Test::InitialPrx::getWithNamespaceC2AsC1Async(::std::function<void(::std::shared_ptr<::WithNamespace::C1>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<::WithNamespace::C1>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getWithNamespaceC2AsC1, context);
}

void
Test::InitialPrx::_iceI_getWithNamespaceC2AsC1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::WithNamespace::C1>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getWithNamespaceC2AsC1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::WithNamespace::C1> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

::std::shared_ptr<::WithNamespace::C2>
Test::InitialPrx::getWithNamespaceC2AsC2(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<::WithNamespace::C2>>(true, this, &InitialPrx::_iceI_getWithNamespaceC2AsC2, context).get();
}

::std::future<::std::shared_ptr<::WithNamespace::C2>>
Test::InitialPrx::getWithNamespaceC2AsC2Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::shared_ptr<::WithNamespace::C2>>(false, this, &InitialPrx::_iceI_getWithNamespaceC2AsC2, context);
}

::std::function<void()>
Test::InitialPrx::getWithNamespaceC2AsC2Async(::std::function<void(::std::shared_ptr<::WithNamespace::C2>)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::shared_ptr<::WithNamespace::C2>>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_getWithNamespaceC2AsC2, context);
}

void
Test::InitialPrx::_iceI_getWithNamespaceC2AsC2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::WithNamespace::C2>>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getWithNamespaceC2AsC2";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::WithNamespace::C2> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

void
Test::InitialPrx::throwWithNamespaceE2AsE1(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwWithNamespaceE2AsE1, context).get();
}

::std::future<void>
Test::InitialPrx::throwWithNamespaceE2AsE1Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_throwWithNamespaceE2AsE1, context);
}

::std::function<void()>
Test::InitialPrx::throwWithNamespaceE2AsE1Async(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_throwWithNamespaceE2AsE1, context);
}

void
Test::InitialPrx::_iceI_throwWithNamespaceE2AsE1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "throwWithNamespaceE2AsE1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::WithNamespace::E1&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Test::InitialPrx::throwWithNamespaceE2AsE2(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwWithNamespaceE2AsE2, context).get();
}

::std::future<void>
Test::InitialPrx::throwWithNamespaceE2AsE2Async(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_throwWithNamespaceE2AsE2, context);
}

::std::function<void()>
Test::InitialPrx::throwWithNamespaceE2AsE2Async(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_throwWithNamespaceE2AsE2, context);
}

void
Test::InitialPrx::_iceI_throwWithNamespaceE2AsE2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "throwWithNamespaceE2AsE2";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::WithNamespace::E2&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Test::InitialPrx::shutdown(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::InitialPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::InitialPrx::shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::InitialPrx::_iceI_shutdown, context);
}

void
Test::InitialPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::string_view
Test::InitialPrx::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::Initial";
    return typeId;
}

::std::vector<::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::Initial"};
    return allTypeIds;
}

::std::string
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::Initial::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
void
Test::Initial::_iceD_getNoNamespaceC2AsC1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<::NoNamespace::C1> ret = this->getNoNamespaceC2AsC1(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getNoNamespaceC2AsC2(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<::NoNamespace::C2> ret = this->getNoNamespaceC2AsC2(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_throwNoNamespaceE2AsE1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->throwNoNamespaceE2AsE1(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_throwNoNamespaceE2AsE2(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->throwNoNamespaceE2AsE2(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_throwNoNamespaceNotify(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->throwNoNamespaceNotify(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getWithNamespaceC2AsC1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<::WithNamespace::C1> ret = this->getWithNamespaceC2AsC1(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getWithNamespaceC2AsC2(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    ::std::shared_ptr<::WithNamespace::C2> ret = this->getWithNamespaceC2AsC2(request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_throwWithNamespaceE2AsE1(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->throwWithNamespaceE2AsE1(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_throwWithNamespaceE2AsE2(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->throwWithNamespaceE2AsE2(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_shutdown(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"getNoNamespaceC2AsC1", "getNoNamespaceC2AsC2", "getWithNamespaceC2AsC1", "getWithNamespaceC2AsC2", "ice_id", "ice_ids", "ice_isA", "ice_ping", "shutdown", "throwNoNamespaceE2AsE1", "throwNoNamespaceE2AsE2", "throwNoNamespaceNotify", "throwWithNamespaceE2AsE1", "throwWithNamespaceE2AsE2"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 14, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_getNoNamespaceC2AsC1(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_getNoNamespaceC2AsC2(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_getWithNamespaceC2AsC1(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_getWithNamespaceC2AsC2(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_shutdown(request, ::std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_throwNoNamespaceE2AsE1(request, ::std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_throwNoNamespaceE2AsE2(request, ::std::move(sendResponse));
            break;
        }
        case 11:
        {
            _iceD_throwNoNamespaceNotify(request, ::std::move(sendResponse));
            break;
        }
        case 12:
        {
            _iceD_throwWithNamespaceE2AsE1(request, ::std::move(sendResponse));
            break;
        }
        case 13:
        {
            _iceD_throwWithNamespaceE2AsE2(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException(__FILE__, __LINE__)), current));
        }
    }
}
/// \endcond
