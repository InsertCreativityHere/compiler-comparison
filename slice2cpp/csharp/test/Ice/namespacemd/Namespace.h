//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Namespace.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Namespace_h__
#define __Namespace_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace WithNamespace
{

class C1;
class C2;

}

namespace WithNamespace
{

class E1 : public ::Ice::UserExceptionHelper<E1, ::Ice::UserException>
{
public:

    virtual ~E1();

    E1(const E1&) = default;

    E1() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    E1(int i) :
        i(i)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(i);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int i;
};

/// \cond INTERNAL
static E1 _iceS_E1_init;
/// \endcond

class E2 : public ::Ice::UserExceptionHelper<E2, E1>
{
public:

    virtual ~E2();

    E2(const E2&) = default;

    E2() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    E2(int i, long long int l) :
        ::Ice::UserExceptionHelper<E2, E1>(i),
        l(l)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const long long int&> ice_tuple() const
    {
        return std::tie(i, l);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    long long int l;
};

}

namespace WithNamespace
{

class C1 : public ::Ice::ValueHelper<C1, ::Ice::Value>
{
public:

    virtual ~C1();

    C1() = default;

    C1(const C1&) = default;
    C1(C1&&) = default;
    C1& operator=(const C1&) = default;
    C1& operator=(C1&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C1(int i) :
        i(i)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(i);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int i;
};

/// \cond INTERNAL
static C1 _iceS_C1_init;
/// \endcond

class C2 : public ::Ice::ValueHelper<C2, C1>
{
public:

    virtual ~C2();

    C2() = default;

    C2(const C2&) = default;
    C2(C2&&) = default;
    C2& operator=(const C2&) = default;
    C2& operator=(C2&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C2(int i, long long int l) :
        Ice::ValueHelper<C2, C1>(i),
        l(l)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const long long int&> ice_tuple() const
    {
        return std::tie(i, l);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    long long int l;
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::WithNamespace::C1, S>
{
    static void read(S* istr, ::WithNamespace::C1& v)
    {
        istr->readAll(v.i);
    }
};

template<typename S>
struct StreamWriter<::WithNamespace::C2, S>
{
    static void write(S* ostr, const ::WithNamespace::C2& v)
    {
        ostr->writeAll(v.l);
    }
};

template<typename S>
struct StreamReader<::WithNamespace::C2, S>
{
    static void read(S* istr, ::WithNamespace::C2& v)
    {
        istr->readAll(v.l);
    }
};

template<typename S>
struct StreamReader<::WithNamespace::E1, S>
{
    static void read(S* istr, ::WithNamespace::E1& v)
    {
        istr->readAll(v.i);
    }
};

template<typename S>
struct StreamWriter<::WithNamespace::E2, S>
{
    static void write(S* ostr, const ::WithNamespace::E2& v)
    {
        ostr->writeAll(v.l);
    }
};

template<typename S>
struct StreamReader<::WithNamespace::E2, S>
{
    static void read(S* istr, ::WithNamespace::E2& v)
    {
        istr->readAll(v.l);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace WithNamespace
{

using C1Ptr = ::std::shared_ptr<C1>;

using C2Ptr = ::std::shared_ptr<C2>;

}
/// \endcond

#else // C++98 mapping

namespace WithNamespace
{

class C1;
/// \cond INTERNAL
::Ice::Value* upCast(C1*);
/// \endcond
typedef ::IceInternal::Handle< C1> C1Ptr;
/// \cond INTERNAL
void _icePatchValuePtr(C1Ptr&, const ::Ice::ValuePtr&);
/// \endcond

class C2;
/// \cond INTERNAL
::Ice::Value* upCast(C2*);
/// \endcond
typedef ::IceInternal::Handle< C2> C2Ptr;
/// \cond INTERNAL
void _icePatchValuePtr(C2Ptr&, const ::Ice::ValuePtr&);
/// \endcond

}

namespace WithNamespace
{

class E1 : public ::Ice::UserException
{
public:

    E1() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit E1(::Ice::Int i);
    E1(const E1&) = default;
    virtual ~E1();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual E1* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int i;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static E1 _iceS_E1_init;
/// \endcond

class E2 : public E1
{
public:

    E2() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    E2(::Ice::Int i, ::Ice::Long l);
    E2(const E2&) = default;
    virtual ~E2();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual E2* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Long l;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

}

namespace WithNamespace
{

class C1 : public virtual ::Ice::Value
{
public:

    typedef C1Ptr PointerType;

    virtual ~C1();

    C1()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C1(::Ice::Int i) :
        i(i)
    {
    }
    C1(const C1&) = default;
    C1& operator=(const C1&) = default;

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ValuePtr ice_clone() const;

    /**
     * Obtains the Slice type ID of the most-derived class implemented by this instance.
     * @return The type ID.
     */
    virtual ::std::string ice_id() const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return The type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Ice::Int i;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_C1_init = ::WithNamespace::C1::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const C1& lhs, const C1& rhs)
{
    return static_cast<const ::Ice::Value&>(lhs) == static_cast<const ::Ice::Value&>(rhs);
}

inline bool operator<(const C1& lhs, const C1& rhs)
{
    return static_cast<const ::Ice::Value&>(lhs) < static_cast<const ::Ice::Value&>(rhs);
}
/// \endcond

class C2 : public C1
{
public:

    typedef C2Ptr PointerType;

    virtual ~C2();

    C2()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    C2(::Ice::Int i, ::Ice::Long l) :
        ::WithNamespace::C1(i),
        l(l)
    {
    }
    C2(const C2&) = default;
    C2& operator=(const C2&) = default;

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ValuePtr ice_clone() const;

    /**
     * Obtains the Slice type ID of the most-derived class implemented by this instance.
     * @return The type ID.
     */
    virtual ::std::string ice_id() const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return The type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Ice::Long l;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_C2_init = ::WithNamespace::C2::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const C2& lhs, const C2& rhs)
{
    return static_cast<const ::Ice::Value&>(lhs) == static_cast<const ::Ice::Value&>(rhs);
}

inline bool operator<(const C2& lhs, const C2& rhs)
{
    return static_cast<const ::Ice::Value&>(lhs) < static_cast<const ::Ice::Value&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::WithNamespace::C1, S>
{
    static void write(S* ostr, const ::WithNamespace::C1& v)
    {
        ostr->write(v.i);
    }
};

template<typename S>
struct StreamReader< ::WithNamespace::C1, S>
{
    static void read(S* istr, ::WithNamespace::C1& v)
    {
        istr->read(v.i);
    }
};

template<typename S>
struct StreamWriter< ::WithNamespace::C2, S>
{
    static void write(S* ostr, const ::WithNamespace::C2& v)
    {
        ostr->write(v.l);
    }
};

template<typename S>
struct StreamReader< ::WithNamespace::C2, S>
{
    static void read(S* istr, ::WithNamespace::C2& v)
    {
        istr->read(v.l);
    }
};

template<>
struct StreamableTraits< ::WithNamespace::E1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::WithNamespace::E1, S>
{
    static void write(S* ostr, const ::WithNamespace::E1& v)
    {
        ostr->write(v.i);
    }
};

template<typename S>
struct StreamReader< ::WithNamespace::E1, S>
{
    static void read(S* istr, ::WithNamespace::E1& v)
    {
        istr->read(v.i);
    }
};

template<>
struct StreamableTraits< ::WithNamespace::E2>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::WithNamespace::E2, S>
{
    static void write(S* ostr, const ::WithNamespace::E2& v)
    {
        ostr->write(v.l);
    }
};

template<typename S>
struct StreamReader< ::WithNamespace::E2, S>
{
    static void read(S* istr, ::WithNamespace::E2& v)
    {
        istr->read(v.l);
    }
};

}
/// \endcond

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
