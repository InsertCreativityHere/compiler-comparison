//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Namespace.h>
#include <NoNamespace.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{

class Initial;
class InitialPrx;

}

namespace Test
{

}

namespace Test
{

class Initial : public virtual ::Ice::Object
{
public:

    using ProxyType = InitialPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<::NoNamespace::C1> getNoNamespaceC2AsC1(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getNoNamespaceC2AsC1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<::NoNamespace::C2> getNoNamespaceC2AsC2(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getNoNamespaceC2AsC2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwNoNamespaceE2AsE1(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_throwNoNamespaceE2AsE1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwNoNamespaceE2AsE2(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_throwNoNamespaceE2AsE2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwNoNamespaceNotify(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_throwNoNamespaceNotify(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<::WithNamespace::C1> getWithNamespaceC2AsC1(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getWithNamespaceC2AsC1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<::WithNamespace::C2> getWithNamespaceC2AsC2(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getWithNamespaceC2AsC2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwWithNamespaceE2AsE1(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_throwWithNamespaceE2AsE1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwWithNamespaceE2AsE2(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_throwWithNamespaceE2AsE2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test
{

class InitialPrx : public virtual ::Ice::Proxy<InitialPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<::NoNamespace::C1> getNoNamespaceC2AsC1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::NoNamespace::C1>>(true, this, &InitialPrx::_iceI_getNoNamespaceC2AsC1, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getNoNamespaceC2AsC1Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::NoNamespace::C1>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::NoNamespace::C1>, P>(false, this, &InitialPrx::_iceI_getNoNamespaceC2AsC1, context);
    }

    ::std::function<void()>
    getNoNamespaceC2AsC1Async(::std::function<void(::std::shared_ptr<::NoNamespace::C1>)> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::NoNamespace::C1>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getNoNamespaceC2AsC1, context);
    }

    /// \cond INTERNAL
    void _iceI_getNoNamespaceC2AsC1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::NoNamespace::C1>>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<::NoNamespace::C2> getNoNamespaceC2AsC2(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::NoNamespace::C2>>(true, this, &InitialPrx::_iceI_getNoNamespaceC2AsC2, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getNoNamespaceC2AsC2Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::NoNamespace::C2>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::NoNamespace::C2>, P>(false, this, &InitialPrx::_iceI_getNoNamespaceC2AsC2, context);
    }

    ::std::function<void()>
    getNoNamespaceC2AsC2Async(::std::function<void(::std::shared_ptr<::NoNamespace::C2>)> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::NoNamespace::C2>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getNoNamespaceC2AsC2, context);
    }

    /// \cond INTERNAL
    void _iceI_getNoNamespaceC2AsC2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::NoNamespace::C2>>>&, const ::Ice::Context&);
    /// \endcond

    void throwNoNamespaceE2AsE1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwNoNamespaceE2AsE1, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto throwNoNamespaceE2AsE1Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_throwNoNamespaceE2AsE1, context);
    }

    ::std::function<void()>
    throwNoNamespaceE2AsE1Async(::std::function<void()> response,
                                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                ::std::function<void(bool)> sent = nullptr,
                                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_throwNoNamespaceE2AsE1, context);
    }

    /// \cond INTERNAL
    void _iceI_throwNoNamespaceE2AsE1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void throwNoNamespaceE2AsE2(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwNoNamespaceE2AsE2, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto throwNoNamespaceE2AsE2Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_throwNoNamespaceE2AsE2, context);
    }

    ::std::function<void()>
    throwNoNamespaceE2AsE2Async(::std::function<void()> response,
                                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                ::std::function<void(bool)> sent = nullptr,
                                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_throwNoNamespaceE2AsE2, context);
    }

    /// \cond INTERNAL
    void _iceI_throwNoNamespaceE2AsE2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void throwNoNamespaceNotify(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwNoNamespaceNotify, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto throwNoNamespaceNotifyAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_throwNoNamespaceNotify, context);
    }

    ::std::function<void()>
    throwNoNamespaceNotifyAsync(::std::function<void()> response,
                                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                ::std::function<void(bool)> sent = nullptr,
                                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_throwNoNamespaceNotify, context);
    }

    /// \cond INTERNAL
    void _iceI_throwNoNamespaceNotify(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<::WithNamespace::C1> getWithNamespaceC2AsC1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::WithNamespace::C1>>(true, this, &InitialPrx::_iceI_getWithNamespaceC2AsC1, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getWithNamespaceC2AsC1Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::WithNamespace::C1>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::WithNamespace::C1>, P>(false, this, &InitialPrx::_iceI_getWithNamespaceC2AsC1, context);
    }

    ::std::function<void()>
    getWithNamespaceC2AsC1Async(::std::function<void(::std::shared_ptr<::WithNamespace::C1>)> response,
                                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                ::std::function<void(bool)> sent = nullptr,
                                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::WithNamespace::C1>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getWithNamespaceC2AsC1, context);
    }

    /// \cond INTERNAL
    void _iceI_getWithNamespaceC2AsC1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::WithNamespace::C1>>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<::WithNamespace::C2> getWithNamespaceC2AsC2(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::WithNamespace::C2>>(true, this, &InitialPrx::_iceI_getWithNamespaceC2AsC2, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getWithNamespaceC2AsC2Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::WithNamespace::C2>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::WithNamespace::C2>, P>(false, this, &InitialPrx::_iceI_getWithNamespaceC2AsC2, context);
    }

    ::std::function<void()>
    getWithNamespaceC2AsC2Async(::std::function<void(::std::shared_ptr<::WithNamespace::C2>)> response,
                                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                ::std::function<void(bool)> sent = nullptr,
                                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::WithNamespace::C2>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getWithNamespaceC2AsC2, context);
    }

    /// \cond INTERNAL
    void _iceI_getWithNamespaceC2AsC2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::WithNamespace::C2>>>&, const ::Ice::Context&);
    /// \endcond

    void throwWithNamespaceE2AsE1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwWithNamespaceE2AsE1, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto throwWithNamespaceE2AsE1Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_throwWithNamespaceE2AsE1, context);
    }

    ::std::function<void()>
    throwWithNamespaceE2AsE1Async(::std::function<void()> response,
                                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                  ::std::function<void(bool)> sent = nullptr,
                                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_throwWithNamespaceE2AsE1, context);
    }

    /// \cond INTERNAL
    void _iceI_throwWithNamespaceE2AsE1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void throwWithNamespaceE2AsE2(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_throwWithNamespaceE2AsE2, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto throwWithNamespaceE2AsE2Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_throwWithNamespaceE2AsE2, context);
    }

    ::std::function<void()>
    throwWithNamespaceE2AsE2Async(::std::function<void()> response,
                                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                  ::std::function<void(bool)> sent = nullptr,
                                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_throwWithNamespaceE2AsE2, context);
    }

    /// \cond INTERNAL
    void _iceI_throwWithNamespaceE2AsE2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_shutdown, context);
    }

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    InitialPrx() = default;
    friend ::std::shared_ptr<InitialPrx> IceInternal::createProxy<InitialPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond INTERNAL
namespace Test
{

using InitialPtr = ::std::shared_ptr<Initial>;
using InitialPrxPtr = ::std::shared_ptr<InitialPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Test
{

class Initial;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Initial>&);
::IceProxy::Ice::Object* upCast(Initial*);
/// \endcond

}

}

namespace Test
{
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Initial> InitialPrx;
typedef InitialPrx InitialPrxPtr;

class Initial;
using InitialPtr = ::Ice::SharedPtr< Initial>;

}

namespace Test
{

}

namespace Test
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_getNoNamespaceC2AsC1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getNoNamespaceC2AsC1.
 */
class Callback_Initial_getNoNamespaceC2AsC1_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getNoNamespaceC2AsC1_Base> Callback_Initial_getNoNamespaceC2AsC1Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_getNoNamespaceC2AsC2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getNoNamespaceC2AsC2.
 */
class Callback_Initial_getNoNamespaceC2AsC2_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getNoNamespaceC2AsC2_Base> Callback_Initial_getNoNamespaceC2AsC2Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_throwNoNamespaceE2AsE1.
 */
class Callback_Initial_throwNoNamespaceE2AsE1_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_throwNoNamespaceE2AsE1_Base> Callback_Initial_throwNoNamespaceE2AsE1Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_throwNoNamespaceE2AsE2.
 */
class Callback_Initial_throwNoNamespaceE2AsE2_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_throwNoNamespaceE2AsE2_Base> Callback_Initial_throwNoNamespaceE2AsE2Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_throwNoNamespaceNotify.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_throwNoNamespaceNotify.
 */
class Callback_Initial_throwNoNamespaceNotify_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_throwNoNamespaceNotify_Base> Callback_Initial_throwNoNamespaceNotifyPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_getWithNamespaceC2AsC1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getWithNamespaceC2AsC1.
 */
class Callback_Initial_getWithNamespaceC2AsC1_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getWithNamespaceC2AsC1_Base> Callback_Initial_getWithNamespaceC2AsC1Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_getWithNamespaceC2AsC2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getWithNamespaceC2AsC2.
 */
class Callback_Initial_getWithNamespaceC2AsC2_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getWithNamespaceC2AsC2_Base> Callback_Initial_getWithNamespaceC2AsC2Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_throwWithNamespaceE2AsE1.
 */
class Callback_Initial_throwWithNamespaceE2AsE1_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_throwWithNamespaceE2AsE1_Base> Callback_Initial_throwWithNamespaceE2AsE1Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_throwWithNamespaceE2AsE2.
 */
class Callback_Initial_throwWithNamespaceE2AsE2_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_throwWithNamespaceE2AsE2_Base> Callback_Initial_throwWithNamespaceE2AsE2Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_shutdown.
 */
class Callback_Initial_shutdown_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_shutdown_Base> Callback_Initial_shutdownPtr;

}

namespace IceProxy
{

namespace Test
{

class Initial : public virtual ::Ice::Proxy<Initial, ::IceProxy::Ice::Object>
{
public:

    ::NoNamespace::C1Ptr getNoNamespaceC2AsC1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getNoNamespaceC2AsC1(_iceI_begin_getNoNamespaceC2AsC1(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getNoNamespaceC2AsC1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getNoNamespaceC2AsC1(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNoNamespaceC2AsC1(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNoNamespaceC2AsC1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getNoNamespaceC2AsC1(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNoNamespaceC2AsC1(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getNoNamespaceC2AsC1(const ::Test::Callback_Initial_getNoNamespaceC2AsC1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNoNamespaceC2AsC1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getNoNamespaceC2AsC1(const ::Ice::Context& context, const ::Test::Callback_Initial_getNoNamespaceC2AsC1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNoNamespaceC2AsC1(context, cb, cookie);
    }

    ::NoNamespace::C1Ptr end_getNoNamespaceC2AsC1(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getNoNamespaceC2AsC1(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::NoNamespace::C2Ptr getNoNamespaceC2AsC2(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getNoNamespaceC2AsC2(_iceI_begin_getNoNamespaceC2AsC2(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getNoNamespaceC2AsC2(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getNoNamespaceC2AsC2(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNoNamespaceC2AsC2(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNoNamespaceC2AsC2(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getNoNamespaceC2AsC2(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNoNamespaceC2AsC2(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getNoNamespaceC2AsC2(const ::Test::Callback_Initial_getNoNamespaceC2AsC2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNoNamespaceC2AsC2(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getNoNamespaceC2AsC2(const ::Ice::Context& context, const ::Test::Callback_Initial_getNoNamespaceC2AsC2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getNoNamespaceC2AsC2(context, cb, cookie);
    }

    ::NoNamespace::C2Ptr end_getNoNamespaceC2AsC2(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getNoNamespaceC2AsC2(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void throwNoNamespaceE2AsE1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_throwNoNamespaceE2AsE1(_iceI_begin_throwNoNamespaceE2AsE1(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_throwNoNamespaceE2AsE1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_throwNoNamespaceE2AsE1(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwNoNamespaceE2AsE1(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwNoNamespaceE2AsE1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwNoNamespaceE2AsE1(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwNoNamespaceE2AsE1(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwNoNamespaceE2AsE1(const ::Test::Callback_Initial_throwNoNamespaceE2AsE1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwNoNamespaceE2AsE1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwNoNamespaceE2AsE1(const ::Ice::Context& context, const ::Test::Callback_Initial_throwNoNamespaceE2AsE1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwNoNamespaceE2AsE1(context, cb, cookie);
    }

    void end_throwNoNamespaceE2AsE1(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_throwNoNamespaceE2AsE1(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void throwNoNamespaceE2AsE2(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_throwNoNamespaceE2AsE2(_iceI_begin_throwNoNamespaceE2AsE2(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_throwNoNamespaceE2AsE2(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_throwNoNamespaceE2AsE2(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwNoNamespaceE2AsE2(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwNoNamespaceE2AsE2(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwNoNamespaceE2AsE2(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwNoNamespaceE2AsE2(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwNoNamespaceE2AsE2(const ::Test::Callback_Initial_throwNoNamespaceE2AsE2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwNoNamespaceE2AsE2(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwNoNamespaceE2AsE2(const ::Ice::Context& context, const ::Test::Callback_Initial_throwNoNamespaceE2AsE2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwNoNamespaceE2AsE2(context, cb, cookie);
    }

    void end_throwNoNamespaceE2AsE2(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_throwNoNamespaceE2AsE2(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void throwNoNamespaceNotify(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_throwNoNamespaceNotify(_iceI_begin_throwNoNamespaceNotify(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_throwNoNamespaceNotify(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_throwNoNamespaceNotify(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwNoNamespaceNotify(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwNoNamespaceNotify(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwNoNamespaceNotify(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwNoNamespaceNotify(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwNoNamespaceNotify(const ::Test::Callback_Initial_throwNoNamespaceNotifyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwNoNamespaceNotify(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwNoNamespaceNotify(const ::Ice::Context& context, const ::Test::Callback_Initial_throwNoNamespaceNotifyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwNoNamespaceNotify(context, cb, cookie);
    }

    void end_throwNoNamespaceNotify(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_throwNoNamespaceNotify(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::WithNamespace::C1Ptr getWithNamespaceC2AsC1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getWithNamespaceC2AsC1(_iceI_begin_getWithNamespaceC2AsC1(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getWithNamespaceC2AsC1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getWithNamespaceC2AsC1(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWithNamespaceC2AsC1(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getWithNamespaceC2AsC1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getWithNamespaceC2AsC1(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getWithNamespaceC2AsC1(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getWithNamespaceC2AsC1(const ::Test::Callback_Initial_getWithNamespaceC2AsC1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getWithNamespaceC2AsC1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getWithNamespaceC2AsC1(const ::Ice::Context& context, const ::Test::Callback_Initial_getWithNamespaceC2AsC1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getWithNamespaceC2AsC1(context, cb, cookie);
    }

    ::WithNamespace::C1Ptr end_getWithNamespaceC2AsC1(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getWithNamespaceC2AsC1(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::WithNamespace::C2Ptr getWithNamespaceC2AsC2(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getWithNamespaceC2AsC2(_iceI_begin_getWithNamespaceC2AsC2(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getWithNamespaceC2AsC2(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getWithNamespaceC2AsC2(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getWithNamespaceC2AsC2(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getWithNamespaceC2AsC2(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getWithNamespaceC2AsC2(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getWithNamespaceC2AsC2(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getWithNamespaceC2AsC2(const ::Test::Callback_Initial_getWithNamespaceC2AsC2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getWithNamespaceC2AsC2(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getWithNamespaceC2AsC2(const ::Ice::Context& context, const ::Test::Callback_Initial_getWithNamespaceC2AsC2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getWithNamespaceC2AsC2(context, cb, cookie);
    }

    ::WithNamespace::C2Ptr end_getWithNamespaceC2AsC2(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getWithNamespaceC2AsC2(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void throwWithNamespaceE2AsE1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_throwWithNamespaceE2AsE1(_iceI_begin_throwWithNamespaceE2AsE1(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_throwWithNamespaceE2AsE1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_throwWithNamespaceE2AsE1(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwWithNamespaceE2AsE1(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwWithNamespaceE2AsE1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwWithNamespaceE2AsE1(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwWithNamespaceE2AsE1(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwWithNamespaceE2AsE1(const ::Test::Callback_Initial_throwWithNamespaceE2AsE1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwWithNamespaceE2AsE1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwWithNamespaceE2AsE1(const ::Ice::Context& context, const ::Test::Callback_Initial_throwWithNamespaceE2AsE1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwWithNamespaceE2AsE1(context, cb, cookie);
    }

    void end_throwWithNamespaceE2AsE1(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_throwWithNamespaceE2AsE1(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void throwWithNamespaceE2AsE2(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_throwWithNamespaceE2AsE2(_iceI_begin_throwWithNamespaceE2AsE2(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_throwWithNamespaceE2AsE2(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_throwWithNamespaceE2AsE2(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_throwWithNamespaceE2AsE2(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwWithNamespaceE2AsE2(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwWithNamespaceE2AsE2(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwWithNamespaceE2AsE2(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwWithNamespaceE2AsE2(const ::Test::Callback_Initial_throwWithNamespaceE2AsE2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwWithNamespaceE2AsE2(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_throwWithNamespaceE2AsE2(const ::Ice::Context& context, const ::Test::Callback_Initial_throwWithNamespaceE2AsE2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_throwWithNamespaceE2AsE2(context, cb, cookie);
    }

    void end_throwWithNamespaceE2AsE2(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_throwWithNamespaceE2AsE2(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_shutdown(_iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_Initial_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Test::Callback_Initial_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_shutdown(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Test
{

class Initial : public virtual ::Ice::Object
{
public:

    typedef InitialPrx ProxyType;

    virtual ~Initial();
    Initial() = default;
    Initial(const Initial&) = default;
    Initial& operator=(const Initial&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::NoNamespace::C1Ptr getNoNamespaceC2AsC1(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getNoNamespaceC2AsC1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::NoNamespace::C2Ptr getNoNamespaceC2AsC2(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getNoNamespaceC2AsC2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwNoNamespaceE2AsE1(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_throwNoNamespaceE2AsE1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwNoNamespaceE2AsE2(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_throwNoNamespaceE2AsE2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwNoNamespaceNotify(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_throwNoNamespaceNotify(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::WithNamespace::C1Ptr getWithNamespaceC2AsC1(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getWithNamespaceC2AsC1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::WithNamespace::C2Ptr getWithNamespaceC2AsC2(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getWithNamespaceC2AsC2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwWithNamespaceE2AsE1(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_throwWithNamespaceE2AsE1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void throwWithNamespaceE2AsE2(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_throwWithNamespaceE2AsE2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

namespace Test
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_getNoNamespaceC2AsC1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getNoNamespaceC2AsC1.
 */
template<class T>
class CallbackNC_Initial_getNoNamespaceC2AsC1 : public Callback_Initial_getNoNamespaceC2AsC1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::NoNamespace::C1Ptr&);

    CallbackNC_Initial_getNoNamespaceC2AsC1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ::NoNamespace::C1Ptr ret;
        try
        {
            ret = proxy->end_getNoNamespaceC2AsC1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getNoNamespaceC2AsC1.
 */
template<class T> Callback_Initial_getNoNamespaceC2AsC1Ptr
newCallback_Initial_getNoNamespaceC2AsC1(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::NoNamespace::C1Ptr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getNoNamespaceC2AsC1<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getNoNamespaceC2AsC1.
 */
template<class T> Callback_Initial_getNoNamespaceC2AsC1Ptr
newCallback_Initial_getNoNamespaceC2AsC1(T* instance, void (T::*cb)(const ::NoNamespace::C1Ptr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getNoNamespaceC2AsC1<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_getNoNamespaceC2AsC1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getNoNamespaceC2AsC1.
 */
template<class T, typename CT>
class Callback_Initial_getNoNamespaceC2AsC1 : public Callback_Initial_getNoNamespaceC2AsC1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::NoNamespace::C1Ptr&, const CT&);

    Callback_Initial_getNoNamespaceC2AsC1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ::NoNamespace::C1Ptr ret;
        try
        {
            ret = proxy->end_getNoNamespaceC2AsC1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getNoNamespaceC2AsC1.
 */
template<class T, typename CT> Callback_Initial_getNoNamespaceC2AsC1Ptr
newCallback_Initial_getNoNamespaceC2AsC1(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::NoNamespace::C1Ptr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getNoNamespaceC2AsC1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getNoNamespaceC2AsC1.
 */
template<class T, typename CT> Callback_Initial_getNoNamespaceC2AsC1Ptr
newCallback_Initial_getNoNamespaceC2AsC1(T* instance, void (T::*cb)(const ::NoNamespace::C1Ptr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getNoNamespaceC2AsC1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_getNoNamespaceC2AsC2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getNoNamespaceC2AsC2.
 */
template<class T>
class CallbackNC_Initial_getNoNamespaceC2AsC2 : public Callback_Initial_getNoNamespaceC2AsC2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::NoNamespace::C2Ptr&);

    CallbackNC_Initial_getNoNamespaceC2AsC2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ::NoNamespace::C2Ptr ret;
        try
        {
            ret = proxy->end_getNoNamespaceC2AsC2(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getNoNamespaceC2AsC2.
 */
template<class T> Callback_Initial_getNoNamespaceC2AsC2Ptr
newCallback_Initial_getNoNamespaceC2AsC2(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::NoNamespace::C2Ptr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getNoNamespaceC2AsC2<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getNoNamespaceC2AsC2.
 */
template<class T> Callback_Initial_getNoNamespaceC2AsC2Ptr
newCallback_Initial_getNoNamespaceC2AsC2(T* instance, void (T::*cb)(const ::NoNamespace::C2Ptr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getNoNamespaceC2AsC2<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_getNoNamespaceC2AsC2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getNoNamespaceC2AsC2.
 */
template<class T, typename CT>
class Callback_Initial_getNoNamespaceC2AsC2 : public Callback_Initial_getNoNamespaceC2AsC2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::NoNamespace::C2Ptr&, const CT&);

    Callback_Initial_getNoNamespaceC2AsC2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ::NoNamespace::C2Ptr ret;
        try
        {
            ret = proxy->end_getNoNamespaceC2AsC2(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getNoNamespaceC2AsC2.
 */
template<class T, typename CT> Callback_Initial_getNoNamespaceC2AsC2Ptr
newCallback_Initial_getNoNamespaceC2AsC2(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::NoNamespace::C2Ptr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getNoNamespaceC2AsC2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getNoNamespaceC2AsC2.
 */
template<class T, typename CT> Callback_Initial_getNoNamespaceC2AsC2Ptr
newCallback_Initial_getNoNamespaceC2AsC2(T* instance, void (T::*cb)(const ::NoNamespace::C2Ptr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getNoNamespaceC2AsC2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_throwNoNamespaceE2AsE1.
 */
template<class T>
class CallbackNC_Initial_throwNoNamespaceE2AsE1 : public Callback_Initial_throwNoNamespaceE2AsE1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_throwNoNamespaceE2AsE1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_throwNoNamespaceE2AsE1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE1.
 */
template<class T> Callback_Initial_throwNoNamespaceE2AsE1Ptr
newCallback_Initial_throwNoNamespaceE2AsE1(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwNoNamespaceE2AsE1<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE1.
 */
template<class T> Callback_Initial_throwNoNamespaceE2AsE1Ptr
newCallback_Initial_throwNoNamespaceE2AsE1(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwNoNamespaceE2AsE1<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE1.
 */
template<class T> Callback_Initial_throwNoNamespaceE2AsE1Ptr
newCallback_Initial_throwNoNamespaceE2AsE1(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwNoNamespaceE2AsE1<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE1.
 */
template<class T> Callback_Initial_throwNoNamespaceE2AsE1Ptr
newCallback_Initial_throwNoNamespaceE2AsE1(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwNoNamespaceE2AsE1<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_throwNoNamespaceE2AsE1.
 */
template<class T, typename CT>
class Callback_Initial_throwNoNamespaceE2AsE1 : public Callback_Initial_throwNoNamespaceE2AsE1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_throwNoNamespaceE2AsE1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_throwNoNamespaceE2AsE1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE1.
 */
template<class T, typename CT> Callback_Initial_throwNoNamespaceE2AsE1Ptr
newCallback_Initial_throwNoNamespaceE2AsE1(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwNoNamespaceE2AsE1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE1.
 */
template<class T, typename CT> Callback_Initial_throwNoNamespaceE2AsE1Ptr
newCallback_Initial_throwNoNamespaceE2AsE1(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwNoNamespaceE2AsE1<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE1.
 */
template<class T, typename CT> Callback_Initial_throwNoNamespaceE2AsE1Ptr
newCallback_Initial_throwNoNamespaceE2AsE1(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwNoNamespaceE2AsE1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE1.
 */
template<class T, typename CT> Callback_Initial_throwNoNamespaceE2AsE1Ptr
newCallback_Initial_throwNoNamespaceE2AsE1(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwNoNamespaceE2AsE1<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_throwNoNamespaceE2AsE2.
 */
template<class T>
class CallbackNC_Initial_throwNoNamespaceE2AsE2 : public Callback_Initial_throwNoNamespaceE2AsE2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_throwNoNamespaceE2AsE2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_throwNoNamespaceE2AsE2(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE2.
 */
template<class T> Callback_Initial_throwNoNamespaceE2AsE2Ptr
newCallback_Initial_throwNoNamespaceE2AsE2(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwNoNamespaceE2AsE2<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE2.
 */
template<class T> Callback_Initial_throwNoNamespaceE2AsE2Ptr
newCallback_Initial_throwNoNamespaceE2AsE2(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwNoNamespaceE2AsE2<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE2.
 */
template<class T> Callback_Initial_throwNoNamespaceE2AsE2Ptr
newCallback_Initial_throwNoNamespaceE2AsE2(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwNoNamespaceE2AsE2<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE2.
 */
template<class T> Callback_Initial_throwNoNamespaceE2AsE2Ptr
newCallback_Initial_throwNoNamespaceE2AsE2(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwNoNamespaceE2AsE2<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_throwNoNamespaceE2AsE2.
 */
template<class T, typename CT>
class Callback_Initial_throwNoNamespaceE2AsE2 : public Callback_Initial_throwNoNamespaceE2AsE2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_throwNoNamespaceE2AsE2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_throwNoNamespaceE2AsE2(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE2.
 */
template<class T, typename CT> Callback_Initial_throwNoNamespaceE2AsE2Ptr
newCallback_Initial_throwNoNamespaceE2AsE2(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwNoNamespaceE2AsE2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE2.
 */
template<class T, typename CT> Callback_Initial_throwNoNamespaceE2AsE2Ptr
newCallback_Initial_throwNoNamespaceE2AsE2(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwNoNamespaceE2AsE2<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE2.
 */
template<class T, typename CT> Callback_Initial_throwNoNamespaceE2AsE2Ptr
newCallback_Initial_throwNoNamespaceE2AsE2(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwNoNamespaceE2AsE2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceE2AsE2.
 */
template<class T, typename CT> Callback_Initial_throwNoNamespaceE2AsE2Ptr
newCallback_Initial_throwNoNamespaceE2AsE2(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwNoNamespaceE2AsE2<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_throwNoNamespaceNotify.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_throwNoNamespaceNotify.
 */
template<class T>
class CallbackNC_Initial_throwNoNamespaceNotify : public Callback_Initial_throwNoNamespaceNotify_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_throwNoNamespaceNotify(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_throwNoNamespaceNotify(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceNotify.
 */
template<class T> Callback_Initial_throwNoNamespaceNotifyPtr
newCallback_Initial_throwNoNamespaceNotify(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwNoNamespaceNotify<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceNotify.
 */
template<class T> Callback_Initial_throwNoNamespaceNotifyPtr
newCallback_Initial_throwNoNamespaceNotify(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwNoNamespaceNotify<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceNotify.
 */
template<class T> Callback_Initial_throwNoNamespaceNotifyPtr
newCallback_Initial_throwNoNamespaceNotify(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwNoNamespaceNotify<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceNotify.
 */
template<class T> Callback_Initial_throwNoNamespaceNotifyPtr
newCallback_Initial_throwNoNamespaceNotify(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwNoNamespaceNotify<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_throwNoNamespaceNotify.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_throwNoNamespaceNotify.
 */
template<class T, typename CT>
class Callback_Initial_throwNoNamespaceNotify : public Callback_Initial_throwNoNamespaceNotify_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_throwNoNamespaceNotify(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_throwNoNamespaceNotify(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceNotify.
 */
template<class T, typename CT> Callback_Initial_throwNoNamespaceNotifyPtr
newCallback_Initial_throwNoNamespaceNotify(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwNoNamespaceNotify<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceNotify.
 */
template<class T, typename CT> Callback_Initial_throwNoNamespaceNotifyPtr
newCallback_Initial_throwNoNamespaceNotify(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwNoNamespaceNotify<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceNotify.
 */
template<class T, typename CT> Callback_Initial_throwNoNamespaceNotifyPtr
newCallback_Initial_throwNoNamespaceNotify(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwNoNamespaceNotify<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwNoNamespaceNotify.
 */
template<class T, typename CT> Callback_Initial_throwNoNamespaceNotifyPtr
newCallback_Initial_throwNoNamespaceNotify(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwNoNamespaceNotify<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_getWithNamespaceC2AsC1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getWithNamespaceC2AsC1.
 */
template<class T>
class CallbackNC_Initial_getWithNamespaceC2AsC1 : public Callback_Initial_getWithNamespaceC2AsC1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::WithNamespace::C1Ptr&);

    CallbackNC_Initial_getWithNamespaceC2AsC1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ::WithNamespace::C1Ptr ret;
        try
        {
            ret = proxy->end_getWithNamespaceC2AsC1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getWithNamespaceC2AsC1.
 */
template<class T> Callback_Initial_getWithNamespaceC2AsC1Ptr
newCallback_Initial_getWithNamespaceC2AsC1(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::WithNamespace::C1Ptr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getWithNamespaceC2AsC1<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getWithNamespaceC2AsC1.
 */
template<class T> Callback_Initial_getWithNamespaceC2AsC1Ptr
newCallback_Initial_getWithNamespaceC2AsC1(T* instance, void (T::*cb)(const ::WithNamespace::C1Ptr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getWithNamespaceC2AsC1<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_getWithNamespaceC2AsC1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getWithNamespaceC2AsC1.
 */
template<class T, typename CT>
class Callback_Initial_getWithNamespaceC2AsC1 : public Callback_Initial_getWithNamespaceC2AsC1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::WithNamespace::C1Ptr&, const CT&);

    Callback_Initial_getWithNamespaceC2AsC1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ::WithNamespace::C1Ptr ret;
        try
        {
            ret = proxy->end_getWithNamespaceC2AsC1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getWithNamespaceC2AsC1.
 */
template<class T, typename CT> Callback_Initial_getWithNamespaceC2AsC1Ptr
newCallback_Initial_getWithNamespaceC2AsC1(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::WithNamespace::C1Ptr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getWithNamespaceC2AsC1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getWithNamespaceC2AsC1.
 */
template<class T, typename CT> Callback_Initial_getWithNamespaceC2AsC1Ptr
newCallback_Initial_getWithNamespaceC2AsC1(T* instance, void (T::*cb)(const ::WithNamespace::C1Ptr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getWithNamespaceC2AsC1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_getWithNamespaceC2AsC2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getWithNamespaceC2AsC2.
 */
template<class T>
class CallbackNC_Initial_getWithNamespaceC2AsC2 : public Callback_Initial_getWithNamespaceC2AsC2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::WithNamespace::C2Ptr&);

    CallbackNC_Initial_getWithNamespaceC2AsC2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ::WithNamespace::C2Ptr ret;
        try
        {
            ret = proxy->end_getWithNamespaceC2AsC2(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getWithNamespaceC2AsC2.
 */
template<class T> Callback_Initial_getWithNamespaceC2AsC2Ptr
newCallback_Initial_getWithNamespaceC2AsC2(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::WithNamespace::C2Ptr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getWithNamespaceC2AsC2<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getWithNamespaceC2AsC2.
 */
template<class T> Callback_Initial_getWithNamespaceC2AsC2Ptr
newCallback_Initial_getWithNamespaceC2AsC2(T* instance, void (T::*cb)(const ::WithNamespace::C2Ptr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getWithNamespaceC2AsC2<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_getWithNamespaceC2AsC2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getWithNamespaceC2AsC2.
 */
template<class T, typename CT>
class Callback_Initial_getWithNamespaceC2AsC2 : public Callback_Initial_getWithNamespaceC2AsC2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::WithNamespace::C2Ptr&, const CT&);

    Callback_Initial_getWithNamespaceC2AsC2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ::WithNamespace::C2Ptr ret;
        try
        {
            ret = proxy->end_getWithNamespaceC2AsC2(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getWithNamespaceC2AsC2.
 */
template<class T, typename CT> Callback_Initial_getWithNamespaceC2AsC2Ptr
newCallback_Initial_getWithNamespaceC2AsC2(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::WithNamespace::C2Ptr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getWithNamespaceC2AsC2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getWithNamespaceC2AsC2.
 */
template<class T, typename CT> Callback_Initial_getWithNamespaceC2AsC2Ptr
newCallback_Initial_getWithNamespaceC2AsC2(T* instance, void (T::*cb)(const ::WithNamespace::C2Ptr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getWithNamespaceC2AsC2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_throwWithNamespaceE2AsE1.
 */
template<class T>
class CallbackNC_Initial_throwWithNamespaceE2AsE1 : public Callback_Initial_throwWithNamespaceE2AsE1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_throwWithNamespaceE2AsE1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_throwWithNamespaceE2AsE1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE1.
 */
template<class T> Callback_Initial_throwWithNamespaceE2AsE1Ptr
newCallback_Initial_throwWithNamespaceE2AsE1(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwWithNamespaceE2AsE1<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE1.
 */
template<class T> Callback_Initial_throwWithNamespaceE2AsE1Ptr
newCallback_Initial_throwWithNamespaceE2AsE1(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwWithNamespaceE2AsE1<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE1.
 */
template<class T> Callback_Initial_throwWithNamespaceE2AsE1Ptr
newCallback_Initial_throwWithNamespaceE2AsE1(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwWithNamespaceE2AsE1<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE1.
 */
template<class T> Callback_Initial_throwWithNamespaceE2AsE1Ptr
newCallback_Initial_throwWithNamespaceE2AsE1(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwWithNamespaceE2AsE1<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_throwWithNamespaceE2AsE1.
 */
template<class T, typename CT>
class Callback_Initial_throwWithNamespaceE2AsE1 : public Callback_Initial_throwWithNamespaceE2AsE1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_throwWithNamespaceE2AsE1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_throwWithNamespaceE2AsE1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE1.
 */
template<class T, typename CT> Callback_Initial_throwWithNamespaceE2AsE1Ptr
newCallback_Initial_throwWithNamespaceE2AsE1(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwWithNamespaceE2AsE1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE1.
 */
template<class T, typename CT> Callback_Initial_throwWithNamespaceE2AsE1Ptr
newCallback_Initial_throwWithNamespaceE2AsE1(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwWithNamespaceE2AsE1<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE1.
 */
template<class T, typename CT> Callback_Initial_throwWithNamespaceE2AsE1Ptr
newCallback_Initial_throwWithNamespaceE2AsE1(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwWithNamespaceE2AsE1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE1.
 */
template<class T, typename CT> Callback_Initial_throwWithNamespaceE2AsE1Ptr
newCallback_Initial_throwWithNamespaceE2AsE1(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwWithNamespaceE2AsE1<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_throwWithNamespaceE2AsE2.
 */
template<class T>
class CallbackNC_Initial_throwWithNamespaceE2AsE2 : public Callback_Initial_throwWithNamespaceE2AsE2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_throwWithNamespaceE2AsE2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_throwWithNamespaceE2AsE2(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE2.
 */
template<class T> Callback_Initial_throwWithNamespaceE2AsE2Ptr
newCallback_Initial_throwWithNamespaceE2AsE2(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwWithNamespaceE2AsE2<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE2.
 */
template<class T> Callback_Initial_throwWithNamespaceE2AsE2Ptr
newCallback_Initial_throwWithNamespaceE2AsE2(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwWithNamespaceE2AsE2<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE2.
 */
template<class T> Callback_Initial_throwWithNamespaceE2AsE2Ptr
newCallback_Initial_throwWithNamespaceE2AsE2(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwWithNamespaceE2AsE2<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE2.
 */
template<class T> Callback_Initial_throwWithNamespaceE2AsE2Ptr
newCallback_Initial_throwWithNamespaceE2AsE2(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_throwWithNamespaceE2AsE2<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_throwWithNamespaceE2AsE2.
 */
template<class T, typename CT>
class Callback_Initial_throwWithNamespaceE2AsE2 : public Callback_Initial_throwWithNamespaceE2AsE2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_throwWithNamespaceE2AsE2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_throwWithNamespaceE2AsE2(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE2.
 */
template<class T, typename CT> Callback_Initial_throwWithNamespaceE2AsE2Ptr
newCallback_Initial_throwWithNamespaceE2AsE2(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwWithNamespaceE2AsE2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE2.
 */
template<class T, typename CT> Callback_Initial_throwWithNamespaceE2AsE2Ptr
newCallback_Initial_throwWithNamespaceE2AsE2(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwWithNamespaceE2AsE2<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE2.
 */
template<class T, typename CT> Callback_Initial_throwWithNamespaceE2AsE2Ptr
newCallback_Initial_throwWithNamespaceE2AsE2(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwWithNamespaceE2AsE2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_throwWithNamespaceE2AsE2.
 */
template<class T, typename CT> Callback_Initial_throwWithNamespaceE2AsE2Ptr
newCallback_Initial_throwWithNamespaceE2AsE2(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_throwWithNamespaceE2AsE2<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_shutdown.
 */
template<class T>
class CallbackNC_Initial_shutdown : public Callback_Initial_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_shutdown.
 */
template<class T, typename CT>
class Callback_Initial_shutdown : public Callback_Initial_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
