//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Namespace.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include "Namespace.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::WithNamespace::C1> iceC_WithNamespace_C1_init("::WithNamespace::C1");
    const ::IceInternal::DefaultValueFactoryInit<::WithNamespace::C2> iceC_WithNamespace_C2_init("::WithNamespace::C2");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::WithNamespace::E1> iceC_WithNamespace_E1_init("::WithNamespace::E1");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::WithNamespace::E2> iceC_WithNamespace_E2_init("::WithNamespace::E2");
}

const char*
WithNamespace::C1::ice_staticId() noexcept
{
    return "::WithNamespace::C1";
}

const char*
WithNamespace::C1::ice_id() const noexcept
{
    return ice_staticId();
}

void
WithNamespace::C1::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "i = ", this->i);
}

::Ice::ValuePtr
WithNamespace::C1::_iceCloneImpl() const
{
    return CloneEnabler<C1>::clone(*this);
}

void
WithNamespace::C1::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->i);
    ostr->endSlice();
}

void
WithNamespace::C1::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->i);
    istr->endSlice();
}

const char*
WithNamespace::C2::ice_staticId() noexcept
{
    return "::WithNamespace::C2";
}

const char*
WithNamespace::C2::ice_id() const noexcept
{
    return ice_staticId();
}

void
WithNamespace::C2::ice_printFields(std::ostream& os) const
{
    C1::ice_printFields(os);
    Ice::print(os << ", l = ", this->l);
}

::Ice::ValuePtr
WithNamespace::C2::_iceCloneImpl() const
{
    return CloneEnabler<C2>::clone(*this);
}

void
WithNamespace::C2::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->l);
    ostr->endSlice();
    C1::_iceWriteImpl(ostr);
}

void
WithNamespace::C2::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->l);
    istr->endSlice();
    C1::_iceReadImpl(istr);
}

const char*
WithNamespace::E1::ice_staticId() noexcept
{
    return "::WithNamespace::E1";
}

const char*
WithNamespace::E1::ice_id() const noexcept
{
    return ice_staticId();
}

void
WithNamespace::E1::ice_throw() const
{
    throw *this;
}

void
WithNamespace::E1::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->i);
    ostr->endSlice();
}

void
WithNamespace::E1::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->i);
    istr->endSlice();
}

const char*
WithNamespace::E2::ice_staticId() noexcept
{
    return "::WithNamespace::E2";
}

const char*
WithNamespace::E2::ice_id() const noexcept
{
    return ice_staticId();
}

void
WithNamespace::E2::ice_throw() const
{
    throw *this;
}

void
WithNamespace::E2::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->l);
    ostr->endSlice();
    E1::_writeImpl(ostr);
}

void
WithNamespace::E2::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->l);
    istr->endSlice();
    E1::_readImpl(istr);
}
