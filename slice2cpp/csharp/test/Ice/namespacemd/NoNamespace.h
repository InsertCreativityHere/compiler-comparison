//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `NoNamespace.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __NoNamespace_h__
#define __NoNamespace_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace NoNamespace
{

class C1;
class C2;

}

namespace NoNamespace
{

class E1 : public ::Ice::UserExceptionHelper<E1, ::Ice::UserException>
{
public:

    virtual ~E1();

    E1(const E1&) = default;

    E1() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    E1(int i) :
        i(i)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(i);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int i;
};

/// \cond INTERNAL
static E1 _iceS_E1_init;
/// \endcond

class E2 : public ::Ice::UserExceptionHelper<E2, E1>
{
public:

    virtual ~E2();

    E2(const E2&) = default;

    E2() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    E2(int i, long long int l) :
        ::Ice::UserExceptionHelper<E2, E1>(i),
        l(l)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const long long int&> ice_tuple() const
    {
        return std::tie(i, l);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    long long int l;
};

/**
 * Test keyword escape.
 */
class notify : public ::Ice::UserExceptionHelper<notify, ::Ice::UserException>
{
public:

    virtual ~notify();

    notify(const notify&) = default;

    notify() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    notify(int i) :
        i(i)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(i);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int i;
};

}

namespace NoNamespace
{

class C1 : public ::Ice::ValueHelper<C1, ::Ice::Value>
{
public:

    virtual ~C1();

    C1() = default;

    C1(const C1&) = default;
    C1(C1&&) = default;
    C1& operator=(const C1&) = default;
    C1& operator=(C1&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C1(int i) :
        i(i)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(i);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int i;
};

/// \cond INTERNAL
static C1 _iceS_C1_init;
/// \endcond

class C2 : public ::Ice::ValueHelper<C2, C1>
{
public:

    virtual ~C2();

    C2() = default;

    C2(const C2&) = default;
    C2(C2&&) = default;
    C2& operator=(const C2&) = default;
    C2& operator=(C2&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C2(int i, long long int l) :
        Ice::ValueHelper<C2, C1>(i),
        l(l)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const long long int&> ice_tuple() const
    {
        return std::tie(i, l);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    long long int l;
};

}

namespace NoNamespace
{

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::NoNamespace::C1, S>
{
    static void read(S* istr, ::NoNamespace::C1& v)
    {
        istr->readAll(v.i);
    }
};

template<typename S>
struct StreamWriter<::NoNamespace::C2, S>
{
    static void write(S* ostr, const ::NoNamespace::C2& v)
    {
        ostr->writeAll(v.l);
    }
};

template<typename S>
struct StreamReader<::NoNamespace::C2, S>
{
    static void read(S* istr, ::NoNamespace::C2& v)
    {
        istr->readAll(v.l);
    }
};

template<typename S>
struct StreamReader<::NoNamespace::E1, S>
{
    static void read(S* istr, ::NoNamespace::E1& v)
    {
        istr->readAll(v.i);
    }
};

template<typename S>
struct StreamWriter<::NoNamespace::E2, S>
{
    static void write(S* ostr, const ::NoNamespace::E2& v)
    {
        ostr->writeAll(v.l);
    }
};

template<typename S>
struct StreamReader<::NoNamespace::E2, S>
{
    static void read(S* istr, ::NoNamespace::E2& v)
    {
        istr->readAll(v.l);
    }
};

template<typename S>
struct StreamReader<::NoNamespace::notify, S>
{
    static void read(S* istr, ::NoNamespace::notify& v)
    {
        istr->readAll(v.i);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace NoNamespace
{

using C1Ptr = ::std::shared_ptr<C1>;

using C2Ptr = ::std::shared_ptr<C2>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace NoNamespace
{

class C1;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< C1>&);
::IceProxy::Ice::Object* upCast(C1*);
/// \endcond

class C2;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< C2>&);
::IceProxy::Ice::Object* upCast(C2*);
/// \endcond

}

}

namespace NoNamespace
{

class C1;
/// \cond INTERNAL
::Ice::Object* upCast(C1*);
/// \endcond
typedef ::IceInternal::Handle< C1> C1Ptr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::NoNamespace::C1> C1Prx;
typedef C1Prx C1PrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(C1Ptr&, const ::Ice::ObjectPtr&);
/// \endcond

class C2;
/// \cond INTERNAL
::Ice::Object* upCast(C2*);
/// \endcond
typedef ::IceInternal::Handle< C2> C2Ptr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::NoNamespace::C2> C2Prx;
typedef C2Prx C2PrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(C2Ptr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace NoNamespace
{

class E1 : public ::Ice::UserException
{
public:

    E1() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit E1(::Ice::Int i);

#ifdef ICE_CPP11_COMPILER
    E1(const E1&) = default;
    virtual ~E1();
#else
    virtual ~E1() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual E1* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int i;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static E1 _iceS_E1_init;
/// \endcond

class E2 : public E1
{
public:

    E2() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    E2(::Ice::Int i, ::Ice::Long l);

#ifdef ICE_CPP11_COMPILER
    E2(const E2&) = default;
    virtual ~E2();
#else
    virtual ~E2() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual E2* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Long l;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/**
 * Test keyword escape.
 */
class notify : public ::Ice::UserException
{
public:

    notify() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit notify(::Ice::Int i);

#ifdef ICE_CPP11_COMPILER
    notify(const notify&) = default;
    virtual ~notify();
#else
    virtual ~notify() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual notify* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int i;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

}

namespace NoNamespace
{

}

namespace IceProxy
{

namespace NoNamespace
{

class C1 : public virtual ::Ice::Proxy<C1, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class C2 : public virtual ::Ice::Proxy<C2, ::IceProxy::NoNamespace::C1>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace NoNamespace
{

class C1 : public virtual ::Ice::Object
{
public:

    typedef C1Prx ProxyType;
    typedef C1Ptr PointerType;

    virtual ~C1();

    C1()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C1(::Ice::Int i) :
        i(i)
    {
    }

#ifdef ICE_CPP11_COMPILER
    C1(const C1&) = default;
    C1& operator=(const C1&) = default;
#endif

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Ice::Int i;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_C1_init = ::NoNamespace::C1::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const C1& lhs, const C1& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const C1& lhs, const C1& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class C2 : public C1
{
public:

    typedef C2Prx ProxyType;
    typedef C2Ptr PointerType;

    virtual ~C2();

    C2()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    C2(::Ice::Int i, ::Ice::Long l) :
        ::NoNamespace::C1(i),
        l(l)
    {
    }

#ifdef ICE_CPP11_COMPILER
    C2(const C2&) = default;
    C2& operator=(const C2&) = default;
#endif

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Ice::Long l;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_C2_init = ::NoNamespace::C2::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const C2& lhs, const C2& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const C2& lhs, const C2& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::NoNamespace::C1, S>
{
    static void write(S* ostr, const ::NoNamespace::C1& v)
    {
        ostr->write(v.i);
    }
};

template<typename S>
struct StreamReader< ::NoNamespace::C1, S>
{
    static void read(S* istr, ::NoNamespace::C1& v)
    {
        istr->read(v.i);
    }
};

template<typename S>
struct StreamWriter< ::NoNamespace::C2, S>
{
    static void write(S* ostr, const ::NoNamespace::C2& v)
    {
        ostr->write(v.l);
    }
};

template<typename S>
struct StreamReader< ::NoNamespace::C2, S>
{
    static void read(S* istr, ::NoNamespace::C2& v)
    {
        istr->read(v.l);
    }
};

template<>
struct StreamableTraits< ::NoNamespace::E1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::NoNamespace::E1, S>
{
    static void write(S* ostr, const ::NoNamespace::E1& v)
    {
        ostr->write(v.i);
    }
};

template<typename S>
struct StreamReader< ::NoNamespace::E1, S>
{
    static void read(S* istr, ::NoNamespace::E1& v)
    {
        istr->read(v.i);
    }
};

template<>
struct StreamableTraits< ::NoNamespace::E2>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::NoNamespace::E2, S>
{
    static void write(S* ostr, const ::NoNamespace::E2& v)
    {
        ostr->write(v.l);
    }
};

template<typename S>
struct StreamReader< ::NoNamespace::E2, S>
{
    static void read(S* istr, ::NoNamespace::E2& v)
    {
        istr->read(v.l);
    }
};

template<>
struct StreamableTraits< ::NoNamespace::notify>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::NoNamespace::notify, S>
{
    static void write(S* ostr, const ::NoNamespace::notify& v)
    {
        ostr->write(v.i);
    }
};

template<typename S>
struct StreamReader< ::NoNamespace::notify, S>
{
    static void read(S* istr, ::NoNamespace::notify& v)
    {
        istr->read(v.i);
    }
};

}
/// \endcond

namespace NoNamespace
{

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
