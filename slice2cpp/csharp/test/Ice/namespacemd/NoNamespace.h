//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `NoNamespace.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __NoNamespace_h__
#define __NoNamespace_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace NoNamespace
{

class C1;
class C2;

}

namespace NoNamespace
{

}

namespace NoNamespace
{

class C1 : public ::Ice::ValueHelper<C1, ::Ice::Value>
{
public:

    virtual ~C1();

    C1() = default;

    C1(const C1&) = default;
    C1(C1&&) = default;
    C1& operator=(const C1&) = default;
    C1& operator=(C1&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C1(int i) :
        i(i)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(i);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int i;
};

/// \cond INTERNAL
static C1 _iceS_C1_init;
/// \endcond

class C2 : public ::Ice::ValueHelper<C2, C1>
{
public:

    virtual ~C2();

    C2() = default;

    C2(const C2&) = default;
    C2(C2&&) = default;
    C2& operator=(const C2&) = default;
    C2& operator=(C2&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C2(int i, long long int l) :
        Ice::ValueHelper<C2, C1>(i),
        l(l)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const long long int&> ice_tuple() const
    {
        return std::tie(i, l);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    long long int l;
};

}

namespace NoNamespace
{

class E1 : public ::Ice::UserExceptionHelper<E1, ::Ice::UserException>
{
public:

    virtual ~E1();

    E1(const E1&) = default;

    E1() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    E1(int i) :
        i(i)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(i);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int i;
};

/// \cond INTERNAL
static E1 _iceS_E1_init;
/// \endcond

class E2 : public ::Ice::UserExceptionHelper<E2, E1>
{
public:

    virtual ~E2();

    E2(const E2&) = default;

    E2() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    E2(int i, long long int l) :
        ::Ice::UserExceptionHelper<E2, E1>(i),
        l(l)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const long long int&> ice_tuple() const
    {
        return std::tie(i, l);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    long long int l;
};

/**
 * Test keyword escape.
 */
class notify : public ::Ice::UserExceptionHelper<notify, ::Ice::UserException>
{
public:

    virtual ~notify();

    notify(const notify&) = default;

    notify() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    notify(int i) :
        i(i)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(i);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int i;
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::NoNamespace::C1, S>
{
    static void read(S* istr, ::NoNamespace::C1& v)
    {
        istr->readAll(v.i);
    }
};

template<typename S>
struct StreamWriter<::NoNamespace::C2, S>
{
    static void write(S* ostr, const ::NoNamespace::C2& v)
    {
        ostr->writeAll(v.l);
    }
};

template<typename S>
struct StreamReader<::NoNamespace::C2, S>
{
    static void read(S* istr, ::NoNamespace::C2& v)
    {
        istr->readAll(v.l);
    }
};

template<typename S>
struct StreamReader<::NoNamespace::E1, S>
{
    static void read(S* istr, ::NoNamespace::E1& v)
    {
        istr->readAll(v.i);
    }
};

template<typename S>
struct StreamWriter<::NoNamespace::E2, S>
{
    static void write(S* ostr, const ::NoNamespace::E2& v)
    {
        ostr->writeAll(v.l);
    }
};

template<typename S>
struct StreamReader<::NoNamespace::E2, S>
{
    static void read(S* istr, ::NoNamespace::E2& v)
    {
        istr->readAll(v.l);
    }
};

template<typename S>
struct StreamReader<::NoNamespace::notify, S>
{
    static void read(S* istr, ::NoNamespace::notify& v)
    {
        istr->readAll(v.i);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace NoNamespace
{

using C1Ptr = ::std::shared_ptr<C1>;

using C2Ptr = ::std::shared_ptr<C2>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
