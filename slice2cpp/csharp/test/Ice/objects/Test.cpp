//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::Base> iceC_Test_Base_init("::Test::Base");

const ::IceInternal::DefaultValueFactoryInit<::Test::A> iceC_Test_A_init("::Test::A");

const ::IceInternal::DefaultValueFactoryInit<::Test::B> iceC_Test_B_init("::Test::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::D> iceC_Test_D_init("::Test::D");

const ::IceInternal::DefaultValueFactoryInit<::Test::E> iceC_Test_E_init("::Test::E");

const ::IceInternal::DefaultValueFactoryInit<::Test::F> iceC_Test_F_init("::Test::F");

const ::IceInternal::DefaultValueFactoryInit<::Test::G> iceC_Test_G_init("::Test::G");

const ::std::string iceC_Test_I_ids[2] =
{
    "::Ice::Object",
    "::Test::I"
};
const ::std::string iceC_Test_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

const ::std::string iceC_Test_J_ids[3] =
{
    "::Ice::Object",
    "::Test::I",
    "::Test::J"
};
const ::std::string iceC_Test_J_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

const ::IceInternal::DefaultValueFactoryInit<::Test::Compact> iceC_Test_Compact_init("::Test::Compact");
const ::IceInternal::CompactIdInit iceC_Test_Compact_compactIdInit ("::Test::Compact", 1);

const ::IceInternal::DefaultValueFactoryInit<::Test::CompactExt> iceC_Test_CompactExt_init("::Test::CompactExt");
const ::IceInternal::CompactIdInit iceC_Test_CompactExt_compactIdInit ("::Test::CompactExt", 789);

const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::A> iceC_Test_Inner_A_init("::Test::Inner::A");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Inner::Ex> iceC_Test_Inner_Ex_init("::Test::Inner::Ex");

const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::Sub::A> iceC_Test_Inner_Sub_A_init("::Test::Inner::Sub::A");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Inner::Sub::Ex> iceC_Test_Inner_Sub_Ex_init("::Test::Inner::Sub::Ex");

const ::IceInternal::DefaultValueFactoryInit<::Test::A1> iceC_Test_A1_init("::Test::A1");

const ::IceInternal::DefaultValueFactoryInit<::Test::B1> iceC_Test_B1_init("::Test::B1");

const ::IceInternal::DefaultValueFactoryInit<::Test::D1> iceC_Test_D1_init("::Test::D1");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::EBase> iceC_Test_EBase_init("::Test::EBase");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::EDerived> iceC_Test_EDerived_init("::Test::EDerived");

const ::IceInternal::DefaultValueFactoryInit<::Test::Recursive> iceC_Test_Recursive_init("::Test::Recursive");

const ::IceInternal::DefaultValueFactoryInit<::Test::K> iceC_Test_K_init("::Test::K");

const ::IceInternal::DefaultValueFactoryInit<::Test::L> iceC_Test_L_init("::Test::L");

const ::IceInternal::DefaultValueFactoryInit<::Test::M> iceC_Test_M_init("::Test::M");

const ::IceInternal::DefaultValueFactoryInit<::Test::F3> iceC_Test_F3_init("::Test::F3");

const ::std::string iceC_Test_Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};
const ::std::string iceC_Test_Initial_ops[] =
{
    "acceptsClassCycles",
    "getAMDMB",
    "getAll",
    "getB1",
    "getB2",
    "getC",
    "getCompact",
    "getD",
    "getD1",
    "getE",
    "getF",
    "getInnerA",
    "getInnerSubA",
    "getK",
    "getMB",
    "hasF3",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBaseSeq",
    "opF1",
    "opF2",
    "opF3",
    "opM",
    "opValue",
    "opValueMap",
    "opValueSeq",
    "setCycle",
    "setG",
    "setRecursive",
    "shutdown",
    "supportsClassGraphDepthMax",
    "throwEDerived",
    "throwInnerEx",
    "throwInnerSubEx"
};
const ::std::string iceC_Test_Initial_shutdown_name = "shutdown";
const ::std::string iceC_Test_Initial_getB1_name = "getB1";
const ::std::string iceC_Test_Initial_getB2_name = "getB2";
const ::std::string iceC_Test_Initial_getC_name = "getC";
const ::std::string iceC_Test_Initial_getD_name = "getD";
const ::std::string iceC_Test_Initial_getE_name = "getE";
const ::std::string iceC_Test_Initial_getF_name = "getF";
const ::std::string iceC_Test_Initial_setRecursive_name = "setRecursive";
const ::std::string iceC_Test_Initial_supportsClassGraphDepthMax_name = "supportsClassGraphDepthMax";
const ::std::string iceC_Test_Initial_setCycle_name = "setCycle";
const ::std::string iceC_Test_Initial_acceptsClassCycles_name = "acceptsClassCycles";
const ::std::string iceC_Test_Initial_getMB_name = "getMB";
const ::std::string iceC_Test_Initial_getAMDMB_name = "getAMDMB";
const ::std::string iceC_Test_Initial_getAll_name = "getAll";
const ::std::string iceC_Test_Initial_getK_name = "getK";
const ::std::string iceC_Test_Initial_opValue_name = "opValue";
const ::std::string iceC_Test_Initial_opValueSeq_name = "opValueSeq";
const ::std::string iceC_Test_Initial_opValueMap_name = "opValueMap";
const ::std::string iceC_Test_Initial_getD1_name = "getD1";
const ::std::string iceC_Test_Initial_throwEDerived_name = "throwEDerived";
const ::std::string iceC_Test_Initial_setG_name = "setG";
const ::std::string iceC_Test_Initial_opBaseSeq_name = "opBaseSeq";
const ::std::string iceC_Test_Initial_getCompact_name = "getCompact";
const ::std::string iceC_Test_Initial_getInnerA_name = "getInnerA";
const ::std::string iceC_Test_Initial_getInnerSubA_name = "getInnerSubA";
const ::std::string iceC_Test_Initial_throwInnerEx_name = "throwInnerEx";
const ::std::string iceC_Test_Initial_throwInnerSubEx_name = "throwInnerSubEx";
const ::std::string iceC_Test_Initial_opM_name = "opM";
const ::std::string iceC_Test_Initial_opF1_name = "opF1";
const ::std::string iceC_Test_Initial_opF2_name = "opF2";
const ::std::string iceC_Test_Initial_opF3_name = "opF3";
const ::std::string iceC_Test_Initial_hasF3_name = "hasF3";

const ::IceInternal::DefaultValueFactoryInit<::Test::Empty> iceC_Test_Empty_init("::Test::Empty");

const ::IceInternal::DefaultValueFactoryInit<::Test::AlsoEmpty> iceC_Test_AlsoEmpty_init("::Test::AlsoEmpty");

const ::std::string iceC_Test_UnexpectedObjectExceptionTest_ids[2] =
{
    "::Ice::Object",
    "::Test::UnexpectedObjectExceptionTest"
};
const ::std::string iceC_Test_UnexpectedObjectExceptionTest_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};
const ::std::string iceC_Test_UnexpectedObjectExceptionTest_op_name = "op";

const ::IceInternal::DefaultValueFactoryInit<::Test::IBase> iceC_Test_IBase_init("::Test::IBase");

const ::IceInternal::DefaultValueFactoryInit<::Test::IDerived> iceC_Test_IDerived_init("::Test::IDerived");

const ::IceInternal::DefaultValueFactoryInit<::Test::IDerived2> iceC_Test_IDerived2_init("::Test::IDerived2");

const ::IceInternal::DefaultValueFactoryInit<::Test::I2> iceC_Test_I2_init("::Test::I2");

const ::IceInternal::DefaultValueFactoryInit<::Test::COneMember> iceC_Test_COneMember_init("::Test::COneMember");

const ::IceInternal::DefaultValueFactoryInit<::Test::CTwoMembers> iceC_Test_CTwoMembers_init("::Test::CTwoMembers");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::EOneMember> iceC_Test_EOneMember_init("::Test::EOneMember");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::ETwoMembers> iceC_Test_ETwoMembers_init("::Test::ETwoMembers");

}

Test::Inner::Ex::~Ex()
{
}

const ::std::string&
Test::Inner::Ex::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Ex";
    return typeId;
}

Test::Inner::Sub::Ex::~Ex()
{
}

const ::std::string&
Test::Inner::Sub::Ex::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Sub::Ex";
    return typeId;
}

Test::EBase::~EBase()
{
}

const ::std::string&
Test::EBase::ice_staticId()
{
    static const ::std::string typeId = "::Test::EBase";
    return typeId;
}

/// \cond STREAM
bool
Test::EBase::_usesClasses() const
{
    return true;
}
/// \endcond

Test::EDerived::~EDerived()
{
}

const ::std::string&
Test::EDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::EDerived";
    return typeId;
}

Test::EOneMember::~EOneMember()
{
}

const ::std::string&
Test::EOneMember::ice_staticId()
{
    static const ::std::string typeId = "::Test::EOneMember";
    return typeId;
}

/// \cond STREAM
bool
Test::EOneMember::_usesClasses() const
{
    return true;
}
/// \endcond

Test::ETwoMembers::~ETwoMembers()
{
}

const ::std::string&
Test::ETwoMembers::ice_staticId()
{
    static const ::std::string typeId = "::Test::ETwoMembers";
    return typeId;
}

/// \cond STREAM
bool
Test::ETwoMembers::_usesClasses() const
{
    return true;
}
/// \endcond

bool
Test::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_I_ids, iceC_Test_I_ids + 2, s);
}

::std::vector<::std::string>
Test::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_I_ids[0], &iceC_Test_I_ids[2]);
}

::std::string
Test::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::I";
    return typeId;
}

bool
Test::J::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_J_ids, iceC_Test_J_ids + 3, s);
}

::std::vector<::std::string>
Test::J::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_J_ids[0], &iceC_Test_J_ids[3]);
}

::std::string
Test::J::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::J::ice_staticId()
{
    static const ::std::string typeId = "::Test::J";
    return typeId;
}

bool
Test::Initial::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial_ids, iceC_Test_Initial_ids + 2, s);
}

::std::vector<::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Initial_ids[0], &iceC_Test_Initial_ids[2]);
}

::std::string
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getB1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<B> ret = this->getB1(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getB2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<B> ret = this->getB2(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<C> ret = this->getC(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<D> ret = this->getD(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getE(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<E> ret = this->getE(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getF(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<F> ret = this->getF(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_setRecursive(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<Recursive> iceP_p;
    istr->readAll(iceP_p);
    istr->readPendingValues();
    inS.endReadParams();
    this->setRecursive(::std::move(iceP_p), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsClassGraphDepthMax(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->supportsClassGraphDepthMax(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_setCycle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<Recursive> iceP_r;
    istr->readAll(iceP_r);
    istr->readPendingValues();
    inS.endReadParams();
    this->setCycle(::std::move(iceP_r), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_acceptsClassCycles(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->acceptsClassCycles(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

Test::Initial::GetMBMarshaledResult::GetMBMarshaledResult(const ::std::shared_ptr<B>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->writePendingValues();
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_getMB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setMarshaledResult(this->getMB(current));
    return true;
}
/// \endcond

Test::Initial::GetAMDMBMarshaledResult::GetAMDMBMarshaledResult(const ::std::shared_ptr<B>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->writePendingValues();
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_getAMDMB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->getAMDMBAsync(inA->response<GetAMDMBMarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getAll(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<B> iceP_b1;
    ::std::shared_ptr<B> iceP_b2;
    ::std::shared_ptr<C> iceP_theC;
    ::std::shared_ptr<D> iceP_theD;
    this->getAll(iceP_b1, iceP_b2, iceP_theC, iceP_theD, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_b1, iceP_b2, iceP_theC, iceP_theD);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getK(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<K> ret = this->getK(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opValue(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Ice::Value> iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<::Ice::Value> iceP_v2;
    ::std::shared_ptr<::Ice::Value> ret = this->opValue(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opValueSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ValueSeq iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ValueSeq iceP_v2;
    ValueSeq ret = this->opValueSeq(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opValueMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ValueMap iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ValueMap iceP_v2;
    ValueMap ret = this->opValueMap(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getD1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<D1> iceP_d1;
    istr->readAll(iceP_d1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<D1> ret = this->getD1(::std::move(iceP_d1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwEDerived(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwEDerived(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_setG(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<G> iceP_theG;
    istr->readAll(iceP_theG);
    istr->readPendingValues();
    inS.endReadParams();
    this->setG(::std::move(iceP_theG), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opBaseSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    BaseSeq iceP_inSeq;
    istr->readAll(iceP_inSeq);
    istr->readPendingValues();
    inS.endReadParams();
    BaseSeq iceP_outSeq;
    BaseSeq ret = this->opBaseSeq(::std::move(iceP_inSeq), iceP_outSeq, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_outSeq, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getCompact(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<Compact> ret = this->getCompact(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getInnerA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::Inner::A> ret = this->getInnerA(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getInnerSubA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::Inner::Sub::A> ret = this->getInnerSubA(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwInnerEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwInnerEx(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwInnerSubEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->throwInnerSubEx(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opM(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<M> iceP_v1;
    istr->readAll(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<M> iceP_v2;
    ::std::shared_ptr<M> ret = this->opM(::std::move(iceP_v1), iceP_v2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_v2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opF1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<F1> iceP_f11;
    istr->readAll(iceP_f11);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<F1> iceP_f12;
    ::std::shared_ptr<F1> ret = this->opF1(::std::move(iceP_f11), iceP_f12, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_f12, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opF2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<F2Prx> iceP_f21;
    istr->readAll(iceP_f21);
    inS.endReadParams();
    ::std::shared_ptr<F2Prx> iceP_f22;
    ::std::shared_ptr<F2Prx> ret = this->opF2(::std::move(iceP_f21), iceP_f22, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_f22, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opF3(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<F3> iceP_f31;
    istr->readAll(iceP_f31);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<F3> iceP_f32;
    ::std::shared_ptr<F3> ret = this->opF3(::std::move(iceP_f31), iceP_f32, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_f32, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_hasF3(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->hasF3(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial_ops, iceC_Test_Initial_ops + 36, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial_ops)
    {
        case 0:
        {
            return _iceD_acceptsClassCycles(in, current);
        }
        case 1:
        {
            return _iceD_getAMDMB(in, current);
        }
        case 2:
        {
            return _iceD_getAll(in, current);
        }
        case 3:
        {
            return _iceD_getB1(in, current);
        }
        case 4:
        {
            return _iceD_getB2(in, current);
        }
        case 5:
        {
            return _iceD_getC(in, current);
        }
        case 6:
        {
            return _iceD_getCompact(in, current);
        }
        case 7:
        {
            return _iceD_getD(in, current);
        }
        case 8:
        {
            return _iceD_getD1(in, current);
        }
        case 9:
        {
            return _iceD_getE(in, current);
        }
        case 10:
        {
            return _iceD_getF(in, current);
        }
        case 11:
        {
            return _iceD_getInnerA(in, current);
        }
        case 12:
        {
            return _iceD_getInnerSubA(in, current);
        }
        case 13:
        {
            return _iceD_getK(in, current);
        }
        case 14:
        {
            return _iceD_getMB(in, current);
        }
        case 15:
        {
            return _iceD_hasF3(in, current);
        }
        case 16:
        {
            return _iceD_ice_id(in, current);
        }
        case 17:
        {
            return _iceD_ice_ids(in, current);
        }
        case 18:
        {
            return _iceD_ice_isA(in, current);
        }
        case 19:
        {
            return _iceD_ice_ping(in, current);
        }
        case 20:
        {
            return _iceD_opBaseSeq(in, current);
        }
        case 21:
        {
            return _iceD_opF1(in, current);
        }
        case 22:
        {
            return _iceD_opF2(in, current);
        }
        case 23:
        {
            return _iceD_opF3(in, current);
        }
        case 24:
        {
            return _iceD_opM(in, current);
        }
        case 25:
        {
            return _iceD_opValue(in, current);
        }
        case 26:
        {
            return _iceD_opValueMap(in, current);
        }
        case 27:
        {
            return _iceD_opValueSeq(in, current);
        }
        case 28:
        {
            return _iceD_setCycle(in, current);
        }
        case 29:
        {
            return _iceD_setG(in, current);
        }
        case 30:
        {
            return _iceD_setRecursive(in, current);
        }
        case 31:
        {
            return _iceD_shutdown(in, current);
        }
        case 32:
        {
            return _iceD_supportsClassGraphDepthMax(in, current);
        }
        case 33:
        {
            return _iceD_throwEDerived(in, current);
        }
        case 34:
        {
            return _iceD_throwInnerEx(in, current);
        }
        case 35:
        {
            return _iceD_throwInnerSubEx(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::UnexpectedObjectExceptionTest::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_UnexpectedObjectExceptionTest_ids, iceC_Test_UnexpectedObjectExceptionTest_ids + 2, s);
}

::std::vector<::std::string>
Test::UnexpectedObjectExceptionTest::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_UnexpectedObjectExceptionTest_ids[0], &iceC_Test_UnexpectedObjectExceptionTest_ids[2]);
}

::std::string
Test::UnexpectedObjectExceptionTest::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::UnexpectedObjectExceptionTest::ice_staticId()
{
    static const ::std::string typeId = "::Test::UnexpectedObjectExceptionTest";
    return typeId;
}

/// \cond INTERNAL
bool
Test::UnexpectedObjectExceptionTest::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<Empty> ret = this->op(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::UnexpectedObjectExceptionTest::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_UnexpectedObjectExceptionTest_ops, iceC_Test_UnexpectedObjectExceptionTest_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_UnexpectedObjectExceptionTest_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::Base::~Base()
{
}

const ::std::string&
Test::Base::ice_staticId()
{
    static const ::std::string typeId = "::Test::Base";
    return typeId;
}

Test::A::~A()
{
}

const ::std::string&
Test::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

Test::B::~B()
{
}

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

Test::C::~C()
{
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

Test::D::~D()
{
}

const ::std::string&
Test::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

Test::E::~E()
{
}

const ::std::string&
Test::E::ice_staticId()
{
    static const ::std::string typeId = "::Test::E";
    return typeId;
}

Test::F::~F()
{
}

const ::std::string&
Test::F::ice_staticId()
{
    static const ::std::string typeId = "::Test::F";
    return typeId;
}

Test::G::~G()
{
}

const ::std::string&
Test::G::ice_staticId()
{
    static const ::std::string typeId = "::Test::G";
    return typeId;
}

Test::Compact::~Compact()
{
}

const ::std::string&
Test::Compact::ice_staticId()
{
    static const ::std::string typeId = "::Test::Compact";
    return typeId;
}

Test::CompactExt::~CompactExt()
{
}

const ::std::string&
Test::CompactExt::ice_staticId()
{
    static const ::std::string typeId = "::Test::CompactExt";
    return typeId;
}

Test::Inner::A::~A()
{
}

const ::std::string&
Test::Inner::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::A";
    return typeId;
}

Test::Inner::Sub::A::~A()
{
}

const ::std::string&
Test::Inner::Sub::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Sub::A";
    return typeId;
}

Test::A1::~A1()
{
}

const ::std::string&
Test::A1::ice_staticId()
{
    static const ::std::string typeId = "::Test::A1";
    return typeId;
}

Test::B1::~B1()
{
}

const ::std::string&
Test::B1::ice_staticId()
{
    static const ::std::string typeId = "::Test::B1";
    return typeId;
}

Test::D1::~D1()
{
}

const ::std::string&
Test::D1::ice_staticId()
{
    static const ::std::string typeId = "::Test::D1";
    return typeId;
}

Test::Recursive::~Recursive()
{
}

const ::std::string&
Test::Recursive::ice_staticId()
{
    static const ::std::string typeId = "::Test::Recursive";
    return typeId;
}

Test::K::~K()
{
}

const ::std::string&
Test::K::ice_staticId()
{
    static const ::std::string typeId = "::Test::K";
    return typeId;
}

Test::L::~L()
{
}

const ::std::string&
Test::L::ice_staticId()
{
    static const ::std::string typeId = "::Test::L";
    return typeId;
}

Test::M::~M()
{
}

const ::std::string&
Test::M::ice_staticId()
{
    static const ::std::string typeId = "::Test::M";
    return typeId;
}

Test::F3::~F3()
{
}

const ::std::string&
Test::F3::ice_staticId()
{
    static const ::std::string typeId = "::Test::F3";
    return typeId;
}

Test::Empty::~Empty()
{
}

const ::std::string&
Test::Empty::ice_staticId()
{
    static const ::std::string typeId = "::Test::Empty";
    return typeId;
}

Test::AlsoEmpty::~AlsoEmpty()
{
}

const ::std::string&
Test::AlsoEmpty::ice_staticId()
{
    static const ::std::string typeId = "::Test::AlsoEmpty";
    return typeId;
}

Test::IBase::~IBase()
{
}

const ::std::string&
Test::IBase::ice_staticId()
{
    static const ::std::string typeId = "::Test::IBase";
    return typeId;
}

Test::IDerived::~IDerived()
{
}

const ::std::string&
Test::IDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::IDerived";
    return typeId;
}

Test::IDerived2::~IDerived2()
{
}

const ::std::string&
Test::IDerived2::ice_staticId()
{
    static const ::std::string typeId = "::Test::IDerived2";
    return typeId;
}

Test::I2::~I2()
{
}

const ::std::string&
Test::I2::ice_staticId()
{
    static const ::std::string typeId = "::Test::I2";
    return typeId;
}

Test::COneMember::~COneMember()
{
}

const ::std::string&
Test::COneMember::ice_staticId()
{
    static const ::std::string typeId = "::Test::COneMember";
    return typeId;
}

Test::CTwoMembers::~CTwoMembers()
{
}

const ::std::string&
Test::CTwoMembers::ice_staticId()
{
    static const ::std::string typeId = "::Test::CTwoMembers";
    return typeId;
}

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::IPrx::_newInstance() const
{
    return ::IceInternal::createProxy<IPrx>();
}
/// \endcond

const ::std::string&
Test::IPrx::ice_staticId()
{
    return I::ice_staticId();
}

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::JPrx::_newInstance() const
{
    return ::IceInternal::createProxy<JPrx>();
}
/// \endcond

const ::std::string&
Test::JPrx::ice_staticId()
{
    return J::ice_staticId();
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getB1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getB1_name);
    outAsync->invoke(iceC_Test_Initial_getB1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getB2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getB2_name);
    outAsync->invoke(iceC_Test_Initial_getB2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::C>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getC_name);
    outAsync->invoke(iceC_Test_Initial_getC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<C> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::D>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getD_name);
    outAsync->invoke(iceC_Test_Initial_getD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<D> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getE(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::E>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getE_name);
    outAsync->invoke(iceC_Test_Initial_getE_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<E> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getF(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::F>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getF_name);
    outAsync->invoke(iceC_Test_Initial_getF_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<F> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_setRecursive(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<Recursive>& iceP_p, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_setRecursive_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsClassGraphDepthMax(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsClassGraphDepthMax_name);
    outAsync->invoke(iceC_Test_Initial_supportsClassGraphDepthMax_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_setCycle(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<Recursive>& iceP_r, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_setCycle_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_r);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_acceptsClassCycles(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_acceptsClassCycles_name);
    outAsync->invoke(iceC_Test_Initial_acceptsClassCycles_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getMB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getMB_name);
    outAsync->invoke(iceC_Test_Initial_getMB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getAMDMB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getAMDMB_name);
    outAsync->invoke(iceC_Test_Initial_getAMDMB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getAll(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::GetAllResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getAll_name);
    outAsync->invoke(iceC_Test_Initial_getAll_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::GetAllResult v;
            istr->readAll(v.b1, v.b2, v.theC, v.theD);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getK(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::K>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getK_name);
    outAsync->invoke(iceC_Test_Initial_getK_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<K> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opValue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpValueResult>>& outAsync, const ::std::shared_ptr<::Ice::Value>& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opValue_name);
    outAsync->invoke(iceC_Test_Initial_opValue_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpValueResult v;
            istr->readAll(v.v2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opValueSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpValueSeqResult>>& outAsync, const ValueSeq& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opValueSeq_name);
    outAsync->invoke(iceC_Test_Initial_opValueSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpValueSeqResult v;
            istr->readAll(v.v2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opValueMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpValueMapResult>>& outAsync, const ValueMap& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opValueMap_name);
    outAsync->invoke(iceC_Test_Initial_opValueMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpValueMapResult v;
            istr->readAll(v.v2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getD1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::D1>>>& outAsync, const ::std::shared_ptr<D1>& iceP_d1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getD1_name);
    outAsync->invoke(iceC_Test_Initial_getD1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_d1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<D1> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_throwEDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_throwEDerived_name);
    outAsync->invoke(iceC_Test_Initial_throwEDerived_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const EDerived&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_setG(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<G>& iceP_theG, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_setG_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_theG);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opBaseSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpBaseSeqResult>>& outAsync, const BaseSeq& iceP_inSeq, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opBaseSeq_name);
    outAsync->invoke(iceC_Test_Initial_opBaseSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_inSeq);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpBaseSeqResult v;
            istr->readAll(v.outSeq, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getCompact(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Compact>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getCompact_name);
    outAsync->invoke(iceC_Test_Initial_getCompact_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<Compact> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getInnerA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Inner::A>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getInnerA_name);
    outAsync->invoke(iceC_Test_Initial_getInnerA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Test::Inner::A> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getInnerSubA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Inner::Sub::A>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getInnerSubA_name);
    outAsync->invoke(iceC_Test_Initial_getInnerSubA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Test::Inner::Sub::A> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_throwInnerEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_throwInnerEx_name);
    outAsync->invoke(iceC_Test_Initial_throwInnerEx_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Test::Inner::Ex&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_throwInnerSubEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_throwInnerSubEx_name);
    outAsync->invoke(iceC_Test_Initial_throwInnerSubEx_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Test::Inner::Sub::Ex&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opM(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMResult>>& outAsync, const ::std::shared_ptr<M>& iceP_v1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opM_name);
    outAsync->invoke(iceC_Test_Initial_opM_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_v1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpMResult v;
            istr->readAll(v.v2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opF1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpF1Result>>& outAsync, const ::std::shared_ptr<F1>& iceP_f11, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opF1_name);
    outAsync->invoke(iceC_Test_Initial_opF1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f11);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpF1Result v;
            istr->readAll(v.f12, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opF2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpF2Result>>& outAsync, const ::std::shared_ptr<F2Prx>& iceP_f21, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opF2_name);
    outAsync->invoke(iceC_Test_Initial_opF2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f21);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpF2Result v;
            istr->readAll(v.f22, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opF3(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpF3Result>>& outAsync, const ::std::shared_ptr<F3>& iceP_f31, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opF3_name);
    outAsync->invoke(iceC_Test_Initial_opF3_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f31);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpF3Result v;
            istr->readAll(v.f32, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_hasF3(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_hasF3_name);
    outAsync->invoke(iceC_Test_Initial_hasF3_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::InitialPrx::_newInstance() const
{
    return ::IceInternal::createProxy<InitialPrx>();
}
/// \endcond

const ::std::string&
Test::InitialPrx::ice_staticId()
{
    return Initial::ice_staticId();
}

/// \cond INTERNAL
void
Test::UnexpectedObjectExceptionTestPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Empty>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_UnexpectedObjectExceptionTest_op_name);
    outAsync->invoke(iceC_Test_UnexpectedObjectExceptionTest_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<Empty> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::UnexpectedObjectExceptionTestPrx::_newInstance() const
{
    return ::IceInternal::createProxy<UnexpectedObjectExceptionTestPrx>();
}
/// \endcond

const ::std::string&
Test::UnexpectedObjectExceptionTestPrx::ice_staticId()
{
    return UnexpectedObjectExceptionTest::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::Base> iceC_Test_Base_init("::Test::Base");

const ::IceInternal::DefaultValueFactoryInit<::Test::A> iceC_Test_A_init("::Test::A");

const ::IceInternal::DefaultValueFactoryInit<::Test::B> iceC_Test_B_init("::Test::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::D> iceC_Test_D_init("::Test::D");

const ::IceInternal::DefaultValueFactoryInit<::Test::E> iceC_Test_E_init("::Test::E");

const ::IceInternal::DefaultValueFactoryInit<::Test::F> iceC_Test_F_init("::Test::F");

const ::IceInternal::DefaultValueFactoryInit<::Test::G> iceC_Test_G_init("::Test::G");

const ::IceInternal::DefaultValueFactoryInit<::Test::Compact> iceC_Test_Compact_init("::Test::Compact");
const ::IceInternal::CompactIdInit iceC_Test_Compact_compactIdInit ("::Test::Compact", 1);

const ::IceInternal::DefaultValueFactoryInit<::Test::CompactExt> iceC_Test_CompactExt_init("::Test::CompactExt");
const ::IceInternal::CompactIdInit iceC_Test_CompactExt_compactIdInit ("::Test::CompactExt", 789);

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::A> iceC_Test_Inner_A_init("::Test::Inner::A");

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::Sub::A> iceC_Test_Inner_Sub_A_init("::Test::Inner::Sub::A");

}

}

const ::IceInternal::DefaultValueFactoryInit<::Test::A1> iceC_Test_A1_init("::Test::A1");

const ::IceInternal::DefaultValueFactoryInit<::Test::B1> iceC_Test_B1_init("::Test::B1");

const ::IceInternal::DefaultValueFactoryInit<::Test::D1> iceC_Test_D1_init("::Test::D1");

const ::IceInternal::DefaultValueFactoryInit<::Test::Recursive> iceC_Test_Recursive_init("::Test::Recursive");

const ::IceInternal::DefaultValueFactoryInit<::Test::K> iceC_Test_K_init("::Test::K");

const ::IceInternal::DefaultValueFactoryInit<::Test::L> iceC_Test_L_init("::Test::L");

const ::IceInternal::DefaultValueFactoryInit<::Test::M> iceC_Test_M_init("::Test::M");

const ::IceInternal::DefaultValueFactoryInit<::Test::F3> iceC_Test_F3_init("::Test::F3");

const ::std::string iceC_Test_Initial_shutdown_name = "shutdown";

const ::std::string iceC_Test_Initial_getB1_name = "getB1";

const ::std::string iceC_Test_Initial_getB2_name = "getB2";

const ::std::string iceC_Test_Initial_getC_name = "getC";

const ::std::string iceC_Test_Initial_getD_name = "getD";

const ::std::string iceC_Test_Initial_getE_name = "getE";

const ::std::string iceC_Test_Initial_getF_name = "getF";

const ::std::string iceC_Test_Initial_setRecursive_name = "setRecursive";

const ::std::string iceC_Test_Initial_supportsClassGraphDepthMax_name = "supportsClassGraphDepthMax";

const ::std::string iceC_Test_Initial_setCycle_name = "setCycle";

const ::std::string iceC_Test_Initial_acceptsClassCycles_name = "acceptsClassCycles";

const ::std::string iceC_Test_Initial_getMB_name = "getMB";

const ::std::string iceC_Test_Initial_getAMDMB_name = "getAMDMB";

const ::std::string iceC_Test_Initial_getAll_name = "getAll";

const ::std::string iceC_Test_Initial_getK_name = "getK";

const ::std::string iceC_Test_Initial_opValue_name = "opValue";

const ::std::string iceC_Test_Initial_opValueSeq_name = "opValueSeq";

const ::std::string iceC_Test_Initial_opValueMap_name = "opValueMap";

const ::std::string iceC_Test_Initial_getD1_name = "getD1";

const ::std::string iceC_Test_Initial_throwEDerived_name = "throwEDerived";

const ::std::string iceC_Test_Initial_setG_name = "setG";

const ::std::string iceC_Test_Initial_opBaseSeq_name = "opBaseSeq";

const ::std::string iceC_Test_Initial_getCompact_name = "getCompact";

const ::std::string iceC_Test_Initial_getInnerA_name = "getInnerA";

const ::std::string iceC_Test_Initial_getInnerSubA_name = "getInnerSubA";

const ::std::string iceC_Test_Initial_throwInnerEx_name = "throwInnerEx";

const ::std::string iceC_Test_Initial_throwInnerSubEx_name = "throwInnerSubEx";

const ::std::string iceC_Test_Initial_opM_name = "opM";

const ::std::string iceC_Test_Initial_opF1_name = "opF1";

const ::std::string iceC_Test_Initial_opF2_name = "opF2";

const ::std::string iceC_Test_Initial_opF3_name = "opF3";

const ::std::string iceC_Test_Initial_hasF3_name = "hasF3";

const ::IceInternal::DefaultValueFactoryInit<::Test::Empty> iceC_Test_Empty_init("::Test::Empty");

const ::IceInternal::DefaultValueFactoryInit<::Test::AlsoEmpty> iceC_Test_AlsoEmpty_init("::Test::AlsoEmpty");

const ::std::string iceC_Test_UnexpectedObjectExceptionTest_op_name = "op";

const ::IceInternal::DefaultValueFactoryInit<::Test::IBase> iceC_Test_IBase_init("::Test::IBase");

const ::IceInternal::DefaultValueFactoryInit<::Test::IDerived> iceC_Test_IDerived_init("::Test::IDerived");

const ::IceInternal::DefaultValueFactoryInit<::Test::IDerived2> iceC_Test_IDerived2_init("::Test::IDerived2");

const ::IceInternal::DefaultValueFactoryInit<::Test::I2> iceC_Test_I2_init("::Test::I2");

const ::IceInternal::DefaultValueFactoryInit<::Test::COneMember> iceC_Test_COneMember_init("::Test::COneMember");

const ::IceInternal::DefaultValueFactoryInit<::Test::CTwoMembers> iceC_Test_CTwoMembers_init("::Test::CTwoMembers");

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::Inner::Ex> iceC_Test_Inner_Ex_init("::Test::Inner::Ex");

}

Test::Inner::Ex::Ex(const ::std::string& reason) :
    ::Ice::UserException(),
    reason(reason)
{
}
Test::Inner::Ex::~Ex()
{
}

::std::string
Test::Inner::Ex::ice_id() const
{
    return "::Test::Inner::Ex";
}

Test::Inner::Ex*
Test::Inner::Ex::ice_clone() const
{
    return new Ex(*this);
}

void
Test::Inner::Ex::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::Inner::Ex::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::Inner::Ex", -1, true);
    ::Ice::StreamWriter< Ex, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Inner::Ex::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Ex, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::Inner::Sub::Ex> iceC_Test_Inner_Sub_Ex_init("::Test::Inner::Sub::Ex");

}

Test::Inner::Sub::Ex::Ex(const ::std::string& reason) :
    ::Ice::UserException(),
    reason(reason)
{
}
Test::Inner::Sub::Ex::~Ex()
{
}

::std::string
Test::Inner::Sub::Ex::ice_id() const
{
    return "::Test::Inner::Sub::Ex";
}

Test::Inner::Sub::Ex*
Test::Inner::Sub::Ex::ice_clone() const
{
    return new Ex(*this);
}

void
Test::Inner::Sub::Ex::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::Inner::Sub::Ex::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::Inner::Sub::Ex", -1, true);
    ::Ice::StreamWriter< Ex, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Inner::Sub::Ex::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Ex, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::EBase> iceC_Test_EBase_init("::Test::EBase");

}

Test::EBase::EBase(const A1Ptr& a1, const A1Ptr& a2) :
    ::Ice::UserException(),
    a1(a1),
    a2(a2)
{
}
Test::EBase::~EBase()
{
}

::std::string
Test::EBase::ice_id() const
{
    return "::Test::EBase";
}

Test::EBase*
Test::EBase::ice_clone() const
{
    return new EBase(*this);
}

void
Test::EBase::ice_throw() const
{
    throw *this;
}

bool
Test::EBase::_usesClasses() const
{
    return true;
}

/// \cond STREAM
void
Test::EBase::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::EBase", -1, true);
    ::Ice::StreamWriter< EBase, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::EBase::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< EBase, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::EDerived> iceC_Test_EDerived_init("::Test::EDerived");

}

Test::EDerived::EDerived(const A1Ptr& a1, const A1Ptr& a2, const A1Ptr& a3, const A1Ptr& a4) :
    EBase(a1, a2),
    a3(a3),
    a4(a4)
{
}
Test::EDerived::~EDerived()
{
}

::std::string
Test::EDerived::ice_id() const
{
    return "::Test::EDerived";
}

Test::EDerived*
Test::EDerived::ice_clone() const
{
    return new EDerived(*this);
}

void
Test::EDerived::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::EDerived::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::EDerived", -1, false);
    ::Ice::StreamWriter< EDerived, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    EBase::_writeImpl(ostr);
}

void
Test::EDerived::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< EDerived, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    EBase::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::EOneMember> iceC_Test_EOneMember_init("::Test::EOneMember");

}

Test::EOneMember::EOneMember(const EmptyPtr& e) :
    ::Ice::UserException(),
    e(e)
{
}
Test::EOneMember::~EOneMember()
{
}

::std::string
Test::EOneMember::ice_id() const
{
    return "::Test::EOneMember";
}

Test::EOneMember*
Test::EOneMember::ice_clone() const
{
    return new EOneMember(*this);
}

void
Test::EOneMember::ice_throw() const
{
    throw *this;
}

bool
Test::EOneMember::_usesClasses() const
{
    return true;
}

/// \cond STREAM
void
Test::EOneMember::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::EOneMember", -1, true);
    ::Ice::StreamWriter< EOneMember, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::EOneMember::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< EOneMember, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::ETwoMembers> iceC_Test_ETwoMembers_init("::Test::ETwoMembers");

}

Test::ETwoMembers::ETwoMembers(const EmptyPtr& e1, const EmptyPtr& e2) :
    ::Ice::UserException(),
    e1(e1),
    e2(e2)
{
}
Test::ETwoMembers::~ETwoMembers()
{
}

::std::string
Test::ETwoMembers::ice_id() const
{
    return "::Test::ETwoMembers";
}

Test::ETwoMembers*
Test::ETwoMembers::ice_clone() const
{
    return new ETwoMembers(*this);
}

void
Test::ETwoMembers::ice_throw() const
{
    throw *this;
}

bool
Test::ETwoMembers::_usesClasses() const
{
    return true;
}

/// \cond STREAM
void
Test::ETwoMembers::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::ETwoMembers", -1, true);
    ::Ice::StreamWriter< ETwoMembers, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::ETwoMembers::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ETwoMembers, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

Test::AMD_Initial_getAMDMB::~AMD_Initial_getAMDMB()
{
}

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_getAMDMB::AMD_Initial_getAMDMB(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_getAMDMB::ice_response(const ::Test::BPtr& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(I* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< I>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new I;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::I::_newInstance() const
{
    return new I;
}
/// \endcond

const ::std::string&
IceProxy::Test::I::ice_staticId()
{
    return ::Test::I::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(J* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< J>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new J;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::J::_newInstance() const
{
    return new J;
}
/// \endcond

const ::std::string&
IceProxy::Test::J::ice_staticId()
{
    return ::Test::J::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Initial* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Initial>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Initial;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial_shutdown_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getB1(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getB1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getB1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getB1_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getB1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::BPtr
IceProxy::Test::Initial::end_getB1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getB1_name);
    ::Test::BPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getB2(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getB2_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getB2_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getB2_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getB2_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::BPtr
IceProxy::Test::Initial::end_getB2(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getB2_name);
    ::Test::BPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getC(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getC_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getC_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getC_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getC_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::CPtr
IceProxy::Test::Initial::end_getC(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getC_name);
    ::Test::CPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getD(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getD_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::DPtr
IceProxy::Test::Initial::end_getD(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getD_name);
    ::Test::DPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getE(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getE_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getE_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getE_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getE_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::EPtr
IceProxy::Test::Initial::end_getE(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getE_name);
    ::Test::EPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getF(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getF_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getF_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getF_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getF_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::FPtr
IceProxy::Test::Initial::end_getF(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getF_name);
    ::Test::FPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_setRecursive(const ::Test::RecursivePtr& iceP_p, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_setRecursive_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_setRecursive_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_setRecursive_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_setRecursive(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial_setRecursive_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_supportsClassGraphDepthMax(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsClassGraphDepthMax_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_supportsClassGraphDepthMax_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_supportsClassGraphDepthMax_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_supportsClassGraphDepthMax_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Test::Initial::end_supportsClassGraphDepthMax(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_supportsClassGraphDepthMax_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_setCycle(const ::Test::RecursivePtr& iceP_r, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_setCycle_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_setCycle_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_r);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_setCycle_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_setCycle(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial_setCycle_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_acceptsClassCycles(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_acceptsClassCycles_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_acceptsClassCycles_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_acceptsClassCycles_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_acceptsClassCycles_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Test::Initial::end_acceptsClassCycles(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_acceptsClassCycles_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getMB(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getMB_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getMB_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getMB_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getMB_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::BPtr
IceProxy::Test::Initial::end_getMB(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getMB_name);
    ::Test::BPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getAMDMB(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getAMDMB_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getAMDMB_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getAMDMB_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getAMDMB_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::BPtr
IceProxy::Test::Initial::end_getAMDMB(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getAMDMB_name);
    ::Test::BPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getAll(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getAll_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getAll_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getAll_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getAll_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_getAll(::Test::BPtr& iceP_b1, ::Test::BPtr& iceP_b2, ::Test::CPtr& iceP_theC, ::Test::DPtr& iceP_theD, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getAll_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_b1);
    istr->read(iceP_b2);
    istr->read(iceP_theC);
    istr->read(iceP_theD);
    istr->readPendingValues();
    result->_endReadParams();
}

void IceProxy::Test::Initial::_iceI_end_getAll(::Test::BPtr& iceP_b1, ::Test::BPtr& iceP_b2, ::Test::CPtr& iceP_theC, ::Test::DPtr& iceP_theD, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getAll_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_b1);
    istr->read(iceP_b2);
    istr->read(iceP_theC);
    istr->read(iceP_theD);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getK(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getK_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getK_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getK_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getK_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::KPtr
IceProxy::Test::Initial::end_getK(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getK_name);
    ::Test::KPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opValue(const ::Ice::ValuePtr& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opValue_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opValue_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opValue_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opValue_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::ValuePtr
IceProxy::Test::Initial::end_opValue(::Ice::ValuePtr& iceP_v2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opValue_name);
    ::Ice::ValuePtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opValue(::Ice::ValuePtr& iceP_v2, ::Ice::ValuePtr& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opValue_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opValueSeq(const ::Test::ValueSeq& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opValueSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opValueSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opValueSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opValueSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ValueSeq
IceProxy::Test::Initial::end_opValueSeq(::Test::ValueSeq& iceP_v2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opValueSeq_name);
    ::Test::ValueSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opValueSeq(::Test::ValueSeq& iceP_v2, ::Test::ValueSeq& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opValueSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opValueMap(const ::Test::ValueMap& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opValueMap_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opValueMap_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opValueMap_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opValueMap_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ValueMap
IceProxy::Test::Initial::end_opValueMap(::Test::ValueMap& iceP_v2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opValueMap_name);
    ::Test::ValueMap ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opValueMap(::Test::ValueMap& iceP_v2, ::Test::ValueMap& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opValueMap_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getD1(const ::Test::D1Ptr& iceP_d1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getD1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getD1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getD1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_d1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_getD1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::D1Ptr
IceProxy::Test::Initial::end_getD1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getD1_name);
    ::Test::D1Ptr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_throwEDerived(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_throwEDerived_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_throwEDerived_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_throwEDerived_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_throwEDerived_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_throwEDerived(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_throwEDerived_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::EDerived&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_setG(const ::Test::GPtr& iceP_theG, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_setG_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_setG_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_theG);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_setG_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_setG(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial_setG_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opBaseSeq(const ::Test::BaseSeq& iceP_inSeq, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opBaseSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opBaseSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opBaseSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_inSeq);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opBaseSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::BaseSeq
IceProxy::Test::Initial::end_opBaseSeq(::Test::BaseSeq& iceP_outSeq, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opBaseSeq_name);
    ::Test::BaseSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_outSeq);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opBaseSeq(::Test::BaseSeq& iceP_outSeq, ::Test::BaseSeq& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opBaseSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_outSeq);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getCompact(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getCompact_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getCompact_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getCompact_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getCompact_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::CompactPtr
IceProxy::Test::Initial::end_getCompact(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getCompact_name);
    ::Test::CompactPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getInnerA(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getInnerA_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getInnerA_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getInnerA_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getInnerA_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::APtr
IceProxy::Test::Initial::end_getInnerA(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getInnerA_name);
    ::Test::Inner::APtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getInnerSubA(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getInnerSubA_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getInnerSubA_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getInnerSubA_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getInnerSubA_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::Sub::APtr
IceProxy::Test::Initial::end_getInnerSubA(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getInnerSubA_name);
    ::Test::Inner::Sub::APtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_throwInnerEx(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_throwInnerEx_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_throwInnerEx_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_throwInnerEx_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_throwInnerEx_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_throwInnerEx(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_throwInnerEx_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::Inner::Ex&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_throwInnerSubEx(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_throwInnerSubEx_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_throwInnerSubEx_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_throwInnerSubEx_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_throwInnerSubEx_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_throwInnerSubEx(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_throwInnerSubEx_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::Inner::Sub::Ex&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opM(const ::Test::MPtr& iceP_v1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opM_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opM_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opM_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_v1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opM_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MPtr
IceProxy::Test::Initial::end_opM(::Test::MPtr& iceP_v2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opM_name);
    ::Test::MPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opM(::Test::MPtr& iceP_v2, ::Test::MPtr& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opM_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_v2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opF1(const ::Test::F1Ptr& iceP_f11, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opF1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opF1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opF1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_f11);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opF1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::F1Ptr
IceProxy::Test::Initial::end_opF1(::Test::F1Ptr& iceP_f12, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opF1_name);
    ::Test::F1Ptr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_f12);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opF1(::Test::F1Ptr& iceP_f12, ::Test::F1Ptr& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opF1_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_f12);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opF2(const ::Test::F2Prx& iceP_f21, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opF2_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opF2_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opF2_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_f21);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opF2_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::F2Prx
IceProxy::Test::Initial::end_opF2(::Test::F2Prx& iceP_f22, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opF2_name);
    ::Test::F2Prx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_f22);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opF2(::Test::F2Prx& iceP_f22, ::Test::F2Prx& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opF2_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_f22);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opF3(const ::Test::F3Ptr& iceP_f31, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opF3_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opF3_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opF3_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_f31);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opF3_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::F3Ptr
IceProxy::Test::Initial::end_opF3(::Test::F3Ptr& iceP_f32, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opF3_name);
    ::Test::F3Ptr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_f32);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opF3(::Test::F3Ptr& iceP_f32, ::Test::F3Ptr& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opF3_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_f32);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_hasF3(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_hasF3_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_hasF3_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_hasF3_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_hasF3_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Test::Initial::end_hasF3(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_hasF3_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Initial::_newInstance() const
{
    return new Initial;
}
/// \endcond

const ::std::string&
IceProxy::Test::Initial::ice_staticId()
{
    return ::Test::Initial::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(UnexpectedObjectExceptionTest* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< UnexpectedObjectExceptionTest>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new UnexpectedObjectExceptionTest;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::UnexpectedObjectExceptionTest::_iceI_begin_op(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_UnexpectedObjectExceptionTest_op_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_UnexpectedObjectExceptionTest_op_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_UnexpectedObjectExceptionTest_op_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_UnexpectedObjectExceptionTest_op_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::EmptyPtr
IceProxy::Test::UnexpectedObjectExceptionTest::end_op(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_UnexpectedObjectExceptionTest_op_name);
    ::Test::EmptyPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::UnexpectedObjectExceptionTest::_newInstance() const
{
    return new UnexpectedObjectExceptionTest;
}
/// \endcond

const ::std::string&
IceProxy::Test::UnexpectedObjectExceptionTest::ice_staticId()
{
    return ::Test::UnexpectedObjectExceptionTest::ice_staticId();
}

Test::I::~I()
{
}

namespace
{
const ::std::string iceC_Test_I_ids[2] =
{
    "::Ice::Object",
    "::Test::I"
};

}

bool
Test::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_I_ids, iceC_Test_I_ids + 2, s);
}

::std::vector< ::std::string>
Test::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_I_ids[0], &iceC_Test_I_ids[2]);
}

::std::string
Test::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::I";
    return typeId;
}

Test::J::~J()
{
}

namespace
{
const ::std::string iceC_Test_J_ids[3] =
{
    "::Ice::Object",
    "::Test::I",
    "::Test::J"
};

}

bool
Test::J::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_J_ids, iceC_Test_J_ids + 3, s);
}

::std::vector< ::std::string>
Test::J::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_J_ids[0], &iceC_Test_J_ids[3]);
}

::std::string
Test::J::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::J::ice_staticId()
{
    static const ::std::string typeId = "::Test::J";
    return typeId;
}

Test::Initial::~Initial()
{
}

namespace
{
const ::std::string iceC_Test_Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};

}

bool
Test::Initial::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial_ids, iceC_Test_Initial_ids + 2, s);
}

::std::vector< ::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Initial_ids[0], &iceC_Test_Initial_ids[2]);
}

::std::string
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getB1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    BPtr ret = this->getB1(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getB2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    BPtr ret = this->getB2(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    CPtr ret = this->getC(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    DPtr ret = this->getD(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getE(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    EPtr ret = this->getE(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getF(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    FPtr ret = this->getF(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_setRecursive(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    RecursivePtr iceP_p;
    istr->read(iceP_p);
    istr->readPendingValues();
    inS.endReadParams();
    this->setRecursive(iceP_p, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsClassGraphDepthMax(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->supportsClassGraphDepthMax(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_setCycle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    RecursivePtr iceP_r;
    istr->read(iceP_r);
    istr->readPendingValues();
    inS.endReadParams();
    this->setCycle(iceP_r, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_acceptsClassCycles(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->acceptsClassCycles(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getMB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    BPtr ret = this->getMB(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getAMDMB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->getAMDMB_async(new IceAsync::Test::AMD_Initial_getAMDMB(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getAll(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    BPtr iceP_b1;
    BPtr iceP_b2;
    CPtr iceP_theC;
    DPtr iceP_theD;
    this->getAll(iceP_b1, iceP_b2, iceP_theC, iceP_theD, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_b1);
    ostr->write(iceP_b2);
    ostr->write(iceP_theC);
    ostr->write(iceP_theD);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getK(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    KPtr ret = this->getK(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opValue(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::ValuePtr iceP_v1;
    istr->read(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Ice::ValuePtr iceP_v2;
    ::Ice::ValuePtr ret = this->opValue(iceP_v1, iceP_v2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_v2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opValueSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ValueSeq iceP_v1;
    istr->read(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ValueSeq iceP_v2;
    ValueSeq ret = this->opValueSeq(iceP_v1, iceP_v2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_v2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opValueMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ValueMap iceP_v1;
    istr->read(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    ValueMap iceP_v2;
    ValueMap ret = this->opValueMap(iceP_v1, iceP_v2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_v2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getD1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    D1Ptr iceP_d1;
    istr->read(iceP_d1);
    istr->readPendingValues();
    inS.endReadParams();
    D1Ptr ret = this->getD1(iceP_d1, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwEDerived(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->throwEDerived(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_setG(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    GPtr iceP_theG;
    istr->read(iceP_theG);
    istr->readPendingValues();
    inS.endReadParams();
    this->setG(iceP_theG, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opBaseSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    BaseSeq iceP_inSeq;
    istr->read(iceP_inSeq);
    istr->readPendingValues();
    inS.endReadParams();
    BaseSeq iceP_outSeq;
    BaseSeq ret = this->opBaseSeq(iceP_inSeq, iceP_outSeq, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_outSeq);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getCompact(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    CompactPtr ret = this->getCompact(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getInnerA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Test::Inner::APtr ret = this->getInnerA(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getInnerSubA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Test::Inner::Sub::APtr ret = this->getInnerSubA(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwInnerEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->throwInnerEx(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_throwInnerSubEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->throwInnerSubEx(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opM(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    MPtr iceP_v1;
    istr->read(iceP_v1);
    istr->readPendingValues();
    inS.endReadParams();
    MPtr iceP_v2;
    MPtr ret = this->opM(iceP_v1, iceP_v2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_v2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opF1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    F1Ptr iceP_f11;
    istr->read(iceP_f11);
    istr->readPendingValues();
    inS.endReadParams();
    F1Ptr iceP_f12;
    F1Ptr ret = this->opF1(iceP_f11, iceP_f12, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_f12);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opF2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    F2Prx iceP_f21;
    istr->read(iceP_f21);
    inS.endReadParams();
    F2Prx iceP_f22;
    F2Prx ret = this->opF2(iceP_f21, iceP_f22, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_f22);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opF3(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    F3Ptr iceP_f31;
    istr->read(iceP_f31);
    istr->readPendingValues();
    inS.endReadParams();
    F3Ptr iceP_f32;
    F3Ptr ret = this->opF3(iceP_f31, iceP_f32, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_f32);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_hasF3(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->hasF3(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Initial_all[] =
{
    "acceptsClassCycles",
    "getAMDMB",
    "getAll",
    "getB1",
    "getB2",
    "getC",
    "getCompact",
    "getD",
    "getD1",
    "getE",
    "getF",
    "getInnerA",
    "getInnerSubA",
    "getK",
    "getMB",
    "hasF3",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBaseSeq",
    "opF1",
    "opF2",
    "opF3",
    "opM",
    "opValue",
    "opValueMap",
    "opValueSeq",
    "setCycle",
    "setG",
    "setRecursive",
    "shutdown",
    "supportsClassGraphDepthMax",
    "throwEDerived",
    "throwInnerEx",
    "throwInnerSubEx"
};

}

/// \cond INTERNAL
bool
Test::Initial::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial_all, iceC_Test_Initial_all + 36, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial_all)
    {
        case 0:
        {
            return _iceD_acceptsClassCycles(in, current);
        }
        case 1:
        {
            return _iceD_getAMDMB(in, current);
        }
        case 2:
        {
            return _iceD_getAll(in, current);
        }
        case 3:
        {
            return _iceD_getB1(in, current);
        }
        case 4:
        {
            return _iceD_getB2(in, current);
        }
        case 5:
        {
            return _iceD_getC(in, current);
        }
        case 6:
        {
            return _iceD_getCompact(in, current);
        }
        case 7:
        {
            return _iceD_getD(in, current);
        }
        case 8:
        {
            return _iceD_getD1(in, current);
        }
        case 9:
        {
            return _iceD_getE(in, current);
        }
        case 10:
        {
            return _iceD_getF(in, current);
        }
        case 11:
        {
            return _iceD_getInnerA(in, current);
        }
        case 12:
        {
            return _iceD_getInnerSubA(in, current);
        }
        case 13:
        {
            return _iceD_getK(in, current);
        }
        case 14:
        {
            return _iceD_getMB(in, current);
        }
        case 15:
        {
            return _iceD_hasF3(in, current);
        }
        case 16:
        {
            return _iceD_ice_id(in, current);
        }
        case 17:
        {
            return _iceD_ice_ids(in, current);
        }
        case 18:
        {
            return _iceD_ice_isA(in, current);
        }
        case 19:
        {
            return _iceD_ice_ping(in, current);
        }
        case 20:
        {
            return _iceD_opBaseSeq(in, current);
        }
        case 21:
        {
            return _iceD_opF1(in, current);
        }
        case 22:
        {
            return _iceD_opF2(in, current);
        }
        case 23:
        {
            return _iceD_opF3(in, current);
        }
        case 24:
        {
            return _iceD_opM(in, current);
        }
        case 25:
        {
            return _iceD_opValue(in, current);
        }
        case 26:
        {
            return _iceD_opValueMap(in, current);
        }
        case 27:
        {
            return _iceD_opValueSeq(in, current);
        }
        case 28:
        {
            return _iceD_setCycle(in, current);
        }
        case 29:
        {
            return _iceD_setG(in, current);
        }
        case 30:
        {
            return _iceD_setRecursive(in, current);
        }
        case 31:
        {
            return _iceD_shutdown(in, current);
        }
        case 32:
        {
            return _iceD_supportsClassGraphDepthMax(in, current);
        }
        case 33:
        {
            return _iceD_throwEDerived(in, current);
        }
        case 34:
        {
            return _iceD_throwInnerEx(in, current);
        }
        case 35:
        {
            return _iceD_throwInnerSubEx(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::UnexpectedObjectExceptionTest::~UnexpectedObjectExceptionTest()
{
}

namespace
{
const ::std::string iceC_Test_UnexpectedObjectExceptionTest_ids[2] =
{
    "::Ice::Object",
    "::Test::UnexpectedObjectExceptionTest"
};

}

bool
Test::UnexpectedObjectExceptionTest::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_UnexpectedObjectExceptionTest_ids, iceC_Test_UnexpectedObjectExceptionTest_ids + 2, s);
}

::std::vector< ::std::string>
Test::UnexpectedObjectExceptionTest::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_UnexpectedObjectExceptionTest_ids[0], &iceC_Test_UnexpectedObjectExceptionTest_ids[2]);
}

::std::string
Test::UnexpectedObjectExceptionTest::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::UnexpectedObjectExceptionTest::ice_staticId()
{
    static const ::std::string typeId = "::Test::UnexpectedObjectExceptionTest";
    return typeId;
}

/// \cond INTERNAL
bool
Test::UnexpectedObjectExceptionTest::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    EmptyPtr ret = this->op(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_UnexpectedObjectExceptionTest_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};

}

/// \cond INTERNAL
bool
Test::UnexpectedObjectExceptionTest::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_UnexpectedObjectExceptionTest_all, iceC_Test_UnexpectedObjectExceptionTest_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_UnexpectedObjectExceptionTest_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::Base::~Base()
{
}

const ::std::string&
Test::Base::ice_staticId()
{
    static const ::std::string typeId = "::Test::Base";
    return typeId;
}

Test::A::~A()
{
}

const ::std::string&
Test::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

Test::B::~B()
{
}

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

Test::C::~C()
{
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

Test::D::~D()
{
}

const ::std::string&
Test::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

Test::E::~E()
{
}

const ::std::string&
Test::E::ice_staticId()
{
    static const ::std::string typeId = "::Test::E";
    return typeId;
}

Test::F::~F()
{
}

const ::std::string&
Test::F::ice_staticId()
{
    static const ::std::string typeId = "::Test::F";
    return typeId;
}

Test::G::~G()
{
}

const ::std::string&
Test::G::ice_staticId()
{
    static const ::std::string typeId = "::Test::G";
    return typeId;
}

Test::Compact::~Compact()
{
}

const ::std::string&
Test::Compact::ice_staticId()
{
    static const ::std::string typeId = "::Test::Compact";
    return typeId;
}

Test::CompactExt::~CompactExt()
{
}

const ::std::string&
Test::CompactExt::ice_staticId()
{
    static const ::std::string typeId = "::Test::CompactExt";
    return typeId;
}

Test::Inner::A::~A()
{
}

const ::std::string&
Test::Inner::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::A";
    return typeId;
}

Test::Inner::Sub::A::~A()
{
}

const ::std::string&
Test::Inner::Sub::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Sub::A";
    return typeId;
}

Test::A1::~A1()
{
}

const ::std::string&
Test::A1::ice_staticId()
{
    static const ::std::string typeId = "::Test::A1";
    return typeId;
}

Test::B1::~B1()
{
}

const ::std::string&
Test::B1::ice_staticId()
{
    static const ::std::string typeId = "::Test::B1";
    return typeId;
}

Test::D1::~D1()
{
}

const ::std::string&
Test::D1::ice_staticId()
{
    static const ::std::string typeId = "::Test::D1";
    return typeId;
}

Test::Recursive::~Recursive()
{
}

const ::std::string&
Test::Recursive::ice_staticId()
{
    static const ::std::string typeId = "::Test::Recursive";
    return typeId;
}

Test::K::~K()
{
}

const ::std::string&
Test::K::ice_staticId()
{
    static const ::std::string typeId = "::Test::K";
    return typeId;
}

Test::L::~L()
{
}

const ::std::string&
Test::L::ice_staticId()
{
    static const ::std::string typeId = "::Test::L";
    return typeId;
}

Test::M::~M()
{
}

const ::std::string&
Test::M::ice_staticId()
{
    static const ::std::string typeId = "::Test::M";
    return typeId;
}

Test::F3::~F3()
{
}

const ::std::string&
Test::F3::ice_staticId()
{
    static const ::std::string typeId = "::Test::F3";
    return typeId;
}

Test::Empty::~Empty()
{
}

const ::std::string&
Test::Empty::ice_staticId()
{
    static const ::std::string typeId = "::Test::Empty";
    return typeId;
}

Test::AlsoEmpty::~AlsoEmpty()
{
}

const ::std::string&
Test::AlsoEmpty::ice_staticId()
{
    static const ::std::string typeId = "::Test::AlsoEmpty";
    return typeId;
}

Test::IBase::~IBase()
{
}

const ::std::string&
Test::IBase::ice_staticId()
{
    static const ::std::string typeId = "::Test::IBase";
    return typeId;
}

Test::IDerived::~IDerived()
{
}

const ::std::string&
Test::IDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::IDerived";
    return typeId;
}

Test::IDerived2::~IDerived2()
{
}

const ::std::string&
Test::IDerived2::ice_staticId()
{
    static const ::std::string typeId = "::Test::IDerived2";
    return typeId;
}

Test::I2::~I2()
{
}

const ::std::string&
Test::I2::ice_staticId()
{
    static const ::std::string typeId = "::Test::I2";
    return typeId;
}

Test::COneMember::~COneMember()
{
}

const ::std::string&
Test::COneMember::ice_staticId()
{
    static const ::std::string typeId = "::Test::COneMember";
    return typeId;
}

Test::CTwoMembers::~CTwoMembers()
{
}

const ::std::string&
Test::CTwoMembers::ice_staticId()
{
    static const ::std::string typeId = "::Test::CTwoMembers";
    return typeId;
}

namespace Ice
{
}

#endif
