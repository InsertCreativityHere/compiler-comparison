//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <TestAMD.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::CV> iceC_Test_CV_init("::Test::CV");

const ::std::string iceC_Test_I_ids[2] =
{
    "::Ice::Object",
    "::Test::I"
};
const ::std::string iceC_Test_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

const ::IceInternal::DefaultValueFactoryInit<::Test::CR> iceC_Test_CR_init("::Test::CR");

const ::std::string iceC_Test_MyClass_ids[2] =
{
    "::Ice::Object",
    "::Test::MyClass"
};
const ::std::string iceC_Test_MyClass_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opABoolS",
    "opAByteS",
    "opACRS",
    "opACVS",
    "opADoubleS",
    "opAEnS",
    "opAFloatS",
    "opAIPrxS",
    "opAIntS",
    "opALongS",
    "opAObjectPrxS",
    "opAObjectS",
    "opAShortS",
    "opAStringS",
    "opAStructS",
    "opAStructSD",
    "opCustomCVS",
    "opCustomCVSS",
    "opCustomIntS",
    "opCustomIntSS",
    "opKBoolS",
    "opKByteS",
    "opKDoubleS",
    "opKEnS",
    "opKFloatS",
    "opKIPrxS",
    "opKIntS",
    "opKLongS",
    "opKObjectPrxS",
    "opKShortS",
    "opKStringS",
    "opKStructS",
    "opKStructSD",
    "opLBoolS",
    "opLByteS",
    "opLCRS",
    "opLCVS",
    "opLDoubleS",
    "opLEnS",
    "opLFloatS",
    "opLIPrxS",
    "opLIntS",
    "opLLongS",
    "opLObjectPrxS",
    "opLObjectS",
    "opLShortS",
    "opLStringS",
    "opLStructS",
    "opLStructSD",
    "opQBoolS",
    "opQByteS",
    "opQDoubleS",
    "opQEnS",
    "opQFloatS",
    "opQIPrxS",
    "opQIntS",
    "opQLongS",
    "opQObjectPrxS",
    "opQShortS",
    "opQStringS",
    "opQStructS",
    "opQStructSD",
    "opSBoolS",
    "opSByteS",
    "opSDoubleS",
    "opSEnS",
    "opSFloatS",
    "opSIPrxS",
    "opSIntS",
    "opSLongS",
    "opSObjectPrxS",
    "opSShortS",
    "opSStringS",
    "opSStructS",
    "opSStructSD",
    "shutdown"
};
const ::std::string iceC_Test_MyClass_shutdown_name = "shutdown";
const ::std::string iceC_Test_MyClass_opAByteS_name = "opAByteS";
const ::std::string iceC_Test_MyClass_opLByteS_name = "opLByteS";
const ::std::string iceC_Test_MyClass_opKByteS_name = "opKByteS";
const ::std::string iceC_Test_MyClass_opQByteS_name = "opQByteS";
const ::std::string iceC_Test_MyClass_opSByteS_name = "opSByteS";
const ::std::string iceC_Test_MyClass_opABoolS_name = "opABoolS";
const ::std::string iceC_Test_MyClass_opLBoolS_name = "opLBoolS";
const ::std::string iceC_Test_MyClass_opKBoolS_name = "opKBoolS";
const ::std::string iceC_Test_MyClass_opQBoolS_name = "opQBoolS";
const ::std::string iceC_Test_MyClass_opSBoolS_name = "opSBoolS";
const ::std::string iceC_Test_MyClass_opAShortS_name = "opAShortS";
const ::std::string iceC_Test_MyClass_opLShortS_name = "opLShortS";
const ::std::string iceC_Test_MyClass_opKShortS_name = "opKShortS";
const ::std::string iceC_Test_MyClass_opQShortS_name = "opQShortS";
const ::std::string iceC_Test_MyClass_opSShortS_name = "opSShortS";
const ::std::string iceC_Test_MyClass_opAIntS_name = "opAIntS";
const ::std::string iceC_Test_MyClass_opLIntS_name = "opLIntS";
const ::std::string iceC_Test_MyClass_opKIntS_name = "opKIntS";
const ::std::string iceC_Test_MyClass_opQIntS_name = "opQIntS";
const ::std::string iceC_Test_MyClass_opSIntS_name = "opSIntS";
const ::std::string iceC_Test_MyClass_opALongS_name = "opALongS";
const ::std::string iceC_Test_MyClass_opLLongS_name = "opLLongS";
const ::std::string iceC_Test_MyClass_opKLongS_name = "opKLongS";
const ::std::string iceC_Test_MyClass_opQLongS_name = "opQLongS";
const ::std::string iceC_Test_MyClass_opSLongS_name = "opSLongS";
const ::std::string iceC_Test_MyClass_opAFloatS_name = "opAFloatS";
const ::std::string iceC_Test_MyClass_opLFloatS_name = "opLFloatS";
const ::std::string iceC_Test_MyClass_opKFloatS_name = "opKFloatS";
const ::std::string iceC_Test_MyClass_opQFloatS_name = "opQFloatS";
const ::std::string iceC_Test_MyClass_opSFloatS_name = "opSFloatS";
const ::std::string iceC_Test_MyClass_opADoubleS_name = "opADoubleS";
const ::std::string iceC_Test_MyClass_opLDoubleS_name = "opLDoubleS";
const ::std::string iceC_Test_MyClass_opKDoubleS_name = "opKDoubleS";
const ::std::string iceC_Test_MyClass_opQDoubleS_name = "opQDoubleS";
const ::std::string iceC_Test_MyClass_opSDoubleS_name = "opSDoubleS";
const ::std::string iceC_Test_MyClass_opAStringS_name = "opAStringS";
const ::std::string iceC_Test_MyClass_opLStringS_name = "opLStringS";
const ::std::string iceC_Test_MyClass_opKStringS_name = "opKStringS";
const ::std::string iceC_Test_MyClass_opQStringS_name = "opQStringS";
const ::std::string iceC_Test_MyClass_opSStringS_name = "opSStringS";
const ::std::string iceC_Test_MyClass_opAObjectS_name = "opAObjectS";
const ::std::string iceC_Test_MyClass_opLObjectS_name = "opLObjectS";
const ::std::string iceC_Test_MyClass_opAObjectPrxS_name = "opAObjectPrxS";
const ::std::string iceC_Test_MyClass_opLObjectPrxS_name = "opLObjectPrxS";
const ::std::string iceC_Test_MyClass_opKObjectPrxS_name = "opKObjectPrxS";
const ::std::string iceC_Test_MyClass_opQObjectPrxS_name = "opQObjectPrxS";
const ::std::string iceC_Test_MyClass_opSObjectPrxS_name = "opSObjectPrxS";
const ::std::string iceC_Test_MyClass_opAStructS_name = "opAStructS";
const ::std::string iceC_Test_MyClass_opLStructS_name = "opLStructS";
const ::std::string iceC_Test_MyClass_opKStructS_name = "opKStructS";
const ::std::string iceC_Test_MyClass_opQStructS_name = "opQStructS";
const ::std::string iceC_Test_MyClass_opSStructS_name = "opSStructS";
const ::std::string iceC_Test_MyClass_opAStructSD_name = "opAStructSD";
const ::std::string iceC_Test_MyClass_opLStructSD_name = "opLStructSD";
const ::std::string iceC_Test_MyClass_opKStructSD_name = "opKStructSD";
const ::std::string iceC_Test_MyClass_opQStructSD_name = "opQStructSD";
const ::std::string iceC_Test_MyClass_opSStructSD_name = "opSStructSD";
const ::std::string iceC_Test_MyClass_opACVS_name = "opACVS";
const ::std::string iceC_Test_MyClass_opLCVS_name = "opLCVS";
const ::std::string iceC_Test_MyClass_opACRS_name = "opACRS";
const ::std::string iceC_Test_MyClass_opLCRS_name = "opLCRS";
const ::std::string iceC_Test_MyClass_opAEnS_name = "opAEnS";
const ::std::string iceC_Test_MyClass_opLEnS_name = "opLEnS";
const ::std::string iceC_Test_MyClass_opKEnS_name = "opKEnS";
const ::std::string iceC_Test_MyClass_opQEnS_name = "opQEnS";
const ::std::string iceC_Test_MyClass_opSEnS_name = "opSEnS";
const ::std::string iceC_Test_MyClass_opAIPrxS_name = "opAIPrxS";
const ::std::string iceC_Test_MyClass_opLIPrxS_name = "opLIPrxS";
const ::std::string iceC_Test_MyClass_opKIPrxS_name = "opKIPrxS";
const ::std::string iceC_Test_MyClass_opQIPrxS_name = "opQIPrxS";
const ::std::string iceC_Test_MyClass_opSIPrxS_name = "opSIPrxS";
const ::std::string iceC_Test_MyClass_opCustomIntS_name = "opCustomIntS";
const ::std::string iceC_Test_MyClass_opCustomCVS_name = "opCustomCVS";
const ::std::string iceC_Test_MyClass_opCustomIntSS_name = "opCustomIntSS";
const ::std::string iceC_Test_MyClass_opCustomCVSS_name = "opCustomCVSS";

}

bool
Test::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_I_ids, iceC_Test_I_ids + 2, s);
}

::std::vector<::std::string>
Test::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_I_ids[0], &iceC_Test_I_ids[2]);
}

::std::string
Test::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::I";
    return typeId;
}

bool
Test::MyClass::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyClass_ids, iceC_Test_MyClass_ids + 2, s);
}

::std::vector<::std::string>
Test::MyClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MyClass_ids[0], &iceC_Test_MyClass_ids[2]);
}

::std::string
Test::MyClass::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyClass";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->shutdownAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opAByteS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    AByteS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const AByteS& ret, const AByteS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opAByteSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLByteS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LByteS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LByteS& ret, const LByteS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLByteSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opKByteS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    KByteS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const KByteS& ret, const KByteS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opKByteSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opQByteS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    QByteS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const QByteS& ret, const QByteS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opQByteSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opSByteS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SByteS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const SByteS& ret, const SByteS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSByteSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opABoolS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ABoolS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ABoolS& ret, const ABoolS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opABoolSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLBoolS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LBoolS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LBoolS& ret, const LBoolS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLBoolSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opKBoolS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    KBoolS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const KBoolS& ret, const KBoolS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opKBoolSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opQBoolS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    QBoolS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const QBoolS& ret, const QBoolS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opQBoolSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opSBoolS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SBoolS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const SBoolS& ret, const SBoolS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSBoolSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opAShortS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    AShortS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const AShortS& ret, const AShortS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opAShortSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLShortS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LShortS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LShortS& ret, const LShortS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLShortSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opKShortS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    KShortS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const KShortS& ret, const KShortS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opKShortSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opQShortS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    QShortS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const QShortS& ret, const QShortS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opQShortSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opSShortS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SShortS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const SShortS& ret, const SShortS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSShortSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opAIntS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    AIntS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const AIntS& ret, const AIntS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opAIntSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLIntS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LIntS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LIntS& ret, const LIntS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLIntSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opKIntS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    KIntS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const KIntS& ret, const KIntS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opKIntSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opQIntS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    QIntS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const QIntS& ret, const QIntS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opQIntSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opSIntS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SIntS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const SIntS& ret, const SIntS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSIntSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opALongS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ALongS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ALongS& ret, const ALongS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opALongSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLLongS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LLongS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LLongS& ret, const LLongS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLLongSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opKLongS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    KLongS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const KLongS& ret, const KLongS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opKLongSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opQLongS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    QLongS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const QLongS& ret, const QLongS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opQLongSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opSLongS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SLongS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const SLongS& ret, const SLongS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSLongSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opAFloatS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    AFloatS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const AFloatS& ret, const AFloatS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opAFloatSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLFloatS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LFloatS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LFloatS& ret, const LFloatS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLFloatSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opKFloatS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    KFloatS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const KFloatS& ret, const KFloatS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opKFloatSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opQFloatS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    QFloatS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const QFloatS& ret, const QFloatS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opQFloatSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opSFloatS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SFloatS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const SFloatS& ret, const SFloatS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSFloatSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opADoubleS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ADoubleS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ADoubleS& ret, const ADoubleS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opADoubleSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLDoubleS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LDoubleS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LDoubleS& ret, const LDoubleS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLDoubleSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opKDoubleS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    KDoubleS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const KDoubleS& ret, const KDoubleS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opKDoubleSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opQDoubleS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    QDoubleS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const QDoubleS& ret, const QDoubleS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opQDoubleSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opSDoubleS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SDoubleS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const SDoubleS& ret, const SDoubleS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSDoubleSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opAStringS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    AStringS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const AStringS& ret, const AStringS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opAStringSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLStringS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LStringS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LStringS& ret, const LStringS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLStringSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opKStringS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    KStringS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const KStringS& ret, const KStringS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opKStringSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opQStringS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    QStringS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const QStringS& ret, const QStringS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opQStringSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opSStringS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SStringS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const SStringS& ret, const SStringS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSStringSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opAObjectS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    AObjectS iceP_i;
    istr->readAll(iceP_i);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const AObjectS& ret, const AObjectS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        ostr->writePendingValues();
        inA->endWriteParams();
        inA->completed();
    };
    this->opAObjectSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLObjectS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LObjectS iceP_i;
    istr->readAll(iceP_i);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LObjectS& ret, const LObjectS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        ostr->writePendingValues();
        inA->endWriteParams();
        inA->completed();
    };
    this->opLObjectSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opAObjectPrxS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    AObjectPrxS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const AObjectPrxS& ret, const AObjectPrxS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opAObjectPrxSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLObjectPrxS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LObjectPrxS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LObjectPrxS& ret, const LObjectPrxS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLObjectPrxSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opKObjectPrxS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    KObjectPrxS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const KObjectPrxS& ret, const KObjectPrxS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opKObjectPrxSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opQObjectPrxS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    QObjectPrxS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const QObjectPrxS& ret, const QObjectPrxS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opQObjectPrxSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opSObjectPrxS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SObjectPrxS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const SObjectPrxS& ret, const SObjectPrxS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSObjectPrxSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opAStructS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    AStructS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const AStructS& ret, const AStructS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opAStructSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLStructS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LStructS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LStructS& ret, const LStructS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLStructSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opKStructS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    KStructS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const KStructS& ret, const KStructS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opKStructSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opQStructS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    QStructS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const QStructS& ret, const QStructS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opQStructSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opSStructS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SStructS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const SStructS& ret, const SStructS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSStructSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opAStructSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    AStructSD iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const AStructSD& ret, const AStructSD& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opAStructSDAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLStructSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LStructSD iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LStructSD& ret, const LStructSD& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLStructSDAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opKStructSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    KStructSD iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const KStructSD& ret, const KStructSD& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opKStructSDAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opQStructSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    QStructSD iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const QStructSD& ret, const QStructSD& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opQStructSDAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opSStructSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SStructSD iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const SStructSD& ret, const SStructSD& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSStructSDAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opACVS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ACVS iceP_i;
    istr->readAll(iceP_i);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ACVS& ret, const ACVS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        ostr->writePendingValues();
        inA->endWriteParams();
        inA->completed();
    };
    this->opACVSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLCVS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LCVS iceP_i;
    istr->readAll(iceP_i);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LCVS& ret, const LCVS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        ostr->writePendingValues();
        inA->endWriteParams();
        inA->completed();
    };
    this->opLCVSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opACRS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ACRS iceP_i;
    istr->readAll(iceP_i);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ACRS& ret, const ACRS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        ostr->writePendingValues();
        inA->endWriteParams();
        inA->completed();
    };
    this->opACRSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLCRS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LCRS iceP_i;
    istr->readAll(iceP_i);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LCRS& ret, const LCRS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        ostr->writePendingValues();
        inA->endWriteParams();
        inA->completed();
    };
    this->opLCRSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opAEnS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    AEnS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const AEnS& ret, const AEnS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opAEnSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLEnS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LEnS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LEnS& ret, const LEnS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLEnSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opKEnS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    KEnS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const KEnS& ret, const KEnS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opKEnSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opQEnS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    QEnS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const QEnS& ret, const QEnS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opQEnSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opSEnS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SEnS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const SEnS& ret, const SEnS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSEnSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opAIPrxS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    AIPrxS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const AIPrxS& ret, const AIPrxS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opAIPrxSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLIPrxS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LIPrxS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const LIPrxS& ret, const LIPrxS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLIPrxSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opKIPrxS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    KIPrxS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const KIPrxS& ret, const KIPrxS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opKIPrxSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opQIPrxS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    QIPrxS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const QIPrxS& ret, const QIPrxS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opQIPrxSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opSIPrxS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SIPrxS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const SIPrxS& ret, const SIPrxS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSIPrxSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opCustomIntS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CustomIntS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const CustomIntS& ret, const CustomIntS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opCustomIntSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opCustomCVS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CustomCVS iceP_i;
    istr->readAll(iceP_i);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const CustomCVS& ret, const CustomCVS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        ostr->writePendingValues();
        inA->endWriteParams();
        inA->completed();
    };
    this->opCustomCVSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opCustomIntSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CustomIntSS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const CustomIntSS& ret, const CustomIntSS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opCustomIntSSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opCustomCVSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CustomCVSS iceP_i;
    istr->readAll(iceP_i);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const CustomCVSS& ret, const CustomCVSS& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_o, ret);
        ostr->writePendingValues();
        inA->endWriteParams();
        inA->completed();
    };
    this->opCustomCVSSAsync(::std::move(iceP_i), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MyClass_ops, iceC_Test_MyClass_ops + 80, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MyClass_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opABoolS(in, current);
        }
        case 5:
        {
            return _iceD_opAByteS(in, current);
        }
        case 6:
        {
            return _iceD_opACRS(in, current);
        }
        case 7:
        {
            return _iceD_opACVS(in, current);
        }
        case 8:
        {
            return _iceD_opADoubleS(in, current);
        }
        case 9:
        {
            return _iceD_opAEnS(in, current);
        }
        case 10:
        {
            return _iceD_opAFloatS(in, current);
        }
        case 11:
        {
            return _iceD_opAIPrxS(in, current);
        }
        case 12:
        {
            return _iceD_opAIntS(in, current);
        }
        case 13:
        {
            return _iceD_opALongS(in, current);
        }
        case 14:
        {
            return _iceD_opAObjectPrxS(in, current);
        }
        case 15:
        {
            return _iceD_opAObjectS(in, current);
        }
        case 16:
        {
            return _iceD_opAShortS(in, current);
        }
        case 17:
        {
            return _iceD_opAStringS(in, current);
        }
        case 18:
        {
            return _iceD_opAStructS(in, current);
        }
        case 19:
        {
            return _iceD_opAStructSD(in, current);
        }
        case 20:
        {
            return _iceD_opCustomCVS(in, current);
        }
        case 21:
        {
            return _iceD_opCustomCVSS(in, current);
        }
        case 22:
        {
            return _iceD_opCustomIntS(in, current);
        }
        case 23:
        {
            return _iceD_opCustomIntSS(in, current);
        }
        case 24:
        {
            return _iceD_opKBoolS(in, current);
        }
        case 25:
        {
            return _iceD_opKByteS(in, current);
        }
        case 26:
        {
            return _iceD_opKDoubleS(in, current);
        }
        case 27:
        {
            return _iceD_opKEnS(in, current);
        }
        case 28:
        {
            return _iceD_opKFloatS(in, current);
        }
        case 29:
        {
            return _iceD_opKIPrxS(in, current);
        }
        case 30:
        {
            return _iceD_opKIntS(in, current);
        }
        case 31:
        {
            return _iceD_opKLongS(in, current);
        }
        case 32:
        {
            return _iceD_opKObjectPrxS(in, current);
        }
        case 33:
        {
            return _iceD_opKShortS(in, current);
        }
        case 34:
        {
            return _iceD_opKStringS(in, current);
        }
        case 35:
        {
            return _iceD_opKStructS(in, current);
        }
        case 36:
        {
            return _iceD_opKStructSD(in, current);
        }
        case 37:
        {
            return _iceD_opLBoolS(in, current);
        }
        case 38:
        {
            return _iceD_opLByteS(in, current);
        }
        case 39:
        {
            return _iceD_opLCRS(in, current);
        }
        case 40:
        {
            return _iceD_opLCVS(in, current);
        }
        case 41:
        {
            return _iceD_opLDoubleS(in, current);
        }
        case 42:
        {
            return _iceD_opLEnS(in, current);
        }
        case 43:
        {
            return _iceD_opLFloatS(in, current);
        }
        case 44:
        {
            return _iceD_opLIPrxS(in, current);
        }
        case 45:
        {
            return _iceD_opLIntS(in, current);
        }
        case 46:
        {
            return _iceD_opLLongS(in, current);
        }
        case 47:
        {
            return _iceD_opLObjectPrxS(in, current);
        }
        case 48:
        {
            return _iceD_opLObjectS(in, current);
        }
        case 49:
        {
            return _iceD_opLShortS(in, current);
        }
        case 50:
        {
            return _iceD_opLStringS(in, current);
        }
        case 51:
        {
            return _iceD_opLStructS(in, current);
        }
        case 52:
        {
            return _iceD_opLStructSD(in, current);
        }
        case 53:
        {
            return _iceD_opQBoolS(in, current);
        }
        case 54:
        {
            return _iceD_opQByteS(in, current);
        }
        case 55:
        {
            return _iceD_opQDoubleS(in, current);
        }
        case 56:
        {
            return _iceD_opQEnS(in, current);
        }
        case 57:
        {
            return _iceD_opQFloatS(in, current);
        }
        case 58:
        {
            return _iceD_opQIPrxS(in, current);
        }
        case 59:
        {
            return _iceD_opQIntS(in, current);
        }
        case 60:
        {
            return _iceD_opQLongS(in, current);
        }
        case 61:
        {
            return _iceD_opQObjectPrxS(in, current);
        }
        case 62:
        {
            return _iceD_opQShortS(in, current);
        }
        case 63:
        {
            return _iceD_opQStringS(in, current);
        }
        case 64:
        {
            return _iceD_opQStructS(in, current);
        }
        case 65:
        {
            return _iceD_opQStructSD(in, current);
        }
        case 66:
        {
            return _iceD_opSBoolS(in, current);
        }
        case 67:
        {
            return _iceD_opSByteS(in, current);
        }
        case 68:
        {
            return _iceD_opSDoubleS(in, current);
        }
        case 69:
        {
            return _iceD_opSEnS(in, current);
        }
        case 70:
        {
            return _iceD_opSFloatS(in, current);
        }
        case 71:
        {
            return _iceD_opSIPrxS(in, current);
        }
        case 72:
        {
            return _iceD_opSIntS(in, current);
        }
        case 73:
        {
            return _iceD_opSLongS(in, current);
        }
        case 74:
        {
            return _iceD_opSObjectPrxS(in, current);
        }
        case 75:
        {
            return _iceD_opSShortS(in, current);
        }
        case 76:
        {
            return _iceD_opSStringS(in, current);
        }
        case 77:
        {
            return _iceD_opSStructS(in, current);
        }
        case 78:
        {
            return _iceD_opSStructSD(in, current);
        }
        case 79:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::CV::~CV()
{
}

const ::std::string&
Test::CV::ice_staticId()
{
    static const ::std::string typeId = "::Test::CV";
    return typeId;
}

Test::CR::~CR()
{
}

const ::std::string&
Test::CR::ice_staticId()
{
    static const ::std::string typeId = "::Test::CR";
    return typeId;
}

const ::std::string&
Test::IPrx::ice_staticId()
{
    return I::ice_staticId();
}

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyClass_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opAByteS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpAByteSResult>>& outAsync, const AByteS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opAByteS_name);
    outAsync->invoke(iceC_Test_MyClass_opAByteS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpAByteSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLByteS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLByteSResult>>& outAsync, const LByteS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLByteS_name);
    outAsync->invoke(iceC_Test_MyClass_opLByteS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLByteSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opKByteS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpKByteSResult>>& outAsync, const KByteS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opKByteS_name);
    outAsync->invoke(iceC_Test_MyClass_opKByteS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpKByteSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opQByteS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpQByteSResult>>& outAsync, const QByteS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opQByteS_name);
    outAsync->invoke(iceC_Test_MyClass_opQByteS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpQByteSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opSByteS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSByteSResult>>& outAsync, const SByteS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opSByteS_name);
    outAsync->invoke(iceC_Test_MyClass_opSByteS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpSByteSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opABoolS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpABoolSResult>>& outAsync, const ABoolS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opABoolS_name);
    outAsync->invoke(iceC_Test_MyClass_opABoolS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpABoolSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLBoolS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLBoolSResult>>& outAsync, const LBoolS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLBoolS_name);
    outAsync->invoke(iceC_Test_MyClass_opLBoolS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLBoolSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opKBoolS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpKBoolSResult>>& outAsync, const KBoolS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opKBoolS_name);
    outAsync->invoke(iceC_Test_MyClass_opKBoolS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpKBoolSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opQBoolS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpQBoolSResult>>& outAsync, const QBoolS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opQBoolS_name);
    outAsync->invoke(iceC_Test_MyClass_opQBoolS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpQBoolSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opSBoolS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSBoolSResult>>& outAsync, const SBoolS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opSBoolS_name);
    outAsync->invoke(iceC_Test_MyClass_opSBoolS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpSBoolSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opAShortS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpAShortSResult>>& outAsync, const AShortS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opAShortS_name);
    outAsync->invoke(iceC_Test_MyClass_opAShortS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpAShortSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLShortS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLShortSResult>>& outAsync, const LShortS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLShortS_name);
    outAsync->invoke(iceC_Test_MyClass_opLShortS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLShortSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opKShortS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpKShortSResult>>& outAsync, const KShortS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opKShortS_name);
    outAsync->invoke(iceC_Test_MyClass_opKShortS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpKShortSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opQShortS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpQShortSResult>>& outAsync, const QShortS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opQShortS_name);
    outAsync->invoke(iceC_Test_MyClass_opQShortS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpQShortSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opSShortS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSShortSResult>>& outAsync, const SShortS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opSShortS_name);
    outAsync->invoke(iceC_Test_MyClass_opSShortS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpSShortSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opAIntS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpAIntSResult>>& outAsync, const AIntS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opAIntS_name);
    outAsync->invoke(iceC_Test_MyClass_opAIntS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpAIntSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLIntS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLIntSResult>>& outAsync, const LIntS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLIntS_name);
    outAsync->invoke(iceC_Test_MyClass_opLIntS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLIntSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opKIntS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpKIntSResult>>& outAsync, const KIntS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opKIntS_name);
    outAsync->invoke(iceC_Test_MyClass_opKIntS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpKIntSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opQIntS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpQIntSResult>>& outAsync, const QIntS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opQIntS_name);
    outAsync->invoke(iceC_Test_MyClass_opQIntS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpQIntSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opSIntS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSIntSResult>>& outAsync, const SIntS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opSIntS_name);
    outAsync->invoke(iceC_Test_MyClass_opSIntS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpSIntSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opALongS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpALongSResult>>& outAsync, const ALongS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opALongS_name);
    outAsync->invoke(iceC_Test_MyClass_opALongS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpALongSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLLongS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLLongSResult>>& outAsync, const LLongS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLLongS_name);
    outAsync->invoke(iceC_Test_MyClass_opLLongS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLLongSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opKLongS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpKLongSResult>>& outAsync, const KLongS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opKLongS_name);
    outAsync->invoke(iceC_Test_MyClass_opKLongS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpKLongSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opQLongS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpQLongSResult>>& outAsync, const QLongS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opQLongS_name);
    outAsync->invoke(iceC_Test_MyClass_opQLongS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpQLongSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opSLongS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSLongSResult>>& outAsync, const SLongS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opSLongS_name);
    outAsync->invoke(iceC_Test_MyClass_opSLongS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpSLongSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opAFloatS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpAFloatSResult>>& outAsync, const AFloatS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opAFloatS_name);
    outAsync->invoke(iceC_Test_MyClass_opAFloatS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpAFloatSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLFloatS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLFloatSResult>>& outAsync, const LFloatS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLFloatS_name);
    outAsync->invoke(iceC_Test_MyClass_opLFloatS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLFloatSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opKFloatS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpKFloatSResult>>& outAsync, const KFloatS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opKFloatS_name);
    outAsync->invoke(iceC_Test_MyClass_opKFloatS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpKFloatSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opQFloatS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpQFloatSResult>>& outAsync, const QFloatS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opQFloatS_name);
    outAsync->invoke(iceC_Test_MyClass_opQFloatS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpQFloatSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opSFloatS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSFloatSResult>>& outAsync, const SFloatS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opSFloatS_name);
    outAsync->invoke(iceC_Test_MyClass_opSFloatS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpSFloatSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opADoubleS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpADoubleSResult>>& outAsync, const ADoubleS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opADoubleS_name);
    outAsync->invoke(iceC_Test_MyClass_opADoubleS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpADoubleSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLDoubleS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLDoubleSResult>>& outAsync, const LDoubleS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLDoubleS_name);
    outAsync->invoke(iceC_Test_MyClass_opLDoubleS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLDoubleSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opKDoubleS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpKDoubleSResult>>& outAsync, const KDoubleS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opKDoubleS_name);
    outAsync->invoke(iceC_Test_MyClass_opKDoubleS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpKDoubleSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opQDoubleS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpQDoubleSResult>>& outAsync, const QDoubleS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opQDoubleS_name);
    outAsync->invoke(iceC_Test_MyClass_opQDoubleS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpQDoubleSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opSDoubleS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSDoubleSResult>>& outAsync, const SDoubleS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opSDoubleS_name);
    outAsync->invoke(iceC_Test_MyClass_opSDoubleS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpSDoubleSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opAStringS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpAStringSResult>>& outAsync, const AStringS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opAStringS_name);
    outAsync->invoke(iceC_Test_MyClass_opAStringS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpAStringSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLStringS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLStringSResult>>& outAsync, const LStringS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLStringS_name);
    outAsync->invoke(iceC_Test_MyClass_opLStringS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLStringSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opKStringS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpKStringSResult>>& outAsync, const KStringS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opKStringS_name);
    outAsync->invoke(iceC_Test_MyClass_opKStringS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpKStringSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opQStringS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpQStringSResult>>& outAsync, const QStringS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opQStringS_name);
    outAsync->invoke(iceC_Test_MyClass_opQStringS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpQStringSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opSStringS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSStringSResult>>& outAsync, const SStringS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opSStringS_name);
    outAsync->invoke(iceC_Test_MyClass_opSStringS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpSStringSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opAObjectS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpAObjectSResult>>& outAsync, const AObjectS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opAObjectS_name);
    outAsync->invoke(iceC_Test_MyClass_opAObjectS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpAObjectSResult v;
            istr->readAll(v.o, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLObjectS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLObjectSResult>>& outAsync, const LObjectS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLObjectS_name);
    outAsync->invoke(iceC_Test_MyClass_opLObjectS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLObjectSResult v;
            istr->readAll(v.o, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opAObjectPrxS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpAObjectPrxSResult>>& outAsync, const AObjectPrxS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opAObjectPrxS_name);
    outAsync->invoke(iceC_Test_MyClass_opAObjectPrxS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpAObjectPrxSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLObjectPrxS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLObjectPrxSResult>>& outAsync, const LObjectPrxS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLObjectPrxS_name);
    outAsync->invoke(iceC_Test_MyClass_opLObjectPrxS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLObjectPrxSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opKObjectPrxS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpKObjectPrxSResult>>& outAsync, const KObjectPrxS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opKObjectPrxS_name);
    outAsync->invoke(iceC_Test_MyClass_opKObjectPrxS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpKObjectPrxSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opQObjectPrxS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpQObjectPrxSResult>>& outAsync, const QObjectPrxS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opQObjectPrxS_name);
    outAsync->invoke(iceC_Test_MyClass_opQObjectPrxS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpQObjectPrxSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opSObjectPrxS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSObjectPrxSResult>>& outAsync, const SObjectPrxS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opSObjectPrxS_name);
    outAsync->invoke(iceC_Test_MyClass_opSObjectPrxS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpSObjectPrxSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opAStructS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpAStructSResult>>& outAsync, const AStructS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opAStructS_name);
    outAsync->invoke(iceC_Test_MyClass_opAStructS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpAStructSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLStructS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLStructSResult>>& outAsync, const LStructS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLStructS_name);
    outAsync->invoke(iceC_Test_MyClass_opLStructS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLStructSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opKStructS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpKStructSResult>>& outAsync, const KStructS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opKStructS_name);
    outAsync->invoke(iceC_Test_MyClass_opKStructS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpKStructSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opQStructS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpQStructSResult>>& outAsync, const QStructS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opQStructS_name);
    outAsync->invoke(iceC_Test_MyClass_opQStructS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpQStructSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opSStructS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSStructSResult>>& outAsync, const SStructS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opSStructS_name);
    outAsync->invoke(iceC_Test_MyClass_opSStructS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpSStructSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opAStructSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpAStructSDResult>>& outAsync, const AStructSD& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opAStructSD_name);
    outAsync->invoke(iceC_Test_MyClass_opAStructSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpAStructSDResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLStructSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLStructSDResult>>& outAsync, const LStructSD& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLStructSD_name);
    outAsync->invoke(iceC_Test_MyClass_opLStructSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLStructSDResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opKStructSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpKStructSDResult>>& outAsync, const KStructSD& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opKStructSD_name);
    outAsync->invoke(iceC_Test_MyClass_opKStructSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpKStructSDResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opQStructSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpQStructSDResult>>& outAsync, const QStructSD& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opQStructSD_name);
    outAsync->invoke(iceC_Test_MyClass_opQStructSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpQStructSDResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opSStructSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSStructSDResult>>& outAsync, const SStructSD& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opSStructSD_name);
    outAsync->invoke(iceC_Test_MyClass_opSStructSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpSStructSDResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opACVS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpACVSResult>>& outAsync, const ACVS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opACVS_name);
    outAsync->invoke(iceC_Test_MyClass_opACVS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpACVSResult v;
            istr->readAll(v.o, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLCVS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLCVSResult>>& outAsync, const LCVS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLCVS_name);
    outAsync->invoke(iceC_Test_MyClass_opLCVS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLCVSResult v;
            istr->readAll(v.o, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opACRS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpACRSResult>>& outAsync, const ACRS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opACRS_name);
    outAsync->invoke(iceC_Test_MyClass_opACRS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpACRSResult v;
            istr->readAll(v.o, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLCRS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLCRSResult>>& outAsync, const LCRS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLCRS_name);
    outAsync->invoke(iceC_Test_MyClass_opLCRS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLCRSResult v;
            istr->readAll(v.o, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opAEnS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpAEnSResult>>& outAsync, const AEnS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opAEnS_name);
    outAsync->invoke(iceC_Test_MyClass_opAEnS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpAEnSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLEnS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLEnSResult>>& outAsync, const LEnS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLEnS_name);
    outAsync->invoke(iceC_Test_MyClass_opLEnS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLEnSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opKEnS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpKEnSResult>>& outAsync, const KEnS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opKEnS_name);
    outAsync->invoke(iceC_Test_MyClass_opKEnS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpKEnSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opQEnS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpQEnSResult>>& outAsync, const QEnS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opQEnS_name);
    outAsync->invoke(iceC_Test_MyClass_opQEnS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpQEnSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opSEnS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSEnSResult>>& outAsync, const SEnS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opSEnS_name);
    outAsync->invoke(iceC_Test_MyClass_opSEnS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpSEnSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opAIPrxS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpAIPrxSResult>>& outAsync, const AIPrxS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opAIPrxS_name);
    outAsync->invoke(iceC_Test_MyClass_opAIPrxS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpAIPrxSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLIPrxS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLIPrxSResult>>& outAsync, const LIPrxS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLIPrxS_name);
    outAsync->invoke(iceC_Test_MyClass_opLIPrxS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLIPrxSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opKIPrxS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpKIPrxSResult>>& outAsync, const KIPrxS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opKIPrxS_name);
    outAsync->invoke(iceC_Test_MyClass_opKIPrxS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpKIPrxSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opQIPrxS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpQIPrxSResult>>& outAsync, const QIPrxS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opQIPrxS_name);
    outAsync->invoke(iceC_Test_MyClass_opQIPrxS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpQIPrxSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opSIPrxS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSIPrxSResult>>& outAsync, const SIPrxS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opSIPrxS_name);
    outAsync->invoke(iceC_Test_MyClass_opSIPrxS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpSIPrxSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opCustomIntS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpCustomIntSResult>>& outAsync, const CustomIntS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opCustomIntS_name);
    outAsync->invoke(iceC_Test_MyClass_opCustomIntS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpCustomIntSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opCustomCVS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpCustomCVSResult>>& outAsync, const CustomCVS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opCustomCVS_name);
    outAsync->invoke(iceC_Test_MyClass_opCustomCVS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpCustomCVSResult v;
            istr->readAll(v.o, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opCustomIntSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpCustomIntSSResult>>& outAsync, const CustomIntSS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opCustomIntSS_name);
    outAsync->invoke(iceC_Test_MyClass_opCustomIntSS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpCustomIntSSResult v;
            istr->readAll(v.o, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opCustomCVSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpCustomCVSSResult>>& outAsync, const CustomCVSS& iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opCustomCVSS_name);
    outAsync->invoke(iceC_Test_MyClass_opCustomCVSS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpCustomCVSSResult v;
            istr->readAll(v.o, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

const ::std::string&
Test::MyClassPrx::ice_staticId()
{
    return MyClass::ice_staticId();
}

namespace Ice
{
}
