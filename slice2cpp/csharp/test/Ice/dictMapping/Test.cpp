//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_Test_MyClass_ids[2] =
{
    "::Ice::Object",
    "::Test::MyClass"
};
const ::std::string iceC_Test_MyClass_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opNDAIS",
    "opNDASS",
    "opNDGIS",
    "opNDGSS",
    "opNDR",
    "opNDV",
    "opNR",
    "opNV",
    "shutdown"
};
const ::std::string iceC_Test_MyClass_shutdown_name = "shutdown";
const ::std::string iceC_Test_MyClass_opNV_name = "opNV";
const ::std::string iceC_Test_MyClass_opNR_name = "opNR";
const ::std::string iceC_Test_MyClass_opNDV_name = "opNDV";
const ::std::string iceC_Test_MyClass_opNDR_name = "opNDR";
const ::std::string iceC_Test_MyClass_opNDAIS_name = "opNDAIS";
const ::std::string iceC_Test_MyClass_opNDGIS_name = "opNDGIS";
const ::std::string iceC_Test_MyClass_opNDASS_name = "opNDASS";
const ::std::string iceC_Test_MyClass_opNDGSS_name = "opNDGSS";

}

void
Test::MyClassPrx::shutdown(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &MyClassPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::MyClassPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &MyClassPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::MyClassPrx::shutdownAsync(::std::function<void ()> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_MyClass_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::Test::NV
Test::MyClassPrx::opNV(const NV& iceP_i, NV& iceP_o, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<NV, NV>>(true, this, &MyClassPrx::_iceI_opNV, iceP_i, context).get();
    iceP_o = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::NV, ::Test::NV>>
Test::MyClassPrx::opNVAsync(const NV& iceP_i, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<NV, NV>, ::std::promise>(false, this, &MyClassPrx::_iceI_opNV, iceP_i, context);
}

::std::function<void()>
Test::MyClassPrx::opNVAsync(const NV& iceP_i,
                            ::std::function<void (::Test::NV, ::Test::NV)> response,
                            ::std::function<void(::std::exception_ptr)> ex,
                            ::std::function<void(bool)> sent,
                            const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<NV, NV>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<NV, NV>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNV, iceP_i, context);
}

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opNV(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<NV, NV>>>& outAsync, const NV& iceP_i, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyClass_opNV_name);
    outAsync->invoke(iceC_Test_MyClass_opNV_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<NV, NV> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::NR
Test::MyClassPrx::opNR(const NR& iceP_i, NR& iceP_o, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<NR, NR>>(true, this, &MyClassPrx::_iceI_opNR, iceP_i, context).get();
    iceP_o = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::NR, ::Test::NR>>
Test::MyClassPrx::opNRAsync(const NR& iceP_i, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<NR, NR>, ::std::promise>(false, this, &MyClassPrx::_iceI_opNR, iceP_i, context);
}

::std::function<void()>
Test::MyClassPrx::opNRAsync(const NR& iceP_i,
                            ::std::function<void (::Test::NR, ::Test::NR)> response,
                            ::std::function<void(::std::exception_ptr)> ex,
                            ::std::function<void(bool)> sent,
                            const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<NR, NR>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<NR, NR>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNR, iceP_i, context);
}

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opNR(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<NR, NR>>>& outAsync, const NR& iceP_i, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyClass_opNR_name);
    outAsync->invoke(iceC_Test_MyClass_opNR_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<NR, NR> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::NDV
Test::MyClassPrx::opNDV(const NDV& iceP_i, NDV& iceP_o, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<NDV, NDV>>(true, this, &MyClassPrx::_iceI_opNDV, iceP_i, context).get();
    iceP_o = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::NDV, ::Test::NDV>>
Test::MyClassPrx::opNDVAsync(const NDV& iceP_i, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<NDV, NDV>, ::std::promise>(false, this, &MyClassPrx::_iceI_opNDV, iceP_i, context);
}

::std::function<void()>
Test::MyClassPrx::opNDVAsync(const NDV& iceP_i,
                             ::std::function<void (::Test::NDV, ::Test::NDV)> response,
                             ::std::function<void(::std::exception_ptr)> ex,
                             ::std::function<void(bool)> sent,
                             const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<NDV, NDV>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<NDV, NDV>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDV, iceP_i, context);
}

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opNDV(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<NDV, NDV>>>& outAsync, const NDV& iceP_i, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyClass_opNDV_name);
    outAsync->invoke(iceC_Test_MyClass_opNDV_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<NDV, NDV> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::NDR
Test::MyClassPrx::opNDR(const NDR& iceP_i, NDR& iceP_o, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<NDR, NDR>>(true, this, &MyClassPrx::_iceI_opNDR, iceP_i, context).get();
    iceP_o = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::NDR, ::Test::NDR>>
Test::MyClassPrx::opNDRAsync(const NDR& iceP_i, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<NDR, NDR>, ::std::promise>(false, this, &MyClassPrx::_iceI_opNDR, iceP_i, context);
}

::std::function<void()>
Test::MyClassPrx::opNDRAsync(const NDR& iceP_i,
                             ::std::function<void (::Test::NDR, ::Test::NDR)> response,
                             ::std::function<void(::std::exception_ptr)> ex,
                             ::std::function<void(bool)> sent,
                             const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<NDR, NDR>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<NDR, NDR>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDR, iceP_i, context);
}

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opNDR(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<NDR, NDR>>>& outAsync, const NDR& iceP_i, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyClass_opNDR_name);
    outAsync->invoke(iceC_Test_MyClass_opNDR_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<NDR, NDR> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::NDAIS
Test::MyClassPrx::opNDAIS(const NDAIS& iceP_i, NDAIS& iceP_o, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<NDAIS, NDAIS>>(true, this, &MyClassPrx::_iceI_opNDAIS, iceP_i, context).get();
    iceP_o = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::NDAIS, ::Test::NDAIS>>
Test::MyClassPrx::opNDAISAsync(const NDAIS& iceP_i, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<NDAIS, NDAIS>, ::std::promise>(false, this, &MyClassPrx::_iceI_opNDAIS, iceP_i, context);
}

::std::function<void()>
Test::MyClassPrx::opNDAISAsync(const NDAIS& iceP_i,
                               ::std::function<void (::Test::NDAIS, ::Test::NDAIS)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<NDAIS, NDAIS>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<NDAIS, NDAIS>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDAIS, iceP_i, context);
}

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opNDAIS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<NDAIS, NDAIS>>>& outAsync, const NDAIS& iceP_i, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyClass_opNDAIS_name);
    outAsync->invoke(iceC_Test_MyClass_opNDAIS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<NDAIS, NDAIS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::NDGIS
Test::MyClassPrx::opNDGIS(const NDGIS& iceP_i, NDGIS& iceP_o, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<NDGIS, NDGIS>>(true, this, &MyClassPrx::_iceI_opNDGIS, iceP_i, context).get();
    iceP_o = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::NDGIS, ::Test::NDGIS>>
Test::MyClassPrx::opNDGISAsync(const NDGIS& iceP_i, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<NDGIS, NDGIS>, ::std::promise>(false, this, &MyClassPrx::_iceI_opNDGIS, iceP_i, context);
}

::std::function<void()>
Test::MyClassPrx::opNDGISAsync(const NDGIS& iceP_i,
                               ::std::function<void (::Test::NDGIS, ::Test::NDGIS)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<NDGIS, NDGIS>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<NDGIS, NDGIS>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDGIS, iceP_i, context);
}

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opNDGIS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<NDGIS, NDGIS>>>& outAsync, const NDGIS& iceP_i, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyClass_opNDGIS_name);
    outAsync->invoke(iceC_Test_MyClass_opNDGIS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<NDGIS, NDGIS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::NDASS
Test::MyClassPrx::opNDASS(const NDASS& iceP_i, NDASS& iceP_o, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<NDASS, NDASS>>(true, this, &MyClassPrx::_iceI_opNDASS, iceP_i, context).get();
    iceP_o = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::NDASS, ::Test::NDASS>>
Test::MyClassPrx::opNDASSAsync(const NDASS& iceP_i, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<NDASS, NDASS>, ::std::promise>(false, this, &MyClassPrx::_iceI_opNDASS, iceP_i, context);
}

::std::function<void()>
Test::MyClassPrx::opNDASSAsync(const NDASS& iceP_i,
                               ::std::function<void (::Test::NDASS, ::Test::NDASS)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<NDASS, NDASS>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<NDASS, NDASS>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDASS, iceP_i, context);
}

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opNDASS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<NDASS, NDASS>>>& outAsync, const NDASS& iceP_i, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyClass_opNDASS_name);
    outAsync->invoke(iceC_Test_MyClass_opNDASS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<NDASS, NDASS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::NDGSS
Test::MyClassPrx::opNDGSS(const NDGSS& iceP_i, NDGSS& iceP_o, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<NDGSS, NDGSS>>(true, this, &MyClassPrx::_iceI_opNDGSS, iceP_i, context).get();
    iceP_o = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::NDGSS, ::Test::NDGSS>>
Test::MyClassPrx::opNDGSSAsync(const NDGSS& iceP_i, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<NDGSS, NDGSS>, ::std::promise>(false, this, &MyClassPrx::_iceI_opNDGSS, iceP_i, context);
}

::std::function<void()>
Test::MyClassPrx::opNDGSSAsync(const NDGSS& iceP_i,
                               ::std::function<void (::Test::NDGSS, ::Test::NDGSS)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<NDGSS, NDGSS>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<NDGSS, NDGSS>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDGSS, iceP_i, context);
}

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opNDGSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<NDGSS, NDGSS>>>& outAsync, const NDGSS& iceP_i, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyClass_opNDGSS_name);
    outAsync->invoke(iceC_Test_MyClass_opNDGSS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<NDGSS, NDGSS> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

const ::std::string&
Test::MyClassPrx::ice_staticId()
{
    return MyClass::ice_staticId();
}

bool
Test::MyClass::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyClass_ids, iceC_Test_MyClass_ids + 2, s);
}

::std::vector<::std::string>
Test::MyClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MyClass_ids[0], &iceC_Test_MyClass_ids[2]);
}

::std::string
Test::MyClass::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyClass";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opNV(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    NV iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    NV iceP_o;
    NV ret = this->opNV(::std::move(iceP_i), iceP_o, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_o, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opNR(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    NR iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    NR iceP_o;
    NR ret = this->opNR(::std::move(iceP_i), iceP_o, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_o, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opNDV(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    NDV iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    NDV iceP_o;
    NDV ret = this->opNDV(::std::move(iceP_i), iceP_o, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_o, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opNDR(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    NDR iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    NDR iceP_o;
    NDR ret = this->opNDR(::std::move(iceP_i), iceP_o, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_o, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opNDAIS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    NDAIS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    NDAIS iceP_o;
    NDAIS ret = this->opNDAIS(::std::move(iceP_i), iceP_o, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_o, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opNDGIS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    NDGIS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    NDGIS iceP_o;
    NDGIS ret = this->opNDGIS(::std::move(iceP_i), iceP_o, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_o, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opNDASS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    NDASS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    NDASS iceP_o;
    NDASS ret = this->opNDASS(::std::move(iceP_i), iceP_o, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_o, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opNDGSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    NDGSS iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    NDGSS iceP_o;
    NDGSS ret = this->opNDGSS(::std::move(iceP_i), iceP_o, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_o, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MyClass_ops, iceC_Test_MyClass_ops + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MyClass_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opNDAIS(in, current);
        }
        case 5:
        {
            return _iceD_opNDASS(in, current);
        }
        case 6:
        {
            return _iceD_opNDGIS(in, current);
        }
        case 7:
        {
            return _iceD_opNDGSS(in, current);
        }
        case 8:
        {
            return _iceD_opNDR(in, current);
        }
        case 9:
        {
            return _iceD_opNDV(in, current);
        }
        case 10:
        {
            return _iceD_opNR(in, current);
        }
        case 11:
        {
            return _iceD_opNV(in, current);
        }
        case 12:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

namespace Ice
{
}
