// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

void
Test::MyClassPrx::shutdown(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &MyClassPrx::_iceI_shutdown, context).get();
}

std::future<void>
Test::MyClassPrx::shutdownAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &MyClassPrx::_iceI_shutdown, context);
}

std::function<void()>
Test::MyClassPrx::shutdownAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::MyClassPrx::_iceI_shutdown, context);
}

void
Test::MyClassPrx::_iceI_shutdown(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

::Test::NV
Test::MyClassPrx::opNV(const NV& iceP_i, NV& iceP_o, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<NV, NV>>(true, this, &MyClassPrx::_iceI_opNV, iceP_i, context).get();
    iceP_o = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<::Test::NV, ::Test::NV>>
Test::MyClassPrx::opNVAsync(const NV& iceP_i, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<NV, NV>>(false, this, &MyClassPrx::_iceI_opNV, iceP_i, context);
}

std::function<void()>
Test::MyClassPrx::opNVAsync(const NV& iceP_i, std::function<void(::Test::NV, ::Test::NV)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<NV, NV>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<NV, NV>>(std::move(responseCb), std::move(exception), std::move(sent), this, &Test::MyClassPrx::_iceI_opNV, iceP_i, context);
}

void
Test::MyClassPrx::_iceI_opNV(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<NV, NV>>>& outAsync, const NV& iceP_i, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opNV";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<NV, NV> v;
            istr->readAll(std::get<1>(v), std::get<0>(v));
            return v;
        });
}

::Test::NR
Test::MyClassPrx::opNR(const NR& iceP_i, NR& iceP_o, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<NR, NR>>(true, this, &MyClassPrx::_iceI_opNR, iceP_i, context).get();
    iceP_o = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<::Test::NR, ::Test::NR>>
Test::MyClassPrx::opNRAsync(const NR& iceP_i, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<NR, NR>>(false, this, &MyClassPrx::_iceI_opNR, iceP_i, context);
}

std::function<void()>
Test::MyClassPrx::opNRAsync(const NR& iceP_i, std::function<void(::Test::NR, ::Test::NR)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<NR, NR>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<NR, NR>>(std::move(responseCb), std::move(exception), std::move(sent), this, &Test::MyClassPrx::_iceI_opNR, iceP_i, context);
}

void
Test::MyClassPrx::_iceI_opNR(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<NR, NR>>>& outAsync, const NR& iceP_i, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opNR";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<NR, NR> v;
            istr->readAll(std::get<1>(v), std::get<0>(v));
            return v;
        });
}

::Test::NDV
Test::MyClassPrx::opNDV(const NDV& iceP_i, NDV& iceP_o, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<NDV, NDV>>(true, this, &MyClassPrx::_iceI_opNDV, iceP_i, context).get();
    iceP_o = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<::Test::NDV, ::Test::NDV>>
Test::MyClassPrx::opNDVAsync(const NDV& iceP_i, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<NDV, NDV>>(false, this, &MyClassPrx::_iceI_opNDV, iceP_i, context);
}

std::function<void()>
Test::MyClassPrx::opNDVAsync(const NDV& iceP_i, std::function<void(::Test::NDV, ::Test::NDV)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<NDV, NDV>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<NDV, NDV>>(std::move(responseCb), std::move(exception), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDV, iceP_i, context);
}

void
Test::MyClassPrx::_iceI_opNDV(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<NDV, NDV>>>& outAsync, const NDV& iceP_i, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opNDV";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<NDV, NDV> v;
            istr->readAll(std::get<1>(v), std::get<0>(v));
            return v;
        });
}

::Test::NDR
Test::MyClassPrx::opNDR(const NDR& iceP_i, NDR& iceP_o, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<NDR, NDR>>(true, this, &MyClassPrx::_iceI_opNDR, iceP_i, context).get();
    iceP_o = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<::Test::NDR, ::Test::NDR>>
Test::MyClassPrx::opNDRAsync(const NDR& iceP_i, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<NDR, NDR>>(false, this, &MyClassPrx::_iceI_opNDR, iceP_i, context);
}

std::function<void()>
Test::MyClassPrx::opNDRAsync(const NDR& iceP_i, std::function<void(::Test::NDR, ::Test::NDR)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<NDR, NDR>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<NDR, NDR>>(std::move(responseCb), std::move(exception), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDR, iceP_i, context);
}

void
Test::MyClassPrx::_iceI_opNDR(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<NDR, NDR>>>& outAsync, const NDR& iceP_i, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opNDR";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<NDR, NDR> v;
            istr->readAll(std::get<1>(v), std::get<0>(v));
            return v;
        });
}

::Test::NDAIS
Test::MyClassPrx::opNDAIS(const NDAIS& iceP_i, NDAIS& iceP_o, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<NDAIS, NDAIS>>(true, this, &MyClassPrx::_iceI_opNDAIS, iceP_i, context).get();
    iceP_o = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<::Test::NDAIS, ::Test::NDAIS>>
Test::MyClassPrx::opNDAISAsync(const NDAIS& iceP_i, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<NDAIS, NDAIS>>(false, this, &MyClassPrx::_iceI_opNDAIS, iceP_i, context);
}

std::function<void()>
Test::MyClassPrx::opNDAISAsync(const NDAIS& iceP_i, std::function<void(::Test::NDAIS, ::Test::NDAIS)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<NDAIS, NDAIS>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<NDAIS, NDAIS>>(std::move(responseCb), std::move(exception), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDAIS, iceP_i, context);
}

void
Test::MyClassPrx::_iceI_opNDAIS(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<NDAIS, NDAIS>>>& outAsync, const NDAIS& iceP_i, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opNDAIS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<NDAIS, NDAIS> v;
            istr->readAll(std::get<1>(v), std::get<0>(v));
            return v;
        });
}

::Test::NDGIS
Test::MyClassPrx::opNDGIS(const NDGIS& iceP_i, NDGIS& iceP_o, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<NDGIS, NDGIS>>(true, this, &MyClassPrx::_iceI_opNDGIS, iceP_i, context).get();
    iceP_o = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<::Test::NDGIS, ::Test::NDGIS>>
Test::MyClassPrx::opNDGISAsync(const NDGIS& iceP_i, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<NDGIS, NDGIS>>(false, this, &MyClassPrx::_iceI_opNDGIS, iceP_i, context);
}

std::function<void()>
Test::MyClassPrx::opNDGISAsync(const NDGIS& iceP_i, std::function<void(::Test::NDGIS, ::Test::NDGIS)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<NDGIS, NDGIS>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<NDGIS, NDGIS>>(std::move(responseCb), std::move(exception), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDGIS, iceP_i, context);
}

void
Test::MyClassPrx::_iceI_opNDGIS(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<NDGIS, NDGIS>>>& outAsync, const NDGIS& iceP_i, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opNDGIS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<NDGIS, NDGIS> v;
            istr->readAll(std::get<1>(v), std::get<0>(v));
            return v;
        });
}

::Test::NDASS
Test::MyClassPrx::opNDASS(const NDASS& iceP_i, NDASS& iceP_o, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<NDASS, NDASS>>(true, this, &MyClassPrx::_iceI_opNDASS, iceP_i, context).get();
    iceP_o = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<::Test::NDASS, ::Test::NDASS>>
Test::MyClassPrx::opNDASSAsync(const NDASS& iceP_i, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<NDASS, NDASS>>(false, this, &MyClassPrx::_iceI_opNDASS, iceP_i, context);
}

std::function<void()>
Test::MyClassPrx::opNDASSAsync(const NDASS& iceP_i, std::function<void(::Test::NDASS, ::Test::NDASS)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<NDASS, NDASS>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<NDASS, NDASS>>(std::move(responseCb), std::move(exception), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDASS, iceP_i, context);
}

void
Test::MyClassPrx::_iceI_opNDASS(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<NDASS, NDASS>>>& outAsync, const NDASS& iceP_i, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opNDASS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<NDASS, NDASS> v;
            istr->readAll(std::get<1>(v), std::get<0>(v));
            return v;
        });
}

::Test::NDGSS
Test::MyClassPrx::opNDGSS(const NDGSS& iceP_i, NDGSS& iceP_o, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<NDGSS, NDGSS>>(true, this, &MyClassPrx::_iceI_opNDGSS, iceP_i, context).get();
    iceP_o = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<::Test::NDGSS, ::Test::NDGSS>>
Test::MyClassPrx::opNDGSSAsync(const NDGSS& iceP_i, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<NDGSS, NDGSS>>(false, this, &MyClassPrx::_iceI_opNDGSS, iceP_i, context);
}

std::function<void()>
Test::MyClassPrx::opNDGSSAsync(const NDGSS& iceP_i, std::function<void(::Test::NDGSS, ::Test::NDGSS)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<NDGSS, NDGSS>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<NDGSS, NDGSS>>(std::move(responseCb), std::move(exception), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDGSS, iceP_i, context);
}

void
Test::MyClassPrx::_iceI_opNDGSS(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<NDGSS, NDGSS>>>& outAsync, const NDGSS& iceP_i, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opNDGSS";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<NDGSS, NDGSS> v;
            istr->readAll(std::get<1>(v), std::get<0>(v));
            return v;
        });
}

Test::MyClassPrx::~MyClassPrx() = default;

const char*
Test::MyClassPrx::ice_staticId() noexcept
{
    return "::Test::MyClass";
}

void
Test::TEstNv::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "d = ", this->d);
    Ice::print(os << ", s = ", this->s);
}

std::ostream&
Test::operator<<(std::ostream& os, const ::Test::TEstNv& value)
{
    os << "Test::TEstNv{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

std::vector<std::string>
Test::MyClass::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::Test::MyClass"};
    return allTypeIds;
}

std::string
Test::MyClass::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
Test::MyClass::ice_staticId() noexcept
{
    return "::Test::MyClass";
}

/// \cond INTERNAL
void
Test::MyClass::_iceD_shutdown(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opNV(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    NV iceP_i;
    istr->readAll(iceP_i);
    istr->endEncapsulation();
    NV iceP_o;
    const NV ret = this->opNV(std::move(iceP_i), iceP_o, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_o, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opNR(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    NR iceP_i;
    istr->readAll(iceP_i);
    istr->endEncapsulation();
    NR iceP_o;
    const NR ret = this->opNR(std::move(iceP_i), iceP_o, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_o, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opNDV(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    NDV iceP_i;
    istr->readAll(iceP_i);
    istr->endEncapsulation();
    NDV iceP_o;
    const NDV ret = this->opNDV(std::move(iceP_i), iceP_o, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_o, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opNDR(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    NDR iceP_i;
    istr->readAll(iceP_i);
    istr->endEncapsulation();
    NDR iceP_o;
    const NDR ret = this->opNDR(std::move(iceP_i), iceP_o, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_o, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opNDAIS(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    NDAIS iceP_i;
    istr->readAll(iceP_i);
    istr->endEncapsulation();
    NDAIS iceP_o;
    const NDAIS ret = this->opNDAIS(std::move(iceP_i), iceP_o, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_o, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opNDGIS(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    NDGIS iceP_i;
    istr->readAll(iceP_i);
    istr->endEncapsulation();
    NDGIS iceP_o;
    const NDGIS ret = this->opNDGIS(std::move(iceP_i), iceP_o, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_o, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opNDASS(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    NDASS iceP_i;
    istr->readAll(iceP_i);
    istr->endEncapsulation();
    NDASS iceP_o;
    const NDASS ret = this->opNDASS(std::move(iceP_i), iceP_o, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_o, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClass::_iceD_opNDGSS(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    NDGSS iceP_i;
    istr->readAll(iceP_i);
    istr->endEncapsulation();
    NDGSS iceP_o;
    const NDGSS ret = this->opNDGSS(std::move(iceP_i), iceP_o, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_o, ret);
        },
        request.current()));
}
/// \endcond

void
Test::MyClass::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 13> allOperations{"ice_id", "ice_ids", "ice_isA", "ice_ping", "opNDAIS", "opNDASS", "opNDGIS", "opNDGSS", "opNDR", "opNDV", "opNR", "opNV", "shutdown"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation);
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_opNDAIS(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_opNDASS(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_opNDGIS(request, std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_opNDGSS(request, std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_opNDR(request, std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_opNDV(request, std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_opNR(request, std::move(sendResponse));
            break;
        }
        case 11:
        {
            _iceD_opNV(request, std::move(sendResponse));
            break;
        }
        case 12:
        {
            _iceD_shutdown(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
