//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

class MyClass;
class MyClassPrx;

}

namespace Test
{

using NV = ::std::map<int, int>;

using NR = ::std::map<::std::string, ::std::string>;

using NDV = ::std::map<::std::string, NV>;

using NDR = ::std::map<::std::string, NR>;

using IntSeq = ::std::vector<int>;

struct TEstNv
{
    ::Test::NV d;
    ::Test::IntSeq s;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::NV&, const ::Test::IntSeq&> ice_tuple() const
    {
        return std::tie(d, s);
    }
};

using AIS = ::std::vector<int>;

using GIS = ::std::vector<int>;

using ASS = ::std::vector<::std::string>;

using GSS = ::std::vector<::std::string>;

using NDAIS = ::std::map<::std::string, AIS>;

using NDGIS = ::std::map<::std::string, GIS>;

using NDASS = ::std::map<::std::string, ASS>;

using NDGSS = ::std::map<::std::string, GSS>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test
{

class MyClass : public virtual ::Ice::Object
{
public:

    using ProxyType = MyClassPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNV.
     */
    struct OpNVResult
    {
        NV returnValue;
        NV o;
    };

    virtual NV opNV(NV i, NV& o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNV(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNR.
     */
    struct OpNRResult
    {
        NR returnValue;
        NR o;
    };

    virtual NR opNR(NR i, NR& o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNR(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNDV.
     */
    struct OpNDVResult
    {
        NDV returnValue;
        NDV o;
    };

    virtual NDV opNDV(NDV i, NDV& o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDV(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNDR.
     */
    struct OpNDRResult
    {
        NDR returnValue;
        NDR o;
    };

    virtual NDR opNDR(NDR i, NDR& o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDR(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNDAIS.
     */
    struct OpNDAISResult
    {
        NDAIS returnValue;
        NDAIS o;
    };

    virtual NDAIS opNDAIS(NDAIS i, NDAIS& o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDAIS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNDGIS.
     */
    struct OpNDGISResult
    {
        NDGIS returnValue;
        NDGIS o;
    };

    virtual NDGIS opNDGIS(NDGIS i, NDGIS& o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDGIS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNDASS.
     */
    struct OpNDASSResult
    {
        NDASS returnValue;
        NDASS o;
    };

    virtual NDASS opNDASS(NDASS i, NDASS& o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDASS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNDGSS.
     */
    struct OpNDGSSResult
    {
        NDGSS returnValue;
        NDGSS o;
    };

    virtual NDGSS opNDGSS(NDGSS i, NDGSS& o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDGSS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test
{

class MyClassPrx : public ::Ice::Proxy<MyClassPrx, ::Ice::ObjectPrx>
{
public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &MyClassPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &MyClassPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_shutdown, context);
    }

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    NV opNV(const NV& i, NV& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNVResult>(true, this, &MyClassPrx::_iceI_opNV, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNVAsync(const NV& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNVResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNVResult, P>(false, this, &MyClassPrx::_iceI_opNV, i, context);
    }

    ::std::function<void()>
    opNVAsync(const NV& i,
              ::std::function<void(::Test::NV, ::Test::NV)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNVResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNVResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNV, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNV(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNVResult>>&, const NV&, const ::Ice::Context&);
    /// \endcond

    NR opNR(const NR& i, NR& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNRResult>(true, this, &MyClassPrx::_iceI_opNR, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNRAsync(const NR& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNRResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNRResult, P>(false, this, &MyClassPrx::_iceI_opNR, i, context);
    }

    ::std::function<void()>
    opNRAsync(const NR& i,
              ::std::function<void(::Test::NR, ::Test::NR)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNRResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNRResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNR, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNR(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNRResult>>&, const NR&, const ::Ice::Context&);
    /// \endcond

    NDV opNDV(const NDV& i, NDV& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNDVResult>(true, this, &MyClassPrx::_iceI_opNDV, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNDVAsync(const NDV& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNDVResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNDVResult, P>(false, this, &MyClassPrx::_iceI_opNDV, i, context);
    }

    ::std::function<void()>
    opNDVAsync(const NDV& i,
               ::std::function<void(::Test::NDV, ::Test::NDV)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNDVResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNDVResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDV, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNDV(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNDVResult>>&, const NDV&, const ::Ice::Context&);
    /// \endcond

    NDR opNDR(const NDR& i, NDR& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNDRResult>(true, this, &MyClassPrx::_iceI_opNDR, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNDRAsync(const NDR& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNDRResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNDRResult, P>(false, this, &MyClassPrx::_iceI_opNDR, i, context);
    }

    ::std::function<void()>
    opNDRAsync(const NDR& i,
               ::std::function<void(::Test::NDR, ::Test::NDR)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNDRResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNDRResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDR, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNDR(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNDRResult>>&, const NDR&, const ::Ice::Context&);
    /// \endcond

    NDAIS opNDAIS(const NDAIS& i, NDAIS& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNDAISResult>(true, this, &MyClassPrx::_iceI_opNDAIS, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNDAISAsync(const NDAIS& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNDAISResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNDAISResult, P>(false, this, &MyClassPrx::_iceI_opNDAIS, i, context);
    }

    ::std::function<void()>
    opNDAISAsync(const NDAIS& i,
                 ::std::function<void(::Test::NDAIS, ::Test::NDAIS)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNDAISResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNDAISResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDAIS, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNDAIS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNDAISResult>>&, const NDAIS&, const ::Ice::Context&);
    /// \endcond

    NDGIS opNDGIS(const NDGIS& i, NDGIS& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNDGISResult>(true, this, &MyClassPrx::_iceI_opNDGIS, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNDGISAsync(const NDGIS& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNDGISResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNDGISResult, P>(false, this, &MyClassPrx::_iceI_opNDGIS, i, context);
    }

    ::std::function<void()>
    opNDGISAsync(const NDGIS& i,
                 ::std::function<void(::Test::NDGIS, ::Test::NDGIS)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNDGISResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNDGISResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDGIS, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNDGIS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNDGISResult>>&, const NDGIS&, const ::Ice::Context&);
    /// \endcond

    NDASS opNDASS(const NDASS& i, NDASS& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNDASSResult>(true, this, &MyClassPrx::_iceI_opNDASS, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNDASSAsync(const NDASS& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNDASSResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNDASSResult, P>(false, this, &MyClassPrx::_iceI_opNDASS, i, context);
    }

    ::std::function<void()>
    opNDASSAsync(const NDASS& i,
                 ::std::function<void(::Test::NDASS, ::Test::NDASS)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNDASSResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNDASSResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDASS, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNDASS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNDASSResult>>&, const NDASS&, const ::Ice::Context&);
    /// \endcond

    NDGSS opNDGSS(const NDGSS& i, NDGSS& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNDGSSResult>(true, this, &MyClassPrx::_iceI_opNDGSS, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNDGSSAsync(const NDGSS& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNDGSSResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNDGSSResult, P>(false, this, &MyClassPrx::_iceI_opNDGSS, i, context);
    }

    ::std::function<void()>
    opNDGSSAsync(const NDGSS& i,
                 ::std::function<void(::Test::NDGSS, ::Test::NDGSS)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNDGSSResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNDGSSResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDGSS, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNDGSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNDGSSResult>>&, const NDGSS&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit MyClassPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    MyClassPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    MyClassPrx() = default;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::Test::TEstNv>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::TEstNv, S>
{
    static void read(S* istr, ::Test::TEstNv& v)
    {
        istr->readAll(v.d, v.s);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using MyClassPtr = ::std::shared_ptr<MyClass>;
using MyClassPrxPtr = ::std::shared_ptr<MyClassPrx>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
