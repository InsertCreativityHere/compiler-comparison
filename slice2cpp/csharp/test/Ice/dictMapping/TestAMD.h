//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __TestAMD_h__
#define __TestAMD_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{

class MyClass;
class MyClassPrx;

}

namespace Test
{

using NV = ::std::map<int, int>;

using NR = ::std::map<::std::string, ::std::string>;

using NDV = ::std::map<::std::string, NV>;

using NDR = ::std::map<::std::string, NR>;

using AIS = ::std::vector<int>;

using GIS = ::std::vector<int>;

using ASS = ::std::vector<::std::string>;

using GSS = ::std::vector<::std::string>;

using NDAIS = ::std::map<::std::string, AIS>;

using NDGIS = ::std::map<::std::string, GIS>;

using NDASS = ::std::map<::std::string, ASS>;

using NDGSS = ::std::map<::std::string, GSS>;

}

namespace Test
{

class MyClass : public virtual ::Ice::Object
{
public:

    using ProxyType = MyClassPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNV.
     */
    struct OpNVResult
    {
        NV returnValue;
        NV o;
    };

    virtual void opNVAsync(NV i, ::std::function<void(const NV& returnValue, const NV& o)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNV(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNR.
     */
    struct OpNRResult
    {
        NR returnValue;
        NR o;
    };

    virtual void opNRAsync(NR i, ::std::function<void(const NR& returnValue, const NR& o)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNR(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNDV.
     */
    struct OpNDVResult
    {
        NDV returnValue;
        NDV o;
    };

    virtual void opNDVAsync(NDV i, ::std::function<void(const NDV& returnValue, const NDV& o)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDV(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNDR.
     */
    struct OpNDRResult
    {
        NDR returnValue;
        NDR o;
    };

    virtual void opNDRAsync(NDR i, ::std::function<void(const NDR& returnValue, const NDR& o)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDR(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNDAIS.
     */
    struct OpNDAISResult
    {
        NDAIS returnValue;
        NDAIS o;
    };

    virtual void opNDAISAsync(NDAIS i, ::std::function<void(const NDAIS& returnValue, const NDAIS& o)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDAIS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNDGIS.
     */
    struct OpNDGISResult
    {
        NDGIS returnValue;
        NDGIS o;
    };

    virtual void opNDGISAsync(NDGIS i, ::std::function<void(const NDGIS& returnValue, const NDGIS& o)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDGIS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNDASS.
     */
    struct OpNDASSResult
    {
        NDASS returnValue;
        NDASS o;
    };

    virtual void opNDASSAsync(NDASS i, ::std::function<void(const NDASS& returnValue, const NDASS& o)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDASS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opNDGSS.
     */
    struct OpNDGSSResult
    {
        NDGSS returnValue;
        NDGSS o;
    };

    virtual void opNDGSSAsync(NDGSS i, ::std::function<void(const NDGSS& returnValue, const NDGSS& o)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDGSS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test
{

class MyClassPrx : public virtual ::Ice::Proxy<MyClassPrx, ::Ice::ObjectPrx>
{
public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &MyClassPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &MyClassPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_shutdown, context);
    }

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    NV opNV(const NV& i, NV& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNVResult>(true, this, &MyClassPrx::_iceI_opNV, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNVAsync(const NV& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNVResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNVResult, P>(false, this, &MyClassPrx::_iceI_opNV, i, context);
    }

    ::std::function<void()>
    opNVAsync(const NV& i,
              ::std::function<void(::Test::NV, ::Test::NV)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNVResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNVResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNV, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNV(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNVResult>>&, const NV&, const ::Ice::Context&);
    /// \endcond

    NR opNR(const NR& i, NR& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNRResult>(true, this, &MyClassPrx::_iceI_opNR, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNRAsync(const NR& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNRResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNRResult, P>(false, this, &MyClassPrx::_iceI_opNR, i, context);
    }

    ::std::function<void()>
    opNRAsync(const NR& i,
              ::std::function<void(::Test::NR, ::Test::NR)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNRResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNRResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNR, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNR(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNRResult>>&, const NR&, const ::Ice::Context&);
    /// \endcond

    NDV opNDV(const NDV& i, NDV& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNDVResult>(true, this, &MyClassPrx::_iceI_opNDV, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNDVAsync(const NDV& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNDVResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNDVResult, P>(false, this, &MyClassPrx::_iceI_opNDV, i, context);
    }

    ::std::function<void()>
    opNDVAsync(const NDV& i,
               ::std::function<void(::Test::NDV, ::Test::NDV)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNDVResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNDVResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDV, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNDV(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNDVResult>>&, const NDV&, const ::Ice::Context&);
    /// \endcond

    NDR opNDR(const NDR& i, NDR& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNDRResult>(true, this, &MyClassPrx::_iceI_opNDR, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNDRAsync(const NDR& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNDRResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNDRResult, P>(false, this, &MyClassPrx::_iceI_opNDR, i, context);
    }

    ::std::function<void()>
    opNDRAsync(const NDR& i,
               ::std::function<void(::Test::NDR, ::Test::NDR)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNDRResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNDRResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDR, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNDR(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNDRResult>>&, const NDR&, const ::Ice::Context&);
    /// \endcond

    NDAIS opNDAIS(const NDAIS& i, NDAIS& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNDAISResult>(true, this, &MyClassPrx::_iceI_opNDAIS, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNDAISAsync(const NDAIS& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNDAISResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNDAISResult, P>(false, this, &MyClassPrx::_iceI_opNDAIS, i, context);
    }

    ::std::function<void()>
    opNDAISAsync(const NDAIS& i,
                 ::std::function<void(::Test::NDAIS, ::Test::NDAIS)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNDAISResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNDAISResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDAIS, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNDAIS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNDAISResult>>&, const NDAIS&, const ::Ice::Context&);
    /// \endcond

    NDGIS opNDGIS(const NDGIS& i, NDGIS& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNDGISResult>(true, this, &MyClassPrx::_iceI_opNDGIS, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNDGISAsync(const NDGIS& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNDGISResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNDGISResult, P>(false, this, &MyClassPrx::_iceI_opNDGIS, i, context);
    }

    ::std::function<void()>
    opNDGISAsync(const NDGIS& i,
                 ::std::function<void(::Test::NDGIS, ::Test::NDGIS)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNDGISResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNDGISResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDGIS, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNDGIS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNDGISResult>>&, const NDGIS&, const ::Ice::Context&);
    /// \endcond

    NDASS opNDASS(const NDASS& i, NDASS& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNDASSResult>(true, this, &MyClassPrx::_iceI_opNDASS, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNDASSAsync(const NDASS& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNDASSResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNDASSResult, P>(false, this, &MyClassPrx::_iceI_opNDASS, i, context);
    }

    ::std::function<void()>
    opNDASSAsync(const NDASS& i,
                 ::std::function<void(::Test::NDASS, ::Test::NDASS)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNDASSResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNDASSResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDASS, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNDASS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNDASSResult>>&, const NDASS&, const ::Ice::Context&);
    /// \endcond

    NDGSS opNDGSS(const NDGSS& i, NDGSS& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpNDGSSResult>(true, this, &MyClassPrx::_iceI_opNDGSS, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opNDGSSAsync(const NDGSS& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpNDGSSResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpNDGSSResult, P>(false, this, &MyClassPrx::_iceI_opNDGSS, i, context);
    }

    ::std::function<void()>
    opNDGSSAsync(const NDGSS& i,
                 ::std::function<void(::Test::NDGSS, ::Test::NDGSS)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpNDGSSResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpNDGSSResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opNDGSS, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opNDGSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpNDGSSResult>>&, const NDGSS&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    MyClassPrx() = default;
    friend ::std::shared_ptr<MyClassPrx> IceInternal::createProxy<MyClassPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using MyClassPtr = ::std::shared_ptr<MyClass>;
using MyClassPrxPtr = ::std::shared_ptr<MyClassPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Test
{

class MyClass;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< MyClass>&);
::IceProxy::Ice::Object* upCast(MyClass*);
/// \endcond

}

}

namespace Test
{

class MyClass;
/// \cond INTERNAL
::Ice::Object* upCast(MyClass*);
/// \endcond
typedef ::IceInternal::Handle< MyClass> MyClassPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::MyClass> MyClassPrx;
typedef MyClassPrx MyClassPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(MyClassPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Test
{

typedef ::std::map< ::Ice::Int, ::Ice::Int> NV;

typedef ::std::map< ::std::string, ::std::string> NR;

typedef ::std::map< ::std::string, NV> NDV;

typedef ::std::map< ::std::string, NR> NDR;

typedef ::std::vector< ::Ice::Int> AIS;

typedef ::std::vector< ::Ice::Int> GIS;

typedef ::std::vector< ::std::string> ASS;

typedef ::std::vector< ::std::string> GSS;

typedef ::std::map< ::std::string, AIS> NDAIS;

typedef ::std::map< ::std::string, GIS> NDGIS;

typedef ::std::map< ::std::string, ASS> NDASS;

typedef ::std::map< ::std::string, GSS> NDGSS;

}

namespace Test
{

/**
 * AMD callback class for Test::MyClass::shutdown_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_MyClass_shutdown : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_MyClass_shutdown();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyClass_shutdown> AMD_MyClass_shutdownPtr;

/**
 * AMD callback class for Test::MyClass::opNV_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_MyClass_opNV : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_MyClass_opNV();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(const NV& result, const NV& o) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyClass_opNV> AMD_MyClass_opNVPtr;

/**
 * AMD callback class for Test::MyClass::opNR_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_MyClass_opNR : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_MyClass_opNR();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(const NR& result, const NR& o) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyClass_opNR> AMD_MyClass_opNRPtr;

/**
 * AMD callback class for Test::MyClass::opNDV_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_MyClass_opNDV : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_MyClass_opNDV();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(const NDV& result, const NDV& o) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyClass_opNDV> AMD_MyClass_opNDVPtr;

/**
 * AMD callback class for Test::MyClass::opNDR_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_MyClass_opNDR : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_MyClass_opNDR();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(const NDR& result, const NDR& o) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyClass_opNDR> AMD_MyClass_opNDRPtr;

/**
 * AMD callback class for Test::MyClass::opNDAIS_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_MyClass_opNDAIS : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_MyClass_opNDAIS();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(const NDAIS& result, const NDAIS& o) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyClass_opNDAIS> AMD_MyClass_opNDAISPtr;

/**
 * AMD callback class for Test::MyClass::opNDGIS_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_MyClass_opNDGIS : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_MyClass_opNDGIS();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(const NDGIS& result, const NDGIS& o) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyClass_opNDGIS> AMD_MyClass_opNDGISPtr;

/**
 * AMD callback class for Test::MyClass::opNDASS_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_MyClass_opNDASS : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_MyClass_opNDASS();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(const NDASS& result, const NDASS& o) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyClass_opNDASS> AMD_MyClass_opNDASSPtr;

/**
 * AMD callback class for Test::MyClass::opNDGSS_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_MyClass_opNDGSS : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_MyClass_opNDGSS();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(const NDGSS& result, const NDGSS& o) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyClass_opNDGSS> AMD_MyClass_opNDGSSPtr;

}

/// \cond INTERNAL
namespace IceAsync
{

namespace Test
{

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_MyClass_shutdown : public ::Test::AMD_MyClass_shutdown, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyClass_shutdown(::IceInternal::Incoming&);

    virtual void ice_response();
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_MyClass_opNV : public ::Test::AMD_MyClass_opNV, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyClass_opNV(::IceInternal::Incoming&);

    virtual void ice_response(const ::Test::NV&, const ::Test::NV&);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_MyClass_opNR : public ::Test::AMD_MyClass_opNR, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyClass_opNR(::IceInternal::Incoming&);

    virtual void ice_response(const ::Test::NR&, const ::Test::NR&);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_MyClass_opNDV : public ::Test::AMD_MyClass_opNDV, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyClass_opNDV(::IceInternal::Incoming&);

    virtual void ice_response(const ::Test::NDV&, const ::Test::NDV&);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_MyClass_opNDR : public ::Test::AMD_MyClass_opNDR, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyClass_opNDR(::IceInternal::Incoming&);

    virtual void ice_response(const ::Test::NDR&, const ::Test::NDR&);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_MyClass_opNDAIS : public ::Test::AMD_MyClass_opNDAIS, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyClass_opNDAIS(::IceInternal::Incoming&);

    virtual void ice_response(const ::Test::NDAIS&, const ::Test::NDAIS&);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_MyClass_opNDGIS : public ::Test::AMD_MyClass_opNDGIS, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyClass_opNDGIS(::IceInternal::Incoming&);

    virtual void ice_response(const ::Test::NDGIS&, const ::Test::NDGIS&);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_MyClass_opNDASS : public ::Test::AMD_MyClass_opNDASS, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyClass_opNDASS(::IceInternal::Incoming&);

    virtual void ice_response(const ::Test::NDASS&, const ::Test::NDASS&);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_MyClass_opNDGSS : public ::Test::AMD_MyClass_opNDGSS, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyClass_opNDGSS(::IceInternal::Incoming&);

    virtual void ice_response(const ::Test::NDGSS&, const ::Test::NDGSS&);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

}

}
/// \endcond

namespace Test
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyClass::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_shutdown.
 */
class Callback_MyClass_shutdown_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyClass_shutdown_Base> Callback_MyClass_shutdownPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyClass::begin_opNV.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNV.
 */
class Callback_MyClass_opNV_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyClass_opNV_Base> Callback_MyClass_opNVPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyClass::begin_opNR.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNR.
 */
class Callback_MyClass_opNR_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyClass_opNR_Base> Callback_MyClass_opNRPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyClass::begin_opNDV.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDV.
 */
class Callback_MyClass_opNDV_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyClass_opNDV_Base> Callback_MyClass_opNDVPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyClass::begin_opNDR.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDR.
 */
class Callback_MyClass_opNDR_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyClass_opNDR_Base> Callback_MyClass_opNDRPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyClass::begin_opNDAIS.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDAIS.
 */
class Callback_MyClass_opNDAIS_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyClass_opNDAIS_Base> Callback_MyClass_opNDAISPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyClass::begin_opNDGIS.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDGIS.
 */
class Callback_MyClass_opNDGIS_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyClass_opNDGIS_Base> Callback_MyClass_opNDGISPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyClass::begin_opNDASS.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDASS.
 */
class Callback_MyClass_opNDASS_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyClass_opNDASS_Base> Callback_MyClass_opNDASSPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyClass::begin_opNDGSS.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDGSS.
 */
class Callback_MyClass_opNDGSS_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyClass_opNDGSS_Base> Callback_MyClass_opNDGSSPtr;

}

namespace IceProxy
{

namespace Test
{

class MyClass : public virtual ::Ice::Proxy<MyClass, ::IceProxy::Ice::Object>
{
public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_shutdown(_iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_MyClass_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Test::Callback_MyClass_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_shutdown(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NV opNV(const ::Test::NV& i, ::Test::NV& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opNV(o, _iceI_begin_opNV(i, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opNV(const ::Test::NV& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opNV(i, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opNV(const ::Test::NV& i, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNV(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNV(const ::Test::NV& i, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNV(i, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNV(const ::Test::NV& i, const ::Test::Callback_MyClass_opNVPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNV(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNV(const ::Test::NV& i, const ::Ice::Context& context, const ::Test::Callback_MyClass_opNVPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNV(i, context, cb, cookie);
    }

    ::Test::NV end_opNV(::Test::NV& o, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opNV(::Test::NV& iceP_o, ::Test::NV& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opNV(const ::Test::NV&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NR opNR(const ::Test::NR& i, ::Test::NR& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opNR(o, _iceI_begin_opNR(i, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opNR(const ::Test::NR& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opNR(i, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opNR(const ::Test::NR& i, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNR(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNR(const ::Test::NR& i, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNR(i, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNR(const ::Test::NR& i, const ::Test::Callback_MyClass_opNRPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNR(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNR(const ::Test::NR& i, const ::Ice::Context& context, const ::Test::Callback_MyClass_opNRPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNR(i, context, cb, cookie);
    }

    ::Test::NR end_opNR(::Test::NR& o, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opNR(::Test::NR& iceP_o, ::Test::NR& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opNR(const ::Test::NR&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NDV opNDV(const ::Test::NDV& i, ::Test::NDV& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opNDV(o, _iceI_begin_opNDV(i, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opNDV(const ::Test::NDV& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opNDV(i, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opNDV(const ::Test::NDV& i, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDV(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDV(const ::Test::NDV& i, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDV(i, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDV(const ::Test::NDV& i, const ::Test::Callback_MyClass_opNDVPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDV(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDV(const ::Test::NDV& i, const ::Ice::Context& context, const ::Test::Callback_MyClass_opNDVPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDV(i, context, cb, cookie);
    }

    ::Test::NDV end_opNDV(::Test::NDV& o, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opNDV(::Test::NDV& iceP_o, ::Test::NDV& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opNDV(const ::Test::NDV&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NDR opNDR(const ::Test::NDR& i, ::Test::NDR& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opNDR(o, _iceI_begin_opNDR(i, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opNDR(const ::Test::NDR& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opNDR(i, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opNDR(const ::Test::NDR& i, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDR(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDR(const ::Test::NDR& i, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDR(i, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDR(const ::Test::NDR& i, const ::Test::Callback_MyClass_opNDRPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDR(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDR(const ::Test::NDR& i, const ::Ice::Context& context, const ::Test::Callback_MyClass_opNDRPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDR(i, context, cb, cookie);
    }

    ::Test::NDR end_opNDR(::Test::NDR& o, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opNDR(::Test::NDR& iceP_o, ::Test::NDR& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opNDR(const ::Test::NDR&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NDAIS opNDAIS(const ::Test::NDAIS& i, ::Test::NDAIS& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opNDAIS(o, _iceI_begin_opNDAIS(i, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opNDAIS(const ::Test::NDAIS& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opNDAIS(i, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opNDAIS(const ::Test::NDAIS& i, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDAIS(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDAIS(const ::Test::NDAIS& i, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDAIS(i, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDAIS(const ::Test::NDAIS& i, const ::Test::Callback_MyClass_opNDAISPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDAIS(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDAIS(const ::Test::NDAIS& i, const ::Ice::Context& context, const ::Test::Callback_MyClass_opNDAISPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDAIS(i, context, cb, cookie);
    }

    ::Test::NDAIS end_opNDAIS(::Test::NDAIS& o, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opNDAIS(::Test::NDAIS& iceP_o, ::Test::NDAIS& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opNDAIS(const ::Test::NDAIS&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NDGIS opNDGIS(const ::Test::NDGIS& i, ::Test::NDGIS& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opNDGIS(o, _iceI_begin_opNDGIS(i, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opNDGIS(const ::Test::NDGIS& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opNDGIS(i, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opNDGIS(const ::Test::NDGIS& i, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDGIS(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDGIS(const ::Test::NDGIS& i, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDGIS(i, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDGIS(const ::Test::NDGIS& i, const ::Test::Callback_MyClass_opNDGISPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDGIS(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDGIS(const ::Test::NDGIS& i, const ::Ice::Context& context, const ::Test::Callback_MyClass_opNDGISPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDGIS(i, context, cb, cookie);
    }

    ::Test::NDGIS end_opNDGIS(::Test::NDGIS& o, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opNDGIS(::Test::NDGIS& iceP_o, ::Test::NDGIS& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opNDGIS(const ::Test::NDGIS&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NDASS opNDASS(const ::Test::NDASS& i, ::Test::NDASS& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opNDASS(o, _iceI_begin_opNDASS(i, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opNDASS(const ::Test::NDASS& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opNDASS(i, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opNDASS(const ::Test::NDASS& i, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDASS(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDASS(const ::Test::NDASS& i, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDASS(i, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDASS(const ::Test::NDASS& i, const ::Test::Callback_MyClass_opNDASSPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDASS(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDASS(const ::Test::NDASS& i, const ::Ice::Context& context, const ::Test::Callback_MyClass_opNDASSPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDASS(i, context, cb, cookie);
    }

    ::Test::NDASS end_opNDASS(::Test::NDASS& o, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opNDASS(::Test::NDASS& iceP_o, ::Test::NDASS& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opNDASS(const ::Test::NDASS&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::NDGSS opNDGSS(const ::Test::NDGSS& i, ::Test::NDGSS& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opNDGSS(o, _iceI_begin_opNDGSS(i, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opNDGSS(const ::Test::NDGSS& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opNDGSS(i, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opNDGSS(const ::Test::NDGSS& i, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDGSS(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDGSS(const ::Test::NDGSS& i, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDGSS(i, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDGSS(const ::Test::NDGSS& i, const ::Test::Callback_MyClass_opNDGSSPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDGSS(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opNDGSS(const ::Test::NDGSS& i, const ::Ice::Context& context, const ::Test::Callback_MyClass_opNDGSSPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opNDGSS(i, context, cb, cookie);
    }

    ::Test::NDGSS end_opNDGSS(::Test::NDGSS& o, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opNDGSS(::Test::NDGSS& iceP_o, ::Test::NDGSS& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opNDGSS(const ::Test::NDGSS&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Test
{

class MyClass : public virtual ::Ice::Object
{
public:

    typedef MyClassPrx ProxyType;
    typedef MyClassPtr PointerType;

    virtual ~MyClass();

#ifdef ICE_CPP11_COMPILER
    MyClass() = default;
    MyClass(const MyClass&) = default;
    MyClass& operator=(const MyClass&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void shutdown_async(const ::Test::AMD_MyClass_shutdownPtr& cb, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opNV_async(const ::Test::AMD_MyClass_opNVPtr& cb, const NV& i, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opNV(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opNR_async(const ::Test::AMD_MyClass_opNRPtr& cb, const NR& i, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opNR(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opNDV_async(const ::Test::AMD_MyClass_opNDVPtr& cb, const NDV& i, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDV(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opNDR_async(const ::Test::AMD_MyClass_opNDRPtr& cb, const NDR& i, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDR(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opNDAIS_async(const ::Test::AMD_MyClass_opNDAISPtr& cb, const NDAIS& i, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDAIS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opNDGIS_async(const ::Test::AMD_MyClass_opNDGISPtr& cb, const NDGIS& i, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDGIS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opNDASS_async(const ::Test::AMD_MyClass_opNDASSPtr& cb, const NDASS& i, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDASS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opNDGSS_async(const ::Test::AMD_MyClass_opNDGSSPtr& cb, const NDGSS& i, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opNDGSS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const MyClass& lhs, const MyClass& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const MyClass& lhs, const MyClass& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

namespace Test
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyClass::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_shutdown.
 */
template<class T>
class CallbackNC_MyClass_shutdown : public Callback_MyClass_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MyClass_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyClass::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_shutdown.
 */
template<class T, typename CT>
class Callback_MyClass_shutdown : public Callback_MyClass_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MyClass_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T, typename CT> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T, typename CT> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T, typename CT> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T, typename CT> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyClass::begin_opNV.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNV.
 */
template<class T>
class CallbackNC_MyClass_opNV : public Callback_MyClass_opNV_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const NV&, const NV&);

    CallbackNC_MyClass_opNV(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NV iceP_o;
        NV ret;
        try
        {
            ret = proxy->end_opNV(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_o);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNV.
 */
template<class T> Callback_MyClass_opNVPtr
newCallback_MyClass_opNV(const IceUtil::Handle<T>& instance, void (T::*cb)(const NV&, const NV&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNV<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNV.
 */
template<class T> Callback_MyClass_opNVPtr
newCallback_MyClass_opNV(T* instance, void (T::*cb)(const NV&, const NV&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNV<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyClass::begin_opNV.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNV.
 */
template<class T, typename CT>
class Callback_MyClass_opNV : public Callback_MyClass_opNV_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const NV&, const NV&, const CT&);

    Callback_MyClass_opNV(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NV iceP_o;
        NV ret;
        try
        {
            ret = proxy->end_opNV(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_o, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNV.
 */
template<class T, typename CT> Callback_MyClass_opNVPtr
newCallback_MyClass_opNV(const IceUtil::Handle<T>& instance, void (T::*cb)(const NV&, const NV&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNV<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNV.
 */
template<class T, typename CT> Callback_MyClass_opNVPtr
newCallback_MyClass_opNV(T* instance, void (T::*cb)(const NV&, const NV&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNV<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyClass::begin_opNR.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNR.
 */
template<class T>
class CallbackNC_MyClass_opNR : public Callback_MyClass_opNR_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const NR&, const NR&);

    CallbackNC_MyClass_opNR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NR iceP_o;
        NR ret;
        try
        {
            ret = proxy->end_opNR(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_o);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNR.
 */
template<class T> Callback_MyClass_opNRPtr
newCallback_MyClass_opNR(const IceUtil::Handle<T>& instance, void (T::*cb)(const NR&, const NR&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNR<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNR.
 */
template<class T> Callback_MyClass_opNRPtr
newCallback_MyClass_opNR(T* instance, void (T::*cb)(const NR&, const NR&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNR<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyClass::begin_opNR.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNR.
 */
template<class T, typename CT>
class Callback_MyClass_opNR : public Callback_MyClass_opNR_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const NR&, const NR&, const CT&);

    Callback_MyClass_opNR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NR iceP_o;
        NR ret;
        try
        {
            ret = proxy->end_opNR(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_o, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNR.
 */
template<class T, typename CT> Callback_MyClass_opNRPtr
newCallback_MyClass_opNR(const IceUtil::Handle<T>& instance, void (T::*cb)(const NR&, const NR&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNR<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNR.
 */
template<class T, typename CT> Callback_MyClass_opNRPtr
newCallback_MyClass_opNR(T* instance, void (T::*cb)(const NR&, const NR&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNR<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyClass::begin_opNDV.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDV.
 */
template<class T>
class CallbackNC_MyClass_opNDV : public Callback_MyClass_opNDV_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const NDV&, const NDV&);

    CallbackNC_MyClass_opNDV(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NDV iceP_o;
        NDV ret;
        try
        {
            ret = proxy->end_opNDV(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_o);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDV.
 */
template<class T> Callback_MyClass_opNDVPtr
newCallback_MyClass_opNDV(const IceUtil::Handle<T>& instance, void (T::*cb)(const NDV&, const NDV&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNDV<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDV.
 */
template<class T> Callback_MyClass_opNDVPtr
newCallback_MyClass_opNDV(T* instance, void (T::*cb)(const NDV&, const NDV&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNDV<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyClass::begin_opNDV.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDV.
 */
template<class T, typename CT>
class Callback_MyClass_opNDV : public Callback_MyClass_opNDV_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const NDV&, const NDV&, const CT&);

    Callback_MyClass_opNDV(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NDV iceP_o;
        NDV ret;
        try
        {
            ret = proxy->end_opNDV(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_o, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDV.
 */
template<class T, typename CT> Callback_MyClass_opNDVPtr
newCallback_MyClass_opNDV(const IceUtil::Handle<T>& instance, void (T::*cb)(const NDV&, const NDV&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNDV<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDV.
 */
template<class T, typename CT> Callback_MyClass_opNDVPtr
newCallback_MyClass_opNDV(T* instance, void (T::*cb)(const NDV&, const NDV&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNDV<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyClass::begin_opNDR.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDR.
 */
template<class T>
class CallbackNC_MyClass_opNDR : public Callback_MyClass_opNDR_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const NDR&, const NDR&);

    CallbackNC_MyClass_opNDR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NDR iceP_o;
        NDR ret;
        try
        {
            ret = proxy->end_opNDR(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_o);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDR.
 */
template<class T> Callback_MyClass_opNDRPtr
newCallback_MyClass_opNDR(const IceUtil::Handle<T>& instance, void (T::*cb)(const NDR&, const NDR&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNDR<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDR.
 */
template<class T> Callback_MyClass_opNDRPtr
newCallback_MyClass_opNDR(T* instance, void (T::*cb)(const NDR&, const NDR&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNDR<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyClass::begin_opNDR.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDR.
 */
template<class T, typename CT>
class Callback_MyClass_opNDR : public Callback_MyClass_opNDR_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const NDR&, const NDR&, const CT&);

    Callback_MyClass_opNDR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NDR iceP_o;
        NDR ret;
        try
        {
            ret = proxy->end_opNDR(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_o, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDR.
 */
template<class T, typename CT> Callback_MyClass_opNDRPtr
newCallback_MyClass_opNDR(const IceUtil::Handle<T>& instance, void (T::*cb)(const NDR&, const NDR&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNDR<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDR.
 */
template<class T, typename CT> Callback_MyClass_opNDRPtr
newCallback_MyClass_opNDR(T* instance, void (T::*cb)(const NDR&, const NDR&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNDR<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyClass::begin_opNDAIS.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDAIS.
 */
template<class T>
class CallbackNC_MyClass_opNDAIS : public Callback_MyClass_opNDAIS_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const NDAIS&, const NDAIS&);

    CallbackNC_MyClass_opNDAIS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NDAIS iceP_o;
        NDAIS ret;
        try
        {
            ret = proxy->end_opNDAIS(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_o);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDAIS.
 */
template<class T> Callback_MyClass_opNDAISPtr
newCallback_MyClass_opNDAIS(const IceUtil::Handle<T>& instance, void (T::*cb)(const NDAIS&, const NDAIS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNDAIS<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDAIS.
 */
template<class T> Callback_MyClass_opNDAISPtr
newCallback_MyClass_opNDAIS(T* instance, void (T::*cb)(const NDAIS&, const NDAIS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNDAIS<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyClass::begin_opNDAIS.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDAIS.
 */
template<class T, typename CT>
class Callback_MyClass_opNDAIS : public Callback_MyClass_opNDAIS_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const NDAIS&, const NDAIS&, const CT&);

    Callback_MyClass_opNDAIS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NDAIS iceP_o;
        NDAIS ret;
        try
        {
            ret = proxy->end_opNDAIS(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_o, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDAIS.
 */
template<class T, typename CT> Callback_MyClass_opNDAISPtr
newCallback_MyClass_opNDAIS(const IceUtil::Handle<T>& instance, void (T::*cb)(const NDAIS&, const NDAIS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNDAIS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDAIS.
 */
template<class T, typename CT> Callback_MyClass_opNDAISPtr
newCallback_MyClass_opNDAIS(T* instance, void (T::*cb)(const NDAIS&, const NDAIS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNDAIS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyClass::begin_opNDGIS.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDGIS.
 */
template<class T>
class CallbackNC_MyClass_opNDGIS : public Callback_MyClass_opNDGIS_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const NDGIS&, const NDGIS&);

    CallbackNC_MyClass_opNDGIS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NDGIS iceP_o;
        NDGIS ret;
        try
        {
            ret = proxy->end_opNDGIS(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_o);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDGIS.
 */
template<class T> Callback_MyClass_opNDGISPtr
newCallback_MyClass_opNDGIS(const IceUtil::Handle<T>& instance, void (T::*cb)(const NDGIS&, const NDGIS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNDGIS<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDGIS.
 */
template<class T> Callback_MyClass_opNDGISPtr
newCallback_MyClass_opNDGIS(T* instance, void (T::*cb)(const NDGIS&, const NDGIS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNDGIS<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyClass::begin_opNDGIS.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDGIS.
 */
template<class T, typename CT>
class Callback_MyClass_opNDGIS : public Callback_MyClass_opNDGIS_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const NDGIS&, const NDGIS&, const CT&);

    Callback_MyClass_opNDGIS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NDGIS iceP_o;
        NDGIS ret;
        try
        {
            ret = proxy->end_opNDGIS(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_o, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDGIS.
 */
template<class T, typename CT> Callback_MyClass_opNDGISPtr
newCallback_MyClass_opNDGIS(const IceUtil::Handle<T>& instance, void (T::*cb)(const NDGIS&, const NDGIS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNDGIS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDGIS.
 */
template<class T, typename CT> Callback_MyClass_opNDGISPtr
newCallback_MyClass_opNDGIS(T* instance, void (T::*cb)(const NDGIS&, const NDGIS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNDGIS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyClass::begin_opNDASS.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDASS.
 */
template<class T>
class CallbackNC_MyClass_opNDASS : public Callback_MyClass_opNDASS_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const NDASS&, const NDASS&);

    CallbackNC_MyClass_opNDASS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NDASS iceP_o;
        NDASS ret;
        try
        {
            ret = proxy->end_opNDASS(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_o);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDASS.
 */
template<class T> Callback_MyClass_opNDASSPtr
newCallback_MyClass_opNDASS(const IceUtil::Handle<T>& instance, void (T::*cb)(const NDASS&, const NDASS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNDASS<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDASS.
 */
template<class T> Callback_MyClass_opNDASSPtr
newCallback_MyClass_opNDASS(T* instance, void (T::*cb)(const NDASS&, const NDASS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNDASS<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyClass::begin_opNDASS.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDASS.
 */
template<class T, typename CT>
class Callback_MyClass_opNDASS : public Callback_MyClass_opNDASS_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const NDASS&, const NDASS&, const CT&);

    Callback_MyClass_opNDASS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NDASS iceP_o;
        NDASS ret;
        try
        {
            ret = proxy->end_opNDASS(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_o, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDASS.
 */
template<class T, typename CT> Callback_MyClass_opNDASSPtr
newCallback_MyClass_opNDASS(const IceUtil::Handle<T>& instance, void (T::*cb)(const NDASS&, const NDASS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNDASS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDASS.
 */
template<class T, typename CT> Callback_MyClass_opNDASSPtr
newCallback_MyClass_opNDASS(T* instance, void (T::*cb)(const NDASS&, const NDASS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNDASS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyClass::begin_opNDGSS.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDGSS.
 */
template<class T>
class CallbackNC_MyClass_opNDGSS : public Callback_MyClass_opNDGSS_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const NDGSS&, const NDGSS&);

    CallbackNC_MyClass_opNDGSS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NDGSS iceP_o;
        NDGSS ret;
        try
        {
            ret = proxy->end_opNDGSS(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_o);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDGSS.
 */
template<class T> Callback_MyClass_opNDGSSPtr
newCallback_MyClass_opNDGSS(const IceUtil::Handle<T>& instance, void (T::*cb)(const NDGSS&, const NDGSS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNDGSS<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDGSS.
 */
template<class T> Callback_MyClass_opNDGSSPtr
newCallback_MyClass_opNDGSS(T* instance, void (T::*cb)(const NDGSS&, const NDGSS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opNDGSS<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyClass::begin_opNDGSS.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opNDGSS.
 */
template<class T, typename CT>
class Callback_MyClass_opNDGSS : public Callback_MyClass_opNDGSS_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const NDGSS&, const NDGSS&, const CT&);

    Callback_MyClass_opNDGSS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        NDGSS iceP_o;
        NDGSS ret;
        try
        {
            ret = proxy->end_opNDGSS(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_o, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDGSS.
 */
template<class T, typename CT> Callback_MyClass_opNDGSSPtr
newCallback_MyClass_opNDGSS(const IceUtil::Handle<T>& instance, void (T::*cb)(const NDGSS&, const NDGSS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNDGSS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opNDGSS.
 */
template<class T, typename CT> Callback_MyClass_opNDGSSPtr
newCallback_MyClass_opNDGSS(T* instance, void (T::*cb)(const NDGSS&, const NDGSS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opNDGSS<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
