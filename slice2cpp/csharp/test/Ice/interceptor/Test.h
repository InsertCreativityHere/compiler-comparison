//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

class MyObjectPrx;

using MyObjectPrxPtr = ::std::optional<MyObjectPrx>;

}

namespace Test
{

class MyObjectPrx : public ::Ice::Proxy<MyObjectPrx, ::Ice::ObjectPrx>
{
public:

    ::std::int32_t add(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::int32_t> addAsync(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    addAsync(::std::int32_t x, ::std::int32_t y, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_add(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>&, ::std::int32_t, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    ::std::int32_t addWithRetry(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::int32_t> addWithRetryAsync(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    addWithRetryAsync(::std::int32_t x, ::std::int32_t y, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_addWithRetry(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>&, ::std::int32_t, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    ::std::int32_t badAdd(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::int32_t> badAddAsync(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    badAddAsync(::std::int32_t x, ::std::int32_t y, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_badAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>&, ::std::int32_t, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    ::std::int32_t notExistAdd(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::int32_t> notExistAddAsync(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    notExistAddAsync(::std::int32_t x, ::std::int32_t y, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_notExistAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>&, ::std::int32_t, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    ::std::int32_t badSystemAdd(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::int32_t> badSystemAddAsync(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    badSystemAddAsync(::std::int32_t x, ::std::int32_t y, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_badSystemAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>&, ::std::int32_t, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    ::std::int32_t amdAdd(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::int32_t> amdAddAsync(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    amdAddAsync(::std::int32_t x, ::std::int32_t y, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_amdAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>&, ::std::int32_t, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    ::std::int32_t amdAddWithRetry(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::int32_t> amdAddWithRetryAsync(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    amdAddWithRetryAsync(::std::int32_t x, ::std::int32_t y, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_amdAddWithRetry(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>&, ::std::int32_t, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    ::std::int32_t amdBadAdd(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::int32_t> amdBadAddAsync(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    amdBadAddAsync(::std::int32_t x, ::std::int32_t y, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_amdBadAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>&, ::std::int32_t, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    ::std::int32_t amdNotExistAdd(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::int32_t> amdNotExistAddAsync(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    amdNotExistAddAsync(::std::int32_t x, ::std::int32_t y, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_amdNotExistAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>&, ::std::int32_t, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    ::std::int32_t amdBadSystemAdd(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::int32_t> amdBadSystemAddAsync(::std::int32_t x, ::std::int32_t y, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    amdBadSystemAddAsync(::std::int32_t x, ::std::int32_t y, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_amdBadSystemAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>&, ::std::int32_t, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    explicit MyObjectPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    MyObjectPrx(const MyObjectPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    MyObjectPrx(MyObjectPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    MyObjectPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    MyObjectPrx& operator=(const MyObjectPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    MyObjectPrx& operator=(MyObjectPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static MyObjectPrx _fromReference(::IceInternal::ReferencePtr ref) { return MyObjectPrx(::std::move(ref)); }

protected:

    MyObjectPrx() = default;

    explicit MyObjectPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace Test
{

class InvalidInputException : public ::Ice::UserExceptionHelper<InvalidInputException, ::Ice::UserException>
{
public:

    InvalidInputException() noexcept = default;

    InvalidInputException(const InvalidInputException&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    InvalidInputException(::std::string message) noexcept :
        message(::std::move(message))
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(message);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    ::std::string message;
};

/// \cond INTERNAL
static InvalidInputException _iceS_InvalidInputException_init;
/// \endcond

}

namespace Test
{

class MyObject : public virtual ::Ice::Object
{
public:

    using ProxyType = MyObjectPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    virtual ::std::int32_t add(::std::int32_t x, ::std::int32_t y, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_add(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::std::int32_t addWithRetry(::std::int32_t x, ::std::int32_t y, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_addWithRetry(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::std::int32_t badAdd(::std::int32_t x, ::std::int32_t y, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_badAdd(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::std::int32_t notExistAdd(::std::int32_t x, ::std::int32_t y, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_notExistAdd(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual ::std::int32_t badSystemAdd(::std::int32_t x, ::std::int32_t y, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_badSystemAdd(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual void amdAddAsync(::std::int32_t x, ::std::int32_t y, ::std::function<void(::std::int32_t returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_amdAdd(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual void amdAddWithRetryAsync(::std::int32_t x, ::std::int32_t y, ::std::function<void(::std::int32_t returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_amdAddWithRetry(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual void amdBadAddAsync(::std::int32_t x, ::std::int32_t y, ::std::function<void(::std::int32_t returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_amdBadAdd(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual void amdNotExistAddAsync(::std::int32_t x, ::std::int32_t y, ::std::function<void(::std::int32_t returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_amdNotExistAdd(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    virtual void amdBadSystemAddAsync(::std::int32_t x, ::std::int32_t y, ::std::function<void(::std::int32_t returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_amdBadSystemAdd(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using MyObjectPtr = ::std::shared_ptr<MyObject>;

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::Test::InvalidInputException, S>
{
    static void read(S* istr, ::Test::InvalidInputException& v)
    {
        istr->readAll(v.message);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
