//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::BaseException> iceC_Test_BaseException_init("::Test::BaseException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::InvalidPointException> iceC_Test_InvalidPointException_init("::Test::InvalidPointException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::InvalidLengthException> iceC_Test_InvalidLengthException_init("::Test::InvalidLengthException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::OtherException> iceC_Test_OtherException_init("::Test::OtherException");

const ::IceInternal::DefaultValueFactoryInit<::Test::Pen> iceC_Test_Pen_init("::Test::Pen");

}

Test::BaseException::~BaseException()
{
}

const ::std::string&
Test::BaseException::ice_staticId()
{
    static const ::std::string typeId = "::Test::BaseException";
    return typeId;
}

Test::InvalidPointException::~InvalidPointException()
{
}

const ::std::string&
Test::InvalidPointException::ice_staticId()
{
    static const ::std::string typeId = "::Test::InvalidPointException";
    return typeId;
}

Test::InvalidLengthException::~InvalidLengthException()
{
}

const ::std::string&
Test::InvalidLengthException::ice_staticId()
{
    static const ::std::string typeId = "::Test::InvalidLengthException";
    return typeId;
}

Test::OtherException::~OtherException()
{
}

const ::std::string&
Test::OtherException::ice_staticId()
{
    static const ::std::string typeId = "::Test::OtherException";
    return typeId;
}

Test::Pen::~Pen()
{
}

const ::std::string&
Test::Pen::ice_staticId()
{
    static const ::std::string typeId = "::Test::Pen";
    return typeId;
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::Pen> iceC_Test_Pen_init("::Test::Pen");

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::BaseException> iceC_Test_BaseException_init("::Test::BaseException");

}
Test::BaseException::~BaseException()
{
}

::std::string
Test::BaseException::ice_id() const
{
    return "::Test::BaseException";
}

Test::BaseException*
Test::BaseException::ice_clone() const
{
    return new BaseException(*this);
}

void
Test::BaseException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::BaseException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::BaseException", -1, true);
    ::Ice::StreamWriter< BaseException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::BaseException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< BaseException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::InvalidPointException> iceC_Test_InvalidPointException_init("::Test::InvalidPointException");

}

Test::InvalidPointException::InvalidPointException(::Ice::Int index) :
    BaseException(),
    index(index)
{
}
Test::InvalidPointException::~InvalidPointException()
{
}

::std::string
Test::InvalidPointException::ice_id() const
{
    return "::Test::InvalidPointException";
}

Test::InvalidPointException*
Test::InvalidPointException::ice_clone() const
{
    return new InvalidPointException(*this);
}

void
Test::InvalidPointException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::InvalidPointException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::InvalidPointException", -1, false);
    ::Ice::StreamWriter< InvalidPointException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    BaseException::_writeImpl(ostr);
}

void
Test::InvalidPointException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< InvalidPointException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    BaseException::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::InvalidLengthException> iceC_Test_InvalidLengthException_init("::Test::InvalidLengthException");

}

Test::InvalidLengthException::InvalidLengthException(::Ice::Int length) :
    BaseException(),
    length(length)
{
}
Test::InvalidLengthException::~InvalidLengthException()
{
}

::std::string
Test::InvalidLengthException::ice_id() const
{
    return "::Test::InvalidLengthException";
}

Test::InvalidLengthException*
Test::InvalidLengthException::ice_clone() const
{
    return new InvalidLengthException(*this);
}

void
Test::InvalidLengthException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::InvalidLengthException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::InvalidLengthException", -1, false);
    ::Ice::StreamWriter< InvalidLengthException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    BaseException::_writeImpl(ostr);
}

void
Test::InvalidLengthException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< InvalidLengthException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    BaseException::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::OtherException> iceC_Test_OtherException_init("::Test::OtherException");

}

Test::OtherException::OtherException(::Ice::Int x, ::Ice::Int y, ::Ice::Int z, bool b) :
    ::Ice::UserException(),
    x(x),
    y(y),
    z(z),
    b(b)
{
}
Test::OtherException::~OtherException()
{
}

::std::string
Test::OtherException::ice_id() const
{
    return "::Test::OtherException";
}

Test::OtherException*
Test::OtherException::ice_clone() const
{
    return new OtherException(*this);
}

void
Test::OtherException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::OtherException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::OtherException", -1, true);
    ::Ice::StreamWriter< OtherException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::OtherException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< OtherException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

Test::Pen::~Pen()
{
}

const ::std::string&
Test::Pen::ice_staticId()
{
    static const ::std::string typeId = "::Test::Pen";
    return typeId;
}

namespace Ice
{
}

#endif
