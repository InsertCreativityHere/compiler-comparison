//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::BaseException> iceC_Test_BaseException_init("::Test::BaseException");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::InvalidPointException> iceC_Test_InvalidPointException_init("::Test::InvalidPointException");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::InvalidLengthException> iceC_Test_InvalidLengthException_init("::Test::InvalidLengthException");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::OtherException> iceC_Test_OtherException_init("::Test::OtherException");
    const ::IceInternal::DefaultValueFactoryInit<::Test::Pen> iceC_Test_Pen_init("::Test::Pen");
}

::std::string_view
Test::BaseException::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::BaseException";
    return typeId;
}

::std::string
Test::BaseException::ice_id() const
{
    return ::std::string{ice_staticId()};
}

void
Test::BaseException::ice_throw() const
{
    throw *this;
}

void
Test::BaseException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->endSlice();
}

void
Test::BaseException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
}

::std::string_view
Test::InvalidPointException::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::InvalidPointException";
    return typeId;
}

::std::string
Test::InvalidPointException::ice_id() const
{
    return ::std::string{ice_staticId()};
}

void
Test::InvalidPointException::ice_throw() const
{
    throw *this;
}

void
Test::InvalidPointException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<InvalidPointException>::write(ostr, *this);
    ostr->endSlice();
    BaseException::_writeImpl(ostr);
}

void
Test::InvalidPointException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<InvalidPointException>::read(istr, *this);
    istr->endSlice();
    BaseException::_readImpl(istr);
}

::std::string_view
Test::InvalidLengthException::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::InvalidLengthException";
    return typeId;
}

::std::string
Test::InvalidLengthException::ice_id() const
{
    return ::std::string{ice_staticId()};
}

void
Test::InvalidLengthException::ice_throw() const
{
    throw *this;
}

void
Test::InvalidLengthException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<InvalidLengthException>::write(ostr, *this);
    ostr->endSlice();
    BaseException::_writeImpl(ostr);
}

void
Test::InvalidLengthException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<InvalidLengthException>::read(istr, *this);
    istr->endSlice();
    BaseException::_readImpl(istr);
}

::std::string_view
Test::OtherException::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::OtherException";
    return typeId;
}

::std::string
Test::OtherException::ice_id() const
{
    return ::std::string{ice_staticId()};
}

void
Test::OtherException::ice_throw() const
{
    throw *this;
}

void
Test::OtherException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<OtherException>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::OtherException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<OtherException>::read(istr, *this);
    istr->endSlice();
}

::std::string
Test::Pen::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::Pen::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::Pen";
    return typeId;
}

::Ice::ValuePtr
Test::Pen::_iceCloneImpl() const
{
    return CloneEnabler<Pen>::clone(*this);
}

void
Test::Pen::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<Pen>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Pen::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<Pen>::read(istr, *this);
    istr->endSlice();
}
