//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

struct PointF;
struct PointD;
struct Point;
struct Polyline;
struct Color;
struct ColorPalette;
class Pen;
struct Draw;

}

namespace Test
{

using Points = ::std::vector<Point>;

using StringColorMap = ::std::map<int, Color>;

}

namespace Test
{

struct PointF
{
    float x;
    float y;
    float z;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y, z);
    }
};

struct PointD
{
    double x;
    double y;
    double z;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const double&, const double&, const double&> ice_tuple() const
    {
        return std::tie(x, y, z);
    }
};

struct Point
{
    int x;
    int y;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&> ice_tuple() const
    {
        return std::tie(x, y);
    }
};

struct Polyline
{
    ::Test::Points vertices;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::Points&> ice_tuple() const
    {
        return std::tie(vertices);
    }
};

struct Color
{
    int r;
    int g;
    int b;
    int a;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(r, g, b, a);
    }
};

struct ColorPalette
{
    ::Test::StringColorMap colors;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::StringColorMap&> ice_tuple() const
    {
        return std::tie(colors);
    }
};

struct Draw
{
    ::Test::Color backgroundColor;
    ::std::shared_ptr<::Test::Pen> pen;
    bool shared;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::Color&, const ::std::shared_ptr<::Test::Pen>&, const bool&> ice_tuple() const
    {
        return std::tie(backgroundColor, pen, shared);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test
{

class Pen : public ::Ice::ValueHelper<Pen, ::Ice::Value>
{
public:

    virtual ~Pen();

    Pen() = default;

    Pen(const Pen&) = default;
    Pen(Pen&&) = default;
    Pen& operator=(const Pen&) = default;
    Pen& operator=(Pen&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Pen(int thickness, const ::Test::Color& color) :
        thickness(thickness),
        color(color)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const ::Test::Color&> ice_tuple() const
    {
        return std::tie(thickness, color);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int thickness;
    ::Test::Color color;
};

/// \cond INTERNAL
static Pen _iceS_Pen_init;
/// \endcond

}

namespace Test
{

class BaseException : public ::Ice::UserExceptionHelper<BaseException, ::Ice::UserException>
{
public:

    virtual ~BaseException();

    BaseException(const BaseException&) = default;

    BaseException() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

/// \cond INTERNAL
static BaseException _iceS_BaseException_init;
/// \endcond

class InvalidPointException : public ::Ice::UserExceptionHelper<InvalidPointException, BaseException>
{
public:

    virtual ~InvalidPointException();

    InvalidPointException(const InvalidPointException&) = default;

    InvalidPointException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    InvalidPointException(int index) :
        ::Ice::UserExceptionHelper<InvalidPointException, BaseException>(),
        index(index)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(index);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int index;
};

class InvalidLengthException : public ::Ice::UserExceptionHelper<InvalidLengthException, BaseException>
{
public:

    virtual ~InvalidLengthException();

    InvalidLengthException(const InvalidLengthException&) = default;

    InvalidLengthException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    InvalidLengthException(int length) :
        ::Ice::UserExceptionHelper<InvalidLengthException, BaseException>(),
        length(length)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(length);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int length;
};

class OtherException : public ::Ice::UserExceptionHelper<OtherException, ::Ice::UserException>
{
public:

    virtual ~OtherException();

    OtherException(const OtherException&) = default;

    OtherException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    OtherException(int x, int y, int z, bool b) :
        x(x),
        y(y),
        z(z),
        b(b)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&, const bool&> ice_tuple() const
    {
        return std::tie(x, y, z, b);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int x;
    int y;
    int z;
    bool b;
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::Test::InvalidPointException, S>
{
    static void read(S* istr, ::Test::InvalidPointException& v)
    {
        istr->readAll(v.index);
    }
};

template<typename S>
struct StreamReader<::Test::InvalidLengthException, S>
{
    static void read(S* istr, ::Test::InvalidLengthException& v)
    {
        istr->readAll(v.length);
    }
};

template<typename S>
struct StreamReader<::Test::OtherException, S>
{
    static void read(S* istr, ::Test::OtherException& v)
    {
        istr->readAll(v.x, v.y, v.z, v.b);
    }
};

template<>
struct StreamableTraits<::Test::PointF>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Test::PointF, S>
{
    static void read(S* istr, ::Test::PointF& v)
    {
        istr->readAll(v.x, v.y, v.z);
    }
};

template<>
struct StreamableTraits<::Test::PointD>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Test::PointD, S>
{
    static void read(S* istr, ::Test::PointD& v)
    {
        istr->readAll(v.x, v.y, v.z);
    }
};

template<>
struct StreamableTraits<::Test::Point>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Test::Point, S>
{
    static void read(S* istr, ::Test::Point& v)
    {
        istr->readAll(v.x, v.y);
    }
};

template<>
struct StreamableTraits<::Test::Polyline>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::Polyline, S>
{
    static void read(S* istr, ::Test::Polyline& v)
    {
        istr->readAll(v.vertices);
    }
};

template<>
struct StreamableTraits<::Test::Color>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Test::Color, S>
{
    static void read(S* istr, ::Test::Color& v)
    {
        istr->readAll(v.r, v.g, v.b, v.a);
    }
};

template<>
struct StreamableTraits<::Test::ColorPalette>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::ColorPalette, S>
{
    static void read(S* istr, ::Test::ColorPalette& v)
    {
        istr->readAll(v.colors);
    }
};

template<typename S>
struct StreamReader<::Test::Pen, S>
{
    static void read(S* istr, ::Test::Pen& v)
    {
        istr->readAll(v.thickness, v.color);
    }
};

template<>
struct StreamableTraits<::Test::Draw>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 18;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::Draw, S>
{
    static void read(S* istr, ::Test::Draw& v)
    {
        istr->readAll(v.backgroundColor, v.pen, v.shared);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using PenPtr = ::std::shared_ptr<Pen>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
