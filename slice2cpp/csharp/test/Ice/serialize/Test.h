//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <Ice/BuiltinSequences.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{

class MyClass;
class MyInterface;
class MyInterfacePrx;
class Base;

}

namespace Test
{

enum class MyEnum : unsigned char
{
    enum1,
    enum2,
    enum3
};

struct ValStruct
{
    bool bo;
    ::Ice::Byte by;
    short sh;
    int i;
    long long int l;
    ::Test::MyEnum e;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const ::Ice::Byte&, const short&, const int&, const long long int&, const ::Test::MyEnum&> ice_tuple() const
    {
        return std::tie(bo, by, sh, i, l, e);
    }
};

using ProxySeq = ::std::vector<::std::shared_ptr<MyInterfacePrx>>;

struct RefStruct
{
    ::std::string s;
    ::std::string sp;
    ::std::shared_ptr<::Test::MyClass> c;
    ::std::shared_ptr<::Test::MyInterfacePrx> p;
    ::Test::ProxySeq seq;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&, const ::std::shared_ptr<::Test::MyClass>&, const ::std::shared_ptr<::Test::MyInterfacePrx>&, const ::Test::ProxySeq&> ice_tuple() const
    {
        return std::tie(s, sp, c, p, seq);
    }
};

using ValStructS = ::std::vector<ValStruct>;

using ValStructList = ::std::vector<ValStruct>;

using ValStructLinkedList = ::std::vector<ValStruct>;

using ValStructStack = ::std::vector<ValStruct>;

using ValStructQueue = ::std::vector<ValStruct>;

using IntStringD = ::std::map<int, ::std::string>;

using IntValStructD = ::std::map<int, ValStruct>;

using IntProxyD = ::std::map<int, ::std::shared_ptr<MyInterfacePrx>>;

using IntStringSD = ::std::map<int, ::std::string>;

class MyException : public ::Ice::UserExceptionHelper<MyException, ::Ice::UserException>
{
public:

    virtual ~MyException();

    MyException(const MyException&) = default;

    MyException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    MyException(const ::std::string& name, ::Ice::Byte b, short s, int i, long long int l, const ValStruct& vs, const RefStruct& rs, const ::std::shared_ptr<MyClass>& c, const ::std::shared_ptr<MyInterfacePrx>& p, const ValStructS& vss, const ValStructList& vsl, const ValStructLinkedList& vsll, const ValStructStack& vssk, const ValStructQueue& vsq, const IntStringD& isd, const IntValStructD& ivd, const IntProxyD& ipd, const IntStringSD& issd, const Ice::optional<::std::string>& optName, const Ice::optional<int>& optInt, const Ice::optional<ValStruct>& optValStruct, const Ice::optional<RefStruct>& optRefStruct, const Ice::optional<MyEnum>& optEnum, const Ice::optional<::std::shared_ptr<MyClass>>& optClass, const Ice::optional<::std::shared_ptr<MyInterfacePrx>>& optProxy) :
        name(name),
        b(b),
        s(s),
        i(i),
        l(l),
        vs(vs),
        rs(rs),
        c(c),
        p(p),
        vss(vss),
        vsl(vsl),
        vsll(vsll),
        vssk(vssk),
        vsq(vsq),
        isd(isd),
        ivd(ivd),
        ipd(ipd),
        issd(issd),
        optName(optName),
        optInt(optInt),
        optValStruct(optValStruct),
        optRefStruct(optRefStruct),
        optEnum(optEnum),
        optClass(optClass),
        optProxy(optProxy)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::Ice::Byte&, const short&, const int&, const long long int&, const ::Test::ValStruct&, const ::Test::RefStruct&, const ::std::shared_ptr<::Test::MyClass>&, const ::std::shared_ptr<::Test::MyInterfacePrx>&, const ::Test::ValStructS&, const ::Test::ValStructList&, const ::Test::ValStructLinkedList&, const ::Test::ValStructStack&, const ::Test::ValStructQueue&, const ::Test::IntStringD&, const ::Test::IntValStructD&, const ::Test::IntProxyD&, const ::Test::IntStringSD&, const Ice::optional<::std::string>&, const Ice::optional<int>&, const Ice::optional<::Test::ValStruct>&, const Ice::optional<::Test::RefStruct>&, const Ice::optional<::Test::MyEnum>&, const Ice::optional<::std::shared_ptr<::Test::MyClass>>&, const Ice::optional<::std::shared_ptr<::Test::MyInterfacePrx>>&> ice_tuple() const
    {
        return std::tie(name, b, s, i, l, vs, rs, c, p, vss, vsl, vsll, vssk, vsq, isd, ivd, ipd, issd, optName, optInt, optValStruct, optRefStruct, optEnum, optClass, optProxy);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond STREAM
    virtual bool _usesClasses() const override;
    /// \endcond

    ::std::string name;
    ::Ice::Byte b;
    short s;
    int i;
    long long int l;
    ::Test::ValStruct vs;
    ::Test::RefStruct rs;
    ::std::shared_ptr<::Test::MyClass> c;
    ::std::shared_ptr<::Test::MyInterfacePrx> p;
    ::Test::ValStructS vss;
    ::Test::ValStructList vsl;
    ::Test::ValStructLinkedList vsll;
    ::Test::ValStructStack vssk;
    ::Test::ValStructQueue vsq;
    ::Test::IntStringD isd;
    ::Test::IntValStructD ivd;
    ::Test::IntProxyD ipd;
    ::Test::IntStringSD issd;
    Ice::optional<::std::string> optName;
    Ice::optional<int> optInt;
    Ice::optional<::Test::ValStruct> optValStruct;
    Ice::optional<::Test::RefStruct> optRefStruct;
    Ice::optional<::Test::MyEnum> optEnum;
    Ice::optional<::std::shared_ptr<::Test::MyClass>> optClass;
    Ice::optional<::std::shared_ptr<::Test::MyInterfacePrx>> optProxy;
};

/// \cond INTERNAL
static MyException _iceS_MyException_init;
/// \endcond

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test
{

class MyInterface : public virtual ::Ice::Object
{
public:

    using ProxyType = MyInterfacePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void op(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test
{

class Base : public ::Ice::ValueHelper<Base, ::Ice::Value>
{
public:

    virtual ~Base();

    Base() = default;

    Base(const Base&) = default;
    Base(Base&&) = default;
    Base& operator=(const Base&) = default;
    Base& operator=(Base&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Base(bool bo, ::Ice::Byte by, short sh, int i, long long int l, ::Test::MyEnum e) :
        bo(bo),
        by(by),
        sh(sh),
        i(i),
        l(l),
        e(e)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const ::Ice::Byte&, const short&, const int&, const long long int&, const ::Test::MyEnum&> ice_tuple() const
    {
        return std::tie(bo, by, sh, i, l, e);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    bool bo;
    ::Ice::Byte by;
    short sh;
    int i;
    long long int l;
    ::Test::MyEnum e;
};

/// \cond INTERNAL
static Base _iceS_Base_init;
/// \endcond

class MyClass : public ::Ice::ValueHelper<MyClass, Base>
{
public:

    virtual ~MyClass();

    MyClass() = default;

    MyClass(const MyClass&) = default;
    MyClass(MyClass&&) = default;
    MyClass& operator=(const MyClass&) = default;
    MyClass& operator=(MyClass&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    MyClass(bool bo, ::Ice::Byte by, short sh, int i, long long int l, ::Test::MyEnum e, const ::std::shared_ptr<::Test::MyClass>& c, const ::std::shared_ptr<::Ice::Value>& o, const ::Test::ValStruct& s) :
        Ice::ValueHelper<MyClass, Base>(bo, by, sh, i, l, e),
        c(c),
        o(o),
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const ::Ice::Byte&, const short&, const int&, const long long int&, const ::Test::MyEnum&, const ::std::shared_ptr<::Test::MyClass>&, const ::std::shared_ptr<::Ice::Value>&, const ::Test::ValStruct&> ice_tuple() const
    {
        return std::tie(bo, by, sh, i, l, e, c, o, s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::MyClass> c;
    ::std::shared_ptr<::Ice::Value> o;
    ::Test::ValStruct s;
};

}

namespace Test
{

class MyInterfacePrx : public virtual ::Ice::Proxy<MyInterfacePrx, ::Ice::ObjectPrx>
{
public:

    void op(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &MyInterfacePrx::_iceI_op, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &MyInterfacePrx::_iceI_op, context);
    }

    ::std::function<void()>
    opAsync(::std::function<void()> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyInterfacePrx::_iceI_op, context);
    }

    /// \cond INTERNAL
    void _iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    MyInterfacePrx() = default;
    friend ::std::shared_ptr<MyInterfacePrx> IceInternal::createProxy<MyInterfacePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Test::MyEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::Test::ValStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 17;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::ValStruct, S>
{
    static void read(S* istr, ::Test::ValStruct& v)
    {
        istr->readAll(v.bo, v.by, v.sh, v.i, v.l, v.e);
    }
};

template<>
struct StreamableTraits<::Test::RefStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::RefStruct, S>
{
    static void read(S* istr, ::Test::RefStruct& v)
    {
        istr->readAll(v.s, v.sp, v.c, v.p, v.seq);
    }
};

template<typename S>
struct StreamReader<::Test::Base, S>
{
    static void read(S* istr, ::Test::Base& v)
    {
        istr->readAll(v.bo, v.by, v.sh, v.i, v.l, v.e);
    }
};

template<typename S>
struct StreamWriter<::Test::MyClass, S>
{
    static void write(S* ostr, const ::Test::MyClass& v)
    {
        ostr->writeAll(v.c, v.o, v.s);
    }
};

template<typename S>
struct StreamReader<::Test::MyClass, S>
{
    static void read(S* istr, ::Test::MyClass& v)
    {
        istr->readAll(v.c, v.o, v.s);
    }
};

template<typename S>
struct StreamWriter<::Test::MyException, S>
{
    static void write(S* ostr, const ::Test::MyException& v)
    {
        ostr->writeAll(v.name, v.b, v.s, v.i, v.l, v.vs, v.rs, v.c, v.p, v.vss, v.vsl, v.vsll, v.vssk, v.vsq, v.isd, v.ivd, v.ipd, v.issd);
        ostr->writeAll({1, 2, 3, 4, 5, 6, 7}, v.optName, v.optInt, v.optValStruct, v.optRefStruct, v.optEnum, v.optClass, v.optProxy);
    }
};

template<typename S>
struct StreamReader<::Test::MyException, S>
{
    static void read(S* istr, ::Test::MyException& v)
    {
        istr->readAll(v.name, v.b, v.s, v.i, v.l, v.vs, v.rs, v.c, v.p, v.vss, v.vsl, v.vsll, v.vssk, v.vsq, v.isd, v.ivd, v.ipd, v.issd);
        istr->readAll({1, 2, 3, 4, 5, 6, 7}, v.optName, v.optInt, v.optValStruct, v.optRefStruct, v.optEnum, v.optClass, v.optProxy);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using MyClassPtr = ::std::shared_ptr<MyClass>;

using MyInterfacePtr = ::std::shared_ptr<MyInterface>;
using MyInterfacePrxPtr = ::std::shared_ptr<MyInterfacePrx>;

using BasePtr = ::std::shared_ptr<Base>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Test
{

class MyClass;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< MyClass>&);
::IceProxy::Ice::Object* upCast(MyClass*);
/// \endcond

class MyInterface;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< MyInterface>&);
::IceProxy::Ice::Object* upCast(MyInterface*);
/// \endcond

class Base;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Base>&);
::IceProxy::Ice::Object* upCast(Base*);
/// \endcond

}

}

namespace Test
{

class MyClass;
/// \cond INTERNAL
::Ice::Object* upCast(MyClass*);
/// \endcond
typedef ::IceInternal::Handle< MyClass> MyClassPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::MyClass> MyClassPrx;
typedef MyClassPrx MyClassPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(MyClassPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class MyInterface;
/// \cond INTERNAL
::Ice::Object* upCast(MyInterface*);
/// \endcond
typedef ::IceInternal::Handle< MyInterface> MyInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::MyInterface> MyInterfacePrx;
typedef MyInterfacePrx MyInterfacePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(MyInterfacePtr&, const ::Ice::ObjectPtr&);
/// \endcond

class Base;
/// \cond INTERNAL
::Ice::Object* upCast(Base*);
/// \endcond
typedef ::IceInternal::Handle< Base> BasePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Base> BasePrx;
typedef BasePrx BasePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(BasePtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Test
{

enum MyEnum
{
    enum1,
    enum2,
    enum3
};

struct ValStruct
{
    bool bo;
    ::Ice::Byte by;
    ::Ice::Short sh;
    ::Ice::Int i;
    ::Ice::Long l;
    ::Test::MyEnum e;

    bool operator==(const ValStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(bo != rhs_.bo)
        {
            return false;
        }
        if(by != rhs_.by)
        {
            return false;
        }
        if(sh != rhs_.sh)
        {
            return false;
        }
        if(i != rhs_.i)
        {
            return false;
        }
        if(l != rhs_.l)
        {
            return false;
        }
        if(e != rhs_.e)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ValStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(bo < rhs_.bo)
        {
            return true;
        }
        else if(rhs_.bo < bo)
        {
            return false;
        }
        if(by < rhs_.by)
        {
            return true;
        }
        else if(rhs_.by < by)
        {
            return false;
        }
        if(sh < rhs_.sh)
        {
            return true;
        }
        else if(rhs_.sh < sh)
        {
            return false;
        }
        if(i < rhs_.i)
        {
            return true;
        }
        else if(rhs_.i < i)
        {
            return false;
        }
        if(l < rhs_.l)
        {
            return true;
        }
        else if(rhs_.l < l)
        {
            return false;
        }
        if(e < rhs_.e)
        {
            return true;
        }
        else if(rhs_.e < e)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ValStruct& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const ValStruct& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const ValStruct& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const ValStruct& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector<MyInterfacePrx> ProxySeq;

struct RefStruct
{
    ::std::string s;
    ::std::string sp;
    ::Test::MyClassPtr c;
    ::Test::MyInterfacePrx p;
    ::Test::ProxySeq seq;
};

typedef ::std::vector<ValStruct> ValStructS;

typedef ::std::vector<ValStruct> ValStructList;

typedef ::std::vector<ValStruct> ValStructLinkedList;

typedef ::std::vector<ValStruct> ValStructStack;

typedef ::std::vector<ValStruct> ValStructQueue;

typedef ::std::map< ::Ice::Int, ::std::string> IntStringD;

typedef ::std::map< ::Ice::Int, ValStruct> IntValStructD;

typedef ::std::map< ::Ice::Int, MyInterfacePrx> IntProxyD;

typedef ::std::map< ::Ice::Int, ::std::string> IntStringSD;

class MyException : public ::Ice::UserException
{
public:

    MyException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    MyException(const ::std::string& name, ::Ice::Byte b, ::Ice::Short s, ::Ice::Int i, ::Ice::Long l, const ValStruct& vs, const RefStruct& rs, const MyClassPtr& c, const MyInterfacePrx& p, const ValStructS& vss, const ValStructList& vsl, const ValStructLinkedList& vsll, const ValStructStack& vssk, const ValStructQueue& vsq, const IntStringD& isd, const IntValStructD& ivd, const IntProxyD& ipd, const IntStringSD& issd, const IceUtil::Optional< ::std::string>& optName, const IceUtil::Optional< ::Ice::Int>& optInt, const IceUtil::Optional<ValStruct>& optValStruct, const IceUtil::Optional<RefStruct>& optRefStruct, const IceUtil::Optional<MyEnum>& optEnum, const IceUtil::Optional<MyClassPtr>& optClass, const IceUtil::Optional<MyInterfacePrx>& optProxy);

#ifdef ICE_CPP11_COMPILER
    MyException(const MyException&) = default;
    virtual ~MyException();
#else
    virtual ~MyException() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual MyException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    /// \cond STREAM
    virtual bool _usesClasses() const;
    /// \endcond

    ::std::string name;
    ::Ice::Byte b;
    ::Ice::Short s;
    ::Ice::Int i;
    ::Ice::Long l;
    ::Test::ValStruct vs;
    ::Test::RefStruct rs;
    ::Test::MyClassPtr c;
    ::Test::MyInterfacePrx p;
    ::Test::ValStructS vss;
    ::Test::ValStructList vsl;
    ::Test::ValStructLinkedList vsll;
    ::Test::ValStructStack vssk;
    ::Test::ValStructQueue vsq;
    ::Test::IntStringD isd;
    ::Test::IntValStructD ivd;
    ::Test::IntProxyD ipd;
    ::Test::IntStringSD issd;
    IceUtil::Optional< ::std::string> optName;
    IceUtil::Optional< ::Ice::Int> optInt;
    IceUtil::Optional< ::Test::ValStruct> optValStruct;
    IceUtil::Optional< ::Test::RefStruct> optRefStruct;
    IceUtil::Optional< ::Test::MyEnum> optEnum;
    IceUtil::Optional< ::Test::MyClassPtr> optClass;
    IceUtil::Optional< ::Test::MyInterfacePrx> optProxy;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static MyException _iceS_MyException_init;
/// \endcond

}

namespace Test
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyInterface::begin_op.
 * Create a wrapper instance by calling ::Test::newCallback_MyInterface_op.
 */
class Callback_MyInterface_op_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyInterface_op_Base> Callback_MyInterface_opPtr;

}

namespace IceProxy
{

namespace Test
{

class MyInterface : public virtual ::Ice::Proxy<MyInterface, ::IceProxy::Ice::Object>
{
public:

    void op(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_op(_iceI_begin_op(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_op(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Test::Callback_MyInterface_opPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& context, const ::Test::Callback_MyInterface_opPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(context, cb, cookie);
    }

    void end_op(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_op(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Base : public virtual ::Ice::Proxy<Base, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class MyClass : public virtual ::Ice::Proxy<MyClass, ::IceProxy::Test::Base>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Test
{

class MyInterface : public virtual ::Ice::Object
{
public:

    typedef MyInterfacePrx ProxyType;
    typedef MyInterfacePtr PointerType;

    virtual ~MyInterface();

#ifdef ICE_CPP11_COMPILER
    MyInterface() = default;
    MyInterface(const MyInterface&) = default;
    MyInterface& operator=(const MyInterface&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void op(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const MyInterface& lhs, const MyInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const MyInterface& lhs, const MyInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class Base : public virtual ::Ice::Object
{
public:

    typedef BasePrx ProxyType;
    typedef BasePtr PointerType;

    virtual ~Base();

    Base()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    Base(bool bo, ::Ice::Byte by, ::Ice::Short sh, ::Ice::Int i, ::Ice::Long l, ::Test::MyEnum e) :
        bo(bo),
        by(by),
        sh(sh),
        i(i),
        l(l),
        e(e)
    {
    }

#ifdef ICE_CPP11_COMPILER
    Base(const Base&) = default;
    Base& operator=(const Base&) = default;
#endif

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    bool bo;
    ::Ice::Byte by;
    ::Ice::Short sh;
    ::Ice::Int i;
    ::Ice::Long l;
    ::Test::MyEnum e;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_Base_init = ::Test::Base::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const Base& lhs, const Base& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Base& lhs, const Base& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class MyClass : public Base, public ::IceInternal::GCObject
{
public:

    typedef MyClassPrx ProxyType;
    typedef MyClassPtr PointerType;

    virtual ~MyClass();

    MyClass()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    MyClass(bool bo, ::Ice::Byte by, ::Ice::Short sh, ::Ice::Int i, ::Ice::Long l, ::Test::MyEnum e, const ::Test::MyClassPtr& c, const ::Ice::ObjectPtr& o, const ::Test::ValStruct& s) :
        ::Test::Base(bo, by, sh, i, l, e),
        c(c),
        o(o),
        s(s)
    {
    }

#ifdef ICE_CPP11_COMPILER
    MyClass(const MyClass&) = default;
    MyClass& operator=(const MyClass&) = default;
#endif

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
    /// \cond INTERNAL
    virtual void _iceGcVisitMembers(::IceInternal::GCVisitor&);
    /// \endcond

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Test::MyClassPtr c;
    ::Ice::ObjectPtr o;
    ::Test::ValStruct s;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_MyClass_init = ::Test::MyClass::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const MyClass& lhs, const MyClass& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const MyClass& lhs, const MyClass& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Test::MyEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Test::ValStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 17;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Test::ValStruct, S>
{
    static void write(S* ostr, const ::Test::ValStruct& v)
    {
        ostr->write(v.bo);
        ostr->write(v.by);
        ostr->write(v.sh);
        ostr->write(v.i);
        ostr->write(v.l);
        ostr->write(v.e);
    }
};

template<typename S>
struct StreamReader< ::Test::ValStruct, S>
{
    static void read(S* istr, ::Test::ValStruct& v)
    {
        istr->read(v.bo);
        istr->read(v.by);
        istr->read(v.sh);
        istr->read(v.i);
        istr->read(v.l);
        istr->read(v.e);
    }
};

template<>
struct StreamableTraits< ::Test::RefStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Test::RefStruct, S>
{
    static void write(S* ostr, const ::Test::RefStruct& v)
    {
        ostr->write(v.s);
        ostr->write(v.sp);
        ostr->write(v.c);
        ostr->write(v.p);
        ostr->write(v.seq);
    }
};

template<typename S>
struct StreamReader< ::Test::RefStruct, S>
{
    static void read(S* istr, ::Test::RefStruct& v)
    {
        istr->read(v.s);
        istr->read(v.sp);
        istr->read(v.c);
        istr->read(v.p);
        istr->read(v.seq);
    }
};

template<typename S>
struct StreamWriter< ::Test::Base, S>
{
    static void write(S* ostr, const ::Test::Base& v)
    {
        ostr->write(v.bo);
        ostr->write(v.by);
        ostr->write(v.sh);
        ostr->write(v.i);
        ostr->write(v.l);
        ostr->write(v.e);
    }
};

template<typename S>
struct StreamReader< ::Test::Base, S>
{
    static void read(S* istr, ::Test::Base& v)
    {
        istr->read(v.bo);
        istr->read(v.by);
        istr->read(v.sh);
        istr->read(v.i);
        istr->read(v.l);
        istr->read(v.e);
    }
};

template<typename S>
struct StreamWriter< ::Test::MyClass, S>
{
    static void write(S* ostr, const ::Test::MyClass& v)
    {
        ostr->write(v.c);
        ostr->write(v.o);
        ostr->write(v.s);
    }
};

template<typename S>
struct StreamReader< ::Test::MyClass, S>
{
    static void read(S* istr, ::Test::MyClass& v)
    {
        istr->read(v.c);
        istr->read(v.o);
        istr->read(v.s);
    }
};

template<>
struct StreamableTraits< ::Test::MyException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::MyException, S>
{
    static void write(S* ostr, const ::Test::MyException& v)
    {
        ostr->write(v.name);
        ostr->write(v.b);
        ostr->write(v.s);
        ostr->write(v.i);
        ostr->write(v.l);
        ostr->write(v.vs);
        ostr->write(v.rs);
        ostr->write(v.c);
        ostr->write(v.p);
        ostr->write(v.vss);
        ostr->write(v.vsl);
        ostr->write(v.vsll);
        ostr->write(v.vssk);
        ostr->write(v.vsq);
        ostr->write(v.isd);
        ostr->write(v.ivd);
        ostr->write(v.ipd);
        ostr->write(v.issd);
        ostr->write(1, v.optName);
        ostr->write(2, v.optInt);
        ostr->write(3, v.optValStruct);
        ostr->write(4, v.optRefStruct);
        ostr->write(5, v.optEnum);
        ostr->write(6, v.optClass);
        ostr->write(7, v.optProxy);
    }
};

template<typename S>
struct StreamReader< ::Test::MyException, S>
{
    static void read(S* istr, ::Test::MyException& v)
    {
        istr->read(v.name);
        istr->read(v.b);
        istr->read(v.s);
        istr->read(v.i);
        istr->read(v.l);
        istr->read(v.vs);
        istr->read(v.rs);
        istr->read(v.c);
        istr->read(v.p);
        istr->read(v.vss);
        istr->read(v.vsl);
        istr->read(v.vsll);
        istr->read(v.vssk);
        istr->read(v.vsq);
        istr->read(v.isd);
        istr->read(v.ivd);
        istr->read(v.ipd);
        istr->read(v.issd);
        istr->read(1, v.optName);
        istr->read(2, v.optInt);
        istr->read(3, v.optValStruct);
        istr->read(4, v.optRefStruct);
        istr->read(5, v.optEnum);
        istr->read(6, v.optClass);
        istr->read(7, v.optProxy);
    }
};

}
/// \endcond

namespace Test
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyInterface::begin_op.
 * Create a wrapper instance by calling ::Test::newCallback_MyInterface_op.
 */
template<class T>
class CallbackNC_MyInterface_op : public Callback_MyInterface_op_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MyInterface_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T> Callback_MyInterface_opPtr
newCallback_MyInterface_op(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyInterface_op<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T> Callback_MyInterface_opPtr
newCallback_MyInterface_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyInterface_op<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T> Callback_MyInterface_opPtr
newCallback_MyInterface_op(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyInterface_op<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T> Callback_MyInterface_opPtr
newCallback_MyInterface_op(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyInterface_op<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyInterface::begin_op.
 * Create a wrapper instance by calling ::Test::newCallback_MyInterface_op.
 */
template<class T, typename CT>
class Callback_MyInterface_op : public Callback_MyInterface_op_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MyInterface_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T, typename CT> Callback_MyInterface_opPtr
newCallback_MyInterface_op(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyInterface_op<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T, typename CT> Callback_MyInterface_opPtr
newCallback_MyInterface_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyInterface_op<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T, typename CT> Callback_MyInterface_opPtr
newCallback_MyInterface_op(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyInterface_op<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T, typename CT> Callback_MyInterface_opPtr
newCallback_MyInterface_op(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyInterface_op<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
