//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{


namespace MA
{

class IA;
class IAPrx;

}

namespace MB
{

class IB1;
class IB1Prx;
class IB2;
class IB2Prx;

}

namespace MA
{

class IC;
class ICPrx;

}
class Initial;
class InitialPrx;

}

namespace Test
{

namespace MA
{

}

namespace MB
{

}

namespace MA
{

}

}

namespace Test
{

namespace MA
{

class IAPrx : public ::Ice::Proxy<IAPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<IAPrx> iaop(const ::std::shared_ptr<IAPrx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<::std::shared_ptr<IAPrx>> iaopAsync(const ::std::shared_ptr<IAPrx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    iaopAsync(const ::std::shared_ptr<IAPrx>& p,
              ::std::function<void(::std::shared_ptr<::Test::MA::IAPrx>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_iaop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<IAPrx>>>&, const ::std::shared_ptr<IAPrx>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit IAPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    IAPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    IAPrx() = default;
    /// \endcond
};

}

namespace MB
{

class IB1Prx : public ::Ice::Proxy<IB1Prx, ::Test::MA::IAPrx>
{
public:

    ::std::shared_ptr<IB1Prx> ib1op(const ::std::shared_ptr<IB1Prx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<::std::shared_ptr<IB1Prx>> ib1opAsync(const ::std::shared_ptr<IB1Prx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    ib1opAsync(const ::std::shared_ptr<IB1Prx>& p,
               ::std::function<void(::std::shared_ptr<::Test::MB::IB1Prx>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_ib1op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<IB1Prx>>>&, const ::std::shared_ptr<IB1Prx>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit IB1Prx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    IB1Prx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    IB1Prx() = default;
    /// \endcond
};

class IB2Prx : public ::Ice::Proxy<IB2Prx, ::Test::MA::IAPrx>
{
public:

    ::std::shared_ptr<IB2Prx> ib2op(const ::std::shared_ptr<IB2Prx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<::std::shared_ptr<IB2Prx>> ib2opAsync(const ::std::shared_ptr<IB2Prx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    ib2opAsync(const ::std::shared_ptr<IB2Prx>& p,
               ::std::function<void(::std::shared_ptr<::Test::MB::IB2Prx>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_ib2op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<IB2Prx>>>&, const ::std::shared_ptr<IB2Prx>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit IB2Prx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    IB2Prx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    IB2Prx() = default;
    /// \endcond
};

}

namespace MA
{

class ICPrx : public ::Ice::Proxy<ICPrx, ::Test::MB::IB1Prx, ::Test::MB::IB2Prx>
{
public:

    ::std::shared_ptr<ICPrx> icop(const ::std::shared_ptr<ICPrx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<::std::shared_ptr<ICPrx>> icopAsync(const ::std::shared_ptr<ICPrx>& p, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    icopAsync(const ::std::shared_ptr<ICPrx>& p,
              ::std::function<void(::std::shared_ptr<::Test::MA::ICPrx>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_icop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<ICPrx>>>&, const ::std::shared_ptr<ICPrx>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit ICPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    ICPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    ICPrx() = default;
    /// \endcond
};

}

class InitialPrx : public ::Ice::Proxy<InitialPrx, ::Ice::ObjectPrx>
{
public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<::Test::MA::IAPrx> iaop(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<::std::shared_ptr<::Test::MA::IAPrx>> iaopAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    iaopAsync(::std::function<void(::std::shared_ptr<::Test::MA::IAPrx>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_iaop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MA::IAPrx>>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<::Test::MB::IB1Prx> ib1op(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<::std::shared_ptr<::Test::MB::IB1Prx>> ib1opAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    ib1opAsync(::std::function<void(::std::shared_ptr<::Test::MB::IB1Prx>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_ib1op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MB::IB1Prx>>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<::Test::MB::IB2Prx> ib2op(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<::std::shared_ptr<::Test::MB::IB2Prx>> ib2opAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    ib2opAsync(::std::function<void(::std::shared_ptr<::Test::MB::IB2Prx>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_ib2op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MB::IB2Prx>>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<::Test::MA::ICPrx> icop(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<::std::shared_ptr<::Test::MA::ICPrx>> icopAsync(const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    icopAsync(::std::function<void(::std::shared_ptr<::Test::MA::ICPrx>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_icop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MA::ICPrx>>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit InitialPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    InitialPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    InitialPrx() = default;
    /// \endcond
};

}

namespace Test
{

namespace MA
{

class IA : public virtual ::Ice::Object
{
public:

    using ProxyType = IAPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<IAPrx> iaop(::std::shared_ptr<IAPrx> p, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_iaop(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace MB
{

class IB1 : public virtual ::Test::MA::IA
{
public:

    using ProxyType = IB1Prx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<IB1Prx> ib1op(::std::shared_ptr<IB1Prx> p, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_ib1op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class IB2 : public virtual ::Test::MA::IA
{
public:

    using ProxyType = IB2Prx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<IB2Prx> ib2op(::std::shared_ptr<IB2Prx> p, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_ib2op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace MA
{

class IC : public virtual ::Test::MB::IB1,
           public virtual ::Test::MB::IB2
{
public:

    using ProxyType = ICPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<ICPrx> icop(::std::shared_ptr<ICPrx> p, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_icop(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

class Initial : public virtual ::Ice::Object
{
public:

    using ProxyType = InitialPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<::Test::MA::IAPrx> iaop(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_iaop(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<::Test::MB::IB1Prx> ib1op(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_ib1op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<::Test::MB::IB2Prx> ib2op(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_ib2op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<::Test::MA::ICPrx> icop(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_icop(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

/// \cond INTERNAL
namespace Test
{

/// \cond INTERNAL
namespace MA
{

using IAPtr = ::std::shared_ptr<IA>;

using IAPrxPtr = ::std::shared_ptr<IAPrx>;

}
/// \endcond

/// \cond INTERNAL
namespace MB
{

using IB1Ptr = ::std::shared_ptr<IB1>;

using IB1PrxPtr = ::std::shared_ptr<IB1Prx>;

using IB2Ptr = ::std::shared_ptr<IB2>;

using IB2PrxPtr = ::std::shared_ptr<IB2Prx>;

}
/// \endcond

/// \cond INTERNAL
namespace MA
{

using ICPtr = ::std::shared_ptr<IC>;

using ICPrxPtr = ::std::shared_ptr<ICPrx>;

}
/// \endcond

using InitialPtr = ::std::shared_ptr<Initial>;

using InitialPrxPtr = ::std::shared_ptr<InitialPrx>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
