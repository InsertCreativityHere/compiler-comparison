//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_Test_MA_IA_ids[2] =
{
    "::Ice::Object",
    "::Test::MA::IA"
};
const ::std::string iceC_Test_MA_IA_ops[] =
{
    "iaop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_MA_IA_iaop_name = "iaop";

const ::std::string iceC_Test_MB_IB1_ids[3] =
{
    "::Ice::Object",
    "::Test::MA::IA",
    "::Test::MB::IB1"
};
const ::std::string iceC_Test_MB_IB1_ops[] =
{
    "iaop",
    "ib1op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_MB_IB1_ib1op_name = "ib1op";

const ::std::string iceC_Test_MB_IB2_ids[3] =
{
    "::Ice::Object",
    "::Test::MA::IA",
    "::Test::MB::IB2"
};
const ::std::string iceC_Test_MB_IB2_ops[] =
{
    "iaop",
    "ib2op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_MB_IB2_ib2op_name = "ib2op";

const ::std::string iceC_Test_MA_IC_ids[5] =
{
    "::Ice::Object",
    "::Test::MA::IA",
    "::Test::MA::IC",
    "::Test::MB::IB1",
    "::Test::MB::IB2"
};
const ::std::string iceC_Test_MA_IC_ops[] =
{
    "iaop",
    "ib1op",
    "ib2op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "icop"
};
const ::std::string iceC_Test_MA_IC_icop_name = "icop";

const ::std::string iceC_Test_Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};
const ::std::string iceC_Test_Initial_ops[] =
{
    "iaop",
    "ib1op",
    "ib2op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "icop",
    "shutdown"
};
const ::std::string iceC_Test_Initial_shutdown_name = "shutdown";
const ::std::string iceC_Test_Initial_iaop_name = "iaop";
const ::std::string iceC_Test_Initial_ib1op_name = "ib1op";
const ::std::string iceC_Test_Initial_ib2op_name = "ib2op";
const ::std::string iceC_Test_Initial_icop_name = "icop";

}

::std::shared_ptr<::Test::MA::IAPrx>
Test::MA::IAPrx::iaop(const ::std::shared_ptr<IAPrx>& iceP_p, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<IAPrx>>(true, this, &IAPrx::_iceI_iaop, iceP_p, context).get();
}

::std::future<::std::shared_ptr<::Test::MA::IAPrx>>
Test::MA::IAPrx::iaopAsync(const ::std::shared_ptr<IAPrx>& iceP_p, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<IAPrx>, ::std::promise>(false, this, &IAPrx::_iceI_iaop, iceP_p, context);
}

::std::function<void()>
Test::MA::IAPrx::iaopAsync(const ::std::shared_ptr<IAPrx>& iceP_p,
                           ::std::function<void (::std::shared_ptr<::Test::MA::IAPrx>)> response,
                           ::std::function<void(::std::exception_ptr)> ex,
                           ::std::function<void(bool)> sent,
                           const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::shared_ptr<IAPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::MA::IAPrx::_iceI_iaop, iceP_p, context);
}

/// \cond INTERNAL
void
Test::MA::IAPrx::_iceI_iaop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<IAPrx>>>& outAsync, const ::std::shared_ptr<IAPrx>& iceP_p, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MA_IA_iaop_name);
    outAsync->invoke(iceC_Test_MA_IA_iaop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}
/// \endcond

const ::std::string&
Test::MA::IAPrx::ice_staticId()
{
    return IA::ice_staticId();
}

::std::shared_ptr<::Test::MB::IB1Prx>
Test::MB::IB1Prx::ib1op(const ::std::shared_ptr<IB1Prx>& iceP_p, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<IB1Prx>>(true, this, &IB1Prx::_iceI_ib1op, iceP_p, context).get();
}

::std::future<::std::shared_ptr<::Test::MB::IB1Prx>>
Test::MB::IB1Prx::ib1opAsync(const ::std::shared_ptr<IB1Prx>& iceP_p, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<IB1Prx>, ::std::promise>(false, this, &IB1Prx::_iceI_ib1op, iceP_p, context);
}

::std::function<void()>
Test::MB::IB1Prx::ib1opAsync(const ::std::shared_ptr<IB1Prx>& iceP_p,
                             ::std::function<void (::std::shared_ptr<::Test::MB::IB1Prx>)> response,
                             ::std::function<void(::std::exception_ptr)> ex,
                             ::std::function<void(bool)> sent,
                             const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::shared_ptr<IB1Prx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::MB::IB1Prx::_iceI_ib1op, iceP_p, context);
}

/// \cond INTERNAL
void
Test::MB::IB1Prx::_iceI_ib1op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<IB1Prx>>>& outAsync, const ::std::shared_ptr<IB1Prx>& iceP_p, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MB_IB1_ib1op_name);
    outAsync->invoke(iceC_Test_MB_IB1_ib1op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}
/// \endcond

const ::std::string&
Test::MB::IB1Prx::ice_staticId()
{
    return IB1::ice_staticId();
}

::std::shared_ptr<::Test::MB::IB2Prx>
Test::MB::IB2Prx::ib2op(const ::std::shared_ptr<IB2Prx>& iceP_p, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<IB2Prx>>(true, this, &IB2Prx::_iceI_ib2op, iceP_p, context).get();
}

::std::future<::std::shared_ptr<::Test::MB::IB2Prx>>
Test::MB::IB2Prx::ib2opAsync(const ::std::shared_ptr<IB2Prx>& iceP_p, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<IB2Prx>, ::std::promise>(false, this, &IB2Prx::_iceI_ib2op, iceP_p, context);
}

::std::function<void()>
Test::MB::IB2Prx::ib2opAsync(const ::std::shared_ptr<IB2Prx>& iceP_p,
                             ::std::function<void (::std::shared_ptr<::Test::MB::IB2Prx>)> response,
                             ::std::function<void(::std::exception_ptr)> ex,
                             ::std::function<void(bool)> sent,
                             const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::shared_ptr<IB2Prx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::MB::IB2Prx::_iceI_ib2op, iceP_p, context);
}

/// \cond INTERNAL
void
Test::MB::IB2Prx::_iceI_ib2op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<IB2Prx>>>& outAsync, const ::std::shared_ptr<IB2Prx>& iceP_p, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MB_IB2_ib2op_name);
    outAsync->invoke(iceC_Test_MB_IB2_ib2op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}
/// \endcond

const ::std::string&
Test::MB::IB2Prx::ice_staticId()
{
    return IB2::ice_staticId();
}

::std::shared_ptr<::Test::MA::ICPrx>
Test::MA::ICPrx::icop(const ::std::shared_ptr<ICPrx>& iceP_p, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<ICPrx>>(true, this, &ICPrx::_iceI_icop, iceP_p, context).get();
}

::std::future<::std::shared_ptr<::Test::MA::ICPrx>>
Test::MA::ICPrx::icopAsync(const ::std::shared_ptr<ICPrx>& iceP_p, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<ICPrx>, ::std::promise>(false, this, &ICPrx::_iceI_icop, iceP_p, context);
}

::std::function<void()>
Test::MA::ICPrx::icopAsync(const ::std::shared_ptr<ICPrx>& iceP_p,
                           ::std::function<void (::std::shared_ptr<::Test::MA::ICPrx>)> response,
                           ::std::function<void(::std::exception_ptr)> ex,
                           ::std::function<void(bool)> sent,
                           const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::shared_ptr<ICPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::MA::ICPrx::_iceI_icop, iceP_p, context);
}

/// \cond INTERNAL
void
Test::MA::ICPrx::_iceI_icop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<ICPrx>>>& outAsync, const ::std::shared_ptr<ICPrx>& iceP_p, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MA_IC_icop_name);
    outAsync->invoke(iceC_Test_MA_IC_icop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}
/// \endcond

const ::std::string&
Test::MA::ICPrx::ice_staticId()
{
    return IC::ice_staticId();
}

void
Test::InitialPrx::shutdown(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::InitialPrx::shutdownAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &InitialPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::InitialPrx::shutdownAsync(::std::function<void ()> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::std::shared_ptr<::Test::MA::IAPrx>
Test::InitialPrx::iaop(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test::MA::IAPrx>>(true, this, &InitialPrx::_iceI_iaop, context).get();
}

::std::future<::std::shared_ptr<::Test::MA::IAPrx>>
Test::InitialPrx::iaopAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test::MA::IAPrx>, ::std::promise>(false, this, &InitialPrx::_iceI_iaop, context);
}

::std::function<void()>
Test::InitialPrx::iaopAsync(::std::function<void (::std::shared_ptr<::Test::MA::IAPrx>)> response,
                            ::std::function<void(::std::exception_ptr)> ex,
                            ::std::function<void(bool)> sent,
                            const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::shared_ptr<::Test::MA::IAPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_iaop, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_iaop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MA::IAPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_iaop_name);
    outAsync->invoke(iceC_Test_Initial_iaop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::std::shared_ptr<::Test::MB::IB1Prx>
Test::InitialPrx::ib1op(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test::MB::IB1Prx>>(true, this, &InitialPrx::_iceI_ib1op, context).get();
}

::std::future<::std::shared_ptr<::Test::MB::IB1Prx>>
Test::InitialPrx::ib1opAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test::MB::IB1Prx>, ::std::promise>(false, this, &InitialPrx::_iceI_ib1op, context);
}

::std::function<void()>
Test::InitialPrx::ib1opAsync(::std::function<void (::std::shared_ptr<::Test::MB::IB1Prx>)> response,
                             ::std::function<void(::std::exception_ptr)> ex,
                             ::std::function<void(bool)> sent,
                             const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::shared_ptr<::Test::MB::IB1Prx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_ib1op, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_ib1op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MB::IB1Prx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_ib1op_name);
    outAsync->invoke(iceC_Test_Initial_ib1op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::std::shared_ptr<::Test::MB::IB2Prx>
Test::InitialPrx::ib2op(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test::MB::IB2Prx>>(true, this, &InitialPrx::_iceI_ib2op, context).get();
}

::std::future<::std::shared_ptr<::Test::MB::IB2Prx>>
Test::InitialPrx::ib2opAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test::MB::IB2Prx>, ::std::promise>(false, this, &InitialPrx::_iceI_ib2op, context);
}

::std::function<void()>
Test::InitialPrx::ib2opAsync(::std::function<void (::std::shared_ptr<::Test::MB::IB2Prx>)> response,
                             ::std::function<void(::std::exception_ptr)> ex,
                             ::std::function<void(bool)> sent,
                             const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::shared_ptr<::Test::MB::IB2Prx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_ib2op, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_ib2op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MB::IB2Prx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_ib2op_name);
    outAsync->invoke(iceC_Test_Initial_ib2op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::std::shared_ptr<::Test::MA::ICPrx>
Test::InitialPrx::icop(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test::MA::ICPrx>>(true, this, &InitialPrx::_iceI_icop, context).get();
}

::std::future<::std::shared_ptr<::Test::MA::ICPrx>>
Test::InitialPrx::icopAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::shared_ptr<::Test::MA::ICPrx>, ::std::promise>(false, this, &InitialPrx::_iceI_icop, context);
}

::std::function<void()>
Test::InitialPrx::icopAsync(::std::function<void (::std::shared_ptr<::Test::MA::ICPrx>)> response,
                            ::std::function<void(::std::exception_ptr)> ex,
                            ::std::function<void(bool)> sent,
                            const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::std::shared_ptr<::Test::MA::ICPrx>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_icop, context);
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_icop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MA::ICPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_icop_name);
    outAsync->invoke(iceC_Test_Initial_icop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::InitialPrx::ice_staticId()
{
    return Initial::ice_staticId();
}

bool
Test::MA::IA::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MA_IA_ids, iceC_Test_MA_IA_ids + 2, s);
}

::std::vector<::std::string>
Test::MA::IA::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MA_IA_ids[0], &iceC_Test_MA_IA_ids[2]);
}

::std::string
Test::MA::IA::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MA::IA::ice_staticId()
{
    static const ::std::string typeId = "::Test::MA::IA";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MA::IA::_iceD_iaop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<IAPrx> iceP_p;
    istr->readAll(iceP_p);
    inS.endReadParams();
    ::std::shared_ptr<IAPrx> ret = this->iaop(::std::move(iceP_p), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MA::IA::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MA_IA_ops, iceC_Test_MA_IA_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MA_IA_ops)
    {
        case 0:
        {
            return _iceD_iaop(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::MB::IB1::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MB_IB1_ids, iceC_Test_MB_IB1_ids + 3, s);
}

::std::vector<::std::string>
Test::MB::IB1::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MB_IB1_ids[0], &iceC_Test_MB_IB1_ids[3]);
}

::std::string
Test::MB::IB1::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MB::IB1::ice_staticId()
{
    static const ::std::string typeId = "::Test::MB::IB1";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MB::IB1::_iceD_ib1op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<IB1Prx> iceP_p;
    istr->readAll(iceP_p);
    inS.endReadParams();
    ::std::shared_ptr<IB1Prx> ret = this->ib1op(::std::move(iceP_p), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MB::IB1::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MB_IB1_ops, iceC_Test_MB_IB1_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MB_IB1_ops)
    {
        case 0:
        {
            return _iceD_iaop(in, current);
        }
        case 1:
        {
            return _iceD_ib1op(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::MB::IB2::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MB_IB2_ids, iceC_Test_MB_IB2_ids + 3, s);
}

::std::vector<::std::string>
Test::MB::IB2::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MB_IB2_ids[0], &iceC_Test_MB_IB2_ids[3]);
}

::std::string
Test::MB::IB2::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MB::IB2::ice_staticId()
{
    static const ::std::string typeId = "::Test::MB::IB2";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MB::IB2::_iceD_ib2op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<IB2Prx> iceP_p;
    istr->readAll(iceP_p);
    inS.endReadParams();
    ::std::shared_ptr<IB2Prx> ret = this->ib2op(::std::move(iceP_p), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MB::IB2::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MB_IB2_ops, iceC_Test_MB_IB2_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MB_IB2_ops)
    {
        case 0:
        {
            return _iceD_iaop(in, current);
        }
        case 1:
        {
            return _iceD_ib2op(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::MA::IC::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MA_IC_ids, iceC_Test_MA_IC_ids + 5, s);
}

::std::vector<::std::string>
Test::MA::IC::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MA_IC_ids[0], &iceC_Test_MA_IC_ids[5]);
}

::std::string
Test::MA::IC::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MA::IC::ice_staticId()
{
    static const ::std::string typeId = "::Test::MA::IC";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MA::IC::_iceD_icop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<ICPrx> iceP_p;
    istr->readAll(iceP_p);
    inS.endReadParams();
    ::std::shared_ptr<ICPrx> ret = this->icop(::std::move(iceP_p), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MA::IC::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MA_IC_ops, iceC_Test_MA_IC_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MA_IC_ops)
    {
        case 0:
        {
            return _iceD_iaop(in, current);
        }
        case 1:
        {
            return _iceD_ib1op(in, current);
        }
        case 2:
        {
            return _iceD_ib2op(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_icop(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Initial::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial_ids, iceC_Test_Initial_ids + 2, s);
}

::std::vector<::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Initial_ids[0], &iceC_Test_Initial_ids[2]);
}

::std::string
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_iaop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::MA::IAPrx> ret = this->iaop(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_ib1op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::MB::IB1Prx> ret = this->ib1op(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_ib2op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::MB::IB2Prx> ret = this->ib2op(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_icop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::MA::ICPrx> ret = this->icop(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial_ops, iceC_Test_Initial_ops + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial_ops)
    {
        case 0:
        {
            return _iceD_iaop(in, current);
        }
        case 1:
        {
            return _iceD_ib1op(in, current);
        }
        case 2:
        {
            return _iceD_ib2op(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_icop(in, current);
        }
        case 8:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
