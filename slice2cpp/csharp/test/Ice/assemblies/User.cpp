//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `User.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <User.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::User::UserInfo> iceC_User_UserInfo_init("::User::UserInfo");

const ::std::string iceC_User_Registry_ids[2] =
{
    "::Ice::Object",
    "::User::Registry"
};
const ::std::string iceC_User_Registry_ops[] =
{
    "getUserInfo",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_User_Registry_getUserInfo_name = "getUserInfo";

}

bool
User::Registry::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_User_Registry_ids, iceC_User_Registry_ids + 2, s);
}

::std::vector<::std::string>
User::Registry::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_User_Registry_ids[0], &iceC_User_Registry_ids[2]);
}

::std::string
User::Registry::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
User::Registry::ice_staticId()
{
    static const ::std::string typeId = "::User::Registry";
    return typeId;
}

/// \cond INTERNAL
bool
User::Registry::_iceD_getUserInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    ::std::shared_ptr<UserInfo> ret = this->getUserInfo(::std::move(iceP_id), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
User::Registry::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_User_Registry_ops, iceC_User_Registry_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_User_Registry_ops)
    {
        case 0:
        {
            return _iceD_getUserInfo(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

User::UserInfo::~UserInfo()
{
}

const ::std::string&
User::UserInfo::ice_staticId()
{
    static const ::std::string typeId = "::User::UserInfo";
    return typeId;
}

/// \cond INTERNAL
void
User::RegistryPrx::_iceI_getUserInfo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::User::UserInfo>>>& outAsync, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_User_Registry_getUserInfo_name);
    outAsync->invoke(iceC_User_Registry_getUserInfo_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Core::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<UserInfo> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
User::RegistryPrx::_newInstance() const
{
    return ::IceInternal::createProxy<RegistryPrx>();
}
/// \endcond

const ::std::string&
User::RegistryPrx::ice_staticId()
{
    return Registry::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::User::UserInfo> iceC_User_UserInfo_init("::User::UserInfo");

const ::std::string iceC_User_Registry_getUserInfo_name = "getUserInfo";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::User::upCast(Registry* p) { return p; }

void
::IceProxy::User::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Registry>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Registry;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::User::Registry::_iceI_begin_getUserInfo(const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_User_Registry_getUserInfo_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_User_Registry_getUserInfo_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_User_Registry_getUserInfo_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_User_Registry_getUserInfo_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::User::UserInfoPtr
IceProxy::User::Registry::end_getUserInfo(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_User_Registry_getUserInfo_name);
    ::User::UserInfoPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Core::ArgumentException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::User::Registry::_newInstance() const
{
    return new Registry;
}
/// \endcond

const ::std::string&
IceProxy::User::Registry::ice_staticId()
{
    return ::User::Registry::ice_staticId();
}

User::Registry::~Registry()
{
}

namespace
{
const ::std::string iceC_User_Registry_ids[2] =
{
    "::Ice::Object",
    "::User::Registry"
};

}

bool
User::Registry::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_User_Registry_ids, iceC_User_Registry_ids + 2, s);
}

::std::vector< ::std::string>
User::Registry::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_User_Registry_ids[0], &iceC_User_Registry_ids[2]);
}

const ::std::string&
User::Registry::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
User::Registry::ice_staticId()
{
    static const ::std::string typeId = "::User::Registry";
    return typeId;
}

/// \cond INTERNAL
bool
User::Registry::_iceD_getUserInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    UserInfoPtr ret = this->getUserInfo(iceP_id, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_User_Registry_all[] =
{
    "getUserInfo",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
User::Registry::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_User_Registry_all, iceC_User_Registry_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_User_Registry_all)
    {
        case 0:
        {
            return _iceD_getUserInfo(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

User::UserInfo::~UserInfo()
{
}

const ::std::string&
User::UserInfo::ice_staticId()
{
    static const ::std::string typeId = "::User::UserInfo";
    return typeId;
}

namespace Ice
{
}

#endif
