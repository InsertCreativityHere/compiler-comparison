// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'User.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "User.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::User::UserInfo> iceC_User_UserInfo_init("::User::UserInfo");
}

::User::UserInfoPtr
User::RegistryPrx::getUserInfo(::std::string_view iceP_id, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<UserInfoPtr>(true, this, &RegistryPrx::_iceI_getUserInfo, iceP_id, context).get();
}

::std::future<::User::UserInfoPtr>
User::RegistryPrx::getUserInfoAsync(::std::string_view iceP_id, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<UserInfoPtr>(false, this, &RegistryPrx::_iceI_getUserInfo, iceP_id, context);
}

::std::function<void()>
User::RegistryPrx::getUserInfoAsync(::std::string_view iceP_id, ::std::function<void(::User::UserInfoPtr)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<UserInfoPtr>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &User::RegistryPrx::_iceI_getUserInfo, iceP_id, context);
}

void
User::RegistryPrx::_iceI_getUserInfo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<UserInfoPtr>>& outAsync, ::std::string_view iceP_id, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getUserInfo";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Core::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            UserInfoPtr ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

User::RegistryPrx::~RegistryPrx() = default;

const char*
User::RegistryPrx::ice_staticId() noexcept
{
    return "::User::Registry";
}

const char*
User::UserInfo::ice_staticId() noexcept
{
    return "::User::UserInfo";
}

const char*
User::UserInfo::ice_id() const noexcept
{
    return ice_staticId();
}

::Ice::ValuePtr
User::UserInfo::_iceCloneImpl() const
{
    return CloneEnabler<UserInfo>::clone(*this);
}

void
User::UserInfo::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->endSlice();
}

void
User::UserInfo::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->endSlice();
}

::std::vector<::std::string>
User::Registry::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::User::Registry"};
    return allTypeIds;
}

::std::string
User::Registry::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
User::Registry::ice_staticId() noexcept
{
    return "::User::Registry";
}

/// \cond INTERNAL
void
User::Registry::_iceD_getUserInfo(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::std::string iceP_id;
    istr->readAll(iceP_id);
    istr->endEncapsulation();
    const UserInfoPtr ret = this->getUserInfo(::std::move(iceP_id), request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
User::Registry::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"getUserInfo", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 5, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_getUserInfo(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond
