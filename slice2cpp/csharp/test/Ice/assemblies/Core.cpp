//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Core.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Core.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Core::ArgumentException> iceC_Core_ArgumentException_init("::Core::ArgumentException");

}

Core::ArgumentException::~ArgumentException()
{
}

const ::std::string&
Core::ArgumentException::ice_staticId()
{
    static const ::std::string typeId = "::Core::ArgumentException";
    return typeId;
}

#else // C++98 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Core::ArgumentException> iceC_Core_ArgumentException_init("::Core::ArgumentException");

}

#ifdef ICE_CPP11_COMPILER
Core::ArgumentException::~ArgumentException()
{
}
#else
Core::ArgumentException::~ArgumentException() throw()
{
}
#endif

::std::string
Core::ArgumentException::ice_id() const
{
    return "::Core::ArgumentException";
}

Core::ArgumentException*
Core::ArgumentException::ice_clone() const
{
    return new ArgumentException(*this);
}

void
Core::ArgumentException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Core::ArgumentException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Core::ArgumentException", -1, true);
    ::Ice::StreamWriter< ArgumentException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Core::ArgumentException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ArgumentException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace Ice
{
}

#endif
