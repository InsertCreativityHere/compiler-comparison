//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{

class C;
class C1;
class C2;
class I;
class IPrx;

namespace Inner
{


namespace Inner2
{

class C;
class I;
class IPrx;

}
class C;
class I;
class IPrx;

}

}

namespace Inner
{


namespace Test
{


namespace Inner2
{

class I;
class IPrx;

}

}

}

namespace Test
{

struct S
{
    int v;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(v);
    }
};

using SMap = ::std::map<::std::string, S>;

using SSeq = ::std::vector<S>;

using CMap = ::std::map<::std::string, ::std::shared_ptr<C>>;

using CSeq = ::std::vector<::std::shared_ptr<C>>;

enum class E1 : unsigned char
{
    v1,
    v2,
    v3
};

struct S1
{
    ::std::string s;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(s);
    }
};

struct S2
{
    ::Test::E1 E1;
    ::Test::S1 S1;
    ::std::shared_ptr<::Test::C1> C1;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::E1&, const ::Test::S1&, const ::std::shared_ptr<::Test::C1>&> ice_tuple() const
    {
        return std::tie(E1, S1, C1);
    }
};

using IMap = ::std::map<::std::string, ::std::shared_ptr<IPrx>>;

using ISeq = ::std::vector<::std::shared_ptr<IPrx>>;

namespace Inner
{

struct S
{
    int v;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(v);
    }
};

namespace Inner2
{

struct S
{
    int v;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(v);
    }
};

using SMap = ::std::map<::std::string, S>;

using SSeq = ::std::vector<S>;

using CMap = ::std::map<::std::string, ::std::shared_ptr<C>>;

using CSeq = ::std::vector<::std::shared_ptr<C>>;

using IMap = ::std::map<::std::string, ::std::shared_ptr<IPrx>>;

using ISeq = ::std::vector<::std::shared_ptr<IPrx>>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

using SSeq = ::std::vector<::Test::Inner::Inner2::S>;

using SMap = ::std::map<::std::string, ::Test::Inner::Inner2::S>;

using CMap = ::std::map<::std::string, ::std::shared_ptr<::Test::Inner::Inner2::C>>;

using CSeq = ::std::vector<::std::shared_ptr<::Test::Inner::Inner2::C>>;

using IMap = ::std::map<::std::string, ::std::shared_ptr<IPrx>>;

using ISeq = ::std::vector<::std::shared_ptr<IPrx>>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Inner
{

namespace Test
{

namespace Inner2
{

}

}

}

namespace Test
{

class I : public virtual ::Ice::Object
{
public:

    using ProxyType = IPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to opS.
     */
    struct OpSResult
    {
        S returnValue;
        S s2;
    };

    virtual S opS(S s1, S& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSSeq.
     */
    struct OpSSeqResult
    {
        SSeq returnValue;
        SSeq s2;
    };

    virtual SSeq opSSeq(SSeq s1, SSeq& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSMap.
     */
    struct OpSMapResult
    {
        SMap returnValue;
        SMap s2;
    };

    virtual SMap opSMap(SMap s1, SMap& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opC.
     */
    struct OpCResult
    {
        ::std::shared_ptr<C> returnValue;
        ::std::shared_ptr<C> c2;
    };

    virtual ::std::shared_ptr<C> opC(::std::shared_ptr<C> c1, ::std::shared_ptr<C>& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opC(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCSeq.
     */
    struct OpCSeqResult
    {
        CSeq returnValue;
        CSeq c2;
    };

    virtual CSeq opCSeq(CSeq c1, CSeq& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCMap.
     */
    struct OpCMapResult
    {
        CMap returnValue;
        CMap c2;
    };

    virtual CMap opCMap(CMap c1, CMap& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual E1 opE1(E1 E1, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opE1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual S1 opS1(S1 S1, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opS1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<C1> opC1(::std::shared_ptr<C1> C1, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opC1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

namespace Inner
{

namespace Inner2
{

class I : public virtual ::Ice::Object
{
public:

    using ProxyType = IPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to opS.
     */
    struct OpSResult
    {
        S returnValue;
        S s2;
    };

    virtual S opS(S s1, S& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSSeq.
     */
    struct OpSSeqResult
    {
        SSeq returnValue;
        SSeq s2;
    };

    virtual SSeq opSSeq(SSeq s1, SSeq& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSMap.
     */
    struct OpSMapResult
    {
        SMap returnValue;
        SMap s2;
    };

    virtual SMap opSMap(SMap s1, SMap& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opC.
     */
    struct OpCResult
    {
        ::std::shared_ptr<C> returnValue;
        ::std::shared_ptr<C> c2;
    };

    virtual ::std::shared_ptr<C> opC(::std::shared_ptr<C> c1, ::std::shared_ptr<C>& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opC(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCSeq.
     */
    struct OpCSeqResult
    {
        CSeq returnValue;
        CSeq c2;
    };

    virtual CSeq opCSeq(CSeq c1, CSeq& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCMap.
     */
    struct OpCMapResult
    {
        CMap returnValue;
        CMap c2;
    };

    virtual CMap opCMap(CMap c1, CMap& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

class I : public virtual ::Ice::Object
{
public:

    using ProxyType = IPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to opS.
     */
    struct OpSResult
    {
        ::Test::Inner::Inner2::S returnValue;
        ::Test::Inner::Inner2::S s2;
    };

    virtual ::Test::Inner::Inner2::S opS(::Test::Inner::Inner2::S s1, ::Test::Inner::Inner2::S& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSSeq.
     */
    struct OpSSeqResult
    {
        ::Test::Inner::Inner2::SSeq returnValue;
        ::Test::Inner::Inner2::SSeq s2;
    };

    virtual ::Test::Inner::Inner2::SSeq opSSeq(::Test::Inner::Inner2::SSeq s1, ::Test::Inner::Inner2::SSeq& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSMap.
     */
    struct OpSMapResult
    {
        ::Test::Inner::Inner2::SMap returnValue;
        ::Test::Inner::Inner2::SMap s2;
    };

    virtual ::Test::Inner::Inner2::SMap opSMap(::Test::Inner::Inner2::SMap s1, ::Test::Inner::Inner2::SMap& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opC.
     */
    struct OpCResult
    {
        ::std::shared_ptr<::Test::Inner::Inner2::C> returnValue;
        ::std::shared_ptr<::Test::Inner::Inner2::C> c2;
    };

    virtual ::std::shared_ptr<::Test::Inner::Inner2::C> opC(::std::shared_ptr<::Test::Inner::Inner2::C> c1, ::std::shared_ptr<::Test::Inner::Inner2::C>& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opC(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCSeq.
     */
    struct OpCSeqResult
    {
        ::Test::Inner::Inner2::CSeq returnValue;
        ::Test::Inner::Inner2::CSeq c2;
    };

    virtual ::Test::Inner::Inner2::CSeq opCSeq(::Test::Inner::Inner2::CSeq c1, ::Test::Inner::Inner2::CSeq& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCMap.
     */
    struct OpCMapResult
    {
        ::Test::Inner::Inner2::CMap returnValue;
        ::Test::Inner::Inner2::CMap c2;
    };

    virtual ::Test::Inner::Inner2::CMap opCMap(::Test::Inner::Inner2::CMap c1, ::Test::Inner::Inner2::CMap& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

}

namespace Inner
{

namespace Test
{

namespace Inner2
{

class I : public virtual ::Ice::Object
{
public:

    using ProxyType = IPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to opS.
     */
    struct OpSResult
    {
        ::Test::S returnValue;
        ::Test::S s2;
    };

    virtual ::Test::S opS(::Test::S s1, ::Test::S& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSSeq.
     */
    struct OpSSeqResult
    {
        ::Test::SSeq returnValue;
        ::Test::SSeq s2;
    };

    virtual ::Test::SSeq opSSeq(::Test::SSeq s1, ::Test::SSeq& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSMap.
     */
    struct OpSMapResult
    {
        ::Test::SMap returnValue;
        ::Test::SMap s2;
    };

    virtual ::Test::SMap opSMap(::Test::SMap s1, ::Test::SMap& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opC.
     */
    struct OpCResult
    {
        ::std::shared_ptr<::Test::C> returnValue;
        ::std::shared_ptr<::Test::C> c2;
    };

    virtual ::std::shared_ptr<::Test::C> opC(::std::shared_ptr<::Test::C> c1, ::std::shared_ptr<::Test::C>& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opC(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCSeq.
     */
    struct OpCSeqResult
    {
        ::Test::CSeq returnValue;
        ::Test::CSeq c2;
    };

    virtual ::Test::CSeq opCSeq(::Test::CSeq c1, ::Test::CSeq& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCMap.
     */
    struct OpCMapResult
    {
        ::Test::CMap returnValue;
        ::Test::CMap c2;
    };

    virtual ::Test::CMap opCMap(::Test::CMap c1, ::Test::CMap& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

}

}

namespace Test
{

class C : public ::Ice::ValueHelper<C, ::Ice::Value>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C(const ::Test::S& s) :
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::S&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::S s;
};

/// \cond INTERNAL
static C _iceS_C_init;
/// \endcond

class C1 : public ::Ice::ValueHelper<C1, ::Ice::Value>
{
public:

    virtual ~C1();

    C1() = default;

    C1(const C1&) = default;
    C1(C1&&) = default;
    C1& operator=(const C1&) = default;
    C1& operator=(C1&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C1(const ::std::string& s) :
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string s;
};

class C2 : public ::Ice::ValueHelper<C2, ::Ice::Value>
{
public:

    virtual ~C2();

    C2() = default;

    C2(const C2&) = default;
    C2(C2&&) = default;
    C2& operator=(const C2&) = default;
    C2& operator=(C2&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C2(::Test::E1 E1, const ::Test::S1& S1, const ::std::shared_ptr<::Test::C1>& C1) :
        E1(E1),
        S1(S1),
        C1(C1)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::E1&, const ::Test::S1&, const ::std::shared_ptr<::Test::C1>&> ice_tuple() const
    {
        return std::tie(E1, S1, C1);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::E1 E1;
    ::Test::S1 S1;
    ::std::shared_ptr<::Test::C1> C1;
};

namespace Inner
{

namespace Inner2
{

class C : public ::Ice::ValueHelper<C, ::Ice::Value>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C(const ::Test::Inner::Inner2::S& s) :
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::Inner::Inner2::S&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::Inner::Inner2::S s;
};

}

class C : public ::Ice::ValueHelper<C, ::Ice::Value>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C(const ::Test::Inner::S& s) :
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::Inner::S&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::Inner::S s;
};

}

}

namespace Test
{

class IPrx : public virtual ::Ice::Proxy<IPrx, ::Ice::ObjectPrx>
{
public:

    S opS(const S& s1, S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpSResult>(true, this, &IPrx::_iceI_opS, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSAsync(const S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpSResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpSResult, P>(false, this, &IPrx::_iceI_opS, s1, context);
    }

    ::std::function<void()>
    opSAsync(const S& s1,
             ::std::function<void(::Test::S, ::Test::S)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpSResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<I::OpSResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opS, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSResult>>&, const S&, const ::Ice::Context&);
    /// \endcond

    SSeq opSSeq(const SSeq& s1, SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpSSeqResult>(true, this, &IPrx::_iceI_opSSeq, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSSeqAsync(const SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpSSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpSSeqResult, P>(false, this, &IPrx::_iceI_opSSeq, s1, context);
    }

    ::std::function<void()>
    opSSeqAsync(const SSeq& s1,
                ::std::function<void(::Test::SSeq, ::Test::SSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpSSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<I::OpSSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opSSeq, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSSeqResult>>&, const SSeq&, const ::Ice::Context&);
    /// \endcond

    SMap opSMap(const SMap& s1, SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpSMapResult>(true, this, &IPrx::_iceI_opSMap, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSMapAsync(const SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpSMapResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpSMapResult, P>(false, this, &IPrx::_iceI_opSMap, s1, context);
    }

    ::std::function<void()>
    opSMapAsync(const SMap& s1,
                ::std::function<void(::Test::SMap, ::Test::SMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpSMapResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<I::OpSMapResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opSMap, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSMapResult>>&, const SMap&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<C> opC(const ::std::shared_ptr<C>& c1, ::std::shared_ptr<C>& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpCResult>(true, this, &IPrx::_iceI_opC, c1, context).get();
        c2 = ::std::move(_result.c2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opCAsync(const ::std::shared_ptr<C>& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpCResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpCResult, P>(false, this, &IPrx::_iceI_opC, c1, context);
    }

    ::std::function<void()>
    opCAsync(const ::std::shared_ptr<C>& c1,
             ::std::function<void(::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpCResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.c2));
        };
        return _makeLambdaOutgoing<I::OpCResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opC, c1, context);
    }

    /// \cond INTERNAL
    void _iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCResult>>&, const ::std::shared_ptr<C>&, const ::Ice::Context&);
    /// \endcond

    CSeq opCSeq(const CSeq& c1, CSeq& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpCSeqResult>(true, this, &IPrx::_iceI_opCSeq, c1, context).get();
        c2 = ::std::move(_result.c2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opCSeqAsync(const CSeq& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpCSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpCSeqResult, P>(false, this, &IPrx::_iceI_opCSeq, c1, context);
    }

    ::std::function<void()>
    opCSeqAsync(const CSeq& c1,
                ::std::function<void(::Test::CSeq, ::Test::CSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpCSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.c2));
        };
        return _makeLambdaOutgoing<I::OpCSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opCSeq, c1, context);
    }

    /// \cond INTERNAL
    void _iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCSeqResult>>&, const CSeq&, const ::Ice::Context&);
    /// \endcond

    CMap opCMap(const CMap& c1, CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpCMapResult>(true, this, &IPrx::_iceI_opCMap, c1, context).get();
        c2 = ::std::move(_result.c2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opCMapAsync(const CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpCMapResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpCMapResult, P>(false, this, &IPrx::_iceI_opCMap, c1, context);
    }

    ::std::function<void()>
    opCMapAsync(const CMap& c1,
                ::std::function<void(::Test::CMap, ::Test::CMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpCMapResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.c2));
        };
        return _makeLambdaOutgoing<I::OpCMapResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opCMap, c1, context);
    }

    /// \cond INTERNAL
    void _iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCMapResult>>&, const CMap&, const ::Ice::Context&);
    /// \endcond

    E1 opE1(E1 E1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::E1>(true, this, &IPrx::_iceI_opE1, E1, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opE1Async(E1 E1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::E1>>().get_future())
    {
        return _makePromiseOutgoing<::Test::E1, P>(false, this, &IPrx::_iceI_opE1, E1, context);
    }

    ::std::function<void()>
    opE1Async(E1 E1,
              ::std::function<void(::Test::E1)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::Test::E1>(std::move(response), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opE1, E1, context);
    }

    /// \cond INTERNAL
    void _iceI_opE1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::E1>>&, E1, const ::Ice::Context&);
    /// \endcond

    S1 opS1(const S1& S1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::S1>(true, this, &IPrx::_iceI_opS1, S1, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opS1Async(const S1& S1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::S1>>().get_future())
    {
        return _makePromiseOutgoing<::Test::S1, P>(false, this, &IPrx::_iceI_opS1, S1, context);
    }

    ::std::function<void()>
    opS1Async(const S1& S1,
              ::std::function<void(::Test::S1)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::Test::S1>(std::move(response), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opS1, S1, context);
    }

    /// \cond INTERNAL
    void _iceI_opS1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::S1>>&, const S1&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<C1> opC1(const ::std::shared_ptr<C1>& C1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::C1>>(true, this, &IPrx::_iceI_opC1, C1, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opC1Async(const ::std::shared_ptr<C1>& C1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::C1>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::C1>, P>(false, this, &IPrx::_iceI_opC1, C1, context);
    }

    ::std::function<void()>
    opC1Async(const ::std::shared_ptr<C1>& C1,
              ::std::function<void(::std::shared_ptr<::Test::C1>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::C1>>(std::move(response), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_opC1, C1, context);
    }

    /// \cond INTERNAL
    void _iceI_opC1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::C1>>>&, const ::std::shared_ptr<C1>&, const ::Ice::Context&);
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::IPrx::_iceI_shutdown, context);
    }

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    IPrx() = default;
    friend ::std::shared_ptr<IPrx> IceInternal::createProxy<IPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

namespace Inner
{

namespace Inner2
{

class IPrx : public virtual ::Ice::Proxy<IPrx, ::Ice::ObjectPrx>
{
public:

    S opS(const S& s1, S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpSResult>(true, this, &IPrx::_iceI_opS, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSAsync(const S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpSResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpSResult, P>(false, this, &IPrx::_iceI_opS, s1, context);
    }

    ::std::function<void()>
    opSAsync(const S& s1,
             ::std::function<void(::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpSResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<I::OpSResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opS, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSResult>>&, const S&, const ::Ice::Context&);
    /// \endcond

    SSeq opSSeq(const SSeq& s1, SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpSSeqResult>(true, this, &IPrx::_iceI_opSSeq, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSSeqAsync(const SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpSSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpSSeqResult, P>(false, this, &IPrx::_iceI_opSSeq, s1, context);
    }

    ::std::function<void()>
    opSSeqAsync(const SSeq& s1,
                ::std::function<void(::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpSSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<I::OpSSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opSSeq, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSSeqResult>>&, const SSeq&, const ::Ice::Context&);
    /// \endcond

    SMap opSMap(const SMap& s1, SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpSMapResult>(true, this, &IPrx::_iceI_opSMap, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSMapAsync(const SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpSMapResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpSMapResult, P>(false, this, &IPrx::_iceI_opSMap, s1, context);
    }

    ::std::function<void()>
    opSMapAsync(const SMap& s1,
                ::std::function<void(::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpSMapResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<I::OpSMapResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opSMap, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSMapResult>>&, const SMap&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<C> opC(const ::std::shared_ptr<C>& c1, ::std::shared_ptr<C>& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpCResult>(true, this, &IPrx::_iceI_opC, c1, context).get();
        c2 = ::std::move(_result.c2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opCAsync(const ::std::shared_ptr<C>& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpCResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpCResult, P>(false, this, &IPrx::_iceI_opC, c1, context);
    }

    ::std::function<void()>
    opCAsync(const ::std::shared_ptr<C>& c1,
             ::std::function<void(::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpCResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.c2));
        };
        return _makeLambdaOutgoing<I::OpCResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opC, c1, context);
    }

    /// \cond INTERNAL
    void _iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCResult>>&, const ::std::shared_ptr<C>&, const ::Ice::Context&);
    /// \endcond

    CSeq opCSeq(const CSeq& c1, CSeq& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpCSeqResult>(true, this, &IPrx::_iceI_opCSeq, c1, context).get();
        c2 = ::std::move(_result.c2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opCSeqAsync(const CSeq& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpCSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpCSeqResult, P>(false, this, &IPrx::_iceI_opCSeq, c1, context);
    }

    ::std::function<void()>
    opCSeqAsync(const CSeq& c1,
                ::std::function<void(::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpCSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.c2));
        };
        return _makeLambdaOutgoing<I::OpCSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opCSeq, c1, context);
    }

    /// \cond INTERNAL
    void _iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCSeqResult>>&, const CSeq&, const ::Ice::Context&);
    /// \endcond

    CMap opCMap(const CMap& c1, CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpCMapResult>(true, this, &IPrx::_iceI_opCMap, c1, context).get();
        c2 = ::std::move(_result.c2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opCMapAsync(const CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpCMapResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpCMapResult, P>(false, this, &IPrx::_iceI_opCMap, c1, context);
    }

    ::std::function<void()>
    opCMapAsync(const CMap& c1,
                ::std::function<void(::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpCMapResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.c2));
        };
        return _makeLambdaOutgoing<I::OpCMapResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_opCMap, c1, context);
    }

    /// \cond INTERNAL
    void _iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCMapResult>>&, const CMap&, const ::Ice::Context&);
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Inner::Inner2::IPrx::_iceI_shutdown, context);
    }

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    IPrx() = default;
    friend ::std::shared_ptr<IPrx> IceInternal::createProxy<IPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

class IPrx : public virtual ::Ice::Proxy<IPrx, ::Ice::ObjectPrx>
{
public:

    ::Test::Inner::Inner2::S opS(const ::Test::Inner::Inner2::S& s1, ::Test::Inner::Inner2::S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpSResult>(true, this, &IPrx::_iceI_opS, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSAsync(const ::Test::Inner::Inner2::S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpSResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpSResult, P>(false, this, &IPrx::_iceI_opS, s1, context);
    }

    ::std::function<void()>
    opSAsync(const ::Test::Inner::Inner2::S& s1,
             ::std::function<void(::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpSResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<I::OpSResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::IPrx::_iceI_opS, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSResult>>&, const ::Test::Inner::Inner2::S&, const ::Ice::Context&);
    /// \endcond

    ::Test::Inner::Inner2::SSeq opSSeq(const ::Test::Inner::Inner2::SSeq& s1, ::Test::Inner::Inner2::SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpSSeqResult>(true, this, &IPrx::_iceI_opSSeq, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSSeqAsync(const ::Test::Inner::Inner2::SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpSSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpSSeqResult, P>(false, this, &IPrx::_iceI_opSSeq, s1, context);
    }

    ::std::function<void()>
    opSSeqAsync(const ::Test::Inner::Inner2::SSeq& s1,
                ::std::function<void(::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpSSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<I::OpSSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::IPrx::_iceI_opSSeq, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSSeqResult>>&, const ::Test::Inner::Inner2::SSeq&, const ::Ice::Context&);
    /// \endcond

    ::Test::Inner::Inner2::SMap opSMap(const ::Test::Inner::Inner2::SMap& s1, ::Test::Inner::Inner2::SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpSMapResult>(true, this, &IPrx::_iceI_opSMap, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSMapAsync(const ::Test::Inner::Inner2::SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpSMapResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpSMapResult, P>(false, this, &IPrx::_iceI_opSMap, s1, context);
    }

    ::std::function<void()>
    opSMapAsync(const ::Test::Inner::Inner2::SMap& s1,
                ::std::function<void(::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpSMapResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<I::OpSMapResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::IPrx::_iceI_opSMap, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSMapResult>>&, const ::Test::Inner::Inner2::SMap&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<::Test::Inner::Inner2::C> opC(const ::std::shared_ptr<::Test::Inner::Inner2::C>& c1, ::std::shared_ptr<::Test::Inner::Inner2::C>& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpCResult>(true, this, &IPrx::_iceI_opC, c1, context).get();
        c2 = ::std::move(_result.c2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opCAsync(const ::std::shared_ptr<::Test::Inner::Inner2::C>& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpCResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpCResult, P>(false, this, &IPrx::_iceI_opC, c1, context);
    }

    ::std::function<void()>
    opCAsync(const ::std::shared_ptr<::Test::Inner::Inner2::C>& c1,
             ::std::function<void(::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpCResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.c2));
        };
        return _makeLambdaOutgoing<I::OpCResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::IPrx::_iceI_opC, c1, context);
    }

    /// \cond INTERNAL
    void _iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCResult>>&, const ::std::shared_ptr<::Test::Inner::Inner2::C>&, const ::Ice::Context&);
    /// \endcond

    ::Test::Inner::Inner2::CSeq opCSeq(const ::Test::Inner::Inner2::CSeq& c1, ::Test::Inner::Inner2::CSeq& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpCSeqResult>(true, this, &IPrx::_iceI_opCSeq, c1, context).get();
        c2 = ::std::move(_result.c2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opCSeqAsync(const ::Test::Inner::Inner2::CSeq& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpCSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpCSeqResult, P>(false, this, &IPrx::_iceI_opCSeq, c1, context);
    }

    ::std::function<void()>
    opCSeqAsync(const ::Test::Inner::Inner2::CSeq& c1,
                ::std::function<void(::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpCSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.c2));
        };
        return _makeLambdaOutgoing<I::OpCSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::IPrx::_iceI_opCSeq, c1, context);
    }

    /// \cond INTERNAL
    void _iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCSeqResult>>&, const ::Test::Inner::Inner2::CSeq&, const ::Ice::Context&);
    /// \endcond

    ::Test::Inner::Inner2::CMap opCMap(const ::Test::Inner::Inner2::CMap& c1, ::Test::Inner::Inner2::CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpCMapResult>(true, this, &IPrx::_iceI_opCMap, c1, context).get();
        c2 = ::std::move(_result.c2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opCMapAsync(const ::Test::Inner::Inner2::CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpCMapResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpCMapResult, P>(false, this, &IPrx::_iceI_opCMap, c1, context);
    }

    ::std::function<void()>
    opCMapAsync(const ::Test::Inner::Inner2::CMap& c1,
                ::std::function<void(::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpCMapResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.c2));
        };
        return _makeLambdaOutgoing<I::OpCMapResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Inner::IPrx::_iceI_opCMap, c1, context);
    }

    /// \cond INTERNAL
    void _iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCMapResult>>&, const ::Test::Inner::Inner2::CMap&, const ::Ice::Context&);
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Inner::IPrx::_iceI_shutdown, context);
    }

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    IPrx() = default;
    friend ::std::shared_ptr<IPrx> IceInternal::createProxy<IPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

}

namespace Inner
{

namespace Test
{

namespace Inner2
{

class IPrx : public virtual ::Ice::Proxy<IPrx, ::Ice::ObjectPrx>
{
public:

    ::Test::S opS(const ::Test::S& s1, ::Test::S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpSResult>(true, this, &IPrx::_iceI_opS, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSAsync(const ::Test::S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpSResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpSResult, P>(false, this, &IPrx::_iceI_opS, s1, context);
    }

    ::std::function<void()>
    opSAsync(const ::Test::S& s1,
             ::std::function<void(::Test::S, ::Test::S)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpSResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<I::OpSResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opS, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSResult>>&, const ::Test::S&, const ::Ice::Context&);
    /// \endcond

    ::Test::SSeq opSSeq(const ::Test::SSeq& s1, ::Test::SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpSSeqResult>(true, this, &IPrx::_iceI_opSSeq, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSSeqAsync(const ::Test::SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpSSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpSSeqResult, P>(false, this, &IPrx::_iceI_opSSeq, s1, context);
    }

    ::std::function<void()>
    opSSeqAsync(const ::Test::SSeq& s1,
                ::std::function<void(::Test::SSeq, ::Test::SSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpSSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<I::OpSSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opSSeq, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSSeqResult>>&, const ::Test::SSeq&, const ::Ice::Context&);
    /// \endcond

    ::Test::SMap opSMap(const ::Test::SMap& s1, ::Test::SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpSMapResult>(true, this, &IPrx::_iceI_opSMap, s1, context).get();
        s2 = ::std::move(_result.s2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSMapAsync(const ::Test::SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpSMapResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpSMapResult, P>(false, this, &IPrx::_iceI_opSMap, s1, context);
    }

    ::std::function<void()>
    opSMapAsync(const ::Test::SMap& s1,
                ::std::function<void(::Test::SMap, ::Test::SMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpSMapResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.s2));
        };
        return _makeLambdaOutgoing<I::OpSMapResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opSMap, s1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSMapResult>>&, const ::Test::SMap&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<::Test::C> opC(const ::std::shared_ptr<::Test::C>& c1, ::std::shared_ptr<::Test::C>& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpCResult>(true, this, &IPrx::_iceI_opC, c1, context).get();
        c2 = ::std::move(_result.c2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opCAsync(const ::std::shared_ptr<::Test::C>& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpCResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpCResult, P>(false, this, &IPrx::_iceI_opC, c1, context);
    }

    ::std::function<void()>
    opCAsync(const ::std::shared_ptr<::Test::C>& c1,
             ::std::function<void(::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpCResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.c2));
        };
        return _makeLambdaOutgoing<I::OpCResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opC, c1, context);
    }

    /// \cond INTERNAL
    void _iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCResult>>&, const ::std::shared_ptr<::Test::C>&, const ::Ice::Context&);
    /// \endcond

    ::Test::CSeq opCSeq(const ::Test::CSeq& c1, ::Test::CSeq& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpCSeqResult>(true, this, &IPrx::_iceI_opCSeq, c1, context).get();
        c2 = ::std::move(_result.c2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opCSeqAsync(const ::Test::CSeq& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpCSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpCSeqResult, P>(false, this, &IPrx::_iceI_opCSeq, c1, context);
    }

    ::std::function<void()>
    opCSeqAsync(const ::Test::CSeq& c1,
                ::std::function<void(::Test::CSeq, ::Test::CSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpCSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.c2));
        };
        return _makeLambdaOutgoing<I::OpCSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opCSeq, c1, context);
    }

    /// \cond INTERNAL
    void _iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCSeqResult>>&, const ::Test::CSeq&, const ::Ice::Context&);
    /// \endcond

    ::Test::CMap opCMap(const ::Test::CMap& c1, ::Test::CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<I::OpCMapResult>(true, this, &IPrx::_iceI_opCMap, c1, context).get();
        c2 = ::std::move(_result.c2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opCMapAsync(const ::Test::CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<I::OpCMapResult>>().get_future())
    {
        return _makePromiseOutgoing<I::OpCMapResult, P>(false, this, &IPrx::_iceI_opCMap, c1, context);
    }

    ::std::function<void()>
    opCMapAsync(const ::Test::CMap& c1,
                ::std::function<void(::Test::CMap, ::Test::CMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](I::OpCMapResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.c2));
        };
        return _makeLambdaOutgoing<I::OpCMapResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_opCMap, c1, context);
    }

    /// \cond INTERNAL
    void _iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCMapResult>>&, const ::Test::CMap&, const ::Ice::Context&);
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Inner::Test::Inner2::IPrx::_iceI_shutdown, context);
    }

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    IPrx() = default;
    friend ::std::shared_ptr<IPrx> IceInternal::createProxy<IPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

}

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::Test::S>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Test::S, S>
{
    static void read(S* istr, ::Test::S& v)
    {
        istr->readAll(v.v);
    }
};

template<typename S>
struct StreamReader<::Test::C, S>
{
    static void read(S* istr, ::Test::C& v)
    {
        istr->readAll(v.s);
    }
};

template<>
struct StreamableTraits< ::Test::E1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::Test::S1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::S1, S>
{
    static void read(S* istr, ::Test::S1& v)
    {
        istr->readAll(v.s);
    }
};

template<typename S>
struct StreamReader<::Test::C1, S>
{
    static void read(S* istr, ::Test::C1& v)
    {
        istr->readAll(v.s);
    }
};

template<>
struct StreamableTraits<::Test::S2>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::S2, S>
{
    static void read(S* istr, ::Test::S2& v)
    {
        istr->readAll(v.E1, v.S1, v.C1);
    }
};

template<typename S>
struct StreamReader<::Test::C2, S>
{
    static void read(S* istr, ::Test::C2& v)
    {
        istr->readAll(v.E1, v.S1, v.C1);
    }
};

template<>
struct StreamableTraits<::Test::Inner::S>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Test::Inner::S, S>
{
    static void read(S* istr, ::Test::Inner::S& v)
    {
        istr->readAll(v.v);
    }
};

template<>
struct StreamableTraits<::Test::Inner::Inner2::S>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Test::Inner::Inner2::S, S>
{
    static void read(S* istr, ::Test::Inner::Inner2::S& v)
    {
        istr->readAll(v.v);
    }
};

template<typename S>
struct StreamReader<::Test::Inner::Inner2::C, S>
{
    static void read(S* istr, ::Test::Inner::Inner2::C& v)
    {
        istr->readAll(v.s);
    }
};

template<typename S>
struct StreamReader<::Test::Inner::C, S>
{
    static void read(S* istr, ::Test::Inner::C& v)
    {
        istr->readAll(v.s);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using CPtr = ::std::shared_ptr<C>;

using C1Ptr = ::std::shared_ptr<C1>;

using C2Ptr = ::std::shared_ptr<C2>;

using IPtr = ::std::shared_ptr<I>;
using IPrxPtr = ::std::shared_ptr<IPrx>;

/// \cond INTERNAL
namespace Inner
{

/// \cond INTERNAL
namespace Inner2
{

using CPtr = ::std::shared_ptr<C>;

using IPtr = ::std::shared_ptr<I>;
using IPrxPtr = ::std::shared_ptr<IPrx>;

}
/// \endcond

using CPtr = ::std::shared_ptr<C>;

using IPtr = ::std::shared_ptr<I>;
using IPrxPtr = ::std::shared_ptr<IPrx>;

}
/// \endcond

}
/// \endcond

/// \cond INTERNAL
namespace Inner
{

/// \cond INTERNAL
namespace Test
{

/// \cond INTERNAL
namespace Inner2
{

using IPtr = ::std::shared_ptr<I>;
using IPrxPtr = ::std::shared_ptr<IPrx>;

}
/// \endcond

}
/// \endcond

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Test
{

class I;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< I>&);
::IceProxy::Ice::Object* upCast(I*);
/// \endcond

namespace Inner
{

namespace Inner2
{

class I;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< I>&);
::IceProxy::Ice::Object* upCast(I*);
/// \endcond

}

class I;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< I>&);
::IceProxy::Ice::Object* upCast(I*);
/// \endcond

}

}

namespace Inner
{

namespace Test
{

namespace Inner2
{

class I;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< I>&);
::IceProxy::Ice::Object* upCast(I*);
/// \endcond

}

}

}

}

namespace Test
{

class C;
using CPtr = ::Ice::SharedPtr<C>;

class C1;
using C1Ptr = ::Ice::SharedPtr<C1>;

class C2;
using C2Ptr = ::Ice::SharedPtr<C2>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::I> IPrx;
typedef IPrx IPrxPtr;

class I;
typedef ::IceInternal::Handle< I> IPtr;

namespace Inner
{

namespace Inner2
{

class C;
using CPtr = ::Ice::SharedPtr<C>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Inner::Inner2::I> IPrx;
typedef IPrx IPrxPtr;

class I;
typedef ::IceInternal::Handle< I> IPtr;

}

class C;
using CPtr = ::Ice::SharedPtr<C>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Inner::I> IPrx;
typedef IPrx IPrxPtr;

class I;
typedef ::IceInternal::Handle< I> IPtr;

}

}

namespace Inner
{

namespace Test
{

namespace Inner2
{
typedef ::IceInternal::ProxyHandle< ::IceProxy::Inner::Test::Inner2::I> IPrx;
typedef IPrx IPrxPtr;

class I;
typedef ::IceInternal::Handle< I> IPtr;

}

}

}

namespace Test
{

struct S
{
    ::Ice::Int v;

    bool operator==(const S& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(v != rhs_.v)
        {
            return false;
        }
        return true;
    }

    bool operator<(const S& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(v < rhs_.v)
        {
            return true;
        }
        else if(rhs_.v < v)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const S& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const S& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const S& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const S& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::map< ::std::string, S> SMap;

typedef ::std::vector<S> SSeq;

typedef ::std::map< ::std::string, CPtr> CMap;

typedef ::std::vector<CPtr> CSeq;

enum E1
{
    v1,
    v2,
    v3
};

struct S1
{
    ::std::string s;

    bool operator==(const S1& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(s != rhs_.s)
        {
            return false;
        }
        return true;
    }

    bool operator<(const S1& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(s < rhs_.s)
        {
            return true;
        }
        else if(rhs_.s < s)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const S1& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const S1& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const S1& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const S1& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct S2
{
    ::Test::E1 E1;
    ::Test::S1 S1;
    ::Test::C1Ptr C1;
};

typedef ::std::map< ::std::string, IPrx> IMap;

typedef ::std::vector<IPrx> ISeq;

namespace Inner
{

struct S
{
    ::Ice::Int v;

    bool operator==(const S& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(v != rhs_.v)
        {
            return false;
        }
        return true;
    }

    bool operator<(const S& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(v < rhs_.v)
        {
            return true;
        }
        else if(rhs_.v < v)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const S& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const S& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const S& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const S& rhs_) const
    {
        return !operator<(rhs_);
    }
};

namespace Inner2
{

struct S
{
    ::Ice::Int v;

    bool operator==(const S& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(v != rhs_.v)
        {
            return false;
        }
        return true;
    }

    bool operator<(const S& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(v < rhs_.v)
        {
            return true;
        }
        else if(rhs_.v < v)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const S& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const S& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const S& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const S& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::map< ::std::string, S> SMap;

typedef ::std::vector<S> SSeq;

typedef ::std::map< ::std::string, CPtr> CMap;

typedef ::std::vector<CPtr> CSeq;

typedef ::std::map< ::std::string, IPrx> IMap;

typedef ::std::vector<IPrx> ISeq;

}

typedef ::std::vector< ::Test::Inner::Inner2::S> SSeq;

typedef ::std::map< ::std::string, ::Test::Inner::Inner2::S> SMap;

typedef ::std::map< ::std::string, ::Test::Inner::Inner2::CPtr> CMap;

typedef ::std::vector< ::Test::Inner::Inner2::CPtr> CSeq;

typedef ::std::map< ::std::string, IPrx> IMap;

typedef ::std::vector<IPrx> ISeq;

}

}

namespace Inner
{

namespace Test
{

namespace Inner2
{

}

}

}

namespace Test
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::I::begin_opS.
 * Create a wrapper instance by calling ::Test::newCallback_I_opS.
 */
class Callback_I_opS_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opS_Base> Callback_I_opSPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::I::begin_opSSeq.
 * Create a wrapper instance by calling ::Test::newCallback_I_opSSeq.
 */
class Callback_I_opSSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opSSeq_Base> Callback_I_opSSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::I::begin_opSMap.
 * Create a wrapper instance by calling ::Test::newCallback_I_opSMap.
 */
class Callback_I_opSMap_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opSMap_Base> Callback_I_opSMapPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::I::begin_opC.
 * Create a wrapper instance by calling ::Test::newCallback_I_opC.
 */
class Callback_I_opC_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opC_Base> Callback_I_opCPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::I::begin_opCSeq.
 * Create a wrapper instance by calling ::Test::newCallback_I_opCSeq.
 */
class Callback_I_opCSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opCSeq_Base> Callback_I_opCSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::I::begin_opCMap.
 * Create a wrapper instance by calling ::Test::newCallback_I_opCMap.
 */
class Callback_I_opCMap_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opCMap_Base> Callback_I_opCMapPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::I::begin_opE1.
 * Create a wrapper instance by calling ::Test::newCallback_I_opE1.
 */
class Callback_I_opE1_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opE1_Base> Callback_I_opE1Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::I::begin_opS1.
 * Create a wrapper instance by calling ::Test::newCallback_I_opS1.
 */
class Callback_I_opS1_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opS1_Base> Callback_I_opS1Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::I::begin_opC1.
 * Create a wrapper instance by calling ::Test::newCallback_I_opC1.
 */
class Callback_I_opC1_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opC1_Base> Callback_I_opC1Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::I::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_I_shutdown.
 */
class Callback_I_shutdown_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_shutdown_Base> Callback_I_shutdownPtr;

namespace Inner
{

namespace Inner2
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opS.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opS.
 */
class Callback_I_opS_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opS_Base> Callback_I_opSPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opSSeq.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opSSeq.
 */
class Callback_I_opSSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opSSeq_Base> Callback_I_opSSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opSMap.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opSMap.
 */
class Callback_I_opSMap_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opSMap_Base> Callback_I_opSMapPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opC.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opC.
 */
class Callback_I_opC_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opC_Base> Callback_I_opCPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opCSeq.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opCSeq.
 */
class Callback_I_opCSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opCSeq_Base> Callback_I_opCSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opCMap.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opCMap.
 */
class Callback_I_opCMap_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opCMap_Base> Callback_I_opCMapPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_shutdown.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_shutdown.
 */
class Callback_I_shutdown_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_shutdown_Base> Callback_I_shutdownPtr;

}

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Inner::I::begin_opS.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opS.
 */
class Callback_I_opS_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opS_Base> Callback_I_opSPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Inner::I::begin_opSSeq.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opSSeq.
 */
class Callback_I_opSSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opSSeq_Base> Callback_I_opSSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Inner::I::begin_opSMap.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opSMap.
 */
class Callback_I_opSMap_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opSMap_Base> Callback_I_opSMapPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Inner::I::begin_opC.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opC.
 */
class Callback_I_opC_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opC_Base> Callback_I_opCPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Inner::I::begin_opCSeq.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opCSeq.
 */
class Callback_I_opCSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opCSeq_Base> Callback_I_opCSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Inner::I::begin_opCMap.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opCMap.
 */
class Callback_I_opCMap_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opCMap_Base> Callback_I_opCMapPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Inner::I::begin_shutdown.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_shutdown.
 */
class Callback_I_shutdown_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_shutdown_Base> Callback_I_shutdownPtr;

}

}

namespace Inner
{

namespace Test
{

namespace Inner2
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opS.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opS.
 */
class Callback_I_opS_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opS_Base> Callback_I_opSPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opSSeq.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opSSeq.
 */
class Callback_I_opSSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opSSeq_Base> Callback_I_opSSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opSMap.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opSMap.
 */
class Callback_I_opSMap_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opSMap_Base> Callback_I_opSMapPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opC.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opC.
 */
class Callback_I_opC_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opC_Base> Callback_I_opCPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opCSeq.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opCSeq.
 */
class Callback_I_opCSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opCSeq_Base> Callback_I_opCSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opCMap.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opCMap.
 */
class Callback_I_opCMap_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_opCMap_Base> Callback_I_opCMapPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_shutdown.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_shutdown.
 */
class Callback_I_shutdown_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_I_shutdown_Base> Callback_I_shutdownPtr;

}

}

}

namespace IceProxy
{

namespace Test
{

class I : public virtual ::Ice::Proxy<I, ::IceProxy::Ice::Object>
{
public:

    ::Test::S opS(const ::Test::S& s1, ::Test::S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opS(s2, _iceI_begin_opS(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opS(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::S& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::S& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::S& s1, const ::Test::Callback_I_opSPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::S& s1, const ::Ice::Context& context, const ::Test::Callback_I_opSPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, context, cb, cookie);
    }

    ::Test::S end_opS(::Test::S& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opS(::Test::S& iceP_s2, ::Test::S& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opS(const ::Test::S&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::SSeq opSSeq(const ::Test::SSeq& s1, ::Test::SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSSeq(s2, _iceI_begin_opSSeq(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSSeq(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::SSeq& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::SSeq& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::SSeq& s1, const ::Test::Callback_I_opSSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::SSeq& s1, const ::Ice::Context& context, const ::Test::Callback_I_opSSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, context, cb, cookie);
    }

    ::Test::SSeq end_opSSeq(::Test::SSeq& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSSeq(::Test::SSeq& iceP_s2, ::Test::SSeq& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSSeq(const ::Test::SSeq&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::SMap opSMap(const ::Test::SMap& s1, ::Test::SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSMap(s2, _iceI_begin_opSMap(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSMap(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::SMap& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::SMap& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::SMap& s1, const ::Test::Callback_I_opSMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::SMap& s1, const ::Ice::Context& context, const ::Test::Callback_I_opSMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, context, cb, cookie);
    }

    ::Test::SMap end_opSMap(::Test::SMap& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSMap(::Test::SMap& iceP_s2, ::Test::SMap& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSMap(const ::Test::SMap&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::CPtr opC(const ::Test::CPtr& c1, ::Test::CPtr& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opC(c2, _iceI_begin_opC(c1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::CPtr& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opC(c1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::CPtr& c1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::CPtr& c1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::CPtr& c1, const ::Test::Callback_I_opCPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::CPtr& c1, const ::Ice::Context& context, const ::Test::Callback_I_opCPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, context, cb, cookie);
    }

    ::Test::CPtr end_opC(::Test::CPtr& c2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opC(::Test::CPtr& iceP_c2, ::Test::CPtr& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opC(const ::Test::CPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::CSeq opCSeq(const ::Test::CSeq& c1, ::Test::CSeq& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opCSeq(c2, _iceI_begin_opCSeq(c1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::CSeq& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opCSeq(c1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::CSeq& c1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::CSeq& c1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::CSeq& c1, const ::Test::Callback_I_opCSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::CSeq& c1, const ::Ice::Context& context, const ::Test::Callback_I_opCSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, context, cb, cookie);
    }

    ::Test::CSeq end_opCSeq(::Test::CSeq& c2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opCSeq(::Test::CSeq& iceP_c2, ::Test::CSeq& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opCSeq(const ::Test::CSeq&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::CMap opCMap(const ::Test::CMap& c1, ::Test::CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opCMap(c2, _iceI_begin_opCMap(c1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opCMap(c1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::CMap& c1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::CMap& c1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::CMap& c1, const ::Test::Callback_I_opCMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::CMap& c1, const ::Ice::Context& context, const ::Test::Callback_I_opCMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, context, cb, cookie);
    }

    ::Test::CMap end_opCMap(::Test::CMap& c2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opCMap(::Test::CMap& iceP_c2, ::Test::CMap& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opCMap(const ::Test::CMap&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::E1 opE1(::Test::E1 E1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opE1(_iceI_begin_opE1(E1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opE1(::Test::E1 E1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opE1(E1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opE1(::Test::E1 E1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opE1(E1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opE1(::Test::E1 E1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opE1(E1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opE1(::Test::E1 E1, const ::Test::Callback_I_opE1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opE1(E1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opE1(::Test::E1 E1, const ::Ice::Context& context, const ::Test::Callback_I_opE1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opE1(E1, context, cb, cookie);
    }

    ::Test::E1 end_opE1(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opE1(::Test::E1, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::S1 opS1(const ::Test::S1& S1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opS1(_iceI_begin_opS1(S1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opS1(const ::Test::S1& S1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opS1(S1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opS1(const ::Test::S1& S1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS1(S1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opS1(const ::Test::S1& S1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS1(S1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opS1(const ::Test::S1& S1, const ::Test::Callback_I_opS1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS1(S1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opS1(const ::Test::S1& S1, const ::Ice::Context& context, const ::Test::Callback_I_opS1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS1(S1, context, cb, cookie);
    }

    ::Test::S1 end_opS1(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opS1(const ::Test::S1&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::C1Ptr opC1(const ::Test::C1Ptr& C1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opC1(_iceI_begin_opC1(C1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opC1(const ::Test::C1Ptr& C1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opC1(C1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opC1(const ::Test::C1Ptr& C1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC1(C1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opC1(const ::Test::C1Ptr& C1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC1(C1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opC1(const ::Test::C1Ptr& C1, const ::Test::Callback_I_opC1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC1(C1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opC1(const ::Test::C1Ptr& C1, const ::Ice::Context& context, const ::Test::Callback_I_opC1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC1(C1, context, cb, cookie);
    }

    ::Test::C1Ptr end_opC1(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opC1(const ::Test::C1Ptr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_shutdown(_iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_I_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Test::Callback_I_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_shutdown(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

namespace Inner
{

namespace Inner2
{

class I : public virtual ::Ice::Proxy<I, ::IceProxy::Ice::Object>
{
public:

    ::Test::Inner::Inner2::S opS(const ::Test::Inner::Inner2::S& s1, ::Test::Inner::Inner2::S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opS(s2, _iceI_begin_opS(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::Inner::Inner2::S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opS(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::Inner::Inner2::S& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::Inner::Inner2::S& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::Inner::Inner2::S& s1, const ::Test::Inner::Inner2::Callback_I_opSPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::Inner::Inner2::S& s1, const ::Ice::Context& context, const ::Test::Inner::Inner2::Callback_I_opSPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, context, cb, cookie);
    }

    ::Test::Inner::Inner2::S end_opS(::Test::Inner::Inner2::S& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opS(::Test::Inner::Inner2::S& iceP_s2, ::Test::Inner::Inner2::S& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opS(const ::Test::Inner::Inner2::S&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::Inner::Inner2::SSeq opSSeq(const ::Test::Inner::Inner2::SSeq& s1, ::Test::Inner::Inner2::SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSSeq(s2, _iceI_begin_opSSeq(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::Inner::Inner2::SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSSeq(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::Inner::Inner2::SSeq& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::Inner::Inner2::SSeq& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::Inner::Inner2::SSeq& s1, const ::Test::Inner::Inner2::Callback_I_opSSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::Inner::Inner2::SSeq& s1, const ::Ice::Context& context, const ::Test::Inner::Inner2::Callback_I_opSSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, context, cb, cookie);
    }

    ::Test::Inner::Inner2::SSeq end_opSSeq(::Test::Inner::Inner2::SSeq& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSSeq(::Test::Inner::Inner2::SSeq& iceP_s2, ::Test::Inner::Inner2::SSeq& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSSeq(const ::Test::Inner::Inner2::SSeq&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::Inner::Inner2::SMap opSMap(const ::Test::Inner::Inner2::SMap& s1, ::Test::Inner::Inner2::SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSMap(s2, _iceI_begin_opSMap(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::Inner::Inner2::SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSMap(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::Inner::Inner2::SMap& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::Inner::Inner2::SMap& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::Inner::Inner2::SMap& s1, const ::Test::Inner::Inner2::Callback_I_opSMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::Inner::Inner2::SMap& s1, const ::Ice::Context& context, const ::Test::Inner::Inner2::Callback_I_opSMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, context, cb, cookie);
    }

    ::Test::Inner::Inner2::SMap end_opSMap(::Test::Inner::Inner2::SMap& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSMap(::Test::Inner::Inner2::SMap& iceP_s2, ::Test::Inner::Inner2::SMap& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSMap(const ::Test::Inner::Inner2::SMap&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::Inner::Inner2::CPtr opC(const ::Test::Inner::Inner2::CPtr& c1, ::Test::Inner::Inner2::CPtr& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opC(c2, _iceI_begin_opC(c1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::Inner::Inner2::CPtr& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opC(c1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::Inner::Inner2::CPtr& c1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::Inner::Inner2::CPtr& c1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::Inner::Inner2::CPtr& c1, const ::Test::Inner::Inner2::Callback_I_opCPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::Inner::Inner2::CPtr& c1, const ::Ice::Context& context, const ::Test::Inner::Inner2::Callback_I_opCPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, context, cb, cookie);
    }

    ::Test::Inner::Inner2::CPtr end_opC(::Test::Inner::Inner2::CPtr& c2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opC(::Test::Inner::Inner2::CPtr& iceP_c2, ::Test::Inner::Inner2::CPtr& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opC(const ::Test::Inner::Inner2::CPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::Inner::Inner2::CSeq opCSeq(const ::Test::Inner::Inner2::CSeq& c1, ::Test::Inner::Inner2::CSeq& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opCSeq(c2, _iceI_begin_opCSeq(c1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::Inner::Inner2::CSeq& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opCSeq(c1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::Inner::Inner2::CSeq& c1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::Inner::Inner2::CSeq& c1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::Inner::Inner2::CSeq& c1, const ::Test::Inner::Inner2::Callback_I_opCSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::Inner::Inner2::CSeq& c1, const ::Ice::Context& context, const ::Test::Inner::Inner2::Callback_I_opCSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, context, cb, cookie);
    }

    ::Test::Inner::Inner2::CSeq end_opCSeq(::Test::Inner::Inner2::CSeq& c2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opCSeq(::Test::Inner::Inner2::CSeq& iceP_c2, ::Test::Inner::Inner2::CSeq& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opCSeq(const ::Test::Inner::Inner2::CSeq&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::Inner::Inner2::CMap opCMap(const ::Test::Inner::Inner2::CMap& c1, ::Test::Inner::Inner2::CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opCMap(c2, _iceI_begin_opCMap(c1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::Inner::Inner2::CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opCMap(c1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::Inner::Inner2::CMap& c1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::Inner::Inner2::CMap& c1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::Inner::Inner2::CMap& c1, const ::Test::Inner::Inner2::Callback_I_opCMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::Inner::Inner2::CMap& c1, const ::Ice::Context& context, const ::Test::Inner::Inner2::Callback_I_opCMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, context, cb, cookie);
    }

    ::Test::Inner::Inner2::CMap end_opCMap(::Test::Inner::Inner2::CMap& c2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opCMap(::Test::Inner::Inner2::CMap& iceP_c2, ::Test::Inner::Inner2::CMap& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opCMap(const ::Test::Inner::Inner2::CMap&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_shutdown(_iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Inner::Inner2::Callback_I_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Test::Inner::Inner2::Callback_I_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_shutdown(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

class I : public virtual ::Ice::Proxy<I, ::IceProxy::Ice::Object>
{
public:

    ::Test::Inner::Inner2::S opS(const ::Test::Inner::Inner2::S& s1, ::Test::Inner::Inner2::S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opS(s2, _iceI_begin_opS(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::Inner::Inner2::S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opS(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::Inner::Inner2::S& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::Inner::Inner2::S& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::Inner::Inner2::S& s1, const ::Test::Inner::Callback_I_opSPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::Inner::Inner2::S& s1, const ::Ice::Context& context, const ::Test::Inner::Callback_I_opSPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, context, cb, cookie);
    }

    ::Test::Inner::Inner2::S end_opS(::Test::Inner::Inner2::S& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opS(::Test::Inner::Inner2::S& iceP_s2, ::Test::Inner::Inner2::S& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opS(const ::Test::Inner::Inner2::S&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::Inner::Inner2::SSeq opSSeq(const ::Test::Inner::Inner2::SSeq& s1, ::Test::Inner::Inner2::SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSSeq(s2, _iceI_begin_opSSeq(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::Inner::Inner2::SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSSeq(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::Inner::Inner2::SSeq& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::Inner::Inner2::SSeq& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::Inner::Inner2::SSeq& s1, const ::Test::Inner::Callback_I_opSSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::Inner::Inner2::SSeq& s1, const ::Ice::Context& context, const ::Test::Inner::Callback_I_opSSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, context, cb, cookie);
    }

    ::Test::Inner::Inner2::SSeq end_opSSeq(::Test::Inner::Inner2::SSeq& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSSeq(::Test::Inner::Inner2::SSeq& iceP_s2, ::Test::Inner::Inner2::SSeq& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSSeq(const ::Test::Inner::Inner2::SSeq&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::Inner::Inner2::SMap opSMap(const ::Test::Inner::Inner2::SMap& s1, ::Test::Inner::Inner2::SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSMap(s2, _iceI_begin_opSMap(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::Inner::Inner2::SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSMap(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::Inner::Inner2::SMap& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::Inner::Inner2::SMap& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::Inner::Inner2::SMap& s1, const ::Test::Inner::Callback_I_opSMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::Inner::Inner2::SMap& s1, const ::Ice::Context& context, const ::Test::Inner::Callback_I_opSMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, context, cb, cookie);
    }

    ::Test::Inner::Inner2::SMap end_opSMap(::Test::Inner::Inner2::SMap& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSMap(::Test::Inner::Inner2::SMap& iceP_s2, ::Test::Inner::Inner2::SMap& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSMap(const ::Test::Inner::Inner2::SMap&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::Inner::Inner2::CPtr opC(const ::Test::Inner::Inner2::CPtr& c1, ::Test::Inner::Inner2::CPtr& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opC(c2, _iceI_begin_opC(c1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::Inner::Inner2::CPtr& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opC(c1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::Inner::Inner2::CPtr& c1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::Inner::Inner2::CPtr& c1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::Inner::Inner2::CPtr& c1, const ::Test::Inner::Callback_I_opCPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::Inner::Inner2::CPtr& c1, const ::Ice::Context& context, const ::Test::Inner::Callback_I_opCPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, context, cb, cookie);
    }

    ::Test::Inner::Inner2::CPtr end_opC(::Test::Inner::Inner2::CPtr& c2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opC(::Test::Inner::Inner2::CPtr& iceP_c2, ::Test::Inner::Inner2::CPtr& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opC(const ::Test::Inner::Inner2::CPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::Inner::Inner2::CSeq opCSeq(const ::Test::Inner::Inner2::CSeq& c1, ::Test::Inner::Inner2::CSeq& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opCSeq(c2, _iceI_begin_opCSeq(c1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::Inner::Inner2::CSeq& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opCSeq(c1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::Inner::Inner2::CSeq& c1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::Inner::Inner2::CSeq& c1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::Inner::Inner2::CSeq& c1, const ::Test::Inner::Callback_I_opCSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::Inner::Inner2::CSeq& c1, const ::Ice::Context& context, const ::Test::Inner::Callback_I_opCSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, context, cb, cookie);
    }

    ::Test::Inner::Inner2::CSeq end_opCSeq(::Test::Inner::Inner2::CSeq& c2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opCSeq(::Test::Inner::Inner2::CSeq& iceP_c2, ::Test::Inner::Inner2::CSeq& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opCSeq(const ::Test::Inner::Inner2::CSeq&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::Inner::Inner2::CMap opCMap(const ::Test::Inner::Inner2::CMap& c1, ::Test::Inner::Inner2::CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opCMap(c2, _iceI_begin_opCMap(c1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::Inner::Inner2::CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opCMap(c1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::Inner::Inner2::CMap& c1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::Inner::Inner2::CMap& c1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::Inner::Inner2::CMap& c1, const ::Test::Inner::Callback_I_opCMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::Inner::Inner2::CMap& c1, const ::Ice::Context& context, const ::Test::Inner::Callback_I_opCMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, context, cb, cookie);
    }

    ::Test::Inner::Inner2::CMap end_opCMap(::Test::Inner::Inner2::CMap& c2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opCMap(::Test::Inner::Inner2::CMap& iceP_c2, ::Test::Inner::Inner2::CMap& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opCMap(const ::Test::Inner::Inner2::CMap&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_shutdown(_iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Inner::Callback_I_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Test::Inner::Callback_I_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_shutdown(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Inner
{

namespace Test
{

namespace Inner2
{

class I : public virtual ::Ice::Proxy<I, ::IceProxy::Ice::Object>
{
public:

    ::Test::S opS(const ::Test::S& s1, ::Test::S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opS(s2, _iceI_begin_opS(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opS(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::S& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::S& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::S& s1, const ::Inner::Test::Inner2::Callback_I_opSPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opS(const ::Test::S& s1, const ::Ice::Context& context, const ::Inner::Test::Inner2::Callback_I_opSPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opS(s1, context, cb, cookie);
    }

    ::Test::S end_opS(::Test::S& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opS(::Test::S& iceP_s2, ::Test::S& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opS(const ::Test::S&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::SSeq opSSeq(const ::Test::SSeq& s1, ::Test::SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSSeq(s2, _iceI_begin_opSSeq(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSSeq(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::SSeq& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::SSeq& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::SSeq& s1, const ::Inner::Test::Inner2::Callback_I_opSSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSSeq(const ::Test::SSeq& s1, const ::Ice::Context& context, const ::Inner::Test::Inner2::Callback_I_opSSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSSeq(s1, context, cb, cookie);
    }

    ::Test::SSeq end_opSSeq(::Test::SSeq& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSSeq(::Test::SSeq& iceP_s2, ::Test::SSeq& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSSeq(const ::Test::SSeq&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::SMap opSMap(const ::Test::SMap& s1, ::Test::SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSMap(s2, _iceI_begin_opSMap(s1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSMap(s1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::SMap& s1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::SMap& s1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::SMap& s1, const ::Inner::Test::Inner2::Callback_I_opSMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSMap(const ::Test::SMap& s1, const ::Ice::Context& context, const ::Inner::Test::Inner2::Callback_I_opSMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSMap(s1, context, cb, cookie);
    }

    ::Test::SMap end_opSMap(::Test::SMap& s2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSMap(::Test::SMap& iceP_s2, ::Test::SMap& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSMap(const ::Test::SMap&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::CPtr opC(const ::Test::CPtr& c1, ::Test::CPtr& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opC(c2, _iceI_begin_opC(c1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::CPtr& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opC(c1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::CPtr& c1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::CPtr& c1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::CPtr& c1, const ::Inner::Test::Inner2::Callback_I_opCPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opC(const ::Test::CPtr& c1, const ::Ice::Context& context, const ::Inner::Test::Inner2::Callback_I_opCPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opC(c1, context, cb, cookie);
    }

    ::Test::CPtr end_opC(::Test::CPtr& c2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opC(::Test::CPtr& iceP_c2, ::Test::CPtr& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opC(const ::Test::CPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::CSeq opCSeq(const ::Test::CSeq& c1, ::Test::CSeq& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opCSeq(c2, _iceI_begin_opCSeq(c1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::CSeq& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opCSeq(c1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::CSeq& c1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::CSeq& c1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::CSeq& c1, const ::Inner::Test::Inner2::Callback_I_opCSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCSeq(const ::Test::CSeq& c1, const ::Ice::Context& context, const ::Inner::Test::Inner2::Callback_I_opCSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCSeq(c1, context, cb, cookie);
    }

    ::Test::CSeq end_opCSeq(::Test::CSeq& c2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opCSeq(::Test::CSeq& iceP_c2, ::Test::CSeq& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opCSeq(const ::Test::CSeq&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::CMap opCMap(const ::Test::CMap& c1, ::Test::CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opCMap(c2, _iceI_begin_opCMap(c1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opCMap(c1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::CMap& c1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::CMap& c1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::CMap& c1, const ::Inner::Test::Inner2::Callback_I_opCMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opCMap(const ::Test::CMap& c1, const ::Ice::Context& context, const ::Inner::Test::Inner2::Callback_I_opCMapPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opCMap(c1, context, cb, cookie);
    }

    ::Test::CMap end_opCMap(::Test::CMap& c2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opCMap(::Test::CMap& iceP_c2, ::Test::CMap& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opCMap(const ::Test::CMap&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_shutdown(_iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Inner::Test::Inner2::Callback_I_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Inner::Test::Inner2::Callback_I_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_shutdown(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

}

}

namespace Test
{

class I : public virtual ::Ice::Object
{
public:

    typedef IPrx ProxyType;

    virtual ~I();
    I() = default;
    I(const I&) = default;
    I& operator=(const I&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual S opS(const S& s1, S& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SSeq opSSeq(const SSeq& s1, SSeq& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SMap opSMap(const SMap& s1, SMap& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual CPtr opC(const CPtr& c1, CPtr& c2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opC(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual CSeq opCSeq(const CSeq& c1, CSeq& c2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opCSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual CMap opCMap(const CMap& c1, CMap& c2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opCMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual E1 opE1(E1 E1, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opE1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual S1 opS1(const S1& S1, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opS1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual C1Ptr opC1(const C1Ptr& C1, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opC1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

namespace Inner
{

namespace Inner2
{

class I : public virtual ::Ice::Object
{
public:

    typedef IPrx ProxyType;

    virtual ~I();
    I() = default;
    I(const I&) = default;
    I& operator=(const I&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual S opS(const S& s1, S& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SSeq opSSeq(const SSeq& s1, SSeq& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SMap opSMap(const SMap& s1, SMap& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual CPtr opC(const CPtr& c1, CPtr& c2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opC(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual CSeq opCSeq(const CSeq& c1, CSeq& c2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opCSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual CMap opCMap(const CMap& c1, CMap& c2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opCMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

class I : public virtual ::Ice::Object
{
public:

    typedef IPrx ProxyType;

    virtual ~I();
    I() = default;
    I(const I&) = default;
    I& operator=(const I&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::Test::Inner::Inner2::S opS(const ::Test::Inner::Inner2::S& s1, ::Test::Inner::Inner2::S& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Test::Inner::Inner2::SSeq opSSeq(const ::Test::Inner::Inner2::SSeq& s1, ::Test::Inner::Inner2::SSeq& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Test::Inner::Inner2::SMap opSMap(const ::Test::Inner::Inner2::SMap& s1, ::Test::Inner::Inner2::SMap& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Test::Inner::Inner2::CPtr opC(const ::Test::Inner::Inner2::CPtr& c1, ::Test::Inner::Inner2::CPtr& c2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opC(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Test::Inner::Inner2::CSeq opCSeq(const ::Test::Inner::Inner2::CSeq& c1, ::Test::Inner::Inner2::CSeq& c2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opCSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Test::Inner::Inner2::CMap opCMap(const ::Test::Inner::Inner2::CMap& c1, ::Test::Inner::Inner2::CMap& c2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opCMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

}

namespace Inner
{

namespace Test
{

namespace Inner2
{

class I : public virtual ::Ice::Object
{
public:

    typedef IPrx ProxyType;

    virtual ~I();
    I() = default;
    I(const I&) = default;
    I& operator=(const I&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::Test::S opS(const ::Test::S& s1, ::Test::S& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Test::SSeq opSSeq(const ::Test::SSeq& s1, ::Test::SSeq& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Test::SMap opSMap(const ::Test::SMap& s1, ::Test::SMap& s2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Test::CPtr opC(const ::Test::CPtr& c1, ::Test::CPtr& c2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opC(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Test::CSeq opCSeq(const ::Test::CSeq& c1, ::Test::CSeq& c2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opCSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Test::CMap opCMap(const ::Test::CMap& c1, ::Test::CMap& c2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opCMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

}

}

namespace Test
{

class C : public ::Ice::ValueHelper<C, ::Ice::Value>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C(const ::Test::S& s) :
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::S&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::S s;
};

/// \cond INTERNAL
static C _iceS_C_init;
/// \endcond

class C1 : public ::Ice::ValueHelper<C1, ::Ice::Value>
{
public:

    virtual ~C1();

    C1() = default;

    C1(const C1&) = default;
    C1(C1&&) = default;
    C1& operator=(const C1&) = default;
    C1& operator=(C1&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C1(const ::std::string& s) :
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string s;
};

class C2 : public ::Ice::ValueHelper<C2, ::Ice::Value>
{
public:

    virtual ~C2();

    C2() = default;

    C2(const C2&) = default;
    C2(C2&&) = default;
    C2& operator=(const C2&) = default;
    C2& operator=(C2&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C2(::Test::E1 E1, const ::Test::S1& S1, const ::Test::C1Ptr& C1) :
        E1(E1),
        S1(S1),
        C1(C1)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::E1&, const ::Test::S1&, const ::Test::C1Ptr&> ice_tuple() const
    {
        return std::tie(E1, S1, C1);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::E1 E1;
    ::Test::S1 S1;
    ::Test::C1Ptr C1;
};

namespace Inner
{

namespace Inner2
{

class C : public ::Ice::ValueHelper<C, ::Ice::Value>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C(const ::Test::Inner::Inner2::S& s) :
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::Inner::Inner2::S&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::Inner::Inner2::S s;
};

}

class C : public ::Ice::ValueHelper<C, ::Ice::Value>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C(const ::Test::Inner::S& s) :
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::Inner::S&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::Inner::S s;
};

}

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Test::S>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::Test::S, S>
{
    static void write(S* ostr, const ::Test::S& v)
    {
        ostr->write(v.v);
    }
};

template<typename S>
struct StreamReader< ::Test::S, S>
{
    static void read(S* istr, ::Test::S& v)
    {
        istr->read(v.v);
    }
};

template<typename S>
struct StreamWriter< ::Test::C, S>
{
    static void write(S* ostr, const ::Test::C& v)
    {
        ostr->write(v.s);
    }
};

template<typename S>
struct StreamReader< ::Test::C, S>
{
    static void read(S* istr, ::Test::C& v)
    {
        istr->read(v.s);
    }
};

template<>
struct StreamableTraits< ::Test::E1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Test::S1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Test::S1, S>
{
    static void write(S* ostr, const ::Test::S1& v)
    {
        ostr->write(v.s);
    }
};

template<typename S>
struct StreamReader< ::Test::S1, S>
{
    static void read(S* istr, ::Test::S1& v)
    {
        istr->read(v.s);
    }
};

template<typename S>
struct StreamWriter< ::Test::C1, S>
{
    static void write(S* ostr, const ::Test::C1& v)
    {
        ostr->write(v.s);
    }
};

template<typename S>
struct StreamReader< ::Test::C1, S>
{
    static void read(S* istr, ::Test::C1& v)
    {
        istr->read(v.s);
    }
};

template<>
struct StreamableTraits< ::Test::S2>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Test::S2, S>
{
    static void write(S* ostr, const ::Test::S2& v)
    {
        ostr->write(v.E1);
        ostr->write(v.S1);
        ostr->write(v.C1);
    }
};

template<typename S>
struct StreamReader< ::Test::S2, S>
{
    static void read(S* istr, ::Test::S2& v)
    {
        istr->read(v.E1);
        istr->read(v.S1);
        istr->read(v.C1);
    }
};

template<typename S>
struct StreamWriter< ::Test::C2, S>
{
    static void write(S* ostr, const ::Test::C2& v)
    {
        ostr->write(v.E1);
        ostr->write(v.S1);
        ostr->write(v.C1);
    }
};

template<typename S>
struct StreamReader< ::Test::C2, S>
{
    static void read(S* istr, ::Test::C2& v)
    {
        istr->read(v.E1);
        istr->read(v.S1);
        istr->read(v.C1);
    }
};

template<>
struct StreamableTraits< ::Test::Inner::S>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::Test::Inner::S, S>
{
    static void write(S* ostr, const ::Test::Inner::S& v)
    {
        ostr->write(v.v);
    }
};

template<typename S>
struct StreamReader< ::Test::Inner::S, S>
{
    static void read(S* istr, ::Test::Inner::S& v)
    {
        istr->read(v.v);
    }
};

template<>
struct StreamableTraits< ::Test::Inner::Inner2::S>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::Test::Inner::Inner2::S, S>
{
    static void write(S* ostr, const ::Test::Inner::Inner2::S& v)
    {
        ostr->write(v.v);
    }
};

template<typename S>
struct StreamReader< ::Test::Inner::Inner2::S, S>
{
    static void read(S* istr, ::Test::Inner::Inner2::S& v)
    {
        istr->read(v.v);
    }
};

template<typename S>
struct StreamWriter< ::Test::Inner::Inner2::C, S>
{
    static void write(S* ostr, const ::Test::Inner::Inner2::C& v)
    {
        ostr->write(v.s);
    }
};

template<typename S>
struct StreamReader< ::Test::Inner::Inner2::C, S>
{
    static void read(S* istr, ::Test::Inner::Inner2::C& v)
    {
        istr->read(v.s);
    }
};

template<typename S>
struct StreamWriter< ::Test::Inner::C, S>
{
    static void write(S* ostr, const ::Test::Inner::C& v)
    {
        ostr->write(v.s);
    }
};

template<typename S>
struct StreamReader< ::Test::Inner::C, S>
{
    static void read(S* istr, ::Test::Inner::C& v)
    {
        istr->read(v.s);
    }
};

}
/// \endcond

namespace Test
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::I::begin_opS.
 * Create a wrapper instance by calling ::Test::newCallback_I_opS.
 */
template<class T>
class CallbackNC_I_opS : public Callback_I_opS_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const S&, const S&);

    CallbackNC_I_opS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        S iceP_s2;
        S ret;
        try
        {
            ret = proxy->end_opS(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opS.
 */
template<class T> Callback_I_opSPtr
newCallback_I_opS(const IceUtil::Handle<T>& instance, void (T::*cb)(const S&, const S&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opS<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opS.
 */
template<class T> Callback_I_opSPtr
newCallback_I_opS(T* instance, void (T::*cb)(const S&, const S&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opS<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::I::begin_opS.
 * Create a wrapper instance by calling ::Test::newCallback_I_opS.
 */
template<class T, typename CT>
class Callback_I_opS : public Callback_I_opS_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const S&, const S&, const CT&);

    Callback_I_opS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        S iceP_s2;
        S ret;
        try
        {
            ret = proxy->end_opS(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opS.
 */
template<class T, typename CT> Callback_I_opSPtr
newCallback_I_opS(const IceUtil::Handle<T>& instance, void (T::*cb)(const S&, const S&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opS.
 */
template<class T, typename CT> Callback_I_opSPtr
newCallback_I_opS(T* instance, void (T::*cb)(const S&, const S&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::I::begin_opSSeq.
 * Create a wrapper instance by calling ::Test::newCallback_I_opSSeq.
 */
template<class T>
class CallbackNC_I_opSSeq : public Callback_I_opSSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SSeq&, const SSeq&);

    CallbackNC_I_opSSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        SSeq iceP_s2;
        SSeq ret;
        try
        {
            ret = proxy->end_opSSeq(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opSSeq.
 */
template<class T> Callback_I_opSSeqPtr
newCallback_I_opSSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const SSeq&, const SSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opSSeq.
 */
template<class T> Callback_I_opSSeqPtr
newCallback_I_opSSeq(T* instance, void (T::*cb)(const SSeq&, const SSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::I::begin_opSSeq.
 * Create a wrapper instance by calling ::Test::newCallback_I_opSSeq.
 */
template<class T, typename CT>
class Callback_I_opSSeq : public Callback_I_opSSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SSeq&, const SSeq&, const CT&);

    Callback_I_opSSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        SSeq iceP_s2;
        SSeq ret;
        try
        {
            ret = proxy->end_opSSeq(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opSSeq.
 */
template<class T, typename CT> Callback_I_opSSeqPtr
newCallback_I_opSSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const SSeq&, const SSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opSSeq.
 */
template<class T, typename CT> Callback_I_opSSeqPtr
newCallback_I_opSSeq(T* instance, void (T::*cb)(const SSeq&, const SSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::I::begin_opSMap.
 * Create a wrapper instance by calling ::Test::newCallback_I_opSMap.
 */
template<class T>
class CallbackNC_I_opSMap : public Callback_I_opSMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SMap&, const SMap&);

    CallbackNC_I_opSMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        SMap iceP_s2;
        SMap ret;
        try
        {
            ret = proxy->end_opSMap(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opSMap.
 */
template<class T> Callback_I_opSMapPtr
newCallback_I_opSMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const SMap&, const SMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSMap<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opSMap.
 */
template<class T> Callback_I_opSMapPtr
newCallback_I_opSMap(T* instance, void (T::*cb)(const SMap&, const SMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSMap<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::I::begin_opSMap.
 * Create a wrapper instance by calling ::Test::newCallback_I_opSMap.
 */
template<class T, typename CT>
class Callback_I_opSMap : public Callback_I_opSMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SMap&, const SMap&, const CT&);

    Callback_I_opSMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        SMap iceP_s2;
        SMap ret;
        try
        {
            ret = proxy->end_opSMap(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opSMap.
 */
template<class T, typename CT> Callback_I_opSMapPtr
newCallback_I_opSMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const SMap&, const SMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opSMap.
 */
template<class T, typename CT> Callback_I_opSMapPtr
newCallback_I_opSMap(T* instance, void (T::*cb)(const SMap&, const SMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::I::begin_opC.
 * Create a wrapper instance by calling ::Test::newCallback_I_opC.
 */
template<class T>
class CallbackNC_I_opC : public Callback_I_opC_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const CPtr&, const CPtr&);

    CallbackNC_I_opC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        CPtr iceP_c2;
        CPtr ret;
        try
        {
            ret = proxy->end_opC(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_c2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opC.
 */
template<class T> Callback_I_opCPtr
newCallback_I_opC(const IceUtil::Handle<T>& instance, void (T::*cb)(const CPtr&, const CPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opC<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opC.
 */
template<class T> Callback_I_opCPtr
newCallback_I_opC(T* instance, void (T::*cb)(const CPtr&, const CPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opC<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::I::begin_opC.
 * Create a wrapper instance by calling ::Test::newCallback_I_opC.
 */
template<class T, typename CT>
class Callback_I_opC : public Callback_I_opC_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CPtr&, const CPtr&, const CT&);

    Callback_I_opC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        CPtr iceP_c2;
        CPtr ret;
        try
        {
            ret = proxy->end_opC(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_c2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opC.
 */
template<class T, typename CT> Callback_I_opCPtr
newCallback_I_opC(const IceUtil::Handle<T>& instance, void (T::*cb)(const CPtr&, const CPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opC<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opC.
 */
template<class T, typename CT> Callback_I_opCPtr
newCallback_I_opC(T* instance, void (T::*cb)(const CPtr&, const CPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opC<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::I::begin_opCSeq.
 * Create a wrapper instance by calling ::Test::newCallback_I_opCSeq.
 */
template<class T>
class CallbackNC_I_opCSeq : public Callback_I_opCSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const CSeq&, const CSeq&);

    CallbackNC_I_opCSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        CSeq iceP_c2;
        CSeq ret;
        try
        {
            ret = proxy->end_opCSeq(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_c2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opCSeq.
 */
template<class T> Callback_I_opCSeqPtr
newCallback_I_opCSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const CSeq&, const CSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opCSeq.
 */
template<class T> Callback_I_opCSeqPtr
newCallback_I_opCSeq(T* instance, void (T::*cb)(const CSeq&, const CSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::I::begin_opCSeq.
 * Create a wrapper instance by calling ::Test::newCallback_I_opCSeq.
 */
template<class T, typename CT>
class Callback_I_opCSeq : public Callback_I_opCSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CSeq&, const CSeq&, const CT&);

    Callback_I_opCSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        CSeq iceP_c2;
        CSeq ret;
        try
        {
            ret = proxy->end_opCSeq(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_c2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opCSeq.
 */
template<class T, typename CT> Callback_I_opCSeqPtr
newCallback_I_opCSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const CSeq&, const CSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opCSeq.
 */
template<class T, typename CT> Callback_I_opCSeqPtr
newCallback_I_opCSeq(T* instance, void (T::*cb)(const CSeq&, const CSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::I::begin_opCMap.
 * Create a wrapper instance by calling ::Test::newCallback_I_opCMap.
 */
template<class T>
class CallbackNC_I_opCMap : public Callback_I_opCMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const CMap&, const CMap&);

    CallbackNC_I_opCMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        CMap iceP_c2;
        CMap ret;
        try
        {
            ret = proxy->end_opCMap(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_c2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opCMap.
 */
template<class T> Callback_I_opCMapPtr
newCallback_I_opCMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CMap&, const CMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCMap<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opCMap.
 */
template<class T> Callback_I_opCMapPtr
newCallback_I_opCMap(T* instance, void (T::*cb)(const CMap&, const CMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCMap<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::I::begin_opCMap.
 * Create a wrapper instance by calling ::Test::newCallback_I_opCMap.
 */
template<class T, typename CT>
class Callback_I_opCMap : public Callback_I_opCMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CMap&, const CMap&, const CT&);

    Callback_I_opCMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        CMap iceP_c2;
        CMap ret;
        try
        {
            ret = proxy->end_opCMap(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_c2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opCMap.
 */
template<class T, typename CT> Callback_I_opCMapPtr
newCallback_I_opCMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CMap&, const CMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opCMap.
 */
template<class T, typename CT> Callback_I_opCMapPtr
newCallback_I_opCMap(T* instance, void (T::*cb)(const CMap&, const CMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::I::begin_opE1.
 * Create a wrapper instance by calling ::Test::newCallback_I_opE1.
 */
template<class T>
class CallbackNC_I_opE1 : public Callback_I_opE1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(E1);

    CallbackNC_I_opE1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        E1 ret;
        try
        {
            ret = proxy->end_opE1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opE1.
 */
template<class T> Callback_I_opE1Ptr
newCallback_I_opE1(const IceUtil::Handle<T>& instance, void (T::*cb)(E1), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opE1<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opE1.
 */
template<class T> Callback_I_opE1Ptr
newCallback_I_opE1(T* instance, void (T::*cb)(E1), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opE1<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::I::begin_opE1.
 * Create a wrapper instance by calling ::Test::newCallback_I_opE1.
 */
template<class T, typename CT>
class Callback_I_opE1 : public Callback_I_opE1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(E1, const CT&);

    Callback_I_opE1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        E1 ret;
        try
        {
            ret = proxy->end_opE1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opE1.
 */
template<class T, typename CT> Callback_I_opE1Ptr
newCallback_I_opE1(const IceUtil::Handle<T>& instance, void (T::*cb)(E1, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opE1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opE1.
 */
template<class T, typename CT> Callback_I_opE1Ptr
newCallback_I_opE1(T* instance, void (T::*cb)(E1, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opE1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::I::begin_opS1.
 * Create a wrapper instance by calling ::Test::newCallback_I_opS1.
 */
template<class T>
class CallbackNC_I_opS1 : public Callback_I_opS1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const S1&);

    CallbackNC_I_opS1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        S1 ret;
        try
        {
            ret = proxy->end_opS1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opS1.
 */
template<class T> Callback_I_opS1Ptr
newCallback_I_opS1(const IceUtil::Handle<T>& instance, void (T::*cb)(const S1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opS1<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opS1.
 */
template<class T> Callback_I_opS1Ptr
newCallback_I_opS1(T* instance, void (T::*cb)(const S1&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opS1<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::I::begin_opS1.
 * Create a wrapper instance by calling ::Test::newCallback_I_opS1.
 */
template<class T, typename CT>
class Callback_I_opS1 : public Callback_I_opS1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const S1&, const CT&);

    Callback_I_opS1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        S1 ret;
        try
        {
            ret = proxy->end_opS1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opS1.
 */
template<class T, typename CT> Callback_I_opS1Ptr
newCallback_I_opS1(const IceUtil::Handle<T>& instance, void (T::*cb)(const S1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opS1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opS1.
 */
template<class T, typename CT> Callback_I_opS1Ptr
newCallback_I_opS1(T* instance, void (T::*cb)(const S1&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opS1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::I::begin_opC1.
 * Create a wrapper instance by calling ::Test::newCallback_I_opC1.
 */
template<class T>
class CallbackNC_I_opC1 : public Callback_I_opC1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const C1Ptr&);

    CallbackNC_I_opC1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        C1Ptr ret;
        try
        {
            ret = proxy->end_opC1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opC1.
 */
template<class T> Callback_I_opC1Ptr
newCallback_I_opC1(const IceUtil::Handle<T>& instance, void (T::*cb)(const C1Ptr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opC1<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opC1.
 */
template<class T> Callback_I_opC1Ptr
newCallback_I_opC1(T* instance, void (T::*cb)(const C1Ptr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opC1<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::I::begin_opC1.
 * Create a wrapper instance by calling ::Test::newCallback_I_opC1.
 */
template<class T, typename CT>
class Callback_I_opC1 : public Callback_I_opC1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const C1Ptr&, const CT&);

    Callback_I_opC1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        C1Ptr ret;
        try
        {
            ret = proxy->end_opC1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opC1.
 */
template<class T, typename CT> Callback_I_opC1Ptr
newCallback_I_opC1(const IceUtil::Handle<T>& instance, void (T::*cb)(const C1Ptr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opC1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_opC1.
 */
template<class T, typename CT> Callback_I_opC1Ptr
newCallback_I_opC1(T* instance, void (T::*cb)(const C1Ptr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opC1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::I::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_I_shutdown.
 */
template<class T>
class CallbackNC_I_shutdown : public Callback_I_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_I_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::I::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_I_shutdown.
 */
template<class T, typename CT>
class Callback_I_shutdown : public Callback_I_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_I_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, 0, excb, sentcb);
}

namespace Inner
{

namespace Inner2
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opS.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opS.
 */
template<class T>
class CallbackNC_I_opS : public Callback_I_opS_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const S&, const S&);

    CallbackNC_I_opS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        S iceP_s2;
        S ret;
        try
        {
            ret = proxy->end_opS(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opS.
 */
template<class T> Callback_I_opSPtr
newCallback_I_opS(const IceUtil::Handle<T>& instance, void (T::*cb)(const S&, const S&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opS<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opS.
 */
template<class T> Callback_I_opSPtr
newCallback_I_opS(T* instance, void (T::*cb)(const S&, const S&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opS<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opS.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opS.
 */
template<class T, typename CT>
class Callback_I_opS : public Callback_I_opS_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const S&, const S&, const CT&);

    Callback_I_opS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        S iceP_s2;
        S ret;
        try
        {
            ret = proxy->end_opS(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opS.
 */
template<class T, typename CT> Callback_I_opSPtr
newCallback_I_opS(const IceUtil::Handle<T>& instance, void (T::*cb)(const S&, const S&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opS.
 */
template<class T, typename CT> Callback_I_opSPtr
newCallback_I_opS(T* instance, void (T::*cb)(const S&, const S&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opSSeq.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opSSeq.
 */
template<class T>
class CallbackNC_I_opSSeq : public Callback_I_opSSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SSeq&, const SSeq&);

    CallbackNC_I_opSSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        SSeq iceP_s2;
        SSeq ret;
        try
        {
            ret = proxy->end_opSSeq(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opSSeq.
 */
template<class T> Callback_I_opSSeqPtr
newCallback_I_opSSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const SSeq&, const SSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opSSeq.
 */
template<class T> Callback_I_opSSeqPtr
newCallback_I_opSSeq(T* instance, void (T::*cb)(const SSeq&, const SSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opSSeq.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opSSeq.
 */
template<class T, typename CT>
class Callback_I_opSSeq : public Callback_I_opSSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SSeq&, const SSeq&, const CT&);

    Callback_I_opSSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        SSeq iceP_s2;
        SSeq ret;
        try
        {
            ret = proxy->end_opSSeq(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opSSeq.
 */
template<class T, typename CT> Callback_I_opSSeqPtr
newCallback_I_opSSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const SSeq&, const SSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opSSeq.
 */
template<class T, typename CT> Callback_I_opSSeqPtr
newCallback_I_opSSeq(T* instance, void (T::*cb)(const SSeq&, const SSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opSMap.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opSMap.
 */
template<class T>
class CallbackNC_I_opSMap : public Callback_I_opSMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SMap&, const SMap&);

    CallbackNC_I_opSMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        SMap iceP_s2;
        SMap ret;
        try
        {
            ret = proxy->end_opSMap(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opSMap.
 */
template<class T> Callback_I_opSMapPtr
newCallback_I_opSMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const SMap&, const SMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSMap<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opSMap.
 */
template<class T> Callback_I_opSMapPtr
newCallback_I_opSMap(T* instance, void (T::*cb)(const SMap&, const SMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSMap<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opSMap.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opSMap.
 */
template<class T, typename CT>
class Callback_I_opSMap : public Callback_I_opSMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SMap&, const SMap&, const CT&);

    Callback_I_opSMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        SMap iceP_s2;
        SMap ret;
        try
        {
            ret = proxy->end_opSMap(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opSMap.
 */
template<class T, typename CT> Callback_I_opSMapPtr
newCallback_I_opSMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const SMap&, const SMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opSMap.
 */
template<class T, typename CT> Callback_I_opSMapPtr
newCallback_I_opSMap(T* instance, void (T::*cb)(const SMap&, const SMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opC.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opC.
 */
template<class T>
class CallbackNC_I_opC : public Callback_I_opC_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const CPtr&, const CPtr&);

    CallbackNC_I_opC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        CPtr iceP_c2;
        CPtr ret;
        try
        {
            ret = proxy->end_opC(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_c2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opC.
 */
template<class T> Callback_I_opCPtr
newCallback_I_opC(const IceUtil::Handle<T>& instance, void (T::*cb)(const CPtr&, const CPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opC<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opC.
 */
template<class T> Callback_I_opCPtr
newCallback_I_opC(T* instance, void (T::*cb)(const CPtr&, const CPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opC<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opC.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opC.
 */
template<class T, typename CT>
class Callback_I_opC : public Callback_I_opC_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CPtr&, const CPtr&, const CT&);

    Callback_I_opC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        CPtr iceP_c2;
        CPtr ret;
        try
        {
            ret = proxy->end_opC(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_c2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opC.
 */
template<class T, typename CT> Callback_I_opCPtr
newCallback_I_opC(const IceUtil::Handle<T>& instance, void (T::*cb)(const CPtr&, const CPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opC<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opC.
 */
template<class T, typename CT> Callback_I_opCPtr
newCallback_I_opC(T* instance, void (T::*cb)(const CPtr&, const CPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opC<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opCSeq.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opCSeq.
 */
template<class T>
class CallbackNC_I_opCSeq : public Callback_I_opCSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const CSeq&, const CSeq&);

    CallbackNC_I_opCSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        CSeq iceP_c2;
        CSeq ret;
        try
        {
            ret = proxy->end_opCSeq(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_c2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opCSeq.
 */
template<class T> Callback_I_opCSeqPtr
newCallback_I_opCSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const CSeq&, const CSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opCSeq.
 */
template<class T> Callback_I_opCSeqPtr
newCallback_I_opCSeq(T* instance, void (T::*cb)(const CSeq&, const CSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opCSeq.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opCSeq.
 */
template<class T, typename CT>
class Callback_I_opCSeq : public Callback_I_opCSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CSeq&, const CSeq&, const CT&);

    Callback_I_opCSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        CSeq iceP_c2;
        CSeq ret;
        try
        {
            ret = proxy->end_opCSeq(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_c2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opCSeq.
 */
template<class T, typename CT> Callback_I_opCSeqPtr
newCallback_I_opCSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const CSeq&, const CSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opCSeq.
 */
template<class T, typename CT> Callback_I_opCSeqPtr
newCallback_I_opCSeq(T* instance, void (T::*cb)(const CSeq&, const CSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opCMap.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opCMap.
 */
template<class T>
class CallbackNC_I_opCMap : public Callback_I_opCMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const CMap&, const CMap&);

    CallbackNC_I_opCMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        CMap iceP_c2;
        CMap ret;
        try
        {
            ret = proxy->end_opCMap(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_c2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opCMap.
 */
template<class T> Callback_I_opCMapPtr
newCallback_I_opCMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CMap&, const CMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCMap<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opCMap.
 */
template<class T> Callback_I_opCMapPtr
newCallback_I_opCMap(T* instance, void (T::*cb)(const CMap&, const CMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCMap<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_opCMap.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_opCMap.
 */
template<class T, typename CT>
class Callback_I_opCMap : public Callback_I_opCMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CMap&, const CMap&, const CT&);

    Callback_I_opCMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        CMap iceP_c2;
        CMap ret;
        try
        {
            ret = proxy->end_opCMap(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_c2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opCMap.
 */
template<class T, typename CT> Callback_I_opCMapPtr
newCallback_I_opCMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CMap&, const CMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_opCMap.
 */
template<class T, typename CT> Callback_I_opCMapPtr
newCallback_I_opCMap(T* instance, void (T::*cb)(const CMap&, const CMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_shutdown.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_shutdown.
 */
template<class T>
class CallbackNC_I_shutdown : public Callback_I_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_I_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Inner::Inner2::I::begin_shutdown.
 * Create a wrapper instance by calling ::Test::Inner::Inner2::newCallback_I_shutdown.
 */
template<class T, typename CT>
class Callback_I_shutdown : public Callback_I_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_I_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::Inner2::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Inner::I::begin_opS.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opS.
 */
template<class T>
class CallbackNC_I_opS : public Callback_I_opS_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::Inner::Inner2::S&, const ::Test::Inner::Inner2::S&);

    CallbackNC_I_opS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::Inner::Inner2::S iceP_s2;
        ::Test::Inner::Inner2::S ret;
        try
        {
            ret = proxy->end_opS(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opS.
 */
template<class T> Callback_I_opSPtr
newCallback_I_opS(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::Inner::Inner2::S&, const ::Test::Inner::Inner2::S&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opS<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opS.
 */
template<class T> Callback_I_opSPtr
newCallback_I_opS(T* instance, void (T::*cb)(const ::Test::Inner::Inner2::S&, const ::Test::Inner::Inner2::S&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opS<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Inner::I::begin_opS.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opS.
 */
template<class T, typename CT>
class Callback_I_opS : public Callback_I_opS_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::Inner::Inner2::S&, const ::Test::Inner::Inner2::S&, const CT&);

    Callback_I_opS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::Inner::Inner2::S iceP_s2;
        ::Test::Inner::Inner2::S ret;
        try
        {
            ret = proxy->end_opS(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opS.
 */
template<class T, typename CT> Callback_I_opSPtr
newCallback_I_opS(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::Inner::Inner2::S&, const ::Test::Inner::Inner2::S&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opS.
 */
template<class T, typename CT> Callback_I_opSPtr
newCallback_I_opS(T* instance, void (T::*cb)(const ::Test::Inner::Inner2::S&, const ::Test::Inner::Inner2::S&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Inner::I::begin_opSSeq.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opSSeq.
 */
template<class T>
class CallbackNC_I_opSSeq : public Callback_I_opSSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::Inner::Inner2::SSeq&, const ::Test::Inner::Inner2::SSeq&);

    CallbackNC_I_opSSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::Inner::Inner2::SSeq iceP_s2;
        ::Test::Inner::Inner2::SSeq ret;
        try
        {
            ret = proxy->end_opSSeq(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opSSeq.
 */
template<class T> Callback_I_opSSeqPtr
newCallback_I_opSSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::Inner::Inner2::SSeq&, const ::Test::Inner::Inner2::SSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opSSeq.
 */
template<class T> Callback_I_opSSeqPtr
newCallback_I_opSSeq(T* instance, void (T::*cb)(const ::Test::Inner::Inner2::SSeq&, const ::Test::Inner::Inner2::SSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Inner::I::begin_opSSeq.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opSSeq.
 */
template<class T, typename CT>
class Callback_I_opSSeq : public Callback_I_opSSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::Inner::Inner2::SSeq&, const ::Test::Inner::Inner2::SSeq&, const CT&);

    Callback_I_opSSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::Inner::Inner2::SSeq iceP_s2;
        ::Test::Inner::Inner2::SSeq ret;
        try
        {
            ret = proxy->end_opSSeq(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opSSeq.
 */
template<class T, typename CT> Callback_I_opSSeqPtr
newCallback_I_opSSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::Inner::Inner2::SSeq&, const ::Test::Inner::Inner2::SSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opSSeq.
 */
template<class T, typename CT> Callback_I_opSSeqPtr
newCallback_I_opSSeq(T* instance, void (T::*cb)(const ::Test::Inner::Inner2::SSeq&, const ::Test::Inner::Inner2::SSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Inner::I::begin_opSMap.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opSMap.
 */
template<class T>
class CallbackNC_I_opSMap : public Callback_I_opSMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::Inner::Inner2::SMap&, const ::Test::Inner::Inner2::SMap&);

    CallbackNC_I_opSMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::Inner::Inner2::SMap iceP_s2;
        ::Test::Inner::Inner2::SMap ret;
        try
        {
            ret = proxy->end_opSMap(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opSMap.
 */
template<class T> Callback_I_opSMapPtr
newCallback_I_opSMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::Inner::Inner2::SMap&, const ::Test::Inner::Inner2::SMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSMap<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opSMap.
 */
template<class T> Callback_I_opSMapPtr
newCallback_I_opSMap(T* instance, void (T::*cb)(const ::Test::Inner::Inner2::SMap&, const ::Test::Inner::Inner2::SMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSMap<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Inner::I::begin_opSMap.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opSMap.
 */
template<class T, typename CT>
class Callback_I_opSMap : public Callback_I_opSMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::Inner::Inner2::SMap&, const ::Test::Inner::Inner2::SMap&, const CT&);

    Callback_I_opSMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::Inner::Inner2::SMap iceP_s2;
        ::Test::Inner::Inner2::SMap ret;
        try
        {
            ret = proxy->end_opSMap(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opSMap.
 */
template<class T, typename CT> Callback_I_opSMapPtr
newCallback_I_opSMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::Inner::Inner2::SMap&, const ::Test::Inner::Inner2::SMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opSMap.
 */
template<class T, typename CT> Callback_I_opSMapPtr
newCallback_I_opSMap(T* instance, void (T::*cb)(const ::Test::Inner::Inner2::SMap&, const ::Test::Inner::Inner2::SMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Inner::I::begin_opC.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opC.
 */
template<class T>
class CallbackNC_I_opC : public Callback_I_opC_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::Inner::Inner2::CPtr&, const ::Test::Inner::Inner2::CPtr&);

    CallbackNC_I_opC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::Inner::Inner2::CPtr iceP_c2;
        ::Test::Inner::Inner2::CPtr ret;
        try
        {
            ret = proxy->end_opC(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_c2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opC.
 */
template<class T> Callback_I_opCPtr
newCallback_I_opC(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::Inner::Inner2::CPtr&, const ::Test::Inner::Inner2::CPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opC<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opC.
 */
template<class T> Callback_I_opCPtr
newCallback_I_opC(T* instance, void (T::*cb)(const ::Test::Inner::Inner2::CPtr&, const ::Test::Inner::Inner2::CPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opC<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Inner::I::begin_opC.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opC.
 */
template<class T, typename CT>
class Callback_I_opC : public Callback_I_opC_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::Inner::Inner2::CPtr&, const ::Test::Inner::Inner2::CPtr&, const CT&);

    Callback_I_opC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::Inner::Inner2::CPtr iceP_c2;
        ::Test::Inner::Inner2::CPtr ret;
        try
        {
            ret = proxy->end_opC(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_c2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opC.
 */
template<class T, typename CT> Callback_I_opCPtr
newCallback_I_opC(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::Inner::Inner2::CPtr&, const ::Test::Inner::Inner2::CPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opC<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opC.
 */
template<class T, typename CT> Callback_I_opCPtr
newCallback_I_opC(T* instance, void (T::*cb)(const ::Test::Inner::Inner2::CPtr&, const ::Test::Inner::Inner2::CPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opC<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Inner::I::begin_opCSeq.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opCSeq.
 */
template<class T>
class CallbackNC_I_opCSeq : public Callback_I_opCSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::Inner::Inner2::CSeq&, const ::Test::Inner::Inner2::CSeq&);

    CallbackNC_I_opCSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::Inner::Inner2::CSeq iceP_c2;
        ::Test::Inner::Inner2::CSeq ret;
        try
        {
            ret = proxy->end_opCSeq(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_c2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opCSeq.
 */
template<class T> Callback_I_opCSeqPtr
newCallback_I_opCSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::Inner::Inner2::CSeq&, const ::Test::Inner::Inner2::CSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opCSeq.
 */
template<class T> Callback_I_opCSeqPtr
newCallback_I_opCSeq(T* instance, void (T::*cb)(const ::Test::Inner::Inner2::CSeq&, const ::Test::Inner::Inner2::CSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Inner::I::begin_opCSeq.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opCSeq.
 */
template<class T, typename CT>
class Callback_I_opCSeq : public Callback_I_opCSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::Inner::Inner2::CSeq&, const ::Test::Inner::Inner2::CSeq&, const CT&);

    Callback_I_opCSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::Inner::Inner2::CSeq iceP_c2;
        ::Test::Inner::Inner2::CSeq ret;
        try
        {
            ret = proxy->end_opCSeq(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_c2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opCSeq.
 */
template<class T, typename CT> Callback_I_opCSeqPtr
newCallback_I_opCSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::Inner::Inner2::CSeq&, const ::Test::Inner::Inner2::CSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opCSeq.
 */
template<class T, typename CT> Callback_I_opCSeqPtr
newCallback_I_opCSeq(T* instance, void (T::*cb)(const ::Test::Inner::Inner2::CSeq&, const ::Test::Inner::Inner2::CSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Inner::I::begin_opCMap.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opCMap.
 */
template<class T>
class CallbackNC_I_opCMap : public Callback_I_opCMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::Inner::Inner2::CMap&, const ::Test::Inner::Inner2::CMap&);

    CallbackNC_I_opCMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::Inner::Inner2::CMap iceP_c2;
        ::Test::Inner::Inner2::CMap ret;
        try
        {
            ret = proxy->end_opCMap(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_c2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opCMap.
 */
template<class T> Callback_I_opCMapPtr
newCallback_I_opCMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::Inner::Inner2::CMap&, const ::Test::Inner::Inner2::CMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCMap<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opCMap.
 */
template<class T> Callback_I_opCMapPtr
newCallback_I_opCMap(T* instance, void (T::*cb)(const ::Test::Inner::Inner2::CMap&, const ::Test::Inner::Inner2::CMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCMap<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Inner::I::begin_opCMap.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_opCMap.
 */
template<class T, typename CT>
class Callback_I_opCMap : public Callback_I_opCMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::Inner::Inner2::CMap&, const ::Test::Inner::Inner2::CMap&, const CT&);

    Callback_I_opCMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::Inner::Inner2::CMap iceP_c2;
        ::Test::Inner::Inner2::CMap ret;
        try
        {
            ret = proxy->end_opCMap(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_c2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opCMap.
 */
template<class T, typename CT> Callback_I_opCMapPtr
newCallback_I_opCMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::Inner::Inner2::CMap&, const ::Test::Inner::Inner2::CMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_opCMap.
 */
template<class T, typename CT> Callback_I_opCMapPtr
newCallback_I_opCMap(T* instance, void (T::*cb)(const ::Test::Inner::Inner2::CMap&, const ::Test::Inner::Inner2::CMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Inner::I::begin_shutdown.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_shutdown.
 */
template<class T>
class CallbackNC_I_shutdown : public Callback_I_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_I_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Inner::I::begin_shutdown.
 * Create a wrapper instance by calling ::Test::Inner::newCallback_I_shutdown.
 */
template<class T, typename CT>
class Callback_I_shutdown : public Callback_I_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_I_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Inner::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

}

namespace Inner
{

namespace Test
{

namespace Inner2
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opS.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opS.
 */
template<class T>
class CallbackNC_I_opS : public Callback_I_opS_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::S&, const ::Test::S&);

    CallbackNC_I_opS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::S iceP_s2;
        ::Test::S ret;
        try
        {
            ret = proxy->end_opS(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opS.
 */
template<class T> Callback_I_opSPtr
newCallback_I_opS(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::S&, const ::Test::S&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opS<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opS.
 */
template<class T> Callback_I_opSPtr
newCallback_I_opS(T* instance, void (T::*cb)(const ::Test::S&, const ::Test::S&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opS<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opS.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opS.
 */
template<class T, typename CT>
class Callback_I_opS : public Callback_I_opS_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::S&, const ::Test::S&, const CT&);

    Callback_I_opS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::S iceP_s2;
        ::Test::S ret;
        try
        {
            ret = proxy->end_opS(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opS.
 */
template<class T, typename CT> Callback_I_opSPtr
newCallback_I_opS(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::S&, const ::Test::S&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opS.
 */
template<class T, typename CT> Callback_I_opSPtr
newCallback_I_opS(T* instance, void (T::*cb)(const ::Test::S&, const ::Test::S&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opSSeq.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opSSeq.
 */
template<class T>
class CallbackNC_I_opSSeq : public Callback_I_opSSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::SSeq&, const ::Test::SSeq&);

    CallbackNC_I_opSSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::SSeq iceP_s2;
        ::Test::SSeq ret;
        try
        {
            ret = proxy->end_opSSeq(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opSSeq.
 */
template<class T> Callback_I_opSSeqPtr
newCallback_I_opSSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::SSeq&, const ::Test::SSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opSSeq.
 */
template<class T> Callback_I_opSSeqPtr
newCallback_I_opSSeq(T* instance, void (T::*cb)(const ::Test::SSeq&, const ::Test::SSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opSSeq.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opSSeq.
 */
template<class T, typename CT>
class Callback_I_opSSeq : public Callback_I_opSSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::SSeq&, const ::Test::SSeq&, const CT&);

    Callback_I_opSSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::SSeq iceP_s2;
        ::Test::SSeq ret;
        try
        {
            ret = proxy->end_opSSeq(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opSSeq.
 */
template<class T, typename CT> Callback_I_opSSeqPtr
newCallback_I_opSSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::SSeq&, const ::Test::SSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opSSeq.
 */
template<class T, typename CT> Callback_I_opSSeqPtr
newCallback_I_opSSeq(T* instance, void (T::*cb)(const ::Test::SSeq&, const ::Test::SSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opSMap.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opSMap.
 */
template<class T>
class CallbackNC_I_opSMap : public Callback_I_opSMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::SMap&, const ::Test::SMap&);

    CallbackNC_I_opSMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::SMap iceP_s2;
        ::Test::SMap ret;
        try
        {
            ret = proxy->end_opSMap(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_s2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opSMap.
 */
template<class T> Callback_I_opSMapPtr
newCallback_I_opSMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::SMap&, const ::Test::SMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSMap<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opSMap.
 */
template<class T> Callback_I_opSMapPtr
newCallback_I_opSMap(T* instance, void (T::*cb)(const ::Test::SMap&, const ::Test::SMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opSMap<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opSMap.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opSMap.
 */
template<class T, typename CT>
class Callback_I_opSMap : public Callback_I_opSMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::SMap&, const ::Test::SMap&, const CT&);

    Callback_I_opSMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::SMap iceP_s2;
        ::Test::SMap ret;
        try
        {
            ret = proxy->end_opSMap(iceP_s2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_s2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opSMap.
 */
template<class T, typename CT> Callback_I_opSMapPtr
newCallback_I_opSMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::SMap&, const ::Test::SMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opSMap.
 */
template<class T, typename CT> Callback_I_opSMapPtr
newCallback_I_opSMap(T* instance, void (T::*cb)(const ::Test::SMap&, const ::Test::SMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opSMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opC.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opC.
 */
template<class T>
class CallbackNC_I_opC : public Callback_I_opC_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::CPtr&, const ::Test::CPtr&);

    CallbackNC_I_opC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::CPtr iceP_c2;
        ::Test::CPtr ret;
        try
        {
            ret = proxy->end_opC(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_c2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opC.
 */
template<class T> Callback_I_opCPtr
newCallback_I_opC(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::CPtr&, const ::Test::CPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opC<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opC.
 */
template<class T> Callback_I_opCPtr
newCallback_I_opC(T* instance, void (T::*cb)(const ::Test::CPtr&, const ::Test::CPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opC<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opC.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opC.
 */
template<class T, typename CT>
class Callback_I_opC : public Callback_I_opC_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::CPtr&, const ::Test::CPtr&, const CT&);

    Callback_I_opC(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::CPtr iceP_c2;
        ::Test::CPtr ret;
        try
        {
            ret = proxy->end_opC(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_c2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opC.
 */
template<class T, typename CT> Callback_I_opCPtr
newCallback_I_opC(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::CPtr&, const ::Test::CPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opC<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opC.
 */
template<class T, typename CT> Callback_I_opCPtr
newCallback_I_opC(T* instance, void (T::*cb)(const ::Test::CPtr&, const ::Test::CPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opC<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opCSeq.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opCSeq.
 */
template<class T>
class CallbackNC_I_opCSeq : public Callback_I_opCSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::CSeq&, const ::Test::CSeq&);

    CallbackNC_I_opCSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::CSeq iceP_c2;
        ::Test::CSeq ret;
        try
        {
            ret = proxy->end_opCSeq(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_c2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opCSeq.
 */
template<class T> Callback_I_opCSeqPtr
newCallback_I_opCSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::CSeq&, const ::Test::CSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opCSeq.
 */
template<class T> Callback_I_opCSeqPtr
newCallback_I_opCSeq(T* instance, void (T::*cb)(const ::Test::CSeq&, const ::Test::CSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opCSeq.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opCSeq.
 */
template<class T, typename CT>
class Callback_I_opCSeq : public Callback_I_opCSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::CSeq&, const ::Test::CSeq&, const CT&);

    Callback_I_opCSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::CSeq iceP_c2;
        ::Test::CSeq ret;
        try
        {
            ret = proxy->end_opCSeq(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_c2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opCSeq.
 */
template<class T, typename CT> Callback_I_opCSeqPtr
newCallback_I_opCSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::CSeq&, const ::Test::CSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opCSeq.
 */
template<class T, typename CT> Callback_I_opCSeqPtr
newCallback_I_opCSeq(T* instance, void (T::*cb)(const ::Test::CSeq&, const ::Test::CSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opCMap.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opCMap.
 */
template<class T>
class CallbackNC_I_opCMap : public Callback_I_opCMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Test::CMap&, const ::Test::CMap&);

    CallbackNC_I_opCMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::CMap iceP_c2;
        ::Test::CMap ret;
        try
        {
            ret = proxy->end_opCMap(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_c2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opCMap.
 */
template<class T> Callback_I_opCMapPtr
newCallback_I_opCMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::CMap&, const ::Test::CMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCMap<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opCMap.
 */
template<class T> Callback_I_opCMapPtr
newCallback_I_opCMap(T* instance, void (T::*cb)(const ::Test::CMap&, const ::Test::CMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_opCMap<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_opCMap.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_opCMap.
 */
template<class T, typename CT>
class Callback_I_opCMap : public Callback_I_opCMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Test::CMap&, const ::Test::CMap&, const CT&);

    Callback_I_opCMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IPrx proxy = IPrx::uncheckedCast(result->getProxy());
        ::Test::CMap iceP_c2;
        ::Test::CMap ret;
        try
        {
            ret = proxy->end_opCMap(iceP_c2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_c2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opCMap.
 */
template<class T, typename CT> Callback_I_opCMapPtr
newCallback_I_opCMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Test::CMap&, const ::Test::CMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_opCMap.
 */
template<class T, typename CT> Callback_I_opCMapPtr
newCallback_I_opCMap(T* instance, void (T::*cb)(const ::Test::CMap&, const ::Test::CMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_opCMap<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_shutdown.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_shutdown.
 */
template<class T>
class CallbackNC_I_shutdown : public Callback_I_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_I_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_shutdown.
 */
template<class T> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_I_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Inner::Test::Inner2::I::begin_shutdown.
 * Create a wrapper instance by calling ::Inner::Test::Inner2::newCallback_I_shutdown.
 */
template<class T, typename CT>
class Callback_I_shutdown : public Callback_I_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_I_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Inner::Test::Inner2::I::begin_shutdown.
 */
template<class T, typename CT> Callback_I_shutdownPtr
newCallback_I_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_I_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
