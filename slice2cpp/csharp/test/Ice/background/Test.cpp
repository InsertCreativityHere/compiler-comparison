//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_Test_Background_ids[2] =
{
    "::Ice::Object",
    "::Test::Background"
};
const ::std::string iceC_Test_Background_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op",
    "opWithPayload",
    "shutdown"
};
const ::std::string iceC_Test_Background_op_name = "op";
const ::std::string iceC_Test_Background_opWithPayload_name = "opWithPayload";
const ::std::string iceC_Test_Background_shutdown_name = "shutdown";

const ::std::string iceC_Test_BackgroundController_ids[2] =
{
    "::Ice::Object",
    "::Test::BackgroundController"
};
const ::std::string iceC_Test_BackgroundController_ops[] =
{
    "buffered",
    "holdAdapter",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "initializeException",
    "pauseCall",
    "readException",
    "readReady",
    "resumeAdapter",
    "resumeCall",
    "writeException",
    "writeReady"
};
const ::std::string iceC_Test_BackgroundController_pauseCall_name = "pauseCall";
const ::std::string iceC_Test_BackgroundController_resumeCall_name = "resumeCall";
const ::std::string iceC_Test_BackgroundController_holdAdapter_name = "holdAdapter";
const ::std::string iceC_Test_BackgroundController_resumeAdapter_name = "resumeAdapter";
const ::std::string iceC_Test_BackgroundController_initializeException_name = "initializeException";
const ::std::string iceC_Test_BackgroundController_readReady_name = "readReady";
const ::std::string iceC_Test_BackgroundController_readException_name = "readException";
const ::std::string iceC_Test_BackgroundController_writeReady_name = "writeReady";
const ::std::string iceC_Test_BackgroundController_writeException_name = "writeException";
const ::std::string iceC_Test_BackgroundController_buffered_name = "buffered";

}

bool
Test::Background::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Background_ids, iceC_Test_Background_ids + 2, s);
}

::std::vector<::std::string>
Test::Background::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Background_ids[0], &iceC_Test_Background_ids[2]);
}

::std::string
Test::Background::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Background::ice_staticId()
{
    static const ::std::string typeId = "::Test::Background";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Background::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Background::_iceD_opWithPayload(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::ByteSeq iceP_seq;
    istr->readAll(iceP_seq);
    inS.endReadParams();
    this->opWithPayload(::std::move(iceP_seq), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Background::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Background::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Background_ops, iceC_Test_Background_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Background_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        case 5:
        {
            return _iceD_opWithPayload(in, current);
        }
        case 6:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::BackgroundController::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_BackgroundController_ids, iceC_Test_BackgroundController_ids + 2, s);
}

::std::vector<::std::string>
Test::BackgroundController::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_BackgroundController_ids[0], &iceC_Test_BackgroundController_ids[2]);
}

::std::string
Test::BackgroundController::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::BackgroundController::ice_staticId()
{
    static const ::std::string typeId = "::Test::BackgroundController";
    return typeId;
}

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_pauseCall(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_call;
    istr->readAll(iceP_call);
    inS.endReadParams();
    this->pauseCall(::std::move(iceP_call), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_resumeCall(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_call;
    istr->readAll(iceP_call);
    inS.endReadParams();
    this->resumeCall(::std::move(iceP_call), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_holdAdapter(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->holdAdapter(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_resumeAdapter(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->resumeAdapter(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_initializeException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_enable;
    istr->readAll(iceP_enable);
    inS.endReadParams();
    this->initializeException(iceP_enable, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_readReady(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_enable;
    istr->readAll(iceP_enable);
    inS.endReadParams();
    this->readReady(iceP_enable, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_readException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_enable;
    istr->readAll(iceP_enable);
    inS.endReadParams();
    this->readException(iceP_enable, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_writeReady(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_enable;
    istr->readAll(iceP_enable);
    inS.endReadParams();
    this->writeReady(iceP_enable, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_writeException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_enable;
    istr->readAll(iceP_enable);
    inS.endReadParams();
    this->writeException(iceP_enable, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_buffered(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_enable;
    istr->readAll(iceP_enable);
    inS.endReadParams();
    this->buffered(iceP_enable, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_BackgroundController_ops, iceC_Test_BackgroundController_ops + 14, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_BackgroundController_ops)
    {
        case 0:
        {
            return _iceD_buffered(in, current);
        }
        case 1:
        {
            return _iceD_holdAdapter(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_initializeException(in, current);
        }
        case 7:
        {
            return _iceD_pauseCall(in, current);
        }
        case 8:
        {
            return _iceD_readException(in, current);
        }
        case 9:
        {
            return _iceD_readReady(in, current);
        }
        case 10:
        {
            return _iceD_resumeAdapter(in, current);
        }
        case 11:
        {
            return _iceD_resumeCall(in, current);
        }
        case 12:
        {
            return _iceD_writeException(in, current);
        }
        case 13:
        {
            return _iceD_writeReady(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Background_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundPrx::_iceI_opWithPayload(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::ByteSeq& iceP_seq, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Background_opWithPayload_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_seq);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Background_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::BackgroundPrx::_newInstance() const
{
    return ::IceInternal::createProxy<BackgroundPrx>();
}
/// \endcond

const ::std::string&
Test::BackgroundPrx::ice_staticId()
{
    return Background::ice_staticId();
}

/// \cond INTERNAL
void
Test::BackgroundControllerPrx::_iceI_pauseCall(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_call, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_BackgroundController_pauseCall_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_call);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundControllerPrx::_iceI_resumeCall(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_call, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_BackgroundController_resumeCall_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_call);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundControllerPrx::_iceI_holdAdapter(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_BackgroundController_holdAdapter_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundControllerPrx::_iceI_resumeAdapter(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_BackgroundController_resumeAdapter_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundControllerPrx::_iceI_initializeException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_enable, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_BackgroundController_initializeException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_enable);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundControllerPrx::_iceI_readReady(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_enable, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_BackgroundController_readReady_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_enable);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundControllerPrx::_iceI_readException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_enable, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_BackgroundController_readException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_enable);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundControllerPrx::_iceI_writeReady(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_enable, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_BackgroundController_writeReady_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_enable);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundControllerPrx::_iceI_writeException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_enable, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_BackgroundController_writeException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_enable);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundControllerPrx::_iceI_buffered(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_enable, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_BackgroundController_buffered_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_enable);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::BackgroundControllerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<BackgroundControllerPrx>();
}
/// \endcond

const ::std::string&
Test::BackgroundControllerPrx::ice_staticId()
{
    return BackgroundController::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_Background_op_name = "op";

const ::std::string iceC_Test_Background_opWithPayload_name = "opWithPayload";

const ::std::string iceC_Test_Background_shutdown_name = "shutdown";

const ::std::string iceC_Test_BackgroundController_pauseCall_name = "pauseCall";

const ::std::string iceC_Test_BackgroundController_resumeCall_name = "resumeCall";

const ::std::string iceC_Test_BackgroundController_holdAdapter_name = "holdAdapter";

const ::std::string iceC_Test_BackgroundController_resumeAdapter_name = "resumeAdapter";

const ::std::string iceC_Test_BackgroundController_initializeException_name = "initializeException";

const ::std::string iceC_Test_BackgroundController_readReady_name = "readReady";

const ::std::string iceC_Test_BackgroundController_readException_name = "readException";

const ::std::string iceC_Test_BackgroundController_writeReady_name = "writeReady";

const ::std::string iceC_Test_BackgroundController_writeException_name = "writeException";

const ::std::string iceC_Test_BackgroundController_buffered_name = "buffered";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Background* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Background>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Background;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Background::_iceI_begin_op(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Background_op_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Background_op_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Background_op_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Background::end_op(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Background_op_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Background::_iceI_begin_opWithPayload(const ::Ice::ByteSeq& iceP_seq, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Background_opWithPayload_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Background_opWithPayload_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_seq);
        result->endWriteParams();
        result->invoke(iceC_Test_Background_opWithPayload_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Background::end_opWithPayload(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Background_opWithPayload_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Background::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Background_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Background_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Background_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Background::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Background_shutdown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Background::_newInstance() const
{
    return new Background;
}
/// \endcond

const ::std::string&
IceProxy::Test::Background::ice_staticId()
{
    return ::Test::Background::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(BackgroundController* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< BackgroundController>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new BackgroundController;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::BackgroundController::_iceI_begin_pauseCall(const ::std::string& iceP_call, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_BackgroundController_pauseCall_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_BackgroundController_pauseCall_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_call);
        result->endWriteParams();
        result->invoke(iceC_Test_BackgroundController_pauseCall_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::BackgroundController::end_pauseCall(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_BackgroundController_pauseCall_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::BackgroundController::_iceI_begin_resumeCall(const ::std::string& iceP_call, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_BackgroundController_resumeCall_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_BackgroundController_resumeCall_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_call);
        result->endWriteParams();
        result->invoke(iceC_Test_BackgroundController_resumeCall_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::BackgroundController::end_resumeCall(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_BackgroundController_resumeCall_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::BackgroundController::_iceI_begin_holdAdapter(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_BackgroundController_holdAdapter_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_BackgroundController_holdAdapter_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_BackgroundController_holdAdapter_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::BackgroundController::end_holdAdapter(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_BackgroundController_holdAdapter_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::BackgroundController::_iceI_begin_resumeAdapter(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_BackgroundController_resumeAdapter_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_BackgroundController_resumeAdapter_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_BackgroundController_resumeAdapter_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::BackgroundController::end_resumeAdapter(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_BackgroundController_resumeAdapter_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::BackgroundController::_iceI_begin_initializeException(bool iceP_enable, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_BackgroundController_initializeException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_BackgroundController_initializeException_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_enable);
        result->endWriteParams();
        result->invoke(iceC_Test_BackgroundController_initializeException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::BackgroundController::end_initializeException(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_BackgroundController_initializeException_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::BackgroundController::_iceI_begin_readReady(bool iceP_enable, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_BackgroundController_readReady_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_BackgroundController_readReady_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_enable);
        result->endWriteParams();
        result->invoke(iceC_Test_BackgroundController_readReady_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::BackgroundController::end_readReady(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_BackgroundController_readReady_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::BackgroundController::_iceI_begin_readException(bool iceP_enable, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_BackgroundController_readException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_BackgroundController_readException_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_enable);
        result->endWriteParams();
        result->invoke(iceC_Test_BackgroundController_readException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::BackgroundController::end_readException(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_BackgroundController_readException_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::BackgroundController::_iceI_begin_writeReady(bool iceP_enable, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_BackgroundController_writeReady_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_BackgroundController_writeReady_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_enable);
        result->endWriteParams();
        result->invoke(iceC_Test_BackgroundController_writeReady_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::BackgroundController::end_writeReady(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_BackgroundController_writeReady_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::BackgroundController::_iceI_begin_writeException(bool iceP_enable, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_BackgroundController_writeException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_BackgroundController_writeException_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_enable);
        result->endWriteParams();
        result->invoke(iceC_Test_BackgroundController_writeException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::BackgroundController::end_writeException(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_BackgroundController_writeException_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::BackgroundController::_iceI_begin_buffered(bool iceP_enable, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_BackgroundController_buffered_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_BackgroundController_buffered_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_enable);
        result->endWriteParams();
        result->invoke(iceC_Test_BackgroundController_buffered_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::BackgroundController::end_buffered(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_BackgroundController_buffered_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::BackgroundController::_newInstance() const
{
    return new BackgroundController;
}
/// \endcond

const ::std::string&
IceProxy::Test::BackgroundController::ice_staticId()
{
    return ::Test::BackgroundController::ice_staticId();
}

Test::Background::~Background()
{
}

namespace
{
const ::std::string iceC_Test_Background_ids[2] =
{
    "::Ice::Object",
    "::Test::Background"
};

}

bool
Test::Background::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Background_ids, iceC_Test_Background_ids + 2, s);
}

::std::vector< ::std::string>
Test::Background::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Background_ids[0], &iceC_Test_Background_ids[2]);
}

::std::string
Test::Background::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Background::ice_staticId()
{
    static const ::std::string typeId = "::Test::Background";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Background::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Background::_iceD_opWithPayload(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::ByteSeq iceP_seq;
    istr->read(iceP_seq);
    inS.endReadParams();
    this->opWithPayload(iceP_seq, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Background::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Background_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op",
    "opWithPayload",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::Background::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Background_all, iceC_Test_Background_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Background_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        case 5:
        {
            return _iceD_opWithPayload(in, current);
        }
        case 6:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::BackgroundController::~BackgroundController()
{
}

namespace
{
const ::std::string iceC_Test_BackgroundController_ids[2] =
{
    "::Ice::Object",
    "::Test::BackgroundController"
};

}

bool
Test::BackgroundController::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_BackgroundController_ids, iceC_Test_BackgroundController_ids + 2, s);
}

::std::vector< ::std::string>
Test::BackgroundController::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_BackgroundController_ids[0], &iceC_Test_BackgroundController_ids[2]);
}

::std::string
Test::BackgroundController::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::BackgroundController::ice_staticId()
{
    static const ::std::string typeId = "::Test::BackgroundController";
    return typeId;
}

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_pauseCall(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_call;
    istr->read(iceP_call);
    inS.endReadParams();
    this->pauseCall(iceP_call, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_resumeCall(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_call;
    istr->read(iceP_call);
    inS.endReadParams();
    this->resumeCall(iceP_call, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_holdAdapter(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->holdAdapter(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_resumeAdapter(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->resumeAdapter(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_initializeException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    bool iceP_enable;
    istr->read(iceP_enable);
    inS.endReadParams();
    this->initializeException(iceP_enable, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_readReady(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    bool iceP_enable;
    istr->read(iceP_enable);
    inS.endReadParams();
    this->readReady(iceP_enable, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_readException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    bool iceP_enable;
    istr->read(iceP_enable);
    inS.endReadParams();
    this->readException(iceP_enable, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_writeReady(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    bool iceP_enable;
    istr->read(iceP_enable);
    inS.endReadParams();
    this->writeReady(iceP_enable, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_writeException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    bool iceP_enable;
    istr->read(iceP_enable);
    inS.endReadParams();
    this->writeException(iceP_enable, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::BackgroundController::_iceD_buffered(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    bool iceP_enable;
    istr->read(iceP_enable);
    inS.endReadParams();
    this->buffered(iceP_enable, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_BackgroundController_all[] =
{
    "buffered",
    "holdAdapter",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "initializeException",
    "pauseCall",
    "readException",
    "readReady",
    "resumeAdapter",
    "resumeCall",
    "writeException",
    "writeReady"
};

}

/// \cond INTERNAL
bool
Test::BackgroundController::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_BackgroundController_all, iceC_Test_BackgroundController_all + 14, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_BackgroundController_all)
    {
        case 0:
        {
            return _iceD_buffered(in, current);
        }
        case 1:
        {
            return _iceD_holdAdapter(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_initializeException(in, current);
        }
        case 7:
        {
            return _iceD_pauseCall(in, current);
        }
        case 8:
        {
            return _iceD_readException(in, current);
        }
        case 9:
        {
            return _iceD_readReady(in, current);
        }
        case 10:
        {
            return _iceD_resumeAdapter(in, current);
        }
        case 11:
        {
            return _iceD_resumeCall(in, current);
        }
        case 12:
        {
            return _iceD_writeException(in, current);
        }
        case 13:
        {
            return _iceD_writeReady(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

#endif
