//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/AsyncResponseHandler.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::OptionalClass> iceC_Test_OptionalClass_init("::Test::OptionalClass");

const ::IceInternal::DefaultValueFactoryInit<::Test::MyClass> iceC_Test_MyClass_init("::Test::MyClass");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::MyException> iceC_Test_MyException_init("::Test::MyException");

}

::std::string_view
Test::MyInterfacePrx::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MyInterface";
    return typeId;
}

::std::string_view
Test::OptionalClass::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::OptionalClass";
    return typeId;
}

::std::string_view
Test::MyClass::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MyClass";
    return typeId;
}

::std::string_view
Test::MyException::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MyException";
    return typeId;
}

::std::string
Test::MyException::ice_id() const
{
    return ::std::string{ice_staticId()};
}

void
Test::MyException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
bool
Test::MyException::_usesClasses() const
{
    return true;
}
/// \endcond

void
Test::MyException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<MyException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MyException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<MyException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

::std::vector<::std::string>
Test::MyInterface::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::MyInterface"};
    return allTypeIds;
}

::std::string
Test::MyInterface::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MyInterface::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MyInterface";
    return typeId;
}
