//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::Test::OptionalClass> iceC_Test_OptionalClass_init("::Test::OptionalClass");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MyClass> iceC_Test_MyClass_init("::Test::MyClass");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::MyException> iceC_Test_MyException_init("::Test::MyException");
}

const char*
Test::MyInterfacePrx::ice_staticId() noexcept
{
    return "::Test::MyInterface";
}

const char*
Test::OptionalClass::ice_staticId() noexcept
{
    return "::Test::OptionalClass";
}

const char*
Test::OptionalClass::ice_id() const noexcept
{
    return ice_staticId();
}

::Ice::ValuePtr
Test::OptionalClass::_iceCloneImpl() const
{
    return CloneEnabler<OptionalClass>::clone(*this);
}

void
Test::OptionalClass::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->bo, this->by);
    ostr->writeAll({1, 2}, this->sh, this->i);
    ostr->endSlice();
}

void
Test::OptionalClass::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->bo, this->by);
    istr->readAll({1, 2}, this->sh, this->i);
    istr->endSlice();
}

const char*
Test::MyClass::ice_staticId() noexcept
{
    return "::Test::MyClass";
}

const char*
Test::MyClass::ice_id() const noexcept
{
    return ice_staticId();
}

::Ice::ValuePtr
Test::MyClass::_iceCloneImpl() const
{
    return CloneEnabler<MyClass>::clone(*this);
}

void
Test::MyClass::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->c, this->o, this->s, this->seq1, this->seq2, this->seq3, this->seq4, this->seq5, this->seq6, this->seq7, this->seq8, this->seq9, this->seq10, this->d);
    ostr->endSlice();
}

void
Test::MyClass::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->c, this->o, this->s, this->seq1, this->seq2, this->seq3, this->seq4, this->seq5, this->seq6, this->seq7, this->seq8, this->seq9, this->seq10, this->d);
    istr->endSlice();
}

const char*
Test::MyException::ice_staticId() noexcept
{
    return "::Test::MyException";
}

const char*
Test::MyException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::MyException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
bool
Test::MyException::_usesClasses() const
{
    return true;
}
/// \endcond

void
Test::MyException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->c);
    ostr->endSlice();
}

void
Test::MyException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->c);
    istr->endSlice();
}

::std::vector<::std::string>
Test::MyInterface::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::MyInterface"};
    return allTypeIds;
}

::std::string
Test::MyInterface::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
Test::MyInterface::ice_staticId() noexcept
{
    return "::Test::MyInterface";
}
