// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

::std::ostream&
Test::operator<<(::std::ostream& os, ByteEnum value)
{
    switch (value)
    {
        case ByteEnum::benum1:
            return os << "benum1";
        case ByteEnum::benum2:
            return os << "benum2";
        case ByteEnum::benum3:
            return os << "benum3";
        case ByteEnum::benum4:
            return os << "benum4";
        case ByteEnum::benum5:
            return os << "benum5";
        case ByteEnum::benum6:
            return os << "benum6";
        case ByteEnum::benum7:
            return os << "benum7";
        case ByteEnum::benum8:
            return os << "benum8";
        case ByteEnum::benum9:
            return os << "benum9";
        case ByteEnum::benum10:
            return os << "benum10";
        case ByteEnum::benum11:
            return os << "benum11";
        default:
            return os << static_cast<::std::int32_t>(value);
    }
}

::std::ostream&
Test::operator<<(::std::ostream& os, ShortEnum value)
{
    switch (value)
    {
        case ShortEnum::senum1:
            return os << "senum1";
        case ShortEnum::senum2:
            return os << "senum2";
        case ShortEnum::senum3:
            return os << "senum3";
        case ShortEnum::senum4:
            return os << "senum4";
        case ShortEnum::senum5:
            return os << "senum5";
        case ShortEnum::senum6:
            return os << "senum6";
        case ShortEnum::senum7:
            return os << "senum7";
        case ShortEnum::senum8:
            return os << "senum8";
        case ShortEnum::senum9:
            return os << "senum9";
        case ShortEnum::senum10:
            return os << "senum10";
        case ShortEnum::senum11:
            return os << "senum11";
        default:
            return os << static_cast<::std::int32_t>(value);
    }
}

::std::ostream&
Test::operator<<(::std::ostream& os, IntEnum value)
{
    switch (value)
    {
        case IntEnum::ienum1:
            return os << "ienum1";
        case IntEnum::ienum2:
            return os << "ienum2";
        case IntEnum::ienum3:
            return os << "ienum3";
        case IntEnum::ienum4:
            return os << "ienum4";
        case IntEnum::ienum5:
            return os << "ienum5";
        case IntEnum::ienum6:
            return os << "ienum6";
        case IntEnum::ienum7:
            return os << "ienum7";
        case IntEnum::ienum8:
            return os << "ienum8";
        case IntEnum::ienum9:
            return os << "ienum9";
        case IntEnum::ienum10:
            return os << "ienum10";
        case IntEnum::ienum11:
            return os << "ienum11";
        case IntEnum::ienum12:
            return os << "ienum12";
        default:
            return os << static_cast<::std::int32_t>(value);
    }
}

::std::ostream&
Test::operator<<(::std::ostream& os, SimpleEnum value)
{
    switch (value)
    {
        case SimpleEnum::red:
            return os << "red";
        case SimpleEnum::green:
            return os << "green";
        case SimpleEnum::blue:
            return os << "blue";
        default:
            return os << static_cast<::std::int32_t>(value);
    }
}

::Test::ByteEnum
Test::TestIntfPrx::opByte(ByteEnum iceP_b1, ByteEnum& iceP_b2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<ByteEnum, ByteEnum>>(true, this, &TestIntfPrx::_iceI_opByte, iceP_b1, context).get();
    iceP_b2 = ::std::get<1>(result);
    return ::std::get<0>(result);
}

::std::future<::std::tuple<::Test::ByteEnum, ::Test::ByteEnum>>
Test::TestIntfPrx::opByteAsync(ByteEnum iceP_b1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<ByteEnum, ByteEnum>>(false, this, &TestIntfPrx::_iceI_opByte, iceP_b1, context);
}

::std::function<void()>
Test::TestIntfPrx::opByteAsync(ByteEnum iceP_b1, ::std::function<void(::Test::ByteEnum, ::Test::ByteEnum)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<ByteEnum, ByteEnum>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<ByteEnum, ByteEnum>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::TestIntfPrx::_iceI_opByte, iceP_b1, context);
}

void
Test::TestIntfPrx::_iceI_opByte(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ByteEnum, ByteEnum>>>& outAsync, ByteEnum iceP_b1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opByte";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_b1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ByteEnum, ByteEnum> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::ShortEnum
Test::TestIntfPrx::opShort(ShortEnum iceP_s1, ShortEnum& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<ShortEnum, ShortEnum>>(true, this, &TestIntfPrx::_iceI_opShort, iceP_s1, context).get();
    iceP_s2 = ::std::get<1>(result);
    return ::std::get<0>(result);
}

::std::future<::std::tuple<::Test::ShortEnum, ::Test::ShortEnum>>
Test::TestIntfPrx::opShortAsync(ShortEnum iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<ShortEnum, ShortEnum>>(false, this, &TestIntfPrx::_iceI_opShort, iceP_s1, context);
}

::std::function<void()>
Test::TestIntfPrx::opShortAsync(ShortEnum iceP_s1, ::std::function<void(::Test::ShortEnum, ::Test::ShortEnum)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<ShortEnum, ShortEnum>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<ShortEnum, ShortEnum>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::TestIntfPrx::_iceI_opShort, iceP_s1, context);
}

void
Test::TestIntfPrx::_iceI_opShort(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ShortEnum, ShortEnum>>>& outAsync, ShortEnum iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opShort";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ShortEnum, ShortEnum> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::IntEnum
Test::TestIntfPrx::opInt(IntEnum iceP_i1, IntEnum& iceP_i2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<IntEnum, IntEnum>>(true, this, &TestIntfPrx::_iceI_opInt, iceP_i1, context).get();
    iceP_i2 = ::std::get<1>(result);
    return ::std::get<0>(result);
}

::std::future<::std::tuple<::Test::IntEnum, ::Test::IntEnum>>
Test::TestIntfPrx::opIntAsync(IntEnum iceP_i1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<IntEnum, IntEnum>>(false, this, &TestIntfPrx::_iceI_opInt, iceP_i1, context);
}

::std::function<void()>
Test::TestIntfPrx::opIntAsync(IntEnum iceP_i1, ::std::function<void(::Test::IntEnum, ::Test::IntEnum)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<IntEnum, IntEnum>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<IntEnum, IntEnum>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::TestIntfPrx::_iceI_opInt, iceP_i1, context);
}

void
Test::TestIntfPrx::_iceI_opInt(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<IntEnum, IntEnum>>>& outAsync, IntEnum iceP_i1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opInt";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<IntEnum, IntEnum> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::SimpleEnum
Test::TestIntfPrx::opSimple(SimpleEnum iceP_s1, SimpleEnum& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<SimpleEnum, SimpleEnum>>(true, this, &TestIntfPrx::_iceI_opSimple, iceP_s1, context).get();
    iceP_s2 = ::std::get<1>(result);
    return ::std::get<0>(result);
}

::std::future<::std::tuple<::Test::SimpleEnum, ::Test::SimpleEnum>>
Test::TestIntfPrx::opSimpleAsync(SimpleEnum iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<SimpleEnum, SimpleEnum>>(false, this, &TestIntfPrx::_iceI_opSimple, iceP_s1, context);
}

::std::function<void()>
Test::TestIntfPrx::opSimpleAsync(SimpleEnum iceP_s1, ::std::function<void(::Test::SimpleEnum, ::Test::SimpleEnum)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<SimpleEnum, SimpleEnum>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<SimpleEnum, SimpleEnum>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::TestIntfPrx::_iceI_opSimple, iceP_s1, context);
}

void
Test::TestIntfPrx::_iceI_opSimple(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SimpleEnum, SimpleEnum>>>& outAsync, SimpleEnum iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opSimple";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<SimpleEnum, SimpleEnum> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::ByteEnumSeq
Test::TestIntfPrx::opByteSeq(const ByteEnumSeq& iceP_b1, ByteEnumSeq& iceP_b2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<ByteEnumSeq, ByteEnumSeq>>(true, this, &TestIntfPrx::_iceI_opByteSeq, iceP_b1, context).get();
    iceP_b2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::ByteEnumSeq, ::Test::ByteEnumSeq>>
Test::TestIntfPrx::opByteSeqAsync(const ByteEnumSeq& iceP_b1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<ByteEnumSeq, ByteEnumSeq>>(false, this, &TestIntfPrx::_iceI_opByteSeq, iceP_b1, context);
}

::std::function<void()>
Test::TestIntfPrx::opByteSeqAsync(const ByteEnumSeq& iceP_b1, ::std::function<void(::Test::ByteEnumSeq, ::Test::ByteEnumSeq)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<ByteEnumSeq, ByteEnumSeq>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<ByteEnumSeq, ByteEnumSeq>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::TestIntfPrx::_iceI_opByteSeq, iceP_b1, context);
}

void
Test::TestIntfPrx::_iceI_opByteSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ByteEnumSeq, ByteEnumSeq>>>& outAsync, const ByteEnumSeq& iceP_b1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opByteSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_b1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ByteEnumSeq, ByteEnumSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::ShortEnumSeq
Test::TestIntfPrx::opShortSeq(const ShortEnumSeq& iceP_s1, ShortEnumSeq& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<ShortEnumSeq, ShortEnumSeq>>(true, this, &TestIntfPrx::_iceI_opShortSeq, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::ShortEnumSeq, ::Test::ShortEnumSeq>>
Test::TestIntfPrx::opShortSeqAsync(const ShortEnumSeq& iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<ShortEnumSeq, ShortEnumSeq>>(false, this, &TestIntfPrx::_iceI_opShortSeq, iceP_s1, context);
}

::std::function<void()>
Test::TestIntfPrx::opShortSeqAsync(const ShortEnumSeq& iceP_s1, ::std::function<void(::Test::ShortEnumSeq, ::Test::ShortEnumSeq)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<ShortEnumSeq, ShortEnumSeq>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<ShortEnumSeq, ShortEnumSeq>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::TestIntfPrx::_iceI_opShortSeq, iceP_s1, context);
}

void
Test::TestIntfPrx::_iceI_opShortSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ShortEnumSeq, ShortEnumSeq>>>& outAsync, const ShortEnumSeq& iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opShortSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ShortEnumSeq, ShortEnumSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::IntEnumSeq
Test::TestIntfPrx::opIntSeq(const IntEnumSeq& iceP_i1, IntEnumSeq& iceP_i2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<IntEnumSeq, IntEnumSeq>>(true, this, &TestIntfPrx::_iceI_opIntSeq, iceP_i1, context).get();
    iceP_i2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::IntEnumSeq, ::Test::IntEnumSeq>>
Test::TestIntfPrx::opIntSeqAsync(const IntEnumSeq& iceP_i1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<IntEnumSeq, IntEnumSeq>>(false, this, &TestIntfPrx::_iceI_opIntSeq, iceP_i1, context);
}

::std::function<void()>
Test::TestIntfPrx::opIntSeqAsync(const IntEnumSeq& iceP_i1, ::std::function<void(::Test::IntEnumSeq, ::Test::IntEnumSeq)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<IntEnumSeq, IntEnumSeq>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<IntEnumSeq, IntEnumSeq>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::TestIntfPrx::_iceI_opIntSeq, iceP_i1, context);
}

void
Test::TestIntfPrx::_iceI_opIntSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<IntEnumSeq, IntEnumSeq>>>& outAsync, const IntEnumSeq& iceP_i1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opIntSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<IntEnumSeq, IntEnumSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

::Test::SimpleEnumSeq
Test::TestIntfPrx::opSimpleSeq(const SimpleEnumSeq& iceP_s1, SimpleEnumSeq& iceP_s2, const ::Ice::Context& context) const
{
    auto result = ::IceInternal::makePromiseOutgoing<::std::tuple<SimpleEnumSeq, SimpleEnumSeq>>(true, this, &TestIntfPrx::_iceI_opSimpleSeq, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(result));
    return ::std::move(::std::get<0>(result));
}

::std::future<::std::tuple<::Test::SimpleEnumSeq, ::Test::SimpleEnumSeq>>
Test::TestIntfPrx::opSimpleSeqAsync(const SimpleEnumSeq& iceP_s1, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::tuple<SimpleEnumSeq, SimpleEnumSeq>>(false, this, &TestIntfPrx::_iceI_opSimpleSeq, iceP_s1, context);
}

::std::function<void()>
Test::TestIntfPrx::opSimpleSeqAsync(const SimpleEnumSeq& iceP_s1, ::std::function<void(::Test::SimpleEnumSeq, ::Test::SimpleEnumSeq)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    auto responseCb = [response = ::std::move(response)](::std::tuple<SimpleEnumSeq, SimpleEnumSeq>&& result) mutable
    {
        ::std::apply(::std::move(response), ::std::move(result));
    };
    return ::IceInternal::makeLambdaOutgoing<::std::tuple<SimpleEnumSeq, SimpleEnumSeq>>(::std::move(responseCb), ::std::move(ex), ::std::move(sent), this, &Test::TestIntfPrx::_iceI_opSimpleSeq, iceP_s1, context);
}

void
Test::TestIntfPrx::_iceI_opSimpleSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SimpleEnumSeq, SimpleEnumSeq>>>& outAsync, const SimpleEnumSeq& iceP_s1, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "opSimpleSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<SimpleEnumSeq, SimpleEnumSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}

void
Test::TestIntfPrx::shutdown(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::TestIntfPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::TestIntfPrx::shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::TestIntfPrx::_iceI_shutdown, context);
}

void
Test::TestIntfPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr);
}

const char*
Test::TestIntfPrx::ice_staticId() noexcept
{
    return "::Test::TestIntf";
}

::std::vector<::std::string>
Test::TestIntf::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::TestIntf"};
    return allTypeIds;
}

::std::string
Test::TestIntf::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
Test::TestIntf::ice_staticId() noexcept
{
    return "::Test::TestIntf";
}

/// \cond INTERNAL
void
Test::TestIntf::_iceD_opByte(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ByteEnum iceP_b1;
    istr->readAll(iceP_b1);
    istr->endEncapsulation();
    ByteEnum iceP_b2;
    const ByteEnum ret = this->opByte(iceP_b1, iceP_b2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_b2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntf::_iceD_opShort(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ShortEnum iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    ShortEnum iceP_s2;
    const ShortEnum ret = this->opShort(iceP_s1, iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntf::_iceD_opInt(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    IntEnum iceP_i1;
    istr->readAll(iceP_i1);
    istr->endEncapsulation();
    IntEnum iceP_i2;
    const IntEnum ret = this->opInt(iceP_i1, iceP_i2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntf::_iceD_opSimple(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    SimpleEnum iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    SimpleEnum iceP_s2;
    const SimpleEnum ret = this->opSimple(iceP_s1, iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntf::_iceD_opByteSeq(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ByteEnumSeq iceP_b1;
    istr->readAll(iceP_b1);
    istr->endEncapsulation();
    ByteEnumSeq iceP_b2;
    const ByteEnumSeq ret = this->opByteSeq(::std::move(iceP_b1), iceP_b2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_b2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntf::_iceD_opShortSeq(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ShortEnumSeq iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    ShortEnumSeq iceP_s2;
    const ShortEnumSeq ret = this->opShortSeq(::std::move(iceP_s1), iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntf::_iceD_opIntSeq(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    IntEnumSeq iceP_i1;
    istr->readAll(iceP_i1);
    istr->endEncapsulation();
    IntEnumSeq iceP_i2;
    const IntEnumSeq ret = this->opIntSeq(::std::move(iceP_i1), iceP_i2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntf::_iceD_opSimpleSeq(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    SimpleEnumSeq iceP_s1;
    istr->readAll(iceP_s1);
    istr->endEncapsulation();
    SimpleEnumSeq iceP_s2;
    const SimpleEnumSeq ret = this->opSimpleSeq(::std::move(iceP_s1), iceP_s2, request.current());
    sendResponse(::Ice::makeOutgoingResponse([&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s2, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntf::_iceD_shutdown(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntf::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"ice_id", "ice_ids", "ice_isA", "ice_ping", "opByte", "opByteSeq", "opInt", "opIntSeq", "opShort", "opShortSeq", "opSimple", "opSimpleSeq", "shutdown"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 13, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_opByte(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_opByteSeq(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_opInt(request, ::std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_opIntSeq(request, ::std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_opShort(request, ::std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_opShortSeq(request, ::std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_opSimple(request, ::std::move(sendResponse));
            break;
        }
        case 11:
        {
            _iceD_opSimpleSeq(request, ::std::move(sendResponse));
            break;
        }
        case 12:
        {
            _iceD_shutdown(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond
