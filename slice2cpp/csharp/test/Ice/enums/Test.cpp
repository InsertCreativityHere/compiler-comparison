//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_Test_TestIntf_ids[2] =
{
    "::Ice::Object",
    "::Test::TestIntf"
};
const ::std::string iceC_Test_TestIntf_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opByte",
    "opByteSeq",
    "opInt",
    "opIntSeq",
    "opShort",
    "opShortSeq",
    "opSimple",
    "opSimpleSeq",
    "shutdown"
};
const ::std::string iceC_Test_TestIntf_opByte_name = "opByte";
const ::std::string iceC_Test_TestIntf_opShort_name = "opShort";
const ::std::string iceC_Test_TestIntf_opInt_name = "opInt";
const ::std::string iceC_Test_TestIntf_opSimple_name = "opSimple";
const ::std::string iceC_Test_TestIntf_opByteSeq_name = "opByteSeq";
const ::std::string iceC_Test_TestIntf_opShortSeq_name = "opShortSeq";
const ::std::string iceC_Test_TestIntf_opIntSeq_name = "opIntSeq";
const ::std::string iceC_Test_TestIntf_opSimpleSeq_name = "opSimpleSeq";
const ::std::string iceC_Test_TestIntf_shutdown_name = "shutdown";

}

::Test::ByteEnum
Test::TestIntfPrx::opByte(ByteEnum iceP_b1, ByteEnum& iceP_b2, const ::Ice::Context& context)
{
    auto _result = _makePromiseOutgoing<::std::tuple<ByteEnum, ByteEnum>>(true, this, &TestIntfPrx::_iceI_opByte, iceP_b1, context).get();
    iceP_b2 = ::std::get<1>(_result);
    return ::std::get<0>(_result);
}

::std::future<::std::tuple<::Test::ByteEnum, ::Test::ByteEnum>>
Test::TestIntfPrx::opByteAsync(ByteEnum iceP_b1, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::tuple<ByteEnum, ByteEnum>, ::std::promise>(false, this, &TestIntfPrx::_iceI_opByte, iceP_b1, context);
}

::std::function<void()>
Test::TestIntfPrx::opByteAsync(ByteEnum iceP_b1,
                               ::std::function<void (::Test::ByteEnum, ::Test::ByteEnum)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context)
{
    auto _responseCb = [response](::std::tuple<ByteEnum, ByteEnum>&& _result)
    {
        response(::std::get<0>(_result), ::std::get<1>(_result));
    };
    return _makeLambdaOutgoing<::std::tuple<ByteEnum, ByteEnum>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opByte, iceP_b1, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opByte(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ByteEnum, ByteEnum>>>& outAsync, ByteEnum iceP_b1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opByte_name);
    outAsync->invoke(iceC_Test_TestIntf_opByte_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_b1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ByteEnum, ByteEnum> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::ShortEnum
Test::TestIntfPrx::opShort(ShortEnum iceP_s1, ShortEnum& iceP_s2, const ::Ice::Context& context)
{
    auto _result = _makePromiseOutgoing<::std::tuple<ShortEnum, ShortEnum>>(true, this, &TestIntfPrx::_iceI_opShort, iceP_s1, context).get();
    iceP_s2 = ::std::get<1>(_result);
    return ::std::get<0>(_result);
}

::std::future<::std::tuple<::Test::ShortEnum, ::Test::ShortEnum>>
Test::TestIntfPrx::opShortAsync(ShortEnum iceP_s1, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::tuple<ShortEnum, ShortEnum>, ::std::promise>(false, this, &TestIntfPrx::_iceI_opShort, iceP_s1, context);
}

::std::function<void()>
Test::TestIntfPrx::opShortAsync(ShortEnum iceP_s1,
                                ::std::function<void (::Test::ShortEnum, ::Test::ShortEnum)> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context)
{
    auto _responseCb = [response](::std::tuple<ShortEnum, ShortEnum>&& _result)
    {
        response(::std::get<0>(_result), ::std::get<1>(_result));
    };
    return _makeLambdaOutgoing<::std::tuple<ShortEnum, ShortEnum>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opShort, iceP_s1, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opShort(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ShortEnum, ShortEnum>>>& outAsync, ShortEnum iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opShort_name);
    outAsync->invoke(iceC_Test_TestIntf_opShort_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ShortEnum, ShortEnum> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::IntEnum
Test::TestIntfPrx::opInt(IntEnum iceP_i1, IntEnum& iceP_i2, const ::Ice::Context& context)
{
    auto _result = _makePromiseOutgoing<::std::tuple<IntEnum, IntEnum>>(true, this, &TestIntfPrx::_iceI_opInt, iceP_i1, context).get();
    iceP_i2 = ::std::get<1>(_result);
    return ::std::get<0>(_result);
}

::std::future<::std::tuple<::Test::IntEnum, ::Test::IntEnum>>
Test::TestIntfPrx::opIntAsync(IntEnum iceP_i1, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::tuple<IntEnum, IntEnum>, ::std::promise>(false, this, &TestIntfPrx::_iceI_opInt, iceP_i1, context);
}

::std::function<void()>
Test::TestIntfPrx::opIntAsync(IntEnum iceP_i1,
                              ::std::function<void (::Test::IntEnum, ::Test::IntEnum)> response,
                              ::std::function<void(::std::exception_ptr)> ex,
                              ::std::function<void(bool)> sent,
                              const ::Ice::Context& context)
{
    auto _responseCb = [response](::std::tuple<IntEnum, IntEnum>&& _result)
    {
        response(::std::get<0>(_result), ::std::get<1>(_result));
    };
    return _makeLambdaOutgoing<::std::tuple<IntEnum, IntEnum>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opInt, iceP_i1, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opInt(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<IntEnum, IntEnum>>>& outAsync, IntEnum iceP_i1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opInt_name);
    outAsync->invoke(iceC_Test_TestIntf_opInt_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<IntEnum, IntEnum> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::SimpleEnum
Test::TestIntfPrx::opSimple(SimpleEnum iceP_s1, SimpleEnum& iceP_s2, const ::Ice::Context& context)
{
    auto _result = _makePromiseOutgoing<::std::tuple<SimpleEnum, SimpleEnum>>(true, this, &TestIntfPrx::_iceI_opSimple, iceP_s1, context).get();
    iceP_s2 = ::std::get<1>(_result);
    return ::std::get<0>(_result);
}

::std::future<::std::tuple<::Test::SimpleEnum, ::Test::SimpleEnum>>
Test::TestIntfPrx::opSimpleAsync(SimpleEnum iceP_s1, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::tuple<SimpleEnum, SimpleEnum>, ::std::promise>(false, this, &TestIntfPrx::_iceI_opSimple, iceP_s1, context);
}

::std::function<void()>
Test::TestIntfPrx::opSimpleAsync(SimpleEnum iceP_s1,
                                 ::std::function<void (::Test::SimpleEnum, ::Test::SimpleEnum)> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context)
{
    auto _responseCb = [response](::std::tuple<SimpleEnum, SimpleEnum>&& _result)
    {
        response(::std::get<0>(_result), ::std::get<1>(_result));
    };
    return _makeLambdaOutgoing<::std::tuple<SimpleEnum, SimpleEnum>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opSimple, iceP_s1, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opSimple(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SimpleEnum, SimpleEnum>>>& outAsync, SimpleEnum iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opSimple_name);
    outAsync->invoke(iceC_Test_TestIntf_opSimple_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<SimpleEnum, SimpleEnum> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::ByteEnumSeq
Test::TestIntfPrx::opByteSeq(const ByteEnumSeq& iceP_b1, ByteEnumSeq& iceP_b2, const ::Ice::Context& context)
{
    auto _result = _makePromiseOutgoing<::std::tuple<ByteEnumSeq, ByteEnumSeq>>(true, this, &TestIntfPrx::_iceI_opByteSeq, iceP_b1, context).get();
    iceP_b2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::ByteEnumSeq, ::Test::ByteEnumSeq>>
Test::TestIntfPrx::opByteSeqAsync(const ByteEnumSeq& iceP_b1, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::tuple<ByteEnumSeq, ByteEnumSeq>, ::std::promise>(false, this, &TestIntfPrx::_iceI_opByteSeq, iceP_b1, context);
}

::std::function<void()>
Test::TestIntfPrx::opByteSeqAsync(const ByteEnumSeq& iceP_b1,
                                  ::std::function<void (::Test::ByteEnumSeq, ::Test::ByteEnumSeq)> response,
                                  ::std::function<void(::std::exception_ptr)> ex,
                                  ::std::function<void(bool)> sent,
                                  const ::Ice::Context& context)
{
    auto _responseCb = [response](::std::tuple<ByteEnumSeq, ByteEnumSeq>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<ByteEnumSeq, ByteEnumSeq>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opByteSeq, iceP_b1, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opByteSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ByteEnumSeq, ByteEnumSeq>>>& outAsync, const ByteEnumSeq& iceP_b1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opByteSeq_name);
    outAsync->invoke(iceC_Test_TestIntf_opByteSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_b1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ByteEnumSeq, ByteEnumSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::ShortEnumSeq
Test::TestIntfPrx::opShortSeq(const ShortEnumSeq& iceP_s1, ShortEnumSeq& iceP_s2, const ::Ice::Context& context)
{
    auto _result = _makePromiseOutgoing<::std::tuple<ShortEnumSeq, ShortEnumSeq>>(true, this, &TestIntfPrx::_iceI_opShortSeq, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::ShortEnumSeq, ::Test::ShortEnumSeq>>
Test::TestIntfPrx::opShortSeqAsync(const ShortEnumSeq& iceP_s1, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::tuple<ShortEnumSeq, ShortEnumSeq>, ::std::promise>(false, this, &TestIntfPrx::_iceI_opShortSeq, iceP_s1, context);
}

::std::function<void()>
Test::TestIntfPrx::opShortSeqAsync(const ShortEnumSeq& iceP_s1,
                                   ::std::function<void (::Test::ShortEnumSeq, ::Test::ShortEnumSeq)> response,
                                   ::std::function<void(::std::exception_ptr)> ex,
                                   ::std::function<void(bool)> sent,
                                   const ::Ice::Context& context)
{
    auto _responseCb = [response](::std::tuple<ShortEnumSeq, ShortEnumSeq>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<ShortEnumSeq, ShortEnumSeq>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opShortSeq, iceP_s1, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opShortSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<ShortEnumSeq, ShortEnumSeq>>>& outAsync, const ShortEnumSeq& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opShortSeq_name);
    outAsync->invoke(iceC_Test_TestIntf_opShortSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<ShortEnumSeq, ShortEnumSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::IntEnumSeq
Test::TestIntfPrx::opIntSeq(const IntEnumSeq& iceP_i1, IntEnumSeq& iceP_i2, const ::Ice::Context& context)
{
    auto _result = _makePromiseOutgoing<::std::tuple<IntEnumSeq, IntEnumSeq>>(true, this, &TestIntfPrx::_iceI_opIntSeq, iceP_i1, context).get();
    iceP_i2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::IntEnumSeq, ::Test::IntEnumSeq>>
Test::TestIntfPrx::opIntSeqAsync(const IntEnumSeq& iceP_i1, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::tuple<IntEnumSeq, IntEnumSeq>, ::std::promise>(false, this, &TestIntfPrx::_iceI_opIntSeq, iceP_i1, context);
}

::std::function<void()>
Test::TestIntfPrx::opIntSeqAsync(const IntEnumSeq& iceP_i1,
                                 ::std::function<void (::Test::IntEnumSeq, ::Test::IntEnumSeq)> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context)
{
    auto _responseCb = [response](::std::tuple<IntEnumSeq, IntEnumSeq>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<IntEnumSeq, IntEnumSeq>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opIntSeq, iceP_i1, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opIntSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<IntEnumSeq, IntEnumSeq>>>& outAsync, const IntEnumSeq& iceP_i1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opIntSeq_name);
    outAsync->invoke(iceC_Test_TestIntf_opIntSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<IntEnumSeq, IntEnumSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

::Test::SimpleEnumSeq
Test::TestIntfPrx::opSimpleSeq(const SimpleEnumSeq& iceP_s1, SimpleEnumSeq& iceP_s2, const ::Ice::Context& context)
{
    auto _result = _makePromiseOutgoing<::std::tuple<SimpleEnumSeq, SimpleEnumSeq>>(true, this, &TestIntfPrx::_iceI_opSimpleSeq, iceP_s1, context).get();
    iceP_s2 = ::std::move(::std::get<1>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<::Test::SimpleEnumSeq, ::Test::SimpleEnumSeq>>
Test::TestIntfPrx::opSimpleSeqAsync(const SimpleEnumSeq& iceP_s1, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::tuple<SimpleEnumSeq, SimpleEnumSeq>, ::std::promise>(false, this, &TestIntfPrx::_iceI_opSimpleSeq, iceP_s1, context);
}

::std::function<void()>
Test::TestIntfPrx::opSimpleSeqAsync(const SimpleEnumSeq& iceP_s1,
                                    ::std::function<void (::Test::SimpleEnumSeq, ::Test::SimpleEnumSeq)> response,
                                    ::std::function<void(::std::exception_ptr)> ex,
                                    ::std::function<void(bool)> sent,
                                    const ::Ice::Context& context)
{
    auto _responseCb = [response](::std::tuple<SimpleEnumSeq, SimpleEnumSeq>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::move(::std::get<1>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<SimpleEnumSeq, SimpleEnumSeq>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opSimpleSeq, iceP_s1, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opSimpleSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SimpleEnumSeq, SimpleEnumSeq>>>& outAsync, const SimpleEnumSeq& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opSimpleSeq_name);
    outAsync->invoke(iceC_Test_TestIntf_opSimpleSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<SimpleEnumSeq, SimpleEnumSeq> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

void
Test::TestIntfPrx::shutdown(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::TestIntfPrx::shutdownAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestIntfPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::TestIntfPrx::shutdownAsync(::std::function<void ()> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::TestIntfPrx::ice_staticId()
{
    return TestIntf::ice_staticId();
}

bool
Test::TestIntf::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_TestIntf_ids, iceC_Test_TestIntf_ids + 2, s);
}

::std::vector<::std::string>
Test::TestIntf::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_TestIntf_ids[0], &iceC_Test_TestIntf_ids[2]);
}

::std::string
Test::TestIntf::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::TestIntf::ice_staticId()
{
    static const ::std::string typeId = "::Test::TestIntf";
    return typeId;
}

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opByte(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteEnum iceP_b1;
    istr->readAll(iceP_b1);
    inS.endReadParams();
    ByteEnum iceP_b2;
    ByteEnum ret = this->opByte(iceP_b1, iceP_b2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_b2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opShort(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ShortEnum iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ShortEnum iceP_s2;
    ShortEnum ret = this->opShort(iceP_s1, iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opInt(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    IntEnum iceP_i1;
    istr->readAll(iceP_i1);
    inS.endReadParams();
    IntEnum iceP_i2;
    IntEnum ret = this->opInt(iceP_i1, iceP_i2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_i2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opSimple(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SimpleEnum iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    SimpleEnum iceP_s2;
    SimpleEnum ret = this->opSimple(iceP_s1, iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opByteSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteEnumSeq iceP_b1;
    istr->readAll(iceP_b1);
    inS.endReadParams();
    ByteEnumSeq iceP_b2;
    ByteEnumSeq ret = this->opByteSeq(::std::move(iceP_b1), iceP_b2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_b2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opShortSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ShortEnumSeq iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ShortEnumSeq iceP_s2;
    ShortEnumSeq ret = this->opShortSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opIntSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    IntEnumSeq iceP_i1;
    istr->readAll(iceP_i1);
    inS.endReadParams();
    IntEnumSeq iceP_i2;
    IntEnumSeq ret = this->opIntSeq(::std::move(iceP_i1), iceP_i2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_i2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opSimpleSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SimpleEnumSeq iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    SimpleEnumSeq iceP_s2;
    SimpleEnumSeq ret = this->opSimpleSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_TestIntf_ops, iceC_Test_TestIntf_ops + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_TestIntf_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opByte(in, current);
        }
        case 5:
        {
            return _iceD_opByteSeq(in, current);
        }
        case 6:
        {
            return _iceD_opInt(in, current);
        }
        case 7:
        {
            return _iceD_opIntSeq(in, current);
        }
        case 8:
        {
            return _iceD_opShort(in, current);
        }
        case 9:
        {
            return _iceD_opShortSeq(in, current);
        }
        case 10:
        {
            return _iceD_opSimple(in, current);
        }
        case 11:
        {
            return _iceD_opSimpleSeq(in, current);
        }
        case 12:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
