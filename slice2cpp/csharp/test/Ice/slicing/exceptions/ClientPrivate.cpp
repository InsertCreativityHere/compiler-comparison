//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <ClientPrivate.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::PreservedClass> iceC_Test_PreservedClass_init("::Test::PreservedClass");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Preserved1> iceC_Test_Preserved1_init("::Test::Preserved1");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Preserved2> iceC_Test_Preserved2_init("::Test::Preserved2");

}

Test::Preserved1::~Preserved1()
{
}

const ::std::string&
Test::Preserved1::ice_staticId()
{
    static const ::std::string typeId = "::Test::Preserved1";
    return typeId;
}

/// \cond STREAM
bool
Test::Preserved1::_usesClasses() const
{
    return true;
}
/// \endcond

Test::Preserved2::~Preserved2()
{
}

const ::std::string&
Test::Preserved2::ice_staticId()
{
    static const ::std::string typeId = "::Test::Preserved2";
    return typeId;
}

Test::PreservedClass::~PreservedClass()
{
}

const ::std::string&
Test::PreservedClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::PreservedClass";
    return typeId;
}

#else // C++98 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::PreservedClass> iceC_Test_PreservedClass_init("::Test::PreservedClass");

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::Preserved1> iceC_Test_Preserved1_init("::Test::Preserved1");

}

Test::Preserved1::Preserved1(const ::std::string& b, const ::std::string& kp, const ::std::string& kpd, const BaseClassPtr& p1) :
    KnownPreservedDerived(b, kp, kpd),
    p1(p1)
{
}
Test::Preserved1::~Preserved1()
{
}

::std::string
Test::Preserved1::ice_id() const
{
    return "::Test::Preserved1";
}

Test::Preserved1*
Test::Preserved1::ice_clone() const
{
    return new Preserved1(*this);
}

void
Test::Preserved1::ice_throw() const
{
    throw *this;
}

bool
Test::Preserved1::_usesClasses() const
{
    return true;
}

/// \cond STREAM
void
Test::Preserved1::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::Preserved1", -1, false);
    ::Ice::StreamWriter< Preserved1, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    KnownPreservedDerived::_writeImpl(ostr);
}

void
Test::Preserved1::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Preserved1, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    KnownPreservedDerived::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::Preserved2> iceC_Test_Preserved2_init("::Test::Preserved2");

}

Test::Preserved2::Preserved2(const ::std::string& b, const ::std::string& kp, const ::std::string& kpd, const BaseClassPtr& p1, const BaseClassPtr& p2) :
    Preserved1(b, kp, kpd, p1),
    p2(p2)
{
}
Test::Preserved2::~Preserved2()
{
}

::std::string
Test::Preserved2::ice_id() const
{
    return "::Test::Preserved2";
}

Test::Preserved2*
Test::Preserved2::ice_clone() const
{
    return new Preserved2(*this);
}

void
Test::Preserved2::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::Preserved2::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::Preserved2", -1, false);
    ::Ice::StreamWriter< Preserved2, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    Preserved1::_writeImpl(ostr);
}

void
Test::Preserved2::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Preserved2, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    Preserved1::_readImpl(istr);
}
/// \endcond

Test::PreservedClass::~PreservedClass()
{
}

const ::std::string&
Test::PreservedClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::PreservedClass";
    return typeId;
}

namespace Ice
{
}

#endif
