//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __ClientPrivate_h__
#define __ClientPrivate_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Test.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{

class PreservedClass;

}

namespace Test
{

class Preserved1 : public ::Ice::UserExceptionHelper<Preserved1, KnownPreservedDerived>
{
public:

    virtual ~Preserved1();

    Preserved1(const Preserved1&) = default;

    Preserved1() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Preserved1(const ::std::string& b, const ::std::string& kp, const ::std::string& kpd, const ::std::shared_ptr<BaseClass>& p1) :
        ::Ice::UserExceptionHelper<Preserved1, KnownPreservedDerived>(b, kp, kpd),
        p1(p1)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&, const ::std::shared_ptr<::Test::BaseClass>&> ice_tuple() const
    {
        return std::tie(b, kp, kpd, p1);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond STREAM
    virtual bool _usesClasses() const override;
    /// \endcond

    ::std::shared_ptr<::Test::BaseClass> p1;
};

/// \cond INTERNAL
static Preserved1 _iceS_Preserved1_init;
/// \endcond

class Preserved2 : public ::Ice::UserExceptionHelper<Preserved2, Preserved1>
{
public:

    virtual ~Preserved2();

    Preserved2(const Preserved2&) = default;

    Preserved2() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Preserved2(const ::std::string& b, const ::std::string& kp, const ::std::string& kpd, const ::std::shared_ptr<BaseClass>& p1, const ::std::shared_ptr<BaseClass>& p2) :
        ::Ice::UserExceptionHelper<Preserved2, Preserved1>(b, kp, kpd, p1),
        p2(p2)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&, const ::std::shared_ptr<::Test::BaseClass>&, const ::std::shared_ptr<::Test::BaseClass>&> ice_tuple() const
    {
        return std::tie(b, kp, kpd, p1, p2);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::BaseClass> p2;
};

}

namespace Test
{

class PreservedClass : public ::Ice::ValueHelper<PreservedClass, BaseClass>
{
public:

    virtual ~PreservedClass();

    PreservedClass() = default;

    PreservedClass(const PreservedClass&) = default;
    PreservedClass(PreservedClass&&) = default;
    PreservedClass& operator=(const PreservedClass&) = default;
    PreservedClass& operator=(PreservedClass&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    PreservedClass(const ::std::string& bc, const ::std::string& pc) :
        Ice::ValueHelper<PreservedClass, BaseClass>(bc),
        pc(pc)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(bc, pc);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string pc;
};

/// \cond INTERNAL
static PreservedClass _iceS_PreservedClass_init;
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter<::Test::PreservedClass, S>
{
    static void write(S* ostr, const ::Test::PreservedClass& v)
    {
        ostr->writeAll(v.pc);
    }
};

template<typename S>
struct StreamReader<::Test::PreservedClass, S>
{
    static void read(S* istr, ::Test::PreservedClass& v)
    {
        istr->readAll(v.pc);
    }
};

template<typename S>
struct StreamWriter<::Test::Preserved1, S>
{
    static void write(S* ostr, const ::Test::Preserved1& v)
    {
        ostr->writeAll(v.p1);
    }
};

template<typename S>
struct StreamReader<::Test::Preserved1, S>
{
    static void read(S* istr, ::Test::Preserved1& v)
    {
        istr->readAll(v.p1);
    }
};

template<typename S>
struct StreamWriter<::Test::Preserved2, S>
{
    static void write(S* ostr, const ::Test::Preserved2& v)
    {
        ostr->writeAll(v.p2);
    }
};

template<typename S>
struct StreamReader<::Test::Preserved2, S>
{
    static void read(S* istr, ::Test::Preserved2& v)
    {
        istr->readAll(v.p2);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using PreservedClassPtr = ::std::shared_ptr<PreservedClass>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

}

namespace Test
{

class PreservedClass;
/// \cond INTERNAL
::Ice::Value* upCast(PreservedClass*);
/// \endcond
typedef ::IceInternal::Handle< PreservedClass> PreservedClassPtr;
/// \cond INTERNAL
void _icePatchValuePtr(PreservedClassPtr&, const ::Ice::ValuePtr&);
/// \endcond

}

namespace Test
{

class Preserved1 : public KnownPreservedDerived
{
public:

    Preserved1() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    Preserved1(const ::std::string& b, const ::std::string& kp, const ::std::string& kpd, const BaseClassPtr& p1);
    Preserved1(const Preserved1&) = default;
    virtual ~Preserved1();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual Preserved1* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    /// \cond STREAM
    virtual bool _usesClasses() const;
    /// \endcond

    ::Test::BaseClassPtr p1;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static Preserved1 _iceS_Preserved1_init;
/// \endcond

class Preserved2 : public Preserved1
{
public:

    Preserved2() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    Preserved2(const ::std::string& b, const ::std::string& kp, const ::std::string& kpd, const BaseClassPtr& p1, const BaseClassPtr& p2);
    Preserved2(const Preserved2&) = default;
    virtual ~Preserved2();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual Preserved2* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Test::BaseClassPtr p2;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

}

namespace IceProxy
{

}

namespace Test
{

class PreservedClass : public BaseClass
{
public:

    typedef PreservedClassPtr PointerType;

    virtual ~PreservedClass();

    PreservedClass()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    PreservedClass(const ::std::string& bc, const ::std::string& pc) :
        ::Test::BaseClass(bc),
        pc(pc)
    {
    }
    PreservedClass(const PreservedClass&) = default;
    PreservedClass& operator=(const PreservedClass&) = default;

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ValuePtr ice_clone() const;

    /**
     * Obtains the Slice type ID of the most-derived class implemented by this instance.
     * @return The type ID.
     */
    virtual ::std::string ice_id() const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return The type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::std::string pc;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_PreservedClass_init = ::Test::PreservedClass::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const PreservedClass& lhs, const PreservedClass& rhs)
{
    return static_cast<const ::Ice::Value&>(lhs) == static_cast<const ::Ice::Value&>(rhs);
}

inline bool operator<(const PreservedClass& lhs, const PreservedClass& rhs)
{
    return static_cast<const ::Ice::Value&>(lhs) < static_cast<const ::Ice::Value&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::Test::PreservedClass, S>
{
    static void write(S* ostr, const ::Test::PreservedClass& v)
    {
        ostr->write(v.pc);
    }
};

template<typename S>
struct StreamReader< ::Test::PreservedClass, S>
{
    static void read(S* istr, ::Test::PreservedClass& v)
    {
        istr->read(v.pc);
    }
};

template<>
struct StreamableTraits< ::Test::Preserved1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::Preserved1, S>
{
    static void write(S* ostr, const ::Test::Preserved1& v)
    {
        ostr->write(v.p1);
    }
};

template<typename S>
struct StreamReader< ::Test::Preserved1, S>
{
    static void read(S* istr, ::Test::Preserved1& v)
    {
        istr->read(v.p1);
    }
};

template<>
struct StreamableTraits< ::Test::Preserved2>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::Preserved2, S>
{
    static void write(S* ostr, const ::Test::Preserved2& v)
    {
        ostr->write(v.p2);
    }
};

template<typename S>
struct StreamReader< ::Test::Preserved2, S>
{
    static void read(S* istr, ::Test::Preserved2& v)
    {
        istr->read(v.p2);
    }
};

}
/// \endcond

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
