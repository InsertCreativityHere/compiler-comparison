//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ServerPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include "ServerPrivate.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::UnknownDerived> iceC_Test_UnknownDerived_init("::Test::UnknownDerived");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::UnknownIntermediate> iceC_Test_UnknownIntermediate_init("::Test::UnknownIntermediate");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::UnknownMostDerived1> iceC_Test_UnknownMostDerived1_init("::Test::UnknownMostDerived1");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::UnknownMostDerived2> iceC_Test_UnknownMostDerived2_init("::Test::UnknownMostDerived2");
}

::std::string_view
Test::UnknownDerived::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::UnknownDerived";
    return typeId;
}

::std::string
Test::UnknownDerived::ice_id() const
{
    return ::std::string{ice_staticId()};
}

void
Test::UnknownDerived::ice_throw() const
{
    throw *this;
}

void
Test::UnknownDerived::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<UnknownDerived>::write(ostr, *this);
    ostr->endSlice();
    Base::_writeImpl(ostr);
}

void
Test::UnknownDerived::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<UnknownDerived>::read(istr, *this);
    istr->endSlice();
    Base::_readImpl(istr);
}

::std::string_view
Test::UnknownIntermediate::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::UnknownIntermediate";
    return typeId;
}

::std::string
Test::UnknownIntermediate::ice_id() const
{
    return ::std::string{ice_staticId()};
}

void
Test::UnknownIntermediate::ice_throw() const
{
    throw *this;
}

void
Test::UnknownIntermediate::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<UnknownIntermediate>::write(ostr, *this);
    ostr->endSlice();
    Base::_writeImpl(ostr);
}

void
Test::UnknownIntermediate::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<UnknownIntermediate>::read(istr, *this);
    istr->endSlice();
    Base::_readImpl(istr);
}

::std::string_view
Test::UnknownMostDerived1::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::UnknownMostDerived1";
    return typeId;
}

::std::string
Test::UnknownMostDerived1::ice_id() const
{
    return ::std::string{ice_staticId()};
}

void
Test::UnknownMostDerived1::ice_throw() const
{
    throw *this;
}

void
Test::UnknownMostDerived1::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<UnknownMostDerived1>::write(ostr, *this);
    ostr->endSlice();
    KnownIntermediate::_writeImpl(ostr);
}

void
Test::UnknownMostDerived1::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<UnknownMostDerived1>::read(istr, *this);
    istr->endSlice();
    KnownIntermediate::_readImpl(istr);
}

::std::string_view
Test::UnknownMostDerived2::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::UnknownMostDerived2";
    return typeId;
}

::std::string
Test::UnknownMostDerived2::ice_id() const
{
    return ::std::string{ice_staticId()};
}

void
Test::UnknownMostDerived2::ice_throw() const
{
    throw *this;
}

void
Test::UnknownMostDerived2::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<UnknownMostDerived2>::write(ostr, *this);
    ostr->endSlice();
    UnknownIntermediate::_writeImpl(ostr);
}

void
Test::UnknownMostDerived2::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<UnknownMostDerived2>::read(istr, *this);
    istr->endSlice();
    UnknownIntermediate::_readImpl(istr);
}
