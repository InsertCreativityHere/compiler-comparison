//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <ClientPrivate.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::D3> iceC_Test_D3_init("::Test::D3");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCUnknown> iceC_Test_PCUnknown_init("::Test::PCUnknown");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCDerived> iceC_Test_PCDerived_init("::Test::PCDerived");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCDerived2> iceC_Test_PCDerived2_init("::Test::PCDerived2");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCDerived3> iceC_Test_PCDerived3_init("::Test::PCDerived3");

const ::IceInternal::DefaultValueFactoryInit<::Test::CompactPCDerived> iceC_Test_CompactPCDerived_init("::Test::CompactPCDerived");
const ::IceInternal::CompactIdInit iceC_Test_CompactPCDerived_compactIdInit ("::Test::CompactPCDerived", 57);

}

Test::D3::~D3()
{
}

const ::std::string&
Test::D3::ice_staticId()
{
    static const ::std::string typeId = "::Test::D3";
    return typeId;
}

Test::PCUnknown::~PCUnknown()
{
}

::std::shared_ptr<::Ice::SlicedData>
Test::PCUnknown::ice_getSlicedData() const
{
    return _iceSlicedData;
}

/// \cond STREAM
void
Test::PCUnknown::_iceWrite(::Ice::OutputStream* ostr) const
{
    ostr->startValue(_iceSlicedData);
    _iceWriteImpl(ostr);
    ostr->endValue();
}

void
Test::PCUnknown::_iceRead(::Ice::InputStream* istr)
{
    istr->startValue();
    _iceReadImpl(istr);
    _iceSlicedData = istr->endValue(true);
}
/// \endcond

const ::std::string&
Test::PCUnknown::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCUnknown";
    return typeId;
}

Test::PCDerived::~PCDerived()
{
}

const ::std::string&
Test::PCDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCDerived";
    return typeId;
}

Test::PCDerived2::~PCDerived2()
{
}

const ::std::string&
Test::PCDerived2::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCDerived2";
    return typeId;
}

Test::PCDerived3::~PCDerived3()
{
}

const ::std::string&
Test::PCDerived3::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCDerived3";
    return typeId;
}

Test::CompactPCDerived::~CompactPCDerived()
{
}

const ::std::string&
Test::CompactPCDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::CompactPCDerived";
    return typeId;
}

#else // C++98 mapping

namespace
{

}

Test::D3::~D3()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(D3* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::D3::ice_clone() const
{
    ::Ice::Object* p = new D3(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_D3_ids[3] =
{
    "::Ice::Object",
    "::Test::B",
    "::Test::D3"
};

}

bool
Test::D3::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_D3_ids, iceC_Test_D3_ids + 3, s);
}

::std::vector< ::std::string>
Test::D3::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_D3_ids[0], &iceC_Test_D3_ids[3]);
}

const ::std::string&
Test::D3::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::D3::ice_staticId()
{
    static const ::std::string typeId = "::Test::D3";
    return typeId;
}

void
Test::D3::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    B::_iceGcVisitMembers(v_);
    if(pd3)
    {
        if((::Test::upCast(pd3.get())->_iceGcVisit(v_)))
        {
            pd3 = 0;
        }
    }
}

/// \cond STREAM
void
Test::D3::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< D3, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::D3::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< D3, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::D3> iceC_Test_D3_init("::Test::D3");
}

::Ice::ValueFactoryPtr
Test::D3::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::D3::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(D3Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = D3Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(D3::ice_staticId(), v);
    }
}
/// \endcond

Test::PCUnknown::~PCUnknown()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(PCUnknown* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::PCUnknown::ice_clone() const
{
    ::Ice::Object* p = new PCUnknown(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_PCUnknown_ids[3] =
{
    "::Ice::Object",
    "::Test::PBase",
    "::Test::PCUnknown"
};

}

bool
Test::PCUnknown::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_PCUnknown_ids, iceC_Test_PCUnknown_ids + 3, s);
}

::std::vector< ::std::string>
Test::PCUnknown::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_PCUnknown_ids[0], &iceC_Test_PCUnknown_ids[3]);
}

const ::std::string&
Test::PCUnknown::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::PCUnknown::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCUnknown";
    return typeId;
}

void
Test::PCUnknown::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(_iceSlicedData)
    {
        _iceSlicedData->_iceGcVisitMembers(v_);
    }
}

::Ice::SlicedDataPtr
Test::PCUnknown::ice_getSlicedData() const
{
    return _iceSlicedData;
}

void
Test::PCUnknown::_iceWrite(::Ice::OutputStream*ostr) const
{
    ostr->startValue(_iceSlicedData);
    _iceWriteImpl(ostr);
    ostr->endValue();
}

void
Test::PCUnknown::_iceRead(::Ice::InputStream* istr)
{
    istr->startValue();
    _iceReadImpl(istr);
    _iceSlicedData = istr->endValue(true);
}

/// \cond STREAM
void
Test::PCUnknown::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< PCUnknown, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    PBase::_iceWriteImpl(ostr);
}

void
Test::PCUnknown::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< PCUnknown, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    PBase::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::PCUnknown> iceC_Test_PCUnknown_init("::Test::PCUnknown");
}

::Ice::ValueFactoryPtr
Test::PCUnknown::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::PCUnknown::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(PCUnknownPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = PCUnknownPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(PCUnknown::ice_staticId(), v);
    }
}
/// \endcond

Test::PCDerived::~PCDerived()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(PCDerived* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::PCDerived::ice_clone() const
{
    ::Ice::Object* p = new PCDerived(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_PCDerived_ids[5] =
{
    "::Ice::Object",
    "::Test::PBase",
    "::Test::PCDerived",
    "::Test::PDerived",
    "::Test::Preserved"
};

}

bool
Test::PCDerived::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_PCDerived_ids, iceC_Test_PCDerived_ids + 5, s);
}

::std::vector< ::std::string>
Test::PCDerived::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_PCDerived_ids[0], &iceC_Test_PCDerived_ids[5]);
}

const ::std::string&
Test::PCDerived::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::PCDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCDerived";
    return typeId;
}

void
Test::PCDerived::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    PDerived::_iceGcVisitMembers(v_);
    {
        for(::Test::PBaseSeq::iterator _i0 = pbs.begin(); _i0 != pbs.end(); ++_i0)
        {
            if((*_i0))
            {
                if((::Test::upCast((*_i0).get())->_iceGcVisit(v_)))
                {
                    (*_i0) = 0;
                }
            }
        }
    }
}

/// \cond STREAM
void
Test::PCDerived::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< PCDerived, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    PDerived::_iceWriteImpl(ostr);
}

void
Test::PCDerived::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< PCDerived, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    PDerived::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::PCDerived> iceC_Test_PCDerived_init("::Test::PCDerived");
}

::Ice::ValueFactoryPtr
Test::PCDerived::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::PCDerived::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(PCDerivedPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = PCDerivedPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(PCDerived::ice_staticId(), v);
    }
}
/// \endcond

Test::PCDerived2::~PCDerived2()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(PCDerived2* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::PCDerived2::ice_clone() const
{
    ::Ice::Object* p = new PCDerived2(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_PCDerived2_ids[6] =
{
    "::Ice::Object",
    "::Test::PBase",
    "::Test::PCDerived",
    "::Test::PCDerived2",
    "::Test::PDerived",
    "::Test::Preserved"
};

}

bool
Test::PCDerived2::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_PCDerived2_ids, iceC_Test_PCDerived2_ids + 6, s);
}

::std::vector< ::std::string>
Test::PCDerived2::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_PCDerived2_ids[0], &iceC_Test_PCDerived2_ids[6]);
}

const ::std::string&
Test::PCDerived2::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::PCDerived2::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCDerived2";
    return typeId;
}

void
Test::PCDerived2::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    PCDerived::_iceGcVisitMembers(v_);
}

/// \cond STREAM
void
Test::PCDerived2::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< PCDerived2, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    PCDerived::_iceWriteImpl(ostr);
}

void
Test::PCDerived2::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< PCDerived2, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    PCDerived::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::PCDerived2> iceC_Test_PCDerived2_init("::Test::PCDerived2");
}

::Ice::ValueFactoryPtr
Test::PCDerived2::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::PCDerived2::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(PCDerived2Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = PCDerived2Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(PCDerived2::ice_staticId(), v);
    }
}
/// \endcond

Test::PCDerived3::~PCDerived3()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(PCDerived3* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::PCDerived3::ice_clone() const
{
    ::Ice::Object* p = new PCDerived3(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_PCDerived3_ids[7] =
{
    "::Ice::Object",
    "::Test::PBase",
    "::Test::PCDerived",
    "::Test::PCDerived2",
    "::Test::PCDerived3",
    "::Test::PDerived",
    "::Test::Preserved"
};

}

bool
Test::PCDerived3::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_PCDerived3_ids, iceC_Test_PCDerived3_ids + 7, s);
}

::std::vector< ::std::string>
Test::PCDerived3::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_PCDerived3_ids[0], &iceC_Test_PCDerived3_ids[7]);
}

const ::std::string&
Test::PCDerived3::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::PCDerived3::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCDerived3";
    return typeId;
}

void
Test::PCDerived3::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    PCDerived2::_iceGcVisitMembers(v_);
    if(pcd3)
    {
        if((pcd3.get())->_iceGcVisit(v_))
        {
            pcd3 = 0;
        }
    }
}

/// \cond STREAM
void
Test::PCDerived3::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< PCDerived3, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    PCDerived2::_iceWriteImpl(ostr);
}

void
Test::PCDerived3::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< PCDerived3, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    PCDerived2::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::PCDerived3> iceC_Test_PCDerived3_init("::Test::PCDerived3");
}

::Ice::ValueFactoryPtr
Test::PCDerived3::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::PCDerived3::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(PCDerived3Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = PCDerived3Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(PCDerived3::ice_staticId(), v);
    }
}
/// \endcond

Test::CompactPCDerived::~CompactPCDerived()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(CompactPCDerived* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::CompactPCDerived::ice_clone() const
{
    ::Ice::Object* p = new CompactPCDerived(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_CompactPCDerived_ids[5] =
{
    "::Ice::Object",
    "::Test::CompactPCDerived",
    "::Test::CompactPDerived",
    "::Test::PBase",
    "::Test::Preserved"
};

}

bool
Test::CompactPCDerived::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_CompactPCDerived_ids, iceC_Test_CompactPCDerived_ids + 5, s);
}

::std::vector< ::std::string>
Test::CompactPCDerived::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_CompactPCDerived_ids[0], &iceC_Test_CompactPCDerived_ids[5]);
}

const ::std::string&
Test::CompactPCDerived::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::CompactPCDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::CompactPCDerived";
    return typeId;
}

void
Test::CompactPCDerived::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    CompactPDerived::_iceGcVisitMembers(v_);
    {
        for(::Test::PBaseSeq::iterator _i0 = pbs.begin(); _i0 != pbs.end(); ++_i0)
        {
            if((*_i0))
            {
                if((::Test::upCast((*_i0).get())->_iceGcVisit(v_)))
                {
                    (*_i0) = 0;
                }
            }
        }
    }
}

/// \cond STREAM
void
Test::CompactPCDerived::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), 57, false);
    ::Ice::StreamWriter< CompactPCDerived, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    CompactPDerived::_iceWriteImpl(ostr);
}

void
Test::CompactPCDerived::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< CompactPCDerived, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    CompactPDerived::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::CompactPCDerived> iceC_Test_CompactPCDerived_init("::Test::CompactPCDerived");
const ::IceInternal::CompactIdInit iceC_Test_CompactPCDerived_compactIdInit("::Test::CompactPCDerived", 57);
}

::Ice::ValueFactoryPtr
Test::CompactPCDerived::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::CompactPCDerived::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(CompactPCDerivedPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CompactPCDerivedPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(CompactPCDerived::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
