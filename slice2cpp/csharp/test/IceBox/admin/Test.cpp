// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

::Ice::PropertyDict
Test::TestFacetPrx::getChanges(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<::Ice::PropertyDict>(true, this, &TestFacetPrx::_iceI_getChanges, context).get();
}

::std::future<::Ice::PropertyDict>
Test::TestFacetPrx::getChangesAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<::Ice::PropertyDict>(false, this, &TestFacetPrx::_iceI_getChanges, context);
}

::std::function<void()>
Test::TestFacetPrx::getChangesAsync(::std::function<void(::Ice::PropertyDict)> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<::Ice::PropertyDict>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &Test::TestFacetPrx::_iceI_getChanges, context);
}

void
Test::TestFacetPrx::_iceI_getChanges(const ::std::shared_ptr<IceInternal::OutgoingAsyncT<::Ice::PropertyDict>>& outAsync, const Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "getChanges";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr);
}

Test::TestFacetPrx::~TestFacetPrx() = default;

const char*
Test::TestFacetPrx::ice_staticId() noexcept
{
    return "::Test::TestFacet";
}

::std::vector<::std::string>
Test::TestFacet::ice_ids(const Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::Test::TestFacet"};
    return allTypeIds;
}

::std::string
Test::TestFacet::ice_id(const Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
Test::TestFacet::ice_staticId() noexcept
{
    return "::Test::TestFacet";
}

/// \cond INTERNAL
void
Test::TestFacet::_iceD_getChanges(
    Ice::IncomingRequest& request,
    ::std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    const ::Ice::PropertyDict ret = this->getChanges(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::TestFacet::dispatch(Ice::IncomingRequest& request, ::std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::array<::std::string_view, 5> allOperations{"getChanges", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = ::std::equal_range(allOperations.begin(), allOperations.end(), current.operation);
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(::std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_getChanges(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(::std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond
