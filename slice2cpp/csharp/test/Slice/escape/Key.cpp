//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Key.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_abstract_case_ids[2] =
{
    "::Ice::Object",
    "::abstract::case"
};
const ::std::string iceC_abstract_case_ops[] =
{
    "catch",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_abstract_case_catch_name = "catch";

const ::std::string iceC_abstract_decimal_ids[2] =
{
    "::Ice::Object",
    "::abstract::decimal"
};
const ::std::string iceC_abstract_decimal_ops[] =
{
    "default",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_abstract_decimal_default_name = "default";

const ::IceInternal::DefaultValueFactoryInit<::abstract::delegate> iceC_abstract_delegate_init("::abstract::delegate");

const ::std::string iceC_abstract_explicit_ids[4] =
{
    "::Ice::Object",
    "::abstract::case",
    "::abstract::decimal",
    "::abstract::explicit"
};
const ::std::string iceC_abstract_explicit_ops[] =
{
    "catch",
    "default",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

const ::IceInternal::DefaultValueFactoryInit<::abstract::optionalMembers> iceC_abstract_optionalMembers_init("::abstract::optionalMembers");

const ::std::string iceC_abstract_optionalParams_ids[2] =
{
    "::Ice::Object",
    "::abstract::optionalParams"
};
const ::std::string iceC_abstract_optionalParams_ops[] =
{
    "continue",
    "for",
    "foreach",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "in"
};
const ::std::string iceC_abstract_optionalParams_for_name = "for";
const ::std::string iceC_abstract_optionalParams_continue_name = "continue";
const ::std::string iceC_abstract_optionalParams_in_name = "in";
const ::std::string iceC_abstract_optionalParams_foreach_name = "foreach";

const ::IceInternal::DefaultUserExceptionFactoryInit<::abstract::fixed> iceC_abstract_fixed_init("::abstract::fixed");

const ::IceInternal::DefaultUserExceptionFactoryInit<::abstract::foreach> iceC_abstract_foreach_init("::abstract::foreach");

const ::IceInternal::DefaultUserExceptionFactoryInit<::abstract::BaseMethods> iceC_abstract_BaseMethods_init("::abstract::BaseMethods");

const ::std::string iceC_abstract_implicit_ids[2] =
{
    "::Ice::Object",
    "::abstract::implicit"
};
const ::std::string iceC_abstract_implicit_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "in"
};
const ::std::string iceC_abstract_implicit_in_name = "in";

const ::std::string iceC_abstract_System_Test_ids[2] =
{
    "::Ice::Object",
    "::abstract::System::Test"
};
const ::std::string iceC_abstract_System_Test_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};
const ::std::string iceC_abstract_System_Test_op_name = "op";

const ::std::string iceC_System_Test_ids[2] =
{
    "::Ice::Object",
    "::System::Test"
};
const ::std::string iceC_System_Test_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};
const ::std::string iceC_System_Test_op_name = "op";

}

void
abstract::casePrx::_cpp_catch(::std::int32_t iceP_checked, ::std::int32_t& iceP_continue, const ::Ice::Context& context) const
{
    iceP_continue = _makePromiseOutgoing<::std::int32_t>(true, this, &casePrx::_iceI_catch, iceP_checked, context).get();
}

::std::future<::std::int32_t>
abstract::casePrx::catchAsync(::std::int32_t iceP_checked, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t, ::std::promise>(false, this, &casePrx::_iceI_catch, iceP_checked, context);
}

::std::function<void()>
abstract::casePrx::catchAsync(::std::int32_t iceP_checked,
                              ::std::function<void (::std::int32_t)> response,
                              ::std::function<void(::std::exception_ptr)> ex,
                              ::std::function<void(bool)> sent,
                              const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::int32_t>(std::move(response), std::move(ex), std::move(sent), this, &abstract::casePrx::_iceI_catch, iceP_checked, context);
}

/// \cond INTERNAL
void
abstract::casePrx::_iceI_catch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>& outAsync, ::std::int32_t iceP_checked, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_abstract_case_catch_name);
    outAsync->invoke(iceC_abstract_case_catch_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_checked);
        },
        nullptr);
}
/// \endcond

const ::std::string&
abstract::casePrx::ice_staticId()
{
    static const ::std::string typeId = "::abstract::case";
    return typeId;
}

void
abstract::decimalPrx::_cpp_default(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &decimalPrx::_iceI_default, context).get();
}

::std::future<void>
abstract::decimalPrx::defaultAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &decimalPrx::_iceI_default, context);
}

::std::function<void()>
abstract::decimalPrx::defaultAsync(::std::function<void ()> response,
                                   ::std::function<void(::std::exception_ptr)> ex,
                                   ::std::function<void(bool)> sent,
                                   const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &abstract::decimalPrx::_iceI_default, context);
}

/// \cond INTERNAL
void
abstract::decimalPrx::_iceI_default(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_abstract_decimal_default_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
abstract::decimalPrx::ice_staticId()
{
    static const ::std::string typeId = "::abstract::decimal";
    return typeId;
}

const ::std::string&
abstract::explicitPrx::ice_staticId()
{
    static const ::std::string typeId = "::abstract::explicit";
    return typeId;
}

std::optional<::abstract::_cpp_break>
abstract::optionalParamsPrx::_cpp_for(const std::optional<as>& iceP_goto, const std::optional<::std::optional<explicitPrx>>& iceP_if, const std::optional<_cpp_while>& iceP_internal, const std::optional<::std::string>& iceP_namespace, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<std::optional<_cpp_break>>(true, this, &optionalParamsPrx::_iceI_for, iceP_goto, iceP_if, iceP_internal, iceP_namespace, context).get();
}

::std::future<std::optional<::abstract::_cpp_break>>
abstract::optionalParamsPrx::forAsync(const std::optional<as>& iceP_goto, const std::optional<::std::optional<explicitPrx>>& iceP_if, const std::optional<_cpp_while>& iceP_internal, const std::optional<::std::string>& iceP_namespace, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<std::optional<_cpp_break>, ::std::promise>(false, this, &optionalParamsPrx::_iceI_for, iceP_goto, iceP_if, iceP_internal, iceP_namespace, context);
}

::std::function<void()>
abstract::optionalParamsPrx::forAsync(const std::optional<as>& iceP_goto, const std::optional<::std::optional<explicitPrx>>& iceP_if, const std::optional<_cpp_while>& iceP_internal, const std::optional<::std::string>& iceP_namespace,
                                      ::std::function<void (std::optional<::abstract::_cpp_break>)> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<std::optional<_cpp_break>>(std::move(response), std::move(ex), std::move(sent), this, &abstract::optionalParamsPrx::_iceI_for, iceP_goto, iceP_if, iceP_internal, iceP_namespace, context);
}

/// \cond INTERNAL
void
abstract::optionalParamsPrx::_iceI_for(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<_cpp_break>>>& outAsync, const std::optional<as>& iceP_goto, const std::optional<::std::optional<explicitPrx>>& iceP_if, const std::optional<_cpp_while>& iceP_internal, const std::optional<::std::string>& iceP_namespace, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_abstract_optionalParams_for_name);
    outAsync->invoke(iceC_abstract_optionalParams_for_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2, 3, 5, 7}, iceP_goto, iceP_if, iceP_internal, iceP_namespace);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            std::optional<_cpp_break> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

std::optional<::abstract::_cpp_break>
abstract::optionalParamsPrx::_cpp_continue(const std::optional<as>& iceP_goto, const std::optional<::std::optional<explicitPrx>>& iceP_if, const std::optional<_cpp_while>& iceP_internal, const std::optional<::std::string>& iceP_namespace, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<std::optional<_cpp_break>>(true, this, &optionalParamsPrx::_iceI_continue, iceP_goto, iceP_if, iceP_internal, iceP_namespace, context).get();
}

::std::future<std::optional<::abstract::_cpp_break>>
abstract::optionalParamsPrx::continueAsync(const std::optional<as>& iceP_goto, const std::optional<::std::optional<explicitPrx>>& iceP_if, const std::optional<_cpp_while>& iceP_internal, const std::optional<::std::string>& iceP_namespace, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<std::optional<_cpp_break>, ::std::promise>(false, this, &optionalParamsPrx::_iceI_continue, iceP_goto, iceP_if, iceP_internal, iceP_namespace, context);
}

::std::function<void()>
abstract::optionalParamsPrx::continueAsync(const std::optional<as>& iceP_goto, const std::optional<::std::optional<explicitPrx>>& iceP_if, const std::optional<_cpp_while>& iceP_internal, const std::optional<::std::string>& iceP_namespace,
                                           ::std::function<void (std::optional<::abstract::_cpp_break>)> response,
                                           ::std::function<void(::std::exception_ptr)> ex,
                                           ::std::function<void(bool)> sent,
                                           const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<std::optional<_cpp_break>>(std::move(response), std::move(ex), std::move(sent), this, &abstract::optionalParamsPrx::_iceI_continue, iceP_goto, iceP_if, iceP_internal, iceP_namespace, context);
}

/// \cond INTERNAL
void
abstract::optionalParamsPrx::_iceI_continue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<_cpp_break>>>& outAsync, const std::optional<as>& iceP_goto, const std::optional<::std::optional<explicitPrx>>& iceP_if, const std::optional<_cpp_while>& iceP_internal, const std::optional<::std::string>& iceP_namespace, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_abstract_optionalParams_continue_name);
    outAsync->invoke(iceC_abstract_optionalParams_continue_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2, 3, 5, 7}, iceP_goto, iceP_if, iceP_internal, iceP_namespace);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            std::optional<_cpp_break> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

std::optional<::abstract::_cpp_break>
abstract::optionalParamsPrx::in(std::optional<as>& iceP_goto, std::optional<::std::optional<explicitPrx>>& iceP_if, std::optional<_cpp_while>& iceP_internal, std::optional<::std::string>& iceP_namespace, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<std::optional<_cpp_break>, std::optional<as>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>>>(true, this, &optionalParamsPrx::_iceI_in, context).get();
    iceP_goto = ::std::get<1>(_result);
    iceP_if = ::std::move(::std::get<2>(_result));
    iceP_internal = ::std::move(::std::get<3>(_result));
    iceP_namespace = ::std::move(::std::get<4>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::abstract::_cpp_break>, std::optional<::abstract::as>, std::optional<::std::optional<::abstract::explicitPrx>>, std::optional<::abstract::_cpp_while>, std::optional<::std::string>>>
abstract::optionalParamsPrx::inAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<std::optional<_cpp_break>, std::optional<as>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>>, ::std::promise>(false, this, &optionalParamsPrx::_iceI_in, context);
}

::std::function<void()>
abstract::optionalParamsPrx::inAsync(::std::function<void (std::optional<::abstract::_cpp_break>, std::optional<::abstract::as>, std::optional<::std::optional<::abstract::explicitPrx>>, std::optional<::abstract::_cpp_while>, std::optional<::std::string>)> response,
                                     ::std::function<void(::std::exception_ptr)> ex,
                                     ::std::function<void(bool)> sent,
                                     const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<_cpp_break>, std::optional<as>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::get<1>(_result), ::std::move(::std::get<2>(_result)), ::std::move(::std::get<3>(_result)), ::std::move(::std::get<4>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<std::optional<_cpp_break>, std::optional<as>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &abstract::optionalParamsPrx::_iceI_in, context);
}

/// \cond INTERNAL
void
abstract::optionalParamsPrx::_iceI_in(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<_cpp_break>, std::optional<as>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_abstract_optionalParams_in_name);
    outAsync->invoke(iceC_abstract_optionalParams_in_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<_cpp_break>, std::optional<as>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>> v;
            istr->readAll({1, 2, 3, 5, 7}, ::std::get<0>(v), ::std::get<1>(v), ::std::get<2>(v), ::std::get<3>(v), ::std::get<4>(v));
            return v;
        });
}
/// \endcond

std::optional<::abstract::_cpp_break>
abstract::optionalParamsPrx::foreach(std::optional<as>& iceP_goto, std::optional<::std::optional<explicitPrx>>& iceP_if, std::optional<_cpp_while>& iceP_internal, std::optional<::std::string>& iceP_namespace, const ::Ice::Context& context) const
{
    auto _result = _makePromiseOutgoing<::std::tuple<std::optional<_cpp_break>, std::optional<as>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>>>(true, this, &optionalParamsPrx::_iceI_foreach, context).get();
    iceP_goto = ::std::get<1>(_result);
    iceP_if = ::std::move(::std::get<2>(_result));
    iceP_internal = ::std::move(::std::get<3>(_result));
    iceP_namespace = ::std::move(::std::get<4>(_result));
    return ::std::move(::std::get<0>(_result));
}

::std::future<::std::tuple<std::optional<::abstract::_cpp_break>, std::optional<::abstract::as>, std::optional<::std::optional<::abstract::explicitPrx>>, std::optional<::abstract::_cpp_while>, std::optional<::std::string>>>
abstract::optionalParamsPrx::foreachAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::tuple<std::optional<_cpp_break>, std::optional<as>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>>, ::std::promise>(false, this, &optionalParamsPrx::_iceI_foreach, context);
}

::std::function<void()>
abstract::optionalParamsPrx::foreachAsync(::std::function<void (std::optional<::abstract::_cpp_break>, std::optional<::abstract::as>, std::optional<::std::optional<::abstract::explicitPrx>>, std::optional<::abstract::_cpp_while>, std::optional<::std::string>)> response,
                                          ::std::function<void(::std::exception_ptr)> ex,
                                          ::std::function<void(bool)> sent,
                                          const ::Ice::Context& context) const
{
    auto _responseCb = [response](::std::tuple<std::optional<_cpp_break>, std::optional<as>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>>&& _result)
    {
        response(::std::move(::std::get<0>(_result)), ::std::get<1>(_result), ::std::move(::std::get<2>(_result)), ::std::move(::std::get<3>(_result)), ::std::move(::std::get<4>(_result)));
    };
    return _makeLambdaOutgoing<::std::tuple<std::optional<_cpp_break>, std::optional<as>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &abstract::optionalParamsPrx::_iceI_foreach, context);
}

/// \cond INTERNAL
void
abstract::optionalParamsPrx::_iceI_foreach(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<std::optional<_cpp_break>, std::optional<as>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>>>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_abstract_optionalParams_foreach_name);
    outAsync->invoke(iceC_abstract_optionalParams_foreach_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<std::optional<_cpp_break>, std::optional<as>, std::optional<::std::optional<explicitPrx>>, std::optional<_cpp_while>, std::optional<::std::string>> v;
            istr->readAll({1, 2, 3, 5, 7}, ::std::get<0>(v), ::std::get<1>(v), ::std::get<2>(v), ::std::get<3>(v), ::std::get<4>(v));
            return v;
        });
}
/// \endcond

const ::std::string&
abstract::optionalParamsPrx::ice_staticId()
{
    static const ::std::string typeId = "::abstract::optionalParams";
    return typeId;
}

::abstract::as
abstract::implicitPrx::in(const _cpp_break& iceP_internal, const ::std::shared_ptr<delegate>& iceP_is, const ::std::optional<explicitPrx>& iceP_lock, const ::std::optional<casePrx>& iceP_namespace, const ::std::optional<decimalPrx>& iceP_new, const ::std::shared_ptr<delegate>& iceP_null, ::std::int32_t iceP_override, ::std::int32_t iceP_params, ::std::int32_t iceP_private, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<as>(true, this, &implicitPrx::_iceI_in, iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_override, iceP_params, iceP_private, context).get();
}

::std::future<::abstract::as>
abstract::implicitPrx::inAsync(const _cpp_break& iceP_internal, const ::std::shared_ptr<delegate>& iceP_is, const ::std::optional<explicitPrx>& iceP_lock, const ::std::optional<casePrx>& iceP_namespace, const ::std::optional<decimalPrx>& iceP_new, const ::std::shared_ptr<delegate>& iceP_null, ::std::int32_t iceP_override, ::std::int32_t iceP_params, ::std::int32_t iceP_private, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<as, ::std::promise>(false, this, &implicitPrx::_iceI_in, iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_override, iceP_params, iceP_private, context);
}

::std::function<void()>
abstract::implicitPrx::inAsync(const _cpp_break& iceP_internal, const ::std::shared_ptr<delegate>& iceP_is, const ::std::optional<explicitPrx>& iceP_lock, const ::std::optional<casePrx>& iceP_namespace, const ::std::optional<decimalPrx>& iceP_new, const ::std::shared_ptr<delegate>& iceP_null, ::std::int32_t iceP_override, ::std::int32_t iceP_params, ::std::int32_t iceP_private,
                               ::std::function<void (::abstract::as)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<as>(std::move(response), std::move(ex), std::move(sent), this, &abstract::implicitPrx::_iceI_in, iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_override, iceP_params, iceP_private, context);
}

/// \cond INTERNAL
void
abstract::implicitPrx::_iceI_in(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<as>>& outAsync, const _cpp_break& iceP_internal, const ::std::shared_ptr<delegate>& iceP_is, const ::std::optional<explicitPrx>& iceP_lock, const ::std::optional<casePrx>& iceP_namespace, const ::std::optional<decimalPrx>& iceP_new, const ::std::shared_ptr<delegate>& iceP_null, ::std::int32_t iceP_override, ::std::int32_t iceP_params, ::std::int32_t iceP_private, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_abstract_implicit_in_name);
    outAsync->invoke(iceC_abstract_implicit_in_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_override, iceP_params, iceP_private);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const foreach&)
            {
                throw;
            }
            catch(const fixed&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

const ::std::string&
abstract::implicitPrx::ice_staticId()
{
    static const ::std::string typeId = "::abstract::implicit";
    return typeId;
}

void
abstract::System::TestPrx::op(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &TestPrx::_iceI_op, context).get();
}

::std::future<void>
abstract::System::TestPrx::opAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestPrx::_iceI_op, context);
}

::std::function<void()>
abstract::System::TestPrx::opAsync(::std::function<void ()> response,
                                   ::std::function<void(::std::exception_ptr)> ex,
                                   ::std::function<void(bool)> sent,
                                   const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &abstract::System::TestPrx::_iceI_op, context);
}

/// \cond INTERNAL
void
abstract::System::TestPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_abstract_System_Test_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
abstract::System::TestPrx::ice_staticId()
{
    static const ::std::string typeId = "::abstract::System::Test";
    return typeId;
}

void
System::TestPrx::op(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &TestPrx::_iceI_op, context).get();
}

::std::future<void>
System::TestPrx::opAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestPrx::_iceI_op, context);
}

::std::function<void()>
System::TestPrx::opAsync(::std::function<void ()> response,
                         ::std::function<void(::std::exception_ptr)> ex,
                         ::std::function<void(bool)> sent,
                         const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &System::TestPrx::_iceI_op, context);
}

/// \cond INTERNAL
void
System::TestPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_System_Test_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
System::TestPrx::ice_staticId()
{
    static const ::std::string typeId = "::System::Test";
    return typeId;
}

abstract::delegate::~delegate()
{
}

const ::std::string&
abstract::delegate::ice_staticId()
{
    static const ::std::string typeId = "::abstract::delegate";
    return typeId;
}

abstract::optionalMembers::~optionalMembers()
{
}

const ::std::string&
abstract::optionalMembers::ice_staticId()
{
    static const ::std::string typeId = "::abstract::optionalMembers";
    return typeId;
}

abstract::fixed::~fixed()
{
}

const ::std::string&
abstract::fixed::ice_staticId()
{
    static const ::std::string typeId = "::abstract::fixed";
    return typeId;
}

abstract::foreach::~foreach()
{
}

const ::std::string&
abstract::foreach::ice_staticId()
{
    static const ::std::string typeId = "::abstract::foreach";
    return typeId;
}

abstract::BaseMethods::~BaseMethods()
{
}

const ::std::string&
abstract::BaseMethods::ice_staticId()
{
    static const ::std::string typeId = "::abstract::BaseMethods";
    return typeId;
}

bool
abstract::_cpp_case::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_abstract_case_ids, iceC_abstract_case_ids + 2, s);
}

::std::vector<::std::string>
abstract::_cpp_case::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_abstract_case_ids[0], &iceC_abstract_case_ids[2]);
}

::std::string
abstract::_cpp_case::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
abstract::_cpp_case::ice_staticId()
{
    static const ::std::string typeId = "::abstract::case";
    return typeId;
}

/// \cond INTERNAL
bool
abstract::_cpp_case::_iceD_catch(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::int32_t iceP_checked;
    istr->readAll(iceP_checked);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](::std::int32_t iceP_continue)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_continue);
        inA->endWriteParams();
        inA->completed();
    };
    this->catchAsync(iceP_checked, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
abstract::_cpp_case::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_abstract_case_ops, iceC_abstract_case_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_abstract_case_ops)
    {
        case 0:
        {
            return _iceD_catch(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
abstract::decimal::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_abstract_decimal_ids, iceC_abstract_decimal_ids + 2, s);
}

::std::vector<::std::string>
abstract::decimal::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_abstract_decimal_ids[0], &iceC_abstract_decimal_ids[2]);
}

::std::string
abstract::decimal::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
abstract::decimal::ice_staticId()
{
    static const ::std::string typeId = "::abstract::decimal";
    return typeId;
}

/// \cond INTERNAL
bool
abstract::decimal::_iceD_default(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_default(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
abstract::decimal::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_abstract_decimal_ops, iceC_abstract_decimal_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_abstract_decimal_ops)
    {
        case 0:
        {
            return _iceD_default(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
abstract::_cpp_explicit::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_abstract_explicit_ids, iceC_abstract_explicit_ids + 4, s);
}

::std::vector<::std::string>
abstract::_cpp_explicit::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_abstract_explicit_ids[0], &iceC_abstract_explicit_ids[4]);
}

::std::string
abstract::_cpp_explicit::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
abstract::_cpp_explicit::ice_staticId()
{
    static const ::std::string typeId = "::abstract::explicit";
    return typeId;
}

/// \cond INTERNAL
bool
abstract::_cpp_explicit::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_abstract_explicit_ops, iceC_abstract_explicit_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_abstract_explicit_ops)
    {
        case 0:
        {
            return _iceD_catch(in, current);
        }
        case 1:
        {
            return _iceD_default(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
abstract::optionalParams::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_abstract_optionalParams_ids, iceC_abstract_optionalParams_ids + 2, s);
}

::std::vector<::std::string>
abstract::optionalParams::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_abstract_optionalParams_ids[0], &iceC_abstract_optionalParams_ids[2]);
}

::std::string
abstract::optionalParams::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
abstract::optionalParams::ice_staticId()
{
    static const ::std::string typeId = "::abstract::optionalParams";
    return typeId;
}

/// \cond INTERNAL
bool
abstract::optionalParams::_iceD_for(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<as> iceP_goto;
    std::optional<::std::optional<explicitPrx>> iceP_if;
    std::optional<_cpp_while> iceP_internal;
    std::optional<::std::string> iceP_namespace;
    istr->readAll({2, 3, 5, 7}, iceP_goto, iceP_if, iceP_internal, iceP_namespace);
    inS.endReadParams();
    std::optional<_cpp_break> ret = this->_cpp_for(iceP_goto, ::std::move(iceP_if), ::std::move(iceP_internal), ::std::move(iceP_namespace), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1}, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
abstract::optionalParams::_iceD_continue(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<as> iceP_goto;
    std::optional<::std::optional<explicitPrx>> iceP_if;
    std::optional<_cpp_while> iceP_internal;
    std::optional<::std::string> iceP_namespace;
    istr->readAll({2, 3, 5, 7}, iceP_goto, iceP_if, iceP_internal, iceP_namespace);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<_cpp_break>& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1}, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->continueAsync(iceP_goto, ::std::move(iceP_if), ::std::move(iceP_internal), ::std::move(iceP_namespace), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
abstract::optionalParams::_iceD_in(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    std::optional<as> iceP_goto;
    std::optional<::std::optional<explicitPrx>> iceP_if;
    std::optional<_cpp_while> iceP_internal;
    std::optional<::std::string> iceP_namespace;
    std::optional<_cpp_break> ret = this->in(iceP_goto, iceP_if, iceP_internal, iceP_namespace, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll({1, 2, 3, 5, 7}, ret, iceP_goto, iceP_if, iceP_internal, iceP_namespace);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
abstract::optionalParams::_iceD_foreach(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const std::optional<_cpp_break>& ret, const std::optional<as>& iceP_goto, const std::optional<::std::optional<explicitPrx>>& iceP_if, const std::optional<_cpp_while>& iceP_internal, const std::optional<::std::string>& iceP_namespace)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 2, 3, 5, 7}, ret, iceP_goto, iceP_if, iceP_internal, iceP_namespace);
        inA->endWriteParams();
        inA->completed();
    };
    this->foreachAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
abstract::optionalParams::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_abstract_optionalParams_ops, iceC_abstract_optionalParams_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_abstract_optionalParams_ops)
    {
        case 0:
        {
            return _iceD_continue(in, current);
        }
        case 1:
        {
            return _iceD_for(in, current);
        }
        case 2:
        {
            return _iceD_foreach(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_in(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
abstract::implicit::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_abstract_implicit_ids, iceC_abstract_implicit_ids + 2, s);
}

::std::vector<::std::string>
abstract::implicit::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_abstract_implicit_ids[0], &iceC_abstract_implicit_ids[2]);
}

::std::string
abstract::implicit::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
abstract::implicit::ice_staticId()
{
    static const ::std::string typeId = "::abstract::implicit";
    return typeId;
}

/// \cond INTERNAL
bool
abstract::implicit::_iceD_in(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    _cpp_break iceP_internal;
    ::std::shared_ptr<delegate> iceP_is;
    ::std::optional<explicitPrx> iceP_lock;
    ::std::optional<casePrx> iceP_namespace;
    ::std::optional<decimalPrx> iceP_new;
    ::std::shared_ptr<delegate> iceP_null;
    ::std::int32_t iceP_override;
    ::std::int32_t iceP_params;
    ::std::int32_t iceP_private;
    istr->readAll(iceP_internal, iceP_is, iceP_lock, iceP_namespace, iceP_new, iceP_null, iceP_override, iceP_params, iceP_private);
    istr->readPendingValues();
    inS.endReadParams();
    as ret = this->in(::std::move(iceP_internal), ::std::move(iceP_is), ::std::move(iceP_lock), ::std::move(iceP_namespace), ::std::move(iceP_new), ::std::move(iceP_null), iceP_override, iceP_params, iceP_private, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
abstract::implicit::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_abstract_implicit_ops, iceC_abstract_implicit_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_abstract_implicit_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_in(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
abstract::System::Test::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_abstract_System_Test_ids, iceC_abstract_System_Test_ids + 2, s);
}

::std::vector<::std::string>
abstract::System::Test::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_abstract_System_Test_ids[0], &iceC_abstract_System_Test_ids[2]);
}

::std::string
abstract::System::Test::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
abstract::System::Test::ice_staticId()
{
    static const ::std::string typeId = "::abstract::System::Test";
    return typeId;
}

/// \cond INTERNAL
bool
abstract::System::Test::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
abstract::System::Test::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_abstract_System_Test_ops, iceC_abstract_System_Test_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_abstract_System_Test_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
System::Test::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_System_Test_ids, iceC_System_Test_ids + 2, s);
}

::std::vector<::std::string>
System::Test::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_System_Test_ids[0], &iceC_System_Test_ids[2]);
}

::std::string
System::Test::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
System::Test::ice_staticId()
{
    static const ::std::string typeId = "::System::Test";
    return typeId;
}

/// \cond INTERNAL
bool
System::Test::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
System::Test::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_System_Test_ops, iceC_System_Test_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_System_Test_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

namespace Ice
{
}
