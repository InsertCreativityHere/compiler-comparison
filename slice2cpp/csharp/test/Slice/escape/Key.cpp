// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Key.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

std::ostream&
cs_abstract::operator<<(std::ostream& os, as value)
{
    switch (value)
    {
        case as::base:
            return os << "base";
        default:
            return os << static_cast<std::int32_t>(value);
    }
}

namespace
{
    const IceInternal::FactoryTableInit iceC_factoryTableInit;
    const IceInternal::DefaultUserExceptionFactoryInit<::cs_abstract::fixed> iceC_cs_abstract_fixed_init("::cs_abstract::fixed");
    const IceInternal::DefaultUserExceptionFactoryInit<::cs_abstract::foreach> iceC_cs_abstract_foreach_init("::cs_abstract::foreach");
    const IceInternal::DefaultValueFactoryInit<::cs_abstract::delegate> iceC_cs_abstract_delegate_init("::cs_abstract::delegate");
    const IceInternal::DefaultValueFactoryInit<::cs_abstract::optionalMembers> iceC_cs_abstract_optionalMembers_init("::cs_abstract::optionalMembers");
}

void
cs_abstract::casePrx::catch(std::int32_t iceP_checked, std::int32_t& iceP_continue, const Ice::Context& context) const
{
    iceP_continue = IceInternal::makePromiseOutgoing<std::int32_t>(true, this, &casePrx::_iceI_catch, iceP_checked, context).get();
}

std::future<std::int32_t>
cs_abstract::casePrx::catchAsync(std::int32_t iceP_checked, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::int32_t>(false, this, &casePrx::_iceI_catch, iceP_checked, context);
}

std::function<void()>
cs_abstract::casePrx::catchAsync(std::int32_t iceP_checked, std::function<void(std::int32_t)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::int32_t>(std::move(response), std::move(exception), std::move(sent), this, &cs_abstract::casePrx::_iceI_catch, iceP_checked, context);
}

void
cs_abstract::casePrx::_iceI_catch(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int32_t>>& outAsync, std::int32_t iceP_checked, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "catch";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_checked);
        },
        nullptr);
}

cs_abstract::casePrx::~casePrx() = default;

const char*
cs_abstract::casePrx::ice_staticId() noexcept
{
    return "::cs_abstract::case";
}

void
cs_abstract::decimalPrx::default(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &decimalPrx::_iceI_default, context).get();
}

std::future<void>
cs_abstract::decimalPrx::defaultAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &decimalPrx::_iceI_default, context);
}

std::function<void()>
cs_abstract::decimalPrx::defaultAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &cs_abstract::decimalPrx::_iceI_default, context);
}

void
cs_abstract::decimalPrx::_iceI_default(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "default";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const foreach&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

cs_abstract::decimalPrx::~decimalPrx() = default;

const char*
cs_abstract::decimalPrx::ice_staticId() noexcept
{
    return "::cs_abstract::decimal";
}

cs_abstract::explicitPrx::~explicitPrx() = default;

const char*
cs_abstract::explicitPrx::ice_staticId() noexcept
{
    return "::cs_abstract::explicit";
}

std::optional<::cs_abstract::break>
cs_abstract::optionalParamsPrx::for(std::optional<as> iceP_goto, const std::optional<explicitPrx>& iceP_if, const std::optional<while>& iceP_internal, std::optional<std::string_view> iceP_context, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<break>>(true, this, &optionalParamsPrx::_iceI_for, iceP_goto, iceP_if, iceP_internal, iceP_context, context).get();
}

std::future<std::optional<::cs_abstract::break>>
cs_abstract::optionalParamsPrx::forAsync(std::optional<as> iceP_goto, const std::optional<explicitPrx>& iceP_if, const std::optional<while>& iceP_internal, std::optional<std::string_view> iceP_context, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<break>>(false, this, &optionalParamsPrx::_iceI_for, iceP_goto, iceP_if, iceP_internal, iceP_context, context);
}

std::function<void()>
cs_abstract::optionalParamsPrx::forAsync(std::optional<as> iceP_goto, const std::optional<explicitPrx>& iceP_if, const std::optional<while>& iceP_internal, std::optional<std::string_view> iceP_context, std::function<void(std::optional<::cs_abstract::break>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<break>>(std::move(response), std::move(exception), std::move(sent), this, &cs_abstract::optionalParamsPrx::_iceI_for, iceP_goto, iceP_if, iceP_internal, iceP_context, context);
}

void
cs_abstract::optionalParamsPrx::_iceI_for(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<break>>>& outAsync, std::optional<as> iceP_goto, const std::optional<explicitPrx>& iceP_if, const std::optional<while>& iceP_internal, std::optional<std::string_view> iceP_context, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "for";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2, 3, 5, 7}, iceP_goto, iceP_if, iceP_internal, iceP_context);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::optional<break> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}

std::optional<::cs_abstract::break>
cs_abstract::optionalParamsPrx::continue(std::optional<as> iceP_goto, const std::optional<explicitPrx>& iceP_if, const std::optional<while>& iceP_internal, std::optional<std::string_view> iceP_context, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<break>>(true, this, &optionalParamsPrx::_iceI_continue, iceP_goto, iceP_if, iceP_internal, iceP_context, context).get();
}

std::future<std::optional<::cs_abstract::break>>
cs_abstract::optionalParamsPrx::continueAsync(std::optional<as> iceP_goto, const std::optional<explicitPrx>& iceP_if, const std::optional<while>& iceP_internal, std::optional<std::string_view> iceP_context, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<break>>(false, this, &optionalParamsPrx::_iceI_continue, iceP_goto, iceP_if, iceP_internal, iceP_context, context);
}

std::function<void()>
cs_abstract::optionalParamsPrx::continueAsync(std::optional<as> iceP_goto, const std::optional<explicitPrx>& iceP_if, const std::optional<while>& iceP_internal, std::optional<std::string_view> iceP_context, std::function<void(std::optional<::cs_abstract::break>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<break>>(std::move(response), std::move(exception), std::move(sent), this, &cs_abstract::optionalParamsPrx::_iceI_continue, iceP_goto, iceP_if, iceP_internal, iceP_context, context);
}

void
cs_abstract::optionalParamsPrx::_iceI_continue(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<break>>>& outAsync, std::optional<as> iceP_goto, const std::optional<explicitPrx>& iceP_if, const std::optional<while>& iceP_internal, std::optional<std::string_view> iceP_context, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "continue";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2, 3, 5, 7}, iceP_goto, iceP_if, iceP_internal, iceP_context);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::optional<break> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}

std::optional<::cs_abstract::break>
cs_abstract::optionalParamsPrx::in(std::optional<as>& iceP_goto, std::optional<explicitPrx>& iceP_if, std::optional<while>& iceP_internal, std::optional<std::string>& iceP_context, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<break>, std::optional<as>, std::optional<explicitPrx>, std::optional<while>, std::optional<std::string>>>(true, this, &optionalParamsPrx::_iceI_in, context).get();
    iceP_goto = std::get<1>(result);
    iceP_if = std::move(std::get<2>(result));
    iceP_internal = std::move(std::get<3>(result));
    iceP_context = std::move(std::get<4>(result));
    return std::get<0>(result);
}

std::future<std::tuple<std::optional<::cs_abstract::break>, std::optional<::cs_abstract::as>, std::optional<::cs_abstract::explicitPrx>, std::optional<::cs_abstract::while>, std::optional<std::string>>>
cs_abstract::optionalParamsPrx::inAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<break>, std::optional<as>, std::optional<explicitPrx>, std::optional<while>, std::optional<std::string>>>(false, this, &optionalParamsPrx::_iceI_in, context);
}

std::function<void()>
cs_abstract::optionalParamsPrx::inAsync(std::function<void(std::optional<::cs_abstract::break>, std::optional<::cs_abstract::as>, std::optional<::cs_abstract::explicitPrx>, std::optional<::cs_abstract::while>, std::optional<std::string>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<break>, std::optional<as>, std::optional<explicitPrx>, std::optional<while>, std::optional<std::string>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<break>, std::optional<as>, std::optional<explicitPrx>, std::optional<while>, std::optional<std::string>>>(std::move(responseCb), std::move(exception), std::move(sent), this, &cs_abstract::optionalParamsPrx::_iceI_in, context);
}

void
cs_abstract::optionalParamsPrx::_iceI_in(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<break>, std::optional<as>, std::optional<explicitPrx>, std::optional<while>, std::optional<std::string>>>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "in";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<break>, std::optional<as>, std::optional<explicitPrx>, std::optional<while>, std::optional<std::string>> v;
            istr->readAll({1, 2, 3, 5, 7}, std::get<0>(v), std::get<1>(v), std::get<2>(v), std::get<3>(v), std::get<4>(v));
            return v;
        });
}

std::optional<::cs_abstract::break>
cs_abstract::optionalParamsPrx::foreach(std::optional<as>& iceP_goto, std::optional<explicitPrx>& iceP_if, std::optional<while>& iceP_internal, std::optional<std::string>& iceP_context, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<break>, std::optional<as>, std::optional<explicitPrx>, std::optional<while>, std::optional<std::string>>>(true, this, &optionalParamsPrx::_iceI_foreach, context).get();
    iceP_goto = std::get<1>(result);
    iceP_if = std::move(std::get<2>(result));
    iceP_internal = std::move(std::get<3>(result));
    iceP_context = std::move(std::get<4>(result));
    return std::get<0>(result);
}

std::future<std::tuple<std::optional<::cs_abstract::break>, std::optional<::cs_abstract::as>, std::optional<::cs_abstract::explicitPrx>, std::optional<::cs_abstract::while>, std::optional<std::string>>>
cs_abstract::optionalParamsPrx::foreachAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<break>, std::optional<as>, std::optional<explicitPrx>, std::optional<while>, std::optional<std::string>>>(false, this, &optionalParamsPrx::_iceI_foreach, context);
}

std::function<void()>
cs_abstract::optionalParamsPrx::foreachAsync(std::function<void(std::optional<::cs_abstract::break>, std::optional<::cs_abstract::as>, std::optional<::cs_abstract::explicitPrx>, std::optional<::cs_abstract::while>, std::optional<std::string>)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<break>, std::optional<as>, std::optional<explicitPrx>, std::optional<while>, std::optional<std::string>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<break>, std::optional<as>, std::optional<explicitPrx>, std::optional<while>, std::optional<std::string>>>(std::move(responseCb), std::move(exception), std::move(sent), this, &cs_abstract::optionalParamsPrx::_iceI_foreach, context);
}

void
cs_abstract::optionalParamsPrx::_iceI_foreach(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<break>, std::optional<as>, std::optional<explicitPrx>, std::optional<while>, std::optional<std::string>>>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "foreach";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<break>, std::optional<as>, std::optional<explicitPrx>, std::optional<while>, std::optional<std::string>> v;
            istr->readAll({1, 2, 3, 5, 7}, std::get<0>(v), std::get<1>(v), std::get<2>(v), std::get<3>(v), std::get<4>(v));
            return v;
        });
}

cs_abstract::optionalParamsPrx::~optionalParamsPrx() = default;

const char*
cs_abstract::optionalParamsPrx::ice_staticId() noexcept
{
    return "::cs_abstract::optionalParams";
}

void
cs_abstract::System::TestPrx::op(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &TestPrx::_iceI_op, context).get();
}

std::future<void>
cs_abstract::System::TestPrx::opAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &TestPrx::_iceI_op, context);
}

std::function<void()>
cs_abstract::System::TestPrx::opAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &cs_abstract::System::TestPrx::_iceI_op, context);
}

void
cs_abstract::System::TestPrx::_iceI_op(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "op";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

cs_abstract::System::TestPrx::~TestPrx() = default;

const char*
cs_abstract::System::TestPrx::ice_staticId() noexcept
{
    return "::cs_abstract::System::Test";
}

void
System::TestPrx::op(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &TestPrx::_iceI_op, context).get();
}

std::future<void>
System::TestPrx::opAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &TestPrx::_iceI_op, context);
}

std::function<void()>
System::TestPrx::opAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &System::TestPrx::_iceI_op, context);
}

void
System::TestPrx::_iceI_op(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "op";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

System::TestPrx::~TestPrx() = default;

const char*
System::TestPrx::ice_staticId() noexcept
{
    return "::System::Test";
}

void
cs_abstract::break::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "readonly = ", this->readonly);
}

std::ostream&
cs_abstract::operator<<(std::ostream& os, const ::cs_abstract::break& value)
{
    os << "cs_abstract::break{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
cs_abstract::fixed::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "for = ", this->for);
}

const char*
cs_abstract::fixed::ice_staticId() noexcept
{
    return "::cs_abstract::fixed";
}

const char*
cs_abstract::fixed::ice_id() const noexcept
{
    return ice_staticId();
}

void
cs_abstract::fixed::ice_throw() const
{
    throw *this;
}

void
cs_abstract::fixed::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->for);
    ostr->endSlice();
}

void
cs_abstract::fixed::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->for);
    istr->endSlice();
}

void
cs_abstract::foreach::ice_printFields(std::ostream& os) const
{
    fixed::ice_printFields(os);
    Ice::print(os << ", goto = ", this->goto);
    Ice::print(os << ", Message = ", this->Message);
}

const char*
cs_abstract::foreach::ice_staticId() noexcept
{
    return "::cs_abstract::foreach";
}

const char*
cs_abstract::foreach::ice_id() const noexcept
{
    return ice_staticId();
}

void
cs_abstract::foreach::ice_throw() const
{
    throw *this;
}

void
cs_abstract::foreach::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->goto, this->Message);
    ostr->endSlice();
    fixed::_writeImpl(ostr);
}

void
cs_abstract::foreach::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->goto, this->Message);
    istr->endSlice();
    fixed::_readImpl(istr);
}

const char*
cs_abstract::delegate::ice_staticId() noexcept
{
    return "::cs_abstract::delegate";
}

const char*
cs_abstract::delegate::ice_id() const noexcept
{
    return ice_staticId();
}

void
cs_abstract::delegate::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "if = ", this->if);
    Ice::print(os << ", else = ", this->else);
}

Ice::ValuePtr
cs_abstract::delegate::_iceCloneImpl() const
{
    return CloneEnabler<delegate>::clone(*this);
}

void
cs_abstract::delegate::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->if, this->else);
    ostr->endSlice();
}

void
cs_abstract::delegate::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->if, this->else);
    istr->endSlice();
}

const char*
cs_abstract::optionalMembers::ice_staticId() noexcept
{
    return "::cs_abstract::optionalMembers";
}

const char*
cs_abstract::optionalMembers::ice_id() const noexcept
{
    return ice_staticId();
}

void
cs_abstract::optionalMembers::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "for = ", this->for);
    Ice::print(os << ", goto = ", this->goto);
    Ice::print(os << ", if = ", this->if);
    Ice::print(os << ", internal = ", this->internal);
    Ice::print(os << ", namespace = ", this->namespace);
}

Ice::ValuePtr
cs_abstract::optionalMembers::_iceCloneImpl() const
{
    return CloneEnabler<optionalMembers>::clone(*this);
}

void
cs_abstract::optionalMembers::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll({1, 2, 3, 5, 7}, this->for, this->goto, this->if, this->internal, this->namespace);
    ostr->endSlice();
}

void
cs_abstract::optionalMembers::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll({1, 2, 3, 5, 7}, this->for, this->goto, this->if, this->internal, this->namespace);
    istr->endSlice();
}

std::vector<std::string>
cs_abstract::case::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::cs_abstract::case"};
    return allTypeIds;
}

std::string
cs_abstract::case::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
cs_abstract::case::ice_staticId() noexcept
{
    return "::cs_abstract::case";
}

/// \cond INTERNAL
void
cs_abstract::case::_iceD_catch(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::int32_t iceP_checked;
    istr->readAll(iceP_checked);
    istr->endEncapsulation();
    auto responseHandler = std::make_shared<IceInternal::AsyncResponseHandler>(std::move(sendResponse), request.current());
    auto responseCb = [responseHandler](std::int32_t iceP_continue)
    {
        responseHandler->sendResponse(
            [&](Ice::OutputStream* ostr)
            {
                ostr->writeAll(iceP_continue);
            });
    };
    try
    {
        this->catchAsync(iceP_checked, std::move(responseCb), [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(std::current_exception());
    }
}
/// \endcond

void
cs_abstract::case::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"catch", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_catch(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
cs_abstract::decimal::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::cs_abstract::decimal"};
    return allTypeIds;
}

std::string
cs_abstract::decimal::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
cs_abstract::decimal::ice_staticId() noexcept
{
    return "::cs_abstract::decimal";
}

/// \cond INTERNAL
void
cs_abstract::decimal::_iceD_default(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->default(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

void
cs_abstract::decimal::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"default", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_default(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
cs_abstract::explicit::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::cs_abstract::case", "::cs_abstract::decimal", "::cs_abstract::explicit"};
    return allTypeIds;
}

std::string
cs_abstract::explicit::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
cs_abstract::explicit::ice_staticId() noexcept
{
    return "::cs_abstract::explicit";
}

void
cs_abstract::explicit::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 6> allOperations{"catch", "default", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_catch(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_default(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
cs_abstract::optionalParams::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::cs_abstract::optionalParams"};
    return allTypeIds;
}

std::string
cs_abstract::optionalParams::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
cs_abstract::optionalParams::ice_staticId() noexcept
{
    return "::cs_abstract::optionalParams";
}

/// \cond INTERNAL
void
cs_abstract::optionalParams::_iceD_for(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<as> iceP_goto;
    std::optional<explicitPrx> iceP_if;
    std::optional<while> iceP_internal;
    std::optional<std::string> iceP_context;
    istr->readAll({2, 3, 5, 7}, iceP_goto, iceP_if, iceP_internal, iceP_context);
    istr->endEncapsulation();
    const std::optional<break> ret = this->for(iceP_goto, std::move(iceP_if), std::move(iceP_internal), std::move(iceP_context), request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1}, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
cs_abstract::optionalParams::_iceD_continue(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<as> iceP_goto;
    std::optional<explicitPrx> iceP_if;
    std::optional<while> iceP_internal;
    std::optional<std::string> iceP_context;
    istr->readAll({2, 3, 5, 7}, iceP_goto, iceP_if, iceP_internal, iceP_context);
    istr->endEncapsulation();
    auto responseHandler = std::make_shared<IceInternal::AsyncResponseHandler>(std::move(sendResponse), request.current());
    auto responseCb = [responseHandler](const std::optional<break>& ret)
    {
        responseHandler->sendResponse(
            [&](Ice::OutputStream* ostr)
            {
                ostr->writeAll({1}, ret);
            });
    };
    try
    {
        this->continueAsync(iceP_goto, std::move(iceP_if), std::move(iceP_internal), std::move(iceP_context), std::move(responseCb), [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(std::current_exception());
    }
}
/// \endcond

/// \cond INTERNAL
void
cs_abstract::optionalParams::_iceD_in(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    std::optional<as> iceP_goto;
    std::optional<explicitPrx> iceP_if;
    std::optional<while> iceP_internal;
    std::optional<std::string> iceP_context;
    const std::optional<break> ret = this->in(iceP_goto, iceP_if, iceP_internal, iceP_context, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2, 3, 5, 7}, ret, iceP_goto, iceP_if, iceP_internal, iceP_context);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
cs_abstract::optionalParams::_iceD_foreach(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    auto responseHandler = std::make_shared<IceInternal::AsyncResponseHandler>(std::move(sendResponse), request.current());
    auto responseCb = [responseHandler](const std::optional<break>& ret, std::optional<as> iceP_goto, const std::optional<explicitPrx>& iceP_if, const std::optional<while>& iceP_internal, std::optional<std::string_view> iceP_context)
    {
        responseHandler->sendResponse(
            [&](Ice::OutputStream* ostr)
            {
                ostr->writeAll({1, 2, 3, 5, 7}, ret, iceP_goto, iceP_if, iceP_internal, iceP_context);
            });
    };
    try
    {
        this->foreachAsync(std::move(responseCb), [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(std::current_exception());
    }
}
/// \endcond

void
cs_abstract::optionalParams::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 8> allOperations{"continue", "for", "foreach", "ice_id", "ice_ids", "ice_isA", "ice_ping", "in"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_continue(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_for(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_foreach(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_in(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
cs_abstract::System::Test::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::cs_abstract::System::Test"};
    return allTypeIds;
}

std::string
cs_abstract::System::Test::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
cs_abstract::System::Test::ice_staticId() noexcept
{
    return "::cs_abstract::System::Test";
}

/// \cond INTERNAL
void
cs_abstract::System::Test::_iceD_op(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->op(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

void
cs_abstract::System::Test::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"ice_id", "ice_ids", "ice_isA", "ice_ping", "op"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_op(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
System::Test::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::System::Test"};
    return allTypeIds;
}

std::string
System::Test::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
System::Test::ice_staticId() noexcept
{
    return "::System::Test";
}

/// \cond INTERNAL
void
System::Test::_iceD_op(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->op(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

void
System::Test::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"ice_id", "ice_ids", "ice_isA", "ice_ping", "op"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation); // NOLINT(modernize-use-ranges)
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_op(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
