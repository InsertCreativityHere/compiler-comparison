//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Key_h__
#define __Key_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace abstract
{

class _cpp_case;
class casePrx;
class decimal;
class decimalPrx;
class delegate;
class _cpp_explicit;
class explicitPrx;
class optionalMembers;
class optionalParams;
class optionalParamsPrx;
class implicit;
class implicitPrx;

namespace System
{

class Test;
class TestPrx;

}

}

namespace System
{

class Test;
class TestPrx;

}

namespace abstract
{

enum class as : unsigned char
{
    base
};

struct _cpp_break
{
    int readonly;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(readonly);
    }
};

using _cpp_while = ::std::map<::std::string, _cpp_break>;

class fixed : public ::Ice::UserExceptionHelper<fixed, ::Ice::UserException>
{
public:

    virtual ~fixed();

    fixed(const fixed&) = default;

    fixed() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    fixed(int _cpp_for) :
        _cpp_for(_cpp_for)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(_cpp_for);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_for;
};

/// \cond INTERNAL
static fixed _iceS_fixed_init;
/// \endcond

class foreach : public ::Ice::UserExceptionHelper<foreach, fixed>
{
public:

    virtual ~foreach();

    foreach(const foreach&) = default;

    foreach() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    foreach(int _cpp_for, int _cpp_goto, int _cpp_if) :
        ::Ice::UserExceptionHelper<foreach, fixed>(_cpp_for),
        _cpp_goto(_cpp_goto),
        _cpp_if(_cpp_if)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(_cpp_for, _cpp_goto, _cpp_if);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_goto;
    int _cpp_if;
};

class BaseMethods : public ::Ice::UserExceptionHelper<BaseMethods, ::Ice::UserException>
{
public:

    virtual ~BaseMethods();

    BaseMethods(const BaseMethods&) = default;

    BaseMethods() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    BaseMethods(int Data, int HelpLink, int InnerException, int Message, int Source, int StackTrace, int TargetSite, int HResult, int Equals, int GetBaseException, int GetHashCode, int GetObjectData, int GetType, int ReferenceEquals, int ToString) :
        Data(Data),
        HelpLink(HelpLink),
        InnerException(InnerException),
        Message(Message),
        Source(Source),
        StackTrace(StackTrace),
        TargetSite(TargetSite),
        HResult(HResult),
        Equals(Equals),
        GetBaseException(GetBaseException),
        GetHashCode(GetHashCode),
        GetObjectData(GetObjectData),
        GetType(GetType),
        ReferenceEquals(ReferenceEquals),
        ToString(ToString)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(Data, HelpLink, InnerException, Message, Source, StackTrace, TargetSite, HResult, Equals, GetBaseException, GetHashCode, GetObjectData, GetType, ReferenceEquals, ToString);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int Data;
    int HelpLink;
    int InnerException;
    int Message;
    int Source;
    int StackTrace;
    int TargetSite;
    int HResult;
    int Equals;
    int GetBaseException;
    int GetHashCode;
    int GetObjectData;
    int GetType;
    int ReferenceEquals;
    int ToString;
};

constexpr int _cpp_protected = 0;

constexpr int _cpp_public = 0;

namespace System
{

}

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace System
{

}

namespace abstract
{

class _cpp_case : public virtual ::Ice::Object
{
public:

    using ProxyType = casePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void catchAsync(int checked, ::std::function<void(int _cpp_continue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_catch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class decimal : public virtual ::Ice::Object
{
public:

    using ProxyType = decimalPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_default(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_default(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class _cpp_explicit : public virtual decimal,
                      public virtual _cpp_case
{
public:

    using ProxyType = explicitPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class optionalParams : public virtual ::Ice::Object
{
public:

    using ProxyType = optionalParamsPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual std::optional<_cpp_break> _cpp_for(std::optional<as> _cpp_goto, std::optional<::std::shared_ptr<explicitPrx>> _cpp_if, std::optional<_cpp_while> internal, std::optional<::std::string> _cpp_namespace, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_for(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void continueAsync(std::optional<as> _cpp_goto, std::optional<::std::shared_ptr<explicitPrx>> _cpp_if, std::optional<_cpp_while> internal, std::optional<::std::string> _cpp_namespace, ::std::function<void(const std::optional<_cpp_break>& returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_continue(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to in.
     */
    struct InResult
    {
        std::optional<_cpp_break> returnValue;
        std::optional<as> _cpp_goto;
        std::optional<::std::shared_ptr<explicitPrx>> _cpp_if;
        std::optional<_cpp_while> internal;
        std::optional<::std::string> _cpp_namespace;
    };

    virtual std::optional<_cpp_break> in(std::optional<as>& _cpp_goto, std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, std::optional<_cpp_while>& internal, std::optional<::std::string>& _cpp_namespace, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_in(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to foreach.
     */
    struct ForeachResult
    {
        std::optional<_cpp_break> returnValue;
        std::optional<as> _cpp_goto;
        std::optional<::std::shared_ptr<explicitPrx>> _cpp_if;
        std::optional<_cpp_while> internal;
        std::optional<::std::string> _cpp_namespace;
    };

    virtual void foreachAsync(::std::function<void(const std::optional<_cpp_break>& returnValue, const std::optional<as>& _cpp_goto, const std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_foreach(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class implicit : public virtual ::Ice::Object
{
public:

    using ProxyType = implicitPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual as in(_cpp_break internal, ::std::shared_ptr<delegate> is, ::std::shared_ptr<explicitPrx> lock, ::std::shared_ptr<casePrx> _cpp_namespace, ::std::shared_ptr<decimalPrx> _cpp_new, ::std::shared_ptr<delegate> null, int override, int params, int _cpp_private, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_in(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

namespace System
{

class Test : public virtual ::Ice::Object
{
public:

    using ProxyType = TestPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void op(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

}

namespace System
{

class Test : public virtual ::Ice::Object
{
public:

    using ProxyType = TestPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void op(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace abstract
{

class delegate : public ::Ice::ValueHelper<delegate, ::Ice::Value>
{
public:

    virtual ~delegate();

    delegate() = default;

    delegate(const delegate&) = default;
    delegate(delegate&&) = default;
    delegate& operator=(const delegate&) = default;
    delegate& operator=(delegate&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    delegate(int _cpp_if, const ::std::shared_ptr<::abstract::casePrx>& _cpp_else, int event) :
        _cpp_if(_cpp_if),
        _cpp_else(_cpp_else),
        event(event)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const ::std::shared_ptr<::abstract::casePrx>&, const int&> ice_tuple() const
    {
        return std::tie(_cpp_if, _cpp_else, event);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_if;
    ::std::shared_ptr<::abstract::casePrx> _cpp_else;
    int event;
};

/// \cond INTERNAL
static delegate _iceS_delegate_init;
/// \endcond

class optionalMembers : public ::Ice::ValueHelper<optionalMembers, ::Ice::Value>
{
public:

    virtual ~optionalMembers();

    optionalMembers() = default;

    optionalMembers(const optionalMembers&) = default;
    optionalMembers(optionalMembers&&) = default;
    optionalMembers& operator=(const optionalMembers&) = default;
    optionalMembers& operator=(optionalMembers&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    optionalMembers(const std::optional<::abstract::_cpp_break>& _cpp_for, const std::optional<::abstract::as>& _cpp_goto, const std::optional<::std::shared_ptr<::abstract::explicitPrx>>& _cpp_if, const std::optional<::abstract::_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace) :
        _cpp_for(_cpp_for),
        _cpp_goto(_cpp_goto),
        _cpp_if(_cpp_if),
        internal(internal),
        _cpp_namespace(_cpp_namespace)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional<::abstract::_cpp_break>&, const std::optional<::abstract::as>&, const std::optional<::std::shared_ptr<::abstract::explicitPrx>>&, const std::optional<::abstract::_cpp_while>&, const std::optional<::std::string>&> ice_tuple() const
    {
        return std::tie(_cpp_for, _cpp_goto, _cpp_if, internal, _cpp_namespace);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional<::abstract::_cpp_break> _cpp_for;
    std::optional<::abstract::as> _cpp_goto;
    std::optional<::std::shared_ptr<::abstract::explicitPrx>> _cpp_if;
    std::optional<::abstract::_cpp_while> internal;
    std::optional<::std::string> _cpp_namespace;
};

}

namespace abstract
{

class casePrx : public virtual ::Ice::Proxy<casePrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_catch(int checked, int& _cpp_continue, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _cpp_continue = _makePromiseOutgoing<int>(true, this, &casePrx::_iceI_catch, checked, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto catchAsync(int checked, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &casePrx::_iceI_catch, checked, context);
    }

    ::std::function<void()>
    catchAsync(int checked,
               ::std::function<void(int)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &abstract::casePrx::_iceI_catch, checked, context);
    }

    /// \cond INTERNAL
    void _iceI_catch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    casePrx() = default;
    friend ::std::shared_ptr<casePrx> IceInternal::createProxy<casePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class decimalPrx : public virtual ::Ice::Proxy<decimalPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_default(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &decimalPrx::_iceI_default, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto defaultAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &decimalPrx::_iceI_default, context);
    }

    ::std::function<void()>
    defaultAsync(::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &abstract::decimalPrx::_iceI_default, context);
    }

    /// \cond INTERNAL
    void _iceI_default(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    decimalPrx() = default;
    friend ::std::shared_ptr<decimalPrx> IceInternal::createProxy<decimalPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class explicitPrx : public virtual ::Ice::Proxy<explicitPrx, decimalPrx, casePrx>
{
public:

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    explicitPrx() = default;
    friend ::std::shared_ptr<explicitPrx> IceInternal::createProxy<explicitPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class optionalParamsPrx : public virtual ::Ice::Proxy<optionalParamsPrx, ::Ice::ObjectPrx>
{
public:

    std::optional<_cpp_break> _cpp_for(const std::optional<as>& _cpp_goto, const std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<std::optional<::abstract::_cpp_break>>(true, this, &optionalParamsPrx::_iceI_for, _cpp_goto, _cpp_if, internal, _cpp_namespace, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto forAsync(const std::optional<as>& _cpp_goto, const std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<std::optional<::abstract::_cpp_break>>>().get_future())
    {
        return _makePromiseOutgoing<std::optional<::abstract::_cpp_break>, P>(false, this, &optionalParamsPrx::_iceI_for, _cpp_goto, _cpp_if, internal, _cpp_namespace, context);
    }

    ::std::function<void()>
    forAsync(const std::optional<as>& _cpp_goto, const std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace,
             ::std::function<void(std::optional<::abstract::_cpp_break>)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<std::optional<::abstract::_cpp_break>>(std::move(response), std::move(ex), std::move(sent), this, &abstract::optionalParamsPrx::_iceI_for, _cpp_goto, _cpp_if, internal, _cpp_namespace, context);
    }

    /// \cond INTERNAL
    void _iceI_for(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::abstract::_cpp_break>>>&, const std::optional<as>&, const std::optional<::std::shared_ptr<explicitPrx>>&, const std::optional<_cpp_while>&, const std::optional<::std::string>&, const ::Ice::Context&);
    /// \endcond

    std::optional<_cpp_break> _cpp_continue(const std::optional<as>& _cpp_goto, const std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<std::optional<::abstract::_cpp_break>>(true, this, &optionalParamsPrx::_iceI_continue, _cpp_goto, _cpp_if, internal, _cpp_namespace, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto continueAsync(const std::optional<as>& _cpp_goto, const std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<std::optional<::abstract::_cpp_break>>>().get_future())
    {
        return _makePromiseOutgoing<std::optional<::abstract::_cpp_break>, P>(false, this, &optionalParamsPrx::_iceI_continue, _cpp_goto, _cpp_if, internal, _cpp_namespace, context);
    }

    ::std::function<void()>
    continueAsync(const std::optional<as>& _cpp_goto, const std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace,
                  ::std::function<void(std::optional<::abstract::_cpp_break>)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<std::optional<::abstract::_cpp_break>>(std::move(response), std::move(ex), std::move(sent), this, &abstract::optionalParamsPrx::_iceI_continue, _cpp_goto, _cpp_if, internal, _cpp_namespace, context);
    }

    /// \cond INTERNAL
    void _iceI_continue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::abstract::_cpp_break>>>&, const std::optional<as>&, const std::optional<::std::shared_ptr<explicitPrx>>&, const std::optional<_cpp_while>&, const std::optional<::std::string>&, const ::Ice::Context&);
    /// \endcond

    std::optional<_cpp_break> in(std::optional<as>& _cpp_goto, std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, std::optional<_cpp_while>& internal, std::optional<::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<optionalParams::InResult>(true, this, &optionalParamsPrx::_iceI_in, context).get();
        _cpp_goto = _result._cpp_goto;
        _cpp_if = ::std::move(_result._cpp_if);
        internal = ::std::move(_result.internal);
        _cpp_namespace = ::std::move(_result._cpp_namespace);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto inAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<optionalParams::InResult>>().get_future())
    {
        return _makePromiseOutgoing<optionalParams::InResult, P>(false, this, &optionalParamsPrx::_iceI_in, context);
    }

    ::std::function<void()>
    inAsync(::std::function<void(std::optional<::abstract::_cpp_break>, std::optional<::abstract::as>, std::optional<::std::shared_ptr<::abstract::explicitPrx>>, std::optional<::abstract::_cpp_while>, std::optional<::std::string>)> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](optionalParams::InResult&& _result)
        {
            response(::std::move(_result.returnValue), _result._cpp_goto, ::std::move(_result._cpp_if), ::std::move(_result.internal), ::std::move(_result._cpp_namespace));
        };
        return _makeLambdaOutgoing<optionalParams::InResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &abstract::optionalParamsPrx::_iceI_in, context);
    }

    /// \cond INTERNAL
    void _iceI_in(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<optionalParams::InResult>>&, const ::Ice::Context&);
    /// \endcond

    std::optional<_cpp_break> foreach(std::optional<as>& _cpp_goto, std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, std::optional<_cpp_while>& internal, std::optional<::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<optionalParams::ForeachResult>(true, this, &optionalParamsPrx::_iceI_foreach, context).get();
        _cpp_goto = _result._cpp_goto;
        _cpp_if = ::std::move(_result._cpp_if);
        internal = ::std::move(_result.internal);
        _cpp_namespace = ::std::move(_result._cpp_namespace);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto foreachAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<optionalParams::ForeachResult>>().get_future())
    {
        return _makePromiseOutgoing<optionalParams::ForeachResult, P>(false, this, &optionalParamsPrx::_iceI_foreach, context);
    }

    ::std::function<void()>
    foreachAsync(::std::function<void(std::optional<::abstract::_cpp_break>, std::optional<::abstract::as>, std::optional<::std::shared_ptr<::abstract::explicitPrx>>, std::optional<::abstract::_cpp_while>, std::optional<::std::string>)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](optionalParams::ForeachResult&& _result)
        {
            response(::std::move(_result.returnValue), _result._cpp_goto, ::std::move(_result._cpp_if), ::std::move(_result.internal), ::std::move(_result._cpp_namespace));
        };
        return _makeLambdaOutgoing<optionalParams::ForeachResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &abstract::optionalParamsPrx::_iceI_foreach, context);
    }

    /// \cond INTERNAL
    void _iceI_foreach(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<optionalParams::ForeachResult>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    optionalParamsPrx() = default;
    friend ::std::shared_ptr<optionalParamsPrx> IceInternal::createProxy<optionalParamsPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class implicitPrx : public virtual ::Ice::Proxy<implicitPrx, ::Ice::ObjectPrx>
{
public:

    as in(const _cpp_break& internal, const ::std::shared_ptr<delegate>& is, const ::std::shared_ptr<explicitPrx>& lock, const ::std::shared_ptr<casePrx>& _cpp_namespace, const ::std::shared_ptr<decimalPrx>& _cpp_new, const ::std::shared_ptr<delegate>& null, int override, int params, int _cpp_private, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::abstract::as>(true, this, &implicitPrx::_iceI_in, internal, is, lock, _cpp_namespace, _cpp_new, null, override, params, _cpp_private, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto inAsync(const _cpp_break& internal, const ::std::shared_ptr<delegate>& is, const ::std::shared_ptr<explicitPrx>& lock, const ::std::shared_ptr<casePrx>& _cpp_namespace, const ::std::shared_ptr<decimalPrx>& _cpp_new, const ::std::shared_ptr<delegate>& null, int override, int params, int _cpp_private, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::abstract::as>>().get_future())
    {
        return _makePromiseOutgoing<::abstract::as, P>(false, this, &implicitPrx::_iceI_in, internal, is, lock, _cpp_namespace, _cpp_new, null, override, params, _cpp_private, context);
    }

    ::std::function<void()>
    inAsync(const _cpp_break& internal, const ::std::shared_ptr<delegate>& is, const ::std::shared_ptr<explicitPrx>& lock, const ::std::shared_ptr<casePrx>& _cpp_namespace, const ::std::shared_ptr<decimalPrx>& _cpp_new, const ::std::shared_ptr<delegate>& null, int override, int params, int _cpp_private,
            ::std::function<void(::abstract::as)> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::abstract::as>(std::move(response), std::move(ex), std::move(sent), this, &abstract::implicitPrx::_iceI_in, internal, is, lock, _cpp_namespace, _cpp_new, null, override, params, _cpp_private, context);
    }

    /// \cond INTERNAL
    void _iceI_in(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::abstract::as>>&, const _cpp_break&, const ::std::shared_ptr<delegate>&, const ::std::shared_ptr<explicitPrx>&, const ::std::shared_ptr<casePrx>&, const ::std::shared_ptr<decimalPrx>&, const ::std::shared_ptr<delegate>&, int, int, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    implicitPrx() = default;
    friend ::std::shared_ptr<implicitPrx> IceInternal::createProxy<implicitPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

namespace System
{

class TestPrx : public virtual ::Ice::Proxy<TestPrx, ::Ice::ObjectPrx>
{
public:

    void op(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TestPrx::_iceI_op, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TestPrx::_iceI_op, context);
    }

    ::std::function<void()>
    opAsync(::std::function<void()> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &abstract::System::TestPrx::_iceI_op, context);
    }

    /// \cond INTERNAL
    void _iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    TestPrx() = default;
    friend ::std::shared_ptr<TestPrx> IceInternal::createProxy<TestPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

}

namespace System
{

class TestPrx : public virtual ::Ice::Proxy<TestPrx, ::Ice::ObjectPrx>
{
public:

    void op(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TestPrx::_iceI_op, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TestPrx::_iceI_op, context);
    }

    ::std::function<void()>
    opAsync(::std::function<void()> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &System::TestPrx::_iceI_op, context);
    }

    /// \cond INTERNAL
    void _iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    TestPrx() = default;
    friend ::std::shared_ptr<TestPrx> IceInternal::createProxy<TestPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::abstract::as>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::abstract::_cpp_break>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::abstract::_cpp_break, S>
{
    static void read(S* istr, ::abstract::_cpp_break& v)
    {
        istr->readAll(v.readonly);
    }
};

template<typename S>
struct StreamReader<::abstract::delegate, S>
{
    static void read(S* istr, ::abstract::delegate& v)
    {
        istr->readAll(v._cpp_if, v._cpp_else, v.event);
    }
};

template<typename S>
struct StreamWriter<::abstract::optionalMembers, S>
{
    static void write(S* ostr, const ::abstract::optionalMembers& v)
    {
        ostr->writeAll({1, 2, 3, 5, 7}, v._cpp_for, v._cpp_goto, v._cpp_if, v.internal, v._cpp_namespace);
    }
};

template<typename S>
struct StreamReader<::abstract::optionalMembers, S>
{
    static void read(S* istr, ::abstract::optionalMembers& v)
    {
        istr->readAll({1, 2, 3, 5, 7}, v._cpp_for, v._cpp_goto, v._cpp_if, v.internal, v._cpp_namespace);
    }
};

template<typename S>
struct StreamReader<::abstract::fixed, S>
{
    static void read(S* istr, ::abstract::fixed& v)
    {
        istr->readAll(v._cpp_for);
    }
};

template<typename S>
struct StreamWriter<::abstract::foreach, S>
{
    static void write(S* ostr, const ::abstract::foreach& v)
    {
        ostr->writeAll(v._cpp_goto, v._cpp_if);
    }
};

template<typename S>
struct StreamReader<::abstract::foreach, S>
{
    static void read(S* istr, ::abstract::foreach& v)
    {
        istr->readAll(v._cpp_goto, v._cpp_if);
    }
};

template<typename S>
struct StreamReader<::abstract::BaseMethods, S>
{
    static void read(S* istr, ::abstract::BaseMethods& v)
    {
        istr->readAll(v.Data, v.HelpLink, v.InnerException, v.Message, v.Source, v.StackTrace, v.TargetSite, v.HResult, v.Equals, v.GetBaseException, v.GetHashCode, v.GetObjectData, v.GetType, v.ReferenceEquals, v.ToString);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace abstract
{

using casePtr = ::std::shared_ptr<_cpp_case>;
using casePrxPtr = ::std::shared_ptr<casePrx>;

using decimalPtr = ::std::shared_ptr<decimal>;
using decimalPrxPtr = ::std::shared_ptr<decimalPrx>;

using delegatePtr = ::std::shared_ptr<delegate>;

using explicitPtr = ::std::shared_ptr<_cpp_explicit>;
using explicitPrxPtr = ::std::shared_ptr<explicitPrx>;

using optionalMembersPtr = ::std::shared_ptr<optionalMembers>;

using optionalParamsPtr = ::std::shared_ptr<optionalParams>;
using optionalParamsPrxPtr = ::std::shared_ptr<optionalParamsPrx>;

using implicitPtr = ::std::shared_ptr<implicit>;
using implicitPrxPtr = ::std::shared_ptr<implicitPrx>;

/// \cond INTERNAL
namespace System
{

using TestPtr = ::std::shared_ptr<Test>;
using TestPrxPtr = ::std::shared_ptr<TestPrx>;

}
/// \endcond

}
/// \endcond

/// \cond INTERNAL
namespace System
{

using TestPtr = ::std::shared_ptr<Test>;
using TestPrxPtr = ::std::shared_ptr<TestPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace abstract
{

class _cpp_case;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_case>&);
::IceProxy::Ice::Object* upCast(_cpp_case*);
/// \endcond

class decimal;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< decimal>&);
::IceProxy::Ice::Object* upCast(decimal*);
/// \endcond

class _cpp_explicit;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_explicit>&);
::IceProxy::Ice::Object* upCast(_cpp_explicit*);
/// \endcond

class optionalParams;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< optionalParams>&);
::IceProxy::Ice::Object* upCast(optionalParams*);
/// \endcond

class implicit;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< implicit>&);
::IceProxy::Ice::Object* upCast(implicit*);
/// \endcond

namespace System
{

class Test;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Test>&);
::IceProxy::Ice::Object* upCast(Test*);
/// \endcond

}

}

namespace System
{

class Test;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Test>&);
::IceProxy::Ice::Object* upCast(Test*);
/// \endcond

}

}

namespace abstract
{
typedef ::IceInternal::ProxyHandle< ::IceProxy::abstract::_cpp_case> casePrx;
typedef casePrx casePrxPtr;

class _cpp_case;
typedef ::IceInternal::Handle< _cpp_case> casePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::abstract::decimal> decimalPrx;
typedef decimalPrx decimalPrxPtr;

class decimal;
typedef ::IceInternal::Handle< decimal> decimalPtr;

class delegate;
using delegatePtr = ::Ice::SharedPtr<delegate>;
/// \cond INTERNAL
void _icePatchValuePtr(delegatePtr&, const ::Ice::ValuePtr&);
/// \endcond
typedef ::IceInternal::ProxyHandle< ::IceProxy::abstract::_cpp_explicit> explicitPrx;
typedef explicitPrx explicitPrxPtr;

class _cpp_explicit;
typedef ::IceInternal::Handle< _cpp_explicit> explicitPtr;

class optionalMembers;
using optionalMembersPtr = ::Ice::SharedPtr<optionalMembers>;
/// \cond INTERNAL
void _icePatchValuePtr(optionalMembersPtr&, const ::Ice::ValuePtr&);
/// \endcond
typedef ::IceInternal::ProxyHandle< ::IceProxy::abstract::optionalParams> optionalParamsPrx;
typedef optionalParamsPrx optionalParamsPrxPtr;

class optionalParams;
typedef ::IceInternal::Handle< optionalParams> optionalParamsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::abstract::implicit> implicitPrx;
typedef implicitPrx implicitPrxPtr;

class implicit;
typedef ::IceInternal::Handle< implicit> implicitPtr;

namespace System
{
typedef ::IceInternal::ProxyHandle< ::IceProxy::abstract::System::Test> TestPrx;
typedef TestPrx TestPrxPtr;

class Test;
typedef ::IceInternal::Handle< Test> TestPtr;

}

}

namespace System
{
typedef ::IceInternal::ProxyHandle< ::IceProxy::System::Test> TestPrx;
typedef TestPrx TestPrxPtr;

class Test;
typedef ::IceInternal::Handle< Test> TestPtr;

}

namespace abstract
{

enum as
{
    base
};

struct _cpp_break
{
    ::Ice::Int readonly;

    bool operator==(const _cpp_break& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(readonly != rhs_.readonly)
        {
            return false;
        }
        return true;
    }

    bool operator<(const _cpp_break& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(readonly < rhs_.readonly)
        {
            return true;
        }
        else if(rhs_.readonly < readonly)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const _cpp_break& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const _cpp_break& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const _cpp_break& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const _cpp_break& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::map< ::std::string, _cpp_break> _cpp_while;

class fixed : public ::Ice::UserException
{
public:

    fixed() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit fixed(::Ice::Int _cpp_for);
    fixed(const fixed&) = default;
    virtual ~fixed();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual fixed* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int _cpp_for;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static fixed _iceS_fixed_init;
/// \endcond

class foreach : public fixed
{
public:

    foreach() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    foreach(::Ice::Int _cpp_for, ::Ice::Int _cpp_goto, ::Ice::Int _cpp_if);
    foreach(const foreach&) = default;
    virtual ~foreach();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual foreach* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int _cpp_goto;
    ::Ice::Int _cpp_if;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class BaseMethods : public ::Ice::UserException
{
public:

    BaseMethods() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    BaseMethods(::Ice::Int Data, ::Ice::Int HelpLink, ::Ice::Int InnerException, ::Ice::Int Message, ::Ice::Int Source, ::Ice::Int StackTrace, ::Ice::Int TargetSite, ::Ice::Int HResult, ::Ice::Int Equals, ::Ice::Int GetBaseException, ::Ice::Int GetHashCode, ::Ice::Int GetObjectData, ::Ice::Int GetType, ::Ice::Int ReferenceEquals, ::Ice::Int ToString);
    BaseMethods(const BaseMethods&) = default;
    virtual ~BaseMethods();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual BaseMethods* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int Data;
    ::Ice::Int HelpLink;
    ::Ice::Int InnerException;
    ::Ice::Int Message;
    ::Ice::Int Source;
    ::Ice::Int StackTrace;
    ::Ice::Int TargetSite;
    ::Ice::Int HResult;
    ::Ice::Int Equals;
    ::Ice::Int GetBaseException;
    ::Ice::Int GetHashCode;
    ::Ice::Int GetObjectData;
    ::Ice::Int GetType;
    ::Ice::Int ReferenceEquals;
    ::Ice::Int ToString;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

const ::Ice::Int _cpp_protected = 0;

const ::Ice::Int _cpp_public = 0;

namespace System
{

}

}

namespace System
{

}

namespace abstract
{

/**
 * AMD callback class for abstract::_cpp_case::_cpp_catch_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_case_catch : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_case_catch();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(::Ice::Int _cpp_continue) = 0;
};

typedef ::IceUtil::Handle< ::abstract::AMD_case_catch> AMD_case_catchPtr;

/**
 * AMD callback class for abstract::optionalParams::_cpp_continue_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_optionalParams_continue : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_optionalParams_continue();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(const std::optional<_cpp_break>& result) = 0;
};

typedef ::IceUtil::Handle< ::abstract::AMD_optionalParams_continue> AMD_optionalParams_continuePtr;

/**
 * AMD callback class for abstract::optionalParams::foreach_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_optionalParams_foreach : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_optionalParams_foreach();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(const std::optional<_cpp_break>& result, const std::optional<as>& _cpp_goto, const std::optional<explicitPrx>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace) = 0;
};

typedef ::IceUtil::Handle< ::abstract::AMD_optionalParams_foreach> AMD_optionalParams_foreachPtr;

}

/// \cond INTERNAL
namespace IceAsync
{

namespace abstract
{

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_case_catch : public ::abstract::AMD_case_catch, public ::IceInternal::IncomingAsync
{
public:

    AMD_case_catch(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_optionalParams_continue : public ::abstract::AMD_optionalParams_continue, public ::IceInternal::IncomingAsync
{
public:

    AMD_optionalParams_continue(::IceInternal::Incoming&);

    virtual void ice_response(const std::optional< ::abstract::_cpp_break>&);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_optionalParams_foreach : public ::abstract::AMD_optionalParams_foreach, public ::IceInternal::IncomingAsync
{
public:

    AMD_optionalParams_foreach(::IceInternal::Incoming&);

    virtual void ice_response(const std::optional< ::abstract::_cpp_break>&, const std::optional< ::abstract::as>&, const std::optional< ::abstract::explicitPrx>&, const std::optional< ::abstract::_cpp_while>&, const std::optional< ::std::string>&);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

}

}
/// \endcond

namespace abstract
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::abstract::_cpp_case::begin_catch.
 * Create a wrapper instance by calling ::abstract::newCallback_case_catch.
 */
class Callback_case_catch_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_case_catch_Base> Callback_case_catchPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::abstract::decimal::begin_default.
 * Create a wrapper instance by calling ::abstract::newCallback_decimal_default.
 */
class Callback_decimal_default_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_decimal_default_Base> Callback_decimal_defaultPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::abstract::optionalParams::begin_for.
 * Create a wrapper instance by calling ::abstract::newCallback_optionalParams_for.
 */
class Callback_optionalParams_for_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_optionalParams_for_Base> Callback_optionalParams_forPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::abstract::optionalParams::begin_continue.
 * Create a wrapper instance by calling ::abstract::newCallback_optionalParams_continue.
 */
class Callback_optionalParams_continue_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_optionalParams_continue_Base> Callback_optionalParams_continuePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::abstract::optionalParams::begin_in.
 * Create a wrapper instance by calling ::abstract::newCallback_optionalParams_in.
 */
class Callback_optionalParams_in_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_optionalParams_in_Base> Callback_optionalParams_inPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::abstract::optionalParams::begin_foreach.
 * Create a wrapper instance by calling ::abstract::newCallback_optionalParams_foreach.
 */
class Callback_optionalParams_foreach_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_optionalParams_foreach_Base> Callback_optionalParams_foreachPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::abstract::implicit::begin_in.
 * Create a wrapper instance by calling ::abstract::newCallback_implicit_in.
 */
class Callback_implicit_in_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_implicit_in_Base> Callback_implicit_inPtr;

namespace System
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::abstract::System::Test::begin_op.
 * Create a wrapper instance by calling ::abstract::System::newCallback_Test_op.
 */
class Callback_Test_op_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Test_op_Base> Callback_Test_opPtr;

}

}

namespace System
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::System::Test::begin_op.
 * Create a wrapper instance by calling ::System::newCallback_Test_op.
 */
class Callback_Test_op_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Test_op_Base> Callback_Test_opPtr;

}

namespace IceProxy
{

namespace abstract
{

class _cpp_case : public virtual ::Ice::Proxy<_cpp_case, ::IceProxy::Ice::Object>
{
public:

    void _cpp_catch(::Ice::Int checked, ::Ice::Int& _cpp_continue, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_catch(_cpp_continue, _iceI_begin_catch(checked, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_catch(::Ice::Int checked, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_catch(checked, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_catch(::Ice::Int checked, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_catch(checked, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_catch(::Ice::Int checked, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_catch(checked, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_catch(::Ice::Int checked, const ::abstract::Callback_case_catchPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_catch(checked, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_catch(::Ice::Int checked, const ::Ice::Context& context, const ::abstract::Callback_case_catchPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_catch(checked, context, cb, cookie);
    }

    void end_catch(::Ice::Int& _cpp_continue, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_catch(::Ice::Int& iceP_continue, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_catch(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class decimal : public virtual ::Ice::Proxy<decimal, ::IceProxy::Ice::Object>
{
public:

    void _cpp_default(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_default(_iceI_begin_default(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_default(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_default(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_default(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_default(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_default(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_default(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_default(const ::abstract::Callback_decimal_defaultPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_default(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_default(const ::Ice::Context& context, const ::abstract::Callback_decimal_defaultPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_default(context, cb, cookie);
    }

    void end_default(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_default(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

/// \cond INTERNAL
class _explicitBase : public virtual ::IceProxy::abstract::decimal, 
                      public virtual ::IceProxy::abstract::_cpp_case
{
public:

    virtual ~_explicitBase();

protected:

    virtual Object* _newInstance() const = 0;
};
/// \endcond

class _cpp_explicit : public virtual ::Ice::Proxy<_cpp_explicit, _explicitBase>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class optionalParams : public virtual ::Ice::Proxy<optionalParams, ::IceProxy::Ice::Object>
{
public:

    std::optional< ::abstract::_cpp_break> _cpp_for(const std::optional< ::abstract::as>& _cpp_goto, const std::optional< ::abstract::explicitPrx>& _cpp_if, const std::optional< ::abstract::_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_for(_iceI_begin_for(_cpp_goto, _cpp_if, internal, _cpp_namespace, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_for(const std::optional< ::abstract::as>& _cpp_goto, const std::optional< ::abstract::explicitPrx>& _cpp_if, const std::optional< ::abstract::_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_for(_cpp_goto, _cpp_if, internal, _cpp_namespace, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_for(const std::optional< ::abstract::as>& _cpp_goto, const std::optional< ::abstract::explicitPrx>& _cpp_if, const std::optional< ::abstract::_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_for(_cpp_goto, _cpp_if, internal, _cpp_namespace, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_for(const std::optional< ::abstract::as>& _cpp_goto, const std::optional< ::abstract::explicitPrx>& _cpp_if, const std::optional< ::abstract::_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_for(_cpp_goto, _cpp_if, internal, _cpp_namespace, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_for(const std::optional< ::abstract::as>& _cpp_goto, const std::optional< ::abstract::explicitPrx>& _cpp_if, const std::optional< ::abstract::_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace, const ::abstract::Callback_optionalParams_forPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_for(_cpp_goto, _cpp_if, internal, _cpp_namespace, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_for(const std::optional< ::abstract::as>& _cpp_goto, const std::optional< ::abstract::explicitPrx>& _cpp_if, const std::optional< ::abstract::_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace, const ::Ice::Context& context, const ::abstract::Callback_optionalParams_forPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_for(_cpp_goto, _cpp_if, internal, _cpp_namespace, context, cb, cookie);
    }

    std::optional< ::abstract::_cpp_break> end_for(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_for(const std::optional< ::abstract::as>&, const std::optional< ::abstract::explicitPrx>&, const std::optional< ::abstract::_cpp_while>&, const std::optional< ::std::string>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::abstract::_cpp_break> _cpp_continue(const std::optional< ::abstract::as>& _cpp_goto, const std::optional< ::abstract::explicitPrx>& _cpp_if, const std::optional< ::abstract::_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_continue(_iceI_begin_continue(_cpp_goto, _cpp_if, internal, _cpp_namespace, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_continue(const std::optional< ::abstract::as>& _cpp_goto, const std::optional< ::abstract::explicitPrx>& _cpp_if, const std::optional< ::abstract::_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_continue(_cpp_goto, _cpp_if, internal, _cpp_namespace, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_continue(const std::optional< ::abstract::as>& _cpp_goto, const std::optional< ::abstract::explicitPrx>& _cpp_if, const std::optional< ::abstract::_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_continue(_cpp_goto, _cpp_if, internal, _cpp_namespace, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_continue(const std::optional< ::abstract::as>& _cpp_goto, const std::optional< ::abstract::explicitPrx>& _cpp_if, const std::optional< ::abstract::_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_continue(_cpp_goto, _cpp_if, internal, _cpp_namespace, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_continue(const std::optional< ::abstract::as>& _cpp_goto, const std::optional< ::abstract::explicitPrx>& _cpp_if, const std::optional< ::abstract::_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace, const ::abstract::Callback_optionalParams_continuePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_continue(_cpp_goto, _cpp_if, internal, _cpp_namespace, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_continue(const std::optional< ::abstract::as>& _cpp_goto, const std::optional< ::abstract::explicitPrx>& _cpp_if, const std::optional< ::abstract::_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace, const ::Ice::Context& context, const ::abstract::Callback_optionalParams_continuePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_continue(_cpp_goto, _cpp_if, internal, _cpp_namespace, context, cb, cookie);
    }

    std::optional< ::abstract::_cpp_break> end_continue(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_continue(const std::optional< ::abstract::as>&, const std::optional< ::abstract::explicitPrx>&, const std::optional< ::abstract::_cpp_while>&, const std::optional< ::std::string>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::abstract::_cpp_break> in(std::optional< ::abstract::as>& _cpp_goto, std::optional< ::abstract::explicitPrx>& _cpp_if, std::optional< ::abstract::_cpp_while>& internal, std::optional< ::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_in(_cpp_goto, _cpp_if, internal, _cpp_namespace, _iceI_begin_in(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_in(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_in(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_in(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_in(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_in(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_in(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_in(const ::abstract::Callback_optionalParams_inPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_in(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_in(const ::Ice::Context& context, const ::abstract::Callback_optionalParams_inPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_in(context, cb, cookie);
    }

    std::optional< ::abstract::_cpp_break> end_in(std::optional< ::abstract::as>& _cpp_goto, std::optional< ::abstract::explicitPrx>& _cpp_if, std::optional< ::abstract::_cpp_while>& internal, std::optional< ::std::string>& _cpp_namespace, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_in(std::optional< ::abstract::as>& iceP_goto, std::optional< ::abstract::explicitPrx>& iceP_if, std::optional< ::abstract::_cpp_while>& iceP_internal, std::optional< ::std::string>& iceP_namespace, std::optional< ::abstract::_cpp_break>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_in(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::abstract::_cpp_break> foreach(std::optional< ::abstract::as>& _cpp_goto, std::optional< ::abstract::explicitPrx>& _cpp_if, std::optional< ::abstract::_cpp_while>& internal, std::optional< ::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_foreach(_cpp_goto, _cpp_if, internal, _cpp_namespace, _iceI_begin_foreach(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_foreach(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_foreach(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_foreach(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foreach(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_foreach(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foreach(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_foreach(const ::abstract::Callback_optionalParams_foreachPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foreach(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_foreach(const ::Ice::Context& context, const ::abstract::Callback_optionalParams_foreachPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foreach(context, cb, cookie);
    }

    std::optional< ::abstract::_cpp_break> end_foreach(std::optional< ::abstract::as>& _cpp_goto, std::optional< ::abstract::explicitPrx>& _cpp_if, std::optional< ::abstract::_cpp_while>& internal, std::optional< ::std::string>& _cpp_namespace, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_foreach(std::optional< ::abstract::as>& iceP_goto, std::optional< ::abstract::explicitPrx>& iceP_if, std::optional< ::abstract::_cpp_while>& iceP_internal, std::optional< ::std::string>& iceP_namespace, std::optional< ::abstract::_cpp_break>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_foreach(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class implicit : public virtual ::Ice::Proxy<implicit, ::IceProxy::Ice::Object>
{
public:

    ::abstract::as in(const ::abstract::_cpp_break& internal, const ::abstract::delegatePtr& is, const ::abstract::explicitPrx& lock, const ::abstract::casePrx& _cpp_namespace, const ::abstract::decimalPrx& _cpp_new, const ::abstract::delegatePtr& null, ::Ice::Int override, ::Ice::Int params, ::Ice::Int _cpp_private, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_in(_iceI_begin_in(internal, is, lock, _cpp_namespace, _cpp_new, null, override, params, _cpp_private, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_in(const ::abstract::_cpp_break& internal, const ::abstract::delegatePtr& is, const ::abstract::explicitPrx& lock, const ::abstract::casePrx& _cpp_namespace, const ::abstract::decimalPrx& _cpp_new, const ::abstract::delegatePtr& null, ::Ice::Int override, ::Ice::Int params, ::Ice::Int _cpp_private, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_in(internal, is, lock, _cpp_namespace, _cpp_new, null, override, params, _cpp_private, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_in(const ::abstract::_cpp_break& internal, const ::abstract::delegatePtr& is, const ::abstract::explicitPrx& lock, const ::abstract::casePrx& _cpp_namespace, const ::abstract::decimalPrx& _cpp_new, const ::abstract::delegatePtr& null, ::Ice::Int override, ::Ice::Int params, ::Ice::Int _cpp_private, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_in(internal, is, lock, _cpp_namespace, _cpp_new, null, override, params, _cpp_private, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_in(const ::abstract::_cpp_break& internal, const ::abstract::delegatePtr& is, const ::abstract::explicitPrx& lock, const ::abstract::casePrx& _cpp_namespace, const ::abstract::decimalPrx& _cpp_new, const ::abstract::delegatePtr& null, ::Ice::Int override, ::Ice::Int params, ::Ice::Int _cpp_private, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_in(internal, is, lock, _cpp_namespace, _cpp_new, null, override, params, _cpp_private, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_in(const ::abstract::_cpp_break& internal, const ::abstract::delegatePtr& is, const ::abstract::explicitPrx& lock, const ::abstract::casePrx& _cpp_namespace, const ::abstract::decimalPrx& _cpp_new, const ::abstract::delegatePtr& null, ::Ice::Int override, ::Ice::Int params, ::Ice::Int _cpp_private, const ::abstract::Callback_implicit_inPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_in(internal, is, lock, _cpp_namespace, _cpp_new, null, override, params, _cpp_private, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_in(const ::abstract::_cpp_break& internal, const ::abstract::delegatePtr& is, const ::abstract::explicitPrx& lock, const ::abstract::casePrx& _cpp_namespace, const ::abstract::decimalPrx& _cpp_new, const ::abstract::delegatePtr& null, ::Ice::Int override, ::Ice::Int params, ::Ice::Int _cpp_private, const ::Ice::Context& context, const ::abstract::Callback_implicit_inPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_in(internal, is, lock, _cpp_namespace, _cpp_new, null, override, params, _cpp_private, context, cb, cookie);
    }

    ::abstract::as end_in(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_in(const ::abstract::_cpp_break&, const ::abstract::delegatePtr&, const ::abstract::explicitPrx&, const ::abstract::casePrx&, const ::abstract::decimalPrx&, const ::abstract::delegatePtr&, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

namespace System
{

class Test : public virtual ::Ice::Proxy<Test, ::IceProxy::Ice::Object>
{
public:

    void op(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_op(_iceI_begin_op(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_op(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::abstract::System::Callback_Test_opPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& context, const ::abstract::System::Callback_Test_opPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(context, cb, cookie);
    }

    void end_op(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_op(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace System
{

class Test : public virtual ::Ice::Proxy<Test, ::IceProxy::Ice::Object>
{
public:

    void op(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_op(_iceI_begin_op(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_op(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::System::Callback_Test_opPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& context, const ::System::Callback_Test_opPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(context, cb, cookie);
    }

    void end_op(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_op(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace abstract
{

class _cpp_case : public virtual ::Ice::Object
{
public:

    typedef casePrx ProxyType;

    virtual ~_cpp_case();
    _cpp_case() = default;
    _cpp_case(const _cpp_case&) = default;
    _cpp_case& operator=(const _cpp_case&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void catch_async(const ::abstract::AMD_case_catchPtr& cb, ::Ice::Int checked, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_catch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class decimal : public virtual ::Ice::Object
{
public:

    typedef decimalPrx ProxyType;

    virtual ~decimal();
    decimal() = default;
    decimal(const decimal&) = default;
    decimal& operator=(const decimal&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_default(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_default(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class _cpp_explicit : public virtual decimal,
                      public virtual _cpp_case
{
public:

    typedef explicitPrx ProxyType;

    virtual ~_cpp_explicit();
    _cpp_explicit() = default;
    _cpp_explicit(const _cpp_explicit&) = default;
    _cpp_explicit& operator=(const _cpp_explicit&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class optionalParams : public virtual ::Ice::Object
{
public:

    typedef optionalParamsPrx ProxyType;

    virtual ~optionalParams();
    optionalParams() = default;
    optionalParams(const optionalParams&) = default;
    optionalParams& operator=(const optionalParams&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual std::optional<_cpp_break> _cpp_for(const std::optional<as>& _cpp_goto, const std::optional<explicitPrx>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_for(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void continue_async(const ::abstract::AMD_optionalParams_continuePtr& cb, const std::optional<as>& _cpp_goto, const std::optional<explicitPrx>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_continue(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<_cpp_break> in(std::optional<as>& _cpp_goto, std::optional<explicitPrx>& _cpp_if, std::optional<_cpp_while>& internal, std::optional< ::std::string>& _cpp_namespace, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_in(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void foreach_async(const ::abstract::AMD_optionalParams_foreachPtr& cb, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_foreach(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class implicit : public virtual ::Ice::Object
{
public:

    typedef implicitPrx ProxyType;

    virtual ~implicit();
    implicit() = default;
    implicit(const implicit&) = default;
    implicit& operator=(const implicit&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual as in(const _cpp_break& internal, const delegatePtr& is, const explicitPrx& lock, const casePrx& _cpp_namespace, const decimalPrx& _cpp_new, const delegatePtr& null, ::Ice::Int override, ::Ice::Int params, ::Ice::Int _cpp_private, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_in(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

namespace System
{

class Test : public virtual ::Ice::Object
{
public:

    typedef TestPrx ProxyType;

    virtual ~Test();
    Test() = default;
    Test(const Test&) = default;
    Test& operator=(const Test&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void op(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

}

namespace System
{

class Test : public virtual ::Ice::Object
{
public:

    typedef TestPrx ProxyType;

    virtual ~Test();
    Test() = default;
    Test(const Test&) = default;
    Test& operator=(const Test&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void op(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

namespace abstract
{

class delegate : public ::Ice::Value
{
public:

    typedef delegatePtr PointerType;

    virtual ~delegate();

    delegate()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    delegate(::Ice::Int _cpp_if, const ::abstract::casePrx& _cpp_else, ::Ice::Int event) :
        _cpp_if(_cpp_if),
        _cpp_else(_cpp_else),
        event(event)
    {
    }
    delegate(const delegate&) = default;
    delegate& operator=(const delegate&) = default;

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ValuePtr ice_clone() const;

    /**
     * Obtains the Slice type ID of the most-derived class implemented by this instance.
     * @return The type ID.
     */
    virtual ::std::string ice_id() const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return The type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Ice::Int _cpp_if;
    ::abstract::casePrx _cpp_else;
    ::Ice::Int event;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_delegate_init = ::abstract::delegate::ice_factory();
/// \endcond

class optionalMembers : public ::Ice::Value
{
public:

    typedef optionalMembersPtr PointerType;

    virtual ~optionalMembers();

    optionalMembers()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    optionalMembers(const std::optional< ::abstract::_cpp_break>& _cpp_for, const std::optional< ::abstract::as>& _cpp_goto, const std::optional< ::abstract::explicitPrx>& _cpp_if, const std::optional< ::abstract::_cpp_while>& internal, const std::optional< ::std::string>& _cpp_namespace) :
        _cpp_for(_cpp_for),
        _cpp_goto(_cpp_goto),
        _cpp_if(_cpp_if),
        internal(internal),
        _cpp_namespace(_cpp_namespace)
    {
    }
    optionalMembers(const optionalMembers&) = default;
    optionalMembers& operator=(const optionalMembers&) = default;

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ValuePtr ice_clone() const;

    /**
     * Obtains the Slice type ID of the most-derived class implemented by this instance.
     * @return The type ID.
     */
    virtual ::std::string ice_id() const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return The type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    std::optional< ::abstract::_cpp_break> _cpp_for;
    std::optional< ::abstract::as> _cpp_goto;
    std::optional< ::abstract::explicitPrx> _cpp_if;
    std::optional< ::abstract::_cpp_while> internal;
    std::optional< ::std::string> _cpp_namespace;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_optionalMembers_init = ::abstract::optionalMembers::ice_factory();
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::abstract::as>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::abstract::_cpp_break>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::abstract::_cpp_break, S>
{
    static void write(S* ostr, const ::abstract::_cpp_break& v)
    {
        ostr->write(v.readonly);
    }
};

template<typename S>
struct StreamReader< ::abstract::_cpp_break, S>
{
    static void read(S* istr, ::abstract::_cpp_break& v)
    {
        istr->read(v.readonly);
    }
};

template<typename S>
struct StreamWriter< ::abstract::delegate, S>
{
    static void write(S* ostr, const ::abstract::delegate& v)
    {
        ostr->write(v._cpp_if);
        ostr->write(v._cpp_else);
        ostr->write(v.event);
    }
};

template<typename S>
struct StreamReader< ::abstract::delegate, S>
{
    static void read(S* istr, ::abstract::delegate& v)
    {
        istr->read(v._cpp_if);
        istr->read(v._cpp_else);
        istr->read(v.event);
    }
};

template<typename S>
struct StreamWriter< ::abstract::optionalMembers, S>
{
    static void write(S* ostr, const ::abstract::optionalMembers& v)
    {
        ostr->write(1, v._cpp_for);
        ostr->write(2, v._cpp_goto);
        ostr->write(3, v._cpp_if);
        ostr->write(5, v.internal);
        ostr->write(7, v._cpp_namespace);
    }
};

template<typename S>
struct StreamReader< ::abstract::optionalMembers, S>
{
    static void read(S* istr, ::abstract::optionalMembers& v)
    {
        istr->read(1, v._cpp_for);
        istr->read(2, v._cpp_goto);
        istr->read(3, v._cpp_if);
        istr->read(5, v.internal);
        istr->read(7, v._cpp_namespace);
    }
};

template<>
struct StreamableTraits< ::abstract::fixed>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::abstract::fixed, S>
{
    static void write(S* ostr, const ::abstract::fixed& v)
    {
        ostr->write(v._cpp_for);
    }
};

template<typename S>
struct StreamReader< ::abstract::fixed, S>
{
    static void read(S* istr, ::abstract::fixed& v)
    {
        istr->read(v._cpp_for);
    }
};

template<>
struct StreamableTraits< ::abstract::foreach>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::abstract::foreach, S>
{
    static void write(S* ostr, const ::abstract::foreach& v)
    {
        ostr->write(v._cpp_goto);
        ostr->write(v._cpp_if);
    }
};

template<typename S>
struct StreamReader< ::abstract::foreach, S>
{
    static void read(S* istr, ::abstract::foreach& v)
    {
        istr->read(v._cpp_goto);
        istr->read(v._cpp_if);
    }
};

template<>
struct StreamableTraits< ::abstract::BaseMethods>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::abstract::BaseMethods, S>
{
    static void write(S* ostr, const ::abstract::BaseMethods& v)
    {
        ostr->write(v.Data);
        ostr->write(v.HelpLink);
        ostr->write(v.InnerException);
        ostr->write(v.Message);
        ostr->write(v.Source);
        ostr->write(v.StackTrace);
        ostr->write(v.TargetSite);
        ostr->write(v.HResult);
        ostr->write(v.Equals);
        ostr->write(v.GetBaseException);
        ostr->write(v.GetHashCode);
        ostr->write(v.GetObjectData);
        ostr->write(v.GetType);
        ostr->write(v.ReferenceEquals);
        ostr->write(v.ToString);
    }
};

template<typename S>
struct StreamReader< ::abstract::BaseMethods, S>
{
    static void read(S* istr, ::abstract::BaseMethods& v)
    {
        istr->read(v.Data);
        istr->read(v.HelpLink);
        istr->read(v.InnerException);
        istr->read(v.Message);
        istr->read(v.Source);
        istr->read(v.StackTrace);
        istr->read(v.TargetSite);
        istr->read(v.HResult);
        istr->read(v.Equals);
        istr->read(v.GetBaseException);
        istr->read(v.GetHashCode);
        istr->read(v.GetObjectData);
        istr->read(v.GetType);
        istr->read(v.ReferenceEquals);
        istr->read(v.ToString);
    }
};

}
/// \endcond

namespace abstract
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::abstract::_cpp_case::begin_catch.
 * Create a wrapper instance by calling ::abstract::newCallback_case_catch.
 */
template<class T>
class CallbackNC_case_catch : public Callback_case_catch_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_case_catch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        casePrx proxy = casePrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_continue;
        try
        {
            proxy->end_catch(iceP_continue, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_continue);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::case::begin_catch.
 */
template<class T> Callback_case_catchPtr
newCallback_case_catch(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_case_catch<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::case::begin_catch.
 */
template<class T> Callback_case_catchPtr
newCallback_case_catch(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_case_catch<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::abstract::_cpp_case::begin_catch.
 * Create a wrapper instance by calling ::abstract::newCallback_case_catch.
 */
template<class T, typename CT>
class Callback_case_catch : public Callback_case_catch_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_case_catch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        casePrx proxy = casePrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_continue;
        try
        {
            proxy->end_catch(iceP_continue, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_continue, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::case::begin_catch.
 */
template<class T, typename CT> Callback_case_catchPtr
newCallback_case_catch(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_case_catch<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::case::begin_catch.
 */
template<class T, typename CT> Callback_case_catchPtr
newCallback_case_catch(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_case_catch<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::abstract::decimal::begin_default.
 * Create a wrapper instance by calling ::abstract::newCallback_decimal_default.
 */
template<class T>
class CallbackNC_decimal_default : public Callback_decimal_default_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_decimal_default(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::decimal::begin_default.
 */
template<class T> Callback_decimal_defaultPtr
newCallback_decimal_default(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_decimal_default<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::decimal::begin_default.
 */
template<class T> Callback_decimal_defaultPtr
newCallback_decimal_default(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_decimal_default<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::decimal::begin_default.
 */
template<class T> Callback_decimal_defaultPtr
newCallback_decimal_default(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_decimal_default<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::decimal::begin_default.
 */
template<class T> Callback_decimal_defaultPtr
newCallback_decimal_default(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_decimal_default<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::abstract::decimal::begin_default.
 * Create a wrapper instance by calling ::abstract::newCallback_decimal_default.
 */
template<class T, typename CT>
class Callback_decimal_default : public Callback_decimal_default_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_decimal_default(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::decimal::begin_default.
 */
template<class T, typename CT> Callback_decimal_defaultPtr
newCallback_decimal_default(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_decimal_default<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::decimal::begin_default.
 */
template<class T, typename CT> Callback_decimal_defaultPtr
newCallback_decimal_default(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_decimal_default<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::decimal::begin_default.
 */
template<class T, typename CT> Callback_decimal_defaultPtr
newCallback_decimal_default(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_decimal_default<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::decimal::begin_default.
 */
template<class T, typename CT> Callback_decimal_defaultPtr
newCallback_decimal_default(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_decimal_default<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::abstract::optionalParams::begin_for.
 * Create a wrapper instance by calling ::abstract::newCallback_optionalParams_for.
 */
template<class T>
class CallbackNC_optionalParams_for : public Callback_optionalParams_for_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<_cpp_break>&);

    CallbackNC_optionalParams_for(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        optionalParamsPrx proxy = optionalParamsPrx::uncheckedCast(result->getProxy());
        std::optional<_cpp_break> ret;
        try
        {
            ret = proxy->end_for(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_for.
 */
template<class T> Callback_optionalParams_forPtr
newCallback_optionalParams_for(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<_cpp_break>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_optionalParams_for<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_for.
 */
template<class T> Callback_optionalParams_forPtr
newCallback_optionalParams_for(T* instance, void (T::*cb)(const std::optional<_cpp_break>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_optionalParams_for<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::abstract::optionalParams::begin_for.
 * Create a wrapper instance by calling ::abstract::newCallback_optionalParams_for.
 */
template<class T, typename CT>
class Callback_optionalParams_for : public Callback_optionalParams_for_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<_cpp_break>&, const CT&);

    Callback_optionalParams_for(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        optionalParamsPrx proxy = optionalParamsPrx::uncheckedCast(result->getProxy());
        std::optional<_cpp_break> ret;
        try
        {
            ret = proxy->end_for(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_for.
 */
template<class T, typename CT> Callback_optionalParams_forPtr
newCallback_optionalParams_for(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<_cpp_break>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_optionalParams_for<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_for.
 */
template<class T, typename CT> Callback_optionalParams_forPtr
newCallback_optionalParams_for(T* instance, void (T::*cb)(const std::optional<_cpp_break>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_optionalParams_for<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::abstract::optionalParams::begin_continue.
 * Create a wrapper instance by calling ::abstract::newCallback_optionalParams_continue.
 */
template<class T>
class CallbackNC_optionalParams_continue : public Callback_optionalParams_continue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<_cpp_break>&);

    CallbackNC_optionalParams_continue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        optionalParamsPrx proxy = optionalParamsPrx::uncheckedCast(result->getProxy());
        std::optional<_cpp_break> ret;
        try
        {
            ret = proxy->end_continue(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_continue.
 */
template<class T> Callback_optionalParams_continuePtr
newCallback_optionalParams_continue(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<_cpp_break>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_optionalParams_continue<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_continue.
 */
template<class T> Callback_optionalParams_continuePtr
newCallback_optionalParams_continue(T* instance, void (T::*cb)(const std::optional<_cpp_break>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_optionalParams_continue<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::abstract::optionalParams::begin_continue.
 * Create a wrapper instance by calling ::abstract::newCallback_optionalParams_continue.
 */
template<class T, typename CT>
class Callback_optionalParams_continue : public Callback_optionalParams_continue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<_cpp_break>&, const CT&);

    Callback_optionalParams_continue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        optionalParamsPrx proxy = optionalParamsPrx::uncheckedCast(result->getProxy());
        std::optional<_cpp_break> ret;
        try
        {
            ret = proxy->end_continue(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_continue.
 */
template<class T, typename CT> Callback_optionalParams_continuePtr
newCallback_optionalParams_continue(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<_cpp_break>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_optionalParams_continue<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_continue.
 */
template<class T, typename CT> Callback_optionalParams_continuePtr
newCallback_optionalParams_continue(T* instance, void (T::*cb)(const std::optional<_cpp_break>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_optionalParams_continue<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::abstract::optionalParams::begin_in.
 * Create a wrapper instance by calling ::abstract::newCallback_optionalParams_in.
 */
template<class T>
class CallbackNC_optionalParams_in : public Callback_optionalParams_in_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<_cpp_break>&, const std::optional<as>&, const std::optional<explicitPrx>&, const std::optional<_cpp_while>&, const std::optional< ::std::string>&);

    CallbackNC_optionalParams_in(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        optionalParamsPrx proxy = optionalParamsPrx::uncheckedCast(result->getProxy());
        std::optional<as> iceP_goto;
        std::optional<explicitPrx> iceP_if;
        std::optional<_cpp_while> iceP_internal;
        std::optional< ::std::string> iceP_namespace;
        std::optional<_cpp_break> ret;
        try
        {
            ret = proxy->end_in(iceP_goto, iceP_if, iceP_internal, iceP_namespace, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_goto, iceP_if, iceP_internal, iceP_namespace);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_in.
 */
template<class T> Callback_optionalParams_inPtr
newCallback_optionalParams_in(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<_cpp_break>&, const std::optional<as>&, const std::optional<explicitPrx>&, const std::optional<_cpp_while>&, const std::optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_optionalParams_in<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_in.
 */
template<class T> Callback_optionalParams_inPtr
newCallback_optionalParams_in(T* instance, void (T::*cb)(const std::optional<_cpp_break>&, const std::optional<as>&, const std::optional<explicitPrx>&, const std::optional<_cpp_while>&, const std::optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_optionalParams_in<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::abstract::optionalParams::begin_in.
 * Create a wrapper instance by calling ::abstract::newCallback_optionalParams_in.
 */
template<class T, typename CT>
class Callback_optionalParams_in : public Callback_optionalParams_in_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<_cpp_break>&, const std::optional<as>&, const std::optional<explicitPrx>&, const std::optional<_cpp_while>&, const std::optional< ::std::string>&, const CT&);

    Callback_optionalParams_in(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        optionalParamsPrx proxy = optionalParamsPrx::uncheckedCast(result->getProxy());
        std::optional<as> iceP_goto;
        std::optional<explicitPrx> iceP_if;
        std::optional<_cpp_while> iceP_internal;
        std::optional< ::std::string> iceP_namespace;
        std::optional<_cpp_break> ret;
        try
        {
            ret = proxy->end_in(iceP_goto, iceP_if, iceP_internal, iceP_namespace, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_goto, iceP_if, iceP_internal, iceP_namespace, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_in.
 */
template<class T, typename CT> Callback_optionalParams_inPtr
newCallback_optionalParams_in(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<_cpp_break>&, const std::optional<as>&, const std::optional<explicitPrx>&, const std::optional<_cpp_while>&, const std::optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_optionalParams_in<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_in.
 */
template<class T, typename CT> Callback_optionalParams_inPtr
newCallback_optionalParams_in(T* instance, void (T::*cb)(const std::optional<_cpp_break>&, const std::optional<as>&, const std::optional<explicitPrx>&, const std::optional<_cpp_while>&, const std::optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_optionalParams_in<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::abstract::optionalParams::begin_foreach.
 * Create a wrapper instance by calling ::abstract::newCallback_optionalParams_foreach.
 */
template<class T>
class CallbackNC_optionalParams_foreach : public Callback_optionalParams_foreach_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<_cpp_break>&, const std::optional<as>&, const std::optional<explicitPrx>&, const std::optional<_cpp_while>&, const std::optional< ::std::string>&);

    CallbackNC_optionalParams_foreach(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        optionalParamsPrx proxy = optionalParamsPrx::uncheckedCast(result->getProxy());
        std::optional<as> iceP_goto;
        std::optional<explicitPrx> iceP_if;
        std::optional<_cpp_while> iceP_internal;
        std::optional< ::std::string> iceP_namespace;
        std::optional<_cpp_break> ret;
        try
        {
            ret = proxy->end_foreach(iceP_goto, iceP_if, iceP_internal, iceP_namespace, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_goto, iceP_if, iceP_internal, iceP_namespace);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_foreach.
 */
template<class T> Callback_optionalParams_foreachPtr
newCallback_optionalParams_foreach(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<_cpp_break>&, const std::optional<as>&, const std::optional<explicitPrx>&, const std::optional<_cpp_while>&, const std::optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_optionalParams_foreach<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_foreach.
 */
template<class T> Callback_optionalParams_foreachPtr
newCallback_optionalParams_foreach(T* instance, void (T::*cb)(const std::optional<_cpp_break>&, const std::optional<as>&, const std::optional<explicitPrx>&, const std::optional<_cpp_while>&, const std::optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_optionalParams_foreach<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::abstract::optionalParams::begin_foreach.
 * Create a wrapper instance by calling ::abstract::newCallback_optionalParams_foreach.
 */
template<class T, typename CT>
class Callback_optionalParams_foreach : public Callback_optionalParams_foreach_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<_cpp_break>&, const std::optional<as>&, const std::optional<explicitPrx>&, const std::optional<_cpp_while>&, const std::optional< ::std::string>&, const CT&);

    Callback_optionalParams_foreach(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        optionalParamsPrx proxy = optionalParamsPrx::uncheckedCast(result->getProxy());
        std::optional<as> iceP_goto;
        std::optional<explicitPrx> iceP_if;
        std::optional<_cpp_while> iceP_internal;
        std::optional< ::std::string> iceP_namespace;
        std::optional<_cpp_break> ret;
        try
        {
            ret = proxy->end_foreach(iceP_goto, iceP_if, iceP_internal, iceP_namespace, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_goto, iceP_if, iceP_internal, iceP_namespace, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_foreach.
 */
template<class T, typename CT> Callback_optionalParams_foreachPtr
newCallback_optionalParams_foreach(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<_cpp_break>&, const std::optional<as>&, const std::optional<explicitPrx>&, const std::optional<_cpp_while>&, const std::optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_optionalParams_foreach<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::optionalParams::begin_foreach.
 */
template<class T, typename CT> Callback_optionalParams_foreachPtr
newCallback_optionalParams_foreach(T* instance, void (T::*cb)(const std::optional<_cpp_break>&, const std::optional<as>&, const std::optional<explicitPrx>&, const std::optional<_cpp_while>&, const std::optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_optionalParams_foreach<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::abstract::implicit::begin_in.
 * Create a wrapper instance by calling ::abstract::newCallback_implicit_in.
 */
template<class T>
class CallbackNC_implicit_in : public Callback_implicit_in_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(as);

    CallbackNC_implicit_in(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        implicitPrx proxy = implicitPrx::uncheckedCast(result->getProxy());
        as ret;
        try
        {
            ret = proxy->end_in(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::implicit::begin_in.
 */
template<class T> Callback_implicit_inPtr
newCallback_implicit_in(const IceUtil::Handle<T>& instance, void (T::*cb)(as), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_implicit_in<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::implicit::begin_in.
 */
template<class T> Callback_implicit_inPtr
newCallback_implicit_in(T* instance, void (T::*cb)(as), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_implicit_in<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::abstract::implicit::begin_in.
 * Create a wrapper instance by calling ::abstract::newCallback_implicit_in.
 */
template<class T, typename CT>
class Callback_implicit_in : public Callback_implicit_in_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(as, const CT&);

    Callback_implicit_in(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        implicitPrx proxy = implicitPrx::uncheckedCast(result->getProxy());
        as ret;
        try
        {
            ret = proxy->end_in(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::implicit::begin_in.
 */
template<class T, typename CT> Callback_implicit_inPtr
newCallback_implicit_in(const IceUtil::Handle<T>& instance, void (T::*cb)(as, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_implicit_in<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::implicit::begin_in.
 */
template<class T, typename CT> Callback_implicit_inPtr
newCallback_implicit_in(T* instance, void (T::*cb)(as, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_implicit_in<T, CT>(instance, cb, excb, sentcb);
}

namespace System
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::abstract::System::Test::begin_op.
 * Create a wrapper instance by calling ::abstract::System::newCallback_Test_op.
 */
template<class T>
class CallbackNC_Test_op : public Callback_Test_op_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Test_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::System::Test::begin_op.
 */
template<class T> Callback_Test_opPtr
newCallback_Test_op(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Test_op<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::System::Test::begin_op.
 */
template<class T> Callback_Test_opPtr
newCallback_Test_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Test_op<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::System::Test::begin_op.
 */
template<class T> Callback_Test_opPtr
newCallback_Test_op(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Test_op<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::System::Test::begin_op.
 */
template<class T> Callback_Test_opPtr
newCallback_Test_op(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Test_op<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::abstract::System::Test::begin_op.
 * Create a wrapper instance by calling ::abstract::System::newCallback_Test_op.
 */
template<class T, typename CT>
class Callback_Test_op : public Callback_Test_op_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Test_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::System::Test::begin_op.
 */
template<class T, typename CT> Callback_Test_opPtr
newCallback_Test_op(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Test_op<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::System::Test::begin_op.
 */
template<class T, typename CT> Callback_Test_opPtr
newCallback_Test_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Test_op<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::System::Test::begin_op.
 */
template<class T, typename CT> Callback_Test_opPtr
newCallback_Test_op(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Test_op<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::System::Test::begin_op.
 */
template<class T, typename CT> Callback_Test_opPtr
newCallback_Test_op(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Test_op<T, CT>(instance, 0, excb, sentcb);
}

}

}

namespace System
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::System::Test::begin_op.
 * Create a wrapper instance by calling ::System::newCallback_Test_op.
 */
template<class T>
class CallbackNC_Test_op : public Callback_Test_op_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Test_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::System::Test::begin_op.
 */
template<class T> Callback_Test_opPtr
newCallback_Test_op(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Test_op<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::System::Test::begin_op.
 */
template<class T> Callback_Test_opPtr
newCallback_Test_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Test_op<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::System::Test::begin_op.
 */
template<class T> Callback_Test_opPtr
newCallback_Test_op(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Test_op<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::System::Test::begin_op.
 */
template<class T> Callback_Test_opPtr
newCallback_Test_op(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Test_op<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::System::Test::begin_op.
 * Create a wrapper instance by calling ::System::newCallback_Test_op.
 */
template<class T, typename CT>
class Callback_Test_op : public Callback_Test_op_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Test_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::System::Test::begin_op.
 */
template<class T, typename CT> Callback_Test_opPtr
newCallback_Test_op(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Test_op<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::System::Test::begin_op.
 */
template<class T, typename CT> Callback_Test_opPtr
newCallback_Test_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Test_op<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::System::Test::begin_op.
 */
template<class T, typename CT> Callback_Test_opPtr
newCallback_Test_op(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Test_op<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::System::Test::begin_op.
 */
template<class T, typename CT> Callback_Test_opPtr
newCallback_Test_op(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Test_op<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
