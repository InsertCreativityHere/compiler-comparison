//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Key_h__
#define __Key_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace abstract
{

class _cpp_case;
class casePrx;
class decimal;
class decimalPrx;
class delegate;
class _cpp_explicit;
class explicitPrx;
class optionalMembers;
class optionalParams;
class optionalParamsPrx;
class implicit;
class implicitPrx;

namespace System
{

class Test;
class TestPrx;

}

}

namespace System
{

class Test;
class TestPrx;

}

namespace abstract
{

enum class as : unsigned char
{
    base
};

struct _cpp_break
{
    int readonly;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(readonly);
    }
};

using _cpp_while = ::std::map<::std::string, _cpp_break>;

class fixed : public ::Ice::UserExceptionHelper<fixed, ::Ice::UserException>
{
public:

    virtual ~fixed();

    fixed(const fixed&) = default;

    fixed() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    fixed(int _cpp_for) :
        _cpp_for(_cpp_for)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(_cpp_for);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_for;
};

/// \cond INTERNAL
static fixed _iceS_fixed_init;
/// \endcond

class foreach : public ::Ice::UserExceptionHelper<foreach, fixed>
{
public:

    virtual ~foreach();

    foreach(const foreach&) = default;

    foreach() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    foreach(int _cpp_for, int _cpp_goto, int _cpp_if) :
        ::Ice::UserExceptionHelper<foreach, fixed>(_cpp_for),
        _cpp_goto(_cpp_goto),
        _cpp_if(_cpp_if)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(_cpp_for, _cpp_goto, _cpp_if);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_goto;
    int _cpp_if;
};

class BaseMethods : public ::Ice::UserExceptionHelper<BaseMethods, ::Ice::UserException>
{
public:

    virtual ~BaseMethods();

    BaseMethods(const BaseMethods&) = default;

    BaseMethods() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    BaseMethods(int Data, int HelpLink, int InnerException, int Message, int Source, int StackTrace, int TargetSite, int HResult, int Equals, int GetBaseException, int GetHashCode, int GetObjectData, int GetType, int ReferenceEquals, int ToString) :
        Data(Data),
        HelpLink(HelpLink),
        InnerException(InnerException),
        Message(Message),
        Source(Source),
        StackTrace(StackTrace),
        TargetSite(TargetSite),
        HResult(HResult),
        Equals(Equals),
        GetBaseException(GetBaseException),
        GetHashCode(GetHashCode),
        GetObjectData(GetObjectData),
        GetType(GetType),
        ReferenceEquals(ReferenceEquals),
        ToString(ToString)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(Data, HelpLink, InnerException, Message, Source, StackTrace, TargetSite, HResult, Equals, GetBaseException, GetHashCode, GetObjectData, GetType, ReferenceEquals, ToString);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int Data;
    int HelpLink;
    int InnerException;
    int Message;
    int Source;
    int StackTrace;
    int TargetSite;
    int HResult;
    int Equals;
    int GetBaseException;
    int GetHashCode;
    int GetObjectData;
    int GetType;
    int ReferenceEquals;
    int ToString;
};

constexpr int _cpp_protected = 0;

constexpr int _cpp_public = 0;

namespace System
{

}

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace System
{

}

namespace abstract
{

class _cpp_case : public virtual ::Ice::Object
{
public:

    using ProxyType = casePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void catchAsync(int checked, ::std::function<void(int _cpp_continue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_catch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class decimal : public virtual ::Ice::Object
{
public:

    using ProxyType = decimalPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_default(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_default(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class _cpp_explicit : public virtual decimal,
                      public virtual _cpp_case
{
public:

    using ProxyType = explicitPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class optionalParams : public virtual ::Ice::Object
{
public:

    using ProxyType = optionalParamsPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual std::optional<_cpp_break> _cpp_for(std::optional<as> _cpp_goto, std::optional<::std::shared_ptr<explicitPrx>> _cpp_if, std::optional<_cpp_while> internal, std::optional<::std::string> _cpp_namespace, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_for(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void continueAsync(std::optional<as> _cpp_goto, std::optional<::std::shared_ptr<explicitPrx>> _cpp_if, std::optional<_cpp_while> internal, std::optional<::std::string> _cpp_namespace, ::std::function<void(const std::optional<_cpp_break>& returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_continue(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to in.
     */
    struct InResult
    {
        std::optional<_cpp_break> returnValue;
        std::optional<as> _cpp_goto;
        std::optional<::std::shared_ptr<explicitPrx>> _cpp_if;
        std::optional<_cpp_while> internal;
        std::optional<::std::string> _cpp_namespace;
    };

    virtual std::optional<_cpp_break> in(std::optional<as>& _cpp_goto, std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, std::optional<_cpp_while>& internal, std::optional<::std::string>& _cpp_namespace, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_in(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to foreach.
     */
    struct ForeachResult
    {
        std::optional<_cpp_break> returnValue;
        std::optional<as> _cpp_goto;
        std::optional<::std::shared_ptr<explicitPrx>> _cpp_if;
        std::optional<_cpp_while> internal;
        std::optional<::std::string> _cpp_namespace;
    };

    virtual void foreachAsync(::std::function<void(const std::optional<_cpp_break>& returnValue, const std::optional<as>& _cpp_goto, const std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_foreach(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class implicit : public virtual ::Ice::Object
{
public:

    using ProxyType = implicitPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual as in(_cpp_break internal, ::std::shared_ptr<delegate> is, ::std::shared_ptr<explicitPrx> lock, ::std::shared_ptr<casePrx> _cpp_namespace, ::std::shared_ptr<decimalPrx> _cpp_new, ::std::shared_ptr<delegate> null, int override, int params, int _cpp_private, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_in(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

namespace System
{

class Test : public virtual ::Ice::Object
{
public:

    using ProxyType = TestPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void op(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

}

namespace System
{

class Test : public virtual ::Ice::Object
{
public:

    using ProxyType = TestPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void op(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace abstract
{

class delegate : public ::Ice::ValueHelper<delegate, ::Ice::Value>
{
public:

    virtual ~delegate();

    delegate() = default;

    delegate(const delegate&) = default;
    delegate(delegate&&) = default;
    delegate& operator=(const delegate&) = default;
    delegate& operator=(delegate&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    delegate(int _cpp_if, const ::std::shared_ptr<::abstract::casePrx>& _cpp_else, int event) :
        _cpp_if(_cpp_if),
        _cpp_else(_cpp_else),
        event(event)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const ::std::shared_ptr<::abstract::casePrx>&, const int&> ice_tuple() const
    {
        return std::tie(_cpp_if, _cpp_else, event);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_if;
    ::std::shared_ptr<::abstract::casePrx> _cpp_else;
    int event;
};

/// \cond INTERNAL
static delegate _iceS_delegate_init;
/// \endcond

class optionalMembers : public ::Ice::ValueHelper<optionalMembers, ::Ice::Value>
{
public:

    virtual ~optionalMembers();

    optionalMembers() = default;

    optionalMembers(const optionalMembers&) = default;
    optionalMembers(optionalMembers&&) = default;
    optionalMembers& operator=(const optionalMembers&) = default;
    optionalMembers& operator=(optionalMembers&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    optionalMembers(const std::optional<::abstract::_cpp_break>& _cpp_for, const std::optional<::abstract::as>& _cpp_goto, const std::optional<::std::shared_ptr<::abstract::explicitPrx>>& _cpp_if, const std::optional<::abstract::_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace) :
        _cpp_for(_cpp_for),
        _cpp_goto(_cpp_goto),
        _cpp_if(_cpp_if),
        internal(internal),
        _cpp_namespace(_cpp_namespace)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional<::abstract::_cpp_break>&, const std::optional<::abstract::as>&, const std::optional<::std::shared_ptr<::abstract::explicitPrx>>&, const std::optional<::abstract::_cpp_while>&, const std::optional<::std::string>&> ice_tuple() const
    {
        return std::tie(_cpp_for, _cpp_goto, _cpp_if, internal, _cpp_namespace);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional<::abstract::_cpp_break> _cpp_for;
    std::optional<::abstract::as> _cpp_goto;
    std::optional<::std::shared_ptr<::abstract::explicitPrx>> _cpp_if;
    std::optional<::abstract::_cpp_while> internal;
    std::optional<::std::string> _cpp_namespace;
};

}

namespace abstract
{

class casePrx : public virtual ::Ice::Proxy<casePrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_catch(int checked, int& _cpp_continue, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _cpp_continue = _makePromiseOutgoing<int>(true, this, &casePrx::_iceI_catch, checked, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto catchAsync(int checked, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &casePrx::_iceI_catch, checked, context);
    }

    ::std::function<void()>
    catchAsync(int checked,
               ::std::function<void(int)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &abstract::casePrx::_iceI_catch, checked, context);
    }

    /// \cond INTERNAL
    void _iceI_catch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    casePrx() = default;
    friend ::std::shared_ptr<casePrx> IceInternal::createProxy<casePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class decimalPrx : public virtual ::Ice::Proxy<decimalPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_default(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &decimalPrx::_iceI_default, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto defaultAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &decimalPrx::_iceI_default, context);
    }

    ::std::function<void()>
    defaultAsync(::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &abstract::decimalPrx::_iceI_default, context);
    }

    /// \cond INTERNAL
    void _iceI_default(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    decimalPrx() = default;
    friend ::std::shared_ptr<decimalPrx> IceInternal::createProxy<decimalPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class explicitPrx : public virtual ::Ice::Proxy<explicitPrx, decimalPrx, casePrx>
{
public:

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    explicitPrx() = default;
    friend ::std::shared_ptr<explicitPrx> IceInternal::createProxy<explicitPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class optionalParamsPrx : public virtual ::Ice::Proxy<optionalParamsPrx, ::Ice::ObjectPrx>
{
public:

    std::optional<_cpp_break> _cpp_for(const std::optional<as>& _cpp_goto, const std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<std::optional<::abstract::_cpp_break>>(true, this, &optionalParamsPrx::_iceI_for, _cpp_goto, _cpp_if, internal, _cpp_namespace, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto forAsync(const std::optional<as>& _cpp_goto, const std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<std::optional<::abstract::_cpp_break>>>().get_future())
    {
        return _makePromiseOutgoing<std::optional<::abstract::_cpp_break>, P>(false, this, &optionalParamsPrx::_iceI_for, _cpp_goto, _cpp_if, internal, _cpp_namespace, context);
    }

    ::std::function<void()>
    forAsync(const std::optional<as>& _cpp_goto, const std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace,
             ::std::function<void(std::optional<::abstract::_cpp_break>)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<std::optional<::abstract::_cpp_break>>(std::move(response), std::move(ex), std::move(sent), this, &abstract::optionalParamsPrx::_iceI_for, _cpp_goto, _cpp_if, internal, _cpp_namespace, context);
    }

    /// \cond INTERNAL
    void _iceI_for(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::abstract::_cpp_break>>>&, const std::optional<as>&, const std::optional<::std::shared_ptr<explicitPrx>>&, const std::optional<_cpp_while>&, const std::optional<::std::string>&, const ::Ice::Context&);
    /// \endcond

    std::optional<_cpp_break> _cpp_continue(const std::optional<as>& _cpp_goto, const std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<std::optional<::abstract::_cpp_break>>(true, this, &optionalParamsPrx::_iceI_continue, _cpp_goto, _cpp_if, internal, _cpp_namespace, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto continueAsync(const std::optional<as>& _cpp_goto, const std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<std::optional<::abstract::_cpp_break>>>().get_future())
    {
        return _makePromiseOutgoing<std::optional<::abstract::_cpp_break>, P>(false, this, &optionalParamsPrx::_iceI_continue, _cpp_goto, _cpp_if, internal, _cpp_namespace, context);
    }

    ::std::function<void()>
    continueAsync(const std::optional<as>& _cpp_goto, const std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, const std::optional<_cpp_while>& internal, const std::optional<::std::string>& _cpp_namespace,
                  ::std::function<void(std::optional<::abstract::_cpp_break>)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<std::optional<::abstract::_cpp_break>>(std::move(response), std::move(ex), std::move(sent), this, &abstract::optionalParamsPrx::_iceI_continue, _cpp_goto, _cpp_if, internal, _cpp_namespace, context);
    }

    /// \cond INTERNAL
    void _iceI_continue(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::abstract::_cpp_break>>>&, const std::optional<as>&, const std::optional<::std::shared_ptr<explicitPrx>>&, const std::optional<_cpp_while>&, const std::optional<::std::string>&, const ::Ice::Context&);
    /// \endcond

    std::optional<_cpp_break> in(std::optional<as>& _cpp_goto, std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, std::optional<_cpp_while>& internal, std::optional<::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<optionalParams::InResult>(true, this, &optionalParamsPrx::_iceI_in, context).get();
        _cpp_goto = _result._cpp_goto;
        _cpp_if = ::std::move(_result._cpp_if);
        internal = ::std::move(_result.internal);
        _cpp_namespace = ::std::move(_result._cpp_namespace);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto inAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<optionalParams::InResult>>().get_future())
    {
        return _makePromiseOutgoing<optionalParams::InResult, P>(false, this, &optionalParamsPrx::_iceI_in, context);
    }

    ::std::function<void()>
    inAsync(::std::function<void(std::optional<::abstract::_cpp_break>, std::optional<::abstract::as>, std::optional<::std::shared_ptr<::abstract::explicitPrx>>, std::optional<::abstract::_cpp_while>, std::optional<::std::string>)> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](optionalParams::InResult&& _result)
        {
            response(::std::move(_result.returnValue), _result._cpp_goto, ::std::move(_result._cpp_if), ::std::move(_result.internal), ::std::move(_result._cpp_namespace));
        };
        return _makeLambdaOutgoing<optionalParams::InResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &abstract::optionalParamsPrx::_iceI_in, context);
    }

    /// \cond INTERNAL
    void _iceI_in(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<optionalParams::InResult>>&, const ::Ice::Context&);
    /// \endcond

    std::optional<_cpp_break> foreach(std::optional<as>& _cpp_goto, std::optional<::std::shared_ptr<explicitPrx>>& _cpp_if, std::optional<_cpp_while>& internal, std::optional<::std::string>& _cpp_namespace, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<optionalParams::ForeachResult>(true, this, &optionalParamsPrx::_iceI_foreach, context).get();
        _cpp_goto = _result._cpp_goto;
        _cpp_if = ::std::move(_result._cpp_if);
        internal = ::std::move(_result.internal);
        _cpp_namespace = ::std::move(_result._cpp_namespace);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto foreachAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<optionalParams::ForeachResult>>().get_future())
    {
        return _makePromiseOutgoing<optionalParams::ForeachResult, P>(false, this, &optionalParamsPrx::_iceI_foreach, context);
    }

    ::std::function<void()>
    foreachAsync(::std::function<void(std::optional<::abstract::_cpp_break>, std::optional<::abstract::as>, std::optional<::std::shared_ptr<::abstract::explicitPrx>>, std::optional<::abstract::_cpp_while>, std::optional<::std::string>)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](optionalParams::ForeachResult&& _result)
        {
            response(::std::move(_result.returnValue), _result._cpp_goto, ::std::move(_result._cpp_if), ::std::move(_result.internal), ::std::move(_result._cpp_namespace));
        };
        return _makeLambdaOutgoing<optionalParams::ForeachResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &abstract::optionalParamsPrx::_iceI_foreach, context);
    }

    /// \cond INTERNAL
    void _iceI_foreach(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<optionalParams::ForeachResult>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    optionalParamsPrx() = default;
    friend ::std::shared_ptr<optionalParamsPrx> IceInternal::createProxy<optionalParamsPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class implicitPrx : public virtual ::Ice::Proxy<implicitPrx, ::Ice::ObjectPrx>
{
public:

    as in(const _cpp_break& internal, const ::std::shared_ptr<delegate>& is, const ::std::shared_ptr<explicitPrx>& lock, const ::std::shared_ptr<casePrx>& _cpp_namespace, const ::std::shared_ptr<decimalPrx>& _cpp_new, const ::std::shared_ptr<delegate>& null, int override, int params, int _cpp_private, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::abstract::as>(true, this, &implicitPrx::_iceI_in, internal, is, lock, _cpp_namespace, _cpp_new, null, override, params, _cpp_private, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto inAsync(const _cpp_break& internal, const ::std::shared_ptr<delegate>& is, const ::std::shared_ptr<explicitPrx>& lock, const ::std::shared_ptr<casePrx>& _cpp_namespace, const ::std::shared_ptr<decimalPrx>& _cpp_new, const ::std::shared_ptr<delegate>& null, int override, int params, int _cpp_private, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::abstract::as>>().get_future())
    {
        return _makePromiseOutgoing<::abstract::as, P>(false, this, &implicitPrx::_iceI_in, internal, is, lock, _cpp_namespace, _cpp_new, null, override, params, _cpp_private, context);
    }

    ::std::function<void()>
    inAsync(const _cpp_break& internal, const ::std::shared_ptr<delegate>& is, const ::std::shared_ptr<explicitPrx>& lock, const ::std::shared_ptr<casePrx>& _cpp_namespace, const ::std::shared_ptr<decimalPrx>& _cpp_new, const ::std::shared_ptr<delegate>& null, int override, int params, int _cpp_private,
            ::std::function<void(::abstract::as)> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::abstract::as>(std::move(response), std::move(ex), std::move(sent), this, &abstract::implicitPrx::_iceI_in, internal, is, lock, _cpp_namespace, _cpp_new, null, override, params, _cpp_private, context);
    }

    /// \cond INTERNAL
    void _iceI_in(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::abstract::as>>&, const _cpp_break&, const ::std::shared_ptr<delegate>&, const ::std::shared_ptr<explicitPrx>&, const ::std::shared_ptr<casePrx>&, const ::std::shared_ptr<decimalPrx>&, const ::std::shared_ptr<delegate>&, int, int, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    implicitPrx() = default;
    friend ::std::shared_ptr<implicitPrx> IceInternal::createProxy<implicitPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

namespace System
{

class TestPrx : public virtual ::Ice::Proxy<TestPrx, ::Ice::ObjectPrx>
{
public:

    void op(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TestPrx::_iceI_op, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TestPrx::_iceI_op, context);
    }

    ::std::function<void()>
    opAsync(::std::function<void()> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &abstract::System::TestPrx::_iceI_op, context);
    }

    /// \cond INTERNAL
    void _iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    TestPrx() = default;
    friend ::std::shared_ptr<TestPrx> IceInternal::createProxy<TestPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

}

namespace System
{

class TestPrx : public virtual ::Ice::Proxy<TestPrx, ::Ice::ObjectPrx>
{
public:

    void op(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TestPrx::_iceI_op, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TestPrx::_iceI_op, context);
    }

    ::std::function<void()>
    opAsync(::std::function<void()> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &System::TestPrx::_iceI_op, context);
    }

    /// \cond INTERNAL
    void _iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    TestPrx() = default;
    friend ::std::shared_ptr<TestPrx> IceInternal::createProxy<TestPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::abstract::as>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::abstract::_cpp_break>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::abstract::_cpp_break, S>
{
    static void read(S* istr, ::abstract::_cpp_break& v)
    {
        istr->readAll(v.readonly);
    }
};

template<typename S>
struct StreamReader<::abstract::delegate, S>
{
    static void read(S* istr, ::abstract::delegate& v)
    {
        istr->readAll(v._cpp_if, v._cpp_else, v.event);
    }
};

template<typename S>
struct StreamWriter<::abstract::optionalMembers, S>
{
    static void write(S* ostr, const ::abstract::optionalMembers& v)
    {
        ostr->writeAll({1, 2, 3, 5, 7}, v._cpp_for, v._cpp_goto, v._cpp_if, v.internal, v._cpp_namespace);
    }
};

template<typename S>
struct StreamReader<::abstract::optionalMembers, S>
{
    static void read(S* istr, ::abstract::optionalMembers& v)
    {
        istr->readAll({1, 2, 3, 5, 7}, v._cpp_for, v._cpp_goto, v._cpp_if, v.internal, v._cpp_namespace);
    }
};

template<typename S>
struct StreamReader<::abstract::fixed, S>
{
    static void read(S* istr, ::abstract::fixed& v)
    {
        istr->readAll(v._cpp_for);
    }
};

template<typename S>
struct StreamWriter<::abstract::foreach, S>
{
    static void write(S* ostr, const ::abstract::foreach& v)
    {
        ostr->writeAll(v._cpp_goto, v._cpp_if);
    }
};

template<typename S>
struct StreamReader<::abstract::foreach, S>
{
    static void read(S* istr, ::abstract::foreach& v)
    {
        istr->readAll(v._cpp_goto, v._cpp_if);
    }
};

template<typename S>
struct StreamReader<::abstract::BaseMethods, S>
{
    static void read(S* istr, ::abstract::BaseMethods& v)
    {
        istr->readAll(v.Data, v.HelpLink, v.InnerException, v.Message, v.Source, v.StackTrace, v.TargetSite, v.HResult, v.Equals, v.GetBaseException, v.GetHashCode, v.GetObjectData, v.GetType, v.ReferenceEquals, v.ToString);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace abstract
{

using casePtr = ::std::shared_ptr<_cpp_case>;
using casePrxPtr = ::std::shared_ptr<casePrx>;

using decimalPtr = ::std::shared_ptr<decimal>;
using decimalPrxPtr = ::std::shared_ptr<decimalPrx>;

using delegatePtr = ::std::shared_ptr<delegate>;

using explicitPtr = ::std::shared_ptr<_cpp_explicit>;
using explicitPrxPtr = ::std::shared_ptr<explicitPrx>;

using optionalMembersPtr = ::std::shared_ptr<optionalMembers>;

using optionalParamsPtr = ::std::shared_ptr<optionalParams>;
using optionalParamsPrxPtr = ::std::shared_ptr<optionalParamsPrx>;

using implicitPtr = ::std::shared_ptr<implicit>;
using implicitPrxPtr = ::std::shared_ptr<implicitPrx>;

/// \cond INTERNAL
namespace System
{

using TestPtr = ::std::shared_ptr<Test>;
using TestPrxPtr = ::std::shared_ptr<TestPrx>;

}
/// \endcond

}
/// \endcond

/// \cond INTERNAL
namespace System
{

using TestPtr = ::std::shared_ptr<Test>;
using TestPrxPtr = ::std::shared_ptr<TestPrx>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
