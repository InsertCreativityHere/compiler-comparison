//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Clash.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Clash.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_Clash_Intf_ids[2] =
{
    "::Clash::Intf",
    "::Ice::Object"
};
const ::std::string iceC_Clash_Intf_ops[] =
{
    "context",
    "cookie",
    "current",
    "del",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "inS",
    "istr",
    "obj",
    "op",
    "opOut",
    "response",
    "sync",
    "typeId"
};
const ::std::string iceC_Clash_Intf_context_name = "context";
const ::std::string iceC_Clash_Intf_current_name = "current";
const ::std::string iceC_Clash_Intf_response_name = "response";
const ::std::string iceC_Clash_Intf_typeId_name = "typeId";
const ::std::string iceC_Clash_Intf_del_name = "del";
const ::std::string iceC_Clash_Intf_cookie_name = "cookie";
const ::std::string iceC_Clash_Intf_sync_name = "sync";
const ::std::string iceC_Clash_Intf_inS_name = "inS";
const ::std::string iceC_Clash_Intf_istr_name = "istr";
const ::std::string iceC_Clash_Intf_obj_name = "obj";
const ::std::string iceC_Clash_Intf_op_name = "op";
const ::std::string iceC_Clash_Intf_opOut_name = "opOut";

const ::IceInternal::DefaultValueFactoryInit<::Clash::Cls> iceC_Clash_Cls_init("::Clash::Cls");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Clash::Ex> iceC_Clash_Ex_init("::Clash::Ex");

}

Clash::Ex::~Ex()
{
}

const ::std::string&
Clash::Ex::ice_staticId()
{
    static const ::std::string typeId = "::Clash::Ex";
    return typeId;
}

bool
Clash::Intf::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Clash_Intf_ids, iceC_Clash_Intf_ids + 2, s);
}

::std::vector<::std::string>
Clash::Intf::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Clash_Intf_ids[0], &iceC_Clash_Intf_ids[2]);
}

::std::string
Clash::Intf::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Clash::Intf::ice_staticId()
{
    static const ::std::string typeId = "::Clash::Intf";
    return typeId;
}

/// \cond INTERNAL
bool
Clash::Intf::_iceD_context(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->context(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_current(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->current(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_response(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->response(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_typeId(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->typeId(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_del(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->del(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_cookie(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->cookie(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_sync(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->sync(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_inS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->inS(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_istr(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->istr(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_obj(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->obj(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_context;
    ::std::string iceP_current;
    ::std::string iceP_response;
    ::std::string iceP_ex;
    ::std::string iceP_sent;
    ::std::string iceP_cookie;
    ::std::string iceP_sync;
    ::std::string iceP_result;
    ::std::string iceP_istr;
    ::std::string iceP_ostr;
    Ice::optional<::std::string> iceP_proxy;
    Ice::optional<int> iceP_obj;
    istr->readAll(iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr);
    istr->readAll({1, 2}, iceP_proxy, iceP_obj);
    inS.endReadParams();
    this->op(::std::move(iceP_context), ::std::move(iceP_current), ::std::move(iceP_response), ::std::move(iceP_ex), ::std::move(iceP_sent), ::std::move(iceP_cookie), ::std::move(iceP_sync), ::std::move(iceP_result), ::std::move(iceP_istr), ::std::move(iceP_ostr), ::std::move(iceP_proxy), iceP_obj, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_opOut(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string iceP_context;
    ::std::string iceP_current;
    ::std::string iceP_response;
    ::std::string iceP_ex;
    ::std::string iceP_sent;
    ::std::string iceP_cookie;
    ::std::string iceP_sync;
    ::std::string iceP_result;
    ::std::string iceP_istr;
    ::std::string iceP_ostr;
    Ice::optional<::std::string> iceP_proxy;
    Ice::optional<int> iceP_obj;
    this->opOut(iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, iceP_obj, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr);
    ostr->writeAll({1, 2}, iceP_proxy, iceP_obj);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Clash_Intf_ops, iceC_Clash_Intf_ops + 16, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Clash_Intf_ops)
    {
        case 0:
        {
            return _iceD_context(in, current);
        }
        case 1:
        {
            return _iceD_cookie(in, current);
        }
        case 2:
        {
            return _iceD_current(in, current);
        }
        case 3:
        {
            return _iceD_del(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_inS(in, current);
        }
        case 9:
        {
            return _iceD_istr(in, current);
        }
        case 10:
        {
            return _iceD_obj(in, current);
        }
        case 11:
        {
            return _iceD_op(in, current);
        }
        case 12:
        {
            return _iceD_opOut(in, current);
        }
        case 13:
        {
            return _iceD_response(in, current);
        }
        case 14:
        {
            return _iceD_sync(in, current);
        }
        case 15:
        {
            return _iceD_typeId(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Clash::Cls::~Cls()
{
}

const ::std::string&
Clash::Cls::ice_staticId()
{
    static const ::std::string typeId = "::Clash::Cls";
    return typeId;
}

/// \cond INTERNAL
void
Clash::IntfPrx::_iceI_context(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Clash_Intf_context_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Clash::IntfPrx::_iceI_current(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Clash_Intf_current_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Clash::IntfPrx::_iceI_response(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Clash_Intf_response_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Clash::IntfPrx::_iceI_typeId(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Clash_Intf_typeId_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Clash::IntfPrx::_iceI_del(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Clash_Intf_del_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Clash::IntfPrx::_iceI_cookie(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Clash_Intf_cookie_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Clash::IntfPrx::_iceI_sync(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Clash_Intf_sync_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Clash::IntfPrx::_iceI_inS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Clash_Intf_inS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Clash::IntfPrx::_iceI_istr(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Clash_Intf_istr_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Clash::IntfPrx::_iceI_obj(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Clash_Intf_obj_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Clash::IntfPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_context, const ::std::string& iceP_current, const ::std::string& iceP_response, const ::std::string& iceP_ex, const ::std::string& iceP_sent, const ::std::string& iceP_cookie, const ::std::string& iceP_sync, const ::std::string& iceP_result, const ::std::string& iceP_istr, const ::std::string& iceP_ostr, const Ice::optional<::std::string>& iceP_proxy, const Ice::optional<int>& iceP_obj, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Clash_Intf_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr);
            ostr->writeAll({1, 2}, iceP_proxy, iceP_obj);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Clash::IntfPrx::_iceI_opOut(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Intf::OpOutResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Clash_Intf_opOut_name);
    outAsync->invoke(iceC_Clash_Intf_opOut_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Intf::OpOutResult v;
            istr->readAll(v.context, v.current, v.response, v.ex, v.sent, v.cookie, v.sync, v.result, v.istr, v.ostr);
            istr->readAll({1, 2}, v.proxy, v.obj);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Clash::IntfPrx::_newInstance() const
{
    return ::IceInternal::createProxy<IntfPrx>();
}
/// \endcond

const ::std::string&
Clash::IntfPrx::ice_staticId()
{
    return Intf::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Clash_Intf_context_name = "context";

const ::std::string iceC_Clash_Intf_current_name = "current";

const ::std::string iceC_Clash_Intf_response_name = "response";

const ::std::string iceC_Clash_Intf_typeId_name = "typeId";

const ::std::string iceC_Clash_Intf_del_name = "del";

const ::std::string iceC_Clash_Intf_cookie_name = "cookie";

const ::std::string iceC_Clash_Intf_sync_name = "sync";

const ::std::string iceC_Clash_Intf_inS_name = "inS";

const ::std::string iceC_Clash_Intf_istr_name = "istr";

const ::std::string iceC_Clash_Intf_obj_name = "obj";

const ::std::string iceC_Clash_Intf_op_name = "op";

const ::std::string iceC_Clash_Intf_opOut_name = "opOut";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Clash::Ex> iceC_Clash_Ex_init("::Clash::Ex");

}

Clash::Ex::Ex(::Ice::Short istr, ::Ice::Int ostr, const ::std::string& cause) :
    ::Ice::UserException(),
    istr(istr),
    ostr(ostr),
    cause(cause)
{
}

#ifdef ICE_CPP11_COMPILER
Clash::Ex::~Ex()
{
}
#else
Clash::Ex::~Ex() throw()
{
}
#endif

::std::string
Clash::Ex::ice_id() const
{
    return "::Clash::Ex";
}

Clash::Ex*
Clash::Ex::ice_clone() const
{
    return new Ex(*this);
}

void
Clash::Ex::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Clash::Ex::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Clash::Ex", -1, true);
    ::Ice::StreamWriter< Ex, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Clash::Ex::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Ex, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Clash::upCast(Intf* p) { return p; }

void
::IceProxy::Clash::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Intf>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Intf;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Clash::Intf::_iceI_begin_context(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Clash_Intf_context_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Clash_Intf_context_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Clash_Intf_context_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Clash::Intf::end_context(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Clash_Intf_context_name);
}

::Ice::AsyncResultPtr
IceProxy::Clash::Intf::_iceI_begin_current(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Clash_Intf_current_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Clash_Intf_current_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Clash_Intf_current_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Clash::Intf::end_current(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Clash_Intf_current_name);
}

::Ice::AsyncResultPtr
IceProxy::Clash::Intf::_iceI_begin_response(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Clash_Intf_response_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Clash_Intf_response_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Clash_Intf_response_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Clash::Intf::end_response(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Clash_Intf_response_name);
}

::Ice::AsyncResultPtr
IceProxy::Clash::Intf::_iceI_begin_typeId(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Clash_Intf_typeId_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Clash_Intf_typeId_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Clash_Intf_typeId_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Clash::Intf::end_typeId(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Clash_Intf_typeId_name);
}

::Ice::AsyncResultPtr
IceProxy::Clash::Intf::_iceI_begin_del(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Clash_Intf_del_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Clash_Intf_del_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Clash_Intf_del_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Clash::Intf::end_del(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Clash_Intf_del_name);
}

::Ice::AsyncResultPtr
IceProxy::Clash::Intf::_iceI_begin_cookie(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Clash_Intf_cookie_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Clash_Intf_cookie_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Clash_Intf_cookie_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Clash::Intf::end_cookie(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Clash_Intf_cookie_name);
}

::Ice::AsyncResultPtr
IceProxy::Clash::Intf::_iceI_begin_sync(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Clash_Intf_sync_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Clash_Intf_sync_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Clash_Intf_sync_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Clash::Intf::end_sync(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Clash_Intf_sync_name);
}

::Ice::AsyncResultPtr
IceProxy::Clash::Intf::_iceI_begin_inS(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Clash_Intf_inS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Clash_Intf_inS_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Clash_Intf_inS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Clash::Intf::end_inS(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Clash_Intf_inS_name);
}

::Ice::AsyncResultPtr
IceProxy::Clash::Intf::_iceI_begin_istr(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Clash_Intf_istr_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Clash_Intf_istr_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Clash_Intf_istr_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Clash::Intf::end_istr(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Clash_Intf_istr_name);
}

::Ice::AsyncResultPtr
IceProxy::Clash::Intf::_iceI_begin_obj(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Clash_Intf_obj_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Clash_Intf_obj_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Clash_Intf_obj_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Clash::Intf::end_obj(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Clash_Intf_obj_name);
}

::Ice::AsyncResultPtr
IceProxy::Clash::Intf::_iceI_begin_op(const ::std::string& iceP_context, const ::std::string& iceP_current, const ::std::string& iceP_response, const ::std::string& iceP_ex, const ::std::string& iceP_sent, const ::std::string& iceP_cookie, const ::std::string& iceP_sync, const ::std::string& iceP_result, const ::std::string& iceP_istr, const ::std::string& iceP_ostr, const IceUtil::Optional< ::std::string>& iceP_proxy, const IceUtil::Optional< ::Ice::Int>& iceP_obj, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Clash_Intf_op_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Clash_Intf_op_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_context);
        ostr->write(iceP_current);
        ostr->write(iceP_response);
        ostr->write(iceP_ex);
        ostr->write(iceP_sent);
        ostr->write(iceP_cookie);
        ostr->write(iceP_sync);
        ostr->write(iceP_result);
        ostr->write(iceP_istr);
        ostr->write(iceP_ostr);
        ostr->write(1, iceP_proxy);
        ostr->write(2, iceP_obj);
        result->endWriteParams();
        result->invoke(iceC_Clash_Intf_op_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Clash::Intf::end_op(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Clash_Intf_op_name);
}

::Ice::AsyncResultPtr
IceProxy::Clash::Intf::_iceI_begin_opOut(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Clash_Intf_opOut_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Clash_Intf_opOut_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Clash_Intf_opOut_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Clash_Intf_opOut_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Clash::Intf::end_opOut(::std::string& iceP_context, ::std::string& iceP_current, ::std::string& iceP_response, ::std::string& iceP_ex, ::std::string& iceP_sent, ::std::string& iceP_cookie, ::std::string& iceP_sync, ::std::string& iceP_result, ::std::string& iceP_istr, ::std::string& iceP_ostr, IceUtil::Optional< ::std::string>& iceP_proxy, IceUtil::Optional< ::Ice::Int>& iceP_obj, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Clash_Intf_opOut_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_context);
    istr->read(iceP_current);
    istr->read(iceP_response);
    istr->read(iceP_ex);
    istr->read(iceP_sent);
    istr->read(iceP_cookie);
    istr->read(iceP_sync);
    istr->read(iceP_result);
    istr->read(iceP_istr);
    istr->read(iceP_ostr);
    istr->read(1, iceP_proxy);
    istr->read(2, iceP_obj);
    result->_endReadParams();
}

void IceProxy::Clash::Intf::_iceI_end_opOut(::std::string& iceP_context, ::std::string& iceP_current, ::std::string& iceP_response, ::std::string& iceP_ex, ::std::string& iceP_sent, ::std::string& iceP_cookie, ::std::string& iceP_sync, ::std::string& iceP_result, ::std::string& iceP_istr, ::std::string& iceP_ostr, IceUtil::Optional< ::std::string>& iceP_proxy, IceUtil::Optional< ::Ice::Int>& iceP_obj, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Clash_Intf_opOut_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_context);
    istr->read(iceP_current);
    istr->read(iceP_response);
    istr->read(iceP_ex);
    istr->read(iceP_sent);
    istr->read(iceP_cookie);
    istr->read(iceP_sync);
    istr->read(iceP_result);
    istr->read(iceP_istr);
    istr->read(iceP_ostr);
    istr->read(1, iceP_proxy);
    istr->read(2, iceP_obj);
    result->_endReadParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Clash::Intf::_newInstance() const
{
    return new Intf;
}
/// \endcond

const ::std::string&
IceProxy::Clash::Intf::ice_staticId()
{
    return ::Clash::Intf::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Clash::upCast(Cls* p) { return p; }

void
::IceProxy::Clash::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Cls>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Cls;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Clash::Cls::_newInstance() const
{
    return new Cls;
}
/// \endcond

const ::std::string&
IceProxy::Clash::Cls::ice_staticId()
{
    return ::Clash::Cls::ice_staticId();
}

Clash::Intf::~Intf()
{
}

/// \cond INTERNAL
::Ice::Object* Clash::upCast(Intf* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Clash_Intf_ids[2] =
{
    "::Clash::Intf",
    "::Ice::Object"
};

}

bool
Clash::Intf::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Clash_Intf_ids, iceC_Clash_Intf_ids + 2, s);
}

::std::vector< ::std::string>
Clash::Intf::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Clash_Intf_ids[0], &iceC_Clash_Intf_ids[2]);
}

const ::std::string&
Clash::Intf::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Clash::Intf::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Clash::Intf";
    return typeId;
#else
    return iceC_Clash_Intf_ids[0];
#endif
}

/// \cond INTERNAL
bool
Clash::Intf::_iceD_context(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->context(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_current(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->current(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_response(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->response(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_typeId(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->typeId(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_del(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->del(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_cookie(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->cookie(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_sync(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->sync(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_inS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->inS(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_istr(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->istr(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_obj(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->obj(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_context;
    ::std::string iceP_current;
    ::std::string iceP_response;
    ::std::string iceP_ex;
    ::std::string iceP_sent;
    ::std::string iceP_cookie;
    ::std::string iceP_sync;
    ::std::string iceP_result;
    ::std::string iceP_istr;
    ::std::string iceP_ostr;
    IceUtil::Optional< ::std::string> iceP_proxy;
    IceUtil::Optional< ::Ice::Int> iceP_obj;
    istr->read(iceP_context);
    istr->read(iceP_current);
    istr->read(iceP_response);
    istr->read(iceP_ex);
    istr->read(iceP_sent);
    istr->read(iceP_cookie);
    istr->read(iceP_sync);
    istr->read(iceP_result);
    istr->read(iceP_istr);
    istr->read(iceP_ostr);
    istr->read(1, iceP_proxy);
    istr->read(2, iceP_obj);
    inS.endReadParams();
    this->op(iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, iceP_obj, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Clash::Intf::_iceD_opOut(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string iceP_context;
    ::std::string iceP_current;
    ::std::string iceP_response;
    ::std::string iceP_ex;
    ::std::string iceP_sent;
    ::std::string iceP_cookie;
    ::std::string iceP_sync;
    ::std::string iceP_result;
    ::std::string iceP_istr;
    ::std::string iceP_ostr;
    IceUtil::Optional< ::std::string> iceP_proxy;
    IceUtil::Optional< ::Ice::Int> iceP_obj;
    this->opOut(iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, iceP_obj, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_context);
    ostr->write(iceP_current);
    ostr->write(iceP_response);
    ostr->write(iceP_ex);
    ostr->write(iceP_sent);
    ostr->write(iceP_cookie);
    ostr->write(iceP_sync);
    ostr->write(iceP_result);
    ostr->write(iceP_istr);
    ostr->write(iceP_ostr);
    ostr->write(1, iceP_proxy);
    ostr->write(2, iceP_obj);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Clash_Intf_all[] =
{
    "context",
    "cookie",
    "current",
    "del",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "inS",
    "istr",
    "obj",
    "op",
    "opOut",
    "response",
    "sync",
    "typeId"
};

}

/// \cond INTERNAL
bool
Clash::Intf::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Clash_Intf_all, iceC_Clash_Intf_all + 16, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Clash_Intf_all)
    {
        case 0:
        {
            return _iceD_context(in, current);
        }
        case 1:
        {
            return _iceD_cookie(in, current);
        }
        case 2:
        {
            return _iceD_current(in, current);
        }
        case 3:
        {
            return _iceD_del(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_inS(in, current);
        }
        case 9:
        {
            return _iceD_istr(in, current);
        }
        case 10:
        {
            return _iceD_obj(in, current);
        }
        case 11:
        {
            return _iceD_op(in, current);
        }
        case 12:
        {
            return _iceD_opOut(in, current);
        }
        case 13:
        {
            return _iceD_response(in, current);
        }
        case 14:
        {
            return _iceD_sync(in, current);
        }
        case 15:
        {
            return _iceD_typeId(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Clash::Intf::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Intf, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Clash::Intf::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Intf, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Clash::_icePatchObjectPtr(IntfPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = IntfPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Intf::ice_staticId(), v);
    }
}
/// \endcond

Clash::Cls::~Cls()
{
}

/// \cond INTERNAL
::Ice::Object* Clash::upCast(Cls* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Clash::Cls::ice_clone() const
{
    ::Ice::Object* p = new Cls(*this);
    return p;
}

namespace
{
const ::std::string iceC_Clash_Cls_ids[2] =
{
    "::Clash::Cls",
    "::Ice::Object"
};

}

bool
Clash::Cls::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Clash_Cls_ids, iceC_Clash_Cls_ids + 2, s);
}

::std::vector< ::std::string>
Clash::Cls::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Clash_Cls_ids[0], &iceC_Clash_Cls_ids[2]);
}

const ::std::string&
Clash::Cls::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Clash::Cls::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Clash::Cls";
    return typeId;
#else
    return iceC_Clash_Cls_ids[0];
#endif
}

/// \cond STREAM
void
Clash::Cls::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Cls, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Clash::Cls::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Cls, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Clash::Cls> iceC_Clash_Cls_init("::Clash::Cls");
}

::Ice::ValueFactoryPtr
Clash::Cls::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Clash::Cls::ice_staticId());
}

/// \cond INTERNAL
void
Clash::_icePatchObjectPtr(ClsPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ClsPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Cls::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
