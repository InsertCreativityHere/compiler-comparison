//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

class Default;

using DefaultPtr = ::std::shared_ptr<Default>;
class NoDefault;

using NoDefaultPtr = ::std::shared_ptr<NoDefault>;

}

namespace Test
{

class Default : public ::Ice::ValueHelper<Default, ::Ice::Value>
{
public:

    Default() = default;
    Default(const Default&) = default;
    Default(Default&&) = default;
    Default& operator=(const Default&) = default;
    Default& operator=(Default&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Default(::std::int32_t x, ::std::int32_t y) :
        x(x),
        y(y)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(x, y);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    ::std::int32_t x;
    ::std::int32_t y;
};

/// \cond INTERNAL
static Default _iceS_Default_init;
/// \endcond

class NoDefault : public ::Ice::ValueHelper<NoDefault, ::Ice::Value>
{
public:

    NoDefault() = default;
    NoDefault(const NoDefault&) = default;
    NoDefault(NoDefault&&) = default;
    NoDefault& operator=(const NoDefault&) = default;
    NoDefault& operator=(NoDefault&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    NoDefault(::std::int32_t x, ::std::int32_t y) :
        x(x),
        y(y)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(x, y);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    ::std::int32_t x = 10;
    ::std::int32_t y = 10;
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::Test::Default, S>
{
    static void read(S* istr, ::Test::Default& v)
    {
        istr->readAll(v.x, v.y);
    }
};

template<typename S>
struct StreamReader<::Test::NoDefault, S>
{
    static void read(S* istr, ::Test::NoDefault& v)
    {
        istr->readAll(v.x, v.y);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
