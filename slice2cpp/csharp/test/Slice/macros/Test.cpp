//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::Test::Default> iceC_Test_Default_init("::Test::Default");
    const ::IceInternal::DefaultValueFactoryInit<::Test::NoDefault> iceC_Test_NoDefault_init("::Test::NoDefault");
}

const char*
Test::Default::ice_staticId() noexcept
{
    return "::Test::Default";
}

const char*
Test::Default::ice_id() const noexcept
{
    return ice_staticId();
}

::Ice::ValuePtr
Test::Default::_iceCloneImpl() const
{
    return CloneEnabler<Default>::clone(*this);
}

void
Test::Default::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->x, this->y);
    ostr->endSlice();
}

void
Test::Default::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->x, this->y);
    istr->endSlice();
}

const char*
Test::NoDefault::ice_staticId() noexcept
{
    return "::Test::NoDefault";
}

const char*
Test::NoDefault::ice_id() const noexcept
{
    return ice_staticId();
}

::Ice::ValuePtr
Test::NoDefault::_iceCloneImpl() const
{
    return CloneEnabler<NoDefault>::clone(*this);
}

void
Test::NoDefault::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->x, this->y);
    ostr->endSlice();
}

void
Test::NoDefault::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->x, this->y);
    istr->endSlice();
}
