//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_Test_Server_ids[2] =
{
    "::Ice::Object",
    "::Test::Server"
};
const ::std::string iceC_Test_Server_ops[] =
{
    "checkCert",
    "checkCipher",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "noCert"
};
const ::std::string iceC_Test_Server_noCert_name = "noCert";
const ::std::string iceC_Test_Server_checkCert_name = "checkCert";
const ::std::string iceC_Test_Server_checkCipher_name = "checkCipher";

const ::std::string iceC_Test_ServerFactory_ids[2] =
{
    "::Ice::Object",
    "::Test::ServerFactory"
};
const ::std::string iceC_Test_ServerFactory_ops[] =
{
    "createServer",
    "destroyServer",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown"
};
const ::std::string iceC_Test_ServerFactory_createServer_name = "createServer";
const ::std::string iceC_Test_ServerFactory_destroyServer_name = "destroyServer";
const ::std::string iceC_Test_ServerFactory_shutdown_name = "shutdown";

}

bool
Test::Server::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Server_ids, iceC_Test_Server_ids + 2, s);
}

::std::vector<::std::string>
Test::Server::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Server_ids[0], &iceC_Test_Server_ids[2]);
}

::std::string
Test::Server::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Server::ice_staticId()
{
    static const ::std::string typeId = "::Test::Server";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Server::_iceD_noCert(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->noCert(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Server::_iceD_checkCert(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_subjectDN;
    ::std::string iceP_issuerDN;
    istr->readAll(iceP_subjectDN, iceP_issuerDN);
    inS.endReadParams();
    this->checkCert(::std::move(iceP_subjectDN), ::std::move(iceP_issuerDN), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Server::_iceD_checkCipher(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_cipher;
    istr->readAll(iceP_cipher);
    inS.endReadParams();
    this->checkCipher(::std::move(iceP_cipher), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Server::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Server_ops, iceC_Test_Server_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Server_ops)
    {
        case 0:
        {
            return _iceD_checkCert(in, current);
        }
        case 1:
        {
            return _iceD_checkCipher(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_noCert(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::ServerFactory::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_ServerFactory_ids, iceC_Test_ServerFactory_ids + 2, s);
}

::std::vector<::std::string>
Test::ServerFactory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_ServerFactory_ids[0], &iceC_Test_ServerFactory_ids[2]);
}

::std::string
Test::ServerFactory::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::ServerFactory::ice_staticId()
{
    static const ::std::string typeId = "::Test::ServerFactory";
    return typeId;
}

/// \cond INTERNAL
bool
Test::ServerFactory::_iceD_createServer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Properties iceP_props;
    istr->readAll(iceP_props);
    inS.endReadParams();
    ::std::shared_ptr<ServerPrx> ret = this->createServer(::std::move(iceP_props), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::ServerFactory::_iceD_destroyServer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<ServerPrx> iceP_srv;
    istr->readAll(iceP_srv);
    inS.endReadParams();
    this->destroyServer(::std::move(iceP_srv), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::ServerFactory::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::ServerFactory::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_ServerFactory_ops, iceC_Test_ServerFactory_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_ServerFactory_ops)
    {
        case 0:
        {
            return _iceD_createServer(in, current);
        }
        case 1:
        {
            return _iceD_destroyServer(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Test::ServerPrx::_iceI_noCert(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Server_noCert_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ServerPrx::_iceI_checkCert(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_subjectDN, const ::std::string& iceP_issuerDN, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Server_checkCert_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_subjectDN, iceP_issuerDN);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ServerPrx::_iceI_checkCipher(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_cipher, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Server_checkCipher_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_cipher);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::ServerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ServerPrx>();
}
/// \endcond

const ::std::string&
Test::ServerPrx::ice_staticId()
{
    return Server::ice_staticId();
}

/// \cond INTERNAL
void
Test::ServerFactoryPrx::_iceI_createServer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::ServerPrx>>>& outAsync, const Properties& iceP_props, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_ServerFactory_createServer_name);
    outAsync->invoke(iceC_Test_ServerFactory_createServer_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_props);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ServerFactoryPrx::_iceI_destroyServer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<ServerPrx>& iceP_srv, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_ServerFactory_destroyServer_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_srv);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ServerFactoryPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_ServerFactory_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::ServerFactoryPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ServerFactoryPrx>();
}
/// \endcond

const ::std::string&
Test::ServerFactoryPrx::ice_staticId()
{
    return ServerFactory::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_Server_noCert_name = "noCert";

const ::std::string iceC_Test_Server_checkCert_name = "checkCert";

const ::std::string iceC_Test_Server_checkCipher_name = "checkCipher";

const ::std::string iceC_Test_ServerFactory_createServer_name = "createServer";

const ::std::string iceC_Test_ServerFactory_destroyServer_name = "destroyServer";

const ::std::string iceC_Test_ServerFactory_shutdown_name = "shutdown";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Server* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Server>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Server;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Server::_iceI_begin_noCert(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Server_noCert_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Server_noCert_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Server_noCert_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Server::end_noCert(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Server_noCert_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Server::_iceI_begin_checkCert(const ::std::string& iceP_subjectDN, const ::std::string& iceP_issuerDN, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Server_checkCert_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Server_checkCert_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_subjectDN);
        ostr->write(iceP_issuerDN);
        result->endWriteParams();
        result->invoke(iceC_Test_Server_checkCert_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Server::end_checkCert(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Server_checkCert_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Server::_iceI_begin_checkCipher(const ::std::string& iceP_cipher, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Server_checkCipher_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Server_checkCipher_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_cipher);
        result->endWriteParams();
        result->invoke(iceC_Test_Server_checkCipher_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Server::end_checkCipher(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Server_checkCipher_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Server::_newInstance() const
{
    return new Server;
}
/// \endcond

const ::std::string&
IceProxy::Test::Server::ice_staticId()
{
    return ::Test::Server::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(ServerFactory* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ServerFactory>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ServerFactory;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::ServerFactory::_iceI_begin_createServer(const ::Test::Properties& iceP_props, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_ServerFactory_createServer_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_ServerFactory_createServer_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_ServerFactory_createServer_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_props);
        result->endWriteParams();
        result->invoke(iceC_Test_ServerFactory_createServer_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ServerPrx
IceProxy::Test::ServerFactory::end_createServer(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_ServerFactory_createServer_name);
    ::Test::ServerPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::ServerFactory::_iceI_begin_destroyServer(const ::Test::ServerPrx& iceP_srv, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_ServerFactory_destroyServer_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_ServerFactory_destroyServer_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_srv);
        result->endWriteParams();
        result->invoke(iceC_Test_ServerFactory_destroyServer_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::ServerFactory::end_destroyServer(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_ServerFactory_destroyServer_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::ServerFactory::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_ServerFactory_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_ServerFactory_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_ServerFactory_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::ServerFactory::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_ServerFactory_shutdown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::ServerFactory::_newInstance() const
{
    return new ServerFactory;
}
/// \endcond

const ::std::string&
IceProxy::Test::ServerFactory::ice_staticId()
{
    return ::Test::ServerFactory::ice_staticId();
}

Test::Server::~Server()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Server* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_Server_ids[2] =
{
    "::Ice::Object",
    "::Test::Server"
};

}

bool
Test::Server::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Server_ids, iceC_Test_Server_ids + 2, s);
}

::std::vector< ::std::string>
Test::Server::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Server_ids[0], &iceC_Test_Server_ids[2]);
}

const ::std::string&
Test::Server::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Server::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Test::Server";
    return typeId;
#else
    return iceC_Test_Server_ids[1];
#endif
}

/// \cond INTERNAL
bool
Test::Server::_iceD_noCert(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->noCert(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Server::_iceD_checkCert(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_subjectDN;
    ::std::string iceP_issuerDN;
    istr->read(iceP_subjectDN);
    istr->read(iceP_issuerDN);
    inS.endReadParams();
    this->checkCert(iceP_subjectDN, iceP_issuerDN, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Server::_iceD_checkCipher(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_cipher;
    istr->read(iceP_cipher);
    inS.endReadParams();
    this->checkCipher(iceP_cipher, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Server_all[] =
{
    "checkCert",
    "checkCipher",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "noCert"
};

}

/// \cond INTERNAL
bool
Test::Server::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Server_all, iceC_Test_Server_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Server_all)
    {
        case 0:
        {
            return _iceD_checkCert(in, current);
        }
        case 1:
        {
            return _iceD_checkCipher(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_noCert(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::Server::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Server, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Server::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Server, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(ServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Server::ice_staticId(), v);
    }
}
/// \endcond

Test::ServerFactory::~ServerFactory()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(ServerFactory* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_ServerFactory_ids[2] =
{
    "::Ice::Object",
    "::Test::ServerFactory"
};

}

bool
Test::ServerFactory::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_ServerFactory_ids, iceC_Test_ServerFactory_ids + 2, s);
}

::std::vector< ::std::string>
Test::ServerFactory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_ServerFactory_ids[0], &iceC_Test_ServerFactory_ids[2]);
}

const ::std::string&
Test::ServerFactory::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::ServerFactory::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Test::ServerFactory";
    return typeId;
#else
    return iceC_Test_ServerFactory_ids[1];
#endif
}

/// \cond INTERNAL
bool
Test::ServerFactory::_iceD_createServer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    Properties iceP_props;
    istr->read(iceP_props);
    inS.endReadParams();
    ServerPrx ret = this->createServer(iceP_props, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::ServerFactory::_iceD_destroyServer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ServerPrx iceP_srv;
    istr->read(iceP_srv);
    inS.endReadParams();
    this->destroyServer(iceP_srv, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::ServerFactory::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_ServerFactory_all[] =
{
    "createServer",
    "destroyServer",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::ServerFactory::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_ServerFactory_all, iceC_Test_ServerFactory_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_ServerFactory_all)
    {
        case 0:
        {
            return _iceD_createServer(in, current);
        }
        case 1:
        {
            return _iceD_destroyServer(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::ServerFactory::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< ServerFactory, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::ServerFactory::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ServerFactory, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(ServerFactoryPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ServerFactoryPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(ServerFactory::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
