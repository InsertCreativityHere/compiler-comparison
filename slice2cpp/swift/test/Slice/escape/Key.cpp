//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Key.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_and_break_ids[2] =
{
    "::Ice::Object",
    "::and::break"
};
const ::std::string iceC_and_break_ops[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_and_break_case_name = "case";

const ::std::string iceC_and_func_ids[2] =
{
    "::Ice::Object",
    "::and::func"
};
const ::std::string iceC_and_func_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "public"
};
const ::std::string iceC_and_func_public_name = "public";

const ::IceInternal::DefaultValueFactoryInit<::_cpp_and::_cpp_switch> iceC_and_switch_init("::and::switch");

const ::std::string iceC_and_do_ids[4] =
{
    "::Ice::Object",
    "::and::break",
    "::and::do",
    "::and::func"
};
const ::std::string iceC_and_do_ops[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "public"
};

const ::IceInternal::DefaultUserExceptionFactoryInit<::_cpp_and::_cpp_return> iceC_and_return_init("::and::return");

const ::IceInternal::DefaultUserExceptionFactoryInit<::_cpp_and::as> iceC_and_as_init("::and::as");

}

_cpp_and::_cpp_return::~_cpp_return()
{
}

const ::std::string&
_cpp_and::_cpp_return::ice_staticId()
{
    static const ::std::string typeId = "::and::return";
    return typeId;
}

_cpp_and::as::~as()
{
}

const ::std::string&
_cpp_and::as::ice_staticId()
{
    static const ::std::string typeId = "::and::as";
    return typeId;
}

bool
_cpp_and::_cpp_break::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_break_ids, iceC_and_break_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::_cpp_break::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_break_ids[0], &iceC_and_break_ids[2]);
}

::std::string
_cpp_and::_cpp_break::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_break::ice_staticId()
{
    static const ::std::string typeId = "::_cpp_and::_cpp_break";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceD_case(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_catch;
    istr->readAll(iceP_catch);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_try)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_try);
        inA->endWriteParams();
        inA->completed();
    };
    this->caseAsync(iceP_catch, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_break_ops, iceC_and_break_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_break_ops)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::func::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_func_ids, iceC_and_func_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::func::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_func_ids[0], &iceC_and_func_ids[2]);
}

::std::string
_cpp_and::func::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::func::ice_staticId()
{
    static const ::std::string typeId = "::_cpp_and::func";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::func::_iceD_public(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_public(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::func::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_func_ops, iceC_and_func_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_func_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_public(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::_cpp_do::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_do_ids, iceC_and_do_ids + 4, s);
}

::std::vector<::std::string>
_cpp_and::_cpp_do::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_do_ids[0], &iceC_and_do_ids[4]);
}

::std::string
_cpp_and::_cpp_do::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_do::ice_staticId()
{
    static const ::std::string typeId = "::_cpp_and::_cpp_do";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_do::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_do_ops, iceC_and_do_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_do_ops)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_public(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

_cpp_and::_cpp_switch::~_cpp_switch()
{
}

const ::std::string&
_cpp_and::_cpp_switch::ice_staticId()
{
    static const ::std::string typeId = "::and::switch";
    return typeId;
}

/// \cond INTERNAL
void
_cpp_and::breakPrx::_iceI_case(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_catch, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_and_break_case_name);
    outAsync->invoke(iceC_and_break_case_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_catch);
        },
        nullptr);
}
/// \endcond

const ::std::string&
_cpp_and::breakPrx::ice_staticId()
{
    return _cpp_break::ice_staticId();
}

/// \cond INTERNAL
void
_cpp_and::funcPrx::_iceI_public(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_and_func_public_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
_cpp_and::funcPrx::ice_staticId()
{
    return func::ice_staticId();
}

const ::std::string&
_cpp_and::doPrx::ice_staticId()
{
    return _cpp_do::ice_staticId();
}

namespace Ice
{
}
