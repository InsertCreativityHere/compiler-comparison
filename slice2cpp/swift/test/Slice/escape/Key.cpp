//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Key.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_and_break_ids[2] =
{
    "::Ice::Object",
    "::and::break"
};
const ::std::string iceC_and_break_ops[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_and_break_case_name = "case";

const ::std::string iceC_and_func_ids[2] =
{
    "::Ice::Object",
    "::and::func"
};
const ::std::string iceC_and_func_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "public"
};
const ::std::string iceC_and_func_public_name = "public";

const ::IceInternal::DefaultValueFactoryInit<::_cpp_and::_cpp_switch> iceC_and_switch_init("::and::switch");

const ::std::string iceC_and_do_ids[4] =
{
    "::Ice::Object",
    "::and::break",
    "::and::do",
    "::and::func"
};
const ::std::string iceC_and_do_ops[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "public"
};

const ::IceInternal::DefaultUserExceptionFactoryInit<::_cpp_and::_cpp_return> iceC_and_return_init("::and::return");

const ::IceInternal::DefaultUserExceptionFactoryInit<::_cpp_and::as> iceC_and_as_init("::and::as");

}

_cpp_and::_cpp_return::~_cpp_return()
{
}

const ::std::string&
_cpp_and::_cpp_return::ice_staticId()
{
    static const ::std::string typeId = "::and::return";
    return typeId;
}

_cpp_and::as::~as()
{
}

const ::std::string&
_cpp_and::as::ice_staticId()
{
    static const ::std::string typeId = "::and::as";
    return typeId;
}

bool
_cpp_and::_cpp_break::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_break_ids, iceC_and_break_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::_cpp_break::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_break_ids[0], &iceC_and_break_ids[2]);
}

::std::string
_cpp_and::_cpp_break::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_break::ice_staticId()
{
    static const ::std::string typeId = "::and::break";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceD_case(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_catch;
    istr->readAll(iceP_catch);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_try)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_try);
        inA->endWriteParams();
        inA->completed();
    };
    this->caseAsync(iceP_catch, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_break_ops, iceC_and_break_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_break_ops)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::func::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_func_ids, iceC_and_func_ids + 2, s);
}

::std::vector<::std::string>
_cpp_and::func::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_func_ids[0], &iceC_and_func_ids[2]);
}

::std::string
_cpp_and::func::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::func::ice_staticId()
{
    static const ::std::string typeId = "::and::func";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::func::_iceD_public(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_public(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
_cpp_and::func::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_func_ops, iceC_and_func_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_func_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_public(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
_cpp_and::_cpp_do::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_do_ids, iceC_and_do_ids + 4, s);
}

::std::vector<::std::string>
_cpp_and::_cpp_do::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_and_do_ids[0], &iceC_and_do_ids[4]);
}

::std::string
_cpp_and::_cpp_do::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_do::ice_staticId()
{
    static const ::std::string typeId = "::and::do";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_do::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_do_ops, iceC_and_do_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_do_ops)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_public(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

_cpp_and::_cpp_switch::~_cpp_switch()
{
}

const ::std::string&
_cpp_and::_cpp_switch::ice_staticId()
{
    static const ::std::string typeId = "::and::switch";
    return typeId;
}

/// \cond INTERNAL
void
_cpp_and::breakPrx::_iceI_case(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_catch, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_and_break_case_name);
    outAsync->invoke(iceC_and_break_case_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_catch);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
_cpp_and::breakPrx::_newInstance() const
{
    return ::IceInternal::createProxy<breakPrx>();
}
/// \endcond

const ::std::string&
_cpp_and::breakPrx::ice_staticId()
{
    return _cpp_break::ice_staticId();
}

/// \cond INTERNAL
void
_cpp_and::funcPrx::_iceI_public(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_and_func_public_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
_cpp_and::funcPrx::_newInstance() const
{
    return ::IceInternal::createProxy<funcPrx>();
}
/// \endcond

const ::std::string&
_cpp_and::funcPrx::ice_staticId()
{
    return func::ice_staticId();
}

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
_cpp_and::doPrx::_newInstance() const
{
    return ::IceInternal::createProxy<doPrx>();
}
/// \endcond

const ::std::string&
_cpp_and::doPrx::ice_staticId()
{
    return _cpp_do::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_and_break_case_name = "case";

const ::std::string iceC_and_func_public_name = "public";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::_cpp_and::_cpp_return> iceC_and_return_init("::and::return");

}

_cpp_and::_cpp_return::_cpp_return(::Ice::Int Int32) :
    ::Ice::UserException(),
    Int32(Int32)
{
}
_cpp_and::_cpp_return::~_cpp_return()
{
}

::std::string
_cpp_and::_cpp_return::ice_id() const
{
    return "::and::return";
}

_cpp_and::_cpp_return*
_cpp_and::_cpp_return::ice_clone() const
{
    return new _cpp_return(*this);
}

void
_cpp_and::_cpp_return::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
_cpp_and::_cpp_return::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::and::return", -1, true);
    ::Ice::StreamWriter< _cpp_return, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
_cpp_and::_cpp_return::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< _cpp_return, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::_cpp_and::as> iceC_and_as_init("::and::as");

}

_cpp_and::as::as(::Ice::Int Int32, ::Ice::Int _cpp_static, ::Ice::Int _cpp_switch) :
    _cpp_return(Int32),
    _cpp_static(_cpp_static),
    _cpp_switch(_cpp_switch)
{
}
_cpp_and::as::~as()
{
}

::std::string
_cpp_and::as::ice_id() const
{
    return "::and::as";
}

_cpp_and::as*
_cpp_and::as::ice_clone() const
{
    return new as(*this);
}

void
_cpp_and::as::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
_cpp_and::as::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::and::as", -1, false);
    ::Ice::StreamWriter< as, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    _cpp_return::_writeImpl(ostr);
}

void
_cpp_and::as::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< as, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    _cpp_return::_readImpl(istr);
}
/// \endcond

_cpp_and::AMD_break_case::~AMD_break_case()
{
}

/// \cond INTERNAL
IceAsync::_cpp_and::AMD_break_case::AMD_break_case(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::_cpp_and::AMD_break_case::ice_response(::Ice::Int _cpp_try)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(_cpp_try);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(_cpp_break* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< _cpp_break>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new _cpp_break;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::_cpp_and::_cpp_break::_iceI_begin_case(::Ice::Int iceP_catch, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_and_break_case_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_and_break_case_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_and_break_case_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_catch);
        result->endWriteParams();
        result->invoke(iceC_and_break_case_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::_cpp_and::_cpp_break::end_case(::Ice::Int& iceP_try, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_and_break_case_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_try);
    result->_endReadParams();
}

void IceProxy::_cpp_and::_cpp_break::_iceI_end_case(::Ice::Int& iceP_try, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_and_break_case_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_try);
    result->_endReadParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::_cpp_break::_newInstance() const
{
    return new _cpp_break;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::_cpp_break::ice_staticId()
{
    return ::_cpp_and::_cpp_break::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(func* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< func>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new func;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::_cpp_and::func::_iceI_begin_public(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_and_func_public_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_and_func_public_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_and_func_public_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::_cpp_and::func::end_public(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_and_func_public_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::func::_newInstance() const
{
    return new func;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::func::ice_staticId()
{
    return ::_cpp_and::func::ice_staticId();
}

::IceProxy::_cpp_and::_doBase::~_doBase()
{
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::_cpp_and::upCast(_cpp_do* p) { return p; }

void
::IceProxy::_cpp_and::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< _cpp_do>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new _cpp_do;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::_cpp_and::_cpp_do::_newInstance() const
{
    return new _cpp_do;
}
/// \endcond

const ::std::string&
IceProxy::_cpp_and::_cpp_do::ice_staticId()
{
    return ::_cpp_and::_cpp_do::ice_staticId();
}

_cpp_and::_cpp_break::~_cpp_break()
{
}

namespace
{
const ::std::string iceC_and_break_ids[2] =
{
    "::Ice::Object",
    "::and::break"
};

}

bool
_cpp_and::_cpp_break::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_break_ids, iceC_and_break_ids + 2, s);
}

::std::vector< ::std::string>
_cpp_and::_cpp_break::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_break_ids[0], &iceC_and_break_ids[2]);
}

const ::std::string&
_cpp_and::_cpp_break::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_break::ice_staticId()
{
    static const ::std::string typeId = "::and::break";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceD_case(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_catch;
    istr->read(iceP_catch);
    inS.endReadParams();
    this->case_async(new IceAsync::_cpp_and::AMD_break_case(inS), iceP_catch, current);
    return false;
}
/// \endcond

namespace
{
const ::std::string iceC_and_break_all[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
_cpp_and::_cpp_break::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_break_all, iceC_and_break_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_break_all)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

_cpp_and::func::~func()
{
}

namespace
{
const ::std::string iceC_and_func_ids[2] =
{
    "::Ice::Object",
    "::and::func"
};

}

bool
_cpp_and::func::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_func_ids, iceC_and_func_ids + 2, s);
}

::std::vector< ::std::string>
_cpp_and::func::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_func_ids[0], &iceC_and_func_ids[2]);
}

const ::std::string&
_cpp_and::func::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::func::ice_staticId()
{
    static const ::std::string typeId = "::and::func";
    return typeId;
}

/// \cond INTERNAL
bool
_cpp_and::func::_iceD_public(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_public(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_and_func_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "public"
};

}

/// \cond INTERNAL
bool
_cpp_and::func::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_func_all, iceC_and_func_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_func_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_public(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

_cpp_and::_cpp_do::~_cpp_do()
{
}

namespace
{
const ::std::string iceC_and_do_ids[4] =
{
    "::Ice::Object",
    "::and::break",
    "::and::do",
    "::and::func"
};

}

bool
_cpp_and::_cpp_do::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_do_ids, iceC_and_do_ids + 4, s);
}

::std::vector< ::std::string>
_cpp_and::_cpp_do::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_do_ids[0], &iceC_and_do_ids[4]);
}

const ::std::string&
_cpp_and::_cpp_do::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_do::ice_staticId()
{
    static const ::std::string typeId = "::and::do";
    return typeId;
}

namespace
{
const ::std::string iceC_and_do_all[] =
{
    "case",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "public"
};

}

/// \cond INTERNAL
bool
_cpp_and::_cpp_do::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_and_do_all, iceC_and_do_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_and_do_all)
    {
        case 0:
        {
            return _iceD_case(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_public(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

_cpp_and::_cpp_switch::~_cpp_switch()
{
}

/// \cond INTERNAL
::Ice::Object* _cpp_and::upCast(_cpp_switch* p) { return p; }

/// \endcond
::Ice::ObjectPtr
_cpp_and::_cpp_switch::ice_clone() const
{
    ::Ice::Object* p = new _cpp_switch(*this);
    return p;
}

namespace
{
const ::std::string iceC_and_switch_ids[2] =
{
    "::Ice::Object",
    "::and::switch"
};

}

bool
_cpp_and::_cpp_switch::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_and_switch_ids, iceC_and_switch_ids + 2, s);
}

::std::vector< ::std::string>
_cpp_and::_cpp_switch::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_and_switch_ids[0], &iceC_and_switch_ids[2]);
}

const ::std::string&
_cpp_and::_cpp_switch::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
_cpp_and::_cpp_switch::ice_staticId()
{
    static const ::std::string typeId = "::and::switch";
    return typeId;
}

/// \cond STREAM
void
_cpp_and::_cpp_switch::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< _cpp_switch, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
_cpp_and::_cpp_switch::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< _cpp_switch, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::_cpp_and::_cpp_switch> iceC_and_switch_init("::and::switch");
}

::Ice::ValueFactoryPtr
_cpp_and::_cpp_switch::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::_cpp_and::_cpp_switch::ice_staticId());
}

/// \cond INTERNAL
void
_cpp_and::_icePatchObjectPtr(switchPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = switchPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(_cpp_switch::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
