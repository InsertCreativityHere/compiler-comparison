//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Key_h__
#define __Key_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace _cpp_and
{

class _cpp_break;
class breakPrx;
class func;
class funcPrx;
class _cpp_switch;
class _cpp_do;
class doPrx;

}

namespace _cpp_and
{

enum class _cpp_continue : unsigned char
{
    let,
    var
};

struct guard
{
    int _cpp_default;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(_cpp_default);
    }
};

struct defer
{
    ::std::string _cpp_else;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(_cpp_else);
    }
};

using fileprivate = ::std::vector<guard>;

using _cpp_for = ::std::map<::std::string, guard>;

class _cpp_return : public ::Ice::UserExceptionHelper<_cpp_return, ::Ice::UserException>
{
public:

    virtual ~_cpp_return();

    _cpp_return(const _cpp_return&) = default;

    _cpp_return() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_return(int Int32) :
        Int32(Int32)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(Int32);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int Int32;
};

/// \cond INTERNAL
static _cpp_return _iceS_return_init;
/// \endcond

class as : public ::Ice::UserExceptionHelper<as, _cpp_return>
{
public:

    virtual ~as();

    as(const as&) = default;

    as() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    as(int Int32, int _cpp_static, int _cpp_switch) :
        ::Ice::UserExceptionHelper<as, _cpp_return>(Int32),
        _cpp_static(_cpp_static),
        _cpp_switch(_cpp_switch)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(Int32, _cpp_static, _cpp_switch);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_static;
    int _cpp_switch;
};

/**
 * TODO: reenable when #1617 is fixed
 * interface friend
 * {
 * guard goto(continue if, guard d, defer inline, switch private, do mutable, break* namespace,
 * func* new, switch* not, do* operator, int or, int protected, int public, int register)
 * throws return, as;
 * }
 */
constexpr int is = 0;

constexpr int self = 0;

constexpr int _cpp_throw = 0;

constexpr int typealias = 0;

constexpr int internal = 0;

constexpr int _cpp_while = 0;

constexpr int import = 0;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace _cpp_and
{

class _cpp_break : public virtual ::Ice::Object
{
public:

    using ProxyType = breakPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void caseAsync(int _cpp_catch, ::std::function<void(int _cpp_try)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_case(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class func : public virtual ::Ice::Object
{
public:

    using ProxyType = funcPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_public(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_public(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class _cpp_do : public virtual func,
                public virtual _cpp_break
{
public:

    using ProxyType = doPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace _cpp_and
{

class _cpp_switch : public ::Ice::ValueHelper<_cpp_switch, ::Ice::Value>
{
public:

    virtual ~_cpp_switch();

    _cpp_switch() = default;

    _cpp_switch(const _cpp_switch&) = default;
    _cpp_switch(_cpp_switch&&) = default;
    _cpp_switch& operator=(const _cpp_switch&) = default;
    _cpp_switch& operator=(_cpp_switch&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_switch(int _cpp_if, const ::std::shared_ptr<::_cpp_and::funcPrx>& _cpp_export, int _cpp_volatile) :
        _cpp_if(_cpp_if),
        _cpp_export(_cpp_export),
        _cpp_volatile(_cpp_volatile)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const ::std::shared_ptr<::_cpp_and::funcPrx>&, const int&> ice_tuple() const
    {
        return std::tie(_cpp_if, _cpp_export, _cpp_volatile);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_if;
    ::std::shared_ptr<::_cpp_and::funcPrx> _cpp_export;
    int _cpp_volatile;
};

/// \cond INTERNAL
static _cpp_switch _iceS_switch_init;
/// \endcond

}

namespace _cpp_and
{

class breakPrx : public ::Ice::Proxy<breakPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_case(int _cpp_catch, int& _cpp_try, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _cpp_try = _makePromiseOutgoing<int>(true, this, &breakPrx::_iceI_case, _cpp_catch, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto caseAsync(int _cpp_catch, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &breakPrx::_iceI_case, _cpp_catch, context);
    }

    ::std::function<void()>
    caseAsync(int _cpp_catch,
              ::std::function<void(int)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::breakPrx::_iceI_case, _cpp_catch, context);
    }

    /// \cond INTERNAL
    void _iceI_case(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit breakPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    breakPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    breakPrx() = default;
    /// \endcond
};

class funcPrx : public ::Ice::Proxy<funcPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_public(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &funcPrx::_iceI_public, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto publicAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &funcPrx::_iceI_public, context);
    }

    ::std::function<void()>
    publicAsync(::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::funcPrx::_iceI_public, context);
    }

    /// \cond INTERNAL
    void _iceI_public(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit funcPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    funcPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    funcPrx() = default;
    /// \endcond
};

class doPrx : public ::Ice::Proxy<doPrx, funcPrx, breakPrx>
{
public:

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit doPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    doPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    doPrx() = default;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::_cpp_and::_cpp_continue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::_cpp_and::guard>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::_cpp_and::guard, S>
{
    static void read(S* istr, ::_cpp_and::guard& v)
    {
        istr->readAll(v._cpp_default);
    }
};

template<>
struct StreamableTraits<::_cpp_and::defer>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::_cpp_and::defer, S>
{
    static void read(S* istr, ::_cpp_and::defer& v)
    {
        istr->readAll(v._cpp_else);
    }
};

template<typename S>
struct StreamReader<::_cpp_and::_cpp_switch, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_switch& v)
    {
        istr->readAll(v._cpp_if, v._cpp_export, v._cpp_volatile);
    }
};

template<typename S>
struct StreamReader<::_cpp_and::_cpp_return, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_return& v)
    {
        istr->readAll(v.Int32);
    }
};

template<typename S>
struct StreamWriter<::_cpp_and::as, S>
{
    static void write(S* ostr, const ::_cpp_and::as& v)
    {
        ostr->writeAll(v._cpp_static, v._cpp_switch);
    }
};

template<typename S>
struct StreamReader<::_cpp_and::as, S>
{
    static void read(S* istr, ::_cpp_and::as& v)
    {
        istr->readAll(v._cpp_static, v._cpp_switch);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace _cpp_and
{

using breakPtr = ::std::shared_ptr<_cpp_break>;
using breakPrxPtr = ::std::shared_ptr<breakPrx>;

using funcPtr = ::std::shared_ptr<func>;
using funcPrxPtr = ::std::shared_ptr<funcPrx>;

using switchPtr = ::std::shared_ptr<_cpp_switch>;

using doPtr = ::std::shared_ptr<_cpp_do>;
using doPrxPtr = ::std::shared_ptr<doPrx>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
