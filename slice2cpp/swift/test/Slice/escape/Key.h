//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Key_h__
#define __Key_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace _cpp_and
{

class _cpp_break;
class breakPrx;
class func;
class funcPrx;
class _cpp_switch;
class _cpp_do;
class doPrx;

}

namespace _cpp_and
{

enum class _cpp_continue : unsigned char
{
    let,
    var
};

struct guard
{
    int _cpp_default;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(_cpp_default);
    }
};

struct defer
{
    ::std::string _cpp_else;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(_cpp_else);
    }
};

using fileprivate = ::std::vector<guard>;

using _cpp_for = ::std::map<::std::string, guard>;

class _cpp_return : public ::Ice::UserExceptionHelper<_cpp_return, ::Ice::UserException>
{
public:

    virtual ~_cpp_return();

    _cpp_return(const _cpp_return&) = default;

    _cpp_return() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_return(int Int32) :
        Int32(Int32)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(Int32);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int Int32;
};

/// \cond INTERNAL
static _cpp_return _iceS_return_init;
/// \endcond

class as : public ::Ice::UserExceptionHelper<as, _cpp_return>
{
public:

    virtual ~as();

    as(const as&) = default;

    as() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    as(int Int32, int _cpp_static, int _cpp_switch) :
        ::Ice::UserExceptionHelper<as, _cpp_return>(Int32),
        _cpp_static(_cpp_static),
        _cpp_switch(_cpp_switch)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(Int32, _cpp_static, _cpp_switch);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_static;
    int _cpp_switch;
};

/**
 * TODO: reenable when #1617 is fixed
 * interface friend
 * {
 * guard goto(continue if, guard d, defer inline, switch private, do mutable, break* namespace,
 * func* new, switch* not, do* operator, int or, int protected, int public, int register)
 * throws return, as;
 * }
 */
constexpr int is = 0;

constexpr int self = 0;

constexpr int _cpp_throw = 0;

constexpr int typealias = 0;

constexpr int internal = 0;

constexpr int _cpp_while = 0;

constexpr int import = 0;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace _cpp_and
{

class _cpp_break : public virtual ::Ice::Object
{
public:

    using ProxyType = breakPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void caseAsync(int _cpp_catch, ::std::function<void(int _cpp_try)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_case(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class func : public virtual ::Ice::Object
{
public:

    using ProxyType = funcPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_public(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_public(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class _cpp_do : public virtual func,
                public virtual _cpp_break
{
public:

    using ProxyType = doPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace _cpp_and
{

class _cpp_switch : public ::Ice::ValueHelper<_cpp_switch, ::Ice::Value>
{
public:

    virtual ~_cpp_switch();

    _cpp_switch() = default;

    _cpp_switch(const _cpp_switch&) = default;
    _cpp_switch(_cpp_switch&&) = default;
    _cpp_switch& operator=(const _cpp_switch&) = default;
    _cpp_switch& operator=(_cpp_switch&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_switch(int _cpp_if, const ::std::shared_ptr<::_cpp_and::funcPrx>& _cpp_export, int _cpp_volatile) :
        _cpp_if(_cpp_if),
        _cpp_export(_cpp_export),
        _cpp_volatile(_cpp_volatile)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const ::std::shared_ptr<::_cpp_and::funcPrx>&, const int&> ice_tuple() const
    {
        return std::tie(_cpp_if, _cpp_export, _cpp_volatile);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_if;
    ::std::shared_ptr<::_cpp_and::funcPrx> _cpp_export;
    int _cpp_volatile;
};

/// \cond INTERNAL
static _cpp_switch _iceS_switch_init;
/// \endcond

}

namespace _cpp_and
{

class breakPrx : public virtual ::Ice::Proxy<breakPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_case(int _cpp_catch, int& _cpp_try, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _cpp_try = _makePromiseOutgoing<int>(true, this, &breakPrx::_iceI_case, _cpp_catch, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto caseAsync(int _cpp_catch, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &breakPrx::_iceI_case, _cpp_catch, context);
    }

    ::std::function<void()>
    caseAsync(int _cpp_catch,
              ::std::function<void(int)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::breakPrx::_iceI_case, _cpp_catch, context);
    }

    /// \cond INTERNAL
    void _iceI_case(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    breakPrx() = default;
    friend ::std::shared_ptr<breakPrx> IceInternal::createProxy<breakPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class funcPrx : public virtual ::Ice::Proxy<funcPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_public(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &funcPrx::_iceI_public, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto publicAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &funcPrx::_iceI_public, context);
    }

    ::std::function<void()>
    publicAsync(::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &_cpp_and::funcPrx::_iceI_public, context);
    }

    /// \cond INTERNAL
    void _iceI_public(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    funcPrx() = default;
    friend ::std::shared_ptr<funcPrx> IceInternal::createProxy<funcPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class doPrx : public virtual ::Ice::Proxy<doPrx, funcPrx, breakPrx>
{
public:

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    doPrx() = default;
    friend ::std::shared_ptr<doPrx> IceInternal::createProxy<doPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::_cpp_and::_cpp_continue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::_cpp_and::guard>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::_cpp_and::guard, S>
{
    static void read(S* istr, ::_cpp_and::guard& v)
    {
        istr->readAll(v._cpp_default);
    }
};

template<>
struct StreamableTraits<::_cpp_and::defer>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::_cpp_and::defer, S>
{
    static void read(S* istr, ::_cpp_and::defer& v)
    {
        istr->readAll(v._cpp_else);
    }
};

template<typename S>
struct StreamReader<::_cpp_and::_cpp_switch, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_switch& v)
    {
        istr->readAll(v._cpp_if, v._cpp_export, v._cpp_volatile);
    }
};

template<typename S>
struct StreamReader<::_cpp_and::_cpp_return, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_return& v)
    {
        istr->readAll(v.Int32);
    }
};

template<typename S>
struct StreamWriter<::_cpp_and::as, S>
{
    static void write(S* ostr, const ::_cpp_and::as& v)
    {
        ostr->writeAll(v._cpp_static, v._cpp_switch);
    }
};

template<typename S>
struct StreamReader<::_cpp_and::as, S>
{
    static void read(S* istr, ::_cpp_and::as& v)
    {
        istr->readAll(v._cpp_static, v._cpp_switch);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace _cpp_and
{

using breakPtr = ::std::shared_ptr<_cpp_break>;
using breakPrxPtr = ::std::shared_ptr<breakPrx>;

using funcPtr = ::std::shared_ptr<func>;
using funcPrxPtr = ::std::shared_ptr<funcPrx>;

using switchPtr = ::std::shared_ptr<_cpp_switch>;

using doPtr = ::std::shared_ptr<_cpp_do>;
using doPrxPtr = ::std::shared_ptr<doPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace _cpp_and
{

class _cpp_break;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_break>&);
::IceProxy::Ice::Object* upCast(_cpp_break*);
/// \endcond

class func;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< func>&);
::IceProxy::Ice::Object* upCast(func*);
/// \endcond

class _cpp_switch;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_switch>&);
::IceProxy::Ice::Object* upCast(_cpp_switch*);
/// \endcond

class _cpp_do;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_do>&);
::IceProxy::Ice::Object* upCast(_cpp_do*);
/// \endcond

}

}

namespace _cpp_and
{

class _cpp_break;
/// \cond INTERNAL
::Ice::Object* upCast(_cpp_break*);
/// \endcond
typedef ::IceInternal::Handle< _cpp_break> breakPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_break> breakPrx;
typedef breakPrx breakPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(breakPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class func;
/// \cond INTERNAL
::Ice::Object* upCast(func*);
/// \endcond
typedef ::IceInternal::Handle< func> funcPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::func> funcPrx;
typedef funcPrx funcPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(funcPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class _cpp_switch;
/// \cond INTERNAL
::Ice::Object* upCast(_cpp_switch*);
/// \endcond
typedef ::IceInternal::Handle< _cpp_switch> switchPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_switch> switchPrx;
typedef switchPrx switchPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(switchPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class _cpp_do;
/// \cond INTERNAL
::Ice::Object* upCast(_cpp_do*);
/// \endcond
typedef ::IceInternal::Handle< _cpp_do> doPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::_cpp_and::_cpp_do> doPrx;
typedef doPrx doPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(doPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace _cpp_and
{

enum _cpp_continue
{
    let,
    var
};

struct guard
{
    ::Ice::Int _cpp_default;

    bool operator==(const guard& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(_cpp_default != rhs_._cpp_default)
        {
            return false;
        }
        return true;
    }

    bool operator<(const guard& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(_cpp_default < rhs_._cpp_default)
        {
            return true;
        }
        else if(rhs_._cpp_default < _cpp_default)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const guard& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const guard& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const guard& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const guard& rhs_) const
    {
        return !operator<(rhs_);
    }
};

class defer : public IceUtil::Shared
{
public:
    
    defer() {}
    explicit defer(const ::std::string& _cpp_else) :
        _cpp_else(_cpp_else)
    {
    }
    

    ::std::string _cpp_else;

    bool operator==(const defer& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(_cpp_else != rhs_._cpp_else)
        {
            return false;
        }
        return true;
    }

    bool operator<(const defer& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(_cpp_else < rhs_._cpp_else)
        {
            return true;
        }
        else if(rhs_._cpp_else < _cpp_else)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const defer& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const defer& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const defer& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const defer& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::IceUtil::Handle< ::_cpp_and::defer> deferPtr;

typedef ::std::vector<guard> fileprivate;

typedef ::std::map< ::std::string, guard> _cpp_for;

class _cpp_return : public ::Ice::UserException
{
public:

    _cpp_return() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit _cpp_return(::Ice::Int Int32);
    _cpp_return(const _cpp_return&) = default;
    virtual ~_cpp_return();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual _cpp_return* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int Int32;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static _cpp_return _iceS_return_init;
/// \endcond

class as : public _cpp_return
{
public:

    as() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    as(::Ice::Int Int32, ::Ice::Int _cpp_static, ::Ice::Int _cpp_switch);
    as(const as&) = default;
    virtual ~as();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual as* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int _cpp_static;
    ::Ice::Int _cpp_switch;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/**
 * TODO: reenable when #1617 is fixed
 * interface friend
 * {
 * guard goto(continue if, guard d, defer inline, switch private, do mutable, break* namespace,
 * func* new, switch* not, do* operator, int or, int protected, int public, int register)
 * throws return, as;
 * }
 */
const ::Ice::Int is = 0;

const ::Ice::Int self = 0;

const ::Ice::Int _cpp_throw = 0;

const ::Ice::Int typealias = 0;

const ::Ice::Int internal = 0;

const ::Ice::Int _cpp_while = 0;

const ::Ice::Int import = 0;

}

namespace _cpp_and
{

/**
 * AMD callback class for _cpp_and::_cpp_break::_cpp_case_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_break_case : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_break_case();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(::Ice::Int _cpp_try) = 0;
};

typedef ::IceUtil::Handle< ::_cpp_and::AMD_break_case> AMD_break_casePtr;

}

/// \cond INTERNAL
namespace IceAsync
{

namespace _cpp_and
{

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_break_case : public ::_cpp_and::AMD_break_case, public ::IceInternal::IncomingAsync
{
public:

    AMD_break_case(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

}

}
/// \endcond

namespace _cpp_and
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::_cpp_break::begin_case.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_break_case.
 */
class Callback_break_case_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_break_case_Base> Callback_break_casePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::_cpp_and::func::begin_public.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_func_public.
 */
class Callback_func_public_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_func_public_Base> Callback_func_publicPtr;

}

namespace IceProxy
{

namespace _cpp_and
{

class _cpp_break : public virtual ::Ice::Proxy<_cpp_break, ::IceProxy::Ice::Object>
{
public:

    void _cpp_case(::Ice::Int _cpp_catch, ::Ice::Int& _cpp_try, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_case(_cpp_try, _iceI_begin_case(_cpp_catch, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_case(_cpp_catch, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(_cpp_catch, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(_cpp_catch, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::_cpp_and::Callback_break_casePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(_cpp_catch, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_case(::Ice::Int _cpp_catch, const ::Ice::Context& context, const ::_cpp_and::Callback_break_casePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_case(_cpp_catch, context, cb, cookie);
    }

    void end_case(::Ice::Int& _cpp_try, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_case(::Ice::Int& iceP_try, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_case(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class func : public virtual ::Ice::Proxy<func, ::IceProxy::Ice::Object>
{
public:

    void _cpp_public(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_public(_iceI_begin_public(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_public(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_public(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_public(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_public(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_public(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_public(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_public(const ::_cpp_and::Callback_func_publicPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_public(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_public(const ::Ice::Context& context, const ::_cpp_and::Callback_func_publicPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_public(context, cb, cookie);
    }

    void end_public(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_public(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class _cpp_switch : public virtual ::Ice::Proxy<_cpp_switch, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

/// \cond INTERNAL
class _doBase : public virtual ::IceProxy::_cpp_and::func, 
                public virtual ::IceProxy::_cpp_and::_cpp_break
{
public:

    virtual ~_doBase();

protected:

    virtual Object* _newInstance() const = 0;
};
/// \endcond

class _cpp_do : public virtual ::Ice::Proxy<_cpp_do, _doBase>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace _cpp_and
{

class _cpp_break : public virtual ::Ice::Object
{
public:

    typedef breakPrx ProxyType;
    typedef breakPtr PointerType;

    virtual ~_cpp_break();
    _cpp_break() = default;
    _cpp_break(const _cpp_break&) = default;
    _cpp_break& operator=(const _cpp_break&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void case_async(const ::_cpp_and::AMD_break_casePtr& cb, ::Ice::Int _cpp_catch, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_case(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const _cpp_break& lhs, const _cpp_break& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const _cpp_break& lhs, const _cpp_break& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class func : public virtual ::Ice::Object
{
public:

    typedef funcPrx ProxyType;
    typedef funcPtr PointerType;

    virtual ~func();
    func() = default;
    func(const func&) = default;
    func& operator=(const func&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_public(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_public(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const func& lhs, const func& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const func& lhs, const func& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class _cpp_switch : public virtual ::Ice::Object
{
public:

    typedef switchPrx ProxyType;
    typedef switchPtr PointerType;

    virtual ~_cpp_switch();

    _cpp_switch()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_switch(::Ice::Int _cpp_if, const ::_cpp_and::funcPrx& _cpp_export, ::Ice::Int _cpp_volatile) :
        _cpp_if(_cpp_if),
        _cpp_export(_cpp_export),
        _cpp_volatile(_cpp_volatile)
    {
    }
    _cpp_switch(const _cpp_switch&) = default;
    _cpp_switch& operator=(const _cpp_switch&) = default;

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Ice::Int _cpp_if;
    ::_cpp_and::funcPrx _cpp_export;
    ::Ice::Int _cpp_volatile;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_switch_init = ::_cpp_and::_cpp_switch::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const _cpp_switch& lhs, const _cpp_switch& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const _cpp_switch& lhs, const _cpp_switch& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class _cpp_do : virtual public func,
                virtual public _cpp_break
{
public:

    typedef doPrx ProxyType;
    typedef doPtr PointerType;

    virtual ~_cpp_do();
    _cpp_do() = default;
    _cpp_do(const _cpp_do&) = default;
    _cpp_do& operator=(const _cpp_do&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const _cpp_do& lhs, const _cpp_do& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const _cpp_do& lhs, const _cpp_do& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::_cpp_and::_cpp_continue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::_cpp_and::guard>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::_cpp_and::guard, S>
{
    static void write(S* ostr, const ::_cpp_and::guard& v)
    {
        ostr->write(v._cpp_default);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::guard, S>
{
    static void read(S* istr, ::_cpp_and::guard& v)
    {
        istr->read(v._cpp_default);
    }
};

template<>
struct StreamableTraits< ::_cpp_and::deferPtr>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStructClass;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::_cpp_and::deferPtr, S>
{
    static void write(S* ostr, const ::_cpp_and::deferPtr& v)
    {
        ostr->write(v->_cpp_else);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::deferPtr, S>
{
    static void read(S* istr, ::_cpp_and::deferPtr& v)
    {
        istr->read(v->_cpp_else);
    }
};

template<typename S>
struct StreamWriter< ::_cpp_and::_cpp_switch, S>
{
    static void write(S* ostr, const ::_cpp_and::_cpp_switch& v)
    {
        ostr->write(v._cpp_if);
        ostr->write(v._cpp_export);
        ostr->write(v._cpp_volatile);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::_cpp_switch, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_switch& v)
    {
        istr->read(v._cpp_if);
        istr->read(v._cpp_export);
        istr->read(v._cpp_volatile);
    }
};

template<>
struct StreamableTraits< ::_cpp_and::_cpp_return>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::_cpp_and::_cpp_return, S>
{
    static void write(S* ostr, const ::_cpp_and::_cpp_return& v)
    {
        ostr->write(v.Int32);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::_cpp_return, S>
{
    static void read(S* istr, ::_cpp_and::_cpp_return& v)
    {
        istr->read(v.Int32);
    }
};

template<>
struct StreamableTraits< ::_cpp_and::as>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::_cpp_and::as, S>
{
    static void write(S* ostr, const ::_cpp_and::as& v)
    {
        ostr->write(v._cpp_static);
        ostr->write(v._cpp_switch);
    }
};

template<typename S>
struct StreamReader< ::_cpp_and::as, S>
{
    static void read(S* istr, ::_cpp_and::as& v)
    {
        istr->read(v._cpp_static);
        istr->read(v._cpp_switch);
    }
};

}
/// \endcond

namespace _cpp_and
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::_cpp_break::begin_case.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_break_case.
 */
template<class T>
class CallbackNC_break_case : public Callback_break_case_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_break_case(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        breakPrx proxy = breakPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_try;
        try
        {
            proxy->end_case(iceP_try, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_try);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::break::begin_case.
 */
template<class T> Callback_break_casePtr
newCallback_break_case(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_case<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::break::begin_case.
 */
template<class T> Callback_break_casePtr
newCallback_break_case(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_break_case<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::_cpp_break::begin_case.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_break_case.
 */
template<class T, typename CT>
class Callback_break_case : public Callback_break_case_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_break_case(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        breakPrx proxy = breakPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_try;
        try
        {
            proxy->end_case(iceP_try, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_try, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::break::begin_case.
 */
template<class T, typename CT> Callback_break_casePtr
newCallback_break_case(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_case<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::break::begin_case.
 */
template<class T, typename CT> Callback_break_casePtr
newCallback_break_case(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_break_case<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::_cpp_and::func::begin_public.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_func_public.
 */
template<class T>
class CallbackNC_func_public : public Callback_func_public_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_func_public(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::func::begin_public.
 */
template<class T> Callback_func_publicPtr
newCallback_func_public(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_func_public<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::func::begin_public.
 */
template<class T> Callback_func_publicPtr
newCallback_func_public(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_func_public<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::func::begin_public.
 */
template<class T> Callback_func_publicPtr
newCallback_func_public(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_func_public<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::func::begin_public.
 */
template<class T> Callback_func_publicPtr
newCallback_func_public(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_func_public<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::_cpp_and::func::begin_public.
 * Create a wrapper instance by calling ::_cpp_and::newCallback_func_public.
 */
template<class T, typename CT>
class Callback_func_public : public Callback_func_public_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_func_public(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::func::begin_public.
 */
template<class T, typename CT> Callback_func_publicPtr
newCallback_func_public(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_func_public<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::func::begin_public.
 */
template<class T, typename CT> Callback_func_publicPtr
newCallback_func_public(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_func_public<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::func::begin_public.
 */
template<class T, typename CT> Callback_func_publicPtr
newCallback_func_public(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_func_public<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::_cpp_and::func::begin_public.
 */
template<class T, typename CT> Callback_func_publicPtr
newCallback_func_public(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_func_public<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
