// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

// clang-format off

#ifndef Key_h_
#define Key_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace and
{
    enum class continue : std::uint8_t
    {
        let,
        var
    };
    std::ostream& operator<<(std::ostream&, continue);

    struct guard;

    struct defer;

    class breakPrx;

    class funcPrx;

    class switch;
    using switchPtr = std::shared_ptr<switch>;

    class doPrx;

    using fileprivate = std::vector<guard>;

    using for = std::map<std::string, guard>;

    class friendPrx;

    constexpr std::int32_t is = 0;

    constexpr std::int32_t self = 0;

    constexpr std::int32_t throw = 0;

    constexpr std::int32_t typealias = 0;

    constexpr std::int32_t internal = 0;

    constexpr std::int32_t while = 0;

    constexpr std::int32_t import = 0;

}

namespace and
{

class breakPrx : public Ice::Proxy<breakPrx, Ice::ObjectPrx>
{
public:

    void case(std::int32_t catch, std::int32_t& try, const Ice::Context& context = Ice::noExplicitContext) const;

    [[nodiscard]] std::future<std::int32_t> caseAsync(std::int32_t catch, const Ice::Context& context = Ice::noExplicitContext) const;

    std::function<void()> // NOLINT(modernize-use-nodiscard)
    caseAsync(std::int32_t catch, std::function<void(std::int32_t)> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_case(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int32_t>>&, std::int32_t, const Ice::Context&) const;
    /// \endcond

    /// Obtains the Slice type ID of this interface.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    breakPrx(const breakPrx& other) noexcept : Ice::ObjectPrx(other) {} // NOLINT(modernize-use-equals-default)

    breakPrx(breakPrx&& other) noexcept : Ice::ObjectPrx(std::move(other)) {} // NOLINT(modernize-use-equals-default)

    breakPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx(communicator, proxyString) {} // NOLINT(modernize-use-equals-default)

    ~breakPrx() override;

    breakPrx& operator=(const breakPrx& rhs) noexcept
    {
        if (this != &rhs)
        {
            Ice::ObjectPrx::operator=(rhs);
        }
        return *this;
    }

    breakPrx& operator=(breakPrx&& rhs) noexcept
    {
        if (this != &rhs)
        {
            Ice::ObjectPrx::operator=(std::move(rhs));
        }
        return *this;
    }

    /// \cond INTERNAL
    static breakPrx _fromReference(IceInternal::ReferencePtr ref) { return breakPrx(std::move(ref)); }

protected:

    breakPrx() = default;

    explicit breakPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx(std::move(ref))
    {
    }
    /// \endcond
};

class funcPrx : public Ice::Proxy<funcPrx, Ice::ObjectPrx>
{
public:

    void public(const Ice::Context& context = Ice::noExplicitContext) const;

    [[nodiscard]] std::future<void> publicAsync(const Ice::Context& context = Ice::noExplicitContext) const;

    std::function<void()> // NOLINT(modernize-use-nodiscard)
    publicAsync(std::function<void()> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_public(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;
    /// \endcond

    /// Obtains the Slice type ID of this interface.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    funcPrx(const funcPrx& other) noexcept : Ice::ObjectPrx(other) {} // NOLINT(modernize-use-equals-default)

    funcPrx(funcPrx&& other) noexcept : Ice::ObjectPrx(std::move(other)) {} // NOLINT(modernize-use-equals-default)

    funcPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx(communicator, proxyString) {} // NOLINT(modernize-use-equals-default)

    ~funcPrx() override;

    funcPrx& operator=(const funcPrx& rhs) noexcept
    {
        if (this != &rhs)
        {
            Ice::ObjectPrx::operator=(rhs);
        }
        return *this;
    }

    funcPrx& operator=(funcPrx&& rhs) noexcept
    {
        if (this != &rhs)
        {
            Ice::ObjectPrx::operator=(std::move(rhs));
        }
        return *this;
    }

    /// \cond INTERNAL
    static funcPrx _fromReference(IceInternal::ReferencePtr ref) { return funcPrx(std::move(ref)); }

protected:

    funcPrx() = default;

    explicit funcPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx(std::move(ref))
    {
    }
    /// \endcond
};

class doPrx : public Ice::Proxy<doPrx, funcPrx, breakPrx>
{
public:

    /// Obtains the Slice type ID of this interface.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

#if defined(__GNUC__)
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wextra" // initialize all virtual bases in correct order
#endif

    doPrx(const doPrx& other) noexcept : Ice::ObjectPrx(other) {} // NOLINT(modernize-use-equals-default)

    doPrx(doPrx&& other) noexcept : Ice::ObjectPrx(std::move(other)) {} // NOLINT(modernize-use-equals-default)

    doPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx(communicator, proxyString) {} // NOLINT(modernize-use-equals-default)

    ~doPrx() override;

    doPrx& operator=(const doPrx& rhs) noexcept
    {
        if (this != &rhs)
        {
            Ice::ObjectPrx::operator=(rhs);
        }
        return *this;
    }

    doPrx& operator=(doPrx&& rhs) noexcept
    {
        if (this != &rhs)
        {
            Ice::ObjectPrx::operator=(std::move(rhs));
        }
        return *this;
    }

    /// \cond INTERNAL
    static doPrx _fromReference(IceInternal::ReferencePtr ref) { return doPrx(std::move(ref)); }

protected:

    doPrx() = default;

    explicit doPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx(std::move(ref))
    {
    }
    /// \endcond

#if defined(__GNUC__)
#   pragma GCC diagnostic pop
#endif
};

class friendPrx : public Ice::Proxy<friendPrx, Ice::ObjectPrx>
{
public:

    guard goto(continue if, const guard& d, const defer& inline, const switchPtr& private, const std::optional<doPrx>& mutable, const std::optional<breakPrx>& namespace, const std::optional<funcPrx>& new, const switchPtr& not, const std::optional<doPrx>& operator, std::int32_t or, std::int32_t protected, std::int32_t public, std::int32_t register, const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

    [[nodiscard]] std::future<guard> gotoAsync(continue if, const guard& d, const defer& inline, const switchPtr& private, const std::optional<doPrx>& mutable, const std::optional<breakPrx>& namespace, const std::optional<funcPrx>& new, const switchPtr& not, const std::optional<doPrx>& operator, std::int32_t or, std::int32_t protected, std::int32_t public, std::int32_t register, const Ice::Context& context = Ice::noExplicitContext) const;

    std::function<void()> // NOLINT(modernize-use-nodiscard)
    gotoAsync(continue if, const guard& d, const defer& inline, const switchPtr& private, const std::optional<doPrx>& mutable, const std::optional<breakPrx>& namespace, const std::optional<funcPrx>& new, const switchPtr& not, const std::optional<doPrx>& operator, std::int32_t or, std::int32_t protected, std::int32_t public, std::int32_t register, std::function<void(::and::guard)> response, std::function<void(std::exception_ptr)> ex = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_goto(const std::shared_ptr<IceInternal::OutgoingAsyncT<guard>>&, continue, const guard&, const defer&, const switchPtr&, const std::optional<doPrx>&, const std::optional<breakPrx>&, const std::optional<funcPrx>&, const switchPtr&, const std::optional<doPrx>&, std::int32_t, std::int32_t, std::int32_t, std::int32_t, const Ice::Context&) const;
    /// \endcond

    /// Obtains the Slice type ID of this interface.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    friendPrx(const friendPrx& other) noexcept : Ice::ObjectPrx(other) {} // NOLINT(modernize-use-equals-default)

    friendPrx(friendPrx&& other) noexcept : Ice::ObjectPrx(std::move(other)) {} // NOLINT(modernize-use-equals-default)

    friendPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx(communicator, proxyString) {} // NOLINT(modernize-use-equals-default)

    ~friendPrx() override;

    friendPrx& operator=(const friendPrx& rhs) noexcept
    {
        if (this != &rhs)
        {
            Ice::ObjectPrx::operator=(rhs);
        }
        return *this;
    }

    friendPrx& operator=(friendPrx&& rhs) noexcept
    {
        if (this != &rhs)
        {
            Ice::ObjectPrx::operator=(std::move(rhs));
        }
        return *this;
    }

    /// \cond INTERNAL
    static friendPrx _fromReference(IceInternal::ReferencePtr ref) { return friendPrx(std::move(ref)); }

protected:

    friendPrx() = default;

    explicit friendPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx(std::move(ref))
    {
    }
    /// \endcond
};

}

namespace and
{

struct guard
{
    std::int32_t default;

    /// Obtains a tuple containing all of the struct's data members.
    /// @return The data members in a tuple.
    [[nodiscard]] std::tuple<const std::int32_t&> ice_tuple() const
    {
        return std::tie(default);
    }

    /// Outputs the name and value of each field of this instance to the stream.
    /// @param os The output stream.
    void ice_printFields(std::ostream& os) const;
};

std::ostream& operator<<(std::ostream&, const guard&);

struct defer
{
    std::string else;

    /// Obtains a tuple containing all of the struct's data members.
    /// @return The data members in a tuple.
    [[nodiscard]] std::tuple<const std::string&> ice_tuple() const
    {
        return std::tie(else);
    }

    /// Outputs the name and value of each field of this instance to the stream.
    /// @param os The output stream.
    void ice_printFields(std::ostream& os) const;
};

std::ostream& operator<<(std::ostream&, const defer&);

class switch : public Ice::Value
{
public:
    /// Default constructor.
    switch() noexcept = default;

    /// One-shot constructor to initialize all data members.
    switch(std::int32_t if, std::optional<::and::funcPrx> export, std::int32_t volatile) noexcept :
        if(if),
        export(std::move(export)),
        volatile(volatile)
    {
    }

    /// Obtains the Slice type ID of this value.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    [[nodiscard]] const char* ice_id() const noexcept override;

    /// Obtains a tuple containing all of the value's data members.
    /// @return The data members in a tuple.
    [[nodiscard]] std::tuple<const std::int32_t&, const std::optional<::and::funcPrx>&, const std::int32_t&> ice_tuple() const
    {
        return std::tie(if, export, volatile);
    }

    /// Creates a shallow polymorphic copy of this instance.
    /// @return The cloned value.
    [[nodiscard]] switchPtr ice_clone() const { return std::static_pointer_cast<switch>(_iceCloneImpl()); }

    std::int32_t if;
    std::optional<::and::funcPrx> export;
    std::int32_t volatile;

    void ice_printFields(std::ostream& os) const override;
    switch(const switch&) = default;

    [[nodiscard]] Ice::ValuePtr _iceCloneImpl() const override;

    void _iceWriteImpl(Ice::OutputStream*) const override;

    void _iceReadImpl(Ice::InputStream*) override;
};

class return : public Ice::UserException
{
public:
    /// Default constructor.
    return() noexcept = default;

    /// One-shot constructor to initialize all data members.
    return(std::int32_t Int32) noexcept :
        Int32(Int32)
    {
    }

    /// Copy constructor.
    return(const return&) noexcept = default;

    /// Obtains a tuple containing all of the exception's data members.
    /// @return The data members in a tuple.
    [[nodiscard]] std::tuple<const std::int32_t&> ice_tuple() const
    {
        return std::tie(Int32);
    }


    void ice_printFields(std::ostream& os) const override;
    /// Obtains the Slice type ID of this exception.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    [[nodiscard]] const char* ice_id() const noexcept override;

    void ice_throw() const override;

    std::int32_t Int32;

protected:
    void _writeImpl(Ice::OutputStream*) const override;

    void _readImpl(Ice::InputStream*) override;
};

class as : public return
{
public:
    /// Default constructor.
    as() noexcept = default;

    /// One-shot constructor to initialize all data members.
    as(std::int32_t Int32, std::int32_t static, std::int32_t switch) noexcept :
        return(Int32),
        static(static),
        switch(switch)
    {
    }

    /// Copy constructor.
    as(const as&) noexcept = default;

    /// Obtains a tuple containing all of the exception's data members.
    /// @return The data members in a tuple.
    [[nodiscard]] std::tuple<const std::int32_t&, const std::int32_t&, const std::int32_t&> ice_tuple() const
    {
        return std::tie(Int32, static, switch);
    }


    void ice_printFields(std::ostream& os) const override;
    /// Obtains the Slice type ID of this exception.
    /// @return The fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    [[nodiscard]] const char* ice_id() const noexcept override;

    void ice_throw() const override;

    std::int32_t static;
    std::int32_t switch;

protected:
    void _writeImpl(Ice::OutputStream*) const override;

    void _readImpl(Ice::InputStream*) override;
};

using Ice::Tuple::operator<;
using Ice::Tuple::operator<=;
using Ice::Tuple::operator>;
using Ice::Tuple::operator>=;
using Ice::Tuple::operator==;
using Ice::Tuple::operator!=;

}

namespace and
{

class break : public virtual Ice::Object
{
public:

    using ProxyType = breakPrx;

    /// Obtains a list of the Slice type IDs representing the interfaces supported by this object.
    /// @param current The Current object for the invocation.
    /// @return A list of fully-scoped type IDs.
    [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

    /// Obtains a Slice type ID representing the most-derived interface supported by this object.
    /// @param current The Current object for the invocation.
    /// @return A fully-scoped type ID.
    [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

    /// Obtains the Slice type ID corresponding to this interface.
    /// @return A fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    virtual void caseAsync(std::int32_t catch, std::function<void(std::int32_t try)> response, std::function<void(std::exception_ptr)> exception, const Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_case(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) override;
    /// \endcond
};

using breakPtr = std::shared_ptr<break>;

class func : public virtual Ice::Object
{
public:

    using ProxyType = funcPrx;

    /// Obtains a list of the Slice type IDs representing the interfaces supported by this object.
    /// @param current The Current object for the invocation.
    /// @return A list of fully-scoped type IDs.
    [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

    /// Obtains a Slice type ID representing the most-derived interface supported by this object.
    /// @param current The Current object for the invocation.
    /// @return A fully-scoped type ID.
    [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

    /// Obtains the Slice type ID corresponding to this interface.
    /// @return A fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    virtual void public(const Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_public(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) override;
    /// \endcond
};

using funcPtr = std::shared_ptr<func>;

class do : public virtual func,
           public virtual break
{
public:

    using ProxyType = doPrx;

    /// Obtains a list of the Slice type IDs representing the interfaces supported by this object.
    /// @param current The Current object for the invocation.
    /// @return A list of fully-scoped type IDs.
    [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

    /// Obtains a Slice type ID representing the most-derived interface supported by this object.
    /// @param current The Current object for the invocation.
    /// @return A fully-scoped type ID.
    [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

    /// Obtains the Slice type ID corresponding to this interface.
    /// @return A fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    /// \cond INTERNAL
    void dispatch(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) override;
    /// \endcond
};

using doPtr = std::shared_ptr<do>;

class friend : public virtual Ice::Object
{
public:

    using ProxyType = friendPrx;

    /// Obtains a list of the Slice type IDs representing the interfaces supported by this object.
    /// @param current The Current object for the invocation.
    /// @return A list of fully-scoped type IDs.
    [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

    /// Obtains a Slice type ID representing the most-derived interface supported by this object.
    /// @param current The Current object for the invocation.
    /// @return A fully-scoped type ID.
    [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

    /// Obtains the Slice type ID corresponding to this interface.
    /// @return A fully-scoped type ID.
    static const char* ice_staticId() noexcept;

    virtual guard goto(continue if, guard d, defer inline, switchPtr private, std::optional<doPrx> mutable, std::optional<breakPrx> namespace, std::optional<funcPrx> new, switchPtr not, std::optional<doPrx> operator, std::int32_t or, std::int32_t protected, std::int32_t public, std::int32_t register, const Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_goto(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) override;
    /// \endcond
};

using friendPtr = std::shared_ptr<friend>;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::and::continue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::and::guard>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<>
struct StreamReader<::and::guard>
{
    static void read(InputStream* istr, ::and::guard& v)
    {
        istr->readAll(v.default);
    }
};

template<>
struct StreamableTraits<::and::defer>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamReader<::and::defer>
{
    static void read(InputStream* istr, ::and::defer& v)
    {
        istr->readAll(v.else);
    }
};

}
/// \endcond

#include <Ice/PopDisableWarnings.h>
#endif
