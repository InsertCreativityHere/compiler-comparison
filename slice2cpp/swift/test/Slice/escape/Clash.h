//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Clash.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Clash_h__
#define __Clash_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 9
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Clash
{

class Intf;
class IntfPrx;
class Cls;

}

namespace Clash
{

struct St
{
    ::std::string v;
    short istr;
    int ostr;
    int rhs;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const short&, const int&, const int&> ice_tuple() const
    {
        return std::tie(v, istr, ostr, rhs);
    }
};

class Ex : public ::Ice::UserExceptionHelper<Ex, ::Ice::UserException>
{
public:

    virtual ~Ex();

    Ex(const Ex&) = default;

    Ex() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Ex(short istr, int ostr) :
        istr(istr),
        ostr(ostr)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const short&, const int&> ice_tuple() const
    {
        return std::tie(istr, ostr);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    short istr;
    int ostr;
};

/// \cond INTERNAL
static Ex _iceS_Ex_init;
/// \endcond

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Clash
{

class Intf : public virtual ::Ice::Object
{
public:

    using ProxyType = IntfPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void context(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_context(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void current(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_current(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void response(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_response(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void upCast(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_upCast(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void typeId(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_typeId(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void del(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_del(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void cookie(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_cookie(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sync(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sync(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void inS(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_inS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void istr(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_istr(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void op(::std::string context, ::std::string current, ::std::string response, ::std::string ex, ::std::string sent, ::std::string cookie, ::std::string sync, ::std::string result, ::std::string istr, ::std::string ostr, Ice::optional<::std::string> proxy, const ::Ice::Current& current_) = 0;
    /// \cond INTERNAL
    bool _iceD_op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opOut.
     */
    struct OpOutResult
    {
        ::std::string context;
        ::std::string current;
        ::std::string response;
        ::std::string ex;
        ::std::string sent;
        ::std::string cookie;
        ::std::string sync;
        ::std::string result;
        ::std::string istr;
        ::std::string ostr;
        Ice::optional<::std::string> proxy;
    };

    virtual void opOut(::std::string& context, ::std::string& current, ::std::string& response, ::std::string& ex, ::std::string& sent, ::std::string& cookie, ::std::string& sync, ::std::string& result, ::std::string& istr, ::std::string& ostr, Ice::optional<::std::string>& proxy, const ::Ice::Current& current_) = 0;
    /// \cond INTERNAL
    bool _iceD_opOut(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Clash
{

class Cls : public ::Ice::ValueHelper<Cls, ::Ice::Value>
{
public:

    virtual ~Cls();

    Cls() = default;

    Cls(const Cls&) = default;
    Cls(Cls&&) = default;
    Cls& operator=(const Cls&) = default;
    Cls& operator=(Cls&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Cls(const ::std::shared_ptr<::Clash::IntfPrx>& s, const ::std::string& context, int current, short response, const ::std::string& upCast, int typeId, short del, const Ice::optional<short>& cookie, const ::std::string& ex, int result, const ::std::string& istr, const ::std::string& ostr, const ::std::string& inS, const ::std::string& in, const ::std::string& proxy) :
        s(s),
        context(context),
        current(current),
        response(response),
        upCast(upCast),
        typeId(typeId),
        del(del),
        cookie(cookie),
        ex(ex),
        result(result),
        istr(istr),
        ostr(ostr),
        inS(inS),
        in(in),
        proxy(proxy)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Clash::IntfPrx>&, const ::std::string&, const int&, const short&, const ::std::string&, const int&, const short&, const Ice::optional<short>&, const ::std::string&, const int&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(s, context, current, response, upCast, typeId, del, cookie, ex, result, istr, ostr, inS, in, proxy);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Clash::IntfPrx> s;
    ::std::string context;
    int current;
    short response;
    ::std::string upCast;
    int typeId;
    short del;
    Ice::optional<short> cookie;
    ::std::string ex;
    int result;
    ::std::string istr;
    ::std::string ostr;
    ::std::string inS;
    ::std::string in;
    ::std::string proxy;
};

/// \cond INTERNAL
static Cls _iceS_Cls_init;
/// \endcond

}

namespace Clash
{

class IntfPrx : public virtual ::Ice::Proxy<IntfPrx, ::Ice::ObjectPrx>
{
public:

    void context(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IntfPrx::_iceI_context, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto contextAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IntfPrx::_iceI_context, context);
    }

    ::std::function<void()>
    contextAsync(::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Clash::IntfPrx::_iceI_context, context);
    }

    /// \cond INTERNAL
    void _iceI_context(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void current(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IntfPrx::_iceI_current, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto currentAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IntfPrx::_iceI_current, context);
    }

    ::std::function<void()>
    currentAsync(::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Clash::IntfPrx::_iceI_current, context);
    }

    /// \cond INTERNAL
    void _iceI_current(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void response(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IntfPrx::_iceI_response, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto responseAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IntfPrx::_iceI_response, context);
    }

    ::std::function<void()>
    responseAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Clash::IntfPrx::_iceI_response, context);
    }

    /// \cond INTERNAL
    void _iceI_response(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void upCast(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IntfPrx::_iceI_upCast, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto upCastAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IntfPrx::_iceI_upCast, context);
    }

    ::std::function<void()>
    upCastAsync(::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Clash::IntfPrx::_iceI_upCast, context);
    }

    /// \cond INTERNAL
    void _iceI_upCast(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void typeId(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IntfPrx::_iceI_typeId, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto typeIdAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IntfPrx::_iceI_typeId, context);
    }

    ::std::function<void()>
    typeIdAsync(::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Clash::IntfPrx::_iceI_typeId, context);
    }

    /// \cond INTERNAL
    void _iceI_typeId(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void del(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IntfPrx::_iceI_del, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto delAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IntfPrx::_iceI_del, context);
    }

    ::std::function<void()>
    delAsync(::std::function<void()> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Clash::IntfPrx::_iceI_del, context);
    }

    /// \cond INTERNAL
    void _iceI_del(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void cookie(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IntfPrx::_iceI_cookie, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto cookieAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IntfPrx::_iceI_cookie, context);
    }

    ::std::function<void()>
    cookieAsync(::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Clash::IntfPrx::_iceI_cookie, context);
    }

    /// \cond INTERNAL
    void _iceI_cookie(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void sync(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IntfPrx::_iceI_sync, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto syncAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IntfPrx::_iceI_sync, context);
    }

    ::std::function<void()>
    syncAsync(::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Clash::IntfPrx::_iceI_sync, context);
    }

    /// \cond INTERNAL
    void _iceI_sync(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void inS(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IntfPrx::_iceI_inS, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto inSAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IntfPrx::_iceI_inS, context);
    }

    ::std::function<void()>
    inSAsync(::std::function<void()> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Clash::IntfPrx::_iceI_inS, context);
    }

    /// \cond INTERNAL
    void _iceI_inS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void istr(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IntfPrx::_iceI_istr, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto istrAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IntfPrx::_iceI_istr, context);
    }

    ::std::function<void()>
    istrAsync(::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Clash::IntfPrx::_iceI_istr, context);
    }

    /// \cond INTERNAL
    void _iceI_istr(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void op(const ::std::string& context, const ::std::string& current, const ::std::string& response, const ::std::string& ex, const ::std::string& sent, const ::std::string& cookie, const ::std::string& sync, const ::std::string& result, const ::std::string& istr, const ::std::string& ostr, const Ice::optional<::std::string>& proxy, const ::Ice::Context& context_ = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IntfPrx::_iceI_op, context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, context_).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opAsync(const ::std::string& context, const ::std::string& current, const ::std::string& response, const ::std::string& ex, const ::std::string& sent, const ::std::string& cookie, const ::std::string& sync, const ::std::string& result, const ::std::string& istr, const ::std::string& ostr, const Ice::optional<::std::string>& proxy, const ::Ice::Context& context_ = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IntfPrx::_iceI_op, context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, context_);
    }

    ::std::function<void()>
    opAsync(const ::std::string& context, const ::std::string& current, const ::std::string& response, const ::std::string& ex, const ::std::string& sent, const ::std::string& cookie, const ::std::string& sync, const ::std::string& result, const ::std::string& istr, const ::std::string& ostr, const Ice::optional<::std::string>& proxy,
            ::std::function<void()> response_,
            ::std::function<void(::std::exception_ptr)> ex_ = nullptr,
            ::std::function<void(bool)> sent_ = nullptr,
            const ::Ice::Context& context_ = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response_), std::move(ex_), std::move(sent_), this, &Clash::IntfPrx::_iceI_op, context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, context_);
    }

    /// \cond INTERNAL
    void _iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const Ice::optional<::std::string>&, const ::Ice::Context&);
    /// \endcond

    void opOut(::std::string& context, ::std::string& current, ::std::string& response, ::std::string& ex, ::std::string& sent, ::std::string& cookie, ::std::string& sync, ::std::string& result, ::std::string& istr, ::std::string& ostr, Ice::optional<::std::string>& proxy, const ::Ice::Context& context_ = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Intf::OpOutResult>(true, this, &IntfPrx::_iceI_opOut, context_).get();
        context = ::std::move(_result.context);
        current = ::std::move(_result.current);
        response = ::std::move(_result.response);
        ex = ::std::move(_result.ex);
        sent = ::std::move(_result.sent);
        cookie = ::std::move(_result.cookie);
        sync = ::std::move(_result.sync);
        result = ::std::move(_result.result);
        istr = ::std::move(_result.istr);
        ostr = ::std::move(_result.ostr);
        proxy = ::std::move(_result.proxy);
    }

    template<template<typename> class P = ::std::promise>
    auto opOutAsync(const ::Ice::Context& context_ = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Intf::OpOutResult>>().get_future())
    {
        return _makePromiseOutgoing<Intf::OpOutResult, P>(false, this, &IntfPrx::_iceI_opOut, context_);
    }

    ::std::function<void()>
    opOutAsync(::std::function<void(::std::string, ::std::string, ::std::string, ::std::string, ::std::string, ::std::string, ::std::string, ::std::string, ::std::string, ::std::string, Ice::optional<::std::string>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context_ = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Intf::OpOutResult&& _result)
        {
            response(::std::move(_result.context), ::std::move(_result.current), ::std::move(_result.response), ::std::move(_result.ex), ::std::move(_result.sent), ::std::move(_result.cookie), ::std::move(_result.sync), ::std::move(_result.result), ::std::move(_result.istr), ::std::move(_result.ostr), ::std::move(_result.proxy));
        };
        return _makeLamdaOutgoing<Intf::OpOutResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Clash::IntfPrx::_iceI_opOut, context_);
    }

    /// \cond INTERNAL
    void _iceI_opOut(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Intf::OpOutResult>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    IntfPrx() = default;
    friend ::std::shared_ptr<IntfPrx> IceInternal::createProxy<IntfPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter<::Clash::Cls, S>
{
    static void write(S* ostr, const ::Clash::Cls& v)
    {
        ostr->writeAll(v.s, v.context, v.current, v.response, v.upCast, v.typeId, v.del, v.ex, v.result, v.istr, v.ostr, v.inS, v.in, v.proxy);
        ostr->writeAll({1}, v.cookie);
    }
};

template<typename S>
struct StreamReader<::Clash::Cls, S>
{
    static void read(S* istr, ::Clash::Cls& v)
    {
        istr->readAll(v.s, v.context, v.current, v.response, v.upCast, v.typeId, v.del, v.ex, v.result, v.istr, v.ostr, v.inS, v.in, v.proxy);
        istr->readAll({1}, v.cookie);
    }
};

template<>
struct StreamableTraits<::Clash::St>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 11;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Clash::St, S>
{
    static void read(S* istr, ::Clash::St& v)
    {
        istr->readAll(v.v, v.istr, v.ostr, v.rhs);
    }
};

template<typename S>
struct StreamReader<::Clash::Ex, S>
{
    static void read(S* istr, ::Clash::Ex& v)
    {
        istr->readAll(v.istr, v.ostr);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Clash
{

using IntfPtr = ::std::shared_ptr<Intf>;
using IntfPrxPtr = ::std::shared_ptr<IntfPrx>;

using ClsPtr = ::std::shared_ptr<Cls>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Clash
{

class Intf;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Intf>&);
::IceProxy::Ice::Object* upCast(Intf*);
/// \endcond

class Cls;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Cls>&);
::IceProxy::Ice::Object* upCast(Cls*);
/// \endcond

}

}

namespace Clash
{

class Intf;
/// \cond INTERNAL
::Ice::Object* upCast(Intf*);
/// \endcond
typedef ::IceInternal::Handle< Intf> IntfPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Clash::Intf> IntfPrx;
typedef IntfPrx IntfPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(IntfPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class Cls;
/// \cond INTERNAL
::Ice::Object* upCast(Cls*);
/// \endcond
typedef ::IceInternal::Handle< Cls> ClsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Clash::Cls> ClsPrx;
typedef ClsPrx ClsPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(ClsPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Clash
{

struct St
{
    ::std::string v;
    ::Ice::Short istr;
    ::Ice::Int ostr;
    ::Ice::Int rhs;

    bool operator==(const St& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(v != rhs_.v)
        {
            return false;
        }
        if(istr != rhs_.istr)
        {
            return false;
        }
        if(ostr != rhs_.ostr)
        {
            return false;
        }
        if(rhs != rhs_.rhs)
        {
            return false;
        }
        return true;
    }

    bool operator<(const St& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(v < rhs_.v)
        {
            return true;
        }
        else if(rhs_.v < v)
        {
            return false;
        }
        if(istr < rhs_.istr)
        {
            return true;
        }
        else if(rhs_.istr < istr)
        {
            return false;
        }
        if(ostr < rhs_.ostr)
        {
            return true;
        }
        else if(rhs_.ostr < ostr)
        {
            return false;
        }
        if(rhs < rhs_.rhs)
        {
            return true;
        }
        else if(rhs_.rhs < rhs)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const St& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const St& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const St& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const St& rhs_) const
    {
        return !operator<(rhs_);
    }
};

class Ex : public ::Ice::UserException
{
public:

    Ex() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    Ex(::Ice::Short istr, ::Ice::Int ostr);

#ifdef ICE_CPP11_COMPILER
    Ex(const Ex&) = default;
    virtual ~Ex();
#else
    virtual ~Ex() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual Ex* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Short istr;
    ::Ice::Int ostr;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static Ex _iceS_Ex_init;
/// \endcond

}

namespace Clash
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Clash::Intf::begin_context.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_context.
 */
class Callback_Intf_context_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Intf_context_Base> Callback_Intf_contextPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Clash::Intf::begin_current.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_current.
 */
class Callback_Intf_current_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Intf_current_Base> Callback_Intf_currentPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Clash::Intf::begin_response.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_response.
 */
class Callback_Intf_response_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Intf_response_Base> Callback_Intf_responsePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Clash::Intf::begin_upCast.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_upCast.
 */
class Callback_Intf_upCast_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Intf_upCast_Base> Callback_Intf_upCastPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Clash::Intf::begin_typeId.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_typeId.
 */
class Callback_Intf_typeId_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Intf_typeId_Base> Callback_Intf_typeIdPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Clash::Intf::begin_del.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_del.
 */
class Callback_Intf_del_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Intf_del_Base> Callback_Intf_delPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Clash::Intf::begin_cookie.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_cookie.
 */
class Callback_Intf_cookie_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Intf_cookie_Base> Callback_Intf_cookiePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Clash::Intf::begin_sync.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_sync.
 */
class Callback_Intf_sync_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Intf_sync_Base> Callback_Intf_syncPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Clash::Intf::begin_inS.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_inS.
 */
class Callback_Intf_inS_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Intf_inS_Base> Callback_Intf_inSPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Clash::Intf::begin_istr.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_istr.
 */
class Callback_Intf_istr_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Intf_istr_Base> Callback_Intf_istrPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Clash::Intf::begin_op.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_op.
 */
class Callback_Intf_op_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Intf_op_Base> Callback_Intf_opPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Clash::Intf::begin_opOut.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_opOut.
 */
class Callback_Intf_opOut_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Intf_opOut_Base> Callback_Intf_opOutPtr;

}

namespace IceProxy
{

namespace Clash
{

class Intf : public virtual ::Ice::Proxy<Intf, ::IceProxy::Ice::Object>
{
public:

    void context(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_context(_iceI_begin_context(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_context(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_context(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_context(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_context(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_context(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_context(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_context(const ::Clash::Callback_Intf_contextPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_context(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_context(const ::Ice::Context& context, const ::Clash::Callback_Intf_contextPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_context(context, cb, cookie);
    }

    void end_context(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_context(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void current(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_current(_iceI_begin_current(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_current(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_current(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_current(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_current(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_current(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_current(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_current(const ::Clash::Callback_Intf_currentPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_current(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_current(const ::Ice::Context& context, const ::Clash::Callback_Intf_currentPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_current(context, cb, cookie);
    }

    void end_current(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_current(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void response(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_response(_iceI_begin_response(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_response(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_response(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_response(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_response(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_response(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_response(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_response(const ::Clash::Callback_Intf_responsePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_response(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_response(const ::Ice::Context& context, const ::Clash::Callback_Intf_responsePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_response(context, cb, cookie);
    }

    void end_response(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_response(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void upCast(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_upCast(_iceI_begin_upCast(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_upCast(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_upCast(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_upCast(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_upCast(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_upCast(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_upCast(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_upCast(const ::Clash::Callback_Intf_upCastPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_upCast(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_upCast(const ::Ice::Context& context, const ::Clash::Callback_Intf_upCastPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_upCast(context, cb, cookie);
    }

    void end_upCast(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_upCast(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void typeId(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_typeId(_iceI_begin_typeId(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_typeId(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_typeId(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_typeId(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_typeId(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_typeId(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_typeId(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_typeId(const ::Clash::Callback_Intf_typeIdPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_typeId(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_typeId(const ::Ice::Context& context, const ::Clash::Callback_Intf_typeIdPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_typeId(context, cb, cookie);
    }

    void end_typeId(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_typeId(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void del(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_del(_iceI_begin_del(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_del(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_del(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_del(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_del(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_del(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_del(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_del(const ::Clash::Callback_Intf_delPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_del(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_del(const ::Ice::Context& context, const ::Clash::Callback_Intf_delPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_del(context, cb, cookie);
    }

    void end_del(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_del(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void cookie(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_cookie(_iceI_begin_cookie(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_cookie(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_cookie(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cookie(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_cookie(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_cookie(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_cookie(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_cookie(const ::Clash::Callback_Intf_cookiePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_cookie(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_cookie(const ::Ice::Context& context, const ::Clash::Callback_Intf_cookiePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_cookie(context, cb, cookie);
    }

    void end_cookie(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_cookie(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void sync(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sync(_iceI_begin_sync(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sync(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sync(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sync(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sync(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sync(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sync(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sync(const ::Clash::Callback_Intf_syncPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sync(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sync(const ::Ice::Context& context, const ::Clash::Callback_Intf_syncPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sync(context, cb, cookie);
    }

    void end_sync(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sync(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void inS(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_inS(_iceI_begin_inS(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_inS(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_inS(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_inS(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_inS(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_inS(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_inS(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_inS(const ::Clash::Callback_Intf_inSPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_inS(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_inS(const ::Ice::Context& context, const ::Clash::Callback_Intf_inSPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_inS(context, cb, cookie);
    }

    void end_inS(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_inS(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void istr(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_istr(_iceI_begin_istr(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_istr(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_istr(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_istr(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_istr(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_istr(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_istr(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_istr(const ::Clash::Callback_Intf_istrPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_istr(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_istr(const ::Ice::Context& context, const ::Clash::Callback_Intf_istrPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_istr(context, cb, cookie);
    }

    void end_istr(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_istr(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void op(const ::std::string& context, const ::std::string& current, const ::std::string& response, const ::std::string& ex, const ::std::string& sent, const ::std::string& cookie, const ::std::string& sync, const ::std::string& result, const ::std::string& istr, const ::std::string& ostr, const IceUtil::Optional< ::std::string>& proxy, const ::Ice::Context& context_ = ::Ice::noExplicitContext)
    {
        end_op(_iceI_begin_op(context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, context_, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_op(const ::std::string& context, const ::std::string& current, const ::std::string& response, const ::std::string& ex, const ::std::string& sent, const ::std::string& cookie, const ::std::string& sync, const ::std::string& result, const ::std::string& istr, const ::std::string& ostr, const IceUtil::Optional< ::std::string>& proxy, const ::Ice::Context& context_ = ::Ice::noExplicitContext)
    {
        return _iceI_begin_op(context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, context_, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_op(const ::std::string& context, const ::std::string& current, const ::std::string& response, const ::std::string& ex, const ::std::string& sent, const ::std::string& cookie, const ::std::string& sync, const ::std::string& result, const ::std::string& istr, const ::std::string& ostr, const IceUtil::Optional< ::std::string>& proxy, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie_ = 0)
    {
        return _iceI_begin_op(context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, ::Ice::noExplicitContext, cb, cookie_);
    }

    ::Ice::AsyncResultPtr begin_op(const ::std::string& context, const ::std::string& current, const ::std::string& response, const ::std::string& ex, const ::std::string& sent, const ::std::string& cookie, const ::std::string& sync, const ::std::string& result, const ::std::string& istr, const ::std::string& ostr, const IceUtil::Optional< ::std::string>& proxy, const ::Ice::Context& context_, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie_ = 0)
    {
        return _iceI_begin_op(context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, context_, cb, cookie_);
    }

    ::Ice::AsyncResultPtr begin_op(const ::std::string& context, const ::std::string& current, const ::std::string& response, const ::std::string& ex, const ::std::string& sent, const ::std::string& cookie, const ::std::string& sync, const ::std::string& result, const ::std::string& istr, const ::std::string& ostr, const IceUtil::Optional< ::std::string>& proxy, const ::Clash::Callback_Intf_opPtr& cb, const ::Ice::LocalObjectPtr& cookie_ = 0)
    {
        return _iceI_begin_op(context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, ::Ice::noExplicitContext, cb, cookie_);
    }

    ::Ice::AsyncResultPtr begin_op(const ::std::string& context, const ::std::string& current, const ::std::string& response, const ::std::string& ex, const ::std::string& sent, const ::std::string& cookie, const ::std::string& sync, const ::std::string& result, const ::std::string& istr, const ::std::string& ostr, const IceUtil::Optional< ::std::string>& proxy, const ::Ice::Context& context_, const ::Clash::Callback_Intf_opPtr& cb, const ::Ice::LocalObjectPtr& cookie_ = 0)
    {
        return _iceI_begin_op(context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, context_, cb, cookie_);
    }

    void end_op(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_op(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const IceUtil::Optional< ::std::string>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void opOut(::std::string& context, ::std::string& current, ::std::string& response, ::std::string& ex, ::std::string& sent, ::std::string& cookie, ::std::string& sync, ::std::string& result, ::std::string& istr, ::std::string& ostr, IceUtil::Optional< ::std::string>& proxy, const ::Ice::Context& context_ = ::Ice::noExplicitContext)
    {
        end_opOut(context, current, response, ex, sent, cookie, sync, result, istr, ostr, proxy, _iceI_begin_opOut(context_, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opOut(const ::Ice::Context& context_ = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opOut(context_, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opOut(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie_ = 0)
    {
        return _iceI_begin_opOut(::Ice::noExplicitContext, cb, cookie_);
    }

    ::Ice::AsyncResultPtr begin_opOut(const ::Ice::Context& context_, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie_ = 0)
    {
        return _iceI_begin_opOut(context_, cb, cookie_);
    }

    ::Ice::AsyncResultPtr begin_opOut(const ::Clash::Callback_Intf_opOutPtr& cb, const ::Ice::LocalObjectPtr& cookie_ = 0)
    {
        return _iceI_begin_opOut(::Ice::noExplicitContext, cb, cookie_);
    }

    ::Ice::AsyncResultPtr begin_opOut(const ::Ice::Context& context_, const ::Clash::Callback_Intf_opOutPtr& cb, const ::Ice::LocalObjectPtr& cookie_ = 0)
    {
        return _iceI_begin_opOut(context_, cb, cookie_);
    }

    void end_opOut(::std::string& context, ::std::string& current, ::std::string& response, ::std::string& ex, ::std::string& sent, ::std::string& cookie, ::std::string& sync, ::std::string& result, ::std::string& istr, ::std::string& ostr, IceUtil::Optional< ::std::string>& proxy, const ::Ice::AsyncResultPtr& result_);
    /// \cond INTERNAL

    void _iceI_end_opOut(::std::string& iceP_context, ::std::string& iceP_current, ::std::string& iceP_response, ::std::string& iceP_ex, ::std::string& iceP_sent, ::std::string& iceP_cookie, ::std::string& iceP_sync, ::std::string& iceP_result, ::std::string& iceP_istr, ::std::string& iceP_ostr, IceUtil::Optional< ::std::string>& iceP_proxy, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opOut(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Cls : public virtual ::Ice::Proxy<Cls, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Clash
{

class Intf : public virtual ::Ice::Object
{
public:

    typedef IntfPrx ProxyType;
    typedef IntfPtr PointerType;

    virtual ~Intf();

#ifdef ICE_CPP11_COMPILER
    Intf() = default;
    Intf(const Intf&) = default;
    Intf& operator=(const Intf&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void context(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_context(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void current(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_current(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void response(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_response(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void upCast(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_upCast(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void typeId(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_typeId(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void del(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_del(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void cookie(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_cookie(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sync(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sync(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void inS(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_inS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void istr(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_istr(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void op(const ::std::string& context, const ::std::string& current, const ::std::string& response, const ::std::string& ex, const ::std::string& sent, const ::std::string& cookie, const ::std::string& sync, const ::std::string& result, const ::std::string& istr, const ::std::string& ostr, const IceUtil::Optional< ::std::string>& proxy, const ::Ice::Current& current_ = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opOut(::std::string& context, ::std::string& current, ::std::string& response, ::std::string& ex, ::std::string& sent, ::std::string& cookie, ::std::string& sync, ::std::string& result, ::std::string& istr, ::std::string& ostr, IceUtil::Optional< ::std::string>& proxy, const ::Ice::Current& current_ = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opOut(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Intf& lhs, const Intf& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Intf& lhs, const Intf& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class Cls : public virtual ::Ice::Object
{
public:

    typedef ClsPrx ProxyType;
    typedef ClsPtr PointerType;

    virtual ~Cls();

    Cls()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    Cls(const ::Clash::IntfPrx& s, const ::std::string& context, ::Ice::Int current, ::Ice::Short response, const ::std::string& upCast, ::Ice::Int typeId, ::Ice::Short del, const IceUtil::Optional< ::Ice::Short>& cookie, const ::std::string& ex, ::Ice::Int result, const ::std::string& istr, const ::std::string& ostr, const ::std::string& inS, const ::std::string& in, const ::std::string& proxy) :
        s(s),
        context(context),
        current(current),
        response(response),
        upCast(upCast),
        typeId(typeId),
        del(del),
        cookie(cookie),
        ex(ex),
        result(result),
        istr(istr),
        ostr(ostr),
        inS(inS),
        in(in),
        proxy(proxy)
    {
    }

#ifdef ICE_CPP11_COMPILER
    Cls(const Cls&) = default;
    Cls& operator=(const Cls&) = default;
#endif

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Clash::IntfPrx s;
    ::std::string context;
    ::Ice::Int current;
    ::Ice::Short response;
    ::std::string upCast;
    ::Ice::Int typeId;
    ::Ice::Short del;
    IceUtil::Optional< ::Ice::Short> cookie;
    ::std::string ex;
    ::Ice::Int result;
    ::std::string istr;
    ::std::string ostr;
    ::std::string inS;
    ::std::string in;
    ::std::string proxy;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_Cls_init = ::Clash::Cls::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const Cls& lhs, const Cls& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Cls& lhs, const Cls& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::Clash::Cls, S>
{
    static void write(S* ostr, const ::Clash::Cls& v)
    {
        ostr->write(v.s);
        ostr->write(v.context);
        ostr->write(v.current);
        ostr->write(v.response);
        ostr->write(v.upCast);
        ostr->write(v.typeId);
        ostr->write(v.del);
        ostr->write(v.ex);
        ostr->write(v.result);
        ostr->write(v.istr);
        ostr->write(v.ostr);
        ostr->write(v.inS);
        ostr->write(v.in);
        ostr->write(v.proxy);
        ostr->write(1, v.cookie);
    }
};

template<typename S>
struct StreamReader< ::Clash::Cls, S>
{
    static void read(S* istr, ::Clash::Cls& v)
    {
        istr->read(v.s);
        istr->read(v.context);
        istr->read(v.current);
        istr->read(v.response);
        istr->read(v.upCast);
        istr->read(v.typeId);
        istr->read(v.del);
        istr->read(v.ex);
        istr->read(v.result);
        istr->read(v.istr);
        istr->read(v.ostr);
        istr->read(v.inS);
        istr->read(v.in);
        istr->read(v.proxy);
        istr->read(1, v.cookie);
    }
};

template<>
struct StreamableTraits< ::Clash::St>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 11;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Clash::St, S>
{
    static void write(S* ostr, const ::Clash::St& v)
    {
        ostr->write(v.v);
        ostr->write(v.istr);
        ostr->write(v.ostr);
        ostr->write(v.rhs);
    }
};

template<typename S>
struct StreamReader< ::Clash::St, S>
{
    static void read(S* istr, ::Clash::St& v)
    {
        istr->read(v.v);
        istr->read(v.istr);
        istr->read(v.ostr);
        istr->read(v.rhs);
    }
};

template<>
struct StreamableTraits< ::Clash::Ex>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Clash::Ex, S>
{
    static void write(S* ostr, const ::Clash::Ex& v)
    {
        ostr->write(v.istr);
        ostr->write(v.ostr);
    }
};

template<typename S>
struct StreamReader< ::Clash::Ex, S>
{
    static void read(S* istr, ::Clash::Ex& v)
    {
        istr->read(v.istr);
        istr->read(v.ostr);
    }
};

}
/// \endcond

namespace Clash
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Clash::Intf::begin_context.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_context.
 */
template<class T>
class CallbackNC_Intf_context : public Callback_Intf_context_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Intf_context(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_context.
 */
template<class T> Callback_Intf_contextPtr
newCallback_Intf_context(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_context<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_context.
 */
template<class T> Callback_Intf_contextPtr
newCallback_Intf_context(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_context<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_context.
 */
template<class T> Callback_Intf_contextPtr
newCallback_Intf_context(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_context<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_context.
 */
template<class T> Callback_Intf_contextPtr
newCallback_Intf_context(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_context<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Clash::Intf::begin_context.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_context.
 */
template<class T, typename CT>
class Callback_Intf_context : public Callback_Intf_context_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Intf_context(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_context.
 */
template<class T, typename CT> Callback_Intf_contextPtr
newCallback_Intf_context(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_context<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_context.
 */
template<class T, typename CT> Callback_Intf_contextPtr
newCallback_Intf_context(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_context<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_context.
 */
template<class T, typename CT> Callback_Intf_contextPtr
newCallback_Intf_context(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_context<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_context.
 */
template<class T, typename CT> Callback_Intf_contextPtr
newCallback_Intf_context(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_context<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Clash::Intf::begin_current.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_current.
 */
template<class T>
class CallbackNC_Intf_current : public Callback_Intf_current_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Intf_current(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_current.
 */
template<class T> Callback_Intf_currentPtr
newCallback_Intf_current(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_current<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_current.
 */
template<class T> Callback_Intf_currentPtr
newCallback_Intf_current(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_current<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_current.
 */
template<class T> Callback_Intf_currentPtr
newCallback_Intf_current(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_current<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_current.
 */
template<class T> Callback_Intf_currentPtr
newCallback_Intf_current(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_current<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Clash::Intf::begin_current.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_current.
 */
template<class T, typename CT>
class Callback_Intf_current : public Callback_Intf_current_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Intf_current(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_current.
 */
template<class T, typename CT> Callback_Intf_currentPtr
newCallback_Intf_current(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_current<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_current.
 */
template<class T, typename CT> Callback_Intf_currentPtr
newCallback_Intf_current(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_current<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_current.
 */
template<class T, typename CT> Callback_Intf_currentPtr
newCallback_Intf_current(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_current<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_current.
 */
template<class T, typename CT> Callback_Intf_currentPtr
newCallback_Intf_current(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_current<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Clash::Intf::begin_response.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_response.
 */
template<class T>
class CallbackNC_Intf_response : public Callback_Intf_response_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Intf_response(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_response.
 */
template<class T> Callback_Intf_responsePtr
newCallback_Intf_response(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_response<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_response.
 */
template<class T> Callback_Intf_responsePtr
newCallback_Intf_response(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_response<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_response.
 */
template<class T> Callback_Intf_responsePtr
newCallback_Intf_response(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_response<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_response.
 */
template<class T> Callback_Intf_responsePtr
newCallback_Intf_response(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_response<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Clash::Intf::begin_response.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_response.
 */
template<class T, typename CT>
class Callback_Intf_response : public Callback_Intf_response_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Intf_response(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_response.
 */
template<class T, typename CT> Callback_Intf_responsePtr
newCallback_Intf_response(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_response<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_response.
 */
template<class T, typename CT> Callback_Intf_responsePtr
newCallback_Intf_response(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_response<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_response.
 */
template<class T, typename CT> Callback_Intf_responsePtr
newCallback_Intf_response(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_response<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_response.
 */
template<class T, typename CT> Callback_Intf_responsePtr
newCallback_Intf_response(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_response<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Clash::Intf::begin_upCast.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_upCast.
 */
template<class T>
class CallbackNC_Intf_upCast : public Callback_Intf_upCast_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Intf_upCast(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_upCast.
 */
template<class T> Callback_Intf_upCastPtr
newCallback_Intf_upCast(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_upCast<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_upCast.
 */
template<class T> Callback_Intf_upCastPtr
newCallback_Intf_upCast(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_upCast<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_upCast.
 */
template<class T> Callback_Intf_upCastPtr
newCallback_Intf_upCast(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_upCast<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_upCast.
 */
template<class T> Callback_Intf_upCastPtr
newCallback_Intf_upCast(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_upCast<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Clash::Intf::begin_upCast.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_upCast.
 */
template<class T, typename CT>
class Callback_Intf_upCast : public Callback_Intf_upCast_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Intf_upCast(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_upCast.
 */
template<class T, typename CT> Callback_Intf_upCastPtr
newCallback_Intf_upCast(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_upCast<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_upCast.
 */
template<class T, typename CT> Callback_Intf_upCastPtr
newCallback_Intf_upCast(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_upCast<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_upCast.
 */
template<class T, typename CT> Callback_Intf_upCastPtr
newCallback_Intf_upCast(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_upCast<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_upCast.
 */
template<class T, typename CT> Callback_Intf_upCastPtr
newCallback_Intf_upCast(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_upCast<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Clash::Intf::begin_typeId.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_typeId.
 */
template<class T>
class CallbackNC_Intf_typeId : public Callback_Intf_typeId_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Intf_typeId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_typeId.
 */
template<class T> Callback_Intf_typeIdPtr
newCallback_Intf_typeId(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_typeId<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_typeId.
 */
template<class T> Callback_Intf_typeIdPtr
newCallback_Intf_typeId(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_typeId<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_typeId.
 */
template<class T> Callback_Intf_typeIdPtr
newCallback_Intf_typeId(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_typeId<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_typeId.
 */
template<class T> Callback_Intf_typeIdPtr
newCallback_Intf_typeId(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_typeId<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Clash::Intf::begin_typeId.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_typeId.
 */
template<class T, typename CT>
class Callback_Intf_typeId : public Callback_Intf_typeId_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Intf_typeId(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_typeId.
 */
template<class T, typename CT> Callback_Intf_typeIdPtr
newCallback_Intf_typeId(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_typeId<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_typeId.
 */
template<class T, typename CT> Callback_Intf_typeIdPtr
newCallback_Intf_typeId(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_typeId<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_typeId.
 */
template<class T, typename CT> Callback_Intf_typeIdPtr
newCallback_Intf_typeId(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_typeId<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_typeId.
 */
template<class T, typename CT> Callback_Intf_typeIdPtr
newCallback_Intf_typeId(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_typeId<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Clash::Intf::begin_del.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_del.
 */
template<class T>
class CallbackNC_Intf_del : public Callback_Intf_del_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Intf_del(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_del.
 */
template<class T> Callback_Intf_delPtr
newCallback_Intf_del(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_del<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_del.
 */
template<class T> Callback_Intf_delPtr
newCallback_Intf_del(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_del<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_del.
 */
template<class T> Callback_Intf_delPtr
newCallback_Intf_del(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_del<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_del.
 */
template<class T> Callback_Intf_delPtr
newCallback_Intf_del(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_del<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Clash::Intf::begin_del.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_del.
 */
template<class T, typename CT>
class Callback_Intf_del : public Callback_Intf_del_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Intf_del(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_del.
 */
template<class T, typename CT> Callback_Intf_delPtr
newCallback_Intf_del(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_del<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_del.
 */
template<class T, typename CT> Callback_Intf_delPtr
newCallback_Intf_del(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_del<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_del.
 */
template<class T, typename CT> Callback_Intf_delPtr
newCallback_Intf_del(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_del<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_del.
 */
template<class T, typename CT> Callback_Intf_delPtr
newCallback_Intf_del(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_del<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Clash::Intf::begin_cookie.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_cookie.
 */
template<class T>
class CallbackNC_Intf_cookie : public Callback_Intf_cookie_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Intf_cookie(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_cookie.
 */
template<class T> Callback_Intf_cookiePtr
newCallback_Intf_cookie(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_cookie<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_cookie.
 */
template<class T> Callback_Intf_cookiePtr
newCallback_Intf_cookie(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_cookie<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_cookie.
 */
template<class T> Callback_Intf_cookiePtr
newCallback_Intf_cookie(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_cookie<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_cookie.
 */
template<class T> Callback_Intf_cookiePtr
newCallback_Intf_cookie(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_cookie<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Clash::Intf::begin_cookie.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_cookie.
 */
template<class T, typename CT>
class Callback_Intf_cookie : public Callback_Intf_cookie_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Intf_cookie(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_cookie.
 */
template<class T, typename CT> Callback_Intf_cookiePtr
newCallback_Intf_cookie(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_cookie<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_cookie.
 */
template<class T, typename CT> Callback_Intf_cookiePtr
newCallback_Intf_cookie(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_cookie<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_cookie.
 */
template<class T, typename CT> Callback_Intf_cookiePtr
newCallback_Intf_cookie(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_cookie<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_cookie.
 */
template<class T, typename CT> Callback_Intf_cookiePtr
newCallback_Intf_cookie(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_cookie<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Clash::Intf::begin_sync.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_sync.
 */
template<class T>
class CallbackNC_Intf_sync : public Callback_Intf_sync_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Intf_sync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_sync.
 */
template<class T> Callback_Intf_syncPtr
newCallback_Intf_sync(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_sync<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_sync.
 */
template<class T> Callback_Intf_syncPtr
newCallback_Intf_sync(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_sync<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_sync.
 */
template<class T> Callback_Intf_syncPtr
newCallback_Intf_sync(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_sync<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_sync.
 */
template<class T> Callback_Intf_syncPtr
newCallback_Intf_sync(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_sync<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Clash::Intf::begin_sync.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_sync.
 */
template<class T, typename CT>
class Callback_Intf_sync : public Callback_Intf_sync_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Intf_sync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_sync.
 */
template<class T, typename CT> Callback_Intf_syncPtr
newCallback_Intf_sync(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_sync<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_sync.
 */
template<class T, typename CT> Callback_Intf_syncPtr
newCallback_Intf_sync(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_sync<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_sync.
 */
template<class T, typename CT> Callback_Intf_syncPtr
newCallback_Intf_sync(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_sync<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_sync.
 */
template<class T, typename CT> Callback_Intf_syncPtr
newCallback_Intf_sync(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_sync<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Clash::Intf::begin_inS.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_inS.
 */
template<class T>
class CallbackNC_Intf_inS : public Callback_Intf_inS_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Intf_inS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_inS.
 */
template<class T> Callback_Intf_inSPtr
newCallback_Intf_inS(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_inS<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_inS.
 */
template<class T> Callback_Intf_inSPtr
newCallback_Intf_inS(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_inS<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_inS.
 */
template<class T> Callback_Intf_inSPtr
newCallback_Intf_inS(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_inS<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_inS.
 */
template<class T> Callback_Intf_inSPtr
newCallback_Intf_inS(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_inS<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Clash::Intf::begin_inS.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_inS.
 */
template<class T, typename CT>
class Callback_Intf_inS : public Callback_Intf_inS_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Intf_inS(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_inS.
 */
template<class T, typename CT> Callback_Intf_inSPtr
newCallback_Intf_inS(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_inS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_inS.
 */
template<class T, typename CT> Callback_Intf_inSPtr
newCallback_Intf_inS(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_inS<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_inS.
 */
template<class T, typename CT> Callback_Intf_inSPtr
newCallback_Intf_inS(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_inS<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_inS.
 */
template<class T, typename CT> Callback_Intf_inSPtr
newCallback_Intf_inS(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_inS<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Clash::Intf::begin_istr.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_istr.
 */
template<class T>
class CallbackNC_Intf_istr : public Callback_Intf_istr_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Intf_istr(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_istr.
 */
template<class T> Callback_Intf_istrPtr
newCallback_Intf_istr(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_istr<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_istr.
 */
template<class T> Callback_Intf_istrPtr
newCallback_Intf_istr(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_istr<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_istr.
 */
template<class T> Callback_Intf_istrPtr
newCallback_Intf_istr(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_istr<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_istr.
 */
template<class T> Callback_Intf_istrPtr
newCallback_Intf_istr(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_istr<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Clash::Intf::begin_istr.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_istr.
 */
template<class T, typename CT>
class Callback_Intf_istr : public Callback_Intf_istr_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Intf_istr(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_istr.
 */
template<class T, typename CT> Callback_Intf_istrPtr
newCallback_Intf_istr(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_istr<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_istr.
 */
template<class T, typename CT> Callback_Intf_istrPtr
newCallback_Intf_istr(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_istr<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_istr.
 */
template<class T, typename CT> Callback_Intf_istrPtr
newCallback_Intf_istr(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_istr<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_istr.
 */
template<class T, typename CT> Callback_Intf_istrPtr
newCallback_Intf_istr(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_istr<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Clash::Intf::begin_op.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_op.
 */
template<class T>
class CallbackNC_Intf_op : public Callback_Intf_op_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Intf_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_op.
 */
template<class T> Callback_Intf_opPtr
newCallback_Intf_op(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_op<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_op.
 */
template<class T> Callback_Intf_opPtr
newCallback_Intf_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_op<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_op.
 */
template<class T> Callback_Intf_opPtr
newCallback_Intf_op(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_op<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_op.
 */
template<class T> Callback_Intf_opPtr
newCallback_Intf_op(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_op<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Clash::Intf::begin_op.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_op.
 */
template<class T, typename CT>
class Callback_Intf_op : public Callback_Intf_op_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Intf_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_op.
 */
template<class T, typename CT> Callback_Intf_opPtr
newCallback_Intf_op(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_op<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_op.
 */
template<class T, typename CT> Callback_Intf_opPtr
newCallback_Intf_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_op<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_op.
 */
template<class T, typename CT> Callback_Intf_opPtr
newCallback_Intf_op(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_op<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_op.
 */
template<class T, typename CT> Callback_Intf_opPtr
newCallback_Intf_op(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_op<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Clash::Intf::begin_opOut.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_opOut.
 */
template<class T>
class CallbackNC_Intf_opOut : public Callback_Intf_opOut_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const IceUtil::Optional< ::std::string>&);

    CallbackNC_Intf_opOut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IntfPrx proxy = IntfPrx::uncheckedCast(result->getProxy());
        ::std::string iceP_context;
        ::std::string iceP_current;
        ::std::string iceP_response;
        ::std::string iceP_ex;
        ::std::string iceP_sent;
        ::std::string iceP_cookie;
        ::std::string iceP_sync;
        ::std::string iceP_result;
        ::std::string iceP_istr;
        ::std::string iceP_ostr;
        IceUtil::Optional< ::std::string> iceP_proxy;
        try
        {
            proxy->end_opOut(iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_opOut.
 */
template<class T> Callback_Intf_opOutPtr
newCallback_Intf_opOut(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const IceUtil::Optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_opOut<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_opOut.
 */
template<class T> Callback_Intf_opOutPtr
newCallback_Intf_opOut(T* instance, void (T::*cb)(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const IceUtil::Optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Intf_opOut<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Clash::Intf::begin_opOut.
 * Create a wrapper instance by calling ::Clash::newCallback_Intf_opOut.
 */
template<class T, typename CT>
class Callback_Intf_opOut : public Callback_Intf_opOut_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const IceUtil::Optional< ::std::string>&, const CT&);

    Callback_Intf_opOut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IntfPrx proxy = IntfPrx::uncheckedCast(result->getProxy());
        ::std::string iceP_context;
        ::std::string iceP_current;
        ::std::string iceP_response;
        ::std::string iceP_ex;
        ::std::string iceP_sent;
        ::std::string iceP_cookie;
        ::std::string iceP_sync;
        ::std::string iceP_result;
        ::std::string iceP_istr;
        ::std::string iceP_ostr;
        IceUtil::Optional< ::std::string> iceP_proxy;
        try
        {
            proxy->end_opOut(iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_context, iceP_current, iceP_response, iceP_ex, iceP_sent, iceP_cookie, iceP_sync, iceP_result, iceP_istr, iceP_ostr, iceP_proxy, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_opOut.
 */
template<class T, typename CT> Callback_Intf_opOutPtr
newCallback_Intf_opOut(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const IceUtil::Optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_opOut<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Clash::Intf::begin_opOut.
 */
template<class T, typename CT> Callback_Intf_opOutPtr
newCallback_Intf_opOut(T* instance, void (T::*cb)(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const IceUtil::Optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Intf_opOut<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
