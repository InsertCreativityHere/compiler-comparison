// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

std::ostream&
Test::operator<<(std::ostream& os, MyEnum value)
{
    switch (value)
    {
        case MyEnum::enum1:
            return os << "enum1";
        case MyEnum::enum2:
            return os << "enum2";
        case MyEnum::enum3:
            return os << "enum3";
        default:
            return os << static_cast<std::int32_t>(value);
    }
}

std::ostream&
Test::Sub::operator<<(std::ostream& os, NestedEnum value)
{
    switch (value)
    {
        case NestedEnum::nestedEnum1:
            return os << "nestedEnum1";
        case NestedEnum::nestedEnum2:
            return os << "nestedEnum2";
        case NestedEnum::nestedEnum3:
            return os << "nestedEnum3";
        default:
            return os << static_cast<std::int32_t>(value);
    }
}

std::ostream&
Test2::Sub2::operator<<(std::ostream& os, NestedEnum2 value)
{
    switch (value)
    {
        case NestedEnum2::nestedEnum4:
            return os << "nestedEnum4";
        case NestedEnum2::nestedEnum5:
            return os << "nestedEnum5";
        case NestedEnum2::nestedEnum6:
            return os << "nestedEnum6";
        default:
            return os << static_cast<std::int32_t>(value);
    }
}

namespace
{
    const IceInternal::FactoryTableInit iceC_factoryTableInit;
    const IceInternal::DefaultValueFactoryInit<::Test::OptionalClass> iceC_Test_OptionalClass_init("::Test::OptionalClass");
    const IceInternal::DefaultValueFactoryInit<::Test::MyClass> iceC_Test_MyClass_init("::Test::MyClass");
    const IceInternal::DefaultUserExceptionFactoryInit<::Test::MyException> iceC_Test_MyException_init("::Test::MyException");
    const IceInternal::DefaultUserExceptionFactoryInit<::Test::Sub::NestedException> iceC_Test_Sub_NestedException_init("::Test::Sub::NestedException");
    const IceInternal::DefaultUserExceptionFactoryInit<::Test2::Sub2::NestedException2> iceC_Test2_Sub2_NestedException2_init("::Test2::Sub2::NestedException2");
}

Test::MyInterfacePrx::~MyInterfacePrx() = default;

const char*
Test::MyInterfacePrx::ice_staticId() noexcept
{
    return "::Test::MyInterface";
}

void
Test::LargeStruct::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "bo = ", this->bo);
    Ice::print(os << ", by = ", this->by);
    Ice::print(os << ", sh = ", this->sh);
    Ice::print(os << ", i = ", this->i);
    Ice::print(os << ", l = ", this->l);
    Ice::print(os << ", f = ", this->f);
    Ice::print(os << ", d = ", this->d);
    Ice::print(os << ", str = ", this->str);
    Ice::print(os << ", e = ", this->e);
    Ice::print(os << ", p = ", this->p);
}

std::ostream&
Test::operator<<(std::ostream& os, const ::Test::LargeStruct& value)
{
    os << "Test::LargeStruct{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
Test::OptionalClass::ice_staticId() noexcept
{
    return "::Test::OptionalClass";
}

const char*
Test::OptionalClass::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::OptionalClass::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "bo = ", this->bo);
    Ice::print(os << ", by = ", this->by);
    Ice::print(os << ", sh = ", this->sh);
    Ice::print(os << ", i = ", this->i);
}

Ice::ValuePtr
Test::OptionalClass::_iceCloneImpl() const
{
    return CloneEnabler<OptionalClass>::clone(*this);
}

void
Test::OptionalClass::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->bo, this->by);
    ostr->writeAll({1, 2}, this->sh, this->i);
    ostr->endSlice();
}

void
Test::OptionalClass::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->bo, this->by);
    istr->readAll({1, 2}, this->sh, this->i);
    istr->endSlice();
}

const char*
Test::MyClass::ice_staticId() noexcept
{
    return "::Test::MyClass";
}

const char*
Test::MyClass::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::MyClass::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "c = ", this->c);
    Ice::print(os << ", o = ", this->o);
    Ice::print(os << ", s = ", this->s);
    Ice::print(os << ", seq1 = ", this->seq1);
    Ice::print(os << ", seq2 = ", this->seq2);
    Ice::print(os << ", seq3 = ", this->seq3);
    Ice::print(os << ", seq4 = ", this->seq4);
    Ice::print(os << ", seq5 = ", this->seq5);
    Ice::print(os << ", seq6 = ", this->seq6);
    Ice::print(os << ", seq7 = ", this->seq7);
    Ice::print(os << ", seq8 = ", this->seq8);
    Ice::print(os << ", seq9 = ", this->seq9);
    Ice::print(os << ", seq10 = ", this->seq10);
    Ice::print(os << ", d = ", this->d);
}

Ice::ValuePtr
Test::MyClass::_iceCloneImpl() const
{
    return CloneEnabler<MyClass>::clone(*this);
}

void
Test::MyClass::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->c, this->o, this->s, this->seq1, this->seq2, this->seq3, this->seq4, this->seq5, this->seq6, this->seq7, this->seq8, this->seq9, this->seq10, this->d);
    ostr->endSlice();
}

void
Test::MyClass::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->c, this->o, this->s, this->seq1, this->seq2, this->seq3, this->seq4, this->seq5, this->seq6, this->seq7, this->seq8, this->seq9, this->seq10, this->d);
    istr->endSlice();
}

void
Test::MyException::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "c = ", this->c);
}

const char*
Test::MyException::ice_staticId() noexcept
{
    return "::Test::MyException";
}

const char*
Test::MyException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::MyException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
bool
Test::MyException::_usesClasses() const
{
    return true;
}
/// \endcond

void
Test::MyException::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->c);
    ostr->endSlice();
}

void
Test::MyException::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->c);
    istr->endSlice();
}

void
Test::Sub::NestedStruct::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "bo = ", this->bo);
    Ice::print(os << ", by = ", this->by);
    Ice::print(os << ", sh = ", this->sh);
    Ice::print(os << ", i = ", this->i);
    Ice::print(os << ", l = ", this->l);
    Ice::print(os << ", f = ", this->f);
    Ice::print(os << ", d = ", this->d);
    Ice::print(os << ", str = ", this->str);
    Ice::print(os << ", e = ", this->e);
}

std::ostream&
Test::Sub::operator<<(std::ostream& os, const ::Test::Sub::NestedStruct& value)
{
    os << "Test::Sub::NestedStruct{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
Test::Sub::NestedException::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "str = ", this->str);
}

const char*
Test::Sub::NestedException::ice_staticId() noexcept
{
    return "::Test::Sub::NestedException";
}

const char*
Test::Sub::NestedException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::Sub::NestedException::ice_throw() const
{
    throw *this;
}

void
Test::Sub::NestedException::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->str);
    ostr->endSlice();
}

void
Test::Sub::NestedException::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->str);
    istr->endSlice();
}

void
Test2::Sub2::NestedStruct2::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "bo = ", this->bo);
    Ice::print(os << ", by = ", this->by);
    Ice::print(os << ", sh = ", this->sh);
    Ice::print(os << ", i = ", this->i);
    Ice::print(os << ", l = ", this->l);
    Ice::print(os << ", f = ", this->f);
    Ice::print(os << ", d = ", this->d);
    Ice::print(os << ", str = ", this->str);
    Ice::print(os << ", e = ", this->e);
}

std::ostream&
Test2::Sub2::operator<<(std::ostream& os, const ::Test2::Sub2::NestedStruct2& value)
{
    os << "Test2::Sub2::NestedStruct2{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
Test2::Sub2::NestedException2::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "str = ", this->str);
}

const char*
Test2::Sub2::NestedException2::ice_staticId() noexcept
{
    return "::Test2::Sub2::NestedException2";
}

const char*
Test2::Sub2::NestedException2::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test2::Sub2::NestedException2::ice_throw() const
{
    throw *this;
}

void
Test2::Sub2::NestedException2::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->str);
    ostr->endSlice();
}

void
Test2::Sub2::NestedException2::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->str);
    istr->endSlice();
}

std::vector<std::string>
Test::MyInterface::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::Test::MyInterface"};
    return allTypeIds;
}

std::string
Test::MyInterface::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
Test::MyInterface::ice_staticId() noexcept
{
    return "::Test::MyInterface";
}
