//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::OptionalClass> iceC_Test_OptionalClass_init("::Test::OptionalClass");

const ::IceInternal::DefaultValueFactoryInit<::Test::MyClass> iceC_Test_MyClass_init("::Test::MyClass");

const ::std::string iceC_Test_MyInterface_ids[2] =
{
    "::Ice::Object",
    "::Test::MyInterface"
};
const ::std::string iceC_Test_MyInterface_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::MyException> iceC_Test_MyException_init("::Test::MyException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Sub::NestedException> iceC_Test_Sub_NestedException_init("::Test::Sub::NestedException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test2::Sub2::NestedException2> iceC_Test2_Sub2_NestedException2_init("::Test2::Sub2::NestedException2");

}

const ::std::string&
Test::MyInterfacePrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyInterface";
    return typeId;
}

Test::OptionalClass::~OptionalClass()
{
}

const ::std::string&
Test::OptionalClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::OptionalClass";
    return typeId;
}

Test::MyClass::~MyClass()
{
}

const ::std::string&
Test::MyClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyClass";
    return typeId;
}

Test::MyException::~MyException()
{
}

const ::std::string&
Test::MyException::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyException";
    return typeId;
}

/// \cond STREAM
bool
Test::MyException::_usesClasses() const
{
    return true;
}
/// \endcond

Test::Sub::NestedException::~NestedException()
{
}

const ::std::string&
Test::Sub::NestedException::ice_staticId()
{
    static const ::std::string typeId = "::Test::Sub::NestedException";
    return typeId;
}

Test2::Sub2::NestedException2::~NestedException2()
{
}

const ::std::string&
Test2::Sub2::NestedException2::ice_staticId()
{
    static const ::std::string typeId = "::Test2::Sub2::NestedException2";
    return typeId;
}

bool
Test::MyInterface::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyInterface_ids, iceC_Test_MyInterface_ids + 2, s);
}

::std::vector<::std::string>
Test::MyInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MyInterface_ids[0], &iceC_Test_MyInterface_ids[2]);
}

::std::string
Test::MyInterface::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyInterface::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyInterface";
    return typeId;
}
