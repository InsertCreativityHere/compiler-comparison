//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_Test_MA_IA_ids[2] =
{
    "::Ice::Object",
    "::Test::MA::IA"
};
const ::std::string iceC_Test_MA_IA_ops[] =
{
    "iaop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_MA_IA_iaop_name = "iaop";

const ::IceInternal::DefaultValueFactoryInit<::Test::MA::CA> iceC_Test_MA_CA_init("::Test::MA::CA");

const ::std::string iceC_Test_MA_CA_ids[2] =
{
    "::Ice::Object",
    "::Test::MA::CA"
};
const ::std::string iceC_Test_MA_CA_ops[] =
{
    "caop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_MA_CA_caop_name = "caop";

const ::std::string iceC_Test_MB_IB1_ids[3] =
{
    "::Ice::Object",
    "::Test::MA::IA",
    "::Test::MB::IB1"
};
const ::std::string iceC_Test_MB_IB1_ops[] =
{
    "iaop",
    "ib1op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_MB_IB1_ib1op_name = "ib1op";

const ::std::string iceC_Test_MB_IB2_ids[3] =
{
    "::Ice::Object",
    "::Test::MA::IA",
    "::Test::MB::IB2"
};
const ::std::string iceC_Test_MB_IB2_ops[] =
{
    "iaop",
    "ib2op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_MB_IB2_ib2op_name = "ib2op";

const ::IceInternal::DefaultValueFactoryInit<::Test::MB::CB> iceC_Test_MB_CB_init("::Test::MB::CB");

const ::std::string iceC_Test_MB_CB_ids[3] =
{
    "::Ice::Object",
    "::Test::MA::CA",
    "::Test::MB::CB"
};
const ::std::string iceC_Test_MB_CB_ops[] =
{
    "caop",
    "cbop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_MB_CB_cbop_name = "cbop";

const ::std::string iceC_Test_MA_IC_ids[5] =
{
    "::Ice::Object",
    "::Test::MA::IA",
    "::Test::MA::IC",
    "::Test::MB::IB1",
    "::Test::MB::IB2"
};
const ::std::string iceC_Test_MA_IC_ops[] =
{
    "iaop",
    "ib1op",
    "ib2op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "icop"
};
const ::std::string iceC_Test_MA_IC_icop_name = "icop";

const ::IceInternal::DefaultValueFactoryInit<::Test::MA::CC> iceC_Test_MA_CC_init("::Test::MA::CC");

const ::std::string iceC_Test_MA_CC_ids[4] =
{
    "::Ice::Object",
    "::Test::MA::CA",
    "::Test::MA::CC",
    "::Test::MB::CB"
};
const ::std::string iceC_Test_MA_CC_ops[] =
{
    "caop",
    "cbop",
    "ccop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_MA_CC_ccop_name = "ccop";

const ::IceInternal::DefaultValueFactoryInit<::Test::MA::CD> iceC_Test_MA_CD_init("::Test::MA::CD");

const ::std::string iceC_Test_MA_CD_ids[8] =
{
    "::Ice::Object",
    "::Test::MA::CA",
    "::Test::MA::CC",
    "::Test::MA::CD",
    "::Test::MA::IA",
    "::Test::MB::CB",
    "::Test::MB::IB1",
    "::Test::MB::IB2"
};
const ::std::string iceC_Test_MA_CD_ops[] =
{
    "caop",
    "cbop",
    "ccop",
    "cdop",
    "iaop",
    "ib1op",
    "ib2op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Test_MA_CD_cdop_name = "cdop";

const ::std::string iceC_Test_Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};
const ::std::string iceC_Test_Initial_ops[] =
{
    "caop",
    "cbop",
    "ccop",
    "cdop",
    "iaop",
    "ib1op",
    "ib2op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "icop",
    "shutdown"
};
const ::std::string iceC_Test_Initial_shutdown_name = "shutdown";
const ::std::string iceC_Test_Initial_caop_name = "caop";
const ::std::string iceC_Test_Initial_cbop_name = "cbop";
const ::std::string iceC_Test_Initial_ccop_name = "ccop";
const ::std::string iceC_Test_Initial_cdop_name = "cdop";
const ::std::string iceC_Test_Initial_iaop_name = "iaop";
const ::std::string iceC_Test_Initial_ib1op_name = "ib1op";
const ::std::string iceC_Test_Initial_ib2op_name = "ib2op";
const ::std::string iceC_Test_Initial_icop_name = "icop";

const ::IceInternal::DefaultValueFactoryInit<::Test::MC::A> iceC_Test_MC_A_init("::Test::MC::A");

const ::IceInternal::DefaultValueFactoryInit<::Test::MC::B> iceC_Test_MC_B_init("::Test::MC::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::MC::C> iceC_Test_MC_C_init("::Test::MC::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::MC::D> iceC_Test_MC_D_init("::Test::MC::D");

const ::IceInternal::DefaultValueFactoryInit<::Test::MD::A> iceC_Test_MD_A_init("::Test::MD::A");

const ::IceInternal::DefaultValueFactoryInit<::Test::MD::B> iceC_Test_MD_B_init("::Test::MD::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::MD::C> iceC_Test_MD_C_init("::Test::MD::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::MD::D> iceC_Test_MD_D_init("::Test::MD::D");

const ::IceInternal::DefaultValueFactoryInit<::Test::ME::A> iceC_Test_ME_A_init("::Test::ME::A");

const ::IceInternal::DefaultValueFactoryInit<::Test::ME::B> iceC_Test_ME_B_init("::Test::ME::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::ME::C> iceC_Test_ME_C_init("::Test::ME::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::ME::D> iceC_Test_ME_D_init("::Test::ME::D");

const ::IceInternal::DefaultValueFactoryInit<::Test::MF::A> iceC_Test_MF_A_init("::Test::MF::A");

const ::IceInternal::DefaultValueFactoryInit<::Test::MF::B> iceC_Test_MF_B_init("::Test::MF::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::MF::C> iceC_Test_MF_C_init("::Test::MF::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::MF::D> iceC_Test_MF_D_init("::Test::MF::D");

const ::IceInternal::DefaultValueFactoryInit<::Test::MG::A> iceC_Test_MG_A_init("::Test::MG::A");

const ::IceInternal::DefaultValueFactoryInit<::Test::MG::B> iceC_Test_MG_B_init("::Test::MG::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::MG::C> iceC_Test_MG_C_init("::Test::MG::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::MG::D> iceC_Test_MG_D_init("::Test::MG::D");

const ::IceInternal::DefaultValueFactoryInit<::Test::MH::A> iceC_Test_MH_A_init("::Test::MH::A");

const ::IceInternal::DefaultValueFactoryInit<::Test::MH::B> iceC_Test_MH_B_init("::Test::MH::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::MH::C> iceC_Test_MH_C_init("::Test::MH::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::MH::D> iceC_Test_MH_D_init("::Test::MH::D");

}

bool
Test::MA::IA::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MA_IA_ids, iceC_Test_MA_IA_ids + 2, s);
}

::std::vector<::std::string>
Test::MA::IA::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MA_IA_ids[0], &iceC_Test_MA_IA_ids[2]);
}

::std::string
Test::MA::IA::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MA::IA::ice_staticId()
{
    static const ::std::string typeId = "::Test::MA::IA";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MA::IA::_iceD_iaop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<IAPrx> iceP_p;
    istr->readAll(iceP_p);
    inS.endReadParams();
    ::std::shared_ptr<IAPrx> ret = this->iaop(::std::move(iceP_p), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MA::IA::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MA_IA_ops, iceC_Test_MA_IA_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MA_IA_ops)
    {
        case 0:
        {
            return _iceD_iaop(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::MA::CADisp::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MA_CA_ids, iceC_Test_MA_CA_ids + 2, s);
}

::std::vector<::std::string>
Test::MA::CADisp::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MA_CA_ids[0], &iceC_Test_MA_CA_ids[2]);
}

::std::string
Test::MA::CADisp::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MA::CADisp::ice_staticId()
{
    static const ::std::string typeId = "::Test::MA::CA";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MA::CADisp::_iceD_caop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<CAPrx> iceP_p;
    istr->readAll(iceP_p);
    inS.endReadParams();
    ::std::shared_ptr<CAPrx> ret = this->caop(::std::move(iceP_p), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MA::CADisp::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MA_CA_ops, iceC_Test_MA_CA_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MA_CA_ops)
    {
        case 0:
        {
            return _iceD_caop(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::MB::IB1::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MB_IB1_ids, iceC_Test_MB_IB1_ids + 3, s);
}

::std::vector<::std::string>
Test::MB::IB1::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MB_IB1_ids[0], &iceC_Test_MB_IB1_ids[3]);
}

::std::string
Test::MB::IB1::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MB::IB1::ice_staticId()
{
    static const ::std::string typeId = "::Test::MB::IB1";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MB::IB1::_iceD_ib1op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<IB1Prx> iceP_p;
    istr->readAll(iceP_p);
    inS.endReadParams();
    ::std::shared_ptr<IB1Prx> ret = this->ib1op(::std::move(iceP_p), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MB::IB1::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MB_IB1_ops, iceC_Test_MB_IB1_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MB_IB1_ops)
    {
        case 0:
        {
            return _iceD_iaop(in, current);
        }
        case 1:
        {
            return _iceD_ib1op(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::MB::IB2::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MB_IB2_ids, iceC_Test_MB_IB2_ids + 3, s);
}

::std::vector<::std::string>
Test::MB::IB2::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MB_IB2_ids[0], &iceC_Test_MB_IB2_ids[3]);
}

::std::string
Test::MB::IB2::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MB::IB2::ice_staticId()
{
    static const ::std::string typeId = "::Test::MB::IB2";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MB::IB2::_iceD_ib2op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<IB2Prx> iceP_p;
    istr->readAll(iceP_p);
    inS.endReadParams();
    ::std::shared_ptr<IB2Prx> ret = this->ib2op(::std::move(iceP_p), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MB::IB2::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MB_IB2_ops, iceC_Test_MB_IB2_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MB_IB2_ops)
    {
        case 0:
        {
            return _iceD_iaop(in, current);
        }
        case 1:
        {
            return _iceD_ib2op(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::MB::CBDisp::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MB_CB_ids, iceC_Test_MB_CB_ids + 3, s);
}

::std::vector<::std::string>
Test::MB::CBDisp::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MB_CB_ids[0], &iceC_Test_MB_CB_ids[3]);
}

::std::string
Test::MB::CBDisp::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MB::CBDisp::ice_staticId()
{
    static const ::std::string typeId = "::Test::MB::CB";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MB::CBDisp::_iceD_cbop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<CBPrx> iceP_p;
    istr->readAll(iceP_p);
    inS.endReadParams();
    ::std::shared_ptr<CBPrx> ret = this->cbop(::std::move(iceP_p), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MB::CBDisp::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MB_CB_ops, iceC_Test_MB_CB_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MB_CB_ops)
    {
        case 0:
        {
            return _iceD_caop(in, current);
        }
        case 1:
        {
            return _iceD_cbop(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::MA::IC::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MA_IC_ids, iceC_Test_MA_IC_ids + 5, s);
}

::std::vector<::std::string>
Test::MA::IC::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MA_IC_ids[0], &iceC_Test_MA_IC_ids[5]);
}

::std::string
Test::MA::IC::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MA::IC::ice_staticId()
{
    static const ::std::string typeId = "::Test::MA::IC";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MA::IC::_iceD_icop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<ICPrx> iceP_p;
    istr->readAll(iceP_p);
    inS.endReadParams();
    ::std::shared_ptr<ICPrx> ret = this->icop(::std::move(iceP_p), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MA::IC::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MA_IC_ops, iceC_Test_MA_IC_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MA_IC_ops)
    {
        case 0:
        {
            return _iceD_iaop(in, current);
        }
        case 1:
        {
            return _iceD_ib1op(in, current);
        }
        case 2:
        {
            return _iceD_ib2op(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_icop(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::MA::CCDisp::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MA_CC_ids, iceC_Test_MA_CC_ids + 4, s);
}

::std::vector<::std::string>
Test::MA::CCDisp::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MA_CC_ids[0], &iceC_Test_MA_CC_ids[4]);
}

::std::string
Test::MA::CCDisp::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MA::CCDisp::ice_staticId()
{
    static const ::std::string typeId = "::Test::MA::CC";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MA::CCDisp::_iceD_ccop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<CCPrx> iceP_p;
    istr->readAll(iceP_p);
    inS.endReadParams();
    ::std::shared_ptr<CCPrx> ret = this->ccop(::std::move(iceP_p), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MA::CCDisp::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MA_CC_ops, iceC_Test_MA_CC_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MA_CC_ops)
    {
        case 0:
        {
            return _iceD_caop(in, current);
        }
        case 1:
        {
            return _iceD_cbop(in, current);
        }
        case 2:
        {
            return _iceD_ccop(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::MA::CDDisp::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MA_CD_ids, iceC_Test_MA_CD_ids + 8, s);
}

::std::vector<::std::string>
Test::MA::CDDisp::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MA_CD_ids[0], &iceC_Test_MA_CD_ids[8]);
}

::std::string
Test::MA::CDDisp::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MA::CDDisp::ice_staticId()
{
    static const ::std::string typeId = "::Test::MA::CD";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MA::CDDisp::_iceD_cdop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<CDPrx> iceP_p;
    istr->readAll(iceP_p);
    inS.endReadParams();
    ::std::shared_ptr<CDPrx> ret = this->cdop(::std::move(iceP_p), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MA::CDDisp::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MA_CD_ops, iceC_Test_MA_CD_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MA_CD_ops)
    {
        case 0:
        {
            return _iceD_caop(in, current);
        }
        case 1:
        {
            return _iceD_cbop(in, current);
        }
        case 2:
        {
            return _iceD_ccop(in, current);
        }
        case 3:
        {
            return _iceD_cdop(in, current);
        }
        case 4:
        {
            return _iceD_iaop(in, current);
        }
        case 5:
        {
            return _iceD_ib1op(in, current);
        }
        case 6:
        {
            return _iceD_ib2op(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Initial::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial_ids, iceC_Test_Initial_ids + 2, s);
}

::std::vector<::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Initial_ids[0], &iceC_Test_Initial_ids[2]);
}

::std::string
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_caop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::MA::CAPrx> ret = this->caop(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_cbop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::MB::CBPrx> ret = this->cbop(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_ccop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::MA::CCPrx> ret = this->ccop(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_cdop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::MA::CDPrx> ret = this->cdop(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_iaop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::MA::IAPrx> ret = this->iaop(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_ib1op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::MB::IB1Prx> ret = this->ib1op(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_ib2op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::MB::IB2Prx> ret = this->ib2op(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_icop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Test::MA::ICPrx> ret = this->icop(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial_ops, iceC_Test_Initial_ops + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial_ops)
    {
        case 0:
        {
            return _iceD_caop(in, current);
        }
        case 1:
        {
            return _iceD_cbop(in, current);
        }
        case 2:
        {
            return _iceD_ccop(in, current);
        }
        case 3:
        {
            return _iceD_cdop(in, current);
        }
        case 4:
        {
            return _iceD_iaop(in, current);
        }
        case 5:
        {
            return _iceD_ib1op(in, current);
        }
        case 6:
        {
            return _iceD_ib2op(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        case 11:
        {
            return _iceD_icop(in, current);
        }
        case 12:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::MA::CA::~CA()
{
}

const ::std::string&
Test::MA::CA::ice_staticId()
{
    static const ::std::string typeId = "::Test::MA::CA";
    return typeId;
}

Test::MB::CB::~CB()
{
}

const ::std::string&
Test::MB::CB::ice_staticId()
{
    static const ::std::string typeId = "::Test::MB::CB";
    return typeId;
}

Test::MA::CC::~CC()
{
}

const ::std::string&
Test::MA::CC::ice_staticId()
{
    static const ::std::string typeId = "::Test::MA::CC";
    return typeId;
}

Test::MA::CD::~CD()
{
}

const ::std::string&
Test::MA::CD::ice_staticId()
{
    static const ::std::string typeId = "::Test::MA::CD";
    return typeId;
}

Test::MC::A::~A()
{
}

const ::std::string&
Test::MC::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::MC::A";
    return typeId;
}

Test::MC::B::~B()
{
}

const ::std::string&
Test::MC::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::MC::B";
    return typeId;
}

Test::MC::C::~C()
{
}

const ::std::string&
Test::MC::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::MC::C";
    return typeId;
}

Test::MC::D::~D()
{
}

const ::std::string&
Test::MC::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::MC::D";
    return typeId;
}

Test::MD::A::~A()
{
}

const ::std::string&
Test::MD::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::MD::A";
    return typeId;
}

Test::MD::B::~B()
{
}

const ::std::string&
Test::MD::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::MD::B";
    return typeId;
}

Test::MD::C::~C()
{
}

const ::std::string&
Test::MD::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::MD::C";
    return typeId;
}

Test::MD::D::~D()
{
}

const ::std::string&
Test::MD::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::MD::D";
    return typeId;
}

Test::ME::A::~A()
{
}

const ::std::string&
Test::ME::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::ME::A";
    return typeId;
}

Test::ME::B::~B()
{
}

const ::std::string&
Test::ME::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::ME::B";
    return typeId;
}

Test::ME::C::~C()
{
}

const ::std::string&
Test::ME::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::ME::C";
    return typeId;
}

Test::ME::D::~D()
{
}

const ::std::string&
Test::ME::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::ME::D";
    return typeId;
}

Test::MF::A::~A()
{
}

const ::std::string&
Test::MF::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::MF::A";
    return typeId;
}

Test::MF::B::~B()
{
}

const ::std::string&
Test::MF::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::MF::B";
    return typeId;
}

Test::MF::C::~C()
{
}

const ::std::string&
Test::MF::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::MF::C";
    return typeId;
}

Test::MF::D::~D()
{
}

const ::std::string&
Test::MF::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::MF::D";
    return typeId;
}

Test::MG::A::~A()
{
}

const ::std::string&
Test::MG::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::MG::A";
    return typeId;
}

Test::MG::B::~B()
{
}

const ::std::string&
Test::MG::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::MG::B";
    return typeId;
}

Test::MG::C::~C()
{
}

const ::std::string&
Test::MG::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::MG::C";
    return typeId;
}

Test::MG::D::~D()
{
}

const ::std::string&
Test::MG::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::MG::D";
    return typeId;
}

Test::MH::A::~A()
{
}

const ::std::string&
Test::MH::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::MH::A";
    return typeId;
}

Test::MH::B::~B()
{
}

const ::std::string&
Test::MH::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::MH::B";
    return typeId;
}

Test::MH::C::~C()
{
}

const ::std::string&
Test::MH::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::MH::C";
    return typeId;
}

Test::MH::D::~D()
{
}

const ::std::string&
Test::MH::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::MH::D";
    return typeId;
}

/// \cond INTERNAL
void
Test::MA::IAPrx::_iceI_iaop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MA::IAPrx>>>& outAsync, const ::std::shared_ptr<IAPrx>& iceP_p, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MA_IA_iaop_name);
    outAsync->invoke(iceC_Test_MA_IA_iaop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::MA::IAPrx::_newInstance() const
{
    return ::IceInternal::createProxy<IAPrx>();
}
/// \endcond

const ::std::string&
Test::MA::IAPrx::ice_staticId()
{
    return IA::ice_staticId();
}

/// \cond INTERNAL
void
Test::MA::CAPrx::_iceI_caop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MA::CAPrx>>>& outAsync, const ::std::shared_ptr<CAPrx>& iceP_p, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MA_CA_caop_name);
    outAsync->invoke(iceC_Test_MA_CA_caop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::MA::CAPrx::_newInstance() const
{
    return ::IceInternal::createProxy<CAPrx>();
}
/// \endcond

const ::std::string&
Test::MA::CAPrx::ice_staticId()
{
    return CADisp::ice_staticId();
}

/// \cond INTERNAL
void
Test::MB::IB1Prx::_iceI_ib1op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MB::IB1Prx>>>& outAsync, const ::std::shared_ptr<IB1Prx>& iceP_p, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MB_IB1_ib1op_name);
    outAsync->invoke(iceC_Test_MB_IB1_ib1op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::MB::IB1Prx::_newInstance() const
{
    return ::IceInternal::createProxy<IB1Prx>();
}
/// \endcond

const ::std::string&
Test::MB::IB1Prx::ice_staticId()
{
    return IB1::ice_staticId();
}

/// \cond INTERNAL
void
Test::MB::IB2Prx::_iceI_ib2op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MB::IB2Prx>>>& outAsync, const ::std::shared_ptr<IB2Prx>& iceP_p, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MB_IB2_ib2op_name);
    outAsync->invoke(iceC_Test_MB_IB2_ib2op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::MB::IB2Prx::_newInstance() const
{
    return ::IceInternal::createProxy<IB2Prx>();
}
/// \endcond

const ::std::string&
Test::MB::IB2Prx::ice_staticId()
{
    return IB2::ice_staticId();
}

/// \cond INTERNAL
void
Test::MB::CBPrx::_iceI_cbop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MB::CBPrx>>>& outAsync, const ::std::shared_ptr<CBPrx>& iceP_p, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MB_CB_cbop_name);
    outAsync->invoke(iceC_Test_MB_CB_cbop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::MB::CBPrx::_newInstance() const
{
    return ::IceInternal::createProxy<CBPrx>();
}
/// \endcond

const ::std::string&
Test::MB::CBPrx::ice_staticId()
{
    return CBDisp::ice_staticId();
}

/// \cond INTERNAL
void
Test::MA::ICPrx::_iceI_icop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MA::ICPrx>>>& outAsync, const ::std::shared_ptr<ICPrx>& iceP_p, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MA_IC_icop_name);
    outAsync->invoke(iceC_Test_MA_IC_icop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::MA::ICPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ICPrx>();
}
/// \endcond

const ::std::string&
Test::MA::ICPrx::ice_staticId()
{
    return IC::ice_staticId();
}

/// \cond INTERNAL
void
Test::MA::CCPrx::_iceI_ccop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MA::CCPrx>>>& outAsync, const ::std::shared_ptr<CCPrx>& iceP_p, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MA_CC_ccop_name);
    outAsync->invoke(iceC_Test_MA_CC_ccop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::MA::CCPrx::_newInstance() const
{
    return ::IceInternal::createProxy<CCPrx>();
}
/// \endcond

const ::std::string&
Test::MA::CCPrx::ice_staticId()
{
    return CCDisp::ice_staticId();
}

/// \cond INTERNAL
void
Test::MA::CDPrx::_iceI_cdop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MA::CDPrx>>>& outAsync, const ::std::shared_ptr<CDPrx>& iceP_p, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MA_CD_cdop_name);
    outAsync->invoke(iceC_Test_MA_CD_cdop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::MA::CDPrx::_newInstance() const
{
    return ::IceInternal::createProxy<CDPrx>();
}
/// \endcond

const ::std::string&
Test::MA::CDPrx::ice_staticId()
{
    return CDDisp::ice_staticId();
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_caop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MA::CAPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_caop_name);
    outAsync->invoke(iceC_Test_Initial_caop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_cbop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MB::CBPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_cbop_name);
    outAsync->invoke(iceC_Test_Initial_cbop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_ccop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MA::CCPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_ccop_name);
    outAsync->invoke(iceC_Test_Initial_ccop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_cdop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MA::CDPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_cdop_name);
    outAsync->invoke(iceC_Test_Initial_cdop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_iaop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MA::IAPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_iaop_name);
    outAsync->invoke(iceC_Test_Initial_iaop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_ib1op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MB::IB1Prx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_ib1op_name);
    outAsync->invoke(iceC_Test_Initial_ib1op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_ib2op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MB::IB2Prx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_ib2op_name);
    outAsync->invoke(iceC_Test_Initial_ib2op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_icop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MA::ICPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_icop_name);
    outAsync->invoke(iceC_Test_Initial_icop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::InitialPrx::_newInstance() const
{
    return ::IceInternal::createProxy<InitialPrx>();
}
/// \endcond

const ::std::string&
Test::InitialPrx::ice_staticId()
{
    return Initial::ice_staticId();
}

#else // C++98 mapping

namespace
{

namespace
{

const ::std::string iceC_Test_MA_IA_iaop_name = "iaop";

const ::std::string iceC_Test_MA_CA_caop_name = "caop";

}

namespace
{

const ::std::string iceC_Test_MB_IB1_ib1op_name = "ib1op";

const ::std::string iceC_Test_MB_IB2_ib2op_name = "ib2op";

const ::std::string iceC_Test_MB_CB_cbop_name = "cbop";

}

namespace
{

const ::std::string iceC_Test_MA_IC_icop_name = "icop";

const ::std::string iceC_Test_MA_CC_ccop_name = "ccop";

const ::std::string iceC_Test_MA_CD_cdop_name = "cdop";

}

const ::std::string iceC_Test_Initial_shutdown_name = "shutdown";

const ::std::string iceC_Test_Initial_caop_name = "caop";

const ::std::string iceC_Test_Initial_cbop_name = "cbop";

const ::std::string iceC_Test_Initial_ccop_name = "ccop";

const ::std::string iceC_Test_Initial_cdop_name = "cdop";

const ::std::string iceC_Test_Initial_iaop_name = "iaop";

const ::std::string iceC_Test_Initial_ib1op_name = "ib1op";

const ::std::string iceC_Test_Initial_ib2op_name = "ib2op";

const ::std::string iceC_Test_Initial_icop_name = "icop";

namespace
{

}

namespace
{

}

namespace
{

}

namespace
{

}

namespace
{

}

namespace
{

}

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MA::upCast(IA* p) { return p; }

void
::IceProxy::Test::MA::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< IA>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new IA;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::MA::IA::_iceI_begin_iaop(const ::Test::MA::IAPrx& iceP_p, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MA_IA_iaop_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MA_IA_iaop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MA_IA_iaop_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p);
        result->endWriteParams();
        result->invoke(iceC_Test_MA_IA_iaop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MA::IAPrx
IceProxy::Test::MA::IA::end_iaop(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MA_IA_iaop_name);
    ::Test::MA::IAPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MA::IA::_newInstance() const
{
    return new IA;
}
/// \endcond

const ::std::string&
IceProxy::Test::MA::IA::ice_staticId()
{
    return ::Test::MA::IA::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MA::upCast(CA* p) { return p; }

void
::IceProxy::Test::MA::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< CA>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new CA;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::MA::CA::_iceI_begin_caop(const ::Test::MA::CAPrx& iceP_p, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MA_CA_caop_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MA_CA_caop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MA_CA_caop_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p);
        result->endWriteParams();
        result->invoke(iceC_Test_MA_CA_caop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MA::CAPrx
IceProxy::Test::MA::CA::end_caop(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MA_CA_caop_name);
    ::Test::MA::CAPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MA::CA::_newInstance() const
{
    return new CA;
}
/// \endcond

const ::std::string&
IceProxy::Test::MA::CA::ice_staticId()
{
    return ::Test::MA::CA::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MB::upCast(IB1* p) { return p; }

void
::IceProxy::Test::MB::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< IB1>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new IB1;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::MB::IB1::_iceI_begin_ib1op(const ::Test::MB::IB1Prx& iceP_p, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MB_IB1_ib1op_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MB_IB1_ib1op_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MB_IB1_ib1op_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p);
        result->endWriteParams();
        result->invoke(iceC_Test_MB_IB1_ib1op_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MB::IB1Prx
IceProxy::Test::MB::IB1::end_ib1op(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MB_IB1_ib1op_name);
    ::Test::MB::IB1Prx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MB::IB1::_newInstance() const
{
    return new IB1;
}
/// \endcond

const ::std::string&
IceProxy::Test::MB::IB1::ice_staticId()
{
    return ::Test::MB::IB1::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MB::upCast(IB2* p) { return p; }

void
::IceProxy::Test::MB::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< IB2>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new IB2;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::MB::IB2::_iceI_begin_ib2op(const ::Test::MB::IB2Prx& iceP_p, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MB_IB2_ib2op_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MB_IB2_ib2op_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MB_IB2_ib2op_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p);
        result->endWriteParams();
        result->invoke(iceC_Test_MB_IB2_ib2op_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MB::IB2Prx
IceProxy::Test::MB::IB2::end_ib2op(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MB_IB2_ib2op_name);
    ::Test::MB::IB2Prx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MB::IB2::_newInstance() const
{
    return new IB2;
}
/// \endcond

const ::std::string&
IceProxy::Test::MB::IB2::ice_staticId()
{
    return ::Test::MB::IB2::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MB::upCast(CB* p) { return p; }

void
::IceProxy::Test::MB::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< CB>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new CB;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::MB::CB::_iceI_begin_cbop(const ::Test::MB::CBPrx& iceP_p, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MB_CB_cbop_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MB_CB_cbop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MB_CB_cbop_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p);
        result->endWriteParams();
        result->invoke(iceC_Test_MB_CB_cbop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MB::CBPrx
IceProxy::Test::MB::CB::end_cbop(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MB_CB_cbop_name);
    ::Test::MB::CBPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MB::CB::_newInstance() const
{
    return new CB;
}
/// \endcond

const ::std::string&
IceProxy::Test::MB::CB::ice_staticId()
{
    return ::Test::MB::CB::ice_staticId();
}

::IceProxy::Test::MA::_ICBase::~_ICBase()
{
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MA::upCast(IC* p) { return p; }

void
::IceProxy::Test::MA::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< IC>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new IC;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::MA::IC::_iceI_begin_icop(const ::Test::MA::ICPrx& iceP_p, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MA_IC_icop_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MA_IC_icop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MA_IC_icop_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p);
        result->endWriteParams();
        result->invoke(iceC_Test_MA_IC_icop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MA::ICPrx
IceProxy::Test::MA::IC::end_icop(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MA_IC_icop_name);
    ::Test::MA::ICPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MA::IC::_newInstance() const
{
    return new IC;
}
/// \endcond

const ::std::string&
IceProxy::Test::MA::IC::ice_staticId()
{
    return ::Test::MA::IC::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MA::upCast(CC* p) { return p; }

void
::IceProxy::Test::MA::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< CC>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new CC;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::MA::CC::_iceI_begin_ccop(const ::Test::MA::CCPrx& iceP_p, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MA_CC_ccop_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MA_CC_ccop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MA_CC_ccop_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p);
        result->endWriteParams();
        result->invoke(iceC_Test_MA_CC_ccop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MA::CCPrx
IceProxy::Test::MA::CC::end_ccop(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MA_CC_ccop_name);
    ::Test::MA::CCPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MA::CC::_newInstance() const
{
    return new CC;
}
/// \endcond

const ::std::string&
IceProxy::Test::MA::CC::ice_staticId()
{
    return ::Test::MA::CC::ice_staticId();
}

::IceProxy::Test::MA::_CDBase::~_CDBase()
{
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MA::upCast(CD* p) { return p; }

void
::IceProxy::Test::MA::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< CD>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new CD;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::MA::CD::_iceI_begin_cdop(const ::Test::MA::CDPrx& iceP_p, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MA_CD_cdop_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MA_CD_cdop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MA_CD_cdop_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p);
        result->endWriteParams();
        result->invoke(iceC_Test_MA_CD_cdop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MA::CDPrx
IceProxy::Test::MA::CD::end_cdop(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MA_CD_cdop_name);
    ::Test::MA::CDPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MA::CD::_newInstance() const
{
    return new CD;
}
/// \endcond

const ::std::string&
IceProxy::Test::MA::CD::ice_staticId()
{
    return ::Test::MA::CD::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Initial* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Initial>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Initial;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial_shutdown_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_caop(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_caop_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_caop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_caop_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_caop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MA::CAPrx
IceProxy::Test::Initial::end_caop(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_caop_name);
    ::Test::MA::CAPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_cbop(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_cbop_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_cbop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_cbop_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_cbop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MB::CBPrx
IceProxy::Test::Initial::end_cbop(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_cbop_name);
    ::Test::MB::CBPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_ccop(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_ccop_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_ccop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_ccop_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_ccop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MA::CCPrx
IceProxy::Test::Initial::end_ccop(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_ccop_name);
    ::Test::MA::CCPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_cdop(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_cdop_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_cdop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_cdop_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_cdop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MA::CDPrx
IceProxy::Test::Initial::end_cdop(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_cdop_name);
    ::Test::MA::CDPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_iaop(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_iaop_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_iaop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_iaop_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_iaop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MA::IAPrx
IceProxy::Test::Initial::end_iaop(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_iaop_name);
    ::Test::MA::IAPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_ib1op(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_ib1op_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_ib1op_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_ib1op_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_ib1op_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MB::IB1Prx
IceProxy::Test::Initial::end_ib1op(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_ib1op_name);
    ::Test::MB::IB1Prx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_ib2op(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_ib2op_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_ib2op_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_ib2op_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_ib2op_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MB::IB2Prx
IceProxy::Test::Initial::end_ib2op(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_ib2op_name);
    ::Test::MB::IB2Prx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_icop(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_icop_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_icop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_icop_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_icop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::MA::ICPrx
IceProxy::Test::Initial::end_icop(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_icop_name);
    ::Test::MA::ICPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Initial::_newInstance() const
{
    return new Initial;
}
/// \endcond

const ::std::string&
IceProxy::Test::Initial::ice_staticId()
{
    return ::Test::Initial::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MC::upCast(A* p) { return p; }

void
::IceProxy::Test::MC::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< A>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new A;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MC::A::_newInstance() const
{
    return new A;
}
/// \endcond

const ::std::string&
IceProxy::Test::MC::A::ice_staticId()
{
    return ::Test::MC::A::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MC::upCast(B* p) { return p; }

void
::IceProxy::Test::MC::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< B>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new B;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MC::B::_newInstance() const
{
    return new B;
}
/// \endcond

const ::std::string&
IceProxy::Test::MC::B::ice_staticId()
{
    return ::Test::MC::B::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MC::upCast(C* p) { return p; }

void
::IceProxy::Test::MC::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MC::C::_newInstance() const
{
    return new C;
}
/// \endcond

const ::std::string&
IceProxy::Test::MC::C::ice_staticId()
{
    return ::Test::MC::C::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MC::upCast(D* p) { return p; }

void
::IceProxy::Test::MC::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< D>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new D;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MC::D::_newInstance() const
{
    return new D;
}
/// \endcond

const ::std::string&
IceProxy::Test::MC::D::ice_staticId()
{
    return ::Test::MC::D::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MD::upCast(A* p) { return p; }

void
::IceProxy::Test::MD::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< A>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new A;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MD::A::_newInstance() const
{
    return new A;
}
/// \endcond

const ::std::string&
IceProxy::Test::MD::A::ice_staticId()
{
    return ::Test::MD::A::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MD::upCast(B* p) { return p; }

void
::IceProxy::Test::MD::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< B>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new B;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MD::B::_newInstance() const
{
    return new B;
}
/// \endcond

const ::std::string&
IceProxy::Test::MD::B::ice_staticId()
{
    return ::Test::MD::B::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MD::upCast(C* p) { return p; }

void
::IceProxy::Test::MD::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MD::C::_newInstance() const
{
    return new C;
}
/// \endcond

const ::std::string&
IceProxy::Test::MD::C::ice_staticId()
{
    return ::Test::MD::C::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MD::upCast(D* p) { return p; }

void
::IceProxy::Test::MD::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< D>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new D;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MD::D::_newInstance() const
{
    return new D;
}
/// \endcond

const ::std::string&
IceProxy::Test::MD::D::ice_staticId()
{
    return ::Test::MD::D::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::ME::upCast(A* p) { return p; }

void
::IceProxy::Test::ME::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< A>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new A;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::ME::A::_newInstance() const
{
    return new A;
}
/// \endcond

const ::std::string&
IceProxy::Test::ME::A::ice_staticId()
{
    return ::Test::ME::A::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::ME::upCast(B* p) { return p; }

void
::IceProxy::Test::ME::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< B>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new B;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::ME::B::_newInstance() const
{
    return new B;
}
/// \endcond

const ::std::string&
IceProxy::Test::ME::B::ice_staticId()
{
    return ::Test::ME::B::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::ME::upCast(C* p) { return p; }

void
::IceProxy::Test::ME::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::ME::C::_newInstance() const
{
    return new C;
}
/// \endcond

const ::std::string&
IceProxy::Test::ME::C::ice_staticId()
{
    return ::Test::ME::C::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::ME::upCast(D* p) { return p; }

void
::IceProxy::Test::ME::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< D>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new D;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::ME::D::_newInstance() const
{
    return new D;
}
/// \endcond

const ::std::string&
IceProxy::Test::ME::D::ice_staticId()
{
    return ::Test::ME::D::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MF::upCast(A* p) { return p; }

void
::IceProxy::Test::MF::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< A>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new A;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MF::A::_newInstance() const
{
    return new A;
}
/// \endcond

const ::std::string&
IceProxy::Test::MF::A::ice_staticId()
{
    return ::Test::MF::A::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MF::upCast(B* p) { return p; }

void
::IceProxy::Test::MF::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< B>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new B;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MF::B::_newInstance() const
{
    return new B;
}
/// \endcond

const ::std::string&
IceProxy::Test::MF::B::ice_staticId()
{
    return ::Test::MF::B::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MF::upCast(C* p) { return p; }

void
::IceProxy::Test::MF::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MF::C::_newInstance() const
{
    return new C;
}
/// \endcond

const ::std::string&
IceProxy::Test::MF::C::ice_staticId()
{
    return ::Test::MF::C::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MF::upCast(D* p) { return p; }

void
::IceProxy::Test::MF::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< D>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new D;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MF::D::_newInstance() const
{
    return new D;
}
/// \endcond

const ::std::string&
IceProxy::Test::MF::D::ice_staticId()
{
    return ::Test::MF::D::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MG::upCast(A* p) { return p; }

void
::IceProxy::Test::MG::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< A>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new A;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MG::A::_newInstance() const
{
    return new A;
}
/// \endcond

const ::std::string&
IceProxy::Test::MG::A::ice_staticId()
{
    return ::Test::MG::A::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MG::upCast(B* p) { return p; }

void
::IceProxy::Test::MG::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< B>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new B;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MG::B::_newInstance() const
{
    return new B;
}
/// \endcond

const ::std::string&
IceProxy::Test::MG::B::ice_staticId()
{
    return ::Test::MG::B::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MG::upCast(C* p) { return p; }

void
::IceProxy::Test::MG::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MG::C::_newInstance() const
{
    return new C;
}
/// \endcond

const ::std::string&
IceProxy::Test::MG::C::ice_staticId()
{
    return ::Test::MG::C::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MG::upCast(D* p) { return p; }

void
::IceProxy::Test::MG::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< D>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new D;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MG::D::_newInstance() const
{
    return new D;
}
/// \endcond

const ::std::string&
IceProxy::Test::MG::D::ice_staticId()
{
    return ::Test::MG::D::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MH::upCast(A* p) { return p; }

void
::IceProxy::Test::MH::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< A>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new A;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MH::A::_newInstance() const
{
    return new A;
}
/// \endcond

const ::std::string&
IceProxy::Test::MH::A::ice_staticId()
{
    return ::Test::MH::A::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MH::upCast(B* p) { return p; }

void
::IceProxy::Test::MH::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< B>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new B;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MH::B::_newInstance() const
{
    return new B;
}
/// \endcond

const ::std::string&
IceProxy::Test::MH::B::ice_staticId()
{
    return ::Test::MH::B::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MH::upCast(C* p) { return p; }

void
::IceProxy::Test::MH::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MH::C::_newInstance() const
{
    return new C;
}
/// \endcond

const ::std::string&
IceProxy::Test::MH::C::ice_staticId()
{
    return ::Test::MH::C::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::MH::upCast(D* p) { return p; }

void
::IceProxy::Test::MH::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< D>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new D;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MH::D::_newInstance() const
{
    return new D;
}
/// \endcond

const ::std::string&
IceProxy::Test::MH::D::ice_staticId()
{
    return ::Test::MH::D::ice_staticId();
}

Test::MA::IA::~IA()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MA::upCast(IA* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_MA_IA_ids[2] =
{
    "::Ice::Object",
    "::Test::MA::IA"
};

}

bool
Test::MA::IA::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MA_IA_ids, iceC_Test_MA_IA_ids + 2, s);
}

::std::vector< ::std::string>
Test::MA::IA::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MA_IA_ids[0], &iceC_Test_MA_IA_ids[2]);
}

const ::std::string&
Test::MA::IA::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MA::IA::ice_staticId()
{
    static const ::std::string typeId = "::Test::MA::IA";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MA::IA::_iceD_iaop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IAPrx iceP_p;
    istr->read(iceP_p);
    inS.endReadParams();
    IAPrx ret = this->iaop(iceP_p, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_MA_IA_all[] =
{
    "iaop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::MA::IA::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MA_IA_all, iceC_Test_MA_IA_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MA_IA_all)
    {
        case 0:
        {
            return _iceD_iaop(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::MA::IA::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< IA, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MA::IA::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< IA, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::MA::_icePatchObjectPtr(IAPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = IAPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(IA::ice_staticId(), v);
    }
}
/// \endcond

Test::MA::CA::~CA()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MA::upCast(CA* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MA::CA::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
}

namespace
{
const ::std::string iceC_Test_MA_CA_ids[2] =
{
    "::Ice::Object",
    "::Test::MA::CA"
};

}

bool
Test::MA::CA::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MA_CA_ids, iceC_Test_MA_CA_ids + 2, s);
}

::std::vector< ::std::string>
Test::MA::CA::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MA_CA_ids[0], &iceC_Test_MA_CA_ids[2]);
}

const ::std::string&
Test::MA::CA::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MA::CA::ice_staticId()
{
    static const ::std::string typeId = "::Test::MA::CA";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MA::CA::_iceD_caop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CAPrx iceP_p;
    istr->read(iceP_p);
    inS.endReadParams();
    CAPrx ret = this->caop(iceP_p, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_MA_CA_all[] =
{
    "caop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::MA::CA::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MA_CA_all, iceC_Test_MA_CA_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MA_CA_all)
    {
        case 0:
        {
            return _iceD_caop(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::MA::CA::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< CA, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MA::CA::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< CA, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::MA::_icePatchObjectPtr(CAPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CAPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(CA::ice_staticId(), v);
    }
}
/// \endcond

Test::MB::IB1::~IB1()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MB::upCast(IB1* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_MB_IB1_ids[3] =
{
    "::Ice::Object",
    "::Test::MA::IA",
    "::Test::MB::IB1"
};

}

bool
Test::MB::IB1::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MB_IB1_ids, iceC_Test_MB_IB1_ids + 3, s);
}

::std::vector< ::std::string>
Test::MB::IB1::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MB_IB1_ids[0], &iceC_Test_MB_IB1_ids[3]);
}

const ::std::string&
Test::MB::IB1::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MB::IB1::ice_staticId()
{
    static const ::std::string typeId = "::Test::MB::IB1";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MB::IB1::_iceD_ib1op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IB1Prx iceP_p;
    istr->read(iceP_p);
    inS.endReadParams();
    IB1Prx ret = this->ib1op(iceP_p, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_MB_IB1_all[] =
{
    "iaop",
    "ib1op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::MB::IB1::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MB_IB1_all, iceC_Test_MB_IB1_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MB_IB1_all)
    {
        case 0:
        {
            return _iceD_iaop(in, current);
        }
        case 1:
        {
            return _iceD_ib1op(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::MB::IB1::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< IB1, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MB::IB1::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< IB1, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::MB::_icePatchObjectPtr(IB1Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = IB1Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(IB1::ice_staticId(), v);
    }
}
/// \endcond

Test::MB::IB2::~IB2()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MB::upCast(IB2* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_MB_IB2_ids[3] =
{
    "::Ice::Object",
    "::Test::MA::IA",
    "::Test::MB::IB2"
};

}

bool
Test::MB::IB2::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MB_IB2_ids, iceC_Test_MB_IB2_ids + 3, s);
}

::std::vector< ::std::string>
Test::MB::IB2::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MB_IB2_ids[0], &iceC_Test_MB_IB2_ids[3]);
}

const ::std::string&
Test::MB::IB2::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MB::IB2::ice_staticId()
{
    static const ::std::string typeId = "::Test::MB::IB2";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MB::IB2::_iceD_ib2op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IB2Prx iceP_p;
    istr->read(iceP_p);
    inS.endReadParams();
    IB2Prx ret = this->ib2op(iceP_p, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_MB_IB2_all[] =
{
    "iaop",
    "ib2op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::MB::IB2::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MB_IB2_all, iceC_Test_MB_IB2_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MB_IB2_all)
    {
        case 0:
        {
            return _iceD_iaop(in, current);
        }
        case 1:
        {
            return _iceD_ib2op(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::MB::IB2::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< IB2, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MB::IB2::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< IB2, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::MB::_icePatchObjectPtr(IB2Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = IB2Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(IB2::ice_staticId(), v);
    }
}
/// \endcond

Test::MB::CB::~CB()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MB::upCast(CB* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MB::CB::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
}

namespace
{
const ::std::string iceC_Test_MB_CB_ids[3] =
{
    "::Ice::Object",
    "::Test::MA::CA",
    "::Test::MB::CB"
};

}

bool
Test::MB::CB::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MB_CB_ids, iceC_Test_MB_CB_ids + 3, s);
}

::std::vector< ::std::string>
Test::MB::CB::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MB_CB_ids[0], &iceC_Test_MB_CB_ids[3]);
}

const ::std::string&
Test::MB::CB::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MB::CB::ice_staticId()
{
    static const ::std::string typeId = "::Test::MB::CB";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MB::CB::_iceD_cbop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CBPrx iceP_p;
    istr->read(iceP_p);
    inS.endReadParams();
    CBPrx ret = this->cbop(iceP_p, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_MB_CB_all[] =
{
    "caop",
    "cbop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::MB::CB::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MB_CB_all, iceC_Test_MB_CB_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MB_CB_all)
    {
        case 0:
        {
            return _iceD_caop(in, current);
        }
        case 1:
        {
            return _iceD_cbop(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::MB::CB::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< CB, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    ::Test::MA::CA::_iceWriteImpl(ostr);
}

void
Test::MB::CB::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< CB, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    ::Test::MA::CA::_iceReadImpl(istr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MB::_icePatchObjectPtr(CBPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CBPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(CB::ice_staticId(), v);
    }
}
/// \endcond

Test::MA::IC::~IC()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MA::upCast(IC* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_MA_IC_ids[5] =
{
    "::Ice::Object",
    "::Test::MA::IA",
    "::Test::MA::IC",
    "::Test::MB::IB1",
    "::Test::MB::IB2"
};

}

bool
Test::MA::IC::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MA_IC_ids, iceC_Test_MA_IC_ids + 5, s);
}

::std::vector< ::std::string>
Test::MA::IC::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MA_IC_ids[0], &iceC_Test_MA_IC_ids[5]);
}

const ::std::string&
Test::MA::IC::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MA::IC::ice_staticId()
{
    static const ::std::string typeId = "::Test::MA::IC";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MA::IC::_iceD_icop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ICPrx iceP_p;
    istr->read(iceP_p);
    inS.endReadParams();
    ICPrx ret = this->icop(iceP_p, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_MA_IC_all[] =
{
    "iaop",
    "ib1op",
    "ib2op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "icop"
};

}

/// \cond INTERNAL
bool
Test::MA::IC::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MA_IC_all, iceC_Test_MA_IC_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MA_IC_all)
    {
        case 0:
        {
            return _iceD_iaop(in, current);
        }
        case 1:
        {
            return _iceD_ib1op(in, current);
        }
        case 2:
        {
            return _iceD_ib2op(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_icop(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::MA::IC::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< IC, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MA::IC::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< IC, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::MA::_icePatchObjectPtr(ICPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ICPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(IC::ice_staticId(), v);
    }
}
/// \endcond

Test::MA::CC::~CC()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MA::upCast(CC* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MA::CC::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
}

namespace
{
const ::std::string iceC_Test_MA_CC_ids[4] =
{
    "::Ice::Object",
    "::Test::MA::CA",
    "::Test::MA::CC",
    "::Test::MB::CB"
};

}

bool
Test::MA::CC::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MA_CC_ids, iceC_Test_MA_CC_ids + 4, s);
}

::std::vector< ::std::string>
Test::MA::CC::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MA_CC_ids[0], &iceC_Test_MA_CC_ids[4]);
}

const ::std::string&
Test::MA::CC::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MA::CC::ice_staticId()
{
    static const ::std::string typeId = "::Test::MA::CC";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MA::CC::_iceD_ccop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CCPrx iceP_p;
    istr->read(iceP_p);
    inS.endReadParams();
    CCPrx ret = this->ccop(iceP_p, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_MA_CC_all[] =
{
    "caop",
    "cbop",
    "ccop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::MA::CC::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MA_CC_all, iceC_Test_MA_CC_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MA_CC_all)
    {
        case 0:
        {
            return _iceD_caop(in, current);
        }
        case 1:
        {
            return _iceD_cbop(in, current);
        }
        case 2:
        {
            return _iceD_ccop(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::MA::CC::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< CC, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    ::Test::MB::CB::_iceWriteImpl(ostr);
}

void
Test::MA::CC::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< CC, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    ::Test::MB::CB::_iceReadImpl(istr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MA::_icePatchObjectPtr(CCPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CCPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(CC::ice_staticId(), v);
    }
}
/// \endcond

Test::MA::CD::~CD()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MA::upCast(CD* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MA::CD::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
}

namespace
{
const ::std::string iceC_Test_MA_CD_ids[8] =
{
    "::Ice::Object",
    "::Test::MA::CA",
    "::Test::MA::CC",
    "::Test::MA::CD",
    "::Test::MA::IA",
    "::Test::MB::CB",
    "::Test::MB::IB1",
    "::Test::MB::IB2"
};

}

bool
Test::MA::CD::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MA_CD_ids, iceC_Test_MA_CD_ids + 8, s);
}

::std::vector< ::std::string>
Test::MA::CD::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MA_CD_ids[0], &iceC_Test_MA_CD_ids[8]);
}

const ::std::string&
Test::MA::CD::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MA::CD::ice_staticId()
{
    static const ::std::string typeId = "::Test::MA::CD";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MA::CD::_iceD_cdop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CDPrx iceP_p;
    istr->read(iceP_p);
    inS.endReadParams();
    CDPrx ret = this->cdop(iceP_p, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_MA_CD_all[] =
{
    "caop",
    "cbop",
    "ccop",
    "cdop",
    "iaop",
    "ib1op",
    "ib2op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Test::MA::CD::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MA_CD_all, iceC_Test_MA_CD_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MA_CD_all)
    {
        case 0:
        {
            return _iceD_caop(in, current);
        }
        case 1:
        {
            return _iceD_cbop(in, current);
        }
        case 2:
        {
            return _iceD_ccop(in, current);
        }
        case 3:
        {
            return _iceD_cdop(in, current);
        }
        case 4:
        {
            return _iceD_iaop(in, current);
        }
        case 5:
        {
            return _iceD_ib1op(in, current);
        }
        case 6:
        {
            return _iceD_ib2op(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::MA::CD::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< CD, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    CC::_iceWriteImpl(ostr);
}

void
Test::MA::CD::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< CD, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    CC::_iceReadImpl(istr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MA::_icePatchObjectPtr(CDPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CDPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(CD::ice_staticId(), v);
    }
}
/// \endcond

Test::Initial::~Initial()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Initial* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};

}

bool
Test::Initial::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial_ids, iceC_Test_Initial_ids + 2, s);
}

::std::vector< ::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Initial_ids[0], &iceC_Test_Initial_ids[2]);
}

const ::std::string&
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_caop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Test::MA::CAPrx ret = this->caop(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_cbop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Test::MB::CBPrx ret = this->cbop(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_ccop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Test::MA::CCPrx ret = this->ccop(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_cdop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Test::MA::CDPrx ret = this->cdop(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_iaop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Test::MA::IAPrx ret = this->iaop(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_ib1op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Test::MB::IB1Prx ret = this->ib1op(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_ib2op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Test::MB::IB2Prx ret = this->ib2op(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_icop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Test::MA::ICPrx ret = this->icop(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Initial_all[] =
{
    "caop",
    "cbop",
    "ccop",
    "cdop",
    "iaop",
    "ib1op",
    "ib2op",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "icop",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::Initial::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial_all, iceC_Test_Initial_all + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial_all)
    {
        case 0:
        {
            return _iceD_caop(in, current);
        }
        case 1:
        {
            return _iceD_cbop(in, current);
        }
        case 2:
        {
            return _iceD_ccop(in, current);
        }
        case 3:
        {
            return _iceD_cdop(in, current);
        }
        case 4:
        {
            return _iceD_iaop(in, current);
        }
        case 5:
        {
            return _iceD_ib1op(in, current);
        }
        case 6:
        {
            return _iceD_ib2op(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        case 11:
        {
            return _iceD_icop(in, current);
        }
        case 12:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::Initial::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Initial, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Initial::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Initial, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(InitialPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = InitialPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Initial::ice_staticId(), v);
    }
}
/// \endcond

Test::MC::A::~A()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MC::upCast(A* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MC::A::ice_clone() const
{
    ::Ice::Object* p = new A(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MC_A_ids[2] =
{
    "::Ice::Object",
    "::Test::MC::A"
};

}

bool
Test::MC::A::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MC_A_ids, iceC_Test_MC_A_ids + 2, s);
}

::std::vector< ::std::string>
Test::MC::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MC_A_ids[0], &iceC_Test_MC_A_ids[2]);
}

const ::std::string&
Test::MC::A::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MC::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::MC::A";
    return typeId;
}

/// \cond STREAM
void
Test::MC::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MC::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MC::A> iceC_Test_MC_A_init("::Test::MC::A");
}

::Ice::ValueFactoryPtr
Test::MC::A::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MC::A::ice_staticId());
}

/// \cond INTERNAL
void
Test::MC::_icePatchObjectPtr(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(A::ice_staticId(), v);
    }
}
/// \endcond

Test::MC::B::~B()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MC::upCast(B* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MC::B::ice_clone() const
{
    ::Ice::Object* p = new B(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MC_B_ids[3] =
{
    "::Ice::Object",
    "::Test::MC::A",
    "::Test::MC::B"
};

}

bool
Test::MC::B::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MC_B_ids, iceC_Test_MC_B_ids + 3, s);
}

::std::vector< ::std::string>
Test::MC::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MC_B_ids[0], &iceC_Test_MC_B_ids[3]);
}

const ::std::string&
Test::MC::B::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MC::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::MC::B";
    return typeId;
}

/// \cond STREAM
void
Test::MC::B::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    A::_iceWriteImpl(ostr);
}

void
Test::MC::B::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    A::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MC::B> iceC_Test_MC_B_init("::Test::MC::B");
}

::Ice::ValueFactoryPtr
Test::MC::B::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MC::B::ice_staticId());
}

/// \cond INTERNAL
void
Test::MC::_icePatchObjectPtr(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(B::ice_staticId(), v);
    }
}
/// \endcond

Test::MC::C::~C()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MC::upCast(C* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MC::C::ice_clone() const
{
    ::Ice::Object* p = new C(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MC_C_ids[4] =
{
    "::Ice::Object",
    "::Test::MC::A",
    "::Test::MC::B",
    "::Test::MC::C"
};

}

bool
Test::MC::C::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MC_C_ids, iceC_Test_MC_C_ids + 4, s);
}

::std::vector< ::std::string>
Test::MC::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MC_C_ids[0], &iceC_Test_MC_C_ids[4]);
}

const ::std::string&
Test::MC::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MC::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::MC::C";
    return typeId;
}

/// \cond STREAM
void
Test::MC::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::MC::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MC::C> iceC_Test_MC_C_init("::Test::MC::C");
}

::Ice::ValueFactoryPtr
Test::MC::C::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MC::C::ice_staticId());
}

/// \cond INTERNAL
void
Test::MC::_icePatchObjectPtr(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C::ice_staticId(), v);
    }
}
/// \endcond

Test::MC::D::~D()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MC::upCast(D* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MC::D::ice_clone() const
{
    ::Ice::Object* p = new D(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MC_D_ids[5] =
{
    "::Ice::Object",
    "::Test::MC::A",
    "::Test::MC::B",
    "::Test::MC::C",
    "::Test::MC::D"
};

}

bool
Test::MC::D::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MC_D_ids, iceC_Test_MC_D_ids + 5, s);
}

::std::vector< ::std::string>
Test::MC::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MC_D_ids[0], &iceC_Test_MC_D_ids[5]);
}

const ::std::string&
Test::MC::D::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MC::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::MC::D";
    return typeId;
}

/// \cond STREAM
void
Test::MC::D::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    C::_iceWriteImpl(ostr);
}

void
Test::MC::D::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    C::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MC::D> iceC_Test_MC_D_init("::Test::MC::D");
}

::Ice::ValueFactoryPtr
Test::MC::D::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MC::D::ice_staticId());
}

/// \cond INTERNAL
void
Test::MC::_icePatchObjectPtr(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(D::ice_staticId(), v);
    }
}
/// \endcond

Test::MD::A::~A()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MD::upCast(A* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MD::A::ice_clone() const
{
    ::Ice::Object* p = new A(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MD_A_ids[2] =
{
    "::Ice::Object",
    "::Test::MD::A"
};

}

bool
Test::MD::A::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MD_A_ids, iceC_Test_MD_A_ids + 2, s);
}

::std::vector< ::std::string>
Test::MD::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MD_A_ids[0], &iceC_Test_MD_A_ids[2]);
}

const ::std::string&
Test::MD::A::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MD::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::MD::A";
    return typeId;
}

/// \cond STREAM
void
Test::MD::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MD::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MD::A> iceC_Test_MD_A_init("::Test::MD::A");
}

::Ice::ValueFactoryPtr
Test::MD::A::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MD::A::ice_staticId());
}

/// \cond INTERNAL
void
Test::MD::_icePatchObjectPtr(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(A::ice_staticId(), v);
    }
}
/// \endcond

Test::MD::B::~B()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MD::upCast(B* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MD::B::ice_clone() const
{
    ::Ice::Object* p = new B(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MD_B_ids[3] =
{
    "::Ice::Object",
    "::Test::MD::A",
    "::Test::MD::B"
};

}

bool
Test::MD::B::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MD_B_ids, iceC_Test_MD_B_ids + 3, s);
}

::std::vector< ::std::string>
Test::MD::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MD_B_ids[0], &iceC_Test_MD_B_ids[3]);
}

const ::std::string&
Test::MD::B::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MD::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::MD::B";
    return typeId;
}

/// \cond STREAM
void
Test::MD::B::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    A::_iceWriteImpl(ostr);
}

void
Test::MD::B::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    A::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MD::B> iceC_Test_MD_B_init("::Test::MD::B");
}

::Ice::ValueFactoryPtr
Test::MD::B::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MD::B::ice_staticId());
}

/// \cond INTERNAL
void
Test::MD::_icePatchObjectPtr(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(B::ice_staticId(), v);
    }
}
/// \endcond

Test::MD::C::~C()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MD::upCast(C* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MD::C::ice_clone() const
{
    ::Ice::Object* p = new C(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MD_C_ids[4] =
{
    "::Ice::Object",
    "::Test::MD::A",
    "::Test::MD::B",
    "::Test::MD::C"
};

}

bool
Test::MD::C::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MD_C_ids, iceC_Test_MD_C_ids + 4, s);
}

::std::vector< ::std::string>
Test::MD::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MD_C_ids[0], &iceC_Test_MD_C_ids[4]);
}

const ::std::string&
Test::MD::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MD::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::MD::C";
    return typeId;
}

/// \cond STREAM
void
Test::MD::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::MD::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MD::C> iceC_Test_MD_C_init("::Test::MD::C");
}

::Ice::ValueFactoryPtr
Test::MD::C::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MD::C::ice_staticId());
}

/// \cond INTERNAL
void
Test::MD::_icePatchObjectPtr(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C::ice_staticId(), v);
    }
}
/// \endcond

Test::MD::D::~D()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MD::upCast(D* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MD::D::ice_clone() const
{
    ::Ice::Object* p = new D(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MD_D_ids[5] =
{
    "::Ice::Object",
    "::Test::MD::A",
    "::Test::MD::B",
    "::Test::MD::C",
    "::Test::MD::D"
};

}

bool
Test::MD::D::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MD_D_ids, iceC_Test_MD_D_ids + 5, s);
}

::std::vector< ::std::string>
Test::MD::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MD_D_ids[0], &iceC_Test_MD_D_ids[5]);
}

const ::std::string&
Test::MD::D::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MD::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::MD::D";
    return typeId;
}

/// \cond STREAM
void
Test::MD::D::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    C::_iceWriteImpl(ostr);
}

void
Test::MD::D::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    C::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MD::D> iceC_Test_MD_D_init("::Test::MD::D");
}

::Ice::ValueFactoryPtr
Test::MD::D::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MD::D::ice_staticId());
}

/// \cond INTERNAL
void
Test::MD::_icePatchObjectPtr(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(D::ice_staticId(), v);
    }
}
/// \endcond

Test::ME::A::~A()
{
}

/// \cond INTERNAL
::Ice::Object* Test::ME::upCast(A* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::ME::A::ice_clone() const
{
    ::Ice::Object* p = new A(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_ME_A_ids[2] =
{
    "::Ice::Object",
    "::Test::ME::A"
};

}

bool
Test::ME::A::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_ME_A_ids, iceC_Test_ME_A_ids + 2, s);
}

::std::vector< ::std::string>
Test::ME::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_ME_A_ids[0], &iceC_Test_ME_A_ids[2]);
}

const ::std::string&
Test::ME::A::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::ME::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::ME::A";
    return typeId;
}

/// \cond STREAM
void
Test::ME::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::ME::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::ME::A> iceC_Test_ME_A_init("::Test::ME::A");
}

::Ice::ValueFactoryPtr
Test::ME::A::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::ME::A::ice_staticId());
}

/// \cond INTERNAL
void
Test::ME::_icePatchObjectPtr(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(A::ice_staticId(), v);
    }
}
/// \endcond

Test::ME::B::~B()
{
}

/// \cond INTERNAL
::Ice::Object* Test::ME::upCast(B* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::ME::B::ice_clone() const
{
    ::Ice::Object* p = new B(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_ME_B_ids[3] =
{
    "::Ice::Object",
    "::Test::ME::A",
    "::Test::ME::B"
};

}

bool
Test::ME::B::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_ME_B_ids, iceC_Test_ME_B_ids + 3, s);
}

::std::vector< ::std::string>
Test::ME::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_ME_B_ids[0], &iceC_Test_ME_B_ids[3]);
}

const ::std::string&
Test::ME::B::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::ME::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::ME::B";
    return typeId;
}

/// \cond STREAM
void
Test::ME::B::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    A::_iceWriteImpl(ostr);
}

void
Test::ME::B::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    A::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::ME::B> iceC_Test_ME_B_init("::Test::ME::B");
}

::Ice::ValueFactoryPtr
Test::ME::B::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::ME::B::ice_staticId());
}

/// \cond INTERNAL
void
Test::ME::_icePatchObjectPtr(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(B::ice_staticId(), v);
    }
}
/// \endcond

Test::ME::C::~C()
{
}

/// \cond INTERNAL
::Ice::Object* Test::ME::upCast(C* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::ME::C::ice_clone() const
{
    ::Ice::Object* p = new C(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_ME_C_ids[4] =
{
    "::Ice::Object",
    "::Test::ME::A",
    "::Test::ME::B",
    "::Test::ME::C"
};

}

bool
Test::ME::C::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_ME_C_ids, iceC_Test_ME_C_ids + 4, s);
}

::std::vector< ::std::string>
Test::ME::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_ME_C_ids[0], &iceC_Test_ME_C_ids[4]);
}

const ::std::string&
Test::ME::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::ME::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::ME::C";
    return typeId;
}

/// \cond STREAM
void
Test::ME::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::ME::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::ME::C> iceC_Test_ME_C_init("::Test::ME::C");
}

::Ice::ValueFactoryPtr
Test::ME::C::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::ME::C::ice_staticId());
}

/// \cond INTERNAL
void
Test::ME::_icePatchObjectPtr(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C::ice_staticId(), v);
    }
}
/// \endcond

Test::ME::D::~D()
{
}

/// \cond INTERNAL
::Ice::Object* Test::ME::upCast(D* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::ME::D::ice_clone() const
{
    ::Ice::Object* p = new D(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_ME_D_ids[5] =
{
    "::Ice::Object",
    "::Test::ME::A",
    "::Test::ME::B",
    "::Test::ME::C",
    "::Test::ME::D"
};

}

bool
Test::ME::D::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_ME_D_ids, iceC_Test_ME_D_ids + 5, s);
}

::std::vector< ::std::string>
Test::ME::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_ME_D_ids[0], &iceC_Test_ME_D_ids[5]);
}

const ::std::string&
Test::ME::D::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::ME::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::ME::D";
    return typeId;
}

/// \cond STREAM
void
Test::ME::D::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    C::_iceWriteImpl(ostr);
}

void
Test::ME::D::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    C::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::ME::D> iceC_Test_ME_D_init("::Test::ME::D");
}

::Ice::ValueFactoryPtr
Test::ME::D::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::ME::D::ice_staticId());
}

/// \cond INTERNAL
void
Test::ME::_icePatchObjectPtr(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(D::ice_staticId(), v);
    }
}
/// \endcond

Test::MF::A::~A()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MF::upCast(A* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MF::A::ice_clone() const
{
    ::Ice::Object* p = new A(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MF_A_ids[2] =
{
    "::Ice::Object",
    "::Test::MF::A"
};

}

bool
Test::MF::A::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MF_A_ids, iceC_Test_MF_A_ids + 2, s);
}

::std::vector< ::std::string>
Test::MF::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MF_A_ids[0], &iceC_Test_MF_A_ids[2]);
}

const ::std::string&
Test::MF::A::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MF::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::MF::A";
    return typeId;
}

/// \cond STREAM
void
Test::MF::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MF::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MF::A> iceC_Test_MF_A_init("::Test::MF::A");
}

::Ice::ValueFactoryPtr
Test::MF::A::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MF::A::ice_staticId());
}

/// \cond INTERNAL
void
Test::MF::_icePatchObjectPtr(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(A::ice_staticId(), v);
    }
}
/// \endcond

Test::MF::B::~B()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MF::upCast(B* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MF::B::ice_clone() const
{
    ::Ice::Object* p = new B(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MF_B_ids[3] =
{
    "::Ice::Object",
    "::Test::MF::A",
    "::Test::MF::B"
};

}

bool
Test::MF::B::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MF_B_ids, iceC_Test_MF_B_ids + 3, s);
}

::std::vector< ::std::string>
Test::MF::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MF_B_ids[0], &iceC_Test_MF_B_ids[3]);
}

const ::std::string&
Test::MF::B::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MF::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::MF::B";
    return typeId;
}

/// \cond STREAM
void
Test::MF::B::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    A::_iceWriteImpl(ostr);
}

void
Test::MF::B::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    A::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MF::B> iceC_Test_MF_B_init("::Test::MF::B");
}

::Ice::ValueFactoryPtr
Test::MF::B::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MF::B::ice_staticId());
}

/// \cond INTERNAL
void
Test::MF::_icePatchObjectPtr(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(B::ice_staticId(), v);
    }
}
/// \endcond

Test::MF::C::~C()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MF::upCast(C* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MF::C::ice_clone() const
{
    ::Ice::Object* p = new C(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MF_C_ids[4] =
{
    "::Ice::Object",
    "::Test::MF::A",
    "::Test::MF::B",
    "::Test::MF::C"
};

}

bool
Test::MF::C::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MF_C_ids, iceC_Test_MF_C_ids + 4, s);
}

::std::vector< ::std::string>
Test::MF::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MF_C_ids[0], &iceC_Test_MF_C_ids[4]);
}

const ::std::string&
Test::MF::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MF::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::MF::C";
    return typeId;
}

/// \cond STREAM
void
Test::MF::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::MF::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MF::C> iceC_Test_MF_C_init("::Test::MF::C");
}

::Ice::ValueFactoryPtr
Test::MF::C::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MF::C::ice_staticId());
}

/// \cond INTERNAL
void
Test::MF::_icePatchObjectPtr(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C::ice_staticId(), v);
    }
}
/// \endcond

Test::MF::D::~D()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MF::upCast(D* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MF::D::ice_clone() const
{
    ::Ice::Object* p = new D(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MF_D_ids[5] =
{
    "::Ice::Object",
    "::Test::MF::A",
    "::Test::MF::B",
    "::Test::MF::C",
    "::Test::MF::D"
};

}

bool
Test::MF::D::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MF_D_ids, iceC_Test_MF_D_ids + 5, s);
}

::std::vector< ::std::string>
Test::MF::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MF_D_ids[0], &iceC_Test_MF_D_ids[5]);
}

const ::std::string&
Test::MF::D::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MF::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::MF::D";
    return typeId;
}

/// \cond STREAM
void
Test::MF::D::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    C::_iceWriteImpl(ostr);
}

void
Test::MF::D::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    C::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MF::D> iceC_Test_MF_D_init("::Test::MF::D");
}

::Ice::ValueFactoryPtr
Test::MF::D::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MF::D::ice_staticId());
}

/// \cond INTERNAL
void
Test::MF::_icePatchObjectPtr(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(D::ice_staticId(), v);
    }
}
/// \endcond

Test::MG::A::~A()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MG::upCast(A* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MG::A::ice_clone() const
{
    ::Ice::Object* p = new A(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MG_A_ids[2] =
{
    "::Ice::Object",
    "::Test::MG::A"
};

}

bool
Test::MG::A::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MG_A_ids, iceC_Test_MG_A_ids + 2, s);
}

::std::vector< ::std::string>
Test::MG::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MG_A_ids[0], &iceC_Test_MG_A_ids[2]);
}

const ::std::string&
Test::MG::A::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MG::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::MG::A";
    return typeId;
}

/// \cond STREAM
void
Test::MG::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MG::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MG::A> iceC_Test_MG_A_init("::Test::MG::A");
}

::Ice::ValueFactoryPtr
Test::MG::A::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MG::A::ice_staticId());
}

/// \cond INTERNAL
void
Test::MG::_icePatchObjectPtr(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(A::ice_staticId(), v);
    }
}
/// \endcond

Test::MG::B::~B()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MG::upCast(B* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MG::B::ice_clone() const
{
    ::Ice::Object* p = new B(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MG_B_ids[3] =
{
    "::Ice::Object",
    "::Test::MG::A",
    "::Test::MG::B"
};

}

bool
Test::MG::B::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MG_B_ids, iceC_Test_MG_B_ids + 3, s);
}

::std::vector< ::std::string>
Test::MG::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MG_B_ids[0], &iceC_Test_MG_B_ids[3]);
}

const ::std::string&
Test::MG::B::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MG::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::MG::B";
    return typeId;
}

/// \cond STREAM
void
Test::MG::B::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    A::_iceWriteImpl(ostr);
}

void
Test::MG::B::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    A::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MG::B> iceC_Test_MG_B_init("::Test::MG::B");
}

::Ice::ValueFactoryPtr
Test::MG::B::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MG::B::ice_staticId());
}

/// \cond INTERNAL
void
Test::MG::_icePatchObjectPtr(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(B::ice_staticId(), v);
    }
}
/// \endcond

Test::MG::C::~C()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MG::upCast(C* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MG::C::ice_clone() const
{
    ::Ice::Object* p = new C(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MG_C_ids[4] =
{
    "::Ice::Object",
    "::Test::MG::A",
    "::Test::MG::B",
    "::Test::MG::C"
};

}

bool
Test::MG::C::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MG_C_ids, iceC_Test_MG_C_ids + 4, s);
}

::std::vector< ::std::string>
Test::MG::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MG_C_ids[0], &iceC_Test_MG_C_ids[4]);
}

const ::std::string&
Test::MG::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MG::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::MG::C";
    return typeId;
}

/// \cond STREAM
void
Test::MG::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::MG::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MG::C> iceC_Test_MG_C_init("::Test::MG::C");
}

::Ice::ValueFactoryPtr
Test::MG::C::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MG::C::ice_staticId());
}

/// \cond INTERNAL
void
Test::MG::_icePatchObjectPtr(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C::ice_staticId(), v);
    }
}
/// \endcond

Test::MG::D::~D()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MG::upCast(D* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MG::D::ice_clone() const
{
    ::Ice::Object* p = new D(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MG_D_ids[5] =
{
    "::Ice::Object",
    "::Test::MG::A",
    "::Test::MG::B",
    "::Test::MG::C",
    "::Test::MG::D"
};

}

bool
Test::MG::D::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MG_D_ids, iceC_Test_MG_D_ids + 5, s);
}

::std::vector< ::std::string>
Test::MG::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MG_D_ids[0], &iceC_Test_MG_D_ids[5]);
}

const ::std::string&
Test::MG::D::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MG::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::MG::D";
    return typeId;
}

/// \cond STREAM
void
Test::MG::D::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    C::_iceWriteImpl(ostr);
}

void
Test::MG::D::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    C::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MG::D> iceC_Test_MG_D_init("::Test::MG::D");
}

::Ice::ValueFactoryPtr
Test::MG::D::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MG::D::ice_staticId());
}

/// \cond INTERNAL
void
Test::MG::_icePatchObjectPtr(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(D::ice_staticId(), v);
    }
}
/// \endcond

Test::MH::A::~A()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MH::upCast(A* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MH::A::ice_clone() const
{
    ::Ice::Object* p = new A(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MH_A_ids[2] =
{
    "::Ice::Object",
    "::Test::MH::A"
};

}

bool
Test::MH::A::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MH_A_ids, iceC_Test_MH_A_ids + 2, s);
}

::std::vector< ::std::string>
Test::MH::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MH_A_ids[0], &iceC_Test_MH_A_ids[2]);
}

const ::std::string&
Test::MH::A::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MH::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::MH::A";
    return typeId;
}

/// \cond STREAM
void
Test::MH::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MH::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MH::A> iceC_Test_MH_A_init("::Test::MH::A");
}

::Ice::ValueFactoryPtr
Test::MH::A::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MH::A::ice_staticId());
}

/// \cond INTERNAL
void
Test::MH::_icePatchObjectPtr(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(A::ice_staticId(), v);
    }
}
/// \endcond

Test::MH::B::~B()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MH::upCast(B* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MH::B::ice_clone() const
{
    ::Ice::Object* p = new B(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MH_B_ids[3] =
{
    "::Ice::Object",
    "::Test::MH::A",
    "::Test::MH::B"
};

}

bool
Test::MH::B::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MH_B_ids, iceC_Test_MH_B_ids + 3, s);
}

::std::vector< ::std::string>
Test::MH::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MH_B_ids[0], &iceC_Test_MH_B_ids[3]);
}

const ::std::string&
Test::MH::B::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MH::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::MH::B";
    return typeId;
}

/// \cond STREAM
void
Test::MH::B::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    A::_iceWriteImpl(ostr);
}

void
Test::MH::B::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    A::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MH::B> iceC_Test_MH_B_init("::Test::MH::B");
}

::Ice::ValueFactoryPtr
Test::MH::B::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MH::B::ice_staticId());
}

/// \cond INTERNAL
void
Test::MH::_icePatchObjectPtr(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(B::ice_staticId(), v);
    }
}
/// \endcond

Test::MH::C::~C()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MH::upCast(C* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MH::C::ice_clone() const
{
    ::Ice::Object* p = new C(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MH_C_ids[4] =
{
    "::Ice::Object",
    "::Test::MH::A",
    "::Test::MH::B",
    "::Test::MH::C"
};

}

bool
Test::MH::C::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MH_C_ids, iceC_Test_MH_C_ids + 4, s);
}

::std::vector< ::std::string>
Test::MH::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MH_C_ids[0], &iceC_Test_MH_C_ids[4]);
}

const ::std::string&
Test::MH::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MH::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::MH::C";
    return typeId;
}

/// \cond STREAM
void
Test::MH::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::MH::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MH::C> iceC_Test_MH_C_init("::Test::MH::C");
}

::Ice::ValueFactoryPtr
Test::MH::C::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MH::C::ice_staticId());
}

/// \cond INTERNAL
void
Test::MH::_icePatchObjectPtr(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C::ice_staticId(), v);
    }
}
/// \endcond

Test::MH::D::~D()
{
}

/// \cond INTERNAL
::Ice::Object* Test::MH::upCast(D* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::MH::D::ice_clone() const
{
    ::Ice::Object* p = new D(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_MH_D_ids[5] =
{
    "::Ice::Object",
    "::Test::MH::A",
    "::Test::MH::B",
    "::Test::MH::C",
    "::Test::MH::D"
};

}

bool
Test::MH::D::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MH_D_ids, iceC_Test_MH_D_ids + 5, s);
}

::std::vector< ::std::string>
Test::MH::D::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MH_D_ids[0], &iceC_Test_MH_D_ids[5]);
}

const ::std::string&
Test::MH::D::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MH::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::MH::D";
    return typeId;
}

/// \cond STREAM
void
Test::MH::D::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    C::_iceWriteImpl(ostr);
}

void
Test::MH::D::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    C::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MH::D> iceC_Test_MH_D_init("::Test::MH::D");
}

::Ice::ValueFactoryPtr
Test::MH::D::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MH::D::ice_staticId());
}

/// \cond INTERNAL
void
Test::MH::_icePatchObjectPtr(DPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(D::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
