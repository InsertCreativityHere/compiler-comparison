//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ServerPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __ServerPrivate_h__
#define __ServerPrivate_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Test.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{


}

namespace Test
{

class UnknownDerived : public ::Ice::UserExceptionHelper<UnknownDerived, Base>
{
public:

    virtual ~UnknownDerived();

    UnknownDerived(const UnknownDerived&) = default;

    UnknownDerived() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    UnknownDerived(::std::string_view b, ::std::string_view ud) :
        ::Ice::UserExceptionHelper<UnknownDerived, Base>(b),
        ud(ud)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(b, ud);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    ::std::string ud;
};

/// \cond INTERNAL
static UnknownDerived _iceS_UnknownDerived_init;
/// \endcond

class UnknownIntermediate : public ::Ice::UserExceptionHelper<UnknownIntermediate, Base>
{
public:

    virtual ~UnknownIntermediate();

    UnknownIntermediate(const UnknownIntermediate&) = default;

    UnknownIntermediate() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    UnknownIntermediate(::std::string_view b, ::std::string_view ui) :
        ::Ice::UserExceptionHelper<UnknownIntermediate, Base>(b),
        ui(ui)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(b, ui);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    ::std::string ui;
};

class UnknownMostDerived1 : public ::Ice::UserExceptionHelper<UnknownMostDerived1, KnownIntermediate>
{
public:

    virtual ~UnknownMostDerived1();

    UnknownMostDerived1(const UnknownMostDerived1&) = default;

    UnknownMostDerived1() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    UnknownMostDerived1(::std::string_view b, ::std::string_view ki, ::std::string_view umd1) :
        ::Ice::UserExceptionHelper<UnknownMostDerived1, KnownIntermediate>(b, ki),
        umd1(umd1)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(b, ki, umd1);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    ::std::string umd1;
};

class UnknownMostDerived2 : public ::Ice::UserExceptionHelper<UnknownMostDerived2, UnknownIntermediate>
{
public:

    virtual ~UnknownMostDerived2();

    UnknownMostDerived2(const UnknownMostDerived2&) = default;

    UnknownMostDerived2() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    UnknownMostDerived2(::std::string_view b, ::std::string_view ui, ::std::string_view umd2) :
        ::Ice::UserExceptionHelper<UnknownMostDerived2, UnknownIntermediate>(b, ui),
        umd2(umd2)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(b, ui, umd2);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    ::std::string umd2;
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter<::Test::UnknownDerived, S>
{
    static void write(S* ostr, const ::Test::UnknownDerived& v)
    {
        ostr->writeAll(v.ud);
    }
};

template<typename S>
struct StreamReader<::Test::UnknownDerived, S>
{
    static void read(S* istr, ::Test::UnknownDerived& v)
    {
        istr->readAll(v.ud);
    }
};

template<typename S>
struct StreamWriter<::Test::UnknownIntermediate, S>
{
    static void write(S* ostr, const ::Test::UnknownIntermediate& v)
    {
        ostr->writeAll(v.ui);
    }
};

template<typename S>
struct StreamReader<::Test::UnknownIntermediate, S>
{
    static void read(S* istr, ::Test::UnknownIntermediate& v)
    {
        istr->readAll(v.ui);
    }
};

template<typename S>
struct StreamWriter<::Test::UnknownMostDerived1, S>
{
    static void write(S* ostr, const ::Test::UnknownMostDerived1& v)
    {
        ostr->writeAll(v.umd1);
    }
};

template<typename S>
struct StreamReader<::Test::UnknownMostDerived1, S>
{
    static void read(S* istr, ::Test::UnknownMostDerived1& v)
    {
        istr->readAll(v.umd1);
    }
};

template<typename S>
struct StreamWriter<::Test::UnknownMostDerived2, S>
{
    static void write(S* ostr, const ::Test::UnknownMostDerived2& v)
    {
        ostr->writeAll(v.umd2);
    }
};

template<typename S>
struct StreamReader<::Test::UnknownMostDerived2, S>
{
    static void read(S* istr, ::Test::UnknownMostDerived2& v)
    {
        istr->readAll(v.umd2);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
