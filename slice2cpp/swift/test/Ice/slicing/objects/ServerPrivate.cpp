//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ServerPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <ServerPrivate.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::SBSUnknownDerived> iceC_Test_SBSUnknownDerived_init("::Test::SBSUnknownDerived");

const ::IceInternal::DefaultValueFactoryInit<::Test::SUnknown> iceC_Test_SUnknown_init("::Test::SUnknown");

const ::IceInternal::DefaultValueFactoryInit<::Test::D2> iceC_Test_D2_init("::Test::D2");

const ::IceInternal::DefaultValueFactoryInit<::Test::D4> iceC_Test_D4_init("::Test::D4");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::UnknownDerivedException> iceC_Test_UnknownDerivedException_init("::Test::UnknownDerivedException");

const ::IceInternal::DefaultValueFactoryInit<::Test::MyClass> iceC_Test_MyClass_init("::Test::MyClass");

const ::IceInternal::DefaultValueFactoryInit<::Test::PSUnknown> iceC_Test_PSUnknown_init("::Test::PSUnknown");

const ::IceInternal::DefaultValueFactoryInit<::Test::PSUnknown2> iceC_Test_PSUnknown2_init("::Test::PSUnknown2");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::PSUnknownException> iceC_Test_PSUnknownException_init("::Test::PSUnknownException");

}

Test::UnknownDerivedException::~UnknownDerivedException()
{
}

const ::std::string&
Test::UnknownDerivedException::ice_staticId()
{
    static const ::std::string typeId = "::Test::UnknownDerivedException";
    return typeId;
}

Test::PSUnknownException::~PSUnknownException()
{
}

const ::std::string&
Test::PSUnknownException::ice_staticId()
{
    static const ::std::string typeId = "::Test::PSUnknownException";
    return typeId;
}

/// \cond STREAM
bool
Test::PSUnknownException::_usesClasses() const
{
    return true;
}
/// \endcond

Test::SBSUnknownDerived::~SBSUnknownDerived()
{
}

const ::std::string&
Test::SBSUnknownDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::SBSUnknownDerived";
    return typeId;
}

Test::SUnknown::~SUnknown()
{
}

const ::std::string&
Test::SUnknown::ice_staticId()
{
    static const ::std::string typeId = "::Test::SUnknown";
    return typeId;
}

Test::D2::~D2()
{
}

const ::std::string&
Test::D2::ice_staticId()
{
    static const ::std::string typeId = "::Test::D2";
    return typeId;
}

Test::D4::~D4()
{
}

const ::std::string&
Test::D4::ice_staticId()
{
    static const ::std::string typeId = "::Test::D4";
    return typeId;
}

Test::MyClass::~MyClass()
{
}

const ::std::string&
Test::MyClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyClass";
    return typeId;
}

Test::PSUnknown::~PSUnknown()
{
}

const ::std::string&
Test::PSUnknown::ice_staticId()
{
    static const ::std::string typeId = "::Test::PSUnknown";
    return typeId;
}

Test::PSUnknown2::~PSUnknown2()
{
}

const ::std::string&
Test::PSUnknown2::ice_staticId()
{
    static const ::std::string typeId = "::Test::PSUnknown2";
    return typeId;
}

#else // C++98 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::SBSUnknownDerived> iceC_Test_SBSUnknownDerived_init("::Test::SBSUnknownDerived");

const ::IceInternal::DefaultValueFactoryInit<::Test::SUnknown> iceC_Test_SUnknown_init("::Test::SUnknown");

const ::IceInternal::DefaultValueFactoryInit<::Test::D2> iceC_Test_D2_init("::Test::D2");

const ::IceInternal::DefaultValueFactoryInit<::Test::D4> iceC_Test_D4_init("::Test::D4");

const ::IceInternal::DefaultValueFactoryInit<::Test::MyClass> iceC_Test_MyClass_init("::Test::MyClass");

const ::IceInternal::DefaultValueFactoryInit<::Test::PSUnknown> iceC_Test_PSUnknown_init("::Test::PSUnknown");

const ::IceInternal::DefaultValueFactoryInit<::Test::PSUnknown2> iceC_Test_PSUnknown2_init("::Test::PSUnknown2");

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::UnknownDerivedException> iceC_Test_UnknownDerivedException_init("::Test::UnknownDerivedException");

}

Test::UnknownDerivedException::UnknownDerivedException(const ::std::string& sbe, const BPtr& pb, const ::std::string& sude, const D2Ptr& pd2) :
    BaseException(sbe, pb),
    sude(sude),
    pd2(pd2)
{
}
Test::UnknownDerivedException::~UnknownDerivedException()
{
}

::std::string
Test::UnknownDerivedException::ice_id() const
{
    return "::Test::UnknownDerivedException";
}

Test::UnknownDerivedException*
Test::UnknownDerivedException::ice_clone() const
{
    return new UnknownDerivedException(*this);
}

void
Test::UnknownDerivedException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::UnknownDerivedException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::UnknownDerivedException", -1, false);
    ::Ice::StreamWriter< UnknownDerivedException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    BaseException::_writeImpl(ostr);
}

void
Test::UnknownDerivedException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UnknownDerivedException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    BaseException::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::PSUnknownException> iceC_Test_PSUnknownException_init("::Test::PSUnknownException");

}

Test::PSUnknownException::PSUnknownException(const PSUnknown2Ptr& p) :
    PreservedException(),
    p(p)
{
}
Test::PSUnknownException::~PSUnknownException()
{
}

::std::string
Test::PSUnknownException::ice_id() const
{
    return "::Test::PSUnknownException";
}

Test::PSUnknownException*
Test::PSUnknownException::ice_clone() const
{
    return new PSUnknownException(*this);
}

void
Test::PSUnknownException::ice_throw() const
{
    throw *this;
}

bool
Test::PSUnknownException::_usesClasses() const
{
    return true;
}

/// \cond STREAM
void
Test::PSUnknownException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::PSUnknownException", -1, false);
    ::Ice::StreamWriter< PSUnknownException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    PreservedException::_writeImpl(ostr);
}

void
Test::PSUnknownException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< PSUnknownException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    PreservedException::_readImpl(istr);
}
/// \endcond

Test::SBSUnknownDerived::~SBSUnknownDerived()
{
}

const ::std::string&
Test::SBSUnknownDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::SBSUnknownDerived";
    return typeId;
}

Test::SUnknown::~SUnknown()
{
}

const ::std::string&
Test::SUnknown::ice_staticId()
{
    static const ::std::string typeId = "::Test::SUnknown";
    return typeId;
}

Test::D2::~D2()
{
}

const ::std::string&
Test::D2::ice_staticId()
{
    static const ::std::string typeId = "::Test::D2";
    return typeId;
}

Test::D4::~D4()
{
}

const ::std::string&
Test::D4::ice_staticId()
{
    static const ::std::string typeId = "::Test::D4";
    return typeId;
}

Test::MyClass::~MyClass()
{
}

const ::std::string&
Test::MyClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyClass";
    return typeId;
}

Test::PSUnknown::~PSUnknown()
{
}

const ::std::string&
Test::PSUnknown::ice_staticId()
{
    static const ::std::string typeId = "::Test::PSUnknown";
    return typeId;
}

Test::PSUnknown2::~PSUnknown2()
{
}

const ::std::string&
Test::PSUnknown2::ice_staticId()
{
    static const ::std::string typeId = "::Test::PSUnknown2";
    return typeId;
}

namespace Ice
{
}

#endif
