//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ServerPrivateAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include "ServerPrivateAMD.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::Test::SBSUnknownDerived> iceC_Test_SBSUnknownDerived_init("::Test::SBSUnknownDerived");
    const ::IceInternal::DefaultValueFactoryInit<::Test::SUnknown> iceC_Test_SUnknown_init("::Test::SUnknown");
    const ::IceInternal::DefaultValueFactoryInit<::Test::D2> iceC_Test_D2_init("::Test::D2");
    const ::IceInternal::DefaultValueFactoryInit<::Test::D4> iceC_Test_D4_init("::Test::D4");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::UnknownDerivedException> iceC_Test_UnknownDerivedException_init("::Test::UnknownDerivedException");
    const ::IceInternal::DefaultValueFactoryInit<::Test::MyClass> iceC_Test_MyClass_init("::Test::MyClass");
    const ::IceInternal::DefaultValueFactoryInit<::Test::PSUnknown> iceC_Test_PSUnknown_init("::Test::PSUnknown");
    const ::IceInternal::DefaultValueFactoryInit<::Test::PSUnknown2> iceC_Test_PSUnknown2_init("::Test::PSUnknown2");
}

::std::string
Test::SBSUnknownDerived::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::SBSUnknownDerived::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::SBSUnknownDerived";
    return typeId;
}

::Ice::ValuePtr
Test::SBSUnknownDerived::_iceCloneImpl() const
{
    return CloneEnabler<SBSUnknownDerived>::clone(*this);
}

void
Test::SBSUnknownDerived::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<SBSUnknownDerived>::write(ostr, *this);
    ostr->endSlice();
    SBase::_iceWriteImpl(ostr);
}

void
Test::SBSUnknownDerived::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<SBSUnknownDerived>::read(istr, *this);
    istr->endSlice();
    SBase::_iceReadImpl(istr);
}

::std::string
Test::SUnknown::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::SUnknown::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::SUnknown";
    return typeId;
}

::Ice::ValuePtr
Test::SUnknown::_iceCloneImpl() const
{
    return CloneEnabler<SUnknown>::clone(*this);
}

void
Test::SUnknown::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<SUnknown>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::SUnknown::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<SUnknown>::read(istr, *this);
    istr->endSlice();
}

::std::string
Test::D2::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::D2::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::D2";
    return typeId;
}

::Ice::ValuePtr
Test::D2::_iceCloneImpl() const
{
    return CloneEnabler<D2>::clone(*this);
}

void
Test::D2::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<D2>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::D2::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<D2>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}

::std::string
Test::D4::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::D4::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::D4";
    return typeId;
}

::Ice::ValuePtr
Test::D4::_iceCloneImpl() const
{
    return CloneEnabler<D4>::clone(*this);
}

void
Test::D4::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<D4>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::D4::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<D4>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}

const char*
Test::UnknownDerivedException::ice_staticId() noexcept
{
    return "::Test::UnknownDerivedException";
}

const char*
Test::UnknownDerivedException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::UnknownDerivedException::ice_throw() const
{
    throw *this;
}

void
Test::UnknownDerivedException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<UnknownDerivedException>::write(ostr, *this);
    ostr->endSlice();
    BaseException::_writeImpl(ostr);
}

void
Test::UnknownDerivedException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<UnknownDerivedException>::read(istr, *this);
    istr->endSlice();
    BaseException::_readImpl(istr);
}

::std::string
Test::MyClass::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::MyClass::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::MyClass";
    return typeId;
}

::Ice::ValuePtr
Test::MyClass::_iceCloneImpl() const
{
    return CloneEnabler<MyClass>::clone(*this);
}

void
Test::MyClass::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<MyClass>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MyClass::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<MyClass>::read(istr, *this);
    istr->endSlice();
}

::std::string
Test::PSUnknown::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::PSUnknown::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::PSUnknown";
    return typeId;
}

::Ice::ValuePtr
Test::PSUnknown::_iceCloneImpl() const
{
    return CloneEnabler<PSUnknown>::clone(*this);
}

void
Test::PSUnknown::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<PSUnknown>::write(ostr, *this);
    ostr->endSlice();
    Preserved::_iceWriteImpl(ostr);
}

void
Test::PSUnknown::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<PSUnknown>::read(istr, *this);
    istr->endSlice();
    Preserved::_iceReadImpl(istr);
}

::std::string
Test::PSUnknown2::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::PSUnknown2::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::PSUnknown2";
    return typeId;
}

::Ice::ValuePtr
Test::PSUnknown2::_iceCloneImpl() const
{
    return CloneEnabler<PSUnknown2>::clone(*this);
}

void
Test::PSUnknown2::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<PSUnknown2>::write(ostr, *this);
    ostr->endSlice();
    Preserved::_iceWriteImpl(ostr);
}

void
Test::PSUnknown2::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<PSUnknown2>::read(istr, *this);
    istr->endSlice();
    Preserved::_iceReadImpl(istr);
}
