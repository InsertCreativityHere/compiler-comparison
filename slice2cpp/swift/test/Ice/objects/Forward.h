//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Forward.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Forward_h__
#define __Forward_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

class F1;

using F1Ptr = ::std::shared_ptr<F1>;
class F2Prx;

}

namespace Test
{

class F2Prx : public ::Ice::Proxy<F2Prx, ::Ice::ObjectPrx>
{
public:

    void op(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> opAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    opAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    explicit F2Prx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    F2Prx(const F2Prx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    F2Prx(F2Prx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    F2Prx(const ::std::shared_ptr<::Ice::Communicator>& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    F2Prx& operator=(const F2Prx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    F2Prx& operator=(F2Prx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static F2Prx _fromReference(::IceInternal::ReferencePtr ref) { return F2Prx(::std::move(ref)); }

protected:

    F2Prx() = default;

    explicit F2Prx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace Test
{

class F1 : public ::Ice::Value
{
public:

    F1() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit F1(::std::string name) :
        name(::std::move(name))
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    ::std::string ice_id() const override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(name);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    ::std::shared_ptr<F1> ice_clone() const { return ::std::static_pointer_cast <F1>(_iceCloneImpl()); }

    ::std::string name;

protected:

    F1(const F1&) = default;

    ::std::shared_ptr<::Ice::Value> _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

/// \cond INTERNAL
static F1 _iceS_F1_init;
/// \endcond

}

namespace Test
{

class F2 : public virtual ::Ice::Object
{
public:

    using ProxyType = F2Prx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    virtual void op(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_op(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using F2Ptr = ::std::shared_ptr<F2>;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamReader<::Test::F1>
{
    static void read(InputStream* istr, ::Test::F1& v)
    {
        istr->readAll(v.name);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
