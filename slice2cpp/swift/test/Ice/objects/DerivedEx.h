//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `DerivedEx.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __DerivedEx_h__
#define __DerivedEx_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Test.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{


}

namespace Test
{

class DerivedEx : public ::Ice::UserExceptionHelper<DerivedEx, BaseEx>
{
public:

    virtual ~DerivedEx();

    DerivedEx(const DerivedEx&) = default;

    DerivedEx() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    DerivedEx(::std::string_view reason) :
        ::Ice::UserExceptionHelper<DerivedEx, BaseEx>(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();
};

/// \cond INTERNAL
static DerivedEx _iceS_DerivedEx_init;
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter<::Test::DerivedEx, S>
{
    static void write(S*, const ::Test::DerivedEx&)
    {
    }
};

template<typename S>
struct StreamReader<::Test::DerivedEx, S>
{
    static void read(S*, ::Test::DerivedEx&)
    {
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
