//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <TestAMD.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <Ice/SlicedData.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::OneOptional> iceC_Test_OneOptional_init("::Test::OneOptional");

const ::IceInternal::DefaultValueFactoryInit<::Test::MultiOptional> iceC_Test_MultiOptional_init("::Test::MultiOptional");

const ::IceInternal::DefaultValueFactoryInit<::Test::A> iceC_Test_A_init("::Test::A");

const ::IceInternal::DefaultValueFactoryInit<::Test::B> iceC_Test_B_init("::Test::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::WD> iceC_Test_WD_init("::Test::WD");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::OptionalException> iceC_Test_OptionalException_init("::Test::OptionalException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::DerivedException> iceC_Test_DerivedException_init("::Test::DerivedException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::RequiredException> iceC_Test_RequiredException_init("::Test::RequiredException");

const ::IceInternal::DefaultValueFactoryInit<::Test::OptionalWithCustom> iceC_Test_OptionalWithCustom_init("::Test::OptionalWithCustom");

const ::IceInternal::DefaultValueFactoryInit<::Test::E> iceC_Test_E_init("::Test::E");

const ::IceInternal::DefaultValueFactoryInit<::Test::F> iceC_Test_F_init("::Test::F");

const ::IceInternal::DefaultValueFactoryInit<::Test::G1> iceC_Test_G1_init("::Test::G1");

const ::IceInternal::DefaultValueFactoryInit<::Test::G2> iceC_Test_G2_init("::Test::G2");

const ::IceInternal::DefaultValueFactoryInit<::Test::G> iceC_Test_G_init("::Test::G");

const ::IceInternal::DefaultValueFactoryInit<::Test::Recursive> iceC_Test_Recursive_init("::Test::Recursive");

const ::std::string iceC_Test_Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};
const ::std::string iceC_Test_Initial_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolSeq",
    "opByte",
    "opByteSeq",
    "opClassAndUnknownOptional",
    "opDerivedException",
    "opDouble",
    "opDoubleSeq",
    "opFixedStruct",
    "opFixedStructList",
    "opFixedStructSeq",
    "opFloat",
    "opFloatSeq",
    "opG",
    "opInt",
    "opIntIntDict",
    "opIntOneOptionalDict",
    "opIntSeq",
    "opLong",
    "opLongSeq",
    "opMDict1",
    "opMDict2",
    "opMG1",
    "opMG2",
    "opMSeq1",
    "opMSeq2",
    "opMStruct1",
    "opMStruct2",
    "opMyEnum",
    "opOneOptional",
    "opOneOptionalProxy",
    "opOptionalException",
    "opRequiredException",
    "opSerializable",
    "opShort",
    "opShortSeq",
    "opSmallStruct",
    "opSmallStructList",
    "opSmallStructSeq",
    "opString",
    "opStringIntDict",
    "opStringSeq",
    "opVarStruct",
    "opVarStructSeq",
    "opVoid",
    "pingPong",
    "returnOptionalClass",
    "sendOptionalClass",
    "shutdown",
    "supportsCppStringView",
    "supportsCsharpSerializable",
    "supportsJavaSerializable",
    "supportsNullOptional",
    "supportsRequiredParams"
};
const ::std::string iceC_Test_Initial_shutdown_name = "shutdown";
const ::std::string iceC_Test_Initial_pingPong_name = "pingPong";
const ::std::string iceC_Test_Initial_opOptionalException_name = "opOptionalException";
const ::std::string iceC_Test_Initial_opDerivedException_name = "opDerivedException";
const ::std::string iceC_Test_Initial_opRequiredException_name = "opRequiredException";
const ::std::string iceC_Test_Initial_opByte_name = "opByte";
const ::std::string iceC_Test_Initial_opBool_name = "opBool";
const ::std::string iceC_Test_Initial_opShort_name = "opShort";
const ::std::string iceC_Test_Initial_opInt_name = "opInt";
const ::std::string iceC_Test_Initial_opLong_name = "opLong";
const ::std::string iceC_Test_Initial_opFloat_name = "opFloat";
const ::std::string iceC_Test_Initial_opDouble_name = "opDouble";
const ::std::string iceC_Test_Initial_opString_name = "opString";
const ::std::string iceC_Test_Initial_opMyEnum_name = "opMyEnum";
const ::std::string iceC_Test_Initial_opSmallStruct_name = "opSmallStruct";
const ::std::string iceC_Test_Initial_opFixedStruct_name = "opFixedStruct";
const ::std::string iceC_Test_Initial_opVarStruct_name = "opVarStruct";
const ::std::string iceC_Test_Initial_opOneOptional_name = "opOneOptional";
const ::std::string iceC_Test_Initial_opOneOptionalProxy_name = "opOneOptionalProxy";
const ::std::string iceC_Test_Initial_opByteSeq_name = "opByteSeq";
const ::std::string iceC_Test_Initial_opBoolSeq_name = "opBoolSeq";
const ::std::string iceC_Test_Initial_opShortSeq_name = "opShortSeq";
const ::std::string iceC_Test_Initial_opIntSeq_name = "opIntSeq";
const ::std::string iceC_Test_Initial_opLongSeq_name = "opLongSeq";
const ::std::string iceC_Test_Initial_opFloatSeq_name = "opFloatSeq";
const ::std::string iceC_Test_Initial_opDoubleSeq_name = "opDoubleSeq";
const ::std::string iceC_Test_Initial_opStringSeq_name = "opStringSeq";
const ::std::string iceC_Test_Initial_opSmallStructSeq_name = "opSmallStructSeq";
const ::std::string iceC_Test_Initial_opSmallStructList_name = "opSmallStructList";
const ::std::string iceC_Test_Initial_opFixedStructSeq_name = "opFixedStructSeq";
const ::std::string iceC_Test_Initial_opFixedStructList_name = "opFixedStructList";
const ::std::string iceC_Test_Initial_opVarStructSeq_name = "opVarStructSeq";
const ::std::string iceC_Test_Initial_opSerializable_name = "opSerializable";
const ::std::string iceC_Test_Initial_opIntIntDict_name = "opIntIntDict";
const ::std::string iceC_Test_Initial_opStringIntDict_name = "opStringIntDict";
const ::std::string iceC_Test_Initial_opIntOneOptionalDict_name = "opIntOneOptionalDict";
const ::std::string iceC_Test_Initial_opClassAndUnknownOptional_name = "opClassAndUnknownOptional";
const ::std::string iceC_Test_Initial_sendOptionalClass_name = "sendOptionalClass";
const ::std::string iceC_Test_Initial_returnOptionalClass_name = "returnOptionalClass";
const ::std::string iceC_Test_Initial_opG_name = "opG";
const ::std::string iceC_Test_Initial_opVoid_name = "opVoid";
const ::std::string iceC_Test_Initial_opMStruct1_name = "opMStruct1";
const ::std::string iceC_Test_Initial_opMStruct2_name = "opMStruct2";
const ::std::string iceC_Test_Initial_opMSeq1_name = "opMSeq1";
const ::std::string iceC_Test_Initial_opMSeq2_name = "opMSeq2";
const ::std::string iceC_Test_Initial_opMDict1_name = "opMDict1";
const ::std::string iceC_Test_Initial_opMDict2_name = "opMDict2";
const ::std::string iceC_Test_Initial_opMG1_name = "opMG1";
const ::std::string iceC_Test_Initial_opMG2_name = "opMG2";
const ::std::string iceC_Test_Initial_supportsRequiredParams_name = "supportsRequiredParams";
const ::std::string iceC_Test_Initial_supportsJavaSerializable_name = "supportsJavaSerializable";
const ::std::string iceC_Test_Initial_supportsCsharpSerializable_name = "supportsCsharpSerializable";
const ::std::string iceC_Test_Initial_supportsCppStringView_name = "supportsCppStringView";
const ::std::string iceC_Test_Initial_supportsNullOptional_name = "supportsNullOptional";

}

Test::OptionalException::~OptionalException()
{
}

const ::std::string&
Test::OptionalException::ice_staticId()
{
    static const ::std::string typeId = "::Test::OptionalException";
    return typeId;
}

Test::DerivedException::~DerivedException()
{
}

const ::std::string&
Test::DerivedException::ice_staticId()
{
    static const ::std::string typeId = "::Test::DerivedException";
    return typeId;
}

Test::RequiredException::~RequiredException()
{
}

const ::std::string&
Test::RequiredException::ice_staticId()
{
    static const ::std::string typeId = "::Test::RequiredException";
    return typeId;
}

/// \cond STREAM
bool
Test::RequiredException::_usesClasses() const
{
    return true;
}
/// \endcond

bool
Test::Initial::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial_ids, iceC_Test_Initial_ids + 2, s);
}

::std::vector<::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Initial_ids[0], &iceC_Test_Initial_ids[2]);
}

::std::string
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->shutdownAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_pingPong(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Ice::Value> iceP_o;
    istr->readAll(iceP_o);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::shared_ptr<::Ice::Value>& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        ostr->writePendingValues();
        inA->endWriteParams();
        inA->completed();
    };
    this->pingPongAsync(::std::move(iceP_o), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opOptionalException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<int> iceP_a;
    Ice::optional<::std::string> iceP_b;
    Ice::optional<::std::shared_ptr<OneOptional>> iceP_o;
    istr->readAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opOptionalExceptionAsync(iceP_a, ::std::move(iceP_b), ::std::move(iceP_o), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opDerivedException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<int> iceP_a;
    Ice::optional<::std::string> iceP_b;
    Ice::optional<::std::shared_ptr<OneOptional>> iceP_o;
    istr->readAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opDerivedExceptionAsync(iceP_a, ::std::move(iceP_b), ::std::move(iceP_o), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opRequiredException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<int> iceP_a;
    Ice::optional<::std::string> iceP_b;
    Ice::optional<::std::shared_ptr<OneOptional>> iceP_o;
    istr->readAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opRequiredExceptionAsync(iceP_a, ::std::move(iceP_b), ::std::move(iceP_o), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opByte(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<::Ice::Byte> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<::Ice::Byte>& ret, const Ice::optional<::Ice::Byte>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opByteAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opBool(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<bool> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<bool>& ret, const Ice::optional<bool>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opBoolAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opShort(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<short> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<short>& ret, const Ice::optional<short>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opShortAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opInt(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<int> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<int>& ret, const Ice::optional<int>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opIntAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opLong(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<long long int> iceP_p1;
    istr->readAll({1}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<long long int>& ret, const Ice::optional<long long int>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({2, 3}, iceP_p3, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLongAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFloat(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<float> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<float>& ret, const Ice::optional<float>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opFloatAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opDouble(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<double> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<double>& ret, const Ice::optional<double>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opDoubleAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opString(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<::std::string> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<::std::string>& ret, const Ice::optional<::std::string>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMyEnum(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<MyEnum> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<MyEnum>& ret, const Ice::optional<MyEnum>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opMyEnumAsync(iceP_p1, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSmallStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<SmallStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<SmallStruct>& ret, const Ice::optional<SmallStruct>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSmallStructAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFixedStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<FixedStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<FixedStruct>& ret, const Ice::optional<FixedStruct>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opFixedStructAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opVarStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<VarStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<VarStruct>& ret, const Ice::optional<VarStruct>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opVarStructAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opOneOptional(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<::std::shared_ptr<OneOptional>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<::std::shared_ptr<OneOptional>>& ret, const Ice::optional<::std::shared_ptr<OneOptional>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opOneOptionalAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opOneOptionalProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<::std::shared_ptr<::Ice::ObjectPrx>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<::std::shared_ptr<::Ice::ObjectPrx>>& ret, const Ice::optional<::std::shared_ptr<::Ice::ObjectPrx>>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opOneOptionalProxyAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opByteSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<ByteSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<ByteSeq>& ret, const Ice::optional<ByteSeq>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opByteSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opBoolSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<BoolSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<BoolSeq>& ret, const Ice::optional<BoolSeq>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opBoolSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opShortSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<ShortSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<ShortSeq>& ret, const Ice::optional<ShortSeq>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opShortSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opIntSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<IntSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<IntSeq>& ret, const Ice::optional<IntSeq>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opIntSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opLongSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<LongSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<LongSeq>& ret, const Ice::optional<LongSeq>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opLongSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFloatSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<FloatSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<FloatSeq>& ret, const Ice::optional<FloatSeq>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opFloatSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opDoubleSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<DoubleSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<DoubleSeq>& ret, const Ice::optional<DoubleSeq>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opDoubleSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opStringSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<StringSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<StringSeq>& ret, const Ice::optional<StringSeq>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSmallStructSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<SmallStructSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<SmallStructSeq>& ret, const Ice::optional<SmallStructSeq>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSmallStructSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSmallStructList(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<SmallStructList> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<SmallStructList>& ret, const Ice::optional<SmallStructList>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSmallStructListAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFixedStructSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<FixedStructSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<FixedStructSeq>& ret, const Ice::optional<FixedStructSeq>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opFixedStructSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFixedStructList(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<FixedStructList> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<FixedStructList>& ret, const Ice::optional<FixedStructList>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opFixedStructListAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opVarStructSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<VarStructSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<VarStructSeq>& ret, const Ice::optional<VarStructSeq>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opVarStructSeqAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSerializable(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<Serializable> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<Serializable>& ret, const Ice::optional<Serializable>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opSerializableAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opIntIntDict(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<IntIntDict> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<IntIntDict>& ret, const Ice::optional<IntIntDict>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opIntIntDictAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opStringIntDict(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<StringIntDict> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<StringIntDict>& ret, const Ice::optional<StringIntDict>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opStringIntDictAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opIntOneOptionalDict(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<IntOneOptionalDict> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<IntOneOptionalDict>& ret, const Ice::optional<IntOneOptionalDict>& iceP_p3)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1, 3}, ret, iceP_p3);
        inA->endWriteParams();
        inA->completed();
    };
    this->opIntOneOptionalDictAsync(::std::move(iceP_p1), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opClassAndUnknownOptional(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<A> iceP_p;
    istr->readAll(iceP_p);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opClassAndUnknownOptionalAsync(::std::move(iceP_p), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_sendOptionalClass(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_req;
    Ice::optional<::std::shared_ptr<OneOptional>> iceP_o;
    istr->readAll(iceP_req);
    istr->readAll({1}, iceP_o);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->sendOptionalClassAsync(iceP_req, ::std::move(iceP_o), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_returnOptionalClass(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_req;
    istr->readAll(iceP_req);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const Ice::optional<::std::shared_ptr<OneOptional>>& iceP_o)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll({1}, iceP_o);
        inA->endWriteParams();
        inA->completed();
    };
    this->returnOptionalClassAsync(iceP_req, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opG(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<G> iceP_g;
    istr->readAll(iceP_g);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::shared_ptr<G>& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        ostr->writePendingValues();
        inA->endWriteParams();
        inA->completed();
    };
    this->opGAsync(::std::move(iceP_g), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opVoid(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opVoidAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMStruct1MarshaledResult::OpMStruct1MarshaledResult(const Ice::optional<SmallStruct>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1}, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMStruct1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMStruct1Async(inA->response<OpMStruct1MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMStruct2MarshaledResult::OpMStruct2MarshaledResult(const Ice::optional<SmallStruct>& ret, const Ice::optional<SmallStruct>& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1, 3}, ret, iceP_p2);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMStruct2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<SmallStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMStruct2Async(::std::move(iceP_p1), inA->response<OpMStruct2MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMSeq1MarshaledResult::OpMSeq1MarshaledResult(const Ice::optional<StringSeq>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1}, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMSeq1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMSeq1Async(inA->response<OpMSeq1MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMSeq2MarshaledResult::OpMSeq2MarshaledResult(const Ice::optional<StringSeq>& ret, const Ice::optional<StringSeq>& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1, 3}, ret, iceP_p2);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMSeq2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<StringSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMSeq2Async(::std::move(iceP_p1), inA->response<OpMSeq2MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMDict1MarshaledResult::OpMDict1MarshaledResult(const Ice::optional<StringIntDict>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1}, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMDict1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMDict1Async(inA->response<OpMDict1MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMDict2MarshaledResult::OpMDict2MarshaledResult(const Ice::optional<StringIntDict>& ret, const Ice::optional<StringIntDict>& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1, 3}, ret, iceP_p2);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMDict2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<StringIntDict> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMDict2Async(::std::move(iceP_p1), inA->response<OpMDict2MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMG1MarshaledResult::OpMG1MarshaledResult(const Ice::optional<::std::shared_ptr<G>>& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1}, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMG1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMG1Async(inA->response<OpMG1MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

Test::Initial::OpMG2MarshaledResult::OpMG2MarshaledResult(const Ice::optional<::std::shared_ptr<G>>& ret, const Ice::optional<::std::shared_ptr<G>>& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll({1, 3}, ret, iceP_p2);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMG2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Ice::optional<::std::shared_ptr<G>> iceP_p1;
    istr->readAll({2}, iceP_p1);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->opMG2Async(::std::move(iceP_p1), inA->response<OpMG2MarshaledResult>(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsRequiredParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](bool ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->supportsRequiredParamsAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsJavaSerializable(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](bool ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->supportsJavaSerializableAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsCsharpSerializable(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](bool ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->supportsCsharpSerializableAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsCppStringView(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](bool ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->supportsCppStringViewAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsNullOptional(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](bool ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->supportsNullOptionalAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial_ops, iceC_Test_Initial_ops + 58, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opBool(in, current);
        }
        case 5:
        {
            return _iceD_opBoolSeq(in, current);
        }
        case 6:
        {
            return _iceD_opByte(in, current);
        }
        case 7:
        {
            return _iceD_opByteSeq(in, current);
        }
        case 8:
        {
            return _iceD_opClassAndUnknownOptional(in, current);
        }
        case 9:
        {
            return _iceD_opDerivedException(in, current);
        }
        case 10:
        {
            return _iceD_opDouble(in, current);
        }
        case 11:
        {
            return _iceD_opDoubleSeq(in, current);
        }
        case 12:
        {
            return _iceD_opFixedStruct(in, current);
        }
        case 13:
        {
            return _iceD_opFixedStructList(in, current);
        }
        case 14:
        {
            return _iceD_opFixedStructSeq(in, current);
        }
        case 15:
        {
            return _iceD_opFloat(in, current);
        }
        case 16:
        {
            return _iceD_opFloatSeq(in, current);
        }
        case 17:
        {
            return _iceD_opG(in, current);
        }
        case 18:
        {
            return _iceD_opInt(in, current);
        }
        case 19:
        {
            return _iceD_opIntIntDict(in, current);
        }
        case 20:
        {
            return _iceD_opIntOneOptionalDict(in, current);
        }
        case 21:
        {
            return _iceD_opIntSeq(in, current);
        }
        case 22:
        {
            return _iceD_opLong(in, current);
        }
        case 23:
        {
            return _iceD_opLongSeq(in, current);
        }
        case 24:
        {
            return _iceD_opMDict1(in, current);
        }
        case 25:
        {
            return _iceD_opMDict2(in, current);
        }
        case 26:
        {
            return _iceD_opMG1(in, current);
        }
        case 27:
        {
            return _iceD_opMG2(in, current);
        }
        case 28:
        {
            return _iceD_opMSeq1(in, current);
        }
        case 29:
        {
            return _iceD_opMSeq2(in, current);
        }
        case 30:
        {
            return _iceD_opMStruct1(in, current);
        }
        case 31:
        {
            return _iceD_opMStruct2(in, current);
        }
        case 32:
        {
            return _iceD_opMyEnum(in, current);
        }
        case 33:
        {
            return _iceD_opOneOptional(in, current);
        }
        case 34:
        {
            return _iceD_opOneOptionalProxy(in, current);
        }
        case 35:
        {
            return _iceD_opOptionalException(in, current);
        }
        case 36:
        {
            return _iceD_opRequiredException(in, current);
        }
        case 37:
        {
            return _iceD_opSerializable(in, current);
        }
        case 38:
        {
            return _iceD_opShort(in, current);
        }
        case 39:
        {
            return _iceD_opShortSeq(in, current);
        }
        case 40:
        {
            return _iceD_opSmallStruct(in, current);
        }
        case 41:
        {
            return _iceD_opSmallStructList(in, current);
        }
        case 42:
        {
            return _iceD_opSmallStructSeq(in, current);
        }
        case 43:
        {
            return _iceD_opString(in, current);
        }
        case 44:
        {
            return _iceD_opStringIntDict(in, current);
        }
        case 45:
        {
            return _iceD_opStringSeq(in, current);
        }
        case 46:
        {
            return _iceD_opVarStruct(in, current);
        }
        case 47:
        {
            return _iceD_opVarStructSeq(in, current);
        }
        case 48:
        {
            return _iceD_opVoid(in, current);
        }
        case 49:
        {
            return _iceD_pingPong(in, current);
        }
        case 50:
        {
            return _iceD_returnOptionalClass(in, current);
        }
        case 51:
        {
            return _iceD_sendOptionalClass(in, current);
        }
        case 52:
        {
            return _iceD_shutdown(in, current);
        }
        case 53:
        {
            return _iceD_supportsCppStringView(in, current);
        }
        case 54:
        {
            return _iceD_supportsCsharpSerializable(in, current);
        }
        case 55:
        {
            return _iceD_supportsJavaSerializable(in, current);
        }
        case 56:
        {
            return _iceD_supportsNullOptional(in, current);
        }
        case 57:
        {
            return _iceD_supportsRequiredParams(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::OneOptional::~OneOptional()
{
}

const ::std::string&
Test::OneOptional::ice_staticId()
{
    static const ::std::string typeId = "::Test::OneOptional";
    return typeId;
}

Test::MultiOptional::~MultiOptional()
{
}

const ::std::string&
Test::MultiOptional::ice_staticId()
{
    static const ::std::string typeId = "::Test::MultiOptional";
    return typeId;
}

Test::A::~A()
{
}

const ::std::string&
Test::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

Test::B::~B()
{
}

::std::shared_ptr<::Ice::SlicedData>
Test::B::ice_getSlicedData() const
{
    return _iceSlicedData;
}

/// \cond STREAM
void
Test::B::_iceWrite(::Ice::OutputStream* ostr) const
{
    ostr->startValue(_iceSlicedData);
    _iceWriteImpl(ostr);
    ostr->endValue();
}

void
Test::B::_iceRead(::Ice::InputStream* istr)
{
    istr->startValue();
    _iceReadImpl(istr);
    _iceSlicedData = istr->endValue(true);
}
/// \endcond

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

Test::C::~C()
{
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

Test::WD::~WD()
{
}

const ::std::string&
Test::WD::ice_staticId()
{
    static const ::std::string typeId = "::Test::WD";
    return typeId;
}

Test::OptionalWithCustom::~OptionalWithCustom()
{
}

const ::std::string&
Test::OptionalWithCustom::ice_staticId()
{
    static const ::std::string typeId = "::Test::OptionalWithCustom";
    return typeId;
}

Test::E::~E()
{
}

const ::std::string&
Test::E::ice_staticId()
{
    static const ::std::string typeId = "::Test::E";
    return typeId;
}

Test::F::~F()
{
}

const ::std::string&
Test::F::ice_staticId()
{
    static const ::std::string typeId = "::Test::F";
    return typeId;
}

Test::G1::~G1()
{
}

const ::std::string&
Test::G1::ice_staticId()
{
    static const ::std::string typeId = "::Test::G1";
    return typeId;
}

Test::G2::~G2()
{
}

const ::std::string&
Test::G2::ice_staticId()
{
    static const ::std::string typeId = "::Test::G2";
    return typeId;
}

Test::G::~G()
{
}

const ::std::string&
Test::G::ice_staticId()
{
    static const ::std::string typeId = "::Test::G";
    return typeId;
}

Test::Recursive::~Recursive()
{
}

const ::std::string&
Test::Recursive::ice_staticId()
{
    static const ::std::string typeId = "::Test::Recursive";
    return typeId;
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_pingPong(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::Value>>>& outAsync, const ::std::shared_ptr<::Ice::Value>& iceP_o, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_pingPong_name);
    outAsync->invoke(iceC_Test_Initial_pingPong_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_o);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Ice::Value> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opOptionalException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::optional<int>& iceP_a, const Ice::optional<::std::string>& iceP_b, const Ice::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opOptionalException_name);
    outAsync->invoke(iceC_Test_Initial_opOptionalException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const OptionalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opDerivedException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::optional<int>& iceP_a, const Ice::optional<::std::string>& iceP_b, const Ice::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opDerivedException_name);
    outAsync->invoke(iceC_Test_Initial_opDerivedException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const OptionalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opRequiredException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::optional<int>& iceP_a, const Ice::optional<::std::string>& iceP_b, const Ice::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opRequiredException_name);
    outAsync->invoke(iceC_Test_Initial_opRequiredException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2, 3}, iceP_a, iceP_b, iceP_o);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const OptionalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opByte(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpByteResult>>& outAsync, const Ice::optional<::Ice::Byte>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opByte_name);
    outAsync->invoke(iceC_Test_Initial_opByte_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpByteResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opBool(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpBoolResult>>& outAsync, const Ice::optional<bool>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opBool_name);
    outAsync->invoke(iceC_Test_Initial_opBool_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpBoolResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opShort(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpShortResult>>& outAsync, const Ice::optional<short>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opShort_name);
    outAsync->invoke(iceC_Test_Initial_opShort_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpShortResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opInt(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntResult>>& outAsync, const Ice::optional<int>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opInt_name);
    outAsync->invoke(iceC_Test_Initial_opInt_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpIntResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opLong(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpLongResult>>& outAsync, const Ice::optional<long long int>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opLong_name);
    outAsync->invoke(iceC_Test_Initial_opLong_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpLongResult v;
            istr->readAll({2, 3}, v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opFloat(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFloatResult>>& outAsync, const Ice::optional<float>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opFloat_name);
    outAsync->invoke(iceC_Test_Initial_opFloat_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpFloatResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opDouble(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpDoubleResult>>& outAsync, const Ice::optional<double>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opDouble_name);
    outAsync->invoke(iceC_Test_Initial_opDouble_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpDoubleResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpStringResult>>& outAsync, const Ice::optional<::std::string>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opString_name);
    outAsync->invoke(iceC_Test_Initial_opString_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpStringResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMyEnum(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMyEnumResult>>& outAsync, const Ice::optional<MyEnum>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMyEnum_name);
    outAsync->invoke(iceC_Test_Initial_opMyEnum_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpMyEnumResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opSmallStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSmallStructResult>>& outAsync, const Ice::optional<SmallStruct>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opSmallStruct_name);
    outAsync->invoke(iceC_Test_Initial_opSmallStruct_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpSmallStructResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opFixedStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFixedStructResult>>& outAsync, const Ice::optional<FixedStruct>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opFixedStruct_name);
    outAsync->invoke(iceC_Test_Initial_opFixedStruct_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpFixedStructResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opVarStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpVarStructResult>>& outAsync, const Ice::optional<VarStruct>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opVarStruct_name);
    outAsync->invoke(iceC_Test_Initial_opVarStruct_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpVarStructResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opOneOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpOneOptionalResult>>& outAsync, const Ice::optional<::std::shared_ptr<OneOptional>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opOneOptional_name);
    outAsync->invoke(iceC_Test_Initial_opOneOptional_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpOneOptionalResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opOneOptionalProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpOneOptionalProxyResult>>& outAsync, const Ice::optional<::std::shared_ptr<::Ice::ObjectPrx>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opOneOptionalProxy_name);
    outAsync->invoke(iceC_Test_Initial_opOneOptionalProxy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpOneOptionalProxyResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opByteSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpByteSeqResult>>& outAsync, const Ice::optional<ByteSeq>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opByteSeq_name);
    outAsync->invoke(iceC_Test_Initial_opByteSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpByteSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opBoolSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpBoolSeqResult>>& outAsync, const Ice::optional<BoolSeq>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opBoolSeq_name);
    outAsync->invoke(iceC_Test_Initial_opBoolSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpBoolSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opShortSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpShortSeqResult>>& outAsync, const Ice::optional<ShortSeq>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opShortSeq_name);
    outAsync->invoke(iceC_Test_Initial_opShortSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpShortSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opIntSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntSeqResult>>& outAsync, const Ice::optional<IntSeq>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opIntSeq_name);
    outAsync->invoke(iceC_Test_Initial_opIntSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpIntSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opLongSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpLongSeqResult>>& outAsync, const Ice::optional<LongSeq>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opLongSeq_name);
    outAsync->invoke(iceC_Test_Initial_opLongSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpLongSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opFloatSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFloatSeqResult>>& outAsync, const Ice::optional<FloatSeq>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opFloatSeq_name);
    outAsync->invoke(iceC_Test_Initial_opFloatSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpFloatSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opDoubleSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpDoubleSeqResult>>& outAsync, const Ice::optional<DoubleSeq>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opDoubleSeq_name);
    outAsync->invoke(iceC_Test_Initial_opDoubleSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpDoubleSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opStringSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpStringSeqResult>>& outAsync, const Ice::optional<StringSeq>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opStringSeq_name);
    outAsync->invoke(iceC_Test_Initial_opStringSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpStringSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opSmallStructSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSmallStructSeqResult>>& outAsync, const Ice::optional<SmallStructSeq>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opSmallStructSeq_name);
    outAsync->invoke(iceC_Test_Initial_opSmallStructSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpSmallStructSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opSmallStructList(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSmallStructListResult>>& outAsync, const Ice::optional<SmallStructList>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opSmallStructList_name);
    outAsync->invoke(iceC_Test_Initial_opSmallStructList_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpSmallStructListResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opFixedStructSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFixedStructSeqResult>>& outAsync, const Ice::optional<FixedStructSeq>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opFixedStructSeq_name);
    outAsync->invoke(iceC_Test_Initial_opFixedStructSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpFixedStructSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opFixedStructList(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFixedStructListResult>>& outAsync, const Ice::optional<FixedStructList>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opFixedStructList_name);
    outAsync->invoke(iceC_Test_Initial_opFixedStructList_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpFixedStructListResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opVarStructSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpVarStructSeqResult>>& outAsync, const Ice::optional<VarStructSeq>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opVarStructSeq_name);
    outAsync->invoke(iceC_Test_Initial_opVarStructSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpVarStructSeqResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opSerializable(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSerializableResult>>& outAsync, const Ice::optional<Serializable>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opSerializable_name);
    outAsync->invoke(iceC_Test_Initial_opSerializable_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpSerializableResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opIntIntDict(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntIntDictResult>>& outAsync, const Ice::optional<IntIntDict>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opIntIntDict_name);
    outAsync->invoke(iceC_Test_Initial_opIntIntDict_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpIntIntDictResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opStringIntDict(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpStringIntDictResult>>& outAsync, const Ice::optional<StringIntDict>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opStringIntDict_name);
    outAsync->invoke(iceC_Test_Initial_opStringIntDict_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpStringIntDictResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opIntOneOptionalDict(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntOneOptionalDictResult>>& outAsync, const Ice::optional<IntOneOptionalDict>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opIntOneOptionalDict_name);
    outAsync->invoke(iceC_Test_Initial_opIntOneOptionalDict_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpIntOneOptionalDictResult v;
            istr->readAll({1, 3}, v.returnValue, v.p3);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opClassAndUnknownOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<A>& iceP_p, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_opClassAndUnknownOptional_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_sendOptionalClass(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_req, const Ice::optional<::std::shared_ptr<OneOptional>>& iceP_o, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_sendOptionalClass_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_req);
            ostr->writeAll({1}, iceP_o);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_returnOptionalClass(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Ice::optional<::std::shared_ptr<::Test::OneOptional>>>>& outAsync, bool iceP_req, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_returnOptionalClass_name);
    outAsync->invoke(iceC_Test_Initial_returnOptionalClass_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_req);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Ice::optional<::std::shared_ptr<OneOptional>> iceP_o;
            istr->readAll({1}, iceP_o);
            return iceP_o;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opG(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::G>>>& outAsync, const ::std::shared_ptr<G>& iceP_g, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opG_name);
    outAsync->invoke(iceC_Test_Initial_opG_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_g);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<G> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opVoid(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_opVoid_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMStruct1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Ice::optional<::Test::SmallStruct>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMStruct1_name);
    outAsync->invoke(iceC_Test_Initial_opMStruct1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Ice::optional<SmallStruct> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMStruct2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMStruct2Result>>& outAsync, const Ice::optional<SmallStruct>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMStruct2_name);
    outAsync->invoke(iceC_Test_Initial_opMStruct2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpMStruct2Result v;
            istr->readAll({1, 3}, v.returnValue, v.p2);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMSeq1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Ice::optional<::Test::StringSeq>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMSeq1_name);
    outAsync->invoke(iceC_Test_Initial_opMSeq1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Ice::optional<StringSeq> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMSeq2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMSeq2Result>>& outAsync, const Ice::optional<StringSeq>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMSeq2_name);
    outAsync->invoke(iceC_Test_Initial_opMSeq2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpMSeq2Result v;
            istr->readAll({1, 3}, v.returnValue, v.p2);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMDict1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Ice::optional<::Test::StringIntDict>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMDict1_name);
    outAsync->invoke(iceC_Test_Initial_opMDict1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Ice::optional<StringIntDict> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMDict2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMDict2Result>>& outAsync, const Ice::optional<StringIntDict>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMDict2_name);
    outAsync->invoke(iceC_Test_Initial_opMDict2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpMDict2Result v;
            istr->readAll({1, 3}, v.returnValue, v.p2);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMG1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Ice::optional<::std::shared_ptr<::Test::G>>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMG1_name);
    outAsync->invoke(iceC_Test_Initial_opMG1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Ice::optional<::std::shared_ptr<G>> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_opMG2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMG2Result>>& outAsync, const Ice::optional<::std::shared_ptr<G>>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_opMG2_name);
    outAsync->invoke(iceC_Test_Initial_opMG2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            Initial::OpMG2Result v;
            istr->readAll({1, 3}, v.returnValue, v.p2);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsRequiredParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsRequiredParams_name);
    outAsync->invoke(iceC_Test_Initial_supportsRequiredParams_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsJavaSerializable(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsJavaSerializable_name);
    outAsync->invoke(iceC_Test_Initial_supportsJavaSerializable_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsCsharpSerializable(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsCsharpSerializable_name);
    outAsync->invoke(iceC_Test_Initial_supportsCsharpSerializable_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsCppStringView(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsCppStringView_name);
    outAsync->invoke(iceC_Test_Initial_supportsCppStringView_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_supportsNullOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsNullOptional_name);
    outAsync->invoke(iceC_Test_Initial_supportsNullOptional_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::InitialPrx::_newInstance() const
{
    return ::IceInternal::createProxy<InitialPrx>();
}
/// \endcond

const ::std::string&
Test::InitialPrx::ice_staticId()
{
    return Initial::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_Initial_shutdown_name = "shutdown";

const ::std::string iceC_Test_Initial_pingPong_name = "pingPong";

const ::std::string iceC_Test_Initial_opOptionalException_name = "opOptionalException";

const ::std::string iceC_Test_Initial_opDerivedException_name = "opDerivedException";

const ::std::string iceC_Test_Initial_opRequiredException_name = "opRequiredException";

const ::std::string iceC_Test_Initial_opByte_name = "opByte";

const ::std::string iceC_Test_Initial_opBool_name = "opBool";

const ::std::string iceC_Test_Initial_opShort_name = "opShort";

const ::std::string iceC_Test_Initial_opInt_name = "opInt";

const ::std::string iceC_Test_Initial_opLong_name = "opLong";

const ::std::string iceC_Test_Initial_opFloat_name = "opFloat";

const ::std::string iceC_Test_Initial_opDouble_name = "opDouble";

const ::std::string iceC_Test_Initial_opString_name = "opString";

const ::std::string iceC_Test_Initial_opMyEnum_name = "opMyEnum";

const ::std::string iceC_Test_Initial_opSmallStruct_name = "opSmallStruct";

const ::std::string iceC_Test_Initial_opFixedStruct_name = "opFixedStruct";

const ::std::string iceC_Test_Initial_opVarStruct_name = "opVarStruct";

const ::std::string iceC_Test_Initial_opOneOptional_name = "opOneOptional";

const ::std::string iceC_Test_Initial_opOneOptionalProxy_name = "opOneOptionalProxy";

const ::std::string iceC_Test_Initial_opByteSeq_name = "opByteSeq";

const ::std::string iceC_Test_Initial_opBoolSeq_name = "opBoolSeq";

const ::std::string iceC_Test_Initial_opShortSeq_name = "opShortSeq";

const ::std::string iceC_Test_Initial_opIntSeq_name = "opIntSeq";

const ::std::string iceC_Test_Initial_opLongSeq_name = "opLongSeq";

const ::std::string iceC_Test_Initial_opFloatSeq_name = "opFloatSeq";

const ::std::string iceC_Test_Initial_opDoubleSeq_name = "opDoubleSeq";

const ::std::string iceC_Test_Initial_opStringSeq_name = "opStringSeq";

const ::std::string iceC_Test_Initial_opSmallStructSeq_name = "opSmallStructSeq";

const ::std::string iceC_Test_Initial_opSmallStructList_name = "opSmallStructList";

const ::std::string iceC_Test_Initial_opFixedStructSeq_name = "opFixedStructSeq";

const ::std::string iceC_Test_Initial_opFixedStructList_name = "opFixedStructList";

const ::std::string iceC_Test_Initial_opVarStructSeq_name = "opVarStructSeq";

const ::std::string iceC_Test_Initial_opSerializable_name = "opSerializable";

const ::std::string iceC_Test_Initial_opIntIntDict_name = "opIntIntDict";

const ::std::string iceC_Test_Initial_opStringIntDict_name = "opStringIntDict";

const ::std::string iceC_Test_Initial_opIntOneOptionalDict_name = "opIntOneOptionalDict";

const ::std::string iceC_Test_Initial_opClassAndUnknownOptional_name = "opClassAndUnknownOptional";

const ::std::string iceC_Test_Initial_sendOptionalClass_name = "sendOptionalClass";

const ::std::string iceC_Test_Initial_returnOptionalClass_name = "returnOptionalClass";

const ::std::string iceC_Test_Initial_opG_name = "opG";

const ::std::string iceC_Test_Initial_opVoid_name = "opVoid";

const ::std::string iceC_Test_Initial_opMStruct1_name = "opMStruct1";

const ::std::string iceC_Test_Initial_opMStruct2_name = "opMStruct2";

const ::std::string iceC_Test_Initial_opMSeq1_name = "opMSeq1";

const ::std::string iceC_Test_Initial_opMSeq2_name = "opMSeq2";

const ::std::string iceC_Test_Initial_opMDict1_name = "opMDict1";

const ::std::string iceC_Test_Initial_opMDict2_name = "opMDict2";

const ::std::string iceC_Test_Initial_opMG1_name = "opMG1";

const ::std::string iceC_Test_Initial_opMG2_name = "opMG2";

const ::std::string iceC_Test_Initial_supportsRequiredParams_name = "supportsRequiredParams";

const ::std::string iceC_Test_Initial_supportsJavaSerializable_name = "supportsJavaSerializable";

const ::std::string iceC_Test_Initial_supportsCsharpSerializable_name = "supportsCsharpSerializable";

const ::std::string iceC_Test_Initial_supportsCppStringView_name = "supportsCppStringView";

const ::std::string iceC_Test_Initial_supportsNullOptional_name = "supportsNullOptional";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::OptionalException> iceC_Test_OptionalException_init("::Test::OptionalException");

}

Test::OptionalException::OptionalException() :
    req(false),
    a(5)
{
}

Test::OptionalException::OptionalException(bool req, const IceUtil::Optional< ::Ice::Int>& a, const IceUtil::Optional< ::std::string>& b, const IceUtil::Optional<OneOptionalPtr>& o) :
    ::Ice::UserException(),
    req(req),
    a(a),
    b(b),
    o(o)
{
}

#ifdef ICE_CPP11_COMPILER
Test::OptionalException::~OptionalException()
{
}
#else
Test::OptionalException::~OptionalException() throw()
{
}
#endif

::std::string
Test::OptionalException::ice_id() const
{
    return "::Test::OptionalException";
}

Test::OptionalException*
Test::OptionalException::ice_clone() const
{
    return new OptionalException(*this);
}

void
Test::OptionalException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::OptionalException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::OptionalException", -1, true);
    ::Ice::StreamWriter< OptionalException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::OptionalException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< OptionalException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::DerivedException> iceC_Test_DerivedException_init("::Test::DerivedException");

}

Test::DerivedException::DerivedException() :
    ss("test")
{
}

Test::DerivedException::DerivedException(bool req, const IceUtil::Optional< ::Ice::Int>& a, const IceUtil::Optional< ::std::string>& b, const IceUtil::Optional<OneOptionalPtr>& o, const ::std::string& d1, const IceUtil::Optional< ::std::string>& ss, const IceUtil::Optional<OneOptionalPtr>& o2, const ::std::string& d2) :
    OptionalException(req, a, b, o),
    d1(d1),
    ss(ss),
    o2(o2),
    d2(d2)
{
}

#ifdef ICE_CPP11_COMPILER
Test::DerivedException::~DerivedException()
{
}
#else
Test::DerivedException::~DerivedException() throw()
{
}
#endif

::std::string
Test::DerivedException::ice_id() const
{
    return "::Test::DerivedException";
}

Test::DerivedException*
Test::DerivedException::ice_clone() const
{
    return new DerivedException(*this);
}

void
Test::DerivedException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::DerivedException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::DerivedException", -1, false);
    ::Ice::StreamWriter< DerivedException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    OptionalException::_writeImpl(ostr);
}

void
Test::DerivedException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< DerivedException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    OptionalException::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::RequiredException> iceC_Test_RequiredException_init("::Test::RequiredException");

}

Test::RequiredException::RequiredException() :
    ss("test")
{
}

Test::RequiredException::RequiredException(bool req, const IceUtil::Optional< ::Ice::Int>& a, const IceUtil::Optional< ::std::string>& b, const IceUtil::Optional<OneOptionalPtr>& o, const ::std::string& ss, const OneOptionalPtr& o2) :
    OptionalException(req, a, b, o),
    ss(ss),
    o2(o2)
{
}

#ifdef ICE_CPP11_COMPILER
Test::RequiredException::~RequiredException()
{
}
#else
Test::RequiredException::~RequiredException() throw()
{
}
#endif

::std::string
Test::RequiredException::ice_id() const
{
    return "::Test::RequiredException";
}

Test::RequiredException*
Test::RequiredException::ice_clone() const
{
    return new RequiredException(*this);
}

void
Test::RequiredException::ice_throw() const
{
    throw *this;
}

bool
Test::RequiredException::_usesClasses() const
{
    return true;
}

/// \cond STREAM
void
Test::RequiredException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::RequiredException", -1, false);
    ::Ice::StreamWriter< RequiredException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    OptionalException::_writeImpl(ostr);
}

void
Test::RequiredException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< RequiredException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    OptionalException::_readImpl(istr);
}
/// \endcond

Test::AMD_Initial_shutdown::~AMD_Initial_shutdown()
{
}

Test::AMD_Initial_pingPong::~AMD_Initial_pingPong()
{
}

Test::AMD_Initial_opOptionalException::~AMD_Initial_opOptionalException()
{
}

Test::AMD_Initial_opDerivedException::~AMD_Initial_opDerivedException()
{
}

Test::AMD_Initial_opRequiredException::~AMD_Initial_opRequiredException()
{
}

Test::AMD_Initial_opByte::~AMD_Initial_opByte()
{
}

Test::AMD_Initial_opBool::~AMD_Initial_opBool()
{
}

Test::AMD_Initial_opShort::~AMD_Initial_opShort()
{
}

Test::AMD_Initial_opInt::~AMD_Initial_opInt()
{
}

Test::AMD_Initial_opLong::~AMD_Initial_opLong()
{
}

Test::AMD_Initial_opFloat::~AMD_Initial_opFloat()
{
}

Test::AMD_Initial_opDouble::~AMD_Initial_opDouble()
{
}

Test::AMD_Initial_opString::~AMD_Initial_opString()
{
}

Test::AMD_Initial_opMyEnum::~AMD_Initial_opMyEnum()
{
}

Test::AMD_Initial_opSmallStruct::~AMD_Initial_opSmallStruct()
{
}

Test::AMD_Initial_opFixedStruct::~AMD_Initial_opFixedStruct()
{
}

Test::AMD_Initial_opVarStruct::~AMD_Initial_opVarStruct()
{
}

Test::AMD_Initial_opOneOptional::~AMD_Initial_opOneOptional()
{
}

Test::AMD_Initial_opOneOptionalProxy::~AMD_Initial_opOneOptionalProxy()
{
}

Test::AMD_Initial_opByteSeq::~AMD_Initial_opByteSeq()
{
}

Test::AMD_Initial_opBoolSeq::~AMD_Initial_opBoolSeq()
{
}

Test::AMD_Initial_opShortSeq::~AMD_Initial_opShortSeq()
{
}

Test::AMD_Initial_opIntSeq::~AMD_Initial_opIntSeq()
{
}

Test::AMD_Initial_opLongSeq::~AMD_Initial_opLongSeq()
{
}

Test::AMD_Initial_opFloatSeq::~AMD_Initial_opFloatSeq()
{
}

Test::AMD_Initial_opDoubleSeq::~AMD_Initial_opDoubleSeq()
{
}

Test::AMD_Initial_opStringSeq::~AMD_Initial_opStringSeq()
{
}

Test::AMD_Initial_opSmallStructSeq::~AMD_Initial_opSmallStructSeq()
{
}

Test::AMD_Initial_opSmallStructList::~AMD_Initial_opSmallStructList()
{
}

Test::AMD_Initial_opFixedStructSeq::~AMD_Initial_opFixedStructSeq()
{
}

Test::AMD_Initial_opFixedStructList::~AMD_Initial_opFixedStructList()
{
}

Test::AMD_Initial_opVarStructSeq::~AMD_Initial_opVarStructSeq()
{
}

Test::AMD_Initial_opSerializable::~AMD_Initial_opSerializable()
{
}

Test::AMD_Initial_opIntIntDict::~AMD_Initial_opIntIntDict()
{
}

Test::AMD_Initial_opStringIntDict::~AMD_Initial_opStringIntDict()
{
}

Test::AMD_Initial_opIntOneOptionalDict::~AMD_Initial_opIntOneOptionalDict()
{
}

Test::AMD_Initial_opClassAndUnknownOptional::~AMD_Initial_opClassAndUnknownOptional()
{
}

Test::AMD_Initial_sendOptionalClass::~AMD_Initial_sendOptionalClass()
{
}

Test::AMD_Initial_returnOptionalClass::~AMD_Initial_returnOptionalClass()
{
}

Test::AMD_Initial_opG::~AMD_Initial_opG()
{
}

Test::AMD_Initial_opVoid::~AMD_Initial_opVoid()
{
}

Test::AMD_Initial_opMStruct1::~AMD_Initial_opMStruct1()
{
}

Test::AMD_Initial_opMStruct2::~AMD_Initial_opMStruct2()
{
}

Test::AMD_Initial_opMSeq1::~AMD_Initial_opMSeq1()
{
}

Test::AMD_Initial_opMSeq2::~AMD_Initial_opMSeq2()
{
}

Test::AMD_Initial_opMDict1::~AMD_Initial_opMDict1()
{
}

Test::AMD_Initial_opMDict2::~AMD_Initial_opMDict2()
{
}

Test::AMD_Initial_opMG1::~AMD_Initial_opMG1()
{
}

Test::AMD_Initial_opMG2::~AMD_Initial_opMG2()
{
}

Test::AMD_Initial_supportsRequiredParams::~AMD_Initial_supportsRequiredParams()
{
}

Test::AMD_Initial_supportsJavaSerializable::~AMD_Initial_supportsJavaSerializable()
{
}

Test::AMD_Initial_supportsCsharpSerializable::~AMD_Initial_supportsCsharpSerializable()
{
}

Test::AMD_Initial_supportsCppStringView::~AMD_Initial_supportsCppStringView()
{
}

Test::AMD_Initial_supportsNullOptional::~AMD_Initial_supportsNullOptional()
{
}

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_shutdown::AMD_Initial_shutdown(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_shutdown::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_pingPong::AMD_Initial_pingPong(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_pingPong::ice_response(const ::Ice::ObjectPtr& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opOptionalException::AMD_Initial_opOptionalException(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opOptionalException::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opDerivedException::AMD_Initial_opDerivedException(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opDerivedException::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opRequiredException::AMD_Initial_opRequiredException(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opRequiredException::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opByte::AMD_Initial_opByte(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opByte::ice_response(const IceUtil::Optional< ::Ice::Byte>& ret, const IceUtil::Optional< ::Ice::Byte>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opBool::AMD_Initial_opBool(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opBool::ice_response(const IceUtil::Optional<bool>& ret, const IceUtil::Optional<bool>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opShort::AMD_Initial_opShort(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opShort::ice_response(const IceUtil::Optional< ::Ice::Short>& ret, const IceUtil::Optional< ::Ice::Short>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opInt::AMD_Initial_opInt(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opInt::ice_response(const IceUtil::Optional< ::Ice::Int>& ret, const IceUtil::Optional< ::Ice::Int>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opLong::AMD_Initial_opLong(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opLong::ice_response(const IceUtil::Optional< ::Ice::Long>& ret, const IceUtil::Optional< ::Ice::Long>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(2, p3);
    ostr->write(3, ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opFloat::AMD_Initial_opFloat(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opFloat::ice_response(const IceUtil::Optional< ::Ice::Float>& ret, const IceUtil::Optional< ::Ice::Float>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opDouble::AMD_Initial_opDouble(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opDouble::ice_response(const IceUtil::Optional< ::Ice::Double>& ret, const IceUtil::Optional< ::Ice::Double>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opString::AMD_Initial_opString(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opString::ice_response(const IceUtil::Optional< ::std::string>& ret, const IceUtil::Optional< ::std::string>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opMyEnum::AMD_Initial_opMyEnum(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opMyEnum::ice_response(const IceUtil::Optional< ::Test::MyEnum>& ret, const IceUtil::Optional< ::Test::MyEnum>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opSmallStruct::AMD_Initial_opSmallStruct(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opSmallStruct::ice_response(const IceUtil::Optional< ::Test::SmallStruct>& ret, const IceUtil::Optional< ::Test::SmallStruct>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opFixedStruct::AMD_Initial_opFixedStruct(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opFixedStruct::ice_response(const IceUtil::Optional< ::Test::FixedStruct>& ret, const IceUtil::Optional< ::Test::FixedStruct>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opVarStruct::AMD_Initial_opVarStruct(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opVarStruct::ice_response(const IceUtil::Optional< ::Test::VarStruct>& ret, const IceUtil::Optional< ::Test::VarStruct>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opOneOptional::AMD_Initial_opOneOptional(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opOneOptional::ice_response(const IceUtil::Optional< ::Test::OneOptionalPtr>& ret, const IceUtil::Optional< ::Test::OneOptionalPtr>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opOneOptionalProxy::AMD_Initial_opOneOptionalProxy(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opOneOptionalProxy::ice_response(const IceUtil::Optional< ::Test::OneOptionalPrx>& ret, const IceUtil::Optional< ::Test::OneOptionalPrx>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opByteSeq::AMD_Initial_opByteSeq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opByteSeq::ice_response(const IceUtil::Optional< ::Test::ByteSeq>& ret, const IceUtil::Optional< ::Test::ByteSeq>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opBoolSeq::AMD_Initial_opBoolSeq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opBoolSeq::ice_response(const IceUtil::Optional< ::Test::BoolSeq>& ret, const IceUtil::Optional< ::Test::BoolSeq>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opShortSeq::AMD_Initial_opShortSeq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opShortSeq::ice_response(const IceUtil::Optional< ::Test::ShortSeq>& ret, const IceUtil::Optional< ::Test::ShortSeq>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opIntSeq::AMD_Initial_opIntSeq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opIntSeq::ice_response(const IceUtil::Optional< ::Test::IntSeq>& ret, const IceUtil::Optional< ::Test::IntSeq>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opLongSeq::AMD_Initial_opLongSeq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opLongSeq::ice_response(const IceUtil::Optional< ::Test::LongSeq>& ret, const IceUtil::Optional< ::Test::LongSeq>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opFloatSeq::AMD_Initial_opFloatSeq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opFloatSeq::ice_response(const IceUtil::Optional< ::Test::FloatSeq>& ret, const IceUtil::Optional< ::Test::FloatSeq>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opDoubleSeq::AMD_Initial_opDoubleSeq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opDoubleSeq::ice_response(const IceUtil::Optional< ::Test::DoubleSeq>& ret, const IceUtil::Optional< ::Test::DoubleSeq>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opStringSeq::AMD_Initial_opStringSeq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opStringSeq::ice_response(const IceUtil::Optional< ::Test::StringSeq>& ret, const IceUtil::Optional< ::Test::StringSeq>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opSmallStructSeq::AMD_Initial_opSmallStructSeq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opSmallStructSeq::ice_response(const IceUtil::Optional< ::Test::SmallStructSeq>& ret, const IceUtil::Optional< ::Test::SmallStructSeq>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opSmallStructList::AMD_Initial_opSmallStructList(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opSmallStructList::ice_response(const IceUtil::Optional< ::Test::SmallStructList>& ret, const IceUtil::Optional< ::Test::SmallStructList>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opFixedStructSeq::AMD_Initial_opFixedStructSeq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opFixedStructSeq::ice_response(const IceUtil::Optional< ::Test::FixedStructSeq>& ret, const IceUtil::Optional< ::Test::FixedStructSeq>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opFixedStructList::AMD_Initial_opFixedStructList(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opFixedStructList::ice_response(const IceUtil::Optional< ::Test::FixedStructList>& ret, const IceUtil::Optional< ::Test::FixedStructList>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opVarStructSeq::AMD_Initial_opVarStructSeq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opVarStructSeq::ice_response(const IceUtil::Optional< ::Test::VarStructSeq>& ret, const IceUtil::Optional< ::Test::VarStructSeq>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opSerializable::AMD_Initial_opSerializable(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opSerializable::ice_response(const IceUtil::Optional< ::Test::Serializable>& ret, const IceUtil::Optional< ::Test::Serializable>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opIntIntDict::AMD_Initial_opIntIntDict(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opIntIntDict::ice_response(const IceUtil::Optional< ::Test::IntIntDict>& ret, const IceUtil::Optional< ::Test::IntIntDict>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opStringIntDict::AMD_Initial_opStringIntDict(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opStringIntDict::ice_response(const IceUtil::Optional< ::Test::StringIntDict>& ret, const IceUtil::Optional< ::Test::StringIntDict>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opIntOneOptionalDict::AMD_Initial_opIntOneOptionalDict(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opIntOneOptionalDict::ice_response(const IceUtil::Optional< ::Test::IntOneOptionalDict>& ret, const IceUtil::Optional< ::Test::IntOneOptionalDict>& p3)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p3);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opClassAndUnknownOptional::AMD_Initial_opClassAndUnknownOptional(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opClassAndUnknownOptional::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_sendOptionalClass::AMD_Initial_sendOptionalClass(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_sendOptionalClass::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_returnOptionalClass::AMD_Initial_returnOptionalClass(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_returnOptionalClass::ice_response(const IceUtil::Optional< ::Test::OneOptionalPtr>& o)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, o);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opG::AMD_Initial_opG(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opG::ice_response(const ::Test::GPtr& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opVoid::AMD_Initial_opVoid(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opVoid::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opMStruct1::AMD_Initial_opMStruct1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opMStruct1::ice_response(const IceUtil::Optional< ::Test::SmallStruct>& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opMStruct2::AMD_Initial_opMStruct2(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opMStruct2::ice_response(const IceUtil::Optional< ::Test::SmallStruct>& ret, const IceUtil::Optional< ::Test::SmallStruct>& p2)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p2);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opMSeq1::AMD_Initial_opMSeq1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opMSeq1::ice_response(const IceUtil::Optional< ::Test::StringSeq>& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opMSeq2::AMD_Initial_opMSeq2(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opMSeq2::ice_response(const IceUtil::Optional< ::Test::StringSeq>& ret, const IceUtil::Optional< ::Test::StringSeq>& p2)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p2);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opMDict1::AMD_Initial_opMDict1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opMDict1::ice_response(const IceUtil::Optional< ::Test::StringIntDict>& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opMDict2::AMD_Initial_opMDict2(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opMDict2::ice_response(const IceUtil::Optional< ::Test::StringIntDict>& ret, const IceUtil::Optional< ::Test::StringIntDict>& p2)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p2);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opMG1::AMD_Initial_opMG1(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opMG1::ice_response(const IceUtil::Optional< ::Test::GPtr>& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_opMG2::AMD_Initial_opMG2(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_opMG2::ice_response(const IceUtil::Optional< ::Test::GPtr>& ret, const IceUtil::Optional< ::Test::GPtr>& p2)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(1, ret);
    ostr->write(3, p2);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_supportsRequiredParams::AMD_Initial_supportsRequiredParams(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_supportsRequiredParams::ice_response(bool ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_supportsJavaSerializable::AMD_Initial_supportsJavaSerializable(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_supportsJavaSerializable::ice_response(bool ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_supportsCsharpSerializable::AMD_Initial_supportsCsharpSerializable(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_supportsCsharpSerializable::ice_response(bool ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_supportsCppStringView::AMD_Initial_supportsCppStringView(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_supportsCppStringView::ice_response(bool ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Initial_supportsNullOptional::AMD_Initial_supportsNullOptional(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Initial_supportsNullOptional::ice_response(bool ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(OneOptional* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< OneOptional>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new OneOptional;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::OneOptional::_newInstance() const
{
    return new OneOptional;
}
/// \endcond

const ::std::string&
IceProxy::Test::OneOptional::ice_staticId()
{
    return ::Test::OneOptional::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(MultiOptional* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< MultiOptional>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new MultiOptional;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MultiOptional::_newInstance() const
{
    return new MultiOptional;
}
/// \endcond

const ::std::string&
IceProxy::Test::MultiOptional::ice_staticId()
{
    return ::Test::MultiOptional::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(A* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< A>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new A;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::A::_newInstance() const
{
    return new A;
}
/// \endcond

const ::std::string&
IceProxy::Test::A::ice_staticId()
{
    return ::Test::A::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(B* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< B>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new B;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::B::_newInstance() const
{
    return new B;
}
/// \endcond

const ::std::string&
IceProxy::Test::B::ice_staticId()
{
    return ::Test::B::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(C* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::C::_newInstance() const
{
    return new C;
}
/// \endcond

const ::std::string&
IceProxy::Test::C::ice_staticId()
{
    return ::Test::C::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(WD* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< WD>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new WD;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::WD::_newInstance() const
{
    return new WD;
}
/// \endcond

const ::std::string&
IceProxy::Test::WD::ice_staticId()
{
    return ::Test::WD::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(OptionalWithCustom* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< OptionalWithCustom>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new OptionalWithCustom;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::OptionalWithCustom::_newInstance() const
{
    return new OptionalWithCustom;
}
/// \endcond

const ::std::string&
IceProxy::Test::OptionalWithCustom::ice_staticId()
{
    return ::Test::OptionalWithCustom::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(E* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< E>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new E;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::E::_newInstance() const
{
    return new E;
}
/// \endcond

const ::std::string&
IceProxy::Test::E::ice_staticId()
{
    return ::Test::E::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(F* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< F>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new F;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::F::_newInstance() const
{
    return new F;
}
/// \endcond

const ::std::string&
IceProxy::Test::F::ice_staticId()
{
    return ::Test::F::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(G1* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< G1>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new G1;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::G1::_newInstance() const
{
    return new G1;
}
/// \endcond

const ::std::string&
IceProxy::Test::G1::ice_staticId()
{
    return ::Test::G1::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(G2* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< G2>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new G2;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::G2::_newInstance() const
{
    return new G2;
}
/// \endcond

const ::std::string&
IceProxy::Test::G2::ice_staticId()
{
    return ::Test::G2::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(G* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< G>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new G;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::G::_newInstance() const
{
    return new G;
}
/// \endcond

const ::std::string&
IceProxy::Test::G::ice_staticId()
{
    return ::Test::G::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Recursive* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Recursive>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Recursive;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Recursive::_newInstance() const
{
    return new Recursive;
}
/// \endcond

const ::std::string&
IceProxy::Test::Recursive::ice_staticId()
{
    return ::Test::Recursive::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Initial* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Initial>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Initial;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial_shutdown_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_pingPong(const ::Ice::ObjectPtr& iceP_o, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_pingPong_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_pingPong_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_pingPong_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_o);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_pingPong_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::ObjectPtr
IceProxy::Test::Initial::end_pingPong(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_pingPong_name);
    ::Ice::ObjectPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opOptionalException(const IceUtil::Optional< ::Ice::Int>& iceP_a, const IceUtil::Optional< ::std::string>& iceP_b, const IceUtil::Optional< ::Test::OneOptionalPtr>& iceP_o, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opOptionalException_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opOptionalException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opOptionalException_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(1, iceP_a);
        ostr->write(2, iceP_b);
        ostr->write(3, iceP_o);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opOptionalException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_opOptionalException(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opOptionalException_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::OptionalException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opDerivedException(const IceUtil::Optional< ::Ice::Int>& iceP_a, const IceUtil::Optional< ::std::string>& iceP_b, const IceUtil::Optional< ::Test::OneOptionalPtr>& iceP_o, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opDerivedException_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opDerivedException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opDerivedException_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(1, iceP_a);
        ostr->write(2, iceP_b);
        ostr->write(3, iceP_o);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opDerivedException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_opDerivedException(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opDerivedException_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::OptionalException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opRequiredException(const IceUtil::Optional< ::Ice::Int>& iceP_a, const IceUtil::Optional< ::std::string>& iceP_b, const IceUtil::Optional< ::Test::OneOptionalPtr>& iceP_o, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opRequiredException_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opRequiredException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opRequiredException_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(1, iceP_a);
        ostr->write(2, iceP_b);
        ostr->write(3, iceP_o);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opRequiredException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_opRequiredException(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opRequiredException_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::OptionalException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opByte(const IceUtil::Optional< ::Ice::Byte>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opByte_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opByte_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opByte_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opByte_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Ice::Byte>
IceProxy::Test::Initial::end_opByte(IceUtil::Optional< ::Ice::Byte>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opByte_name);
    IceUtil::Optional< ::Ice::Byte> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opByte(IceUtil::Optional< ::Ice::Byte>& iceP_p3, IceUtil::Optional< ::Ice::Byte>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opByte_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opBool(const IceUtil::Optional<bool>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opBool_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opBool_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opBool_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opBool_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional<bool>
IceProxy::Test::Initial::end_opBool(IceUtil::Optional<bool>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opBool_name);
    IceUtil::Optional<bool> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opBool(IceUtil::Optional<bool>& iceP_p3, IceUtil::Optional<bool>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opBool_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opShort(const IceUtil::Optional< ::Ice::Short>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opShort_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opShort_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opShort_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opShort_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Ice::Short>
IceProxy::Test::Initial::end_opShort(IceUtil::Optional< ::Ice::Short>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opShort_name);
    IceUtil::Optional< ::Ice::Short> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opShort(IceUtil::Optional< ::Ice::Short>& iceP_p3, IceUtil::Optional< ::Ice::Short>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opShort_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opInt(const IceUtil::Optional< ::Ice::Int>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opInt_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opInt_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opInt_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opInt_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Ice::Int>
IceProxy::Test::Initial::end_opInt(IceUtil::Optional< ::Ice::Int>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opInt_name);
    IceUtil::Optional< ::Ice::Int> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opInt(IceUtil::Optional< ::Ice::Int>& iceP_p3, IceUtil::Optional< ::Ice::Int>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opInt_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opLong(const IceUtil::Optional< ::Ice::Long>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opLong_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opLong_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opLong_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(1, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opLong_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Ice::Long>
IceProxy::Test::Initial::end_opLong(IceUtil::Optional< ::Ice::Long>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opLong_name);
    IceUtil::Optional< ::Ice::Long> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(2, iceP_p3);
    istr->read(3, ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opLong(IceUtil::Optional< ::Ice::Long>& iceP_p3, IceUtil::Optional< ::Ice::Long>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opLong_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(2, iceP_p3);
    istr->read(3, ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opFloat(const IceUtil::Optional< ::Ice::Float>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opFloat_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opFloat_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opFloat_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opFloat_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Ice::Float>
IceProxy::Test::Initial::end_opFloat(IceUtil::Optional< ::Ice::Float>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opFloat_name);
    IceUtil::Optional< ::Ice::Float> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opFloat(IceUtil::Optional< ::Ice::Float>& iceP_p3, IceUtil::Optional< ::Ice::Float>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opFloat_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opDouble(const IceUtil::Optional< ::Ice::Double>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opDouble_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opDouble_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opDouble_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opDouble_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Ice::Double>
IceProxy::Test::Initial::end_opDouble(IceUtil::Optional< ::Ice::Double>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opDouble_name);
    IceUtil::Optional< ::Ice::Double> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opDouble(IceUtil::Optional< ::Ice::Double>& iceP_p3, IceUtil::Optional< ::Ice::Double>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opDouble_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opString(const IceUtil::Optional< ::std::string>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opString_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opString_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opString_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opString_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::std::string>
IceProxy::Test::Initial::end_opString(IceUtil::Optional< ::std::string>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opString_name);
    IceUtil::Optional< ::std::string> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opString(IceUtil::Optional< ::std::string>& iceP_p3, IceUtil::Optional< ::std::string>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opString_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opMyEnum(const IceUtil::Optional< ::Test::MyEnum>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opMyEnum_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opMyEnum_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opMyEnum_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opMyEnum_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::MyEnum>
IceProxy::Test::Initial::end_opMyEnum(IceUtil::Optional< ::Test::MyEnum>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opMyEnum_name);
    IceUtil::Optional< ::Test::MyEnum> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opMyEnum(IceUtil::Optional< ::Test::MyEnum>& iceP_p3, IceUtil::Optional< ::Test::MyEnum>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opMyEnum_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opSmallStruct(const IceUtil::Optional< ::Test::SmallStruct>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opSmallStruct_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opSmallStruct_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opSmallStruct_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opSmallStruct_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::SmallStruct>
IceProxy::Test::Initial::end_opSmallStruct(IceUtil::Optional< ::Test::SmallStruct>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opSmallStruct_name);
    IceUtil::Optional< ::Test::SmallStruct> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opSmallStruct(IceUtil::Optional< ::Test::SmallStruct>& iceP_p3, IceUtil::Optional< ::Test::SmallStruct>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opSmallStruct_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opFixedStruct(const IceUtil::Optional< ::Test::FixedStruct>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opFixedStruct_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opFixedStruct_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opFixedStruct_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opFixedStruct_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::FixedStruct>
IceProxy::Test::Initial::end_opFixedStruct(IceUtil::Optional< ::Test::FixedStruct>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opFixedStruct_name);
    IceUtil::Optional< ::Test::FixedStruct> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opFixedStruct(IceUtil::Optional< ::Test::FixedStruct>& iceP_p3, IceUtil::Optional< ::Test::FixedStruct>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opFixedStruct_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opVarStruct(const IceUtil::Optional< ::Test::VarStruct>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opVarStruct_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opVarStruct_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opVarStruct_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opVarStruct_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::VarStruct>
IceProxy::Test::Initial::end_opVarStruct(IceUtil::Optional< ::Test::VarStruct>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opVarStruct_name);
    IceUtil::Optional< ::Test::VarStruct> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opVarStruct(IceUtil::Optional< ::Test::VarStruct>& iceP_p3, IceUtil::Optional< ::Test::VarStruct>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opVarStruct_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opOneOptional(const IceUtil::Optional< ::Test::OneOptionalPtr>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opOneOptional_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opOneOptional_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opOneOptional_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opOneOptional_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::OneOptionalPtr>
IceProxy::Test::Initial::end_opOneOptional(IceUtil::Optional< ::Test::OneOptionalPtr>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opOneOptional_name);
    IceUtil::Optional< ::Test::OneOptionalPtr> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opOneOptional(IceUtil::Optional< ::Test::OneOptionalPtr>& iceP_p3, IceUtil::Optional< ::Test::OneOptionalPtr>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opOneOptional_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opOneOptionalProxy(const IceUtil::Optional< ::Test::OneOptionalPrx>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opOneOptionalProxy_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opOneOptionalProxy_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opOneOptionalProxy_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opOneOptionalProxy_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::OneOptionalPrx>
IceProxy::Test::Initial::end_opOneOptionalProxy(IceUtil::Optional< ::Test::OneOptionalPrx>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opOneOptionalProxy_name);
    IceUtil::Optional< ::Test::OneOptionalPrx> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opOneOptionalProxy(IceUtil::Optional< ::Test::OneOptionalPrx>& iceP_p3, IceUtil::Optional< ::Test::OneOptionalPrx>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opOneOptionalProxy_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opByteSeq(const IceUtil::Optional< ::Test::ByteSeq>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opByteSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opByteSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opByteSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opByteSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::ByteSeq>
IceProxy::Test::Initial::end_opByteSeq(IceUtil::Optional< ::Test::ByteSeq>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opByteSeq_name);
    IceUtil::Optional< ::Test::ByteSeq> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opByteSeq(IceUtil::Optional< ::Test::ByteSeq>& iceP_p3, IceUtil::Optional< ::Test::ByteSeq>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opByteSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opBoolSeq(const IceUtil::Optional< ::Test::BoolSeq>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opBoolSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opBoolSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opBoolSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opBoolSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::BoolSeq>
IceProxy::Test::Initial::end_opBoolSeq(IceUtil::Optional< ::Test::BoolSeq>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opBoolSeq_name);
    IceUtil::Optional< ::Test::BoolSeq> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opBoolSeq(IceUtil::Optional< ::Test::BoolSeq>& iceP_p3, IceUtil::Optional< ::Test::BoolSeq>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opBoolSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opShortSeq(const IceUtil::Optional< ::Test::ShortSeq>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opShortSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opShortSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opShortSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opShortSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::ShortSeq>
IceProxy::Test::Initial::end_opShortSeq(IceUtil::Optional< ::Test::ShortSeq>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opShortSeq_name);
    IceUtil::Optional< ::Test::ShortSeq> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opShortSeq(IceUtil::Optional< ::Test::ShortSeq>& iceP_p3, IceUtil::Optional< ::Test::ShortSeq>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opShortSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opIntSeq(const IceUtil::Optional< ::Test::IntSeq>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opIntSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opIntSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opIntSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opIntSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::IntSeq>
IceProxy::Test::Initial::end_opIntSeq(IceUtil::Optional< ::Test::IntSeq>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opIntSeq_name);
    IceUtil::Optional< ::Test::IntSeq> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opIntSeq(IceUtil::Optional< ::Test::IntSeq>& iceP_p3, IceUtil::Optional< ::Test::IntSeq>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opIntSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opLongSeq(const IceUtil::Optional< ::Test::LongSeq>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opLongSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opLongSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opLongSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opLongSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::LongSeq>
IceProxy::Test::Initial::end_opLongSeq(IceUtil::Optional< ::Test::LongSeq>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opLongSeq_name);
    IceUtil::Optional< ::Test::LongSeq> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opLongSeq(IceUtil::Optional< ::Test::LongSeq>& iceP_p3, IceUtil::Optional< ::Test::LongSeq>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opLongSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opFloatSeq(const IceUtil::Optional< ::Test::FloatSeq>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opFloatSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opFloatSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opFloatSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opFloatSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::FloatSeq>
IceProxy::Test::Initial::end_opFloatSeq(IceUtil::Optional< ::Test::FloatSeq>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opFloatSeq_name);
    IceUtil::Optional< ::Test::FloatSeq> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opFloatSeq(IceUtil::Optional< ::Test::FloatSeq>& iceP_p3, IceUtil::Optional< ::Test::FloatSeq>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opFloatSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opDoubleSeq(const IceUtil::Optional< ::Test::DoubleSeq>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opDoubleSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opDoubleSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opDoubleSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opDoubleSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::DoubleSeq>
IceProxy::Test::Initial::end_opDoubleSeq(IceUtil::Optional< ::Test::DoubleSeq>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opDoubleSeq_name);
    IceUtil::Optional< ::Test::DoubleSeq> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opDoubleSeq(IceUtil::Optional< ::Test::DoubleSeq>& iceP_p3, IceUtil::Optional< ::Test::DoubleSeq>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opDoubleSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opStringSeq(const IceUtil::Optional< ::Test::StringSeq>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opStringSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opStringSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opStringSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opStringSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::StringSeq>
IceProxy::Test::Initial::end_opStringSeq(IceUtil::Optional< ::Test::StringSeq>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opStringSeq_name);
    IceUtil::Optional< ::Test::StringSeq> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opStringSeq(IceUtil::Optional< ::Test::StringSeq>& iceP_p3, IceUtil::Optional< ::Test::StringSeq>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opStringSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opSmallStructSeq(const IceUtil::Optional< ::Test::SmallStructSeq>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opSmallStructSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opSmallStructSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opSmallStructSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opSmallStructSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::SmallStructSeq>
IceProxy::Test::Initial::end_opSmallStructSeq(IceUtil::Optional< ::Test::SmallStructSeq>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opSmallStructSeq_name);
    IceUtil::Optional< ::Test::SmallStructSeq> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opSmallStructSeq(IceUtil::Optional< ::Test::SmallStructSeq>& iceP_p3, IceUtil::Optional< ::Test::SmallStructSeq>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opSmallStructSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opSmallStructList(const IceUtil::Optional< ::Test::SmallStructList>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opSmallStructList_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opSmallStructList_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opSmallStructList_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opSmallStructList_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::SmallStructList>
IceProxy::Test::Initial::end_opSmallStructList(IceUtil::Optional< ::Test::SmallStructList>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opSmallStructList_name);
    IceUtil::Optional< ::Test::SmallStructList> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opSmallStructList(IceUtil::Optional< ::Test::SmallStructList>& iceP_p3, IceUtil::Optional< ::Test::SmallStructList>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opSmallStructList_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opFixedStructSeq(const IceUtil::Optional< ::Test::FixedStructSeq>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opFixedStructSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opFixedStructSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opFixedStructSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opFixedStructSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::FixedStructSeq>
IceProxy::Test::Initial::end_opFixedStructSeq(IceUtil::Optional< ::Test::FixedStructSeq>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opFixedStructSeq_name);
    IceUtil::Optional< ::Test::FixedStructSeq> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opFixedStructSeq(IceUtil::Optional< ::Test::FixedStructSeq>& iceP_p3, IceUtil::Optional< ::Test::FixedStructSeq>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opFixedStructSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opFixedStructList(const IceUtil::Optional< ::Test::FixedStructList>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opFixedStructList_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opFixedStructList_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opFixedStructList_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opFixedStructList_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::FixedStructList>
IceProxy::Test::Initial::end_opFixedStructList(IceUtil::Optional< ::Test::FixedStructList>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opFixedStructList_name);
    IceUtil::Optional< ::Test::FixedStructList> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opFixedStructList(IceUtil::Optional< ::Test::FixedStructList>& iceP_p3, IceUtil::Optional< ::Test::FixedStructList>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opFixedStructList_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opVarStructSeq(const IceUtil::Optional< ::Test::VarStructSeq>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opVarStructSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opVarStructSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opVarStructSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opVarStructSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::VarStructSeq>
IceProxy::Test::Initial::end_opVarStructSeq(IceUtil::Optional< ::Test::VarStructSeq>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opVarStructSeq_name);
    IceUtil::Optional< ::Test::VarStructSeq> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opVarStructSeq(IceUtil::Optional< ::Test::VarStructSeq>& iceP_p3, IceUtil::Optional< ::Test::VarStructSeq>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opVarStructSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opSerializable(const IceUtil::Optional< ::Test::Serializable>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opSerializable_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opSerializable_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opSerializable_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opSerializable_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::Serializable>
IceProxy::Test::Initial::end_opSerializable(IceUtil::Optional< ::Test::Serializable>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opSerializable_name);
    IceUtil::Optional< ::Test::Serializable> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opSerializable(IceUtil::Optional< ::Test::Serializable>& iceP_p3, IceUtil::Optional< ::Test::Serializable>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opSerializable_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opIntIntDict(const IceUtil::Optional< ::Test::IntIntDict>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opIntIntDict_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opIntIntDict_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opIntIntDict_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opIntIntDict_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::IntIntDict>
IceProxy::Test::Initial::end_opIntIntDict(IceUtil::Optional< ::Test::IntIntDict>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opIntIntDict_name);
    IceUtil::Optional< ::Test::IntIntDict> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opIntIntDict(IceUtil::Optional< ::Test::IntIntDict>& iceP_p3, IceUtil::Optional< ::Test::IntIntDict>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opIntIntDict_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opStringIntDict(const IceUtil::Optional< ::Test::StringIntDict>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opStringIntDict_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opStringIntDict_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opStringIntDict_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opStringIntDict_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::StringIntDict>
IceProxy::Test::Initial::end_opStringIntDict(IceUtil::Optional< ::Test::StringIntDict>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opStringIntDict_name);
    IceUtil::Optional< ::Test::StringIntDict> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opStringIntDict(IceUtil::Optional< ::Test::StringIntDict>& iceP_p3, IceUtil::Optional< ::Test::StringIntDict>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opStringIntDict_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opIntOneOptionalDict(const IceUtil::Optional< ::Test::IntOneOptionalDict>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opIntOneOptionalDict_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opIntOneOptionalDict_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opIntOneOptionalDict_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opIntOneOptionalDict_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::IntOneOptionalDict>
IceProxy::Test::Initial::end_opIntOneOptionalDict(IceUtil::Optional< ::Test::IntOneOptionalDict>& iceP_p3, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opIntOneOptionalDict_name);
    IceUtil::Optional< ::Test::IntOneOptionalDict> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opIntOneOptionalDict(IceUtil::Optional< ::Test::IntOneOptionalDict>& iceP_p3, IceUtil::Optional< ::Test::IntOneOptionalDict>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opIntOneOptionalDict_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p3);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opClassAndUnknownOptional(const ::Test::APtr& iceP_p, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opClassAndUnknownOptional_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opClassAndUnknownOptional_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opClassAndUnknownOptional_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_opClassAndUnknownOptional(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial_opClassAndUnknownOptional_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_sendOptionalClass(bool iceP_req, const IceUtil::Optional< ::Test::OneOptionalPtr>& iceP_o, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_sendOptionalClass_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_sendOptionalClass_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_req);
        ostr->write(1, iceP_o);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_sendOptionalClass_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_sendOptionalClass(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial_sendOptionalClass_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_returnOptionalClass(bool iceP_req, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_returnOptionalClass_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_returnOptionalClass_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_returnOptionalClass_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_req);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_returnOptionalClass_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_returnOptionalClass(IceUtil::Optional< ::Test::OneOptionalPtr>& iceP_o, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_returnOptionalClass_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, iceP_o);
    result->_endReadParams();
}

void IceProxy::Test::Initial::_iceI_end_returnOptionalClass(IceUtil::Optional< ::Test::OneOptionalPtr>& iceP_o, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_returnOptionalClass_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, iceP_o);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opG(const ::Test::GPtr& iceP_g, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opG_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opG_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opG_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_g);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opG_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::GPtr
IceProxy::Test::Initial::end_opG(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opG_name);
    ::Test::GPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opVoid(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opVoid_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opVoid_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_opVoid_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_opVoid(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial_opVoid_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opMStruct1(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opMStruct1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opMStruct1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opMStruct1_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_opMStruct1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::SmallStruct>
IceProxy::Test::Initial::end_opMStruct1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opMStruct1_name);
    IceUtil::Optional< ::Test::SmallStruct> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opMStruct2(const IceUtil::Optional< ::Test::SmallStruct>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opMStruct2_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opMStruct2_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opMStruct2_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opMStruct2_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::SmallStruct>
IceProxy::Test::Initial::end_opMStruct2(IceUtil::Optional< ::Test::SmallStruct>& iceP_p2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opMStruct2_name);
    IceUtil::Optional< ::Test::SmallStruct> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p2);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opMStruct2(IceUtil::Optional< ::Test::SmallStruct>& iceP_p2, IceUtil::Optional< ::Test::SmallStruct>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opMStruct2_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p2);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opMSeq1(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opMSeq1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opMSeq1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opMSeq1_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_opMSeq1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::StringSeq>
IceProxy::Test::Initial::end_opMSeq1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opMSeq1_name);
    IceUtil::Optional< ::Test::StringSeq> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opMSeq2(const IceUtil::Optional< ::Test::StringSeq>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opMSeq2_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opMSeq2_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opMSeq2_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opMSeq2_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::StringSeq>
IceProxy::Test::Initial::end_opMSeq2(IceUtil::Optional< ::Test::StringSeq>& iceP_p2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opMSeq2_name);
    IceUtil::Optional< ::Test::StringSeq> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p2);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opMSeq2(IceUtil::Optional< ::Test::StringSeq>& iceP_p2, IceUtil::Optional< ::Test::StringSeq>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opMSeq2_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p2);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opMDict1(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opMDict1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opMDict1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opMDict1_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_opMDict1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::StringIntDict>
IceProxy::Test::Initial::end_opMDict1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opMDict1_name);
    IceUtil::Optional< ::Test::StringIntDict> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opMDict2(const IceUtil::Optional< ::Test::StringIntDict>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opMDict2_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opMDict2_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opMDict2_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opMDict2_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::StringIntDict>
IceProxy::Test::Initial::end_opMDict2(IceUtil::Optional< ::Test::StringIntDict>& iceP_p2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opMDict2_name);
    IceUtil::Optional< ::Test::StringIntDict> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p2);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opMDict2(IceUtil::Optional< ::Test::StringIntDict>& iceP_p2, IceUtil::Optional< ::Test::StringIntDict>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opMDict2_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p2);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opMG1(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opMG1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opMG1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opMG1_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_opMG1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::GPtr>
IceProxy::Test::Initial::end_opMG1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opMG1_name);
    IceUtil::Optional< ::Test::GPtr> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_opMG2(const IceUtil::Optional< ::Test::GPtr>& iceP_p1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_opMG2_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_opMG2_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_opMG2_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(2, iceP_p1);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial_opMG2_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

IceUtil::Optional< ::Test::GPtr>
IceProxy::Test::Initial::end_opMG2(IceUtil::Optional< ::Test::GPtr>& iceP_p2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opMG2_name);
    IceUtil::Optional< ::Test::GPtr> ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p2);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Initial::_iceI_end_opMG2(IceUtil::Optional< ::Test::GPtr>& iceP_p2, IceUtil::Optional< ::Test::GPtr>& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_opMG2_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(1, ret);
    istr->read(3, iceP_p2);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_supportsRequiredParams(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsRequiredParams_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_supportsRequiredParams_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_supportsRequiredParams_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_supportsRequiredParams_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Test::Initial::end_supportsRequiredParams(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_supportsRequiredParams_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_supportsJavaSerializable(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsJavaSerializable_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_supportsJavaSerializable_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_supportsJavaSerializable_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_supportsJavaSerializable_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Test::Initial::end_supportsJavaSerializable(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_supportsJavaSerializable_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_supportsCsharpSerializable(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsCsharpSerializable_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_supportsCsharpSerializable_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_supportsCsharpSerializable_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_supportsCsharpSerializable_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Test::Initial::end_supportsCsharpSerializable(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_supportsCsharpSerializable_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_supportsCppStringView(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsCppStringView_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_supportsCppStringView_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_supportsCppStringView_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_supportsCppStringView_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Test::Initial::end_supportsCppStringView(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_supportsCppStringView_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_supportsNullOptional(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_supportsNullOptional_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_supportsNullOptional_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_supportsNullOptional_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_supportsNullOptional_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Test::Initial::end_supportsNullOptional(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_supportsNullOptional_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Initial::_newInstance() const
{
    return new Initial;
}
/// \endcond

const ::std::string&
IceProxy::Test::Initial::ice_staticId()
{
    return ::Test::Initial::ice_staticId();
}

Test::OneOptional::~OneOptional()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(OneOptional* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::OneOptional::ice_clone() const
{
    ::Ice::Object* p = new OneOptional(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_OneOptional_ids[2] =
{
    "::Ice::Object",
    "::Test::OneOptional"
};

}

bool
Test::OneOptional::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_OneOptional_ids, iceC_Test_OneOptional_ids + 2, s);
}

::std::vector< ::std::string>
Test::OneOptional::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_OneOptional_ids[0], &iceC_Test_OneOptional_ids[2]);
}

const ::std::string&
Test::OneOptional::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::OneOptional::ice_staticId()
{
    static const ::std::string typeId = "::Test::OneOptional";
    return typeId;
}

/// \cond STREAM
void
Test::OneOptional::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< OneOptional, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::OneOptional::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< OneOptional, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::OneOptional> iceC_Test_OneOptional_init("::Test::OneOptional");
}

::Ice::ValueFactoryPtr
Test::OneOptional::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::OneOptional::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(OneOptionalPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = OneOptionalPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(OneOptional::ice_staticId(), v);
    }
}
/// \endcond

Test::MultiOptional::~MultiOptional()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(MultiOptional* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::MultiOptional::ice_clone() const
{
    ::Ice::Object* p = new MultiOptional(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_MultiOptional_ids[2] =
{
    "::Ice::Object",
    "::Test::MultiOptional"
};

}

bool
Test::MultiOptional::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MultiOptional_ids, iceC_Test_MultiOptional_ids + 2, s);
}

::std::vector< ::std::string>
Test::MultiOptional::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MultiOptional_ids[0], &iceC_Test_MultiOptional_ids[2]);
}

const ::std::string&
Test::MultiOptional::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MultiOptional::ice_staticId()
{
    static const ::std::string typeId = "::Test::MultiOptional";
    return typeId;
}

void
Test::MultiOptional::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(k)
    {
        if((*k))
        {
            if((::Test::upCast((*k).get())->_iceGcVisit(v_)))
            {
                (*k) = 0;
            }
        }
    }
    if(oos)
    {
        {
            for(::Test::OneOptionalSeq::iterator _i0 = (*oos).begin(); _i0 != (*oos).end(); ++_i0)
            {
                if((*_i0))
                {
                    if((::Test::upCast((*_i0).get())->_iceGcVisit(v_)))
                    {
                        (*_i0) = 0;
                    }
                }
            }
        }
    }
    if(iood)
    {
        {
            for(::Test::IntOneOptionalDict::iterator _i0 = (*iood).begin(); _i0 != (*iood).end(); ++_i0)
            {
                if((*_i0).second)
                {
                    if((::Test::upCast((*_i0).second.get())->_iceGcVisit(v_)))
                    {
                        (*_i0).second = 0;
                    }
                }
            }
        }
    }
}

/// \cond STREAM
void
Test::MultiOptional::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< MultiOptional, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::MultiOptional::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< MultiOptional, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::MultiOptional> iceC_Test_MultiOptional_init("::Test::MultiOptional");
}

::Ice::ValueFactoryPtr
Test::MultiOptional::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::MultiOptional::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(MultiOptionalPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = MultiOptionalPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(MultiOptional::ice_staticId(), v);
    }
}
/// \endcond

Test::A::~A()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(A* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::A::ice_clone() const
{
    ::Ice::Object* p = new A(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_A_ids[2] =
{
    "::Ice::Object",
    "::Test::A"
};

}

bool
Test::A::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_A_ids, iceC_Test_A_ids + 2, s);
}

::std::vector< ::std::string>
Test::A::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_A_ids[0], &iceC_Test_A_ids[2]);
}

const ::std::string&
Test::A::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

/// \cond STREAM
void
Test::A::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::A::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::A> iceC_Test_A_init("::Test::A");
}

::Ice::ValueFactoryPtr
Test::A::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::A::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(APtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = APtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(A::ice_staticId(), v);
    }
}
/// \endcond

Test::B::~B()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(B* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::B::ice_clone() const
{
    ::Ice::Object* p = new B(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_B_ids[3] =
{
    "::Ice::Object",
    "::Test::A",
    "::Test::B"
};

}

bool
Test::B::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_B_ids, iceC_Test_B_ids + 3, s);
}

::std::vector< ::std::string>
Test::B::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_B_ids[0], &iceC_Test_B_ids[3]);
}

const ::std::string&
Test::B::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

void
Test::B::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(_iceSlicedData)
    {
        _iceSlicedData->_iceGcVisitMembers(v_);
    }
}

::Ice::SlicedDataPtr
Test::B::ice_getSlicedData() const
{
    return _iceSlicedData;
}

void
Test::B::_iceWrite(::Ice::OutputStream*ostr) const
{
    ostr->startValue(_iceSlicedData);
    _iceWriteImpl(ostr);
    ostr->endValue();
}

void
Test::B::_iceRead(::Ice::InputStream* istr)
{
    istr->startValue();
    _iceReadImpl(istr);
    _iceSlicedData = istr->endValue(true);
}

/// \cond STREAM
void
Test::B::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    A::_iceWriteImpl(ostr);
}

void
Test::B::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    A::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::B> iceC_Test_B_init("::Test::B");
}

::Ice::ValueFactoryPtr
Test::B::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::B::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(BPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = BPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(B::ice_staticId(), v);
    }
}
/// \endcond

Test::C::~C()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(C* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::C::ice_clone() const
{
    ::Ice::Object* p = new C(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_C_ids[4] =
{
    "::Ice::Object",
    "::Test::A",
    "::Test::B",
    "::Test::C"
};

}

bool
Test::C::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_C_ids, iceC_Test_C_ids + 4, s);
}

::std::vector< ::std::string>
Test::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_C_ids[0], &iceC_Test_C_ids[4]);
}

const ::std::string&
Test::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

/// \cond STREAM
void
Test::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::C> iceC_Test_C_init("::Test::C");
}

::Ice::ValueFactoryPtr
Test::C::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::C::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C::ice_staticId(), v);
    }
}
/// \endcond

Test::WD::~WD()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(WD* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::WD::ice_clone() const
{
    ::Ice::Object* p = new WD(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_WD_ids[2] =
{
    "::Ice::Object",
    "::Test::WD"
};

}

bool
Test::WD::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_WD_ids, iceC_Test_WD_ids + 2, s);
}

::std::vector< ::std::string>
Test::WD::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_WD_ids[0], &iceC_Test_WD_ids[2]);
}

const ::std::string&
Test::WD::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::WD::ice_staticId()
{
    static const ::std::string typeId = "::Test::WD";
    return typeId;
}

/// \cond STREAM
void
Test::WD::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< WD, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::WD::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< WD, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::WD> iceC_Test_WD_init("::Test::WD");
}

::Ice::ValueFactoryPtr
Test::WD::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::WD::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(WDPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = WDPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(WD::ice_staticId(), v);
    }
}
/// \endcond

Test::OptionalWithCustom::~OptionalWithCustom()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(OptionalWithCustom* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::OptionalWithCustom::ice_clone() const
{
    ::Ice::Object* p = new OptionalWithCustom(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_OptionalWithCustom_ids[2] =
{
    "::Ice::Object",
    "::Test::OptionalWithCustom"
};

}

bool
Test::OptionalWithCustom::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_OptionalWithCustom_ids, iceC_Test_OptionalWithCustom_ids + 2, s);
}

::std::vector< ::std::string>
Test::OptionalWithCustom::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_OptionalWithCustom_ids[0], &iceC_Test_OptionalWithCustom_ids[2]);
}

const ::std::string&
Test::OptionalWithCustom::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::OptionalWithCustom::ice_staticId()
{
    static const ::std::string typeId = "::Test::OptionalWithCustom";
    return typeId;
}

/// \cond STREAM
void
Test::OptionalWithCustom::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< OptionalWithCustom, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::OptionalWithCustom::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< OptionalWithCustom, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::OptionalWithCustom> iceC_Test_OptionalWithCustom_init("::Test::OptionalWithCustom");
}

::Ice::ValueFactoryPtr
Test::OptionalWithCustom::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::OptionalWithCustom::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(OptionalWithCustomPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = OptionalWithCustomPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(OptionalWithCustom::ice_staticId(), v);
    }
}
/// \endcond

Test::E::~E()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(E* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::E::ice_clone() const
{
    ::Ice::Object* p = new E(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_E_ids[2] =
{
    "::Ice::Object",
    "::Test::E"
};

}

bool
Test::E::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_E_ids, iceC_Test_E_ids + 2, s);
}

::std::vector< ::std::string>
Test::E::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_E_ids[0], &iceC_Test_E_ids[2]);
}

const ::std::string&
Test::E::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::E::ice_staticId()
{
    static const ::std::string typeId = "::Test::E";
    return typeId;
}

void
Test::E::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(ae)
    {
        if((::Test::upCast(ae.get())->_iceGcVisit(v_)))
        {
            ae = 0;
        }
    }
}

/// \cond STREAM
void
Test::E::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< E, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::E::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< E, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::E> iceC_Test_E_init("::Test::E");
}

::Ice::ValueFactoryPtr
Test::E::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::E::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(EPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = EPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(E::ice_staticId(), v);
    }
}
/// \endcond

Test::F::~F()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(F* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::F::ice_clone() const
{
    ::Ice::Object* p = new F(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_F_ids[3] =
{
    "::Ice::Object",
    "::Test::E",
    "::Test::F"
};

}

bool
Test::F::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_F_ids, iceC_Test_F_ids + 3, s);
}

::std::vector< ::std::string>
Test::F::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_F_ids[0], &iceC_Test_F_ids[3]);
}

const ::std::string&
Test::F::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::F::ice_staticId()
{
    static const ::std::string typeId = "::Test::F";
    return typeId;
}

void
Test::F::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    E::_iceGcVisitMembers(v_);
    if(af)
    {
        if((*af))
        {
            if((::Test::upCast((*af).get())->_iceGcVisit(v_)))
            {
                (*af) = 0;
            }
        }
    }
}

/// \cond STREAM
void
Test::F::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< F, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    E::_iceWriteImpl(ostr);
}

void
Test::F::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< F, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    E::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::F> iceC_Test_F_init("::Test::F");
}

::Ice::ValueFactoryPtr
Test::F::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::F::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(FPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = FPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(F::ice_staticId(), v);
    }
}
/// \endcond

Test::G1::~G1()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(G1* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::G1::ice_clone() const
{
    ::Ice::Object* p = new G1(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_G1_ids[2] =
{
    "::Ice::Object",
    "::Test::G1"
};

}

bool
Test::G1::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_G1_ids, iceC_Test_G1_ids + 2, s);
}

::std::vector< ::std::string>
Test::G1::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_G1_ids[0], &iceC_Test_G1_ids[2]);
}

const ::std::string&
Test::G1::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::G1::ice_staticId()
{
    static const ::std::string typeId = "::Test::G1";
    return typeId;
}

/// \cond STREAM
void
Test::G1::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< G1, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::G1::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< G1, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::G1> iceC_Test_G1_init("::Test::G1");
}

::Ice::ValueFactoryPtr
Test::G1::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::G1::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(G1Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = G1Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(G1::ice_staticId(), v);
    }
}
/// \endcond

Test::G2::~G2()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(G2* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::G2::ice_clone() const
{
    ::Ice::Object* p = new G2(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_G2_ids[2] =
{
    "::Ice::Object",
    "::Test::G2"
};

}

bool
Test::G2::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_G2_ids, iceC_Test_G2_ids + 2, s);
}

::std::vector< ::std::string>
Test::G2::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_G2_ids[0], &iceC_Test_G2_ids[2]);
}

const ::std::string&
Test::G2::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::G2::ice_staticId()
{
    static const ::std::string typeId = "::Test::G2";
    return typeId;
}

/// \cond STREAM
void
Test::G2::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< G2, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::G2::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< G2, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::G2> iceC_Test_G2_init("::Test::G2");
}

::Ice::ValueFactoryPtr
Test::G2::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::G2::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(G2Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = G2Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(G2::ice_staticId(), v);
    }
}
/// \endcond

Test::G::~G()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(G* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::G::ice_clone() const
{
    ::Ice::Object* p = new G(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_G_ids[2] =
{
    "::Ice::Object",
    "::Test::G"
};

}

bool
Test::G::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_G_ids, iceC_Test_G_ids + 2, s);
}

::std::vector< ::std::string>
Test::G::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_G_ids[0], &iceC_Test_G_ids[2]);
}

const ::std::string&
Test::G::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::G::ice_staticId()
{
    static const ::std::string typeId = "::Test::G";
    return typeId;
}

void
Test::G::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(gg1Opt)
    {
        if((*gg1Opt))
        {
            if((::Test::upCast((*gg1Opt).get())->_iceGcVisit(v_)))
            {
                (*gg1Opt) = 0;
            }
        }
    }
    if(gg2)
    {
        if((::Test::upCast(gg2.get())->_iceGcVisit(v_)))
        {
            gg2 = 0;
        }
    }
    if(gg2Opt)
    {
        if((*gg2Opt))
        {
            if((::Test::upCast((*gg2Opt).get())->_iceGcVisit(v_)))
            {
                (*gg2Opt) = 0;
            }
        }
    }
    if(gg1)
    {
        if((::Test::upCast(gg1.get())->_iceGcVisit(v_)))
        {
            gg1 = 0;
        }
    }
}

/// \cond STREAM
void
Test::G::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< G, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::G::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< G, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::G> iceC_Test_G_init("::Test::G");
}

::Ice::ValueFactoryPtr
Test::G::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::G::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(GPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = GPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(G::ice_staticId(), v);
    }
}
/// \endcond

Test::Recursive::~Recursive()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Recursive* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::Recursive::ice_clone() const
{
    ::Ice::Object* p = new Recursive(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_Recursive_ids[2] =
{
    "::Ice::Object",
    "::Test::Recursive"
};

}

bool
Test::Recursive::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Recursive_ids, iceC_Test_Recursive_ids + 2, s);
}

::std::vector< ::std::string>
Test::Recursive::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Recursive_ids[0], &iceC_Test_Recursive_ids[2]);
}

const ::std::string&
Test::Recursive::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Recursive::ice_staticId()
{
    static const ::std::string typeId = "::Test::Recursive";
    return typeId;
}

void
Test::Recursive::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(value)
    {
        {
            for(::Test::RecursiveSeq::iterator _i0 = (*value).begin(); _i0 != (*value).end(); ++_i0)
            {
                if((*_i0))
                {
                    if((::Test::upCast((*_i0).get())->_iceGcVisit(v_)))
                    {
                        (*_i0) = 0;
                    }
                }
            }
        }
    }
}

/// \cond STREAM
void
Test::Recursive::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Recursive, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Recursive::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Recursive, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Recursive> iceC_Test_Recursive_init("::Test::Recursive");
}

::Ice::ValueFactoryPtr
Test::Recursive::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Recursive::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(RecursivePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = RecursivePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Recursive::ice_staticId(), v);
    }
}
/// \endcond

Test::Initial::~Initial()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Initial* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};

}

bool
Test::Initial::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial_ids, iceC_Test_Initial_ids + 2, s);
}

::std::vector< ::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Initial_ids[0], &iceC_Test_Initial_ids[2]);
}

const ::std::string&
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown_async(new IceAsync::Test::AMD_Initial_shutdown(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_pingPong(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::ObjectPtr iceP_o;
    istr->read(iceP_o);
    istr->readPendingValues();
    inS.endReadParams();
    this->pingPong_async(new IceAsync::Test::AMD_Initial_pingPong(inS), iceP_o, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opOptionalException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional< ::Ice::Int> iceP_a;
    IceUtil::Optional< ::std::string> iceP_b;
    IceUtil::Optional<OneOptionalPtr> iceP_o;
    istr->read(1, iceP_a);
    istr->read(2, iceP_b);
    istr->read(3, iceP_o);
    inS.endReadParams();
    this->opOptionalException_async(new IceAsync::Test::AMD_Initial_opOptionalException(inS), iceP_a, iceP_b, iceP_o, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opDerivedException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional< ::Ice::Int> iceP_a;
    IceUtil::Optional< ::std::string> iceP_b;
    IceUtil::Optional<OneOptionalPtr> iceP_o;
    istr->read(1, iceP_a);
    istr->read(2, iceP_b);
    istr->read(3, iceP_o);
    inS.endReadParams();
    this->opDerivedException_async(new IceAsync::Test::AMD_Initial_opDerivedException(inS), iceP_a, iceP_b, iceP_o, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opRequiredException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional< ::Ice::Int> iceP_a;
    IceUtil::Optional< ::std::string> iceP_b;
    IceUtil::Optional<OneOptionalPtr> iceP_o;
    istr->read(1, iceP_a);
    istr->read(2, iceP_b);
    istr->read(3, iceP_o);
    inS.endReadParams();
    this->opRequiredException_async(new IceAsync::Test::AMD_Initial_opRequiredException(inS), iceP_a, iceP_b, iceP_o, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opByte(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional< ::Ice::Byte> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opByte_async(new IceAsync::Test::AMD_Initial_opByte(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opBool(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<bool> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opBool_async(new IceAsync::Test::AMD_Initial_opBool(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opShort(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional< ::Ice::Short> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opShort_async(new IceAsync::Test::AMD_Initial_opShort(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opInt(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional< ::Ice::Int> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opInt_async(new IceAsync::Test::AMD_Initial_opInt(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opLong(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional< ::Ice::Long> iceP_p1;
    istr->read(1, iceP_p1);
    inS.endReadParams();
    this->opLong_async(new IceAsync::Test::AMD_Initial_opLong(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFloat(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional< ::Ice::Float> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opFloat_async(new IceAsync::Test::AMD_Initial_opFloat(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opDouble(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional< ::Ice::Double> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opDouble_async(new IceAsync::Test::AMD_Initial_opDouble(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opString(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional< ::std::string> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opString_async(new IceAsync::Test::AMD_Initial_opString(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMyEnum(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<MyEnum> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opMyEnum_async(new IceAsync::Test::AMD_Initial_opMyEnum(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSmallStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<SmallStruct> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opSmallStruct_async(new IceAsync::Test::AMD_Initial_opSmallStruct(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFixedStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<FixedStruct> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opFixedStruct_async(new IceAsync::Test::AMD_Initial_opFixedStruct(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opVarStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<VarStruct> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opVarStruct_async(new IceAsync::Test::AMD_Initial_opVarStruct(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opOneOptional(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<OneOptionalPtr> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opOneOptional_async(new IceAsync::Test::AMD_Initial_opOneOptional(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opOneOptionalProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<OneOptionalPrx> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opOneOptionalProxy_async(new IceAsync::Test::AMD_Initial_opOneOptionalProxy(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opByteSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<ByteSeq> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opByteSeq_async(new IceAsync::Test::AMD_Initial_opByteSeq(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opBoolSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<BoolSeq> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opBoolSeq_async(new IceAsync::Test::AMD_Initial_opBoolSeq(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opShortSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<ShortSeq> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opShortSeq_async(new IceAsync::Test::AMD_Initial_opShortSeq(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opIntSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<IntSeq> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opIntSeq_async(new IceAsync::Test::AMD_Initial_opIntSeq(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opLongSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<LongSeq> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opLongSeq_async(new IceAsync::Test::AMD_Initial_opLongSeq(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFloatSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<FloatSeq> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opFloatSeq_async(new IceAsync::Test::AMD_Initial_opFloatSeq(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opDoubleSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<DoubleSeq> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opDoubleSeq_async(new IceAsync::Test::AMD_Initial_opDoubleSeq(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opStringSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<StringSeq> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opStringSeq_async(new IceAsync::Test::AMD_Initial_opStringSeq(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSmallStructSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<SmallStructSeq> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opSmallStructSeq_async(new IceAsync::Test::AMD_Initial_opSmallStructSeq(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSmallStructList(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<SmallStructList> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opSmallStructList_async(new IceAsync::Test::AMD_Initial_opSmallStructList(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFixedStructSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<FixedStructSeq> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opFixedStructSeq_async(new IceAsync::Test::AMD_Initial_opFixedStructSeq(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opFixedStructList(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<FixedStructList> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opFixedStructList_async(new IceAsync::Test::AMD_Initial_opFixedStructList(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opVarStructSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<VarStructSeq> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opVarStructSeq_async(new IceAsync::Test::AMD_Initial_opVarStructSeq(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opSerializable(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<Serializable> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opSerializable_async(new IceAsync::Test::AMD_Initial_opSerializable(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opIntIntDict(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<IntIntDict> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opIntIntDict_async(new IceAsync::Test::AMD_Initial_opIntIntDict(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opStringIntDict(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<StringIntDict> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opStringIntDict_async(new IceAsync::Test::AMD_Initial_opStringIntDict(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opIntOneOptionalDict(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<IntOneOptionalDict> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opIntOneOptionalDict_async(new IceAsync::Test::AMD_Initial_opIntOneOptionalDict(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opClassAndUnknownOptional(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    APtr iceP_p;
    istr->read(iceP_p);
    istr->readPendingValues();
    inS.endReadParams();
    this->opClassAndUnknownOptional_async(new IceAsync::Test::AMD_Initial_opClassAndUnknownOptional(inS), iceP_p, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_sendOptionalClass(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    bool iceP_req;
    IceUtil::Optional<OneOptionalPtr> iceP_o;
    istr->read(iceP_req);
    istr->read(1, iceP_o);
    inS.endReadParams();
    this->sendOptionalClass_async(new IceAsync::Test::AMD_Initial_sendOptionalClass(inS), iceP_req, iceP_o, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_returnOptionalClass(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    bool iceP_req;
    istr->read(iceP_req);
    inS.endReadParams();
    this->returnOptionalClass_async(new IceAsync::Test::AMD_Initial_returnOptionalClass(inS), iceP_req, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opG(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    GPtr iceP_g;
    istr->read(iceP_g);
    istr->readPendingValues();
    inS.endReadParams();
    this->opG_async(new IceAsync::Test::AMD_Initial_opG(inS), iceP_g, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opVoid(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opVoid_async(new IceAsync::Test::AMD_Initial_opVoid(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMStruct1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opMStruct1_async(new IceAsync::Test::AMD_Initial_opMStruct1(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMStruct2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<SmallStruct> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opMStruct2_async(new IceAsync::Test::AMD_Initial_opMStruct2(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMSeq1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opMSeq1_async(new IceAsync::Test::AMD_Initial_opMSeq1(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMSeq2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<StringSeq> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opMSeq2_async(new IceAsync::Test::AMD_Initial_opMSeq2(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMDict1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opMDict1_async(new IceAsync::Test::AMD_Initial_opMDict1(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMDict2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<StringIntDict> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opMDict2_async(new IceAsync::Test::AMD_Initial_opMDict2(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMG1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->opMG1_async(new IceAsync::Test::AMD_Initial_opMG1(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_opMG2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    IceUtil::Optional<GPtr> iceP_p1;
    istr->read(2, iceP_p1);
    inS.endReadParams();
    this->opMG2_async(new IceAsync::Test::AMD_Initial_opMG2(inS), iceP_p1, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsRequiredParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->supportsRequiredParams_async(new IceAsync::Test::AMD_Initial_supportsRequiredParams(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsJavaSerializable(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->supportsJavaSerializable_async(new IceAsync::Test::AMD_Initial_supportsJavaSerializable(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsCsharpSerializable(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->supportsCsharpSerializable_async(new IceAsync::Test::AMD_Initial_supportsCsharpSerializable(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsCppStringView(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->supportsCppStringView_async(new IceAsync::Test::AMD_Initial_supportsCppStringView(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_supportsNullOptional(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->supportsNullOptional_async(new IceAsync::Test::AMD_Initial_supportsNullOptional(inS), current);
    return false;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Initial_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolSeq",
    "opByte",
    "opByteSeq",
    "opClassAndUnknownOptional",
    "opDerivedException",
    "opDouble",
    "opDoubleSeq",
    "opFixedStruct",
    "opFixedStructList",
    "opFixedStructSeq",
    "opFloat",
    "opFloatSeq",
    "opG",
    "opInt",
    "opIntIntDict",
    "opIntOneOptionalDict",
    "opIntSeq",
    "opLong",
    "opLongSeq",
    "opMDict1",
    "opMDict2",
    "opMG1",
    "opMG2",
    "opMSeq1",
    "opMSeq2",
    "opMStruct1",
    "opMStruct2",
    "opMyEnum",
    "opOneOptional",
    "opOneOptionalProxy",
    "opOptionalException",
    "opRequiredException",
    "opSerializable",
    "opShort",
    "opShortSeq",
    "opSmallStruct",
    "opSmallStructList",
    "opSmallStructSeq",
    "opString",
    "opStringIntDict",
    "opStringSeq",
    "opVarStruct",
    "opVarStructSeq",
    "opVoid",
    "pingPong",
    "returnOptionalClass",
    "sendOptionalClass",
    "shutdown",
    "supportsCppStringView",
    "supportsCsharpSerializable",
    "supportsJavaSerializable",
    "supportsNullOptional",
    "supportsRequiredParams"
};

}

/// \cond INTERNAL
bool
Test::Initial::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial_all, iceC_Test_Initial_all + 58, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opBool(in, current);
        }
        case 5:
        {
            return _iceD_opBoolSeq(in, current);
        }
        case 6:
        {
            return _iceD_opByte(in, current);
        }
        case 7:
        {
            return _iceD_opByteSeq(in, current);
        }
        case 8:
        {
            return _iceD_opClassAndUnknownOptional(in, current);
        }
        case 9:
        {
            return _iceD_opDerivedException(in, current);
        }
        case 10:
        {
            return _iceD_opDouble(in, current);
        }
        case 11:
        {
            return _iceD_opDoubleSeq(in, current);
        }
        case 12:
        {
            return _iceD_opFixedStruct(in, current);
        }
        case 13:
        {
            return _iceD_opFixedStructList(in, current);
        }
        case 14:
        {
            return _iceD_opFixedStructSeq(in, current);
        }
        case 15:
        {
            return _iceD_opFloat(in, current);
        }
        case 16:
        {
            return _iceD_opFloatSeq(in, current);
        }
        case 17:
        {
            return _iceD_opG(in, current);
        }
        case 18:
        {
            return _iceD_opInt(in, current);
        }
        case 19:
        {
            return _iceD_opIntIntDict(in, current);
        }
        case 20:
        {
            return _iceD_opIntOneOptionalDict(in, current);
        }
        case 21:
        {
            return _iceD_opIntSeq(in, current);
        }
        case 22:
        {
            return _iceD_opLong(in, current);
        }
        case 23:
        {
            return _iceD_opLongSeq(in, current);
        }
        case 24:
        {
            return _iceD_opMDict1(in, current);
        }
        case 25:
        {
            return _iceD_opMDict2(in, current);
        }
        case 26:
        {
            return _iceD_opMG1(in, current);
        }
        case 27:
        {
            return _iceD_opMG2(in, current);
        }
        case 28:
        {
            return _iceD_opMSeq1(in, current);
        }
        case 29:
        {
            return _iceD_opMSeq2(in, current);
        }
        case 30:
        {
            return _iceD_opMStruct1(in, current);
        }
        case 31:
        {
            return _iceD_opMStruct2(in, current);
        }
        case 32:
        {
            return _iceD_opMyEnum(in, current);
        }
        case 33:
        {
            return _iceD_opOneOptional(in, current);
        }
        case 34:
        {
            return _iceD_opOneOptionalProxy(in, current);
        }
        case 35:
        {
            return _iceD_opOptionalException(in, current);
        }
        case 36:
        {
            return _iceD_opRequiredException(in, current);
        }
        case 37:
        {
            return _iceD_opSerializable(in, current);
        }
        case 38:
        {
            return _iceD_opShort(in, current);
        }
        case 39:
        {
            return _iceD_opShortSeq(in, current);
        }
        case 40:
        {
            return _iceD_opSmallStruct(in, current);
        }
        case 41:
        {
            return _iceD_opSmallStructList(in, current);
        }
        case 42:
        {
            return _iceD_opSmallStructSeq(in, current);
        }
        case 43:
        {
            return _iceD_opString(in, current);
        }
        case 44:
        {
            return _iceD_opStringIntDict(in, current);
        }
        case 45:
        {
            return _iceD_opStringSeq(in, current);
        }
        case 46:
        {
            return _iceD_opVarStruct(in, current);
        }
        case 47:
        {
            return _iceD_opVarStructSeq(in, current);
        }
        case 48:
        {
            return _iceD_opVoid(in, current);
        }
        case 49:
        {
            return _iceD_pingPong(in, current);
        }
        case 50:
        {
            return _iceD_returnOptionalClass(in, current);
        }
        case 51:
        {
            return _iceD_sendOptionalClass(in, current);
        }
        case 52:
        {
            return _iceD_shutdown(in, current);
        }
        case 53:
        {
            return _iceD_supportsCppStringView(in, current);
        }
        case 54:
        {
            return _iceD_supportsCsharpSerializable(in, current);
        }
        case 55:
        {
            return _iceD_supportsJavaSerializable(in, current);
        }
        case 56:
        {
            return _iceD_supportsNullOptional(in, current);
        }
        case 57:
        {
            return _iceD_supportsRequiredParams(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::Initial::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Initial, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Initial::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Initial, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(InitialPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = InitialPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Initial::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
