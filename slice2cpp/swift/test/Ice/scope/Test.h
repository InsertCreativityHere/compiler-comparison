//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

struct S;
class C;
struct S1;
class C1;
struct S2;
class C2;
class I;
class IPrx;

using IPrxPtr = ::std::optional<IPrx>;

namespace Inner
{

struct S;

namespace Inner2
{

struct S;
class C;
class I;
class IPrx;

using IPrxPtr = ::std::optional<IPrx>;

}
class C;
class I;
class IPrx;

using IPrxPtr = ::std::optional<IPrx>;

}

}

namespace Inner
{


namespace Test
{


namespace Inner2
{

class I;
class IPrx;

using IPrxPtr = ::std::optional<IPrx>;

}

}

}

namespace Test
{

using SMap = ::std::map<::std::string, S>;

using SSeq = ::std::vector<S>;

using CMap = ::std::map<::std::string, ::std::shared_ptr<C>>;

using CSeq = ::std::vector<::std::shared_ptr<C>>;

enum class E1 : unsigned char
{
    v1,
    v2,
    v3
};

using S1Seq = ::std::vector<S1>;

using S1Map = ::std::map<::std::string, S1>;

using IMap = ::std::map<::std::string, ::std::optional<IPrx>>;

using ISeq = ::std::vector<::std::optional<IPrx>>;

namespace Inner
{

namespace Inner2
{

using SMap = ::std::map<::std::string, S>;

using SSeq = ::std::vector<S>;

using CMap = ::std::map<::std::string, ::std::shared_ptr<C>>;

using CSeq = ::std::vector<::std::shared_ptr<C>>;

using IMap = ::std::map<::std::string, ::std::optional<IPrx>>;

using ISeq = ::std::vector<::std::optional<IPrx>>;

}

using SSeq = ::std::vector<::Test::Inner::Inner2::S>;

using SMap = ::std::map<::std::string, ::Test::Inner::Inner2::S>;

using CMap = ::std::map<::std::string, ::std::shared_ptr<::Test::Inner::Inner2::C>>;

using CSeq = ::std::vector<::std::shared_ptr<::Test::Inner::Inner2::C>>;

using IMap = ::std::map<::std::string, ::std::optional<IPrx>>;

using ISeq = ::std::vector<::std::optional<IPrx>>;

}

}

namespace Inner
{

namespace Test
{

namespace Inner2
{

}

}

}

namespace Test
{

class IPrx : public ::Ice::Proxy<IPrx, ::Ice::ObjectPrx>
{
public:

    S opS(const S& s1, S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<S, S>> opSAsync(const S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opSAsync(const S& s1,
             ::std::function<void(::Test::S, ::Test::S)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<S, S>>>&, const S&, const ::Ice::Context&) const;
    /// \endcond

    SSeq opSSeq(const SSeq& s1, SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<SSeq, SSeq>> opSSeqAsync(const SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opSSeqAsync(const SSeq& s1,
                ::std::function<void(::Test::SSeq, ::Test::SSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SSeq, SSeq>>>&, const SSeq&, const ::Ice::Context&) const;
    /// \endcond

    SMap opSMap(const SMap& s1, SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<SMap, SMap>> opSMapAsync(const SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opSMapAsync(const SMap& s1,
                ::std::function<void(::Test::SMap, ::Test::SMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SMap, SMap>>>&, const SMap&, const ::Ice::Context&) const;
    /// \endcond

    ::std::shared_ptr<C> opC(const ::std::shared_ptr<C>& c1, ::std::shared_ptr<C>& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>>> opCAsync(const ::std::shared_ptr<C>& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opCAsync(const ::std::shared_ptr<C>& c1,
             ::std::function<void(::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>>>>&, const ::std::shared_ptr<C>&, const ::Ice::Context&) const;
    /// \endcond

    CSeq opCSeq(const CSeq& s1, CSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<CSeq, CSeq>> opCSeqAsync(const CSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opCSeqAsync(const CSeq& s1,
                ::std::function<void(::Test::CSeq, ::Test::CSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CSeq, CSeq>>>&, const CSeq&, const ::Ice::Context&) const;
    /// \endcond

    CMap opCMap(const CMap& c1, CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<CMap, CMap>> opCMapAsync(const CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opCMapAsync(const CMap& c1,
                ::std::function<void(::Test::CMap, ::Test::CMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CMap, CMap>>>&, const CMap&, const ::Ice::Context&) const;
    /// \endcond

    E1 opE1(E1 E1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<E1> opE1Async(E1 E1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opE1Async(E1 E1,
              ::std::function<void(::Test::E1)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opE1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<E1>>&, E1, const ::Ice::Context&) const;
    /// \endcond

    S1 opS1(const S1& S1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<S1> opS1Async(const S1& S1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opS1Async(const S1& S1,
              ::std::function<void(::Test::S1)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opS1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<S1>>&, const S1&, const ::Ice::Context&) const;
    /// \endcond

    ::std::shared_ptr<C1> opC1(const ::std::shared_ptr<C1>& C1, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::shared_ptr<C1>> opC1Async(const ::std::shared_ptr<C1>& C1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opC1Async(const ::std::shared_ptr<C1>& C1,
              ::std::function<void(::std::shared_ptr<::Test::C1>)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opC1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<C1>>>&, const ::std::shared_ptr<C1>&, const ::Ice::Context&) const;
    /// \endcond

    S1Seq opS1Seq(const S1Seq& S1Seq, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<S1Seq> opS1SeqAsync(const S1Seq& S1Seq, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opS1SeqAsync(const S1Seq& S1Seq,
                 ::std::function<void(::Test::S1Seq)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opS1Seq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<S1Seq>>&, const S1Seq&, const ::Ice::Context&) const;
    /// \endcond

    S1Map opS1Map(const S1Map& S1Map, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<S1Map> opS1MapAsync(const S1Map& S1Map, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opS1MapAsync(const S1Map& S1Map,
                 ::std::function<void(::Test::S1Map)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opS1Map(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<S1Map>>&, const S1Map&, const ::Ice::Context&) const;
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit IPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(const IPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(IPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    IPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    IPrx& operator=(const IPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    IPrx& operator=(IPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static IPrx _fromReference(::IceInternal::ReferencePtr ref) { return IPrx(::std::move(ref)); }

protected:

    IPrx() = default;

    explicit IPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

namespace Inner
{

namespace Inner2
{

class IPrx : public ::Ice::Proxy<IPrx, ::Ice::ObjectPrx>
{
public:

    S opS(const S& s1, S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<S, S>> opSAsync(const S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opSAsync(const S& s1,
             ::std::function<void(::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<S, S>>>&, const S&, const ::Ice::Context&) const;
    /// \endcond

    SSeq opSSeq(const SSeq& s1, SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<SSeq, SSeq>> opSSeqAsync(const SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opSSeqAsync(const SSeq& s1,
                ::std::function<void(::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SSeq, SSeq>>>&, const SSeq&, const ::Ice::Context&) const;
    /// \endcond

    SMap opSMap(const SMap& s1, SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<SMap, SMap>> opSMapAsync(const SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opSMapAsync(const SMap& s1,
                ::std::function<void(::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<SMap, SMap>>>&, const SMap&, const ::Ice::Context&) const;
    /// \endcond

    ::std::shared_ptr<C> opC(const ::std::shared_ptr<C>& c1, ::std::shared_ptr<C>& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>>> opCAsync(const ::std::shared_ptr<C>& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opCAsync(const ::std::shared_ptr<C>& c1,
             ::std::function<void(::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::shared_ptr<C>, ::std::shared_ptr<C>>>>&, const ::std::shared_ptr<C>&, const ::Ice::Context&) const;
    /// \endcond

    CSeq opCSeq(const CSeq& c1, CSeq& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<CSeq, CSeq>> opCSeqAsync(const CSeq& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opCSeqAsync(const CSeq& c1,
                ::std::function<void(::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CSeq, CSeq>>>&, const CSeq&, const ::Ice::Context&) const;
    /// \endcond

    CMap opCMap(const CMap& c1, CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<CMap, CMap>> opCMapAsync(const CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opCMapAsync(const CMap& c1,
                ::std::function<void(::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<CMap, CMap>>>&, const CMap&, const ::Ice::Context&) const;
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit IPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(const IPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(IPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    IPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    IPrx& operator=(const IPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    IPrx& operator=(IPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static IPrx _fromReference(::IceInternal::ReferencePtr ref) { return IPrx(::std::move(ref)); }

protected:

    IPrx() = default;

    explicit IPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

class IPrx : public ::Ice::Proxy<IPrx, ::Ice::ObjectPrx>
{
public:

    ::Test::Inner::Inner2::S opS(const ::Test::Inner::Inner2::S& s1, ::Test::Inner::Inner2::S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>> opSAsync(const ::Test::Inner::Inner2::S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opSAsync(const ::Test::Inner::Inner2::S& s1,
             ::std::function<void(::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::S, ::Test::Inner::Inner2::S>>>&, const ::Test::Inner::Inner2::S&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::Inner::Inner2::SSeq opSSeq(const ::Test::Inner::Inner2::SSeq& s1, ::Test::Inner::Inner2::SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>> opSSeqAsync(const ::Test::Inner::Inner2::SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opSSeqAsync(const ::Test::Inner::Inner2::SSeq& s1,
                ::std::function<void(::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::SSeq, ::Test::Inner::Inner2::SSeq>>>&, const ::Test::Inner::Inner2::SSeq&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::Inner::Inner2::SMap opSMap(const ::Test::Inner::Inner2::SMap& s1, ::Test::Inner::Inner2::SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>> opSMapAsync(const ::Test::Inner::Inner2::SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opSMapAsync(const ::Test::Inner::Inner2::SMap& s1,
                ::std::function<void(::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::SMap, ::Test::Inner::Inner2::SMap>>>&, const ::Test::Inner::Inner2::SMap&, const ::Ice::Context&) const;
    /// \endcond

    ::std::shared_ptr<::Test::Inner::Inner2::C> opC(const ::std::shared_ptr<::Test::Inner::Inner2::C>& c1, ::std::shared_ptr<::Test::Inner::Inner2::C>& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>>> opCAsync(const ::std::shared_ptr<::Test::Inner::Inner2::C>& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opCAsync(const ::std::shared_ptr<::Test::Inner::Inner2::C>& c1,
             ::std::function<void(::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::shared_ptr<::Test::Inner::Inner2::C>, ::std::shared_ptr<::Test::Inner::Inner2::C>>>>&, const ::std::shared_ptr<::Test::Inner::Inner2::C>&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::Inner::Inner2::CSeq opCSeq(const ::Test::Inner::Inner2::CSeq& c1, ::Test::Inner::Inner2::CSeq& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>> opCSeqAsync(const ::Test::Inner::Inner2::CSeq& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opCSeqAsync(const ::Test::Inner::Inner2::CSeq& c1,
                ::std::function<void(::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::CSeq, ::Test::Inner::Inner2::CSeq>>>&, const ::Test::Inner::Inner2::CSeq&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::Inner::Inner2::CMap opCMap(const ::Test::Inner::Inner2::CMap& c1, ::Test::Inner::Inner2::CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>> opCMapAsync(const ::Test::Inner::Inner2::CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opCMapAsync(const ::Test::Inner::Inner2::CMap& c1,
                ::std::function<void(::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::Inner::Inner2::CMap, ::Test::Inner::Inner2::CMap>>>&, const ::Test::Inner::Inner2::CMap&, const ::Ice::Context&) const;
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit IPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(const IPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(IPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    IPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    IPrx& operator=(const IPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    IPrx& operator=(IPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static IPrx _fromReference(::IceInternal::ReferencePtr ref) { return IPrx(::std::move(ref)); }

protected:

    IPrx() = default;

    explicit IPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

}

namespace Inner
{

namespace Test
{

namespace Inner2
{

class IPrx : public ::Ice::Proxy<IPrx, ::Ice::ObjectPrx>
{
public:

    ::Test::S opS(const ::Test::S& s1, ::Test::S& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::S, ::Test::S>> opSAsync(const ::Test::S& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opSAsync(const ::Test::S& s1,
             ::std::function<void(::Test::S, ::Test::S)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::S, ::Test::S>>>&, const ::Test::S&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::SSeq opSSeq(const ::Test::SSeq& s1, ::Test::SSeq& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::SSeq, ::Test::SSeq>> opSSeqAsync(const ::Test::SSeq& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opSSeqAsync(const ::Test::SSeq& s1,
                ::std::function<void(::Test::SSeq, ::Test::SSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::SSeq, ::Test::SSeq>>>&, const ::Test::SSeq&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::SMap opSMap(const ::Test::SMap& s1, ::Test::SMap& s2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::SMap, ::Test::SMap>> opSMapAsync(const ::Test::SMap& s1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opSMapAsync(const ::Test::SMap& s1,
                ::std::function<void(::Test::SMap, ::Test::SMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::SMap, ::Test::SMap>>>&, const ::Test::SMap&, const ::Ice::Context&) const;
    /// \endcond

    ::std::shared_ptr<::Test::C> opC(const ::std::shared_ptr<::Test::C>& c1, ::std::shared_ptr<::Test::C>& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>>> opCAsync(const ::std::shared_ptr<::Test::C>& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opCAsync(const ::std::shared_ptr<::Test::C>& c1,
             ::std::function<void(::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::std::shared_ptr<::Test::C>, ::std::shared_ptr<::Test::C>>>>&, const ::std::shared_ptr<::Test::C>&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::CSeq opCSeq(const ::Test::CSeq& c1, ::Test::CSeq& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::CSeq, ::Test::CSeq>> opCSeqAsync(const ::Test::CSeq& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opCSeqAsync(const ::Test::CSeq& c1,
                ::std::function<void(::Test::CSeq, ::Test::CSeq)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::CSeq, ::Test::CSeq>>>&, const ::Test::CSeq&, const ::Ice::Context&) const;
    /// \endcond

    ::Test::CMap opCMap(const ::Test::CMap& c1, ::Test::CMap& c2, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::tuple<::Test::CMap, ::Test::CMap>> opCMapAsync(const ::Test::CMap& c1, const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    opCMapAsync(const ::Test::CMap& c1,
                ::std::function<void(::Test::CMap, ::Test::CMap)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<::Test::CMap, ::Test::CMap>>>&, const ::Test::CMap&, const ::Ice::Context&) const;
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit IPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(const IPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    IPrx(IPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    IPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    IPrx& operator=(const IPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    IPrx& operator=(IPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static IPrx _fromReference(::IceInternal::ReferencePtr ref) { return IPrx(::std::move(ref)); }

protected:

    IPrx() = default;

    explicit IPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

}

}

namespace Test
{

struct S
{
    ::std::int32_t v;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(v);
    }
};

struct S1
{
    ::std::string s;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(s);
    }
};

struct S2
{
    ::Test::E1 E1;
    ::Test::S1 S1;
    ::std::shared_ptr<::Test::C1> C1;
    ::Test::S1Seq S1Seq;
    ::Test::S1Map S1Map;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::E1&, const ::Test::S1&, const ::std::shared_ptr<::Test::C1>&, const ::Test::S1Seq&, const ::Test::S1Map&> ice_tuple() const
    {
        return std::tie(E1, S1, C1, S1Seq, S1Map);
    }
};

namespace Inner
{

struct S
{
    ::std::int32_t v;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(v);
    }
};

namespace Inner2
{

struct S
{
    ::std::int32_t v;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(v);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test
{

class C : public ::Ice::ValueHelper<C, ::Ice::Value>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C(const ::Test::S& s) :
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::S&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::S s;
};

/// \cond INTERNAL
static C _iceS_C_init;
/// \endcond

class C1 : public ::Ice::ValueHelper<C1, ::Ice::Value>
{
public:

    virtual ~C1();

    C1() = default;

    C1(const C1&) = default;
    C1(C1&&) = default;
    C1& operator=(const C1&) = default;
    C1& operator=(C1&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C1(const ::std::string& s) :
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string s;
};

class C2 : public ::Ice::ValueHelper<C2, ::Ice::Value>
{
public:

    virtual ~C2();

    C2() = default;

    C2(const C2&) = default;
    C2(C2&&) = default;
    C2& operator=(const C2&) = default;
    C2& operator=(C2&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C2(::Test::E1 E1, const ::Test::S1& S1, const ::std::shared_ptr<::Test::C1>& C1, const ::Test::S1Seq& S1Seq, const ::Test::S1Map& S1Map) :
        E1(E1),
        S1(S1),
        C1(C1),
        S1Seq(S1Seq),
        S1Map(S1Map)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::E1&, const ::Test::S1&, const ::std::shared_ptr<::Test::C1>&, const ::Test::S1Seq&, const ::Test::S1Map&> ice_tuple() const
    {
        return std::tie(E1, S1, C1, S1Seq, S1Map);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::E1 E1;
    ::Test::S1 S1;
    ::std::shared_ptr<::Test::C1> C1;
    ::Test::S1Seq S1Seq;
    ::Test::S1Map S1Map;
};

namespace Inner
{

namespace Inner2
{

class C : public ::Ice::ValueHelper<C, ::Ice::Value>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C(const ::Test::Inner::Inner2::S& s) :
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::Inner::Inner2::S&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::Inner::Inner2::S s;
};

}

class C : public ::Ice::ValueHelper<C, ::Ice::Value>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit C(const ::Test::Inner::S& s) :
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::Inner::S&> ice_tuple() const
    {
        return std::tie(s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::Inner::S s;
};

}

}

namespace Test
{

class I : public virtual ::Ice::Object
{
public:

    using ProxyType = IPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to opS.
     */
    struct OpSResult
    {
        S returnValue;
        S s2;
    };

    virtual S opS(S s1, S& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSSeq.
     */
    struct OpSSeqResult
    {
        SSeq returnValue;
        SSeq s2;
    };

    virtual SSeq opSSeq(SSeq s1, SSeq& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSMap.
     */
    struct OpSMapResult
    {
        SMap returnValue;
        SMap s2;
    };

    virtual SMap opSMap(SMap s1, SMap& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opC.
     */
    struct OpCResult
    {
        ::std::shared_ptr<C> returnValue;
        ::std::shared_ptr<C> c2;
    };

    virtual ::std::shared_ptr<C> opC(::std::shared_ptr<C> c1, ::std::shared_ptr<C>& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opC(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCSeq.
     */
    struct OpCSeqResult
    {
        CSeq returnValue;
        CSeq s2;
    };

    virtual CSeq opCSeq(CSeq s1, CSeq& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCMap.
     */
    struct OpCMapResult
    {
        CMap returnValue;
        CMap c2;
    };

    virtual CMap opCMap(CMap c1, CMap& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual E1 opE1(E1 E1, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opE1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual S1 opS1(S1 S1, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opS1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<C1> opC1(::std::shared_ptr<C1> C1, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opC1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual S1Seq opS1Seq(S1Seq S1Seq, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opS1Seq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual S1Map opS1Map(S1Map S1Map, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opS1Map(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

namespace Inner
{

namespace Inner2
{

class I : public virtual ::Ice::Object
{
public:

    using ProxyType = IPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to opS.
     */
    struct OpSResult
    {
        S returnValue;
        S s2;
    };

    virtual S opS(S s1, S& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSSeq.
     */
    struct OpSSeqResult
    {
        SSeq returnValue;
        SSeq s2;
    };

    virtual SSeq opSSeq(SSeq s1, SSeq& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSMap.
     */
    struct OpSMapResult
    {
        SMap returnValue;
        SMap s2;
    };

    virtual SMap opSMap(SMap s1, SMap& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opC.
     */
    struct OpCResult
    {
        ::std::shared_ptr<C> returnValue;
        ::std::shared_ptr<C> c2;
    };

    virtual ::std::shared_ptr<C> opC(::std::shared_ptr<C> c1, ::std::shared_ptr<C>& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opC(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCSeq.
     */
    struct OpCSeqResult
    {
        CSeq returnValue;
        CSeq c2;
    };

    virtual CSeq opCSeq(CSeq c1, CSeq& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCMap.
     */
    struct OpCMapResult
    {
        CMap returnValue;
        CMap c2;
    };

    virtual CMap opCMap(CMap c1, CMap& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

class I : public virtual ::Ice::Object
{
public:

    using ProxyType = IPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to opS.
     */
    struct OpSResult
    {
        ::Test::Inner::Inner2::S returnValue;
        ::Test::Inner::Inner2::S s2;
    };

    virtual ::Test::Inner::Inner2::S opS(::Test::Inner::Inner2::S s1, ::Test::Inner::Inner2::S& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSSeq.
     */
    struct OpSSeqResult
    {
        ::Test::Inner::Inner2::SSeq returnValue;
        ::Test::Inner::Inner2::SSeq s2;
    };

    virtual ::Test::Inner::Inner2::SSeq opSSeq(::Test::Inner::Inner2::SSeq s1, ::Test::Inner::Inner2::SSeq& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSMap.
     */
    struct OpSMapResult
    {
        ::Test::Inner::Inner2::SMap returnValue;
        ::Test::Inner::Inner2::SMap s2;
    };

    virtual ::Test::Inner::Inner2::SMap opSMap(::Test::Inner::Inner2::SMap s1, ::Test::Inner::Inner2::SMap& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opC.
     */
    struct OpCResult
    {
        ::std::shared_ptr<::Test::Inner::Inner2::C> returnValue;
        ::std::shared_ptr<::Test::Inner::Inner2::C> c2;
    };

    virtual ::std::shared_ptr<::Test::Inner::Inner2::C> opC(::std::shared_ptr<::Test::Inner::Inner2::C> c1, ::std::shared_ptr<::Test::Inner::Inner2::C>& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opC(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCSeq.
     */
    struct OpCSeqResult
    {
        ::Test::Inner::Inner2::CSeq returnValue;
        ::Test::Inner::Inner2::CSeq c2;
    };

    virtual ::Test::Inner::Inner2::CSeq opCSeq(::Test::Inner::Inner2::CSeq c1, ::Test::Inner::Inner2::CSeq& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCMap.
     */
    struct OpCMapResult
    {
        ::Test::Inner::Inner2::CMap returnValue;
        ::Test::Inner::Inner2::CMap c2;
    };

    virtual ::Test::Inner::Inner2::CMap opCMap(::Test::Inner::Inner2::CMap c1, ::Test::Inner::Inner2::CMap& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

}

namespace Inner
{

namespace Test
{

namespace Inner2
{

class I : public virtual ::Ice::Object
{
public:

    using ProxyType = IPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to opS.
     */
    struct OpSResult
    {
        ::Test::S returnValue;
        ::Test::S s2;
    };

    virtual ::Test::S opS(::Test::S s1, ::Test::S& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opS(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSSeq.
     */
    struct OpSSeqResult
    {
        ::Test::SSeq returnValue;
        ::Test::SSeq s2;
    };

    virtual ::Test::SSeq opSSeq(::Test::SSeq s1, ::Test::SSeq& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSMap.
     */
    struct OpSMapResult
    {
        ::Test::SMap returnValue;
        ::Test::SMap s2;
    };

    virtual ::Test::SMap opSMap(::Test::SMap s1, ::Test::SMap& s2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opC.
     */
    struct OpCResult
    {
        ::std::shared_ptr<::Test::C> returnValue;
        ::std::shared_ptr<::Test::C> c2;
    };

    virtual ::std::shared_ptr<::Test::C> opC(::std::shared_ptr<::Test::C> c1, ::std::shared_ptr<::Test::C>& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opC(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCSeq.
     */
    struct OpCSeqResult
    {
        ::Test::CSeq returnValue;
        ::Test::CSeq c2;
    };

    virtual ::Test::CSeq opCSeq(::Test::CSeq c1, ::Test::CSeq& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opCMap.
     */
    struct OpCMapResult
    {
        ::Test::CMap returnValue;
        ::Test::CMap c2;
    };

    virtual ::Test::CMap opCMap(::Test::CMap c1, ::Test::CMap& c2, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opCMap(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

}

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::Test::S>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Test::S, S>
{
    static void read(S* istr, ::Test::S& v)
    {
        istr->readAll(v.v);
    }
};

template<typename S>
struct StreamReader<::Test::C, S>
{
    static void read(S* istr, ::Test::C& v)
    {
        istr->readAll(v.s);
    }
};

template<>
struct StreamableTraits< ::Test::E1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::Test::S1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::S1, S>
{
    static void read(S* istr, ::Test::S1& v)
    {
        istr->readAll(v.s);
    }
};

template<typename S>
struct StreamReader<::Test::C1, S>
{
    static void read(S* istr, ::Test::C1& v)
    {
        istr->readAll(v.s);
    }
};

template<>
struct StreamableTraits<::Test::S2>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::S2, S>
{
    static void read(S* istr, ::Test::S2& v)
    {
        istr->readAll(v.E1, v.S1, v.C1, v.S1Seq, v.S1Map);
    }
};

template<typename S>
struct StreamReader<::Test::C2, S>
{
    static void read(S* istr, ::Test::C2& v)
    {
        istr->readAll(v.E1, v.S1, v.C1, v.S1Seq, v.S1Map);
    }
};

template<>
struct StreamableTraits<::Test::Inner::S>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Test::Inner::S, S>
{
    static void read(S* istr, ::Test::Inner::S& v)
    {
        istr->readAll(v.v);
    }
};

template<>
struct StreamableTraits<::Test::Inner::Inner2::S>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Test::Inner::Inner2::S, S>
{
    static void read(S* istr, ::Test::Inner::Inner2::S& v)
    {
        istr->readAll(v.v);
    }
};

template<typename S>
struct StreamReader<::Test::Inner::Inner2::C, S>
{
    static void read(S* istr, ::Test::Inner::Inner2::C& v)
    {
        istr->readAll(v.s);
    }
};

template<typename S>
struct StreamReader<::Test::Inner::C, S>
{
    static void read(S* istr, ::Test::Inner::C& v)
    {
        istr->readAll(v.s);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using CPtr = ::std::shared_ptr<C>;

using C1Ptr = ::std::shared_ptr<C1>;

using C2Ptr = ::std::shared_ptr<C2>;

using IPtr = ::std::shared_ptr<I>;

/// \cond INTERNAL
namespace Inner
{

/// \cond INTERNAL
namespace Inner2
{

using CPtr = ::std::shared_ptr<C>;

using IPtr = ::std::shared_ptr<I>;

}
/// \endcond

using CPtr = ::std::shared_ptr<C>;

using IPtr = ::std::shared_ptr<I>;

}
/// \endcond

}
/// \endcond

/// \cond INTERNAL
namespace Inner
{

/// \cond INTERNAL
namespace Test
{

/// \cond INTERNAL
namespace Inner2
{

using IPtr = ::std::shared_ptr<I>;

}
/// \endcond

}
/// \endcond

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
