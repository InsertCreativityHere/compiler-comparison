//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::C1> iceC_Test_C1_init("::Test::C1");

const ::IceInternal::DefaultValueFactoryInit<::Test::C2> iceC_Test_C2_init("::Test::C2");

const ::std::string iceC_Test_I_ids[2] =
{
    "::Ice::Object",
    "::Test::I"
};
const ::std::string iceC_Test_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opC1",
    "opCMap",
    "opCSeq",
    "opE1",
    "opS",
    "opS1",
    "opS1Map",
    "opS1Seq",
    "opSMap",
    "opSSeq",
    "shutdown"
};
const ::std::string iceC_Test_I_opS_name = "opS";
const ::std::string iceC_Test_I_opSSeq_name = "opSSeq";
const ::std::string iceC_Test_I_opSMap_name = "opSMap";
const ::std::string iceC_Test_I_opC_name = "opC";
const ::std::string iceC_Test_I_opCSeq_name = "opCSeq";
const ::std::string iceC_Test_I_opCMap_name = "opCMap";
const ::std::string iceC_Test_I_opE1_name = "opE1";
const ::std::string iceC_Test_I_opS1_name = "opS1";
const ::std::string iceC_Test_I_opC1_name = "opC1";
const ::std::string iceC_Test_I_opS1Seq_name = "opS1Seq";
const ::std::string iceC_Test_I_opS1Map_name = "opS1Map";
const ::std::string iceC_Test_I_shutdown_name = "shutdown";

const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::Inner2::C> iceC_Test_Inner_Inner2_C_init("::Test::Inner::Inner2::C");

const ::std::string iceC_Test_Inner_Inner2_I_ids[2] =
{
    "::Ice::Object",
    "::Test::Inner::Inner2::I"
};
const ::std::string iceC_Test_Inner_Inner2_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opCMap",
    "opCSeq",
    "opS",
    "opSMap",
    "opSSeq",
    "shutdown"
};
const ::std::string iceC_Test_Inner_Inner2_I_opS_name = "opS";
const ::std::string iceC_Test_Inner_Inner2_I_opSSeq_name = "opSSeq";
const ::std::string iceC_Test_Inner_Inner2_I_opSMap_name = "opSMap";
const ::std::string iceC_Test_Inner_Inner2_I_opC_name = "opC";
const ::std::string iceC_Test_Inner_Inner2_I_opCSeq_name = "opCSeq";
const ::std::string iceC_Test_Inner_Inner2_I_opCMap_name = "opCMap";
const ::std::string iceC_Test_Inner_Inner2_I_shutdown_name = "shutdown";

const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::C> iceC_Test_Inner_C_init("::Test::Inner::C");

const ::std::string iceC_Test_Inner_I_ids[2] =
{
    "::Ice::Object",
    "::Test::Inner::I"
};
const ::std::string iceC_Test_Inner_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opCMap",
    "opCSeq",
    "opS",
    "opSMap",
    "opSSeq",
    "shutdown"
};
const ::std::string iceC_Test_Inner_I_opS_name = "opS";
const ::std::string iceC_Test_Inner_I_opSSeq_name = "opSSeq";
const ::std::string iceC_Test_Inner_I_opSMap_name = "opSMap";
const ::std::string iceC_Test_Inner_I_opC_name = "opC";
const ::std::string iceC_Test_Inner_I_opCSeq_name = "opCSeq";
const ::std::string iceC_Test_Inner_I_opCMap_name = "opCMap";
const ::std::string iceC_Test_Inner_I_shutdown_name = "shutdown";

const ::std::string iceC_Inner_Test_Inner2_I_ids[2] =
{
    "::Ice::Object",
    "::Inner::Test::Inner2::I"
};
const ::std::string iceC_Inner_Test_Inner2_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opCMap",
    "opCSeq",
    "opS",
    "opSMap",
    "opSSeq",
    "shutdown"
};
const ::std::string iceC_Inner_Test_Inner2_I_opS_name = "opS";
const ::std::string iceC_Inner_Test_Inner2_I_opSSeq_name = "opSSeq";
const ::std::string iceC_Inner_Test_Inner2_I_opSMap_name = "opSMap";
const ::std::string iceC_Inner_Test_Inner2_I_opC_name = "opC";
const ::std::string iceC_Inner_Test_Inner2_I_opCSeq_name = "opCSeq";
const ::std::string iceC_Inner_Test_Inner2_I_opCMap_name = "opCMap";
const ::std::string iceC_Inner_Test_Inner2_I_shutdown_name = "shutdown";

}

bool
Test::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_I_ids, iceC_Test_I_ids + 2, s);
}

::std::vector<::std::string>
Test::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_I_ids[0], &iceC_Test_I_ids[2]);
}

::std::string
Test::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    S iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    S iceP_s2;
    S ret = this->opS(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SSeq iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    SSeq iceP_s2;
    SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SMap iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    SMap iceP_s2;
    SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<C> iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<C> iceP_c2;
    ::std::shared_ptr<C> ret = this->opC(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CSeq iceP_s1;
    istr->readAll(iceP_s1);
    istr->readPendingValues();
    inS.endReadParams();
    CSeq iceP_s2;
    CSeq ret = this->opCSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    CMap iceP_c2;
    CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opE1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    E1 iceP_E1;
    istr->readAll(iceP_E1);
    inS.endReadParams();
    E1 ret = this->opE1(iceP_E1, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opS1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    S1 iceP_S1;
    istr->readAll(iceP_S1);
    inS.endReadParams();
    S1 ret = this->opS1(::std::move(iceP_S1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opC1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<C1> iceP_C1;
    istr->readAll(iceP_C1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<C1> ret = this->opC1(::std::move(iceP_C1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opS1Seq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    S1Seq iceP_S1Seq;
    istr->readAll(iceP_S1Seq);
    inS.endReadParams();
    S1Seq ret = this->opS1Seq(::std::move(iceP_S1Seq), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opS1Map(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    S1Map iceP_S1Map;
    istr->readAll(iceP_S1Map);
    inS.endReadParams();
    S1Map ret = this->opS1Map(::std::move(iceP_S1Map), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_I_ops, iceC_Test_I_ops + 16, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_I_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opC1(in, current);
        }
        case 6:
        {
            return _iceD_opCMap(in, current);
        }
        case 7:
        {
            return _iceD_opCSeq(in, current);
        }
        case 8:
        {
            return _iceD_opE1(in, current);
        }
        case 9:
        {
            return _iceD_opS(in, current);
        }
        case 10:
        {
            return _iceD_opS1(in, current);
        }
        case 11:
        {
            return _iceD_opS1Map(in, current);
        }
        case 12:
        {
            return _iceD_opS1Seq(in, current);
        }
        case 13:
        {
            return _iceD_opSMap(in, current);
        }
        case 14:
        {
            return _iceD_opSSeq(in, current);
        }
        case 15:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Inner::Inner2::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Inner_Inner2_I_ids, iceC_Test_Inner_Inner2_I_ids + 2, s);
}

::std::vector<::std::string>
Test::Inner::Inner2::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Inner_Inner2_I_ids[0], &iceC_Test_Inner_Inner2_I_ids[2]);
}

::std::string
Test::Inner::Inner2::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Inner::Inner2::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Inner2::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    S iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    S iceP_s2;
    S ret = this->opS(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SSeq iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    SSeq iceP_s2;
    SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SMap iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    SMap iceP_s2;
    SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<C> iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<C> iceP_c2;
    ::std::shared_ptr<C> ret = this->opC(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CSeq iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    CSeq iceP_c2;
    CSeq ret = this->opCSeq(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    CMap iceP_c2;
    CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Inner_Inner2_I_ops, iceC_Test_Inner_Inner2_I_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Inner_Inner2_I_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opCMap(in, current);
        }
        case 6:
        {
            return _iceD_opCSeq(in, current);
        }
        case 7:
        {
            return _iceD_opS(in, current);
        }
        case 8:
        {
            return _iceD_opSMap(in, current);
        }
        case 9:
        {
            return _iceD_opSSeq(in, current);
        }
        case 10:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Inner::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Inner_I_ids, iceC_Test_Inner_I_ids + 2, s);
}

::std::vector<::std::string>
Test::Inner::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Inner_I_ids[0], &iceC_Test_Inner_I_ids[2]);
}

::std::string
Test::Inner::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Inner::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::Inner::Inner2::S iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::Inner::Inner2::S iceP_s2;
    ::Test::Inner::Inner2::S ret = this->opS(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::Inner::Inner2::SSeq iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::Inner::Inner2::SSeq iceP_s2;
    ::Test::Inner::Inner2::SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::Inner::Inner2::SMap iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::Inner::Inner2::SMap iceP_s2;
    ::Test::Inner::Inner2::SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Test::Inner::Inner2::C> iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<::Test::Inner::Inner2::C> iceP_c2;
    ::std::shared_ptr<::Test::Inner::Inner2::C> ret = this->opC(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::Inner::Inner2::CSeq iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::Inner::Inner2::CSeq iceP_c2;
    ::Test::Inner::Inner2::CSeq ret = this->opCSeq(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::Inner::Inner2::CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::Inner::Inner2::CMap iceP_c2;
    ::Test::Inner::Inner2::CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Inner_I_ops, iceC_Test_Inner_I_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Inner_I_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opCMap(in, current);
        }
        case 6:
        {
            return _iceD_opCSeq(in, current);
        }
        case 7:
        {
            return _iceD_opS(in, current);
        }
        case 8:
        {
            return _iceD_opSMap(in, current);
        }
        case 9:
        {
            return _iceD_opSSeq(in, current);
        }
        case 10:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Inner::Test::Inner2::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Inner_Test_Inner2_I_ids, iceC_Inner_Test_Inner2_I_ids + 2, s);
}

::std::vector<::std::string>
Inner::Test::Inner2::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Inner_Test_Inner2_I_ids[0], &iceC_Inner_Test_Inner2_I_ids[2]);
}

::std::string
Inner::Test::Inner2::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Inner::Test::Inner2::I::ice_staticId()
{
    static const ::std::string typeId = "::Inner::Test::Inner2::I";
    return typeId;
}

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::S iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::S iceP_s2;
    ::Test::S ret = this->opS(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::SSeq iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::SSeq iceP_s2;
    ::Test::SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::SMap iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::SMap iceP_s2;
    ::Test::SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Test::C> iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<::Test::C> iceP_c2;
    ::std::shared_ptr<::Test::C> ret = this->opC(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::CSeq iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::CSeq iceP_c2;
    ::Test::CSeq ret = this->opCSeq(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::CMap iceP_c2;
    ::Test::CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Inner_Test_Inner2_I_ops, iceC_Inner_Test_Inner2_I_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Inner_Test_Inner2_I_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opCMap(in, current);
        }
        case 6:
        {
            return _iceD_opCSeq(in, current);
        }
        case 7:
        {
            return _iceD_opS(in, current);
        }
        case 8:
        {
            return _iceD_opSMap(in, current);
        }
        case 9:
        {
            return _iceD_opSSeq(in, current);
        }
        case 10:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::C::~C()
{
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

Test::C1::~C1()
{
}

const ::std::string&
Test::C1::ice_staticId()
{
    static const ::std::string typeId = "::Test::C1";
    return typeId;
}

Test::C2::~C2()
{
}

const ::std::string&
Test::C2::ice_staticId()
{
    static const ::std::string typeId = "::Test::C2";
    return typeId;
}

Test::Inner::Inner2::C::~C()
{
}

const ::std::string&
Test::Inner::Inner2::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Inner2::C";
    return typeId;
}

Test::Inner::C::~C()
{
}

const ::std::string&
Test::Inner::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::C";
    return typeId;
}

/// \cond INTERNAL
void
Test::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSResult>>& outAsync, const S& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opS_name);
    outAsync->invoke(iceC_Test_I_opS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSSeqResult>>& outAsync, const SSeq& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opSSeq_name);
    outAsync->invoke(iceC_Test_I_opSSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSSeqResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSMapResult>>& outAsync, const SMap& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opSMap_name);
    outAsync->invoke(iceC_Test_I_opSMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSMapResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCResult>>& outAsync, const ::std::shared_ptr<C>& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opC_name);
    outAsync->invoke(iceC_Test_I_opC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCSeqResult>>& outAsync, const CSeq& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opCSeq_name);
    outAsync->invoke(iceC_Test_I_opCSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCSeqResult v;
            istr->readAll(v.s2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCMapResult>>& outAsync, const CMap& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opCMap_name);
    outAsync->invoke(iceC_Test_I_opCMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCMapResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opE1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::E1>>& outAsync, E1 iceP_E1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opE1_name);
    outAsync->invoke(iceC_Test_I_opE1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_E1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opS1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::S1>>& outAsync, const S1& iceP_S1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opS1_name);
    outAsync->invoke(iceC_Test_I_opS1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_S1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opC1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::C1>>>& outAsync, const ::std::shared_ptr<C1>& iceP_C1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opC1_name);
    outAsync->invoke(iceC_Test_I_opC1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_C1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<C1> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opS1Seq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::S1Seq>>& outAsync, const S1Seq& iceP_S1Seq, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opS1Seq_name);
    outAsync->invoke(iceC_Test_I_opS1Seq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_S1Seq);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opS1Map(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::S1Map>>& outAsync, const S1Map& iceP_S1Map, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opS1Map_name);
    outAsync->invoke(iceC_Test_I_opS1Map_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_S1Map);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_I_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::IPrx::_newInstance() const
{
    return ::IceInternal::createProxy<IPrx>();
}
/// \endcond

const ::std::string&
Test::IPrx::ice_staticId()
{
    return I::ice_staticId();
}

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSResult>>& outAsync, const S& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opS_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSSeqResult>>& outAsync, const SSeq& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opSSeq_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opSSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSSeqResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSMapResult>>& outAsync, const SMap& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opSMap_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opSMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSMapResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCResult>>& outAsync, const ::std::shared_ptr<C>& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opC_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCSeqResult>>& outAsync, const CSeq& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opCSeq_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opCSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCSeqResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCMapResult>>& outAsync, const CMap& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opCMap_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opCMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCMapResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Inner_Inner2_I_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::Inner::Inner2::IPrx::_newInstance() const
{
    return ::IceInternal::createProxy<IPrx>();
}
/// \endcond

const ::std::string&
Test::Inner::Inner2::IPrx::ice_staticId()
{
    return I::ice_staticId();
}

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSResult>>& outAsync, const ::Test::Inner::Inner2::S& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opS_name);
    outAsync->invoke(iceC_Test_Inner_I_opS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSSeqResult>>& outAsync, const ::Test::Inner::Inner2::SSeq& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opSSeq_name);
    outAsync->invoke(iceC_Test_Inner_I_opSSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSSeqResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSMapResult>>& outAsync, const ::Test::Inner::Inner2::SMap& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opSMap_name);
    outAsync->invoke(iceC_Test_Inner_I_opSMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSMapResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCResult>>& outAsync, const ::std::shared_ptr<::Test::Inner::Inner2::C>& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opC_name);
    outAsync->invoke(iceC_Test_Inner_I_opC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCSeqResult>>& outAsync, const ::Test::Inner::Inner2::CSeq& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opCSeq_name);
    outAsync->invoke(iceC_Test_Inner_I_opCSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCSeqResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCMapResult>>& outAsync, const ::Test::Inner::Inner2::CMap& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opCMap_name);
    outAsync->invoke(iceC_Test_Inner_I_opCMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCMapResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Inner_I_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::Inner::IPrx::_newInstance() const
{
    return ::IceInternal::createProxy<IPrx>();
}
/// \endcond

const ::std::string&
Test::Inner::IPrx::ice_staticId()
{
    return I::ice_staticId();
}

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSResult>>& outAsync, const ::Test::S& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opS_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSSeqResult>>& outAsync, const ::Test::SSeq& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opSSeq_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opSSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSSeqResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSMapResult>>& outAsync, const ::Test::SMap& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opSMap_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opSMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSMapResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCResult>>& outAsync, const ::std::shared_ptr<::Test::C>& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opC_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCSeqResult>>& outAsync, const ::Test::CSeq& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opCSeq_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opCSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCSeqResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCMapResult>>& outAsync, const ::Test::CMap& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opCMap_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opCMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCMapResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Inner_Test_Inner2_I_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Inner::Test::Inner2::IPrx::_newInstance() const
{
    return ::IceInternal::createProxy<IPrx>();
}
/// \endcond

const ::std::string&
Inner::Test::Inner2::IPrx::ice_staticId()
{
    return I::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_I_opS_name = "opS";

const ::std::string iceC_Test_I_opSSeq_name = "opSSeq";

const ::std::string iceC_Test_I_opSMap_name = "opSMap";

const ::std::string iceC_Test_I_opC_name = "opC";

const ::std::string iceC_Test_I_opCSeq_name = "opCSeq";

const ::std::string iceC_Test_I_opCMap_name = "opCMap";

const ::std::string iceC_Test_I_opE1_name = "opE1";

const ::std::string iceC_Test_I_opS1_name = "opS1";

const ::std::string iceC_Test_I_opC1_name = "opC1";

const ::std::string iceC_Test_I_opS1Seq_name = "opS1Seq";

const ::std::string iceC_Test_I_opS1Map_name = "opS1Map";

const ::std::string iceC_Test_I_shutdown_name = "shutdown";

namespace
{

namespace
{

const ::std::string iceC_Test_Inner_Inner2_I_opS_name = "opS";

const ::std::string iceC_Test_Inner_Inner2_I_opSSeq_name = "opSSeq";

const ::std::string iceC_Test_Inner_Inner2_I_opSMap_name = "opSMap";

const ::std::string iceC_Test_Inner_Inner2_I_opC_name = "opC";

const ::std::string iceC_Test_Inner_Inner2_I_opCSeq_name = "opCSeq";

const ::std::string iceC_Test_Inner_Inner2_I_opCMap_name = "opCMap";

const ::std::string iceC_Test_Inner_Inner2_I_shutdown_name = "shutdown";

}

const ::std::string iceC_Test_Inner_I_opS_name = "opS";

const ::std::string iceC_Test_Inner_I_opSSeq_name = "opSSeq";

const ::std::string iceC_Test_Inner_I_opSMap_name = "opSMap";

const ::std::string iceC_Test_Inner_I_opC_name = "opC";

const ::std::string iceC_Test_Inner_I_opCSeq_name = "opCSeq";

const ::std::string iceC_Test_Inner_I_opCMap_name = "opCMap";

const ::std::string iceC_Test_Inner_I_shutdown_name = "shutdown";

}

}

namespace
{

namespace
{

namespace
{

const ::std::string iceC_Inner_Test_Inner2_I_opS_name = "opS";

const ::std::string iceC_Inner_Test_Inner2_I_opSSeq_name = "opSSeq";

const ::std::string iceC_Inner_Test_Inner2_I_opSMap_name = "opSMap";

const ::std::string iceC_Inner_Test_Inner2_I_opC_name = "opC";

const ::std::string iceC_Inner_Test_Inner2_I_opCSeq_name = "opCSeq";

const ::std::string iceC_Inner_Test_Inner2_I_opCMap_name = "opCMap";

const ::std::string iceC_Inner_Test_Inner2_I_shutdown_name = "shutdown";

}

}

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(C* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::C::_newInstance() const
{
    return new C;
}
/// \endcond

const ::std::string&
IceProxy::Test::C::ice_staticId()
{
    return ::Test::C::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(C1* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C1>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C1;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::C1::_newInstance() const
{
    return new C1;
}
/// \endcond

const ::std::string&
IceProxy::Test::C1::ice_staticId()
{
    return ::Test::C1::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(C2* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C2>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C2;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::C2::_newInstance() const
{
    return new C2;
}
/// \endcond

const ::std::string&
IceProxy::Test::C2::ice_staticId()
{
    return ::Test::C2::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(I* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< I>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new I;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::I::_iceI_begin_opS(const ::Test::S& iceP_s1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_I_opS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_I_opS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_I_opS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s1);
        result->endWriteParams();
        result->invoke(iceC_Test_I_opS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::S
IceProxy::Test::I::end_opS(::Test::S& iceP_s2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opS_name);
    ::Test::S ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::I::_iceI_end_opS(::Test::S& iceP_s2, ::Test::S& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::I::_iceI_begin_opSSeq(const ::Test::SSeq& iceP_s1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_I_opSSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_I_opSSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_I_opSSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s1);
        result->endWriteParams();
        result->invoke(iceC_Test_I_opSSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::SSeq
IceProxy::Test::I::end_opSSeq(::Test::SSeq& iceP_s2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opSSeq_name);
    ::Test::SSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::I::_iceI_end_opSSeq(::Test::SSeq& iceP_s2, ::Test::SSeq& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opSSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::I::_iceI_begin_opSMap(const ::Test::SMap& iceP_s1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_I_opSMap_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_I_opSMap_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_I_opSMap_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s1);
        result->endWriteParams();
        result->invoke(iceC_Test_I_opSMap_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::SMap
IceProxy::Test::I::end_opSMap(::Test::SMap& iceP_s2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opSMap_name);
    ::Test::SMap ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::I::_iceI_end_opSMap(::Test::SMap& iceP_s2, ::Test::SMap& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opSMap_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::I::_iceI_begin_opC(const ::Test::CPtr& iceP_c1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_I_opC_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_I_opC_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_I_opC_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_c1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_I_opC_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::CPtr
IceProxy::Test::I::end_opC(::Test::CPtr& iceP_c2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opC_name);
    ::Test::CPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::I::_iceI_end_opC(::Test::CPtr& iceP_c2, ::Test::CPtr& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opC_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::I::_iceI_begin_opCSeq(const ::Test::CSeq& iceP_s1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_I_opCSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_I_opCSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_I_opCSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_I_opCSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::CSeq
IceProxy::Test::I::end_opCSeq(::Test::CSeq& iceP_s2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opCSeq_name);
    ::Test::CSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::I::_iceI_end_opCSeq(::Test::CSeq& iceP_s2, ::Test::CSeq& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opCSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::I::_iceI_begin_opCMap(const ::Test::CMap& iceP_c1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_I_opCMap_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_I_opCMap_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_I_opCMap_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_c1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_I_opCMap_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::CMap
IceProxy::Test::I::end_opCMap(::Test::CMap& iceP_c2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opCMap_name);
    ::Test::CMap ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::I::_iceI_end_opCMap(::Test::CMap& iceP_c2, ::Test::CMap& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opCMap_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::I::_iceI_begin_opE1(::Test::E1 iceP_E1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_I_opE1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_I_opE1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_I_opE1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_E1);
        result->endWriteParams();
        result->invoke(iceC_Test_I_opE1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::E1
IceProxy::Test::I::end_opE1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opE1_name);
    ::Test::E1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::I::_iceI_begin_opS1(const ::Test::S1& iceP_S1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_I_opS1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_I_opS1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_I_opS1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_S1);
        result->endWriteParams();
        result->invoke(iceC_Test_I_opS1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::S1
IceProxy::Test::I::end_opS1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opS1_name);
    ::Test::S1 ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::I::_iceI_begin_opC1(const ::Test::C1Ptr& iceP_C1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_I_opC1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_I_opC1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_I_opC1_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_C1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_I_opC1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::C1Ptr
IceProxy::Test::I::end_opC1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opC1_name);
    ::Test::C1Ptr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::I::_iceI_begin_opS1Seq(const ::Test::S1Seq& iceP_S1Seq, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_I_opS1Seq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_I_opS1Seq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_I_opS1Seq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_S1Seq);
        result->endWriteParams();
        result->invoke(iceC_Test_I_opS1Seq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::S1Seq
IceProxy::Test::I::end_opS1Seq(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opS1Seq_name);
    ::Test::S1Seq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::I::_iceI_begin_opS1Map(const ::Test::S1Map& iceP_S1Map, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_I_opS1Map_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_I_opS1Map_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_I_opS1Map_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_S1Map);
        result->endWriteParams();
        result->invoke(iceC_Test_I_opS1Map_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::S1Map
IceProxy::Test::I::end_opS1Map(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_I_opS1Map_name);
    ::Test::S1Map ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::I::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_I_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_I_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_I_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::I::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_I_shutdown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::I::_newInstance() const
{
    return new I;
}
/// \endcond

const ::std::string&
IceProxy::Test::I::ice_staticId()
{
    return ::Test::I::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::Inner::Inner2::upCast(C* p) { return p; }

void
::IceProxy::Test::Inner::Inner2::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Inner::Inner2::C::_newInstance() const
{
    return new C;
}
/// \endcond

const ::std::string&
IceProxy::Test::Inner::Inner2::C::ice_staticId()
{
    return ::Test::Inner::Inner2::C::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::Inner::Inner2::upCast(I* p) { return p; }

void
::IceProxy::Test::Inner::Inner2::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< I>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new I;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Inner::Inner2::I::_iceI_begin_opS(const ::Test::Inner::Inner2::S& iceP_s1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Inner_Inner2_I_opS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Inner_Inner2_I_opS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s1);
        result->endWriteParams();
        result->invoke(iceC_Test_Inner_Inner2_I_opS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::Inner2::S
IceProxy::Test::Inner::Inner2::I::end_opS(::Test::Inner::Inner2::S& iceP_s2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_Inner2_I_opS_name);
    ::Test::Inner::Inner2::S ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Inner::Inner2::I::_iceI_end_opS(::Test::Inner::Inner2::S& iceP_s2, ::Test::Inner::Inner2::S& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_Inner2_I_opS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Inner::Inner2::I::_iceI_begin_opSSeq(const ::Test::Inner::Inner2::SSeq& iceP_s1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opSSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Inner_Inner2_I_opSSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Inner_Inner2_I_opSSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s1);
        result->endWriteParams();
        result->invoke(iceC_Test_Inner_Inner2_I_opSSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::Inner2::SSeq
IceProxy::Test::Inner::Inner2::I::end_opSSeq(::Test::Inner::Inner2::SSeq& iceP_s2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_Inner2_I_opSSeq_name);
    ::Test::Inner::Inner2::SSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Inner::Inner2::I::_iceI_end_opSSeq(::Test::Inner::Inner2::SSeq& iceP_s2, ::Test::Inner::Inner2::SSeq& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_Inner2_I_opSSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Inner::Inner2::I::_iceI_begin_opSMap(const ::Test::Inner::Inner2::SMap& iceP_s1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opSMap_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Inner_Inner2_I_opSMap_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Inner_Inner2_I_opSMap_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s1);
        result->endWriteParams();
        result->invoke(iceC_Test_Inner_Inner2_I_opSMap_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::Inner2::SMap
IceProxy::Test::Inner::Inner2::I::end_opSMap(::Test::Inner::Inner2::SMap& iceP_s2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_Inner2_I_opSMap_name);
    ::Test::Inner::Inner2::SMap ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Inner::Inner2::I::_iceI_end_opSMap(::Test::Inner::Inner2::SMap& iceP_s2, ::Test::Inner::Inner2::SMap& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_Inner2_I_opSMap_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Inner::Inner2::I::_iceI_begin_opC(const ::Test::Inner::Inner2::CPtr& iceP_c1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opC_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Inner_Inner2_I_opC_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Inner_Inner2_I_opC_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_c1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Inner_Inner2_I_opC_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::Inner2::CPtr
IceProxy::Test::Inner::Inner2::I::end_opC(::Test::Inner::Inner2::CPtr& iceP_c2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_Inner2_I_opC_name);
    ::Test::Inner::Inner2::CPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Inner::Inner2::I::_iceI_end_opC(::Test::Inner::Inner2::CPtr& iceP_c2, ::Test::Inner::Inner2::CPtr& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_Inner2_I_opC_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Inner::Inner2::I::_iceI_begin_opCSeq(const ::Test::Inner::Inner2::CSeq& iceP_c1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opCSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Inner_Inner2_I_opCSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Inner_Inner2_I_opCSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_c1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Inner_Inner2_I_opCSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::Inner2::CSeq
IceProxy::Test::Inner::Inner2::I::end_opCSeq(::Test::Inner::Inner2::CSeq& iceP_c2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_Inner2_I_opCSeq_name);
    ::Test::Inner::Inner2::CSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Inner::Inner2::I::_iceI_end_opCSeq(::Test::Inner::Inner2::CSeq& iceP_c2, ::Test::Inner::Inner2::CSeq& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_Inner2_I_opCSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Inner::Inner2::I::_iceI_begin_opCMap(const ::Test::Inner::Inner2::CMap& iceP_c1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opCMap_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Inner_Inner2_I_opCMap_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Inner_Inner2_I_opCMap_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_c1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Inner_Inner2_I_opCMap_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::Inner2::CMap
IceProxy::Test::Inner::Inner2::I::end_opCMap(::Test::Inner::Inner2::CMap& iceP_c2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_Inner2_I_opCMap_name);
    ::Test::Inner::Inner2::CMap ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Inner::Inner2::I::_iceI_end_opCMap(::Test::Inner::Inner2::CMap& iceP_c2, ::Test::Inner::Inner2::CMap& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_Inner2_I_opCMap_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Inner::Inner2::I::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Inner_Inner2_I_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Inner_Inner2_I_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Inner_Inner2_I_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Inner::Inner2::I::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Inner_Inner2_I_shutdown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Inner::Inner2::I::_newInstance() const
{
    return new I;
}
/// \endcond

const ::std::string&
IceProxy::Test::Inner::Inner2::I::ice_staticId()
{
    return ::Test::Inner::Inner2::I::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::Inner::upCast(C* p) { return p; }

void
::IceProxy::Test::Inner::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< C>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new C;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Inner::C::_newInstance() const
{
    return new C;
}
/// \endcond

const ::std::string&
IceProxy::Test::Inner::C::ice_staticId()
{
    return ::Test::Inner::C::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::Inner::upCast(I* p) { return p; }

void
::IceProxy::Test::Inner::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< I>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new I;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Inner::I::_iceI_begin_opS(const ::Test::Inner::Inner2::S& iceP_s1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Inner_I_opS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Inner_I_opS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s1);
        result->endWriteParams();
        result->invoke(iceC_Test_Inner_I_opS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::Inner2::S
IceProxy::Test::Inner::I::end_opS(::Test::Inner::Inner2::S& iceP_s2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_I_opS_name);
    ::Test::Inner::Inner2::S ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Inner::I::_iceI_end_opS(::Test::Inner::Inner2::S& iceP_s2, ::Test::Inner::Inner2::S& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_I_opS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Inner::I::_iceI_begin_opSSeq(const ::Test::Inner::Inner2::SSeq& iceP_s1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opSSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Inner_I_opSSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Inner_I_opSSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s1);
        result->endWriteParams();
        result->invoke(iceC_Test_Inner_I_opSSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::Inner2::SSeq
IceProxy::Test::Inner::I::end_opSSeq(::Test::Inner::Inner2::SSeq& iceP_s2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_I_opSSeq_name);
    ::Test::Inner::Inner2::SSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Inner::I::_iceI_end_opSSeq(::Test::Inner::Inner2::SSeq& iceP_s2, ::Test::Inner::Inner2::SSeq& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_I_opSSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Inner::I::_iceI_begin_opSMap(const ::Test::Inner::Inner2::SMap& iceP_s1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opSMap_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Inner_I_opSMap_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Inner_I_opSMap_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s1);
        result->endWriteParams();
        result->invoke(iceC_Test_Inner_I_opSMap_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::Inner2::SMap
IceProxy::Test::Inner::I::end_opSMap(::Test::Inner::Inner2::SMap& iceP_s2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_I_opSMap_name);
    ::Test::Inner::Inner2::SMap ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Inner::I::_iceI_end_opSMap(::Test::Inner::Inner2::SMap& iceP_s2, ::Test::Inner::Inner2::SMap& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_I_opSMap_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Inner::I::_iceI_begin_opC(const ::Test::Inner::Inner2::CPtr& iceP_c1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opC_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Inner_I_opC_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Inner_I_opC_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_c1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Inner_I_opC_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::Inner2::CPtr
IceProxy::Test::Inner::I::end_opC(::Test::Inner::Inner2::CPtr& iceP_c2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_I_opC_name);
    ::Test::Inner::Inner2::CPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Inner::I::_iceI_end_opC(::Test::Inner::Inner2::CPtr& iceP_c2, ::Test::Inner::Inner2::CPtr& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_I_opC_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Inner::I::_iceI_begin_opCSeq(const ::Test::Inner::Inner2::CSeq& iceP_c1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opCSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Inner_I_opCSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Inner_I_opCSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_c1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Inner_I_opCSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::Inner2::CSeq
IceProxy::Test::Inner::I::end_opCSeq(::Test::Inner::Inner2::CSeq& iceP_c2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_I_opCSeq_name);
    ::Test::Inner::Inner2::CSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Inner::I::_iceI_end_opCSeq(::Test::Inner::Inner2::CSeq& iceP_c2, ::Test::Inner::Inner2::CSeq& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_I_opCSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Inner::I::_iceI_begin_opCMap(const ::Test::Inner::Inner2::CMap& iceP_c1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opCMap_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Inner_I_opCMap_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Inner_I_opCMap_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_c1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Inner_I_opCMap_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::Inner::Inner2::CMap
IceProxy::Test::Inner::I::end_opCMap(::Test::Inner::Inner2::CMap& iceP_c2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_I_opCMap_name);
    ::Test::Inner::Inner2::CMap ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Test::Inner::I::_iceI_end_opCMap(::Test::Inner::Inner2::CMap& iceP_c2, ::Test::Inner::Inner2::CMap& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Inner_I_opCMap_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Inner::I::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Inner_I_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Inner_I_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Inner_I_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Inner::I::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Inner_I_shutdown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Inner::I::_newInstance() const
{
    return new I;
}
/// \endcond

const ::std::string&
IceProxy::Test::Inner::I::ice_staticId()
{
    return ::Test::Inner::I::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Inner::Test::Inner2::upCast(I* p) { return p; }

void
::IceProxy::Inner::Test::Inner2::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< I>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new I;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Inner::Test::Inner2::I::_iceI_begin_opS(const ::Test::S& iceP_s1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opS_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Inner_Test_Inner2_I_opS_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Inner_Test_Inner2_I_opS_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s1);
        result->endWriteParams();
        result->invoke(iceC_Inner_Test_Inner2_I_opS_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::S
IceProxy::Inner::Test::Inner2::I::end_opS(::Test::S& iceP_s2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Inner_Test_Inner2_I_opS_name);
    ::Test::S ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Inner::Test::Inner2::I::_iceI_end_opS(::Test::S& iceP_s2, ::Test::S& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Inner_Test_Inner2_I_opS_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Inner::Test::Inner2::I::_iceI_begin_opSSeq(const ::Test::SSeq& iceP_s1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opSSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Inner_Test_Inner2_I_opSSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Inner_Test_Inner2_I_opSSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s1);
        result->endWriteParams();
        result->invoke(iceC_Inner_Test_Inner2_I_opSSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::SSeq
IceProxy::Inner::Test::Inner2::I::end_opSSeq(::Test::SSeq& iceP_s2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Inner_Test_Inner2_I_opSSeq_name);
    ::Test::SSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Inner::Test::Inner2::I::_iceI_end_opSSeq(::Test::SSeq& iceP_s2, ::Test::SSeq& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Inner_Test_Inner2_I_opSSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Inner::Test::Inner2::I::_iceI_begin_opSMap(const ::Test::SMap& iceP_s1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opSMap_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Inner_Test_Inner2_I_opSMap_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Inner_Test_Inner2_I_opSMap_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s1);
        result->endWriteParams();
        result->invoke(iceC_Inner_Test_Inner2_I_opSMap_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::SMap
IceProxy::Inner::Test::Inner2::I::end_opSMap(::Test::SMap& iceP_s2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Inner_Test_Inner2_I_opSMap_name);
    ::Test::SMap ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

void IceProxy::Inner::Test::Inner2::I::_iceI_end_opSMap(::Test::SMap& iceP_s2, ::Test::SMap& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Inner_Test_Inner2_I_opSMap_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_s2);
    istr->read(ret);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Inner::Test::Inner2::I::_iceI_begin_opC(const ::Test::CPtr& iceP_c1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opC_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Inner_Test_Inner2_I_opC_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Inner_Test_Inner2_I_opC_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_c1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Inner_Test_Inner2_I_opC_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::CPtr
IceProxy::Inner::Test::Inner2::I::end_opC(::Test::CPtr& iceP_c2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Inner_Test_Inner2_I_opC_name);
    ::Test::CPtr ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Inner::Test::Inner2::I::_iceI_end_opC(::Test::CPtr& iceP_c2, ::Test::CPtr& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Inner_Test_Inner2_I_opC_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Inner::Test::Inner2::I::_iceI_begin_opCSeq(const ::Test::CSeq& iceP_c1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opCSeq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Inner_Test_Inner2_I_opCSeq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Inner_Test_Inner2_I_opCSeq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_c1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Inner_Test_Inner2_I_opCSeq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::CSeq
IceProxy::Inner::Test::Inner2::I::end_opCSeq(::Test::CSeq& iceP_c2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Inner_Test_Inner2_I_opCSeq_name);
    ::Test::CSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Inner::Test::Inner2::I::_iceI_end_opCSeq(::Test::CSeq& iceP_c2, ::Test::CSeq& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Inner_Test_Inner2_I_opCSeq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Inner::Test::Inner2::I::_iceI_begin_opCMap(const ::Test::CMap& iceP_c1, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opCMap_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Inner_Test_Inner2_I_opCMap_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Inner_Test_Inner2_I_opCMap_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_c1);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Inner_Test_Inner2_I_opCMap_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::CMap
IceProxy::Inner::Test::Inner2::I::end_opCMap(::Test::CMap& iceP_c2, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Inner_Test_Inner2_I_opCMap_name);
    ::Test::CMap ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
    return ret;
}

void IceProxy::Inner::Test::Inner2::I::_iceI_end_opCMap(::Test::CMap& iceP_c2, ::Test::CMap& ret, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Inner_Test_Inner2_I_opCMap_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_c2);
    istr->read(ret);
    istr->readPendingValues();
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Inner::Test::Inner2::I::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Inner_Test_Inner2_I_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Inner_Test_Inner2_I_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Inner_Test_Inner2_I_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Inner::Test::Inner2::I::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Inner_Test_Inner2_I_shutdown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Inner::Test::Inner2::I::_newInstance() const
{
    return new I;
}
/// \endcond

const ::std::string&
IceProxy::Inner::Test::Inner2::I::ice_staticId()
{
    return ::Inner::Test::Inner2::I::ice_staticId();
}

Test::C::~C()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(C* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::C::ice_clone() const
{
    ::Ice::Object* p = new C(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_C_ids[2] =
{
    "::Ice::Object",
    "::Test::C"
};

}

bool
Test::C::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_C_ids, iceC_Test_C_ids + 2, s);
}

::std::vector< ::std::string>
Test::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_C_ids[0], &iceC_Test_C_ids[2]);
}

const ::std::string&
Test::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

/// \cond STREAM
void
Test::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::C> iceC_Test_C_init("::Test::C");
}

::Ice::ValueFactoryPtr
Test::C::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::C::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C::ice_staticId(), v);
    }
}
/// \endcond

Test::C1::~C1()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(C1* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::C1::ice_clone() const
{
    ::Ice::Object* p = new C1(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_C1_ids[2] =
{
    "::Ice::Object",
    "::Test::C1"
};

}

bool
Test::C1::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_C1_ids, iceC_Test_C1_ids + 2, s);
}

::std::vector< ::std::string>
Test::C1::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_C1_ids[0], &iceC_Test_C1_ids[2]);
}

const ::std::string&
Test::C1::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::C1::ice_staticId()
{
    static const ::std::string typeId = "::Test::C1";
    return typeId;
}

/// \cond STREAM
void
Test::C1::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< C1, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::C1::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C1, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::C1> iceC_Test_C1_init("::Test::C1");
}

::Ice::ValueFactoryPtr
Test::C1::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::C1::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(C1Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = C1Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C1::ice_staticId(), v);
    }
}
/// \endcond

Test::C2::~C2()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(C2* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::C2::ice_clone() const
{
    ::Ice::Object* p = new C2(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_C2_ids[2] =
{
    "::Ice::Object",
    "::Test::C2"
};

}

bool
Test::C2::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_C2_ids, iceC_Test_C2_ids + 2, s);
}

::std::vector< ::std::string>
Test::C2::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_C2_ids[0], &iceC_Test_C2_ids[2]);
}

const ::std::string&
Test::C2::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::C2::ice_staticId()
{
    static const ::std::string typeId = "::Test::C2";
    return typeId;
}

void
Test::C2::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(C1)
    {
        if((::Test::upCast(C1.get())->_iceGcVisit(v_)))
        {
            C1 = 0;
        }
    }
}

/// \cond STREAM
void
Test::C2::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< C2, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::C2::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C2, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::C2> iceC_Test_C2_init("::Test::C2");
}

::Ice::ValueFactoryPtr
Test::C2::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::C2::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(C2Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = C2Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C2::ice_staticId(), v);
    }
}
/// \endcond

Test::I::~I()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(I* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_I_ids[2] =
{
    "::Ice::Object",
    "::Test::I"
};

}

bool
Test::I::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_I_ids, iceC_Test_I_ids + 2, s);
}

::std::vector< ::std::string>
Test::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_I_ids[0], &iceC_Test_I_ids[2]);
}

const ::std::string&
Test::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    S iceP_s1;
    istr->read(iceP_s1);
    inS.endReadParams();
    S iceP_s2;
    S ret = this->opS(iceP_s1, iceP_s2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_s2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    SSeq iceP_s1;
    istr->read(iceP_s1);
    inS.endReadParams();
    SSeq iceP_s2;
    SSeq ret = this->opSSeq(iceP_s1, iceP_s2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_s2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    SMap iceP_s1;
    istr->read(iceP_s1);
    inS.endReadParams();
    SMap iceP_s2;
    SMap ret = this->opSMap(iceP_s1, iceP_s2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_s2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CPtr iceP_c1;
    istr->read(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    CPtr iceP_c2;
    CPtr ret = this->opC(iceP_c1, iceP_c2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_c2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CSeq iceP_s1;
    istr->read(iceP_s1);
    istr->readPendingValues();
    inS.endReadParams();
    CSeq iceP_s2;
    CSeq ret = this->opCSeq(iceP_s1, iceP_s2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_s2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CMap iceP_c1;
    istr->read(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    CMap iceP_c2;
    CMap ret = this->opCMap(iceP_c1, iceP_c2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_c2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opE1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    E1 iceP_E1;
    istr->read(iceP_E1);
    inS.endReadParams();
    E1 ret = this->opE1(iceP_E1, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opS1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    S1 iceP_S1;
    istr->read(iceP_S1);
    inS.endReadParams();
    S1 ret = this->opS1(iceP_S1, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opC1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    C1Ptr iceP_C1;
    istr->read(iceP_C1);
    istr->readPendingValues();
    inS.endReadParams();
    C1Ptr ret = this->opC1(iceP_C1, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opS1Seq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    S1Seq iceP_S1Seq;
    istr->read(iceP_S1Seq);
    inS.endReadParams();
    S1Seq ret = this->opS1Seq(iceP_S1Seq, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opS1Map(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    S1Map iceP_S1Map;
    istr->read(iceP_S1Map);
    inS.endReadParams();
    S1Map ret = this->opS1Map(iceP_S1Map, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_I_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opC1",
    "opCMap",
    "opCSeq",
    "opE1",
    "opS",
    "opS1",
    "opS1Map",
    "opS1Seq",
    "opSMap",
    "opSSeq",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_I_all, iceC_Test_I_all + 16, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_I_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opC1(in, current);
        }
        case 6:
        {
            return _iceD_opCMap(in, current);
        }
        case 7:
        {
            return _iceD_opCSeq(in, current);
        }
        case 8:
        {
            return _iceD_opE1(in, current);
        }
        case 9:
        {
            return _iceD_opS(in, current);
        }
        case 10:
        {
            return _iceD_opS1(in, current);
        }
        case 11:
        {
            return _iceD_opS1Map(in, current);
        }
        case 12:
        {
            return _iceD_opS1Seq(in, current);
        }
        case 13:
        {
            return _iceD_opSMap(in, current);
        }
        case 14:
        {
            return _iceD_opSSeq(in, current);
        }
        case 15:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::I::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< I, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::I::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< I, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(IPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = IPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(I::ice_staticId(), v);
    }
}
/// \endcond

Test::Inner::Inner2::C::~C()
{
}

/// \cond INTERNAL
::Ice::Object* Test::Inner::Inner2::upCast(C* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::Inner::Inner2::C::ice_clone() const
{
    ::Ice::Object* p = new C(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_Inner_Inner2_C_ids[2] =
{
    "::Ice::Object",
    "::Test::Inner::Inner2::C"
};

}

bool
Test::Inner::Inner2::C::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Inner_Inner2_C_ids, iceC_Test_Inner_Inner2_C_ids + 2, s);
}

::std::vector< ::std::string>
Test::Inner::Inner2::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Inner_Inner2_C_ids[0], &iceC_Test_Inner_Inner2_C_ids[2]);
}

const ::std::string&
Test::Inner::Inner2::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Inner::Inner2::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Inner2::C";
    return typeId;
}

/// \cond STREAM
void
Test::Inner::Inner2::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Inner::Inner2::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Inner::Inner2::C> iceC_Test_Inner_Inner2_C_init("::Test::Inner::Inner2::C");
}

::Ice::ValueFactoryPtr
Test::Inner::Inner2::C::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Inner::Inner2::C::ice_staticId());
}

/// \cond INTERNAL
void
Test::Inner::Inner2::_icePatchObjectPtr(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C::ice_staticId(), v);
    }
}
/// \endcond

Test::Inner::Inner2::I::~I()
{
}

/// \cond INTERNAL
::Ice::Object* Test::Inner::Inner2::upCast(I* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_Inner_Inner2_I_ids[2] =
{
    "::Ice::Object",
    "::Test::Inner::Inner2::I"
};

}

bool
Test::Inner::Inner2::I::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Inner_Inner2_I_ids, iceC_Test_Inner_Inner2_I_ids + 2, s);
}

::std::vector< ::std::string>
Test::Inner::Inner2::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Inner_Inner2_I_ids[0], &iceC_Test_Inner_Inner2_I_ids[2]);
}

const ::std::string&
Test::Inner::Inner2::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Inner::Inner2::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Inner2::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    S iceP_s1;
    istr->read(iceP_s1);
    inS.endReadParams();
    S iceP_s2;
    S ret = this->opS(iceP_s1, iceP_s2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_s2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    SSeq iceP_s1;
    istr->read(iceP_s1);
    inS.endReadParams();
    SSeq iceP_s2;
    SSeq ret = this->opSSeq(iceP_s1, iceP_s2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_s2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    SMap iceP_s1;
    istr->read(iceP_s1);
    inS.endReadParams();
    SMap iceP_s2;
    SMap ret = this->opSMap(iceP_s1, iceP_s2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_s2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CPtr iceP_c1;
    istr->read(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    CPtr iceP_c2;
    CPtr ret = this->opC(iceP_c1, iceP_c2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_c2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CSeq iceP_c1;
    istr->read(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    CSeq iceP_c2;
    CSeq ret = this->opCSeq(iceP_c1, iceP_c2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_c2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CMap iceP_c1;
    istr->read(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    CMap iceP_c2;
    CMap ret = this->opCMap(iceP_c1, iceP_c2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_c2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Inner_Inner2_I_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opCMap",
    "opCSeq",
    "opS",
    "opSMap",
    "opSSeq",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Inner_Inner2_I_all, iceC_Test_Inner_Inner2_I_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Inner_Inner2_I_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opCMap(in, current);
        }
        case 6:
        {
            return _iceD_opCSeq(in, current);
        }
        case 7:
        {
            return _iceD_opS(in, current);
        }
        case 8:
        {
            return _iceD_opSMap(in, current);
        }
        case 9:
        {
            return _iceD_opSSeq(in, current);
        }
        case 10:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::Inner::Inner2::I::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< I, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Inner::Inner2::I::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< I, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::_icePatchObjectPtr(IPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = IPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(I::ice_staticId(), v);
    }
}
/// \endcond

Test::Inner::C::~C()
{
}

/// \cond INTERNAL
::Ice::Object* Test::Inner::upCast(C* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::Inner::C::ice_clone() const
{
    ::Ice::Object* p = new C(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_Inner_C_ids[2] =
{
    "::Ice::Object",
    "::Test::Inner::C"
};

}

bool
Test::Inner::C::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Inner_C_ids, iceC_Test_Inner_C_ids + 2, s);
}

::std::vector< ::std::string>
Test::Inner::C::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Inner_C_ids[0], &iceC_Test_Inner_C_ids[2]);
}

const ::std::string&
Test::Inner::C::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Inner::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::C";
    return typeId;
}

/// \cond STREAM
void
Test::Inner::C::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Inner::C::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Inner::C> iceC_Test_Inner_C_init("::Test::Inner::C");
}

::Ice::ValueFactoryPtr
Test::Inner::C::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Inner::C::ice_staticId());
}

/// \cond INTERNAL
void
Test::Inner::_icePatchObjectPtr(CPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(C::ice_staticId(), v);
    }
}
/// \endcond

Test::Inner::I::~I()
{
}

/// \cond INTERNAL
::Ice::Object* Test::Inner::upCast(I* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_Inner_I_ids[2] =
{
    "::Ice::Object",
    "::Test::Inner::I"
};

}

bool
Test::Inner::I::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Inner_I_ids, iceC_Test_Inner_I_ids + 2, s);
}

::std::vector< ::std::string>
Test::Inner::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Inner_I_ids[0], &iceC_Test_Inner_I_ids[2]);
}

const ::std::string&
Test::Inner::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Inner::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Test::Inner::Inner2::S iceP_s1;
    istr->read(iceP_s1);
    inS.endReadParams();
    ::Test::Inner::Inner2::S iceP_s2;
    ::Test::Inner::Inner2::S ret = this->opS(iceP_s1, iceP_s2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_s2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Test::Inner::Inner2::SSeq iceP_s1;
    istr->read(iceP_s1);
    inS.endReadParams();
    ::Test::Inner::Inner2::SSeq iceP_s2;
    ::Test::Inner::Inner2::SSeq ret = this->opSSeq(iceP_s1, iceP_s2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_s2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Test::Inner::Inner2::SMap iceP_s1;
    istr->read(iceP_s1);
    inS.endReadParams();
    ::Test::Inner::Inner2::SMap iceP_s2;
    ::Test::Inner::Inner2::SMap ret = this->opSMap(iceP_s1, iceP_s2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_s2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Test::Inner::Inner2::CPtr iceP_c1;
    istr->read(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::Inner::Inner2::CPtr iceP_c2;
    ::Test::Inner::Inner2::CPtr ret = this->opC(iceP_c1, iceP_c2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_c2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Test::Inner::Inner2::CSeq iceP_c1;
    istr->read(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::Inner::Inner2::CSeq iceP_c2;
    ::Test::Inner::Inner2::CSeq ret = this->opCSeq(iceP_c1, iceP_c2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_c2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Test::Inner::Inner2::CMap iceP_c1;
    istr->read(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::Inner::Inner2::CMap iceP_c2;
    ::Test::Inner::Inner2::CMap ret = this->opCMap(iceP_c1, iceP_c2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_c2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Inner_I_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opCMap",
    "opCSeq",
    "opS",
    "opSMap",
    "opSSeq",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::Inner::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Inner_I_all, iceC_Test_Inner_I_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Inner_I_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opCMap(in, current);
        }
        case 6:
        {
            return _iceD_opCSeq(in, current);
        }
        case 7:
        {
            return _iceD_opS(in, current);
        }
        case 8:
        {
            return _iceD_opSMap(in, current);
        }
        case 9:
        {
            return _iceD_opSSeq(in, current);
        }
        case 10:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::Inner::I::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< I, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Inner::I::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< I, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::_icePatchObjectPtr(IPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = IPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(I::ice_staticId(), v);
    }
}
/// \endcond

Inner::Test::Inner2::I::~I()
{
}

/// \cond INTERNAL
::Ice::Object* Inner::Test::Inner2::upCast(I* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Inner_Test_Inner2_I_ids[2] =
{
    "::Ice::Object",
    "::Inner::Test::Inner2::I"
};

}

bool
Inner::Test::Inner2::I::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Inner_Test_Inner2_I_ids, iceC_Inner_Test_Inner2_I_ids + 2, s);
}

::std::vector< ::std::string>
Inner::Test::Inner2::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Inner_Test_Inner2_I_ids[0], &iceC_Inner_Test_Inner2_I_ids[2]);
}

const ::std::string&
Inner::Test::Inner2::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Inner::Test::Inner2::I::ice_staticId()
{
    static const ::std::string typeId = "::Inner::Test::Inner2::I";
    return typeId;
}

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Test::S iceP_s1;
    istr->read(iceP_s1);
    inS.endReadParams();
    ::Test::S iceP_s2;
    ::Test::S ret = this->opS(iceP_s1, iceP_s2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_s2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Test::SSeq iceP_s1;
    istr->read(iceP_s1);
    inS.endReadParams();
    ::Test::SSeq iceP_s2;
    ::Test::SSeq ret = this->opSSeq(iceP_s1, iceP_s2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_s2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Test::SMap iceP_s1;
    istr->read(iceP_s1);
    inS.endReadParams();
    ::Test::SMap iceP_s2;
    ::Test::SMap ret = this->opSMap(iceP_s1, iceP_s2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_s2);
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Test::CPtr iceP_c1;
    istr->read(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::CPtr iceP_c2;
    ::Test::CPtr ret = this->opC(iceP_c1, iceP_c2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_c2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Test::CSeq iceP_c1;
    istr->read(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::CSeq iceP_c2;
    ::Test::CSeq ret = this->opCSeq(iceP_c1, iceP_c2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_c2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Test::CMap iceP_c1;
    istr->read(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::CMap iceP_c2;
    ::Test::CMap ret = this->opCMap(iceP_c1, iceP_c2, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_c2);
    ostr->write(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Inner_Test_Inner2_I_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opCMap",
    "opCSeq",
    "opS",
    "opSMap",
    "opSSeq",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Inner_Test_Inner2_I_all, iceC_Inner_Test_Inner2_I_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Inner_Test_Inner2_I_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opCMap(in, current);
        }
        case 6:
        {
            return _iceD_opCSeq(in, current);
        }
        case 7:
        {
            return _iceD_opS(in, current);
        }
        case 8:
        {
            return _iceD_opSMap(in, current);
        }
        case 9:
        {
            return _iceD_opSSeq(in, current);
        }
        case 10:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Inner::Test::Inner2::I::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< I, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Inner::Test::Inner2::I::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< I, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::_icePatchObjectPtr(IPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = IPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(I::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

namespace Ice
{
}

#endif
