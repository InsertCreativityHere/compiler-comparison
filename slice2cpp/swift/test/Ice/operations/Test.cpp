//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::SomeException> iceC_Test_SomeException_init("::Test::SomeException");

const ::std::string iceC_Test_MyClass_ids[2] =
{
    "::Ice::Object",
    "::Test::MyClass"
};
const ::std::string iceC_Test_MyClass_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolBoolSD",
    "opBoolS",
    "opBoolSS",
    "opByte",
    "opByte1",
    "opByteBoolD",
    "opByteBoolD1",
    "opByteBoolD2",
    "opByteBoolDS",
    "opByteByteSD",
    "opByteS",
    "opByteSOneway",
    "opByteSOnewayCallCount",
    "opByteSS",
    "opContext",
    "opDouble1",
    "opDoubleMarshaling",
    "opFloat1",
    "opFloatDouble",
    "opFloatDoubleS",
    "opFloatDoubleSS",
    "opIdempotent",
    "opInt1",
    "opIntIntSD",
    "opIntS",
    "opLong1",
    "opLongFloatD",
    "opLongFloatDS",
    "opLongLongSD",
    "opMDict1",
    "opMDict2",
    "opMSeq1",
    "opMSeq2",
    "opMStruct1",
    "opMStruct2",
    "opMyClass",
    "opMyEnum",
    "opMyEnumMyEnumSD",
    "opMyEnumStringD",
    "opMyEnumStringDS",
    "opMyStructMyEnumD",
    "opMyStructMyEnumDS",
    "opNonmutating",
    "opShort1",
    "opShortIntD",
    "opShortIntDS",
    "opShortIntLong",
    "opShortIntLongS",
    "opShortIntLongSS",
    "opShortShortSD",
    "opString",
    "opString1",
    "opStringDoubleSD",
    "opStringFloatSD",
    "opStringLiterals",
    "opStringMyEnumD",
    "opStringMyEnumDS",
    "opStringS",
    "opStringS1",
    "opStringS2",
    "opStringSS",
    "opStringSSS",
    "opStringStringD",
    "opStringStringDS",
    "opStringStringSD",
    "opStruct",
    "opVoid",
    "opWStringLiterals",
    "shutdown",
    "supportsCompress"
};
const ::std::string iceC_Test_MyClass_shutdown_name = "shutdown";
const ::std::string iceC_Test_MyClass_supportsCompress_name = "supportsCompress";
const ::std::string iceC_Test_MyClass_opVoid_name = "opVoid";
const ::std::string iceC_Test_MyClass_opByte_name = "opByte";
const ::std::string iceC_Test_MyClass_opBool_name = "opBool";
const ::std::string iceC_Test_MyClass_opShortIntLong_name = "opShortIntLong";
const ::std::string iceC_Test_MyClass_opFloatDouble_name = "opFloatDouble";
const ::std::string iceC_Test_MyClass_opString_name = "opString";
const ::std::string iceC_Test_MyClass_opMyEnum_name = "opMyEnum";
const ::std::string iceC_Test_MyClass_opMyClass_name = "opMyClass";
const ::std::string iceC_Test_MyClass_opStruct_name = "opStruct";
const ::std::string iceC_Test_MyClass_opByteS_name = "opByteS";
const ::std::string iceC_Test_MyClass_opBoolS_name = "opBoolS";
const ::std::string iceC_Test_MyClass_opShortIntLongS_name = "opShortIntLongS";
const ::std::string iceC_Test_MyClass_opFloatDoubleS_name = "opFloatDoubleS";
const ::std::string iceC_Test_MyClass_opStringS_name = "opStringS";
const ::std::string iceC_Test_MyClass_opByteSS_name = "opByteSS";
const ::std::string iceC_Test_MyClass_opBoolSS_name = "opBoolSS";
const ::std::string iceC_Test_MyClass_opShortIntLongSS_name = "opShortIntLongSS";
const ::std::string iceC_Test_MyClass_opFloatDoubleSS_name = "opFloatDoubleSS";
const ::std::string iceC_Test_MyClass_opStringSS_name = "opStringSS";
const ::std::string iceC_Test_MyClass_opStringSSS_name = "opStringSSS";
const ::std::string iceC_Test_MyClass_opByteBoolD_name = "opByteBoolD";
const ::std::string iceC_Test_MyClass_opShortIntD_name = "opShortIntD";
const ::std::string iceC_Test_MyClass_opLongFloatD_name = "opLongFloatD";
const ::std::string iceC_Test_MyClass_opStringStringD_name = "opStringStringD";
const ::std::string iceC_Test_MyClass_opStringMyEnumD_name = "opStringMyEnumD";
const ::std::string iceC_Test_MyClass_opMyEnumStringD_name = "opMyEnumStringD";
const ::std::string iceC_Test_MyClass_opMyStructMyEnumD_name = "opMyStructMyEnumD";
const ::std::string iceC_Test_MyClass_opByteBoolDS_name = "opByteBoolDS";
const ::std::string iceC_Test_MyClass_opShortIntDS_name = "opShortIntDS";
const ::std::string iceC_Test_MyClass_opLongFloatDS_name = "opLongFloatDS";
const ::std::string iceC_Test_MyClass_opStringStringDS_name = "opStringStringDS";
const ::std::string iceC_Test_MyClass_opStringMyEnumDS_name = "opStringMyEnumDS";
const ::std::string iceC_Test_MyClass_opMyEnumStringDS_name = "opMyEnumStringDS";
const ::std::string iceC_Test_MyClass_opMyStructMyEnumDS_name = "opMyStructMyEnumDS";
const ::std::string iceC_Test_MyClass_opByteByteSD_name = "opByteByteSD";
const ::std::string iceC_Test_MyClass_opBoolBoolSD_name = "opBoolBoolSD";
const ::std::string iceC_Test_MyClass_opShortShortSD_name = "opShortShortSD";
const ::std::string iceC_Test_MyClass_opIntIntSD_name = "opIntIntSD";
const ::std::string iceC_Test_MyClass_opLongLongSD_name = "opLongLongSD";
const ::std::string iceC_Test_MyClass_opStringFloatSD_name = "opStringFloatSD";
const ::std::string iceC_Test_MyClass_opStringDoubleSD_name = "opStringDoubleSD";
const ::std::string iceC_Test_MyClass_opStringStringSD_name = "opStringStringSD";
const ::std::string iceC_Test_MyClass_opMyEnumMyEnumSD_name = "opMyEnumMyEnumSD";
const ::std::string iceC_Test_MyClass_opIntS_name = "opIntS";
const ::std::string iceC_Test_MyClass_opByteSOneway_name = "opByteSOneway";
const ::std::string iceC_Test_MyClass_opByteSOnewayCallCount_name = "opByteSOnewayCallCount";
const ::std::string iceC_Test_MyClass_opContext_name = "opContext";
const ::std::string iceC_Test_MyClass_opDoubleMarshaling_name = "opDoubleMarshaling";
const ::std::string iceC_Test_MyClass_opIdempotent_name = "opIdempotent";
const ::std::string iceC_Test_MyClass_opNonmutating_name = "opNonmutating";
const ::std::string iceC_Test_MyClass_opByte1_name = "opByte1";
const ::std::string iceC_Test_MyClass_opShort1_name = "opShort1";
const ::std::string iceC_Test_MyClass_opInt1_name = "opInt1";
const ::std::string iceC_Test_MyClass_opLong1_name = "opLong1";
const ::std::string iceC_Test_MyClass_opFloat1_name = "opFloat1";
const ::std::string iceC_Test_MyClass_opDouble1_name = "opDouble1";
const ::std::string iceC_Test_MyClass_opString1_name = "opString1";
const ::std::string iceC_Test_MyClass_opStringS1_name = "opStringS1";
const ::std::string iceC_Test_MyClass_opByteBoolD1_name = "opByteBoolD1";
const ::std::string iceC_Test_MyClass_opStringS2_name = "opStringS2";
const ::std::string iceC_Test_MyClass_opByteBoolD2_name = "opByteBoolD2";
const ::std::string iceC_Test_MyClass_opStringLiterals_name = "opStringLiterals";
const ::std::string iceC_Test_MyClass_opWStringLiterals_name = "opWStringLiterals";
const ::std::string iceC_Test_MyClass_opMStruct1_name = "opMStruct1";
const ::std::string iceC_Test_MyClass_opMStruct2_name = "opMStruct2";
const ::std::string iceC_Test_MyClass_opMSeq1_name = "opMSeq1";
const ::std::string iceC_Test_MyClass_opMSeq2_name = "opMSeq2";
const ::std::string iceC_Test_MyClass_opMDict1_name = "opMDict1";
const ::std::string iceC_Test_MyClass_opMDict2_name = "opMDict2";

const ::IceInternal::DefaultValueFactoryInit<::Test::MyClass1> iceC_Test_MyClass1_init("::Test::MyClass1");

const ::std::string iceC_Test_MyDerivedClass_ids[3] =
{
    "::Ice::Object",
    "::Test::MyClass",
    "::Test::MyDerivedClass"
};
const ::std::string iceC_Test_MyDerivedClass_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolBoolSD",
    "opBoolS",
    "opBoolSS",
    "opByte",
    "opByte1",
    "opByteBoolD",
    "opByteBoolD1",
    "opByteBoolD2",
    "opByteBoolDS",
    "opByteByteSD",
    "opByteS",
    "opByteSOneway",
    "opByteSOnewayCallCount",
    "opByteSS",
    "opContext",
    "opDerived",
    "opDouble1",
    "opDoubleMarshaling",
    "opFloat1",
    "opFloatDouble",
    "opFloatDoubleS",
    "opFloatDoubleSS",
    "opIdempotent",
    "opInt1",
    "opIntIntSD",
    "opIntS",
    "opLong1",
    "opLongFloatD",
    "opLongFloatDS",
    "opLongLongSD",
    "opMDict1",
    "opMDict2",
    "opMSeq1",
    "opMSeq2",
    "opMStruct1",
    "opMStruct2",
    "opMyClass",
    "opMyClass1",
    "opMyEnum",
    "opMyEnumMyEnumSD",
    "opMyEnumStringD",
    "opMyEnumStringDS",
    "opMyStruct1",
    "opMyStructMyEnumD",
    "opMyStructMyEnumDS",
    "opNonmutating",
    "opShort1",
    "opShortIntD",
    "opShortIntDS",
    "opShortIntLong",
    "opShortIntLongS",
    "opShortIntLongSS",
    "opShortShortSD",
    "opString",
    "opString1",
    "opStringDoubleSD",
    "opStringFloatSD",
    "opStringLiterals",
    "opStringMyEnumD",
    "opStringMyEnumDS",
    "opStringS",
    "opStringS1",
    "opStringS2",
    "opStringSS",
    "opStringSSS",
    "opStringStringD",
    "opStringStringDS",
    "opStringStringSD",
    "opStruct",
    "opVoid",
    "opWStringLiterals",
    "shutdown",
    "supportsCompress"
};
const ::std::string iceC_Test_MyDerivedClass_opDerived_name = "opDerived";
const ::std::string iceC_Test_MyDerivedClass_opMyClass1_name = "opMyClass1";
const ::std::string iceC_Test_MyDerivedClass_opMyStruct1_name = "opMyStruct1";

const ::std::string iceC_Test2_MyDerivedClass_ids[3] =
{
    "::Ice::Object",
    "::Test2::MyDerivedClass",
    "::Test::MyClass"
};
const ::std::string iceC_Test2_MyDerivedClass_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opBool",
    "opBoolBoolSD",
    "opBoolS",
    "opBoolSS",
    "opByte",
    "opByte1",
    "opByteBoolD",
    "opByteBoolD1",
    "opByteBoolD2",
    "opByteBoolDS",
    "opByteByteSD",
    "opByteS",
    "opByteSOneway",
    "opByteSOnewayCallCount",
    "opByteSS",
    "opContext",
    "opDouble1",
    "opDoubleMarshaling",
    "opFloat1",
    "opFloatDouble",
    "opFloatDoubleS",
    "opFloatDoubleSS",
    "opIdempotent",
    "opInt1",
    "opIntIntSD",
    "opIntS",
    "opLong1",
    "opLongFloatD",
    "opLongFloatDS",
    "opLongLongSD",
    "opMDict1",
    "opMDict2",
    "opMSeq1",
    "opMSeq2",
    "opMStruct1",
    "opMStruct2",
    "opMyClass",
    "opMyEnum",
    "opMyEnumMyEnumSD",
    "opMyEnumStringD",
    "opMyEnumStringDS",
    "opMyStructMyEnumD",
    "opMyStructMyEnumDS",
    "opNonmutating",
    "opShort1",
    "opShortIntD",
    "opShortIntDS",
    "opShortIntLong",
    "opShortIntLongS",
    "opShortIntLongSS",
    "opShortShortSD",
    "opString",
    "opString1",
    "opStringDoubleSD",
    "opStringFloatSD",
    "opStringLiterals",
    "opStringMyEnumD",
    "opStringMyEnumDS",
    "opStringS",
    "opStringS1",
    "opStringS2",
    "opStringSS",
    "opStringSSS",
    "opStringStringD",
    "opStringStringDS",
    "opStringStringSD",
    "opStruct",
    "opVoid",
    "opWStringLiterals",
    "shutdown",
    "supportsCompress"
};

}

Test::SomeException::~SomeException()
{
}

const ::std::string&
Test::SomeException::ice_staticId()
{
    static const ::std::string typeId = "::Test::SomeException";
    return typeId;
}

bool
Test::MyClass::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyClass_ids, iceC_Test_MyClass_ids + 2, s);
}

::std::vector<::std::string>
Test::MyClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MyClass_ids[0], &iceC_Test_MyClass_ids[2]);
}

::std::string
Test::MyClass::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyClass";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_supportsCompress(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->supportsCompress(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opVoid(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->opVoid(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByte(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::Byte iceP_p1;
    ::Ice::Byte iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    ::Ice::Byte iceP_p3;
    ::Ice::Byte ret = this->opByte(iceP_p1, iceP_p2, iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opBool(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_p1;
    bool iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    bool iceP_p3;
    bool ret = this->opBool(iceP_p1, iceP_p2, iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortIntLong(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    short iceP_p1;
    int iceP_p2;
    long long int iceP_p3;
    istr->readAll(iceP_p1, iceP_p2, iceP_p3);
    inS.endReadParams();
    short iceP_p4;
    int iceP_p5;
    long long int iceP_p6;
    long long int ret = this->opShortIntLong(iceP_p1, iceP_p2, iceP_p3, iceP_p4, iceP_p5, iceP_p6, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p4, iceP_p5, iceP_p6, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opFloatDouble(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_p1;
    double iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    float iceP_p3;
    double iceP_p4;
    double ret = this->opFloatDouble(iceP_p1, iceP_p2, iceP_p3, iceP_p4, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, iceP_p4, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opString(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_p1;
    ::std::string iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    ::std::string iceP_p3;
    ::std::string ret = this->opString(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyEnum(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    MyEnum iceP_p1;
    istr->readAll(iceP_p1);
    inS.endReadParams();
    MyEnum iceP_p2;
    MyEnum ret = this->opMyEnum(iceP_p1, iceP_p2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyClass(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<MyClassPrx> iceP_p1;
    istr->readAll(iceP_p1);
    inS.endReadParams();
    ::std::shared_ptr<MyClassPrx> iceP_p2;
    ::std::shared_ptr<MyClassPrx> iceP_p3;
    ::std::shared_ptr<MyClassPrx> ret = this->opMyClass(::std::move(iceP_p1), iceP_p2, iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p2, iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStruct(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Structure iceP_p1;
    Structure iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    Structure iceP_p3;
    Structure ret = this->opStruct(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteS iceP_p1;
    ByteS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    ByteS iceP_p3;
    ByteS ret = this->opByteS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opBoolS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    BoolS iceP_p1;
    BoolS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    BoolS iceP_p3;
    BoolS ret = this->opBoolS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortIntLongS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ShortS iceP_p1;
    IntS iceP_p2;
    LongS iceP_p3;
    istr->readAll(iceP_p1, iceP_p2, iceP_p3);
    inS.endReadParams();
    ShortS iceP_p4;
    IntS iceP_p5;
    LongS iceP_p6;
    LongS ret = this->opShortIntLongS(::std::move(iceP_p1), ::std::move(iceP_p2), ::std::move(iceP_p3), iceP_p4, iceP_p5, iceP_p6, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p4, iceP_p5, iceP_p6, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opFloatDoubleS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    FloatS iceP_p1;
    DoubleS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    FloatS iceP_p3;
    DoubleS iceP_p4;
    DoubleS ret = this->opFloatDoubleS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, iceP_p4, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, iceP_p4, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringS iceP_p1;
    StringS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    StringS iceP_p3;
    StringS ret = this->opStringS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteSS iceP_p1;
    ByteSS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    ByteSS iceP_p3;
    ByteSS ret = this->opByteSS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opBoolSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    BoolSS iceP_p1;
    BoolSS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    BoolSS iceP_p3;
    BoolSS ret = this->opBoolSS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortIntLongSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ShortSS iceP_p1;
    IntSS iceP_p2;
    LongSS iceP_p3;
    istr->readAll(iceP_p1, iceP_p2, iceP_p3);
    inS.endReadParams();
    ShortSS iceP_p4;
    IntSS iceP_p5;
    LongSS iceP_p6;
    LongSS ret = this->opShortIntLongSS(::std::move(iceP_p1), ::std::move(iceP_p2), ::std::move(iceP_p3), iceP_p4, iceP_p5, iceP_p6, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p4, iceP_p5, iceP_p6, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opFloatDoubleSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    FloatSS iceP_p1;
    DoubleSS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    FloatSS iceP_p3;
    DoubleSS iceP_p4;
    DoubleSS ret = this->opFloatDoubleSS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, iceP_p4, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, iceP_p4, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringSS iceP_p1;
    StringSS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    StringSS iceP_p3;
    StringSS ret = this->opStringSS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringSSS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringSSS iceP_p1;
    StringSSS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    StringSSS iceP_p3;
    StringSSS ret = this->opStringSSS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteBoolD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteBoolD iceP_p1;
    ByteBoolD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    ByteBoolD iceP_p3;
    ByteBoolD ret = this->opByteBoolD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortIntD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ShortIntD iceP_p1;
    ShortIntD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    ShortIntD iceP_p3;
    ShortIntD ret = this->opShortIntD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLongFloatD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LongFloatD iceP_p1;
    LongFloatD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    LongFloatD iceP_p3;
    LongFloatD ret = this->opLongFloatD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringStringD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringStringD iceP_p1;
    StringStringD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    StringStringD iceP_p3;
    StringStringD ret = this->opStringStringD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringMyEnumD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringMyEnumD iceP_p1;
    StringMyEnumD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    StringMyEnumD iceP_p3;
    StringMyEnumD ret = this->opStringMyEnumD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyEnumStringD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    MyEnumStringD iceP_p1;
    MyEnumStringD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    MyEnumStringD iceP_p3;
    MyEnumStringD ret = this->opMyEnumStringD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyStructMyEnumD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    MyStructMyEnumD iceP_p1;
    MyStructMyEnumD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    MyStructMyEnumD iceP_p3;
    MyStructMyEnumD ret = this->opMyStructMyEnumD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteBoolDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteBoolDS iceP_p1;
    ByteBoolDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    ByteBoolDS iceP_p3;
    ByteBoolDS ret = this->opByteBoolDS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortIntDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ShortIntDS iceP_p1;
    ShortIntDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    ShortIntDS iceP_p3;
    ShortIntDS ret = this->opShortIntDS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLongFloatDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LongFloatDS iceP_p1;
    LongFloatDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    LongFloatDS iceP_p3;
    LongFloatDS ret = this->opLongFloatDS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringStringDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringStringDS iceP_p1;
    StringStringDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    StringStringDS iceP_p3;
    StringStringDS ret = this->opStringStringDS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringMyEnumDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringMyEnumDS iceP_p1;
    StringMyEnumDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    StringMyEnumDS iceP_p3;
    StringMyEnumDS ret = this->opStringMyEnumDS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyEnumStringDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    MyEnumStringDS iceP_p1;
    MyEnumStringDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    MyEnumStringDS iceP_p3;
    MyEnumStringDS ret = this->opMyEnumStringDS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyStructMyEnumDS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    MyStructMyEnumDS iceP_p1;
    MyStructMyEnumDS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    MyStructMyEnumDS iceP_p3;
    MyStructMyEnumDS ret = this->opMyStructMyEnumDS(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteByteSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteByteSD iceP_p1;
    ByteByteSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    ByteByteSD iceP_p3;
    ByteByteSD ret = this->opByteByteSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opBoolBoolSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    BoolBoolSD iceP_p1;
    BoolBoolSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    BoolBoolSD iceP_p3;
    BoolBoolSD ret = this->opBoolBoolSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShortShortSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ShortShortSD iceP_p1;
    ShortShortSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    ShortShortSD iceP_p3;
    ShortShortSD ret = this->opShortShortSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opIntIntSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    IntIntSD iceP_p1;
    IntIntSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    IntIntSD iceP_p3;
    IntIntSD ret = this->opIntIntSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLongLongSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LongLongSD iceP_p1;
    LongLongSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    LongLongSD iceP_p3;
    LongLongSD ret = this->opLongLongSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringFloatSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringFloatSD iceP_p1;
    StringFloatSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    StringFloatSD iceP_p3;
    StringFloatSD ret = this->opStringFloatSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringDoubleSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringDoubleSD iceP_p1;
    StringDoubleSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    StringDoubleSD iceP_p3;
    StringDoubleSD ret = this->opStringDoubleSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringStringSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringStringSD iceP_p1;
    StringStringSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    StringStringSD iceP_p3;
    StringStringSD ret = this->opStringStringSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMyEnumMyEnumSD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    MyEnumMyEnumSD iceP_p1;
    MyEnumMyEnumSD iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    MyEnumMyEnumSD iceP_p3;
    MyEnumMyEnumSD ret = this->opMyEnumMyEnumSD(::std::move(iceP_p1), ::std::move(iceP_p2), iceP_p3, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p3, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opIntS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    IntS iceP_s;
    istr->readAll(iceP_s);
    inS.endReadParams();
    IntS ret = this->opIntS(::std::move(iceP_s), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteSOneway(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteS iceP_s;
    istr->readAll(iceP_s);
    inS.endReadParams();
    this->opByteSOneway(::std::move(iceP_s), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteSOnewayCallCount(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    int ret = this->opByteSOnewayCallCount(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opContext(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::Context ret = this->opContext(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opDoubleMarshaling(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    double iceP_p1;
    DoubleS iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    inS.endReadParams();
    this->opDoubleMarshaling(iceP_p1, ::std::move(iceP_p2), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opIdempotent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    this->opIdempotent(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opNonmutating(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    this->opNonmutating(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByte1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::Byte iceP_opByte1;
    istr->readAll(iceP_opByte1);
    inS.endReadParams();
    ::Ice::Byte ret = this->opByte1(iceP_opByte1, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opShort1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    short iceP_opShort1;
    istr->readAll(iceP_opShort1);
    inS.endReadParams();
    short ret = this->opShort1(iceP_opShort1, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opInt1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_opInt1;
    istr->readAll(iceP_opInt1);
    inS.endReadParams();
    int ret = this->opInt1(iceP_opInt1, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opLong1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    long long int iceP_opLong1;
    istr->readAll(iceP_opLong1);
    inS.endReadParams();
    long long int ret = this->opLong1(iceP_opLong1, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opFloat1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_opFloat1;
    istr->readAll(iceP_opFloat1);
    inS.endReadParams();
    float ret = this->opFloat1(iceP_opFloat1, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opDouble1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    double iceP_opDouble1;
    istr->readAll(iceP_opDouble1);
    inS.endReadParams();
    double ret = this->opDouble1(iceP_opDouble1, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opString1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_opString1;
    istr->readAll(iceP_opString1);
    inS.endReadParams();
    ::std::string ret = this->opString1(::std::move(iceP_opString1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringS1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringS iceP_opStringS1;
    istr->readAll(iceP_opStringS1);
    inS.endReadParams();
    StringS ret = this->opStringS1(::std::move(iceP_opStringS1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteBoolD1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteBoolD iceP_opByteBoolD1;
    istr->readAll(iceP_opByteBoolD1);
    inS.endReadParams();
    ByteBoolD ret = this->opByteBoolD1(::std::move(iceP_opByteBoolD1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringS2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringS iceP_stringS;
    istr->readAll(iceP_stringS);
    inS.endReadParams();
    StringS ret = this->opStringS2(::std::move(iceP_stringS), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opByteBoolD2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ByteBoolD iceP_byteBoolD;
    istr->readAll(iceP_byteBoolD);
    inS.endReadParams();
    ByteBoolD ret = this->opByteBoolD2(::std::move(iceP_byteBoolD), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opStringLiterals(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    StringS ret = this->opStringLiterals(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opWStringLiterals(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    WStringS ret = this->opWStringLiterals(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

Test::MyClass::OpMStruct1MarshaledResult::OpMStruct1MarshaledResult(const Structure& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMStruct1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setMarshaledResult(this->opMStruct1(current));
    return true;
}
/// \endcond

Test::MyClass::OpMStruct2MarshaledResult::OpMStruct2MarshaledResult(const Structure& ret, const Structure& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(iceP_p2, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMStruct2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Structure iceP_p1;
    istr->readAll(iceP_p1);
    inS.endReadParams();
    inS.setMarshaledResult(this->opMStruct2(::std::move(iceP_p1), current));
    return true;
}
/// \endcond

Test::MyClass::OpMSeq1MarshaledResult::OpMSeq1MarshaledResult(const StringS& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMSeq1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setMarshaledResult(this->opMSeq1(current));
    return true;
}
/// \endcond

Test::MyClass::OpMSeq2MarshaledResult::OpMSeq2MarshaledResult(const StringS& ret, const StringS& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(iceP_p2, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMSeq2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringS iceP_p1;
    istr->readAll(iceP_p1);
    inS.endReadParams();
    inS.setMarshaledResult(this->opMSeq2(::std::move(iceP_p1), current));
    return true;
}
/// \endcond

Test::MyClass::OpMDict1MarshaledResult::OpMDict1MarshaledResult(const StringStringD& ret, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMDict1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setMarshaledResult(this->opMDict1(current));
    return true;
}
/// \endcond

Test::MyClass::OpMDict2MarshaledResult::OpMDict2MarshaledResult(const StringStringD& ret, const StringStringD& iceP_p2, const ::Ice::Current& current):
    MarshaledResult(current)
{
    ostr->startEncapsulation(current.encoding, ::Ice::FormatType::DefaultFormat);
    ostr->writeAll(iceP_p2, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
bool
Test::MyClass::_iceD_opMDict2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    StringStringD iceP_p1;
    istr->readAll(iceP_p1);
    inS.endReadParams();
    inS.setMarshaledResult(this->opMDict2(::std::move(iceP_p1), current));
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyClass::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MyClass_ops, iceC_Test_MyClass_ops + 75, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MyClass_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opBool(in, current);
        }
        case 5:
        {
            return _iceD_opBoolBoolSD(in, current);
        }
        case 6:
        {
            return _iceD_opBoolS(in, current);
        }
        case 7:
        {
            return _iceD_opBoolSS(in, current);
        }
        case 8:
        {
            return _iceD_opByte(in, current);
        }
        case 9:
        {
            return _iceD_opByte1(in, current);
        }
        case 10:
        {
            return _iceD_opByteBoolD(in, current);
        }
        case 11:
        {
            return _iceD_opByteBoolD1(in, current);
        }
        case 12:
        {
            return _iceD_opByteBoolD2(in, current);
        }
        case 13:
        {
            return _iceD_opByteBoolDS(in, current);
        }
        case 14:
        {
            return _iceD_opByteByteSD(in, current);
        }
        case 15:
        {
            return _iceD_opByteS(in, current);
        }
        case 16:
        {
            return _iceD_opByteSOneway(in, current);
        }
        case 17:
        {
            return _iceD_opByteSOnewayCallCount(in, current);
        }
        case 18:
        {
            return _iceD_opByteSS(in, current);
        }
        case 19:
        {
            return _iceD_opContext(in, current);
        }
        case 20:
        {
            return _iceD_opDouble1(in, current);
        }
        case 21:
        {
            return _iceD_opDoubleMarshaling(in, current);
        }
        case 22:
        {
            return _iceD_opFloat1(in, current);
        }
        case 23:
        {
            return _iceD_opFloatDouble(in, current);
        }
        case 24:
        {
            return _iceD_opFloatDoubleS(in, current);
        }
        case 25:
        {
            return _iceD_opFloatDoubleSS(in, current);
        }
        case 26:
        {
            return _iceD_opIdempotent(in, current);
        }
        case 27:
        {
            return _iceD_opInt1(in, current);
        }
        case 28:
        {
            return _iceD_opIntIntSD(in, current);
        }
        case 29:
        {
            return _iceD_opIntS(in, current);
        }
        case 30:
        {
            return _iceD_opLong1(in, current);
        }
        case 31:
        {
            return _iceD_opLongFloatD(in, current);
        }
        case 32:
        {
            return _iceD_opLongFloatDS(in, current);
        }
        case 33:
        {
            return _iceD_opLongLongSD(in, current);
        }
        case 34:
        {
            return _iceD_opMDict1(in, current);
        }
        case 35:
        {
            return _iceD_opMDict2(in, current);
        }
        case 36:
        {
            return _iceD_opMSeq1(in, current);
        }
        case 37:
        {
            return _iceD_opMSeq2(in, current);
        }
        case 38:
        {
            return _iceD_opMStruct1(in, current);
        }
        case 39:
        {
            return _iceD_opMStruct2(in, current);
        }
        case 40:
        {
            return _iceD_opMyClass(in, current);
        }
        case 41:
        {
            return _iceD_opMyEnum(in, current);
        }
        case 42:
        {
            return _iceD_opMyEnumMyEnumSD(in, current);
        }
        case 43:
        {
            return _iceD_opMyEnumStringD(in, current);
        }
        case 44:
        {
            return _iceD_opMyEnumStringDS(in, current);
        }
        case 45:
        {
            return _iceD_opMyStructMyEnumD(in, current);
        }
        case 46:
        {
            return _iceD_opMyStructMyEnumDS(in, current);
        }
        case 47:
        {
            return _iceD_opNonmutating(in, current);
        }
        case 48:
        {
            return _iceD_opShort1(in, current);
        }
        case 49:
        {
            return _iceD_opShortIntD(in, current);
        }
        case 50:
        {
            return _iceD_opShortIntDS(in, current);
        }
        case 51:
        {
            return _iceD_opShortIntLong(in, current);
        }
        case 52:
        {
            return _iceD_opShortIntLongS(in, current);
        }
        case 53:
        {
            return _iceD_opShortIntLongSS(in, current);
        }
        case 54:
        {
            return _iceD_opShortShortSD(in, current);
        }
        case 55:
        {
            return _iceD_opString(in, current);
        }
        case 56:
        {
            return _iceD_opString1(in, current);
        }
        case 57:
        {
            return _iceD_opStringDoubleSD(in, current);
        }
        case 58:
        {
            return _iceD_opStringFloatSD(in, current);
        }
        case 59:
        {
            return _iceD_opStringLiterals(in, current);
        }
        case 60:
        {
            return _iceD_opStringMyEnumD(in, current);
        }
        case 61:
        {
            return _iceD_opStringMyEnumDS(in, current);
        }
        case 62:
        {
            return _iceD_opStringS(in, current);
        }
        case 63:
        {
            return _iceD_opStringS1(in, current);
        }
        case 64:
        {
            return _iceD_opStringS2(in, current);
        }
        case 65:
        {
            return _iceD_opStringSS(in, current);
        }
        case 66:
        {
            return _iceD_opStringSSS(in, current);
        }
        case 67:
        {
            return _iceD_opStringStringD(in, current);
        }
        case 68:
        {
            return _iceD_opStringStringDS(in, current);
        }
        case 69:
        {
            return _iceD_opStringStringSD(in, current);
        }
        case 70:
        {
            return _iceD_opStruct(in, current);
        }
        case 71:
        {
            return _iceD_opVoid(in, current);
        }
        case 72:
        {
            return _iceD_opWStringLiterals(in, current);
        }
        case 73:
        {
            return _iceD_shutdown(in, current);
        }
        case 74:
        {
            return _iceD_supportsCompress(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::MyDerivedClass::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyDerivedClass_ids, iceC_Test_MyDerivedClass_ids + 3, s);
}

::std::vector<::std::string>
Test::MyDerivedClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MyDerivedClass_ids[0], &iceC_Test_MyDerivedClass_ids[3]);
}

::std::string
Test::MyDerivedClass::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyDerivedClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyDerivedClass";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MyDerivedClass::_iceD_opDerived(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->opDerived(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyDerivedClass::_iceD_opMyClass1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<MyClass1> iceP_opMyClass1;
    istr->readAll(iceP_opMyClass1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<MyClass1> ret = this->opMyClass1(::std::move(iceP_opMyClass1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyDerivedClass::_iceD_opMyStruct1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    MyStruct1 iceP_opMyStruct1;
    istr->readAll(iceP_opMyStruct1);
    inS.endReadParams();
    MyStruct1 ret = this->opMyStruct1(::std::move(iceP_opMyStruct1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyDerivedClass::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MyDerivedClass_ops, iceC_Test_MyDerivedClass_ops + 78, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MyDerivedClass_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opBool(in, current);
        }
        case 5:
        {
            return _iceD_opBoolBoolSD(in, current);
        }
        case 6:
        {
            return _iceD_opBoolS(in, current);
        }
        case 7:
        {
            return _iceD_opBoolSS(in, current);
        }
        case 8:
        {
            return _iceD_opByte(in, current);
        }
        case 9:
        {
            return _iceD_opByte1(in, current);
        }
        case 10:
        {
            return _iceD_opByteBoolD(in, current);
        }
        case 11:
        {
            return _iceD_opByteBoolD1(in, current);
        }
        case 12:
        {
            return _iceD_opByteBoolD2(in, current);
        }
        case 13:
        {
            return _iceD_opByteBoolDS(in, current);
        }
        case 14:
        {
            return _iceD_opByteByteSD(in, current);
        }
        case 15:
        {
            return _iceD_opByteS(in, current);
        }
        case 16:
        {
            return _iceD_opByteSOneway(in, current);
        }
        case 17:
        {
            return _iceD_opByteSOnewayCallCount(in, current);
        }
        case 18:
        {
            return _iceD_opByteSS(in, current);
        }
        case 19:
        {
            return _iceD_opContext(in, current);
        }
        case 20:
        {
            return _iceD_opDerived(in, current);
        }
        case 21:
        {
            return _iceD_opDouble1(in, current);
        }
        case 22:
        {
            return _iceD_opDoubleMarshaling(in, current);
        }
        case 23:
        {
            return _iceD_opFloat1(in, current);
        }
        case 24:
        {
            return _iceD_opFloatDouble(in, current);
        }
        case 25:
        {
            return _iceD_opFloatDoubleS(in, current);
        }
        case 26:
        {
            return _iceD_opFloatDoubleSS(in, current);
        }
        case 27:
        {
            return _iceD_opIdempotent(in, current);
        }
        case 28:
        {
            return _iceD_opInt1(in, current);
        }
        case 29:
        {
            return _iceD_opIntIntSD(in, current);
        }
        case 30:
        {
            return _iceD_opIntS(in, current);
        }
        case 31:
        {
            return _iceD_opLong1(in, current);
        }
        case 32:
        {
            return _iceD_opLongFloatD(in, current);
        }
        case 33:
        {
            return _iceD_opLongFloatDS(in, current);
        }
        case 34:
        {
            return _iceD_opLongLongSD(in, current);
        }
        case 35:
        {
            return _iceD_opMDict1(in, current);
        }
        case 36:
        {
            return _iceD_opMDict2(in, current);
        }
        case 37:
        {
            return _iceD_opMSeq1(in, current);
        }
        case 38:
        {
            return _iceD_opMSeq2(in, current);
        }
        case 39:
        {
            return _iceD_opMStruct1(in, current);
        }
        case 40:
        {
            return _iceD_opMStruct2(in, current);
        }
        case 41:
        {
            return _iceD_opMyClass(in, current);
        }
        case 42:
        {
            return _iceD_opMyClass1(in, current);
        }
        case 43:
        {
            return _iceD_opMyEnum(in, current);
        }
        case 44:
        {
            return _iceD_opMyEnumMyEnumSD(in, current);
        }
        case 45:
        {
            return _iceD_opMyEnumStringD(in, current);
        }
        case 46:
        {
            return _iceD_opMyEnumStringDS(in, current);
        }
        case 47:
        {
            return _iceD_opMyStruct1(in, current);
        }
        case 48:
        {
            return _iceD_opMyStructMyEnumD(in, current);
        }
        case 49:
        {
            return _iceD_opMyStructMyEnumDS(in, current);
        }
        case 50:
        {
            return _iceD_opNonmutating(in, current);
        }
        case 51:
        {
            return _iceD_opShort1(in, current);
        }
        case 52:
        {
            return _iceD_opShortIntD(in, current);
        }
        case 53:
        {
            return _iceD_opShortIntDS(in, current);
        }
        case 54:
        {
            return _iceD_opShortIntLong(in, current);
        }
        case 55:
        {
            return _iceD_opShortIntLongS(in, current);
        }
        case 56:
        {
            return _iceD_opShortIntLongSS(in, current);
        }
        case 57:
        {
            return _iceD_opShortShortSD(in, current);
        }
        case 58:
        {
            return _iceD_opString(in, current);
        }
        case 59:
        {
            return _iceD_opString1(in, current);
        }
        case 60:
        {
            return _iceD_opStringDoubleSD(in, current);
        }
        case 61:
        {
            return _iceD_opStringFloatSD(in, current);
        }
        case 62:
        {
            return _iceD_opStringLiterals(in, current);
        }
        case 63:
        {
            return _iceD_opStringMyEnumD(in, current);
        }
        case 64:
        {
            return _iceD_opStringMyEnumDS(in, current);
        }
        case 65:
        {
            return _iceD_opStringS(in, current);
        }
        case 66:
        {
            return _iceD_opStringS1(in, current);
        }
        case 67:
        {
            return _iceD_opStringS2(in, current);
        }
        case 68:
        {
            return _iceD_opStringSS(in, current);
        }
        case 69:
        {
            return _iceD_opStringSSS(in, current);
        }
        case 70:
        {
            return _iceD_opStringStringD(in, current);
        }
        case 71:
        {
            return _iceD_opStringStringDS(in, current);
        }
        case 72:
        {
            return _iceD_opStringStringSD(in, current);
        }
        case 73:
        {
            return _iceD_opStruct(in, current);
        }
        case 74:
        {
            return _iceD_opVoid(in, current);
        }
        case 75:
        {
            return _iceD_opWStringLiterals(in, current);
        }
        case 76:
        {
            return _iceD_shutdown(in, current);
        }
        case 77:
        {
            return _iceD_supportsCompress(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test2::MyDerivedClass::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test2_MyDerivedClass_ids, iceC_Test2_MyDerivedClass_ids + 3, s);
}

::std::vector<::std::string>
Test2::MyDerivedClass::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test2_MyDerivedClass_ids[0], &iceC_Test2_MyDerivedClass_ids[3]);
}

::std::string
Test2::MyDerivedClass::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test2::MyDerivedClass::ice_staticId()
{
    static const ::std::string typeId = "::Test2::MyDerivedClass";
    return typeId;
}

/// \cond INTERNAL
bool
Test2::MyDerivedClass::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test2_MyDerivedClass_ops, iceC_Test2_MyDerivedClass_ops + 75, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test2_MyDerivedClass_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opBool(in, current);
        }
        case 5:
        {
            return _iceD_opBoolBoolSD(in, current);
        }
        case 6:
        {
            return _iceD_opBoolS(in, current);
        }
        case 7:
        {
            return _iceD_opBoolSS(in, current);
        }
        case 8:
        {
            return _iceD_opByte(in, current);
        }
        case 9:
        {
            return _iceD_opByte1(in, current);
        }
        case 10:
        {
            return _iceD_opByteBoolD(in, current);
        }
        case 11:
        {
            return _iceD_opByteBoolD1(in, current);
        }
        case 12:
        {
            return _iceD_opByteBoolD2(in, current);
        }
        case 13:
        {
            return _iceD_opByteBoolDS(in, current);
        }
        case 14:
        {
            return _iceD_opByteByteSD(in, current);
        }
        case 15:
        {
            return _iceD_opByteS(in, current);
        }
        case 16:
        {
            return _iceD_opByteSOneway(in, current);
        }
        case 17:
        {
            return _iceD_opByteSOnewayCallCount(in, current);
        }
        case 18:
        {
            return _iceD_opByteSS(in, current);
        }
        case 19:
        {
            return _iceD_opContext(in, current);
        }
        case 20:
        {
            return _iceD_opDouble1(in, current);
        }
        case 21:
        {
            return _iceD_opDoubleMarshaling(in, current);
        }
        case 22:
        {
            return _iceD_opFloat1(in, current);
        }
        case 23:
        {
            return _iceD_opFloatDouble(in, current);
        }
        case 24:
        {
            return _iceD_opFloatDoubleS(in, current);
        }
        case 25:
        {
            return _iceD_opFloatDoubleSS(in, current);
        }
        case 26:
        {
            return _iceD_opIdempotent(in, current);
        }
        case 27:
        {
            return _iceD_opInt1(in, current);
        }
        case 28:
        {
            return _iceD_opIntIntSD(in, current);
        }
        case 29:
        {
            return _iceD_opIntS(in, current);
        }
        case 30:
        {
            return _iceD_opLong1(in, current);
        }
        case 31:
        {
            return _iceD_opLongFloatD(in, current);
        }
        case 32:
        {
            return _iceD_opLongFloatDS(in, current);
        }
        case 33:
        {
            return _iceD_opLongLongSD(in, current);
        }
        case 34:
        {
            return _iceD_opMDict1(in, current);
        }
        case 35:
        {
            return _iceD_opMDict2(in, current);
        }
        case 36:
        {
            return _iceD_opMSeq1(in, current);
        }
        case 37:
        {
            return _iceD_opMSeq2(in, current);
        }
        case 38:
        {
            return _iceD_opMStruct1(in, current);
        }
        case 39:
        {
            return _iceD_opMStruct2(in, current);
        }
        case 40:
        {
            return _iceD_opMyClass(in, current);
        }
        case 41:
        {
            return _iceD_opMyEnum(in, current);
        }
        case 42:
        {
            return _iceD_opMyEnumMyEnumSD(in, current);
        }
        case 43:
        {
            return _iceD_opMyEnumStringD(in, current);
        }
        case 44:
        {
            return _iceD_opMyEnumStringDS(in, current);
        }
        case 45:
        {
            return _iceD_opMyStructMyEnumD(in, current);
        }
        case 46:
        {
            return _iceD_opMyStructMyEnumDS(in, current);
        }
        case 47:
        {
            return _iceD_opNonmutating(in, current);
        }
        case 48:
        {
            return _iceD_opShort1(in, current);
        }
        case 49:
        {
            return _iceD_opShortIntD(in, current);
        }
        case 50:
        {
            return _iceD_opShortIntDS(in, current);
        }
        case 51:
        {
            return _iceD_opShortIntLong(in, current);
        }
        case 52:
        {
            return _iceD_opShortIntLongS(in, current);
        }
        case 53:
        {
            return _iceD_opShortIntLongSS(in, current);
        }
        case 54:
        {
            return _iceD_opShortShortSD(in, current);
        }
        case 55:
        {
            return _iceD_opString(in, current);
        }
        case 56:
        {
            return _iceD_opString1(in, current);
        }
        case 57:
        {
            return _iceD_opStringDoubleSD(in, current);
        }
        case 58:
        {
            return _iceD_opStringFloatSD(in, current);
        }
        case 59:
        {
            return _iceD_opStringLiterals(in, current);
        }
        case 60:
        {
            return _iceD_opStringMyEnumD(in, current);
        }
        case 61:
        {
            return _iceD_opStringMyEnumDS(in, current);
        }
        case 62:
        {
            return _iceD_opStringS(in, current);
        }
        case 63:
        {
            return _iceD_opStringS1(in, current);
        }
        case 64:
        {
            return _iceD_opStringS2(in, current);
        }
        case 65:
        {
            return _iceD_opStringSS(in, current);
        }
        case 66:
        {
            return _iceD_opStringSSS(in, current);
        }
        case 67:
        {
            return _iceD_opStringStringD(in, current);
        }
        case 68:
        {
            return _iceD_opStringStringDS(in, current);
        }
        case 69:
        {
            return _iceD_opStringStringSD(in, current);
        }
        case 70:
        {
            return _iceD_opStruct(in, current);
        }
        case 71:
        {
            return _iceD_opVoid(in, current);
        }
        case 72:
        {
            return _iceD_opWStringLiterals(in, current);
        }
        case 73:
        {
            return _iceD_shutdown(in, current);
        }
        case 74:
        {
            return _iceD_supportsCompress(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::MyClass1::~MyClass1()
{
}

const ::std::string&
Test::MyClass1::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyClass1";
    return typeId;
}

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyClass_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_supportsCompress(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_supportsCompress_name);
    outAsync->invoke(iceC_Test_MyClass_supportsCompress_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opVoid(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyClass_opVoid_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByte(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpByteResult>>& outAsync, ::Ice::Byte iceP_p1, ::Ice::Byte iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByte_name);
    outAsync->invoke(iceC_Test_MyClass_opByte_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpByteResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opBool(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpBoolResult>>& outAsync, bool iceP_p1, bool iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opBool_name);
    outAsync->invoke(iceC_Test_MyClass_opBool_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpBoolResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opShortIntLong(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpShortIntLongResult>>& outAsync, short iceP_p1, int iceP_p2, long long int iceP_p3, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortIntLong_name);
    outAsync->invoke(iceC_Test_MyClass_opShortIntLong_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2, iceP_p3);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpShortIntLongResult v;
            istr->readAll(v.p4, v.p5, v.p6, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opFloatDouble(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpFloatDoubleResult>>& outAsync, float iceP_p1, double iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opFloatDouble_name);
    outAsync->invoke(iceC_Test_MyClass_opFloatDouble_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpFloatDoubleResult v;
            istr->readAll(v.p3, v.p4, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringResult>>& outAsync, const ::std::string& iceP_p1, const ::std::string& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opString_name);
    outAsync->invoke(iceC_Test_MyClass_opString_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMyEnum(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMyEnumResult>>& outAsync, MyEnum iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyEnum_name);
    outAsync->invoke(iceC_Test_MyClass_opMyEnum_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMyEnumResult v;
            istr->readAll(v.p2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMyClass(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMyClassResult>>& outAsync, const ::std::shared_ptr<MyClassPrx>& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyClass_name);
    outAsync->invoke(iceC_Test_MyClass_opMyClass_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMyClassResult v;
            istr->readAll(v.p2, v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStructResult>>& outAsync, const Structure& iceP_p1, const Structure& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStruct_name);
    outAsync->invoke(iceC_Test_MyClass_opStruct_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStructResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpByteSResult>>& outAsync, const ByteS& iceP_p1, const ByteS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteS_name);
    outAsync->invoke(iceC_Test_MyClass_opByteS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpByteSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opBoolS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpBoolSResult>>& outAsync, const BoolS& iceP_p1, const BoolS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opBoolS_name);
    outAsync->invoke(iceC_Test_MyClass_opBoolS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpBoolSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opShortIntLongS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpShortIntLongSResult>>& outAsync, const ShortS& iceP_p1, const IntS& iceP_p2, const LongS& iceP_p3, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortIntLongS_name);
    outAsync->invoke(iceC_Test_MyClass_opShortIntLongS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2, iceP_p3);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpShortIntLongSResult v;
            istr->readAll(v.p4, v.p5, v.p6, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opFloatDoubleS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpFloatDoubleSResult>>& outAsync, const FloatS& iceP_p1, const DoubleS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opFloatDoubleS_name);
    outAsync->invoke(iceC_Test_MyClass_opFloatDoubleS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpFloatDoubleSResult v;
            istr->readAll(v.p3, v.p4, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringSResult>>& outAsync, const StringS& iceP_p1, const StringS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringS_name);
    outAsync->invoke(iceC_Test_MyClass_opStringS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpByteSSResult>>& outAsync, const ByteSS& iceP_p1, const ByteSS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteSS_name);
    outAsync->invoke(iceC_Test_MyClass_opByteSS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpByteSSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opBoolSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpBoolSSResult>>& outAsync, const BoolSS& iceP_p1, const BoolSS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opBoolSS_name);
    outAsync->invoke(iceC_Test_MyClass_opBoolSS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpBoolSSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opShortIntLongSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpShortIntLongSSResult>>& outAsync, const ShortSS& iceP_p1, const IntSS& iceP_p2, const LongSS& iceP_p3, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortIntLongSS_name);
    outAsync->invoke(iceC_Test_MyClass_opShortIntLongSS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2, iceP_p3);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpShortIntLongSSResult v;
            istr->readAll(v.p4, v.p5, v.p6, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opFloatDoubleSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpFloatDoubleSSResult>>& outAsync, const FloatSS& iceP_p1, const DoubleSS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opFloatDoubleSS_name);
    outAsync->invoke(iceC_Test_MyClass_opFloatDoubleSS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpFloatDoubleSSResult v;
            istr->readAll(v.p3, v.p4, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringSSResult>>& outAsync, const StringSS& iceP_p1, const StringSS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringSS_name);
    outAsync->invoke(iceC_Test_MyClass_opStringSS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringSSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringSSS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringSSSResult>>& outAsync, const StringSSS& iceP_p1, const StringSSS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringSSS_name);
    outAsync->invoke(iceC_Test_MyClass_opStringSSS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringSSSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteBoolD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpByteBoolDResult>>& outAsync, const ByteBoolD& iceP_p1, const ByteBoolD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteBoolD_name);
    outAsync->invoke(iceC_Test_MyClass_opByteBoolD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpByteBoolDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opShortIntD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpShortIntDResult>>& outAsync, const ShortIntD& iceP_p1, const ShortIntD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortIntD_name);
    outAsync->invoke(iceC_Test_MyClass_opShortIntD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpShortIntDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLongFloatD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLongFloatDResult>>& outAsync, const LongFloatD& iceP_p1, const LongFloatD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLongFloatD_name);
    outAsync->invoke(iceC_Test_MyClass_opLongFloatD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLongFloatDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringStringD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringStringDResult>>& outAsync, const StringStringD& iceP_p1, const StringStringD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringStringD_name);
    outAsync->invoke(iceC_Test_MyClass_opStringStringD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringStringDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringMyEnumD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringMyEnumDResult>>& outAsync, const StringMyEnumD& iceP_p1, const StringMyEnumD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringMyEnumD_name);
    outAsync->invoke(iceC_Test_MyClass_opStringMyEnumD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringMyEnumDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMyEnumStringD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMyEnumStringDResult>>& outAsync, const MyEnumStringD& iceP_p1, const MyEnumStringD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyEnumStringD_name);
    outAsync->invoke(iceC_Test_MyClass_opMyEnumStringD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMyEnumStringDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMyStructMyEnumD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMyStructMyEnumDResult>>& outAsync, const MyStructMyEnumD& iceP_p1, const MyStructMyEnumD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyStructMyEnumD_name);
    outAsync->invoke(iceC_Test_MyClass_opMyStructMyEnumD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMyStructMyEnumDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteBoolDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpByteBoolDSResult>>& outAsync, const ByteBoolDS& iceP_p1, const ByteBoolDS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteBoolDS_name);
    outAsync->invoke(iceC_Test_MyClass_opByteBoolDS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpByteBoolDSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opShortIntDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpShortIntDSResult>>& outAsync, const ShortIntDS& iceP_p1, const ShortIntDS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortIntDS_name);
    outAsync->invoke(iceC_Test_MyClass_opShortIntDS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpShortIntDSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLongFloatDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLongFloatDSResult>>& outAsync, const LongFloatDS& iceP_p1, const LongFloatDS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLongFloatDS_name);
    outAsync->invoke(iceC_Test_MyClass_opLongFloatDS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLongFloatDSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringStringDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringStringDSResult>>& outAsync, const StringStringDS& iceP_p1, const StringStringDS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringStringDS_name);
    outAsync->invoke(iceC_Test_MyClass_opStringStringDS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringStringDSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringMyEnumDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringMyEnumDSResult>>& outAsync, const StringMyEnumDS& iceP_p1, const StringMyEnumDS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringMyEnumDS_name);
    outAsync->invoke(iceC_Test_MyClass_opStringMyEnumDS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringMyEnumDSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMyEnumStringDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMyEnumStringDSResult>>& outAsync, const MyEnumStringDS& iceP_p1, const MyEnumStringDS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyEnumStringDS_name);
    outAsync->invoke(iceC_Test_MyClass_opMyEnumStringDS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMyEnumStringDSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMyStructMyEnumDS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMyStructMyEnumDSResult>>& outAsync, const MyStructMyEnumDS& iceP_p1, const MyStructMyEnumDS& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyStructMyEnumDS_name);
    outAsync->invoke(iceC_Test_MyClass_opMyStructMyEnumDS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMyStructMyEnumDSResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteByteSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpByteByteSDResult>>& outAsync, const ByteByteSD& iceP_p1, const ByteByteSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteByteSD_name);
    outAsync->invoke(iceC_Test_MyClass_opByteByteSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpByteByteSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opBoolBoolSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpBoolBoolSDResult>>& outAsync, const BoolBoolSD& iceP_p1, const BoolBoolSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opBoolBoolSD_name);
    outAsync->invoke(iceC_Test_MyClass_opBoolBoolSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpBoolBoolSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opShortShortSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpShortShortSDResult>>& outAsync, const ShortShortSD& iceP_p1, const ShortShortSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShortShortSD_name);
    outAsync->invoke(iceC_Test_MyClass_opShortShortSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpShortShortSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opIntIntSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpIntIntSDResult>>& outAsync, const IntIntSD& iceP_p1, const IntIntSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opIntIntSD_name);
    outAsync->invoke(iceC_Test_MyClass_opIntIntSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpIntIntSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLongLongSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpLongLongSDResult>>& outAsync, const LongLongSD& iceP_p1, const LongLongSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLongLongSD_name);
    outAsync->invoke(iceC_Test_MyClass_opLongLongSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpLongLongSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringFloatSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringFloatSDResult>>& outAsync, const StringFloatSD& iceP_p1, const StringFloatSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringFloatSD_name);
    outAsync->invoke(iceC_Test_MyClass_opStringFloatSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringFloatSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringDoubleSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringDoubleSDResult>>& outAsync, const StringDoubleSD& iceP_p1, const StringDoubleSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringDoubleSD_name);
    outAsync->invoke(iceC_Test_MyClass_opStringDoubleSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringDoubleSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringStringSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpStringStringSDResult>>& outAsync, const StringStringSD& iceP_p1, const StringStringSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringStringSD_name);
    outAsync->invoke(iceC_Test_MyClass_opStringStringSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpStringStringSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMyEnumMyEnumSD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMyEnumMyEnumSDResult>>& outAsync, const MyEnumMyEnumSD& iceP_p1, const MyEnumMyEnumSD& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMyEnumMyEnumSD_name);
    outAsync->invoke(iceC_Test_MyClass_opMyEnumMyEnumSD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMyEnumMyEnumSDResult v;
            istr->readAll(v.p3, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opIntS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::IntS>>& outAsync, const IntS& iceP_s, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opIntS_name);
    outAsync->invoke(iceC_Test_MyClass_opIntS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteSOneway(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ByteS& iceP_s, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyClass_opByteSOneway_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteSOnewayCallCount(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteSOnewayCallCount_name);
    outAsync->invoke(iceC_Test_MyClass_opByteSOnewayCallCount_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opContext(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Ice::Context>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opContext_name);
    outAsync->invoke(iceC_Test_MyClass_opContext_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opDoubleMarshaling(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, double iceP_p1, const DoubleS& iceP_p2, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyClass_opDoubleMarshaling_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opIdempotent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyClass_opIdempotent_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opNonmutating(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyClass_opNonmutating_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByte1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Ice::Byte>>& outAsync, ::Ice::Byte iceP_opByte1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByte1_name);
    outAsync->invoke(iceC_Test_MyClass_opByte1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opByte1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opShort1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<short>>& outAsync, short iceP_opShort1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opShort1_name);
    outAsync->invoke(iceC_Test_MyClass_opShort1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opShort1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opInt1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_opInt1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opInt1_name);
    outAsync->invoke(iceC_Test_MyClass_opInt1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opInt1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opLong1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<long long int>>& outAsync, long long int iceP_opLong1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opLong1_name);
    outAsync->invoke(iceC_Test_MyClass_opLong1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opLong1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opFloat1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<float>>& outAsync, float iceP_opFloat1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opFloat1_name);
    outAsync->invoke(iceC_Test_MyClass_opFloat1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opFloat1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opDouble1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<double>>& outAsync, double iceP_opDouble1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opDouble1_name);
    outAsync->invoke(iceC_Test_MyClass_opDouble1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opDouble1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opString1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::string& iceP_opString1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opString1_name);
    outAsync->invoke(iceC_Test_MyClass_opString1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opString1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringS1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::StringS>>& outAsync, const StringS& iceP_opStringS1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringS1_name);
    outAsync->invoke(iceC_Test_MyClass_opStringS1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opStringS1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteBoolD1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::ByteBoolD>>& outAsync, const ByteBoolD& iceP_opByteBoolD1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteBoolD1_name);
    outAsync->invoke(iceC_Test_MyClass_opByteBoolD1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opByteBoolD1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringS2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::StringS>>& outAsync, const StringS& iceP_stringS, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringS2_name);
    outAsync->invoke(iceC_Test_MyClass_opStringS2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_stringS);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opByteBoolD2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::ByteBoolD>>& outAsync, const ByteBoolD& iceP_byteBoolD, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opByteBoolD2_name);
    outAsync->invoke(iceC_Test_MyClass_opByteBoolD2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_byteBoolD);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opStringLiterals(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::StringS>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opStringLiterals_name);
    outAsync->invoke(iceC_Test_MyClass_opStringLiterals_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opWStringLiterals(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::WStringS>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opWStringLiterals_name);
    outAsync->invoke(iceC_Test_MyClass_opWStringLiterals_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMStruct1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::Structure>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMStruct1_name);
    outAsync->invoke(iceC_Test_MyClass_opMStruct1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMStruct2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMStruct2Result>>& outAsync, const Structure& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMStruct2_name);
    outAsync->invoke(iceC_Test_MyClass_opMStruct2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMStruct2Result v;
            istr->readAll(v.p2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMSeq1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::StringS>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMSeq1_name);
    outAsync->invoke(iceC_Test_MyClass_opMSeq1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMSeq2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMSeq2Result>>& outAsync, const StringS& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMSeq2_name);
    outAsync->invoke(iceC_Test_MyClass_opMSeq2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMSeq2Result v;
            istr->readAll(v.p2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMDict1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::StringStringD>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMDict1_name);
    outAsync->invoke(iceC_Test_MyClass_opMDict1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyClassPrx::_iceI_opMDict2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpMDict2Result>>& outAsync, const StringStringD& iceP_p1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyClass_opMDict2_name);
    outAsync->invoke(iceC_Test_MyClass_opMDict2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            MyClass::OpMDict2Result v;
            istr->readAll(v.p2, v.returnValue);
            return v;
        });
}
/// \endcond

const ::std::string&
Test::MyClassPrx::ice_staticId()
{
    return MyClass::ice_staticId();
}

/// \cond INTERNAL
void
Test::MyDerivedClassPrx::_iceI_opDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_MyDerivedClass_opDerived_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyDerivedClassPrx::_iceI_opMyClass1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::MyClass1>>>& outAsync, const ::std::shared_ptr<MyClass1>& iceP_opMyClass1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyDerivedClass_opMyClass1_name);
    outAsync->invoke(iceC_Test_MyDerivedClass_opMyClass1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opMyClass1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<MyClass1> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyDerivedClassPrx::_iceI_opMyStruct1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::MyStruct1>>& outAsync, const MyStruct1& iceP_opMyStruct1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyDerivedClass_opMyStruct1_name);
    outAsync->invoke(iceC_Test_MyDerivedClass_opMyStruct1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_opMyStruct1);
        },
        nullptr);
}
/// \endcond

const ::std::string&
Test::MyDerivedClassPrx::ice_staticId()
{
    return MyDerivedClass::ice_staticId();
}

const ::std::string&
Test2::MyDerivedClassPrx::ice_staticId()
{
    return MyDerivedClass::ice_staticId();
}

namespace Ice
{
}
