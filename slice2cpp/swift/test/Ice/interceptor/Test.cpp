//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::InvalidInputException> iceC_Test_InvalidInputException_init("::Test::InvalidInputException");

const ::std::string iceC_Test_MyObject_ids[2] =
{
    "::Ice::Object",
    "::Test::MyObject"
};
const ::std::string iceC_Test_MyObject_ops[] =
{
    "add",
    "addWithRetry",
    "amdAdd",
    "amdAddWithRetry",
    "amdBadAdd",
    "amdNotExistAdd",
    "badAdd",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "notExistAdd"
};
const ::std::string iceC_Test_MyObject_add_name = "add";
const ::std::string iceC_Test_MyObject_addWithRetry_name = "addWithRetry";
const ::std::string iceC_Test_MyObject_badAdd_name = "badAdd";
const ::std::string iceC_Test_MyObject_notExistAdd_name = "notExistAdd";
const ::std::string iceC_Test_MyObject_amdAdd_name = "amdAdd";
const ::std::string iceC_Test_MyObject_amdAddWithRetry_name = "amdAddWithRetry";
const ::std::string iceC_Test_MyObject_amdBadAdd_name = "amdBadAdd";
const ::std::string iceC_Test_MyObject_amdNotExistAdd_name = "amdNotExistAdd";

}

::std::int32_t
Test::MyObjectPrx::add(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t>(true, this, &MyObjectPrx::_iceI_add, iceP_x, iceP_y, context).get();
}

::std::future<::std::int32_t>
Test::MyObjectPrx::addAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t, ::std::promise>(false, this, &MyObjectPrx::_iceI_add, iceP_x, iceP_y, context);
}

::std::function<void()>
Test::MyObjectPrx::addAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y,
                            ::std::function<void (::std::int32_t)> response,
                            ::std::function<void(::std::exception_ptr)> ex,
                            ::std::function<void(bool)> sent,
                            const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::int32_t>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_add, iceP_x, iceP_y, context);
}

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_add(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>& outAsync, ::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyObject_add_name);
    outAsync->invoke(iceC_Test_MyObject_add_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        nullptr);
}
/// \endcond

::std::int32_t
Test::MyObjectPrx::addWithRetry(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t>(true, this, &MyObjectPrx::_iceI_addWithRetry, iceP_x, iceP_y, context).get();
}

::std::future<::std::int32_t>
Test::MyObjectPrx::addWithRetryAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t, ::std::promise>(false, this, &MyObjectPrx::_iceI_addWithRetry, iceP_x, iceP_y, context);
}

::std::function<void()>
Test::MyObjectPrx::addWithRetryAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y,
                                     ::std::function<void (::std::int32_t)> response,
                                     ::std::function<void(::std::exception_ptr)> ex,
                                     ::std::function<void(bool)> sent,
                                     const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::int32_t>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_addWithRetry, iceP_x, iceP_y, context);
}

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_addWithRetry(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>& outAsync, ::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyObject_addWithRetry_name);
    outAsync->invoke(iceC_Test_MyObject_addWithRetry_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        nullptr);
}
/// \endcond

::std::int32_t
Test::MyObjectPrx::badAdd(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t>(true, this, &MyObjectPrx::_iceI_badAdd, iceP_x, iceP_y, context).get();
}

::std::future<::std::int32_t>
Test::MyObjectPrx::badAddAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t, ::std::promise>(false, this, &MyObjectPrx::_iceI_badAdd, iceP_x, iceP_y, context);
}

::std::function<void()>
Test::MyObjectPrx::badAddAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y,
                               ::std::function<void (::std::int32_t)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::int32_t>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_badAdd, iceP_x, iceP_y, context);
}

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_badAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>& outAsync, ::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyObject_badAdd_name);
    outAsync->invoke(iceC_Test_MyObject_badAdd_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InvalidInputException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

::std::int32_t
Test::MyObjectPrx::notExistAdd(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t>(true, this, &MyObjectPrx::_iceI_notExistAdd, iceP_x, iceP_y, context).get();
}

::std::future<::std::int32_t>
Test::MyObjectPrx::notExistAddAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t, ::std::promise>(false, this, &MyObjectPrx::_iceI_notExistAdd, iceP_x, iceP_y, context);
}

::std::function<void()>
Test::MyObjectPrx::notExistAddAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y,
                                    ::std::function<void (::std::int32_t)> response,
                                    ::std::function<void(::std::exception_ptr)> ex,
                                    ::std::function<void(bool)> sent,
                                    const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::int32_t>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_notExistAdd, iceP_x, iceP_y, context);
}

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_notExistAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>& outAsync, ::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyObject_notExistAdd_name);
    outAsync->invoke(iceC_Test_MyObject_notExistAdd_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        nullptr);
}
/// \endcond

::std::int32_t
Test::MyObjectPrx::amdAdd(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t>(true, this, &MyObjectPrx::_iceI_amdAdd, iceP_x, iceP_y, context).get();
}

::std::future<::std::int32_t>
Test::MyObjectPrx::amdAddAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t, ::std::promise>(false, this, &MyObjectPrx::_iceI_amdAdd, iceP_x, iceP_y, context);
}

::std::function<void()>
Test::MyObjectPrx::amdAddAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y,
                               ::std::function<void (::std::int32_t)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::int32_t>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_amdAdd, iceP_x, iceP_y, context);
}

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_amdAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>& outAsync, ::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyObject_amdAdd_name);
    outAsync->invoke(iceC_Test_MyObject_amdAdd_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        nullptr);
}
/// \endcond

::std::int32_t
Test::MyObjectPrx::amdAddWithRetry(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t>(true, this, &MyObjectPrx::_iceI_amdAddWithRetry, iceP_x, iceP_y, context).get();
}

::std::future<::std::int32_t>
Test::MyObjectPrx::amdAddWithRetryAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t, ::std::promise>(false, this, &MyObjectPrx::_iceI_amdAddWithRetry, iceP_x, iceP_y, context);
}

::std::function<void()>
Test::MyObjectPrx::amdAddWithRetryAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y,
                                        ::std::function<void (::std::int32_t)> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::int32_t>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_amdAddWithRetry, iceP_x, iceP_y, context);
}

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_amdAddWithRetry(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>& outAsync, ::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyObject_amdAddWithRetry_name);
    outAsync->invoke(iceC_Test_MyObject_amdAddWithRetry_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        nullptr);
}
/// \endcond

::std::int32_t
Test::MyObjectPrx::amdBadAdd(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t>(true, this, &MyObjectPrx::_iceI_amdBadAdd, iceP_x, iceP_y, context).get();
}

::std::future<::std::int32_t>
Test::MyObjectPrx::amdBadAddAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t, ::std::promise>(false, this, &MyObjectPrx::_iceI_amdBadAdd, iceP_x, iceP_y, context);
}

::std::function<void()>
Test::MyObjectPrx::amdBadAddAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y,
                                  ::std::function<void (::std::int32_t)> response,
                                  ::std::function<void(::std::exception_ptr)> ex,
                                  ::std::function<void(bool)> sent,
                                  const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::int32_t>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_amdBadAdd, iceP_x, iceP_y, context);
}

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_amdBadAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>& outAsync, ::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyObject_amdBadAdd_name);
    outAsync->invoke(iceC_Test_MyObject_amdBadAdd_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InvalidInputException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

::std::int32_t
Test::MyObjectPrx::amdNotExistAdd(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t>(true, this, &MyObjectPrx::_iceI_amdNotExistAdd, iceP_x, iceP_y, context).get();
}

::std::future<::std::int32_t>
Test::MyObjectPrx::amdNotExistAddAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::std::int32_t, ::std::promise>(false, this, &MyObjectPrx::_iceI_amdNotExistAdd, iceP_x, iceP_y, context);
}

::std::function<void()>
Test::MyObjectPrx::amdNotExistAddAsync(::std::int32_t iceP_x, ::std::int32_t iceP_y,
                                       ::std::function<void (::std::int32_t)> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::std::int32_t>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_amdNotExistAdd, iceP_x, iceP_y, context);
}

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_amdNotExistAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>& outAsync, ::std::int32_t iceP_x, ::std::int32_t iceP_y, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_MyObject_amdNotExistAdd_name);
    outAsync->invoke(iceC_Test_MyObject_amdNotExistAdd_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        nullptr);
}
/// \endcond

const ::std::string&
Test::MyObjectPrx::ice_staticId()
{
    return MyObject::ice_staticId();
}

Test::InvalidInputException::~InvalidInputException()
{
}

const ::std::string&
Test::InvalidInputException::ice_staticId()
{
    static const ::std::string typeId = "::Test::InvalidInputException";
    return typeId;
}

bool
Test::MyObject::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyObject_ids, iceC_Test_MyObject_ids + 2, s);
}

::std::vector<::std::string>
Test::MyObject::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MyObject_ids[0], &iceC_Test_MyObject_ids[2]);
}

::std::string
Test::MyObject::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyObject::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyObject";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MyObject::_iceD_add(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::int32_t iceP_x;
    ::std::int32_t iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    ::std::int32_t ret = this->add(iceP_x, iceP_y, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_addWithRetry(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::int32_t iceP_x;
    ::std::int32_t iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    ::std::int32_t ret = this->addWithRetry(iceP_x, iceP_y, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_badAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::int32_t iceP_x;
    ::std::int32_t iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    ::std::int32_t ret = this->badAdd(iceP_x, iceP_y, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_notExistAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::int32_t iceP_x;
    ::std::int32_t iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    ::std::int32_t ret = this->notExistAdd(iceP_x, iceP_y, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_amdAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::int32_t iceP_x;
    ::std::int32_t iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](::std::int32_t ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->amdAddAsync(iceP_x, iceP_y, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_amdAddWithRetry(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::int32_t iceP_x;
    ::std::int32_t iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](::std::int32_t ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->amdAddWithRetryAsync(iceP_x, iceP_y, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_amdBadAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::int32_t iceP_x;
    ::std::int32_t iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](::std::int32_t ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->amdBadAddAsync(iceP_x, iceP_y, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_amdNotExistAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::int32_t iceP_x;
    ::std::int32_t iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](::std::int32_t ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->amdNotExistAddAsync(iceP_x, iceP_y, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MyObject_ops, iceC_Test_MyObject_ops + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MyObject_ops)
    {
        case 0:
        {
            return _iceD_add(in, current);
        }
        case 1:
        {
            return _iceD_addWithRetry(in, current);
        }
        case 2:
        {
            return _iceD_amdAdd(in, current);
        }
        case 3:
        {
            return _iceD_amdAddWithRetry(in, current);
        }
        case 4:
        {
            return _iceD_amdBadAdd(in, current);
        }
        case 5:
        {
            return _iceD_amdNotExistAdd(in, current);
        }
        case 6:
        {
            return _iceD_badAdd(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        case 11:
        {
            return _iceD_notExistAdd(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
