//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

class MyObject;
class MyObjectPrx;

}

namespace Test
{

}

namespace Test
{

class MyObjectPrx : public ::Ice::Proxy<MyObjectPrx, ::Ice::ObjectPrx>
{
public:

    int add(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<int> addAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    addAsync(int x, int y,
             ::std::function<void(int)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_add(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int addWithRetry(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<int> addWithRetryAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    addWithRetryAsync(int x, int y,
                      ::std::function<void(int)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_addWithRetry(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int badAdd(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<int> badAddAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    badAddAsync(int x, int y,
                ::std::function<void(int)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_badAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int notExistAdd(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<int> notExistAddAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    notExistAddAsync(int x, int y,
                     ::std::function<void(int)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_notExistAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int amdAdd(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<int> amdAddAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    amdAddAsync(int x, int y,
                ::std::function<void(int)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_amdAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int amdAddWithRetry(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<int> amdAddWithRetryAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    amdAddWithRetryAsync(int x, int y,
                         ::std::function<void(int)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_amdAddWithRetry(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int amdBadAdd(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<int> amdBadAddAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    amdBadAddAsync(int x, int y,
                   ::std::function<void(int)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_amdBadAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int amdNotExistAdd(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::future<int> amdNotExistAddAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext);

    ::std::function<void()>
    amdNotExistAddAsync(int x, int y,
                        ::std::function<void(int)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext);

    /// \cond INTERNAL
    void _iceI_amdNotExistAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit MyObjectPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    MyObjectPrx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    MyObjectPrx() = default;
    /// \endcond
};

}

namespace Test
{

class InvalidInputException : public ::Ice::UserExceptionHelper<InvalidInputException, ::Ice::UserException>
{
public:

    virtual ~InvalidInputException();

    InvalidInputException(const InvalidInputException&) = default;

    InvalidInputException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    InvalidInputException(const ::std::string& message) :
        message(message)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(message);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string message;
};

/// \cond INTERNAL
static InvalidInputException _iceS_InvalidInputException_init;
/// \endcond

}

namespace Test
{

class MyObject : public virtual ::Ice::Object
{
public:

    using ProxyType = MyObjectPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual int add(int x, int y, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_add(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int addWithRetry(int x, int y, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_addWithRetry(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int badAdd(int x, int y, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_badAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int notExistAdd(int x, int y, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_notExistAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void amdAddAsync(int x, int y, ::std::function<void(int returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_amdAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void amdAddWithRetryAsync(int x, int y, ::std::function<void(int returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_amdAddWithRetry(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void amdBadAddAsync(int x, int y, ::std::function<void(int returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_amdBadAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void amdNotExistAddAsync(int x, int y, ::std::function<void(int returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_amdNotExistAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::Test::InvalidInputException, S>
{
    static void read(S* istr, ::Test::InvalidInputException& v)
    {
        istr->readAll(v.message);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using MyObjectPtr = ::std::shared_ptr<MyObject>;

using MyObjectPrxPtr = ::std::shared_ptr<MyObjectPrx>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
