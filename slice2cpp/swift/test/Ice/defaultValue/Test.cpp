//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::Test::Base> iceC_Test_Base_init("::Test::Base");
    const ::IceInternal::DefaultValueFactoryInit<::Test::Derived> iceC_Test_Derived_init("::Test::Derived");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::BaseEx> iceC_Test_BaseEx_init("::Test::BaseEx");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::DerivedEx> iceC_Test_DerivedEx_init("::Test::DerivedEx");
}

const char*
Test::Base::ice_staticId() noexcept
{
    return "::Test::Base";
}

const char*
Test::Base::ice_id() const noexcept
{
    return ice_staticId();
}

::Ice::ValuePtr
Test::Base::_iceCloneImpl() const
{
    return CloneEnabler<Base>::clone(*this);
}

void
Test::Base::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->boolFalse, this->boolTrue, this->b, this->s, this->i, this->l, this->f, this->d, this->str, this->noDefault, this->zeroI, this->zeroL, this->zeroF, this->zeroDotF, this->zeroD, this->zeroDotD);
    ostr->endSlice();
}

void
Test::Base::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->boolFalse, this->boolTrue, this->b, this->s, this->i, this->l, this->f, this->d, this->str, this->noDefault, this->zeroI, this->zeroL, this->zeroF, this->zeroDotF, this->zeroD, this->zeroDotD);
    istr->endSlice();
}

const char*
Test::Derived::ice_staticId() noexcept
{
    return "::Test::Derived";
}

const char*
Test::Derived::ice_id() const noexcept
{
    return ice_staticId();
}

::Ice::ValuePtr
Test::Derived::_iceCloneImpl() const
{
    return CloneEnabler<Derived>::clone(*this);
}

void
Test::Derived::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->c1, this->c2, this->c3, this->nc1, this->nc2, this->nc3);
    ostr->endSlice();
    Base::_iceWriteImpl(ostr);
}

void
Test::Derived::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->c1, this->c2, this->c3, this->nc1, this->nc2, this->nc3);
    istr->endSlice();
    Base::_iceReadImpl(istr);
}

const char*
Test::BaseEx::ice_staticId() noexcept
{
    return "::Test::BaseEx";
}

const char*
Test::BaseEx::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::BaseEx::ice_throw() const
{
    throw *this;
}

void
Test::BaseEx::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->boolFalse, this->boolTrue, this->b, this->s, this->i, this->l, this->f, this->d, this->str, this->noDefault, this->zeroI, this->zeroL, this->zeroF, this->zeroDotF, this->zeroD, this->zeroDotD);
    ostr->endSlice();
}

void
Test::BaseEx::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->boolFalse, this->boolTrue, this->b, this->s, this->i, this->l, this->f, this->d, this->str, this->noDefault, this->zeroI, this->zeroL, this->zeroF, this->zeroDotF, this->zeroD, this->zeroDotD);
    istr->endSlice();
}

const char*
Test::DerivedEx::ice_staticId() noexcept
{
    return "::Test::DerivedEx";
}

const char*
Test::DerivedEx::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::DerivedEx::ice_throw() const
{
    throw *this;
}

void
Test::DerivedEx::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->c1, this->c2, this->c3, this->nc1, this->nc2, this->nc3);
    ostr->endSlice();
    BaseEx::_writeImpl(ostr);
}

void
Test::DerivedEx::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->c1, this->c2, this->c3, this->nc1, this->nc2, this->nc3);
    istr->endSlice();
    BaseEx::_readImpl(istr);
}
