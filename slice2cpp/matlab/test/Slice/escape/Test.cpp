//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::classdef::_cpp_break::logical> iceC_classdef_break_logical_init("::classdef::break::logical");

const ::IceInternal::DefaultValueFactoryInit<::classdef::_cpp_break::_cpp_xor> iceC_classdef_break_xor_init("::classdef::break::xor");

const ::IceInternal::DefaultValueFactoryInit<::classdef::_cpp_break::_cpp_try> iceC_classdef_break_try_init("::classdef::break::try");

const ::IceInternal::DefaultValueFactoryInit<::classdef::_cpp_break::properties> iceC_classdef_break_properties_init("::classdef::break::properties");

const ::IceInternal::DefaultUserExceptionFactoryInit<::classdef::_cpp_break::persistent> iceC_classdef_break_persistent_init("::classdef::break::persistent");

const ::IceInternal::DefaultUserExceptionFactoryInit<::classdef::_cpp_break::global> iceC_classdef_break_global_init("::classdef::break::global");

const ::std::string iceC_classdef_break_elseif_ids[2] =
{
    "::Ice::Object",
    "::classdef::break::elseif"
};
const ::std::string iceC_classdef_break_elseif_ops[] =
{
    "checkedCast",
    "delete",
    "events",
    "function",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_classdef_break_elseif_events_name = "events";
const ::std::string iceC_classdef_break_elseif_function_name = "function";
const ::std::string iceC_classdef_break_elseif_delete_name = "delete";
const ::std::string iceC_classdef_break_elseif_checkedCast_name = "checkedCast";

}

classdef::_cpp_break::persistent::~persistent()
{
}

const ::std::string&
classdef::_cpp_break::persistent::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::persistent";
    return typeId;
}

/// \cond STREAM
bool
classdef::_cpp_break::persistent::_usesClasses() const
{
    return true;
}
/// \endcond

classdef::_cpp_break::global::~global()
{
}

const ::std::string&
classdef::_cpp_break::global::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::global";
    return typeId;
}

bool
classdef::_cpp_break::elseif::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_classdef_break_elseif_ids, iceC_classdef_break_elseif_ids + 2, s);
}

::std::vector<::std::string>
classdef::_cpp_break::elseif::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_classdef_break_elseif_ids[0], &iceC_classdef_break_elseif_ids[2]);
}

::std::string
classdef::_cpp_break::elseif::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
classdef::_cpp_break::elseif::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::elseif";
    return typeId;
}

/// \cond INTERNAL
bool
classdef::_cpp_break::elseif::_iceD_events(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->events(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
classdef::_cpp_break::elseif::_iceD_function(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->function(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
classdef::_cpp_break::elseif::_iceD_delete(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_delete(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
classdef::_cpp_break::elseif::_iceD_checkedCast(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->checkedCast(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
classdef::_cpp_break::elseif::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_classdef_break_elseif_ops, iceC_classdef_break_elseif_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_classdef_break_elseif_ops)
    {
        case 0:
        {
            return _iceD_checkedCast(in, current);
        }
        case 1:
        {
            return _iceD_delete(in, current);
        }
        case 2:
        {
            return _iceD_events(in, current);
        }
        case 3:
        {
            return _iceD_function(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

classdef::_cpp_break::logical::~logical()
{
}

const ::std::string&
classdef::_cpp_break::logical::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::logical";
    return typeId;
}

classdef::_cpp_break::_cpp_xor::~_cpp_xor()
{
}

const ::std::string&
classdef::_cpp_break::_cpp_xor::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::xor";
    return typeId;
}

classdef::_cpp_break::_cpp_try::~_cpp_try()
{
}

const ::std::string&
classdef::_cpp_break::_cpp_try::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::try";
    return typeId;
}

classdef::_cpp_break::properties::~properties()
{
}

const ::std::string&
classdef::_cpp_break::properties::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::properties";
    return typeId;
}

/// \cond INTERNAL
void
classdef::_cpp_break::elseifPrx::_iceI_events(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_classdef_break_elseif_events_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
classdef::_cpp_break::elseifPrx::_iceI_function(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_classdef_break_elseif_function_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
classdef::_cpp_break::elseifPrx::_iceI_delete(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_classdef_break_elseif_delete_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
classdef::_cpp_break::elseifPrx::_iceI_checkedCast(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_classdef_break_elseif_checkedCast_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
classdef::_cpp_break::elseifPrx::_newInstance() const
{
    return ::IceInternal::createProxy<elseifPrx>();
}
/// \endcond

const ::std::string&
classdef::_cpp_break::elseifPrx::ice_staticId()
{
    return elseif::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::classdef::_cpp_break::logical> iceC_classdef_break_logical_init("::classdef::break::logical");

const ::IceInternal::DefaultValueFactoryInit<::classdef::_cpp_break::_cpp_xor> iceC_classdef_break_xor_init("::classdef::break::xor");

const ::IceInternal::DefaultValueFactoryInit<::classdef::_cpp_break::_cpp_try> iceC_classdef_break_try_init("::classdef::break::try");

const ::IceInternal::DefaultValueFactoryInit<::classdef::_cpp_break::properties> iceC_classdef_break_properties_init("::classdef::break::properties");

const ::std::string iceC_classdef_break_elseif_events_name = "events";

const ::std::string iceC_classdef_break_elseif_function_name = "function";

const ::std::string iceC_classdef_break_elseif_delete_name = "delete";

const ::std::string iceC_classdef_break_elseif_checkedCast_name = "checkedCast";

}

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::classdef::_cpp_break::persistent> iceC_classdef_break_persistent_init("::classdef::break::persistent");

}

classdef::_cpp_break::persistent::persistent() :
    identifier("1"),
    message("2"),
    stack("3"),
    cause("4"),
    type("5")
{
}

classdef::_cpp_break::persistent::persistent(const ::std::string& identifier, const ::std::string& message, const ::std::string& stack, const ::std::string& cause, const ::std::string& type, const logicalPtr& end) :
    ::Ice::UserException(),
    identifier(identifier),
    message(message),
    stack(stack),
    cause(cause),
    type(type),
    end(end)
{
}
classdef::_cpp_break::persistent::~persistent()
{
}

::std::string
classdef::_cpp_break::persistent::ice_id() const
{
    return "::classdef::break::persistent";
}

classdef::_cpp_break::persistent*
classdef::_cpp_break::persistent::ice_clone() const
{
    return new persistent(*this);
}

void
classdef::_cpp_break::persistent::ice_throw() const
{
    throw *this;
}

bool
classdef::_cpp_break::persistent::_usesClasses() const
{
    return true;
}

/// \cond STREAM
void
classdef::_cpp_break::persistent::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::classdef::break::persistent", -1, true);
    ::Ice::StreamWriter< persistent, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
classdef::_cpp_break::persistent::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< persistent, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::classdef::_cpp_break::global> iceC_classdef_break_global_init("::classdef::break::global");

}

classdef::_cpp_break::global::global() :
    enumeration(1)
{
}

classdef::_cpp_break::global::global(const ::std::string& identifier, const ::std::string& message, const ::std::string& stack, const ::std::string& cause, const ::std::string& type, const logicalPtr& end, ::Ice::Int enumeration) :
    persistent(identifier, message, stack, cause, type, end),
    enumeration(enumeration)
{
}
classdef::_cpp_break::global::~global()
{
}

::std::string
classdef::_cpp_break::global::ice_id() const
{
    return "::classdef::break::global";
}

classdef::_cpp_break::global*
classdef::_cpp_break::global::ice_clone() const
{
    return new global(*this);
}

void
classdef::_cpp_break::global::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
classdef::_cpp_break::global::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::classdef::break::global", -1, false);
    ::Ice::StreamWriter< global, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    persistent::_writeImpl(ostr);
}

void
classdef::_cpp_break::global::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< global, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    persistent::_readImpl(istr);
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::classdef::_cpp_break::upCast(elseif* p) { return p; }

void
::IceProxy::classdef::_cpp_break::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< elseif>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new elseif;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::classdef::_cpp_break::elseif::_iceI_begin_events(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_classdef_break_elseif_events_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_classdef_break_elseif_events_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_classdef_break_elseif_events_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::classdef::_cpp_break::elseif::end_events(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_classdef_break_elseif_events_name);
}

::Ice::AsyncResultPtr
IceProxy::classdef::_cpp_break::elseif::_iceI_begin_function(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_classdef_break_elseif_function_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_classdef_break_elseif_function_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_classdef_break_elseif_function_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::classdef::_cpp_break::elseif::end_function(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_classdef_break_elseif_function_name);
}

::Ice::AsyncResultPtr
IceProxy::classdef::_cpp_break::elseif::_iceI_begin_delete(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_classdef_break_elseif_delete_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_classdef_break_elseif_delete_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_classdef_break_elseif_delete_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::classdef::_cpp_break::elseif::end_delete(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_classdef_break_elseif_delete_name);
}

::Ice::AsyncResultPtr
IceProxy::classdef::_cpp_break::elseif::_iceI_begin_checkedCast(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_classdef_break_elseif_checkedCast_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_classdef_break_elseif_checkedCast_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_classdef_break_elseif_checkedCast_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::classdef::_cpp_break::elseif::end_checkedCast(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_classdef_break_elseif_checkedCast_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::classdef::_cpp_break::elseif::_newInstance() const
{
    return new elseif;
}
/// \endcond

const ::std::string&
IceProxy::classdef::_cpp_break::elseif::ice_staticId()
{
    return ::classdef::_cpp_break::elseif::ice_staticId();
}

classdef::_cpp_break::elseif::~elseif()
{
}

namespace
{
const ::std::string iceC_classdef_break_elseif_ids[2] =
{
    "::Ice::Object",
    "::classdef::break::elseif"
};

}

bool
classdef::_cpp_break::elseif::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_classdef_break_elseif_ids, iceC_classdef_break_elseif_ids + 2, s);
}

::std::vector< ::std::string>
classdef::_cpp_break::elseif::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_classdef_break_elseif_ids[0], &iceC_classdef_break_elseif_ids[2]);
}

const ::std::string&
classdef::_cpp_break::elseif::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
classdef::_cpp_break::elseif::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::elseif";
    return typeId;
}

/// \cond INTERNAL
bool
classdef::_cpp_break::elseif::_iceD_events(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->events(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
classdef::_cpp_break::elseif::_iceD_function(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->function(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
classdef::_cpp_break::elseif::_iceD_delete(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_delete(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
classdef::_cpp_break::elseif::_iceD_checkedCast(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->checkedCast(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_classdef_break_elseif_all[] =
{
    "checkedCast",
    "delete",
    "events",
    "function",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
classdef::_cpp_break::elseif::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_classdef_break_elseif_all, iceC_classdef_break_elseif_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_classdef_break_elseif_all)
    {
        case 0:
        {
            return _iceD_checkedCast(in, current);
        }
        case 1:
        {
            return _iceD_delete(in, current);
        }
        case 2:
        {
            return _iceD_events(in, current);
        }
        case 3:
        {
            return _iceD_function(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

classdef::_cpp_break::logical::~logical()
{
}

const ::std::string&
classdef::_cpp_break::logical::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::logical";
    return typeId;
}

classdef::_cpp_break::_cpp_xor::~_cpp_xor()
{
}

const ::std::string&
classdef::_cpp_break::_cpp_xor::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::xor";
    return typeId;
}

classdef::_cpp_break::_cpp_try::~_cpp_try()
{
}

const ::std::string&
classdef::_cpp_break::_cpp_try::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::try";
    return typeId;
}

classdef::_cpp_break::properties::~properties()
{
}

const ::std::string&
classdef::_cpp_break::properties::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::properties";
    return typeId;
}

namespace Ice
{
}

#endif
