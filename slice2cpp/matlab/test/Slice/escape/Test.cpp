//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::classdef::break::logical> iceC_classdef_break_logical_init("::classdef::break::logical");
    const ::IceInternal::DefaultValueFactoryInit<::classdef::break::xor> iceC_classdef_break_xor_init("::classdef::break::xor");
    const ::IceInternal::DefaultValueFactoryInit<::classdef::break::try> iceC_classdef_break_try_init("::classdef::break::try");
    const ::IceInternal::DefaultValueFactoryInit<::classdef::break::properties> iceC_classdef_break_properties_init("::classdef::break::properties");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::classdef::break::persistent> iceC_classdef_break_persistent_init("::classdef::break::persistent");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::classdef::break::global> iceC_classdef_break_global_init("::classdef::break::global");
}

void
classdef::break::elseifPrx::events(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &elseifPrx::_iceI_events, context).get();
}

::std::future<void>
classdef::break::elseifPrx::eventsAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &elseifPrx::_iceI_events, context);
}

::std::function<void()>
classdef::break::elseifPrx::eventsAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &classdef::break::elseifPrx::_iceI_events, context);
}

void
classdef::break::elseifPrx::_iceI_events(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "events";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr);
}

void
classdef::break::elseifPrx::function(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &elseifPrx::_iceI_function, context).get();
}

::std::future<void>
classdef::break::elseifPrx::functionAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &elseifPrx::_iceI_function, context);
}

::std::function<void()>
classdef::break::elseifPrx::functionAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &classdef::break::elseifPrx::_iceI_function, context);
}

void
classdef::break::elseifPrx::_iceI_function(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "function";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr);
}

void
classdef::break::elseifPrx::delete(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &elseifPrx::_iceI_delete, context).get();
}

::std::future<void>
classdef::break::elseifPrx::deleteAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &elseifPrx::_iceI_delete, context);
}

::std::function<void()>
classdef::break::elseifPrx::deleteAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &classdef::break::elseifPrx::_iceI_delete, context);
}

void
classdef::break::elseifPrx::_iceI_delete(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "delete";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr);
}

void
classdef::break::elseifPrx::checkedCast(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &elseifPrx::_iceI_checkedCast, context).get();
}

::std::future<void>
classdef::break::elseifPrx::checkedCastAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &elseifPrx::_iceI_checkedCast, context);
}

::std::function<void()>
classdef::break::elseifPrx::checkedCastAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex, ::std::function<void(bool)> sent, const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(::std::move(response), ::std::move(ex), ::std::move(sent), this, &classdef::break::elseifPrx::_iceI_checkedCast, context);
}

void
classdef::break::elseifPrx::_iceI_checkedCast(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    static constexpr ::std::string_view operationName = "checkedCast";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::std::nullopt, context,
        nullptr,
        nullptr);
}

const char*
classdef::break::elseifPrx::ice_staticId() noexcept
{
    return "::classdef::break::elseif";
}

void
classdef::break::bitor::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "case = ", this->case);
    Ice::print(os << ", continue = ", this->continue);
    Ice::print(os << ", eq = ", this->eq);
    Ice::print(os << ", ne = ", this->ne);
}

::std::ostream&
classdef::break::operator<<(::std::ostream& os, const ::classdef::break::bitor& value)
{
    os << "classdef::break::bitor{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
classdef::break::logical::ice_staticId() noexcept
{
    return "::classdef::break::logical";
}

const char*
classdef::break::logical::ice_id() const noexcept
{
    return ice_staticId();
}

void
classdef::break::logical::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "else = ", this->else);
    Ice::print(os << ", for = ", this->for);
    Ice::print(os << ", int64 = ", this->int64);
}

::Ice::ValuePtr
classdef::break::logical::_iceCloneImpl() const
{
    return CloneEnabler<logical>::clone(*this);
}

void
classdef::break::logical::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->else, this->for, this->int64);
    ostr->endSlice();
}

void
classdef::break::logical::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->else, this->for, this->int64);
    istr->endSlice();
}

const char*
classdef::break::xor::ice_staticId() noexcept
{
    return "::classdef::break::xor";
}

const char*
classdef::break::xor::ice_id() const noexcept
{
    return ice_staticId();
}

void
classdef::break::xor::ice_printFields(std::ostream& os) const
{
    logical::ice_printFields(os);
    Ice::print(os << ", return = ", this->return);
}

::Ice::ValuePtr
classdef::break::xor::_iceCloneImpl() const
{
    return CloneEnabler<xor>::clone(*this);
}

void
classdef::break::xor::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->return);
    ostr->endSlice();
    logical::_iceWriteImpl(ostr);
}

void
classdef::break::xor::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->return);
    istr->endSlice();
    logical::_iceReadImpl(istr);
}

const char*
classdef::break::try::ice_staticId() noexcept
{
    return "::classdef::break::try";
}

const char*
classdef::break::try::ice_id() const noexcept
{
    return ice_staticId();
}

void
classdef::break::try::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "while = ", this->while);
    Ice::print(os << ", delete = ", this->delete);
}

::Ice::ValuePtr
classdef::break::try::_iceCloneImpl() const
{
    return CloneEnabler<try>::clone(*this);
}

void
classdef::break::try::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->while, this->delete);
    ostr->endSlice();
}

void
classdef::break::try::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->while, this->delete);
    istr->endSlice();
}

const char*
classdef::break::properties::ice_staticId() noexcept
{
    return "::classdef::break::properties";
}

const char*
classdef::break::properties::ice_id() const noexcept
{
    return ice_staticId();
}

void
classdef::break::properties::ice_printFields(std::ostream& os) const
{
    try::ice_printFields(os);
    Ice::print(os << ", if = ", this->if);
    Ice::print(os << ", catch = ", this->catch);
    Ice::print(os << ", spmd = ", this->spmd);
    Ice::print(os << ", otherwise = ", this->otherwise);
}

::Ice::ValuePtr
classdef::break::properties::_iceCloneImpl() const
{
    return CloneEnabler<properties>::clone(*this);
}

void
classdef::break::properties::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->if, this->catch, this->spmd, this->otherwise);
    ostr->endSlice();
    try::_iceWriteImpl(ostr);
}

void
classdef::break::properties::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->if, this->catch, this->spmd, this->otherwise);
    istr->endSlice();
    try::_iceReadImpl(istr);
}

const char*
classdef::break::persistent::ice_staticId() noexcept
{
    return "::classdef::break::persistent";
}

const char*
classdef::break::persistent::ice_id() const noexcept
{
    return ice_staticId();
}

void
classdef::break::persistent::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
bool
classdef::break::persistent::_usesClasses() const
{
    return true;
}
/// \endcond

void
classdef::break::persistent::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->identifier, this->message, this->stack, this->cause, this->type, this->end);
    ostr->endSlice();
}

void
classdef::break::persistent::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->identifier, this->message, this->stack, this->cause, this->type, this->end);
    istr->endSlice();
}

const char*
classdef::break::global::ice_staticId() noexcept
{
    return "::classdef::break::global";
}

const char*
classdef::break::global::ice_id() const noexcept
{
    return ice_staticId();
}

void
classdef::break::global::ice_throw() const
{
    throw *this;
}

void
classdef::break::global::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->enumeration);
    ostr->endSlice();
    persistent::_writeImpl(ostr);
}

void
classdef::break::global::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->enumeration);
    istr->endSlice();
    persistent::_readImpl(istr);
}

::std::vector<::std::string>
classdef::break::elseif::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = {"::Ice::Object", "::classdef::break::elseif"};
    return allTypeIds;
}

::std::string
classdef::break::elseif::ice_id(const ::Ice::Current&) const
{
    return ::std::string{ice_staticId()};
}

const char*
classdef::break::elseif::ice_staticId() noexcept
{
    return "::classdef::break::elseif";
}

/// \cond INTERNAL
void
classdef::break::elseif::_iceD_events(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->events(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
classdef::break::elseif::_iceD_function(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->function(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
classdef::break::elseif::_iceD_delete(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->delete(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
classdef::break::elseif::_iceD_checkedCast(
    ::Ice::IncomingRequest& request,
    ::std::function<void(::Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(::Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->checkedCast(request.current());
    sendResponse(::Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
classdef::break::elseif::dispatch(::Ice::IncomingRequest& request, ::std::function<void(::Ice::OutgoingResponse)> sendResponse)
{
    static constexpr ::std::string_view allOperations[] = {"checkedCast", "delete", "events", "function", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const ::Ice::Current& current = request.current();
    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 8, current.operation);
    if(r.first == r.second)
    {
        sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            _iceD_checkedCast(request, ::std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_delete(request, ::std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_events(request, ::std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_function(request, ::std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_id(request, ::std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_ids(request, ::std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_ice_isA(request, ::std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_ice_ping(request, ::std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(::Ice::makeOutgoingResponse(::std::make_exception_ptr(::Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond
