//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::classdef::_cpp_break::logical> iceC_classdef_break_logical_init("::classdef::break::logical");

const ::IceInternal::DefaultValueFactoryInit<::classdef::_cpp_break::_cpp_xor> iceC_classdef_break_xor_init("::classdef::break::xor");

const ::IceInternal::DefaultValueFactoryInit<::classdef::_cpp_break::_cpp_try> iceC_classdef_break_try_init("::classdef::break::try");

const ::IceInternal::DefaultValueFactoryInit<::classdef::_cpp_break::properties> iceC_classdef_break_properties_init("::classdef::break::properties");

const ::IceInternal::DefaultUserExceptionFactoryInit<::classdef::_cpp_break::persistent> iceC_classdef_break_persistent_init("::classdef::break::persistent");

const ::IceInternal::DefaultUserExceptionFactoryInit<::classdef::_cpp_break::global> iceC_classdef_break_global_init("::classdef::break::global");

const ::std::string iceC_classdef_break_elseif_ids[2] =
{
    "::Ice::Object",
    "::classdef::break::elseif"
};
const ::std::string iceC_classdef_break_elseif_ops[] =
{
    "checkedCast",
    "delete",
    "events",
    "function",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_classdef_break_elseif_events_name = "events";
const ::std::string iceC_classdef_break_elseif_function_name = "function";
const ::std::string iceC_classdef_break_elseif_delete_name = "delete";
const ::std::string iceC_classdef_break_elseif_checkedCast_name = "checkedCast";

}

void
classdef::_cpp_break::elseifPrx::events(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &elseifPrx::_iceI_events, context).get();
}

::std::future<void>
classdef::_cpp_break::elseifPrx::eventsAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &elseifPrx::_iceI_events, context);
}

::std::function<void()>
classdef::_cpp_break::elseifPrx::eventsAsync(::std::function<void ()> response,
                                             ::std::function<void(::std::exception_ptr)> ex,
                                             ::std::function<void(bool)> sent,
                                             const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &classdef::_cpp_break::elseifPrx::_iceI_events, context);
}

/// \cond INTERNAL
void
classdef::_cpp_break::elseifPrx::_iceI_events(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_classdef_break_elseif_events_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
classdef::_cpp_break::elseifPrx::function(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &elseifPrx::_iceI_function, context).get();
}

::std::future<void>
classdef::_cpp_break::elseifPrx::functionAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &elseifPrx::_iceI_function, context);
}

::std::function<void()>
classdef::_cpp_break::elseifPrx::functionAsync(::std::function<void ()> response,
                                               ::std::function<void(::std::exception_ptr)> ex,
                                               ::std::function<void(bool)> sent,
                                               const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &classdef::_cpp_break::elseifPrx::_iceI_function, context);
}

/// \cond INTERNAL
void
classdef::_cpp_break::elseifPrx::_iceI_function(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_classdef_break_elseif_function_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
classdef::_cpp_break::elseifPrx::_cpp_delete(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &elseifPrx::_iceI_delete, context).get();
}

::std::future<void>
classdef::_cpp_break::elseifPrx::deleteAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &elseifPrx::_iceI_delete, context);
}

::std::function<void()>
classdef::_cpp_break::elseifPrx::deleteAsync(::std::function<void ()> response,
                                             ::std::function<void(::std::exception_ptr)> ex,
                                             ::std::function<void(bool)> sent,
                                             const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &classdef::_cpp_break::elseifPrx::_iceI_delete, context);
}

/// \cond INTERNAL
void
classdef::_cpp_break::elseifPrx::_iceI_delete(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_classdef_break_elseif_delete_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
classdef::_cpp_break::elseifPrx::checkedCast(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &elseifPrx::_iceI_checkedCast, context).get();
}

::std::future<void>
classdef::_cpp_break::elseifPrx::checkedCastAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &elseifPrx::_iceI_checkedCast, context);
}

::std::function<void()>
classdef::_cpp_break::elseifPrx::checkedCastAsync(::std::function<void ()> response,
                                                  ::std::function<void(::std::exception_ptr)> ex,
                                                  ::std::function<void(bool)> sent,
                                                  const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &classdef::_cpp_break::elseifPrx::_iceI_checkedCast, context);
}

/// \cond INTERNAL
void
classdef::_cpp_break::elseifPrx::_iceI_checkedCast(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_classdef_break_elseif_checkedCast_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
classdef::_cpp_break::elseifPrx::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::elseif";
    return typeId;
}

classdef::_cpp_break::logical::~logical()
{
}

const ::std::string&
classdef::_cpp_break::logical::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::logical";
    return typeId;
}

classdef::_cpp_break::_cpp_xor::~_cpp_xor()
{
}

const ::std::string&
classdef::_cpp_break::_cpp_xor::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::xor";
    return typeId;
}

classdef::_cpp_break::_cpp_try::~_cpp_try()
{
}

const ::std::string&
classdef::_cpp_break::_cpp_try::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::try";
    return typeId;
}

classdef::_cpp_break::properties::~properties()
{
}

const ::std::string&
classdef::_cpp_break::properties::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::properties";
    return typeId;
}

classdef::_cpp_break::persistent::~persistent()
{
}

const ::std::string&
classdef::_cpp_break::persistent::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::persistent";
    return typeId;
}

/// \cond STREAM
bool
classdef::_cpp_break::persistent::_usesClasses() const
{
    return true;
}
/// \endcond

classdef::_cpp_break::global::~global()
{
}

const ::std::string&
classdef::_cpp_break::global::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::global";
    return typeId;
}

bool
classdef::_cpp_break::elseif::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_classdef_break_elseif_ids, iceC_classdef_break_elseif_ids + 2, s);
}

::std::vector<::std::string>
classdef::_cpp_break::elseif::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_classdef_break_elseif_ids[0], &iceC_classdef_break_elseif_ids[2]);
}

::std::string
classdef::_cpp_break::elseif::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
classdef::_cpp_break::elseif::ice_staticId()
{
    static const ::std::string typeId = "::classdef::break::elseif";
    return typeId;
}

/// \cond INTERNAL
bool
classdef::_cpp_break::elseif::_iceD_events(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->events(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
classdef::_cpp_break::elseif::_iceD_function(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->function(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
classdef::_cpp_break::elseif::_iceD_delete(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->_cpp_delete(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
classdef::_cpp_break::elseif::_iceD_checkedCast(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->checkedCast(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
classdef::_cpp_break::elseif::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_classdef_break_elseif_ops, iceC_classdef_break_elseif_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_classdef_break_elseif_ops)
    {
        case 0:
        {
            return _iceD_checkedCast(in, current);
        }
        case 1:
        {
            return _iceD_delete(in, current);
        }
        case 2:
        {
            return _iceD_events(in, current);
        }
        case 3:
        {
            return _iceD_function(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
