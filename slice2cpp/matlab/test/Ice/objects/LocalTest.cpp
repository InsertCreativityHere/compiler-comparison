// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'LocalTest.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "LocalTest.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const IceInternal::FactoryTableInit iceC_factoryTableInit;
    const IceInternal::DefaultValueFactoryInit<::LocalTest::C1> iceC_LocalTest_C1_init("::LocalTest::C1");
    const IceInternal::DefaultValueFactoryInit<::LocalTest::CB1> iceC_LocalTest_CB1_init("::LocalTest::CB1");
    const IceInternal::DefaultValueFactoryInit<::LocalTest::CB2> iceC_LocalTest_CB2_init("::LocalTest::CB2");
    const IceInternal::DefaultValueFactoryInit<::LocalTest::CB3> iceC_LocalTest_CB3_init("::LocalTest::CB3");
    const IceInternal::DefaultValueFactoryInit<::LocalTest::CB4> iceC_LocalTest_CB4_init("::LocalTest::CB4");
    const IceInternal::DefaultValueFactoryInit<::LocalTest::CB5> iceC_LocalTest_CB5_init("::LocalTest::CB5");
    const IceInternal::DefaultValueFactoryInit<::LocalTest::CB6> iceC_LocalTest_CB6_init("::LocalTest::CB6");
    const IceInternal::DefaultValueFactoryInit<::LocalTest::CB7> iceC_LocalTest_CB7_init("::LocalTest::CB7");
    const IceInternal::DefaultValueFactoryInit<::LocalTest::CB8> iceC_LocalTest_CB8_init("::LocalTest::CB8");
}

const char*
LocalTest::C1::ice_staticId() noexcept
{
    return "::LocalTest::C1";
}

const char*
LocalTest::C1::ice_id() const noexcept
{
    return ice_staticId();
}

void
LocalTest::C1::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "i = ", this->i);
}

Ice::ValuePtr
LocalTest::C1::_iceCloneImpl() const
{
    return CloneEnabler<C1>::clone(*this);
}

void
LocalTest::C1::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->i);
    ostr->endSlice();
}

void
LocalTest::C1::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->i);
    istr->endSlice();
}

void
LocalTest::S1::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "c1 = ", this->c1);
}

::std::ostream&
LocalTest::operator<<(::std::ostream& os, const ::LocalTest::S1& value)
{
    os << "LocalTest::S1{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
LocalTest::S2::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "s1 = ", this->s1);
}

::std::ostream&
LocalTest::operator<<(::std::ostream& os, const ::LocalTest::S2& value)
{
    os << "LocalTest::S2{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
LocalTest::S3::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "c1seq = ", this->c1seq);
}

::std::ostream&
LocalTest::operator<<(::std::ostream& os, const ::LocalTest::S3& value)
{
    os << "LocalTest::S3{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
LocalTest::S4::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "s1seq = ", this->s1seq);
}

::std::ostream&
LocalTest::operator<<(::std::ostream& os, const ::LocalTest::S4& value)
{
    os << "LocalTest::S4{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
LocalTest::S5::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "c1dict = ", this->c1dict);
}

::std::ostream&
LocalTest::operator<<(::std::ostream& os, const ::LocalTest::S5& value)
{
    os << "LocalTest::S5{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
LocalTest::S6::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "s1dict = ", this->s1dict);
}

::std::ostream&
LocalTest::operator<<(::std::ostream& os, const ::LocalTest::S6& value)
{
    os << "LocalTest::S6{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
LocalTest::S7::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "c1seqseq = ", this->c1seqseq);
}

::std::ostream&
LocalTest::operator<<(::std::ostream& os, const ::LocalTest::S7& value)
{
    os << "LocalTest::S7{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
LocalTest::S8::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "s1seqseq = ", this->s1seqseq);
}

::std::ostream&
LocalTest::operator<<(::std::ostream& os, const ::LocalTest::S8& value)
{
    os << "LocalTest::S8{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
LocalTest::CB1::ice_staticId() noexcept
{
    return "::LocalTest::CB1";
}

const char*
LocalTest::CB1::ice_id() const noexcept
{
    return ice_staticId();
}

void
LocalTest::CB1::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "s1 = ", this->s1);
}

Ice::ValuePtr
LocalTest::CB1::_iceCloneImpl() const
{
    return CloneEnabler<CB1>::clone(*this);
}

void
LocalTest::CB1::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->s1);
    ostr->endSlice();
}

void
LocalTest::CB1::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->s1);
    istr->endSlice();
}

const char*
LocalTest::CB2::ice_staticId() noexcept
{
    return "::LocalTest::CB2";
}

const char*
LocalTest::CB2::ice_id() const noexcept
{
    return ice_staticId();
}

void
LocalTest::CB2::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "c1seq = ", this->c1seq);
}

Ice::ValuePtr
LocalTest::CB2::_iceCloneImpl() const
{
    return CloneEnabler<CB2>::clone(*this);
}

void
LocalTest::CB2::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->c1seq);
    ostr->endSlice();
}

void
LocalTest::CB2::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->c1seq);
    istr->endSlice();
}

const char*
LocalTest::CB3::ice_staticId() noexcept
{
    return "::LocalTest::CB3";
}

const char*
LocalTest::CB3::ice_id() const noexcept
{
    return ice_staticId();
}

void
LocalTest::CB3::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "s1seq = ", this->s1seq);
}

Ice::ValuePtr
LocalTest::CB3::_iceCloneImpl() const
{
    return CloneEnabler<CB3>::clone(*this);
}

void
LocalTest::CB3::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->s1seq);
    ostr->endSlice();
}

void
LocalTest::CB3::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->s1seq);
    istr->endSlice();
}

const char*
LocalTest::CB4::ice_staticId() noexcept
{
    return "::LocalTest::CB4";
}

const char*
LocalTest::CB4::ice_id() const noexcept
{
    return ice_staticId();
}

void
LocalTest::CB4::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "c1dict = ", this->c1dict);
}

Ice::ValuePtr
LocalTest::CB4::_iceCloneImpl() const
{
    return CloneEnabler<CB4>::clone(*this);
}

void
LocalTest::CB4::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->c1dict);
    ostr->endSlice();
}

void
LocalTest::CB4::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->c1dict);
    istr->endSlice();
}

const char*
LocalTest::CB5::ice_staticId() noexcept
{
    return "::LocalTest::CB5";
}

const char*
LocalTest::CB5::ice_id() const noexcept
{
    return ice_staticId();
}

void
LocalTest::CB5::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "s1dict = ", this->s1dict);
}

Ice::ValuePtr
LocalTest::CB5::_iceCloneImpl() const
{
    return CloneEnabler<CB5>::clone(*this);
}

void
LocalTest::CB5::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->s1dict);
    ostr->endSlice();
}

void
LocalTest::CB5::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->s1dict);
    istr->endSlice();
}

const char*
LocalTest::CB6::ice_staticId() noexcept
{
    return "::LocalTest::CB6";
}

const char*
LocalTest::CB6::ice_id() const noexcept
{
    return ice_staticId();
}

void
LocalTest::CB6::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "c1seqseq = ", this->c1seqseq);
}

Ice::ValuePtr
LocalTest::CB6::_iceCloneImpl() const
{
    return CloneEnabler<CB6>::clone(*this);
}

void
LocalTest::CB6::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->c1seqseq);
    ostr->endSlice();
}

void
LocalTest::CB6::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->c1seqseq);
    istr->endSlice();
}

const char*
LocalTest::CB7::ice_staticId() noexcept
{
    return "::LocalTest::CB7";
}

const char*
LocalTest::CB7::ice_id() const noexcept
{
    return ice_staticId();
}

void
LocalTest::CB7::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "s1seqseq = ", this->s1seqseq);
}

Ice::ValuePtr
LocalTest::CB7::_iceCloneImpl() const
{
    return CloneEnabler<CB7>::clone(*this);
}

void
LocalTest::CB7::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->s1seqseq);
    ostr->endSlice();
}

void
LocalTest::CB7::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->s1seqseq);
    istr->endSlice();
}

const char*
LocalTest::CB8::ice_staticId() noexcept
{
    return "::LocalTest::CB8";
}

const char*
LocalTest::CB8::ice_id() const noexcept
{
    return ice_staticId();
}

void
LocalTest::CB8::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "s1 = ", this->s1);
    Ice::print(os << ", c1seq = ", this->c1seq);
    Ice::print(os << ", s1dict = ", this->s1dict);
}

Ice::ValuePtr
LocalTest::CB8::_iceCloneImpl() const
{
    return CloneEnabler<CB8>::clone(*this);
}

void
LocalTest::CB8::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->s1, this->c1seq, this->s1dict);
    ostr->endSlice();
}

void
LocalTest::CB8::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->s1, this->c1seq, this->s1dict);
    istr->endSlice();
}

void
LocalTest::StructKey::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "i = ", this->i);
    Ice::print(os << ", j = ", this->j);
}

::std::ostream&
LocalTest::operator<<(::std::ostream& os, const ::LocalTest::StructKey& value)
{
    os << "LocalTest::StructKey{";
    value.ice_printFields(os);
    os << '}';
    return os;
}
