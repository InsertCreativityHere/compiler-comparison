//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `LocalTest.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <LocalTest.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::C1> iceC_LocalTest_C1_init("::LocalTest::C1");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB1> iceC_LocalTest_CB1_init("::LocalTest::CB1");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB2> iceC_LocalTest_CB2_init("::LocalTest::CB2");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB3> iceC_LocalTest_CB3_init("::LocalTest::CB3");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB4> iceC_LocalTest_CB4_init("::LocalTest::CB4");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB5> iceC_LocalTest_CB5_init("::LocalTest::CB5");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB6> iceC_LocalTest_CB6_init("::LocalTest::CB6");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB7> iceC_LocalTest_CB7_init("::LocalTest::CB7");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB8> iceC_LocalTest_CB8_init("::LocalTest::CB8");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::Opt> iceC_LocalTest_Opt_init("::LocalTest::Opt");

}

LocalTest::C1::~C1()
{
}

const ::std::string&
LocalTest::C1::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::C1";
    return typeId;
}

LocalTest::CB1::~CB1()
{
}

const ::std::string&
LocalTest::CB1::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB1";
    return typeId;
}

LocalTest::CB2::~CB2()
{
}

const ::std::string&
LocalTest::CB2::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB2";
    return typeId;
}

LocalTest::CB3::~CB3()
{
}

const ::std::string&
LocalTest::CB3::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB3";
    return typeId;
}

LocalTest::CB4::~CB4()
{
}

const ::std::string&
LocalTest::CB4::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB4";
    return typeId;
}

LocalTest::CB5::~CB5()
{
}

const ::std::string&
LocalTest::CB5::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB5";
    return typeId;
}

LocalTest::CB6::~CB6()
{
}

const ::std::string&
LocalTest::CB6::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB6";
    return typeId;
}

LocalTest::CB7::~CB7()
{
}

const ::std::string&
LocalTest::CB7::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB7";
    return typeId;
}

LocalTest::CB8::~CB8()
{
}

const ::std::string&
LocalTest::CB8::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB8";
    return typeId;
}

LocalTest::Opt::~Opt()
{
}

const ::std::string&
LocalTest::Opt::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::Opt";
    return typeId;
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::C1> iceC_LocalTest_C1_init("::LocalTest::C1");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB1> iceC_LocalTest_CB1_init("::LocalTest::CB1");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB2> iceC_LocalTest_CB2_init("::LocalTest::CB2");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB3> iceC_LocalTest_CB3_init("::LocalTest::CB3");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB4> iceC_LocalTest_CB4_init("::LocalTest::CB4");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB5> iceC_LocalTest_CB5_init("::LocalTest::CB5");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB6> iceC_LocalTest_CB6_init("::LocalTest::CB6");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB7> iceC_LocalTest_CB7_init("::LocalTest::CB7");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::CB8> iceC_LocalTest_CB8_init("::LocalTest::CB8");

const ::IceInternal::DefaultValueFactoryInit<::LocalTest::Opt> iceC_LocalTest_Opt_init("::LocalTest::Opt");

}

LocalTest::C1::~C1()
{
}

const ::std::string&
LocalTest::C1::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::C1";
    return typeId;
}

LocalTest::CB1::~CB1()
{
}

const ::std::string&
LocalTest::CB1::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB1";
    return typeId;
}

LocalTest::CB2::~CB2()
{
}

const ::std::string&
LocalTest::CB2::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB2";
    return typeId;
}

LocalTest::CB3::~CB3()
{
}

const ::std::string&
LocalTest::CB3::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB3";
    return typeId;
}

LocalTest::CB4::~CB4()
{
}

const ::std::string&
LocalTest::CB4::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB4";
    return typeId;
}

LocalTest::CB5::~CB5()
{
}

const ::std::string&
LocalTest::CB5::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB5";
    return typeId;
}

LocalTest::CB6::~CB6()
{
}

const ::std::string&
LocalTest::CB6::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB6";
    return typeId;
}

LocalTest::CB7::~CB7()
{
}

const ::std::string&
LocalTest::CB7::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB7";
    return typeId;
}

LocalTest::CB8::~CB8()
{
}

const ::std::string&
LocalTest::CB8::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::CB8";
    return typeId;
}

LocalTest::Opt::~Opt()
{
}

const ::std::string&
LocalTest::Opt::ice_staticId()
{
    static const ::std::string typeId = "::LocalTest::Opt";
    return typeId;
}

namespace Ice
{
}

#endif
