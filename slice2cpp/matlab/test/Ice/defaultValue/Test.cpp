//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::Test::Base> iceC_Test_Base_init("::Test::Base");
    const ::IceInternal::DefaultValueFactoryInit<::Test::Derived> iceC_Test_Derived_init("::Test::Derived");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::BaseEx> iceC_Test_BaseEx_init("::Test::BaseEx");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::DerivedEx> iceC_Test_DerivedEx_init("::Test::DerivedEx");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::ExceptionNoDefaultsBase> iceC_Test_ExceptionNoDefaultsBase_init("::Test::ExceptionNoDefaultsBase");
    const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::ExceptionNoDefaults> iceC_Test_ExceptionNoDefaults_init("::Test::ExceptionNoDefaults");
    const ::IceInternal::DefaultValueFactoryInit<::Test::ClassNoDefaultsBase> iceC_Test_ClassNoDefaultsBase_init("::Test::ClassNoDefaultsBase");
    const ::IceInternal::DefaultValueFactoryInit<::Test::ClassNoDefaults> iceC_Test_ClassNoDefaults_init("::Test::ClassNoDefaults");
}

::std::string
Test::Base::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::Base::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::Base";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::Base::_iceCloneImpl() const
{
    return CloneEnabler<Base>::clone(*this);
}

void
Test::Base::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<Base>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Base::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<Base>::read(istr, *this);
    istr->endSlice();
}

::std::string
Test::Derived::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::Derived::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::Derived";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::Derived::_iceCloneImpl() const
{
    return CloneEnabler<Derived>::clone(*this);
}

void
Test::Derived::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<Derived>::write(ostr, *this);
    ostr->endSlice();
    Base::_iceWriteImpl(ostr);
}

void
Test::Derived::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<Derived>::read(istr, *this);
    istr->endSlice();
    Base::_iceReadImpl(istr);
}

::std::string_view
Test::BaseEx::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::BaseEx";
    return typeId;
}

::std::string
Test::BaseEx::ice_id() const
{
    return ::std::string{ice_staticId()};
}

void
Test::BaseEx::ice_throw() const
{
    throw *this;
}

void
Test::BaseEx::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<BaseEx>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::BaseEx::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<BaseEx>::read(istr, *this);
    istr->endSlice();
}

::std::string_view
Test::DerivedEx::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::DerivedEx";
    return typeId;
}

::std::string
Test::DerivedEx::ice_id() const
{
    return ::std::string{ice_staticId()};
}

void
Test::DerivedEx::ice_throw() const
{
    throw *this;
}

void
Test::DerivedEx::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<DerivedEx>::write(ostr, *this);
    ostr->endSlice();
    BaseEx::_writeImpl(ostr);
}

void
Test::DerivedEx::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<DerivedEx>::read(istr, *this);
    istr->endSlice();
    BaseEx::_readImpl(istr);
}

::std::string_view
Test::ExceptionNoDefaultsBase::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::ExceptionNoDefaultsBase";
    return typeId;
}

::std::string
Test::ExceptionNoDefaultsBase::ice_id() const
{
    return ::std::string{ice_staticId()};
}

void
Test::ExceptionNoDefaultsBase::ice_throw() const
{
    throw *this;
}

void
Test::ExceptionNoDefaultsBase::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<ExceptionNoDefaultsBase>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::ExceptionNoDefaultsBase::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<ExceptionNoDefaultsBase>::read(istr, *this);
    istr->endSlice();
}

::std::string_view
Test::ExceptionNoDefaults::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::ExceptionNoDefaults";
    return typeId;
}

::std::string
Test::ExceptionNoDefaults::ice_id() const
{
    return ::std::string{ice_staticId()};
}

void
Test::ExceptionNoDefaults::ice_throw() const
{
    throw *this;
}

void
Test::ExceptionNoDefaults::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<ExceptionNoDefaults>::write(ostr, *this);
    ostr->endSlice();
    ExceptionNoDefaultsBase::_writeImpl(ostr);
}

void
Test::ExceptionNoDefaults::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<ExceptionNoDefaults>::read(istr, *this);
    istr->endSlice();
    ExceptionNoDefaultsBase::_readImpl(istr);
}

::std::string
Test::ClassNoDefaultsBase::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::ClassNoDefaultsBase::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::ClassNoDefaultsBase";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::ClassNoDefaultsBase::_iceCloneImpl() const
{
    return CloneEnabler<ClassNoDefaultsBase>::clone(*this);
}

void
Test::ClassNoDefaultsBase::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter<ClassNoDefaultsBase>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::ClassNoDefaultsBase::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<ClassNoDefaultsBase>::read(istr, *this);
    istr->endSlice();
}

::std::string
Test::ClassNoDefaults::ice_id() const
{
    return ::std::string{ice_staticId()};
}

::std::string_view
Test::ClassNoDefaults::ice_staticId() noexcept
{
    static constexpr ::std::string_view typeId = "::Test::ClassNoDefaults";
    return typeId;
}

::std::shared_ptr<::Ice::Value>
Test::ClassNoDefaults::_iceCloneImpl() const
{
    return CloneEnabler<ClassNoDefaults>::clone(*this);
}

void
Test::ClassNoDefaults::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter<ClassNoDefaults>::write(ostr, *this);
    ostr->endSlice();
    ClassNoDefaultsBase::_iceWriteImpl(ostr);
}

void
Test::ClassNoDefaults::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader<ClassNoDefaults>::read(istr, *this);
    istr->endSlice();
    ClassNoDefaultsBase::_iceReadImpl(istr);
}
