//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::TestIntfException> iceC_Test_TestIntfException_init("::Test::TestIntfException");

const ::std::string iceC_Test_PingReply_ids[2] =
{
    "::Ice::Object",
    "::Test::PingReply"
};
const ::std::string iceC_Test_PingReply_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "reply"
};
const ::std::string iceC_Test_PingReply_reply_name = "reply";

const ::std::string iceC_Test_TestIntf_ids[2] =
{
    "::Ice::Object",
    "::Test::TestIntf"
};
const ::std::string iceC_Test_TestIntf_ops[] =
{
    "close",
    "finishDispatch",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op",
    "opBatch",
    "opBatchCount",
    "opBool",
    "opByte",
    "opDouble",
    "opFloat",
    "opInt",
    "opLong",
    "opShort",
    "opWithPayload",
    "opWithResult",
    "opWithUE",
    "pingBiDir",
    "shutdown",
    "sleep",
    "startDispatch",
    "supportsAMD",
    "supportsFunctionalTests",
    "waitForBatch"
};
const ::std::string iceC_Test_TestIntf_op_name = "op";
const ::std::string iceC_Test_TestIntf_opWithPayload_name = "opWithPayload";
const ::std::string iceC_Test_TestIntf_opWithResult_name = "opWithResult";
const ::std::string iceC_Test_TestIntf_opWithUE_name = "opWithUE";
const ::std::string iceC_Test_TestIntf_opBatch_name = "opBatch";
const ::std::string iceC_Test_TestIntf_opBatchCount_name = "opBatchCount";
const ::std::string iceC_Test_TestIntf_waitForBatch_name = "waitForBatch";
const ::std::string iceC_Test_TestIntf_close_name = "close";
const ::std::string iceC_Test_TestIntf_sleep_name = "sleep";
const ::std::string iceC_Test_TestIntf_startDispatch_name = "startDispatch";
const ::std::string iceC_Test_TestIntf_finishDispatch_name = "finishDispatch";
const ::std::string iceC_Test_TestIntf_shutdown_name = "shutdown";
const ::std::string iceC_Test_TestIntf_supportsAMD_name = "supportsAMD";
const ::std::string iceC_Test_TestIntf_supportsFunctionalTests_name = "supportsFunctionalTests";
const ::std::string iceC_Test_TestIntf_opBool_name = "opBool";
const ::std::string iceC_Test_TestIntf_opByte_name = "opByte";
const ::std::string iceC_Test_TestIntf_opShort_name = "opShort";
const ::std::string iceC_Test_TestIntf_opInt_name = "opInt";
const ::std::string iceC_Test_TestIntf_opLong_name = "opLong";
const ::std::string iceC_Test_TestIntf_opFloat_name = "opFloat";
const ::std::string iceC_Test_TestIntf_opDouble_name = "opDouble";
const ::std::string iceC_Test_TestIntf_pingBiDir_name = "pingBiDir";

const ::std::string iceC_Test_TestIntfController_ids[2] =
{
    "::Ice::Object",
    "::Test::TestIntfController"
};
const ::std::string iceC_Test_TestIntfController_ops[] =
{
    "holdAdapter",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "resumeAdapter"
};
const ::std::string iceC_Test_TestIntfController_holdAdapter_name = "holdAdapter";
const ::std::string iceC_Test_TestIntfController_resumeAdapter_name = "resumeAdapter";

const ::std::string iceC_Test_Outer_Inner_TestIntf_ids[2] =
{
    "::Ice::Object",
    "::Test::Outer::Inner::TestIntf"
};
const ::std::string iceC_Test_Outer_Inner_TestIntf_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "op"
};
const ::std::string iceC_Test_Outer_Inner_TestIntf_op_name = "op";

}

void
Test::PingReplyPrx::reply(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &PingReplyPrx::_iceI_reply, context).get();
}

::std::future<void>
Test::PingReplyPrx::replyAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &PingReplyPrx::_iceI_reply, context);
}

::std::function<void()>
Test::PingReplyPrx::replyAsync(::std::function<void ()> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::PingReplyPrx::_iceI_reply, context);
}

/// \cond INTERNAL
void
Test::PingReplyPrx::_iceI_reply(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_PingReply_reply_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::PingReplyPrx::ice_staticId()
{
    return PingReply::ice_staticId();
}

void
Test::TestIntfPrx::op(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_op, context).get();
}

::std::future<void>
Test::TestIntfPrx::opAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestIntfPrx::_iceI_op, context);
}

::std::function<void()>
Test::TestIntfPrx::opAsync(::std::function<void ()> response,
                           ::std::function<void(::std::exception_ptr)> ex,
                           ::std::function<void(bool)> sent,
                           const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_op, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
Test::TestIntfPrx::opWithPayload(const ::Ice::ByteSeq& iceP_seq, const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_opWithPayload, iceP_seq, context).get();
}

::std::future<void>
Test::TestIntfPrx::opWithPayloadAsync(const ::Ice::ByteSeq& iceP_seq, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestIntfPrx::_iceI_opWithPayload, iceP_seq, context);
}

::std::function<void()>
Test::TestIntfPrx::opWithPayloadAsync(const ::Ice::ByteSeq& iceP_seq,
                                      ::std::function<void ()> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opWithPayload, iceP_seq, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opWithPayload(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::ByteSeq& iceP_seq, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_opWithPayload_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_seq);
        },
        nullptr);
}
/// \endcond

int
Test::TestIntfPrx::opWithResult(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<int>(true, this, &TestIntfPrx::_iceI_opWithResult, context).get();
}

::std::future<int>
Test::TestIntfPrx::opWithResultAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<int, ::std::promise>(false, this, &TestIntfPrx::_iceI_opWithResult, context);
}

::std::function<void()>
Test::TestIntfPrx::opWithResultAsync(::std::function<void (int)> response,
                                     ::std::function<void(::std::exception_ptr)> ex,
                                     ::std::function<void(bool)> sent,
                                     const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opWithResult, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opWithResult(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opWithResult_name);
    outAsync->invoke(iceC_Test_TestIntf_opWithResult_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
Test::TestIntfPrx::opWithUE(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_opWithUE, context).get();
}

::std::future<void>
Test::TestIntfPrx::opWithUEAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestIntfPrx::_iceI_opWithUE, context);
}

::std::function<void()>
Test::TestIntfPrx::opWithUEAsync(::std::function<void ()> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opWithUE, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opWithUE(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opWithUE_name);
    outAsync->invoke(iceC_Test_TestIntf_opWithUE_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const TestIntfException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::opBatch(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_opBatch, context).get();
}

::std::future<void>
Test::TestIntfPrx::opBatchAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestIntfPrx::_iceI_opBatch, context);
}

::std::function<void()>
Test::TestIntfPrx::opBatchAsync(::std::function<void ()> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opBatch, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opBatch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_opBatch_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

int
Test::TestIntfPrx::opBatchCount(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<int>(true, this, &TestIntfPrx::_iceI_opBatchCount, context).get();
}

::std::future<int>
Test::TestIntfPrx::opBatchCountAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<int, ::std::promise>(false, this, &TestIntfPrx::_iceI_opBatchCount, context);
}

::std::function<void()>
Test::TestIntfPrx::opBatchCountAsync(::std::function<void (int)> response,
                                     ::std::function<void(::std::exception_ptr)> ex,
                                     ::std::function<void(bool)> sent,
                                     const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opBatchCount, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opBatchCount(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opBatchCount_name);
    outAsync->invoke(iceC_Test_TestIntf_opBatchCount_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

bool
Test::TestIntfPrx::waitForBatch(int iceP_count, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<bool>(true, this, &TestIntfPrx::_iceI_waitForBatch, iceP_count, context).get();
}

::std::future<bool>
Test::TestIntfPrx::waitForBatchAsync(int iceP_count, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<bool, ::std::promise>(false, this, &TestIntfPrx::_iceI_waitForBatch, iceP_count, context);
}

::std::function<void()>
Test::TestIntfPrx::waitForBatchAsync(int iceP_count,
                                     ::std::function<void (bool)> response,
                                     ::std::function<void(::std::exception_ptr)> ex,
                                     ::std::function<void(bool)> sent,
                                     const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_waitForBatch, iceP_count, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_waitForBatch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, int iceP_count, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_waitForBatch_name);
    outAsync->invoke(iceC_Test_TestIntf_waitForBatch_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_count);
        },
        nullptr);
}
/// \endcond

void
Test::TestIntfPrx::close(CloseMode iceP_mode, const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_close, iceP_mode, context).get();
}

::std::future<void>
Test::TestIntfPrx::closeAsync(CloseMode iceP_mode, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestIntfPrx::_iceI_close, iceP_mode, context);
}

::std::function<void()>
Test::TestIntfPrx::closeAsync(CloseMode iceP_mode,
                              ::std::function<void ()> response,
                              ::std::function<void(::std::exception_ptr)> ex,
                              ::std::function<void(bool)> sent,
                              const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_close, iceP_mode, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_close(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, CloseMode iceP_mode, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_close_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_mode);
        },
        nullptr);
}
/// \endcond

void
Test::TestIntfPrx::sleep(int iceP_ms, const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_sleep, iceP_ms, context).get();
}

::std::future<void>
Test::TestIntfPrx::sleepAsync(int iceP_ms, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestIntfPrx::_iceI_sleep, iceP_ms, context);
}

::std::function<void()>
Test::TestIntfPrx::sleepAsync(int iceP_ms,
                              ::std::function<void ()> response,
                              ::std::function<void(::std::exception_ptr)> ex,
                              ::std::function<void(bool)> sent,
                              const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_sleep, iceP_ms, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_sleep(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_ms, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_sleep_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_ms);
        },
        nullptr);
}
/// \endcond

void
Test::TestIntfPrx::startDispatch(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_startDispatch, context).get();
}

::std::future<void>
Test::TestIntfPrx::startDispatchAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestIntfPrx::_iceI_startDispatch, context);
}

::std::function<void()>
Test::TestIntfPrx::startDispatchAsync(::std::function<void ()> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_startDispatch, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_startDispatch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_startDispatch_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
Test::TestIntfPrx::finishDispatch(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_finishDispatch, context).get();
}

::std::future<void>
Test::TestIntfPrx::finishDispatchAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestIntfPrx::_iceI_finishDispatch, context);
}

::std::function<void()>
Test::TestIntfPrx::finishDispatchAsync(::std::function<void ()> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_finishDispatch, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_finishDispatch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_finishDispatch_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
Test::TestIntfPrx::shutdown(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::TestIntfPrx::shutdownAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestIntfPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::TestIntfPrx::shutdownAsync(::std::function<void ()> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

bool
Test::TestIntfPrx::supportsAMD(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<bool>(true, this, &TestIntfPrx::_iceI_supportsAMD, context).get();
}

::std::future<bool>
Test::TestIntfPrx::supportsAMDAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<bool, ::std::promise>(false, this, &TestIntfPrx::_iceI_supportsAMD, context);
}

::std::function<void()>
Test::TestIntfPrx::supportsAMDAsync(::std::function<void (bool)> response,
                                    ::std::function<void(::std::exception_ptr)> ex,
                                    ::std::function<void(bool)> sent,
                                    const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_supportsAMD, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_supportsAMD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_supportsAMD_name);
    outAsync->invoke(iceC_Test_TestIntf_supportsAMD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

bool
Test::TestIntfPrx::supportsFunctionalTests(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<bool>(true, this, &TestIntfPrx::_iceI_supportsFunctionalTests, context).get();
}

::std::future<bool>
Test::TestIntfPrx::supportsFunctionalTestsAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<bool, ::std::promise>(false, this, &TestIntfPrx::_iceI_supportsFunctionalTests, context);
}

::std::function<void()>
Test::TestIntfPrx::supportsFunctionalTestsAsync(::std::function<void (bool)> response,
                                                ::std::function<void(::std::exception_ptr)> ex,
                                                ::std::function<void(bool)> sent,
                                                const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_supportsFunctionalTests, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_supportsFunctionalTests(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_supportsFunctionalTests_name);
    outAsync->invoke(iceC_Test_TestIntf_supportsFunctionalTests_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

bool
Test::TestIntfPrx::opBool(bool iceP_b, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<bool>(true, this, &TestIntfPrx::_iceI_opBool, iceP_b, context).get();
}

::std::future<bool>
Test::TestIntfPrx::opBoolAsync(bool iceP_b, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<bool, ::std::promise>(false, this, &TestIntfPrx::_iceI_opBool, iceP_b, context);
}

::std::function<void()>
Test::TestIntfPrx::opBoolAsync(bool iceP_b,
                               ::std::function<void (bool)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opBool, iceP_b, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opBool(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, bool iceP_b, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opBool_name);
    outAsync->invoke(iceC_Test_TestIntf_opBool_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_b);
        },
        nullptr);
}
/// \endcond

::Ice::Byte
Test::TestIntfPrx::opByte(::Ice::Byte iceP_b, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::Ice::Byte>(true, this, &TestIntfPrx::_iceI_opByte, iceP_b, context).get();
}

::std::future<::Ice::Byte>
Test::TestIntfPrx::opByteAsync(::Ice::Byte iceP_b, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::Ice::Byte, ::std::promise>(false, this, &TestIntfPrx::_iceI_opByte, iceP_b, context);
}

::std::function<void()>
Test::TestIntfPrx::opByteAsync(::Ice::Byte iceP_b,
                               ::std::function<void (::Ice::Byte)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<::Ice::Byte>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opByte, iceP_b, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opByte(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Ice::Byte>>& outAsync, ::Ice::Byte iceP_b, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opByte_name);
    outAsync->invoke(iceC_Test_TestIntf_opByte_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_b);
        },
        nullptr);
}
/// \endcond

short
Test::TestIntfPrx::opShort(short iceP_s, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<short>(true, this, &TestIntfPrx::_iceI_opShort, iceP_s, context).get();
}

::std::future<short>
Test::TestIntfPrx::opShortAsync(short iceP_s, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<short, ::std::promise>(false, this, &TestIntfPrx::_iceI_opShort, iceP_s, context);
}

::std::function<void()>
Test::TestIntfPrx::opShortAsync(short iceP_s,
                                ::std::function<void (short)> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<short>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opShort, iceP_s, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opShort(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<short>>& outAsync, short iceP_s, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opShort_name);
    outAsync->invoke(iceC_Test_TestIntf_opShort_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s);
        },
        nullptr);
}
/// \endcond

int
Test::TestIntfPrx::opInt(int iceP_i, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<int>(true, this, &TestIntfPrx::_iceI_opInt, iceP_i, context).get();
}

::std::future<int>
Test::TestIntfPrx::opIntAsync(int iceP_i, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<int, ::std::promise>(false, this, &TestIntfPrx::_iceI_opInt, iceP_i, context);
}

::std::function<void()>
Test::TestIntfPrx::opIntAsync(int iceP_i,
                              ::std::function<void (int)> response,
                              ::std::function<void(::std::exception_ptr)> ex,
                              ::std::function<void(bool)> sent,
                              const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opInt, iceP_i, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opInt(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opInt_name);
    outAsync->invoke(iceC_Test_TestIntf_opInt_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr);
}
/// \endcond

long long int
Test::TestIntfPrx::opLong(long long int iceP_l, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<long long int>(true, this, &TestIntfPrx::_iceI_opLong, iceP_l, context).get();
}

::std::future<long long int>
Test::TestIntfPrx::opLongAsync(long long int iceP_l, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<long long int, ::std::promise>(false, this, &TestIntfPrx::_iceI_opLong, iceP_l, context);
}

::std::function<void()>
Test::TestIntfPrx::opLongAsync(long long int iceP_l,
                               ::std::function<void (long long int)> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<long long int>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opLong, iceP_l, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opLong(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<long long int>>& outAsync, long long int iceP_l, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opLong_name);
    outAsync->invoke(iceC_Test_TestIntf_opLong_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_l);
        },
        nullptr);
}
/// \endcond

float
Test::TestIntfPrx::opFloat(float iceP_f, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<float>(true, this, &TestIntfPrx::_iceI_opFloat, iceP_f, context).get();
}

::std::future<float>
Test::TestIntfPrx::opFloatAsync(float iceP_f, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<float, ::std::promise>(false, this, &TestIntfPrx::_iceI_opFloat, iceP_f, context);
}

::std::function<void()>
Test::TestIntfPrx::opFloatAsync(float iceP_f,
                                ::std::function<void (float)> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<float>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opFloat, iceP_f, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opFloat(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<float>>& outAsync, float iceP_f, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opFloat_name);
    outAsync->invoke(iceC_Test_TestIntf_opFloat_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_f);
        },
        nullptr);
}
/// \endcond

double
Test::TestIntfPrx::opDouble(double iceP_d, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<double>(true, this, &TestIntfPrx::_iceI_opDouble, iceP_d, context).get();
}

::std::future<double>
Test::TestIntfPrx::opDoubleAsync(double iceP_d, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<double, ::std::promise>(false, this, &TestIntfPrx::_iceI_opDouble, iceP_d, context);
}

::std::function<void()>
Test::TestIntfPrx::opDoubleAsync(double iceP_d,
                                 ::std::function<void (double)> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<double>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_opDouble, iceP_d, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_opDouble(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<double>>& outAsync, double iceP_d, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_opDouble_name);
    outAsync->invoke(iceC_Test_TestIntf_opDouble_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_d);
        },
        nullptr);
}
/// \endcond

void
Test::TestIntfPrx::pingBiDir(const ::std::shared_ptr<PingReplyPrx>& iceP_reply, const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_pingBiDir, iceP_reply, context).get();
}

::std::future<void>
Test::TestIntfPrx::pingBiDirAsync(const ::std::shared_ptr<PingReplyPrx>& iceP_reply, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestIntfPrx::_iceI_pingBiDir, iceP_reply, context);
}

::std::function<void()>
Test::TestIntfPrx::pingBiDirAsync(const ::std::shared_ptr<PingReplyPrx>& iceP_reply,
                                  ::std::function<void ()> response,
                                  ::std::function<void(::std::exception_ptr)> ex,
                                  ::std::function<void(bool)> sent,
                                  const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_pingBiDir, iceP_reply, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_pingBiDir(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<PingReplyPrx>& iceP_reply, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_pingBiDir_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_reply);
        },
        nullptr);
}
/// \endcond

const ::std::string&
Test::TestIntfPrx::ice_staticId()
{
    return TestIntf::ice_staticId();
}

void
Test::TestIntfControllerPrx::holdAdapter(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestIntfControllerPrx::_iceI_holdAdapter, context).get();
}

::std::future<void>
Test::TestIntfControllerPrx::holdAdapterAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestIntfControllerPrx::_iceI_holdAdapter, context);
}

::std::function<void()>
Test::TestIntfControllerPrx::holdAdapterAsync(::std::function<void ()> response,
                                              ::std::function<void(::std::exception_ptr)> ex,
                                              ::std::function<void(bool)> sent,
                                              const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfControllerPrx::_iceI_holdAdapter, context);
}

/// \cond INTERNAL
void
Test::TestIntfControllerPrx::_iceI_holdAdapter(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntfController_holdAdapter_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
Test::TestIntfControllerPrx::resumeAdapter(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &TestIntfControllerPrx::_iceI_resumeAdapter, context).get();
}

::std::future<void>
Test::TestIntfControllerPrx::resumeAdapterAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &TestIntfControllerPrx::_iceI_resumeAdapter, context);
}

::std::function<void()>
Test::TestIntfControllerPrx::resumeAdapterAsync(::std::function<void ()> response,
                                                ::std::function<void(::std::exception_ptr)> ex,
                                                ::std::function<void(bool)> sent,
                                                const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfControllerPrx::_iceI_resumeAdapter, context);
}

/// \cond INTERNAL
void
Test::TestIntfControllerPrx::_iceI_resumeAdapter(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntfController_resumeAdapter_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::TestIntfControllerPrx::ice_staticId()
{
    return TestIntfController::ice_staticId();
}

int
Test::Outer::Inner::TestIntfPrx::op(int iceP_i, int& iceP_j, const ::Ice::Context& context)
{
    auto _result = _makePromiseOutgoing<::std::tuple<int, int>>(true, this, &TestIntfPrx::_iceI_op, iceP_i, context).get();
    iceP_j = ::std::get<1>(_result);
    return ::std::get<0>(_result);
}

::std::future<::std::tuple<int, int>>
Test::Outer::Inner::TestIntfPrx::opAsync(int iceP_i, const ::Ice::Context& context)
{
    return _makePromiseOutgoing<::std::tuple<int, int>, ::std::promise>(false, this, &TestIntfPrx::_iceI_op, iceP_i, context);
}

::std::function<void()>
Test::Outer::Inner::TestIntfPrx::opAsync(int iceP_i,
                                         ::std::function<void (int, int)> response,
                                         ::std::function<void(::std::exception_ptr)> ex,
                                         ::std::function<void(bool)> sent,
                                         const ::Ice::Context& context)
{
    auto _responseCb = [response](::std::tuple<int, int>&& _result)
    {
        response(::std::get<0>(_result), ::std::get<1>(_result));
    };
    return _makeLambdaOutgoing<::std::tuple<int, int>>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::Outer::Inner::TestIntfPrx::_iceI_op, iceP_i, context);
}

/// \cond INTERNAL
void
Test::Outer::Inner::TestIntfPrx::_iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<int, int>>>& outAsync, int iceP_i, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Outer_Inner_TestIntf_op_name);
    outAsync->invoke(iceC_Test_Outer_Inner_TestIntf_op_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_i);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::tuple<int, int> v;
            istr->readAll(::std::get<1>(v), ::std::get<0>(v));
            return v;
        });
}
/// \endcond

const ::std::string&
Test::Outer::Inner::TestIntfPrx::ice_staticId()
{
    return TestIntf::ice_staticId();
}

Test::TestIntfException::~TestIntfException()
{
}

const ::std::string&
Test::TestIntfException::ice_staticId()
{
    static const ::std::string typeId = "::Test::TestIntfException";
    return typeId;
}

bool
Test::PingReply::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_PingReply_ids, iceC_Test_PingReply_ids + 2, s);
}

::std::vector<::std::string>
Test::PingReply::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_PingReply_ids[0], &iceC_Test_PingReply_ids[2]);
}

::std::string
Test::PingReply::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::PingReply::ice_staticId()
{
    static const ::std::string typeId = "::Test::PingReply";
    return typeId;
}

/// \cond INTERNAL
bool
Test::PingReply::_iceD_reply(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->reply(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::PingReply::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_PingReply_ops, iceC_Test_PingReply_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_PingReply_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_reply(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::TestIntf::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_TestIntf_ids, iceC_Test_TestIntf_ids + 2, s);
}

::std::vector<::std::string>
Test::TestIntf::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_TestIntf_ids[0], &iceC_Test_TestIntf_ids[2]);
}

::std::string
Test::TestIntf::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::TestIntf::ice_staticId()
{
    static const ::std::string typeId = "::Test::TestIntf";
    return typeId;
}

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->op(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opWithPayload(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::ByteSeq iceP_seq;
    istr->readAll(iceP_seq);
    inS.endReadParams();
    this->opWithPayload(::std::move(iceP_seq), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opWithResult(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    int ret = this->opWithResult(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opWithUE(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->opWithUE(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opBatch(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->opBatch(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opBatchCount(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    int ret = this->opBatchCount(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_waitForBatch(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_count;
    istr->readAll(iceP_count);
    inS.endReadParams();
    bool ret = this->waitForBatch(iceP_count, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_close(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CloseMode iceP_mode;
    istr->readAll(iceP_mode);
    inS.endReadParams();
    this->close(iceP_mode, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_sleep(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_ms;
    istr->readAll(iceP_ms);
    inS.endReadParams();
    this->sleep(iceP_ms, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_startDispatch(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->startDispatchAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_finishDispatch(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->finishDispatch(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_supportsAMD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->supportsAMD(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_supportsFunctionalTests(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->supportsFunctionalTests(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opBool(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_b;
    istr->readAll(iceP_b);
    inS.endReadParams();
    bool ret = this->opBool(iceP_b, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opByte(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::Byte iceP_b;
    istr->readAll(iceP_b);
    inS.endReadParams();
    ::Ice::Byte ret = this->opByte(iceP_b, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opShort(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    short iceP_s;
    istr->readAll(iceP_s);
    inS.endReadParams();
    short ret = this->opShort(iceP_s, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opInt(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    int ret = this->opInt(iceP_i, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opLong(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    long long int iceP_l;
    istr->readAll(iceP_l);
    inS.endReadParams();
    long long int ret = this->opLong(iceP_l, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opFloat(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_f;
    istr->readAll(iceP_f);
    inS.endReadParams();
    float ret = this->opFloat(iceP_f, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_opDouble(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    double iceP_d;
    istr->readAll(iceP_d);
    inS.endReadParams();
    double ret = this->opDouble(iceP_d, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_pingBiDir(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<PingReplyPrx> iceP_reply;
    istr->readAll(iceP_reply);
    inS.endReadParams();
    this->pingBiDir(::std::move(iceP_reply), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_TestIntf_ops, iceC_Test_TestIntf_ops + 26, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_TestIntf_ops)
    {
        case 0:
        {
            return _iceD_close(in, current);
        }
        case 1:
        {
            return _iceD_finishDispatch(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_op(in, current);
        }
        case 7:
        {
            return _iceD_opBatch(in, current);
        }
        case 8:
        {
            return _iceD_opBatchCount(in, current);
        }
        case 9:
        {
            return _iceD_opBool(in, current);
        }
        case 10:
        {
            return _iceD_opByte(in, current);
        }
        case 11:
        {
            return _iceD_opDouble(in, current);
        }
        case 12:
        {
            return _iceD_opFloat(in, current);
        }
        case 13:
        {
            return _iceD_opInt(in, current);
        }
        case 14:
        {
            return _iceD_opLong(in, current);
        }
        case 15:
        {
            return _iceD_opShort(in, current);
        }
        case 16:
        {
            return _iceD_opWithPayload(in, current);
        }
        case 17:
        {
            return _iceD_opWithResult(in, current);
        }
        case 18:
        {
            return _iceD_opWithUE(in, current);
        }
        case 19:
        {
            return _iceD_pingBiDir(in, current);
        }
        case 20:
        {
            return _iceD_shutdown(in, current);
        }
        case 21:
        {
            return _iceD_sleep(in, current);
        }
        case 22:
        {
            return _iceD_startDispatch(in, current);
        }
        case 23:
        {
            return _iceD_supportsAMD(in, current);
        }
        case 24:
        {
            return _iceD_supportsFunctionalTests(in, current);
        }
        case 25:
        {
            return _iceD_waitForBatch(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::TestIntfController::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_TestIntfController_ids, iceC_Test_TestIntfController_ids + 2, s);
}

::std::vector<::std::string>
Test::TestIntfController::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_TestIntfController_ids[0], &iceC_Test_TestIntfController_ids[2]);
}

::std::string
Test::TestIntfController::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::TestIntfController::ice_staticId()
{
    static const ::std::string typeId = "::Test::TestIntfController";
    return typeId;
}

/// \cond INTERNAL
bool
Test::TestIntfController::_iceD_holdAdapter(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->holdAdapter(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntfController::_iceD_resumeAdapter(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->resumeAdapter(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntfController::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_TestIntfController_ops, iceC_Test_TestIntfController_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_TestIntfController_ops)
    {
        case 0:
        {
            return _iceD_holdAdapter(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_resumeAdapter(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Outer::Inner::TestIntf::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Outer_Inner_TestIntf_ids, iceC_Test_Outer_Inner_TestIntf_ids + 2, s);
}

::std::vector<::std::string>
Test::Outer::Inner::TestIntf::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Outer_Inner_TestIntf_ids[0], &iceC_Test_Outer_Inner_TestIntf_ids[2]);
}

::std::string
Test::Outer::Inner::TestIntf::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Outer::Inner::TestIntf::ice_staticId()
{
    static const ::std::string typeId = "::Test::Outer::Inner::TestIntf";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Outer::Inner::TestIntf::_iceD_op(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_i;
    istr->readAll(iceP_i);
    inS.endReadParams();
    int iceP_j;
    int ret = this->op(iceP_i, iceP_j, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_j, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Outer::Inner::TestIntf::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Outer_Inner_TestIntf_ops, iceC_Test_Outer_Inner_TestIntf_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Outer_Inner_TestIntf_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_op(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
