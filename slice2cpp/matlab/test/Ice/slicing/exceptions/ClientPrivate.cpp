//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <ClientPrivate.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Base> iceC_Test_Base_init("::Test::Base");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::KnownDerived> iceC_Test_KnownDerived_init("::Test::KnownDerived");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::KnownIntermediate> iceC_Test_KnownIntermediate_init("::Test::KnownIntermediate");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::KnownMostDerived> iceC_Test_KnownMostDerived_init("::Test::KnownMostDerived");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::KnownPreserved> iceC_Test_KnownPreserved_init("::Test::KnownPreserved");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::KnownPreservedDerived> iceC_Test_KnownPreservedDerived_init("::Test::KnownPreservedDerived");

const ::IceInternal::DefaultValueFactoryInit<::Test::BaseClass> iceC_Test_BaseClass_init("::Test::BaseClass");

const ::std::string iceC_Test_Relay_ids[2] =
{
    "::Ice::Object",
    "::Test::Relay"
};
const ::std::string iceC_Test_Relay_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "knownPreservedAsBase",
    "knownPreservedAsKnownPreserved",
    "unknownPreservedAsBase",
    "unknownPreservedAsKnownPreserved"
};
const ::std::string iceC_Test_Relay_knownPreservedAsBase_name = "knownPreservedAsBase";
const ::std::string iceC_Test_Relay_knownPreservedAsKnownPreserved_name = "knownPreservedAsKnownPreserved";
const ::std::string iceC_Test_Relay_unknownPreservedAsBase_name = "unknownPreservedAsBase";
const ::std::string iceC_Test_Relay_unknownPreservedAsKnownPreserved_name = "unknownPreservedAsKnownPreserved";

const ::std::string iceC_Test_TestIntf_ids[2] =
{
    "::Ice::Object",
    "::Test::TestIntf"
};
const ::std::string iceC_Test_TestIntf_ops[] =
{
    "baseAsBase",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "knownDerivedAsBase",
    "knownDerivedAsKnownDerived",
    "knownIntermediateAsBase",
    "knownIntermediateAsKnownIntermediate",
    "knownMostDerivedAsBase",
    "knownMostDerivedAsKnownIntermediate",
    "knownMostDerivedAsKnownMostDerived",
    "knownPreservedAsBase",
    "knownPreservedAsKnownPreserved",
    "relayKnownPreservedAsBase",
    "relayKnownPreservedAsKnownPreserved",
    "relayUnknownPreservedAsBase",
    "relayUnknownPreservedAsKnownPreserved",
    "shutdown",
    "unknownDerivedAsBase",
    "unknownIntermediateAsBase",
    "unknownMostDerived1AsBase",
    "unknownMostDerived1AsKnownIntermediate",
    "unknownMostDerived2AsBase",
    "unknownMostDerived2AsBaseCompact",
    "unknownPreservedAsBase",
    "unknownPreservedAsKnownPreserved"
};
const ::std::string iceC_Test_TestIntf_baseAsBase_name = "baseAsBase";
const ::std::string iceC_Test_TestIntf_unknownDerivedAsBase_name = "unknownDerivedAsBase";
const ::std::string iceC_Test_TestIntf_knownDerivedAsBase_name = "knownDerivedAsBase";
const ::std::string iceC_Test_TestIntf_knownDerivedAsKnownDerived_name = "knownDerivedAsKnownDerived";
const ::std::string iceC_Test_TestIntf_unknownIntermediateAsBase_name = "unknownIntermediateAsBase";
const ::std::string iceC_Test_TestIntf_knownIntermediateAsBase_name = "knownIntermediateAsBase";
const ::std::string iceC_Test_TestIntf_knownMostDerivedAsBase_name = "knownMostDerivedAsBase";
const ::std::string iceC_Test_TestIntf_knownIntermediateAsKnownIntermediate_name = "knownIntermediateAsKnownIntermediate";
const ::std::string iceC_Test_TestIntf_knownMostDerivedAsKnownIntermediate_name = "knownMostDerivedAsKnownIntermediate";
const ::std::string iceC_Test_TestIntf_knownMostDerivedAsKnownMostDerived_name = "knownMostDerivedAsKnownMostDerived";
const ::std::string iceC_Test_TestIntf_unknownMostDerived1AsBase_name = "unknownMostDerived1AsBase";
const ::std::string iceC_Test_TestIntf_unknownMostDerived1AsKnownIntermediate_name = "unknownMostDerived1AsKnownIntermediate";
const ::std::string iceC_Test_TestIntf_unknownMostDerived2AsBase_name = "unknownMostDerived2AsBase";
const ::std::string iceC_Test_TestIntf_unknownMostDerived2AsBaseCompact_name = "unknownMostDerived2AsBaseCompact";
const ::std::string iceC_Test_TestIntf_knownPreservedAsBase_name = "knownPreservedAsBase";
const ::std::string iceC_Test_TestIntf_knownPreservedAsKnownPreserved_name = "knownPreservedAsKnownPreserved";
const ::std::string iceC_Test_TestIntf_relayKnownPreservedAsBase_name = "relayKnownPreservedAsBase";
const ::std::string iceC_Test_TestIntf_relayKnownPreservedAsKnownPreserved_name = "relayKnownPreservedAsKnownPreserved";
const ::std::string iceC_Test_TestIntf_unknownPreservedAsBase_name = "unknownPreservedAsBase";
const ::std::string iceC_Test_TestIntf_unknownPreservedAsKnownPreserved_name = "unknownPreservedAsKnownPreserved";
const ::std::string iceC_Test_TestIntf_relayUnknownPreservedAsBase_name = "relayUnknownPreservedAsBase";
const ::std::string iceC_Test_TestIntf_relayUnknownPreservedAsKnownPreserved_name = "relayUnknownPreservedAsKnownPreserved";
const ::std::string iceC_Test_TestIntf_shutdown_name = "shutdown";

const ::IceInternal::DefaultValueFactoryInit<::Test::PreservedClass> iceC_Test_PreservedClass_init("::Test::PreservedClass");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Preserved1> iceC_Test_Preserved1_init("::Test::Preserved1");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Preserved2> iceC_Test_Preserved2_init("::Test::Preserved2");

}

void
Test::RelayPrx::knownPreservedAsBase(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &RelayPrx::_iceI_knownPreservedAsBase, context).get();
}

::std::future<void>
Test::RelayPrx::knownPreservedAsBaseAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &RelayPrx::_iceI_knownPreservedAsBase, context);
}

::std::function<void()>
Test::RelayPrx::knownPreservedAsBaseAsync(::std::function<void ()> response,
                                          ::std::function<void(::std::exception_ptr)> ex,
                                          ::std::function<void(bool)> sent,
                                          const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::RelayPrx::_iceI_knownPreservedAsBase, context);
}

/// \cond INTERNAL
void
Test::RelayPrx::_iceI_knownPreservedAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Relay_knownPreservedAsBase_name);
    outAsync->invoke(iceC_Test_Relay_knownPreservedAsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const Base&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::RelayPrx::knownPreservedAsKnownPreserved(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &RelayPrx::_iceI_knownPreservedAsKnownPreserved, context).get();
}

::std::future<void>
Test::RelayPrx::knownPreservedAsKnownPreservedAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &RelayPrx::_iceI_knownPreservedAsKnownPreserved, context);
}

::std::function<void()>
Test::RelayPrx::knownPreservedAsKnownPreservedAsync(::std::function<void ()> response,
                                                    ::std::function<void(::std::exception_ptr)> ex,
                                                    ::std::function<void(bool)> sent,
                                                    const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::RelayPrx::_iceI_knownPreservedAsKnownPreserved, context);
}

/// \cond INTERNAL
void
Test::RelayPrx::_iceI_knownPreservedAsKnownPreserved(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Relay_knownPreservedAsKnownPreserved_name);
    outAsync->invoke(iceC_Test_Relay_knownPreservedAsKnownPreserved_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const KnownPreserved&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::RelayPrx::unknownPreservedAsBase(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &RelayPrx::_iceI_unknownPreservedAsBase, context).get();
}

::std::future<void>
Test::RelayPrx::unknownPreservedAsBaseAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &RelayPrx::_iceI_unknownPreservedAsBase, context);
}

::std::function<void()>
Test::RelayPrx::unknownPreservedAsBaseAsync(::std::function<void ()> response,
                                            ::std::function<void(::std::exception_ptr)> ex,
                                            ::std::function<void(bool)> sent,
                                            const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::RelayPrx::_iceI_unknownPreservedAsBase, context);
}

/// \cond INTERNAL
void
Test::RelayPrx::_iceI_unknownPreservedAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Relay_unknownPreservedAsBase_name);
    outAsync->invoke(iceC_Test_Relay_unknownPreservedAsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const Base&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::RelayPrx::unknownPreservedAsKnownPreserved(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &RelayPrx::_iceI_unknownPreservedAsKnownPreserved, context).get();
}

::std::future<void>
Test::RelayPrx::unknownPreservedAsKnownPreservedAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &RelayPrx::_iceI_unknownPreservedAsKnownPreserved, context);
}

::std::function<void()>
Test::RelayPrx::unknownPreservedAsKnownPreservedAsync(::std::function<void ()> response,
                                                      ::std::function<void(::std::exception_ptr)> ex,
                                                      ::std::function<void(bool)> sent,
                                                      const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::RelayPrx::_iceI_unknownPreservedAsKnownPreserved, context);
}

/// \cond INTERNAL
void
Test::RelayPrx::_iceI_unknownPreservedAsKnownPreserved(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Relay_unknownPreservedAsKnownPreserved_name);
    outAsync->invoke(iceC_Test_Relay_unknownPreservedAsKnownPreserved_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const KnownPreserved&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

const ::std::string&
Test::RelayPrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::Relay";
    return typeId;
}

void
Test::TestIntfPrx::baseAsBase(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_baseAsBase, context).get();
}

::std::future<void>
Test::TestIntfPrx::baseAsBaseAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_baseAsBase, context);
}

::std::function<void()>
Test::TestIntfPrx::baseAsBaseAsync(::std::function<void ()> response,
                                   ::std::function<void(::std::exception_ptr)> ex,
                                   ::std::function<void(bool)> sent,
                                   const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_baseAsBase, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_baseAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_baseAsBase_name);
    outAsync->invoke(iceC_Test_TestIntf_baseAsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const Base&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::unknownDerivedAsBase(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_unknownDerivedAsBase, context).get();
}

::std::future<void>
Test::TestIntfPrx::unknownDerivedAsBaseAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_unknownDerivedAsBase, context);
}

::std::function<void()>
Test::TestIntfPrx::unknownDerivedAsBaseAsync(::std::function<void ()> response,
                                             ::std::function<void(::std::exception_ptr)> ex,
                                             ::std::function<void(bool)> sent,
                                             const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_unknownDerivedAsBase, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_unknownDerivedAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_unknownDerivedAsBase_name);
    outAsync->invoke(iceC_Test_TestIntf_unknownDerivedAsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const Base&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::knownDerivedAsBase(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_knownDerivedAsBase, context).get();
}

::std::future<void>
Test::TestIntfPrx::knownDerivedAsBaseAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_knownDerivedAsBase, context);
}

::std::function<void()>
Test::TestIntfPrx::knownDerivedAsBaseAsync(::std::function<void ()> response,
                                           ::std::function<void(::std::exception_ptr)> ex,
                                           ::std::function<void(bool)> sent,
                                           const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_knownDerivedAsBase, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_knownDerivedAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_knownDerivedAsBase_name);
    outAsync->invoke(iceC_Test_TestIntf_knownDerivedAsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const Base&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::knownDerivedAsKnownDerived(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_knownDerivedAsKnownDerived, context).get();
}

::std::future<void>
Test::TestIntfPrx::knownDerivedAsKnownDerivedAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_knownDerivedAsKnownDerived, context);
}

::std::function<void()>
Test::TestIntfPrx::knownDerivedAsKnownDerivedAsync(::std::function<void ()> response,
                                                   ::std::function<void(::std::exception_ptr)> ex,
                                                   ::std::function<void(bool)> sent,
                                                   const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_knownDerivedAsKnownDerived, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_knownDerivedAsKnownDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_knownDerivedAsKnownDerived_name);
    outAsync->invoke(iceC_Test_TestIntf_knownDerivedAsKnownDerived_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const KnownDerived&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::unknownIntermediateAsBase(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_unknownIntermediateAsBase, context).get();
}

::std::future<void>
Test::TestIntfPrx::unknownIntermediateAsBaseAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_unknownIntermediateAsBase, context);
}

::std::function<void()>
Test::TestIntfPrx::unknownIntermediateAsBaseAsync(::std::function<void ()> response,
                                                  ::std::function<void(::std::exception_ptr)> ex,
                                                  ::std::function<void(bool)> sent,
                                                  const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_unknownIntermediateAsBase, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_unknownIntermediateAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_unknownIntermediateAsBase_name);
    outAsync->invoke(iceC_Test_TestIntf_unknownIntermediateAsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const Base&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::knownIntermediateAsBase(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_knownIntermediateAsBase, context).get();
}

::std::future<void>
Test::TestIntfPrx::knownIntermediateAsBaseAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_knownIntermediateAsBase, context);
}

::std::function<void()>
Test::TestIntfPrx::knownIntermediateAsBaseAsync(::std::function<void ()> response,
                                                ::std::function<void(::std::exception_ptr)> ex,
                                                ::std::function<void(bool)> sent,
                                                const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_knownIntermediateAsBase, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_knownIntermediateAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_knownIntermediateAsBase_name);
    outAsync->invoke(iceC_Test_TestIntf_knownIntermediateAsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const Base&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::knownMostDerivedAsBase(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_knownMostDerivedAsBase, context).get();
}

::std::future<void>
Test::TestIntfPrx::knownMostDerivedAsBaseAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_knownMostDerivedAsBase, context);
}

::std::function<void()>
Test::TestIntfPrx::knownMostDerivedAsBaseAsync(::std::function<void ()> response,
                                               ::std::function<void(::std::exception_ptr)> ex,
                                               ::std::function<void(bool)> sent,
                                               const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_knownMostDerivedAsBase, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_knownMostDerivedAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_knownMostDerivedAsBase_name);
    outAsync->invoke(iceC_Test_TestIntf_knownMostDerivedAsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const Base&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::knownIntermediateAsKnownIntermediate(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_knownIntermediateAsKnownIntermediate, context).get();
}

::std::future<void>
Test::TestIntfPrx::knownIntermediateAsKnownIntermediateAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_knownIntermediateAsKnownIntermediate, context);
}

::std::function<void()>
Test::TestIntfPrx::knownIntermediateAsKnownIntermediateAsync(::std::function<void ()> response,
                                                             ::std::function<void(::std::exception_ptr)> ex,
                                                             ::std::function<void(bool)> sent,
                                                             const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_knownIntermediateAsKnownIntermediate, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_knownIntermediateAsKnownIntermediate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_knownIntermediateAsKnownIntermediate_name);
    outAsync->invoke(iceC_Test_TestIntf_knownIntermediateAsKnownIntermediate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const KnownIntermediate&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::knownMostDerivedAsKnownIntermediate(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_knownMostDerivedAsKnownIntermediate, context).get();
}

::std::future<void>
Test::TestIntfPrx::knownMostDerivedAsKnownIntermediateAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_knownMostDerivedAsKnownIntermediate, context);
}

::std::function<void()>
Test::TestIntfPrx::knownMostDerivedAsKnownIntermediateAsync(::std::function<void ()> response,
                                                            ::std::function<void(::std::exception_ptr)> ex,
                                                            ::std::function<void(bool)> sent,
                                                            const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_knownMostDerivedAsKnownIntermediate, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_knownMostDerivedAsKnownIntermediate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_knownMostDerivedAsKnownIntermediate_name);
    outAsync->invoke(iceC_Test_TestIntf_knownMostDerivedAsKnownIntermediate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const KnownIntermediate&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::knownMostDerivedAsKnownMostDerived(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_knownMostDerivedAsKnownMostDerived, context).get();
}

::std::future<void>
Test::TestIntfPrx::knownMostDerivedAsKnownMostDerivedAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_knownMostDerivedAsKnownMostDerived, context);
}

::std::function<void()>
Test::TestIntfPrx::knownMostDerivedAsKnownMostDerivedAsync(::std::function<void ()> response,
                                                           ::std::function<void(::std::exception_ptr)> ex,
                                                           ::std::function<void(bool)> sent,
                                                           const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_knownMostDerivedAsKnownMostDerived, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_knownMostDerivedAsKnownMostDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_knownMostDerivedAsKnownMostDerived_name);
    outAsync->invoke(iceC_Test_TestIntf_knownMostDerivedAsKnownMostDerived_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const KnownMostDerived&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::unknownMostDerived1AsBase(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_unknownMostDerived1AsBase, context).get();
}

::std::future<void>
Test::TestIntfPrx::unknownMostDerived1AsBaseAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_unknownMostDerived1AsBase, context);
}

::std::function<void()>
Test::TestIntfPrx::unknownMostDerived1AsBaseAsync(::std::function<void ()> response,
                                                  ::std::function<void(::std::exception_ptr)> ex,
                                                  ::std::function<void(bool)> sent,
                                                  const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_unknownMostDerived1AsBase, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_unknownMostDerived1AsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_unknownMostDerived1AsBase_name);
    outAsync->invoke(iceC_Test_TestIntf_unknownMostDerived1AsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const Base&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::unknownMostDerived1AsKnownIntermediate(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_unknownMostDerived1AsKnownIntermediate, context).get();
}

::std::future<void>
Test::TestIntfPrx::unknownMostDerived1AsKnownIntermediateAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_unknownMostDerived1AsKnownIntermediate, context);
}

::std::function<void()>
Test::TestIntfPrx::unknownMostDerived1AsKnownIntermediateAsync(::std::function<void ()> response,
                                                               ::std::function<void(::std::exception_ptr)> ex,
                                                               ::std::function<void(bool)> sent,
                                                               const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_unknownMostDerived1AsKnownIntermediate, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_unknownMostDerived1AsKnownIntermediate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_unknownMostDerived1AsKnownIntermediate_name);
    outAsync->invoke(iceC_Test_TestIntf_unknownMostDerived1AsKnownIntermediate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const KnownIntermediate&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::unknownMostDerived2AsBase(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_unknownMostDerived2AsBase, context).get();
}

::std::future<void>
Test::TestIntfPrx::unknownMostDerived2AsBaseAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_unknownMostDerived2AsBase, context);
}

::std::function<void()>
Test::TestIntfPrx::unknownMostDerived2AsBaseAsync(::std::function<void ()> response,
                                                  ::std::function<void(::std::exception_ptr)> ex,
                                                  ::std::function<void(bool)> sent,
                                                  const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_unknownMostDerived2AsBase, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_unknownMostDerived2AsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_unknownMostDerived2AsBase_name);
    outAsync->invoke(iceC_Test_TestIntf_unknownMostDerived2AsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const Base&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::unknownMostDerived2AsBaseCompact(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_unknownMostDerived2AsBaseCompact, context).get();
}

::std::future<void>
Test::TestIntfPrx::unknownMostDerived2AsBaseCompactAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_unknownMostDerived2AsBaseCompact, context);
}

::std::function<void()>
Test::TestIntfPrx::unknownMostDerived2AsBaseCompactAsync(::std::function<void ()> response,
                                                         ::std::function<void(::std::exception_ptr)> ex,
                                                         ::std::function<void(bool)> sent,
                                                         const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_unknownMostDerived2AsBaseCompact, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_unknownMostDerived2AsBaseCompact(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_unknownMostDerived2AsBaseCompact_name);
    outAsync->invoke(iceC_Test_TestIntf_unknownMostDerived2AsBaseCompact_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::CompactFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const Base&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::knownPreservedAsBase(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_knownPreservedAsBase, context).get();
}

::std::future<void>
Test::TestIntfPrx::knownPreservedAsBaseAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_knownPreservedAsBase, context);
}

::std::function<void()>
Test::TestIntfPrx::knownPreservedAsBaseAsync(::std::function<void ()> response,
                                             ::std::function<void(::std::exception_ptr)> ex,
                                             ::std::function<void(bool)> sent,
                                             const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_knownPreservedAsBase, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_knownPreservedAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_knownPreservedAsBase_name);
    outAsync->invoke(iceC_Test_TestIntf_knownPreservedAsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const Base&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::knownPreservedAsKnownPreserved(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_knownPreservedAsKnownPreserved, context).get();
}

::std::future<void>
Test::TestIntfPrx::knownPreservedAsKnownPreservedAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_knownPreservedAsKnownPreserved, context);
}

::std::function<void()>
Test::TestIntfPrx::knownPreservedAsKnownPreservedAsync(::std::function<void ()> response,
                                                       ::std::function<void(::std::exception_ptr)> ex,
                                                       ::std::function<void(bool)> sent,
                                                       const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_knownPreservedAsKnownPreserved, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_knownPreservedAsKnownPreserved(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_knownPreservedAsKnownPreserved_name);
    outAsync->invoke(iceC_Test_TestIntf_knownPreservedAsKnownPreserved_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const KnownPreserved&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::relayKnownPreservedAsBase(const ::std::optional<RelayPrx>& iceP_r, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_relayKnownPreservedAsBase, iceP_r, context).get();
}

::std::future<void>
Test::TestIntfPrx::relayKnownPreservedAsBaseAsync(const ::std::optional<RelayPrx>& iceP_r, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_relayKnownPreservedAsBase, iceP_r, context);
}

::std::function<void()>
Test::TestIntfPrx::relayKnownPreservedAsBaseAsync(const ::std::optional<RelayPrx>& iceP_r,
                                                  ::std::function<void ()> response,
                                                  ::std::function<void(::std::exception_ptr)> ex,
                                                  ::std::function<void(bool)> sent,
                                                  const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_relayKnownPreservedAsBase, iceP_r, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_relayKnownPreservedAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::optional<RelayPrx>& iceP_r, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_relayKnownPreservedAsBase_name);
    outAsync->invoke(iceC_Test_TestIntf_relayKnownPreservedAsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_r);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const Base&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::relayKnownPreservedAsKnownPreserved(const ::std::optional<RelayPrx>& iceP_r, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_relayKnownPreservedAsKnownPreserved, iceP_r, context).get();
}

::std::future<void>
Test::TestIntfPrx::relayKnownPreservedAsKnownPreservedAsync(const ::std::optional<RelayPrx>& iceP_r, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_relayKnownPreservedAsKnownPreserved, iceP_r, context);
}

::std::function<void()>
Test::TestIntfPrx::relayKnownPreservedAsKnownPreservedAsync(const ::std::optional<RelayPrx>& iceP_r,
                                                            ::std::function<void ()> response,
                                                            ::std::function<void(::std::exception_ptr)> ex,
                                                            ::std::function<void(bool)> sent,
                                                            const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_relayKnownPreservedAsKnownPreserved, iceP_r, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_relayKnownPreservedAsKnownPreserved(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::optional<RelayPrx>& iceP_r, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_relayKnownPreservedAsKnownPreserved_name);
    outAsync->invoke(iceC_Test_TestIntf_relayKnownPreservedAsKnownPreserved_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_r);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const KnownPreserved&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::unknownPreservedAsBase(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_unknownPreservedAsBase, context).get();
}

::std::future<void>
Test::TestIntfPrx::unknownPreservedAsBaseAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_unknownPreservedAsBase, context);
}

::std::function<void()>
Test::TestIntfPrx::unknownPreservedAsBaseAsync(::std::function<void ()> response,
                                               ::std::function<void(::std::exception_ptr)> ex,
                                               ::std::function<void(bool)> sent,
                                               const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_unknownPreservedAsBase, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_unknownPreservedAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_unknownPreservedAsBase_name);
    outAsync->invoke(iceC_Test_TestIntf_unknownPreservedAsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const Base&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::unknownPreservedAsKnownPreserved(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_unknownPreservedAsKnownPreserved, context).get();
}

::std::future<void>
Test::TestIntfPrx::unknownPreservedAsKnownPreservedAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_unknownPreservedAsKnownPreserved, context);
}

::std::function<void()>
Test::TestIntfPrx::unknownPreservedAsKnownPreservedAsync(::std::function<void ()> response,
                                                         ::std::function<void(::std::exception_ptr)> ex,
                                                         ::std::function<void(bool)> sent,
                                                         const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_unknownPreservedAsKnownPreserved, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_unknownPreservedAsKnownPreserved(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_unknownPreservedAsKnownPreserved_name);
    outAsync->invoke(iceC_Test_TestIntf_unknownPreservedAsKnownPreserved_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const KnownPreserved&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::relayUnknownPreservedAsBase(const ::std::optional<RelayPrx>& iceP_r, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_relayUnknownPreservedAsBase, iceP_r, context).get();
}

::std::future<void>
Test::TestIntfPrx::relayUnknownPreservedAsBaseAsync(const ::std::optional<RelayPrx>& iceP_r, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_relayUnknownPreservedAsBase, iceP_r, context);
}

::std::function<void()>
Test::TestIntfPrx::relayUnknownPreservedAsBaseAsync(const ::std::optional<RelayPrx>& iceP_r,
                                                    ::std::function<void ()> response,
                                                    ::std::function<void(::std::exception_ptr)> ex,
                                                    ::std::function<void(bool)> sent,
                                                    const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_relayUnknownPreservedAsBase, iceP_r, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_relayUnknownPreservedAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::optional<RelayPrx>& iceP_r, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_relayUnknownPreservedAsBase_name);
    outAsync->invoke(iceC_Test_TestIntf_relayUnknownPreservedAsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_r);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const Base&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::relayUnknownPreservedAsKnownPreserved(const ::std::optional<RelayPrx>& iceP_r, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_relayUnknownPreservedAsKnownPreserved, iceP_r, context).get();
}

::std::future<void>
Test::TestIntfPrx::relayUnknownPreservedAsKnownPreservedAsync(const ::std::optional<RelayPrx>& iceP_r, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_relayUnknownPreservedAsKnownPreserved, iceP_r, context);
}

::std::function<void()>
Test::TestIntfPrx::relayUnknownPreservedAsKnownPreservedAsync(const ::std::optional<RelayPrx>& iceP_r,
                                                              ::std::function<void ()> response,
                                                              ::std::function<void(::std::exception_ptr)> ex,
                                                              ::std::function<void(bool)> sent,
                                                              const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_relayUnknownPreservedAsKnownPreserved, iceP_r, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_relayUnknownPreservedAsKnownPreserved(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::optional<RelayPrx>& iceP_r, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_TestIntf_relayUnknownPreservedAsKnownPreserved_name);
    outAsync->invoke(iceC_Test_TestIntf_relayUnknownPreservedAsKnownPreserved_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_r);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const KnownPreserved&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::TestIntfPrx::shutdown(const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TestIntfPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::TestIntfPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TestIntfPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::TestIntfPrx::shutdownAsync(::std::function<void ()> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::TestIntfPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_TestIntf_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::TestIntfPrx::ice_staticId()
{
    static const ::std::string typeId = "::Test::TestIntf";
    return typeId;
}

Test::Base::~Base()
{
}

const ::std::string&
Test::Base::ice_staticId()
{
    static const ::std::string typeId = "::Test::Base";
    return typeId;
}

Test::KnownDerived::~KnownDerived()
{
}

const ::std::string&
Test::KnownDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::KnownDerived";
    return typeId;
}

Test::KnownIntermediate::~KnownIntermediate()
{
}

const ::std::string&
Test::KnownIntermediate::ice_staticId()
{
    static const ::std::string typeId = "::Test::KnownIntermediate";
    return typeId;
}

Test::KnownMostDerived::~KnownMostDerived()
{
}

const ::std::string&
Test::KnownMostDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::KnownMostDerived";
    return typeId;
}

Test::KnownPreserved::~KnownPreserved()
{
}

const ::std::string&
Test::KnownPreserved::ice_staticId()
{
    static const ::std::string typeId = "::Test::KnownPreserved";
    return typeId;
}

::std::shared_ptr<::Ice::SlicedData>
Test::KnownPreserved::ice_getSlicedData() const
{
    return _slicedData;
}

/// \cond STREAM
void
Test::KnownPreserved::_write(::Ice::OutputStream* ostr) const
{
    ostr->startException(_slicedData);
    _writeImpl(ostr);
    ostr->endException();
}

void
Test::KnownPreserved::_read(::Ice::InputStream* istr)
{
    istr->startException();
    _readImpl(istr);
    _slicedData = istr->endException(true);
}
/// \endcond

Test::KnownPreservedDerived::~KnownPreservedDerived()
{
}

const ::std::string&
Test::KnownPreservedDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::KnownPreservedDerived";
    return typeId;
}

Test::BaseClass::~BaseClass()
{
}

::std::shared_ptr<::Ice::SlicedData>
Test::BaseClass::ice_getSlicedData() const
{
    return _iceSlicedData;
}

/// \cond STREAM
void
Test::BaseClass::_iceWrite(::Ice::OutputStream* ostr) const
{
    ostr->startValue(_iceSlicedData);
    _iceWriteImpl(ostr);
    ostr->endValue();
}

void
Test::BaseClass::_iceRead(::Ice::InputStream* istr)
{
    istr->startValue();
    _iceReadImpl(istr);
    _iceSlicedData = istr->endValue(true);
}
/// \endcond

const ::std::string&
Test::BaseClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::BaseClass";
    return typeId;
}

Test::PreservedClass::~PreservedClass()
{
}

const ::std::string&
Test::PreservedClass::ice_staticId()
{
    static const ::std::string typeId = "::Test::PreservedClass";
    return typeId;
}

Test::Preserved1::~Preserved1()
{
}

const ::std::string&
Test::Preserved1::ice_staticId()
{
    static const ::std::string typeId = "::Test::Preserved1";
    return typeId;
}

/// \cond STREAM
bool
Test::Preserved1::_usesClasses() const
{
    return true;
}
/// \endcond

Test::Preserved2::~Preserved2()
{
}

const ::std::string&
Test::Preserved2::ice_staticId()
{
    static const ::std::string typeId = "::Test::Preserved2";
    return typeId;
}

bool
Test::Relay::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Relay_ids, iceC_Test_Relay_ids + 2, s);
}

::std::vector<::std::string>
Test::Relay::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Relay_ids[0], &iceC_Test_Relay_ids[2]);
}

::std::string
Test::Relay::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Relay::ice_staticId()
{
    static const ::std::string typeId = "::Test::Relay";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Relay::_iceD_knownPreservedAsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->knownPreservedAsBase(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Relay::_iceD_knownPreservedAsKnownPreserved(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->knownPreservedAsKnownPreserved(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Relay::_iceD_unknownPreservedAsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->unknownPreservedAsBase(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Relay::_iceD_unknownPreservedAsKnownPreserved(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->unknownPreservedAsKnownPreserved(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Relay::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Relay_ops, iceC_Test_Relay_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Relay_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_knownPreservedAsBase(in, current);
        }
        case 5:
        {
            return _iceD_knownPreservedAsKnownPreserved(in, current);
        }
        case 6:
        {
            return _iceD_unknownPreservedAsBase(in, current);
        }
        case 7:
        {
            return _iceD_unknownPreservedAsKnownPreserved(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::TestIntf::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_TestIntf_ids, iceC_Test_TestIntf_ids + 2, s);
}

::std::vector<::std::string>
Test::TestIntf::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_TestIntf_ids[0], &iceC_Test_TestIntf_ids[2]);
}

::std::string
Test::TestIntf::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::TestIntf::ice_staticId()
{
    static const ::std::string typeId = "::Test::TestIntf";
    return typeId;
}

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_baseAsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->baseAsBase(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_unknownDerivedAsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->unknownDerivedAsBase(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_knownDerivedAsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->knownDerivedAsBase(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_knownDerivedAsKnownDerived(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->knownDerivedAsKnownDerived(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_unknownIntermediateAsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->unknownIntermediateAsBase(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_knownIntermediateAsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->knownIntermediateAsBase(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_knownMostDerivedAsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->knownMostDerivedAsBase(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_knownIntermediateAsKnownIntermediate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->knownIntermediateAsKnownIntermediate(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_knownMostDerivedAsKnownIntermediate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->knownMostDerivedAsKnownIntermediate(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_knownMostDerivedAsKnownMostDerived(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->knownMostDerivedAsKnownMostDerived(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_unknownMostDerived1AsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->unknownMostDerived1AsBase(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_unknownMostDerived1AsKnownIntermediate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->unknownMostDerived1AsKnownIntermediate(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_unknownMostDerived2AsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->unknownMostDerived2AsBase(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_unknownMostDerived2AsBaseCompact(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::CompactFormat);
    this->unknownMostDerived2AsBaseCompact(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_knownPreservedAsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->knownPreservedAsBase(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_knownPreservedAsKnownPreserved(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->knownPreservedAsKnownPreserved(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_relayKnownPreservedAsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::optional<RelayPrx> iceP_r;
    istr->readAll(iceP_r);
    inS.endReadParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->relayKnownPreservedAsBase(::std::move(iceP_r), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_relayKnownPreservedAsKnownPreserved(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::optional<RelayPrx> iceP_r;
    istr->readAll(iceP_r);
    inS.endReadParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->relayKnownPreservedAsKnownPreserved(::std::move(iceP_r), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_unknownPreservedAsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->unknownPreservedAsBase(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_unknownPreservedAsKnownPreserved(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->unknownPreservedAsKnownPreserved(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_relayUnknownPreservedAsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::optional<RelayPrx> iceP_r;
    istr->readAll(iceP_r);
    inS.endReadParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->relayUnknownPreservedAsBase(::std::move(iceP_r), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_relayUnknownPreservedAsKnownPreserved(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::optional<RelayPrx> iceP_r;
    istr->readAll(iceP_r);
    inS.endReadParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->relayUnknownPreservedAsKnownPreserved(::std::move(iceP_r), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_TestIntf_ops, iceC_Test_TestIntf_ops + 27, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_TestIntf_ops)
    {
        case 0:
        {
            return _iceD_baseAsBase(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_knownDerivedAsBase(in, current);
        }
        case 6:
        {
            return _iceD_knownDerivedAsKnownDerived(in, current);
        }
        case 7:
        {
            return _iceD_knownIntermediateAsBase(in, current);
        }
        case 8:
        {
            return _iceD_knownIntermediateAsKnownIntermediate(in, current);
        }
        case 9:
        {
            return _iceD_knownMostDerivedAsBase(in, current);
        }
        case 10:
        {
            return _iceD_knownMostDerivedAsKnownIntermediate(in, current);
        }
        case 11:
        {
            return _iceD_knownMostDerivedAsKnownMostDerived(in, current);
        }
        case 12:
        {
            return _iceD_knownPreservedAsBase(in, current);
        }
        case 13:
        {
            return _iceD_knownPreservedAsKnownPreserved(in, current);
        }
        case 14:
        {
            return _iceD_relayKnownPreservedAsBase(in, current);
        }
        case 15:
        {
            return _iceD_relayKnownPreservedAsKnownPreserved(in, current);
        }
        case 16:
        {
            return _iceD_relayUnknownPreservedAsBase(in, current);
        }
        case 17:
        {
            return _iceD_relayUnknownPreservedAsKnownPreserved(in, current);
        }
        case 18:
        {
            return _iceD_shutdown(in, current);
        }
        case 19:
        {
            return _iceD_unknownDerivedAsBase(in, current);
        }
        case 20:
        {
            return _iceD_unknownIntermediateAsBase(in, current);
        }
        case 21:
        {
            return _iceD_unknownMostDerived1AsBase(in, current);
        }
        case 22:
        {
            return _iceD_unknownMostDerived1AsKnownIntermediate(in, current);
        }
        case 23:
        {
            return _iceD_unknownMostDerived2AsBase(in, current);
        }
        case 24:
        {
            return _iceD_unknownMostDerived2AsBaseCompact(in, current);
        }
        case 25:
        {
            return _iceD_unknownPreservedAsBase(in, current);
        }
        case 26:
        {
            return _iceD_unknownPreservedAsKnownPreserved(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
