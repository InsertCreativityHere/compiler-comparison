//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __ClientPrivate_h__
#define __ClientPrivate_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Test.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

class D;
class Initial2;
class Initial2Prx;

}

namespace Test
{

}

namespace Test
{

class Initial2 : public virtual ::Ice::Object
{
public:

    using ProxyType = Initial2Prx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void opClassAndUnknownOptional(::std::shared_ptr<A> p, std::optional<::std::shared_ptr<::Ice::Value>> o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opClassAndUnknownOptional(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opVoid(std::optional<int> a, std::optional<::std::string> v, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opVoid(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test
{

class D : public ::Ice::ValueHelper<D, B>
{
public:

    virtual ~D();

    D() = default;

    D(const D&) = default;
    D(D&&) = default;
    D& operator=(const D&) = default;
    D& operator=(D&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    D(int requiredA, const std::optional<int>& ma, const std::optional<int>& mb, const std::optional<int>& mc, int requiredB, const std::optional<int>& md, const ::std::string& ds, const std::optional<::Test::StringSeq>& seq, const std::optional<::std::shared_ptr<::Test::A>>& ao) :
        Ice::ValueHelper<D, B>(requiredA, ma, mb, mc, requiredB, md),
        ds(ds),
        seq(seq),
        ao(ao)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const std::optional<int>&, const std::optional<int>&, const std::optional<int>&, const int&, const std::optional<int>&, const ::std::string&, const std::optional<::Test::StringSeq>&, const std::optional<::std::shared_ptr<::Test::A>>&> ice_tuple() const
    {
        return std::tie(requiredA, ma, mb, mc, requiredB, md, ds, seq, ao);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string ds;
    std::optional<::Test::StringSeq> seq;
    std::optional<::std::shared_ptr<::Test::A>> ao;
};

/// \cond INTERNAL
static D _iceS_D_init;
/// \endcond

}

namespace Test
{

class Initial2Prx : public ::Ice::Proxy<Initial2Prx, ::Ice::ObjectPrx>
{
public:

    void opClassAndUnknownOptional(const ::std::shared_ptr<A>& p, const std::optional<::std::shared_ptr<::Ice::Value>>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &Initial2Prx::_iceI_opClassAndUnknownOptional, p, o, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opClassAndUnknownOptionalAsync(const ::std::shared_ptr<A>& p, const std::optional<::std::shared_ptr<::Ice::Value>>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &Initial2Prx::_iceI_opClassAndUnknownOptional, p, o, context);
    }

    ::std::function<void()>
    opClassAndUnknownOptionalAsync(const ::std::shared_ptr<A>& p, const std::optional<::std::shared_ptr<::Ice::Value>>& o,
                                   ::std::function<void()> response,
                                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                   ::std::function<void(bool)> sent = nullptr,
                                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Initial2Prx::_iceI_opClassAndUnknownOptional, p, o, context);
    }

    /// \cond INTERNAL
    void _iceI_opClassAndUnknownOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<A>&, const std::optional<::std::shared_ptr<::Ice::Value>>&, const ::Ice::Context&);
    /// \endcond

    void opVoid(const std::optional<int>& a, const std::optional<::std::string>& v, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &Initial2Prx::_iceI_opVoid, a, v, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opVoidAsync(const std::optional<int>& a, const std::optional<::std::string>& v, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &Initial2Prx::_iceI_opVoid, a, v, context);
    }

    ::std::function<void()>
    opVoidAsync(const std::optional<int>& a, const std::optional<::std::string>& v,
                ::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Initial2Prx::_iceI_opVoid, a, v, context);
    }

    /// \cond INTERNAL
    void _iceI_opVoid(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const std::optional<int>&, const std::optional<::std::string>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit Initial2Prx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    /// \cond INTERNAL
    Initial2Prx(const ::IceInternal::ReferencePtr& ref) : ::Ice::ObjectPrx(ref)
    {
    }
    /// \endcond

protected:

    /// \cond INTERNAL
    Initial2Prx() = default;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter<::Test::D, S>
{
    static void write(S* ostr, const ::Test::D& v)
    {
        ostr->writeAll(v.ds);
        ostr->writeAll({990, 1000}, v.seq, v.ao);
    }
};

template<typename S>
struct StreamReader<::Test::D, S>
{
    static void read(S* istr, ::Test::D& v)
    {
        istr->readAll(v.ds);
        istr->readAll({990, 1000}, v.seq, v.ao);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using DPtr = ::std::shared_ptr<D>;

using Initial2Ptr = ::std::shared_ptr<Initial2>;
using Initial2PrxPtr = ::std::shared_ptr<Initial2Prx>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
