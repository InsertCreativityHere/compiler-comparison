//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <ClientPrivate.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::D> iceC_Test_D_init("::Test::D");

const ::std::string iceC_Test_Initial2_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial2"
};
const ::std::string iceC_Test_Initial2_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opClassAndUnknownOptional",
    "opVoid"
};
const ::std::string iceC_Test_Initial2_opClassAndUnknownOptional_name = "opClassAndUnknownOptional";
const ::std::string iceC_Test_Initial2_opVoid_name = "opVoid";

}

void
Test::Initial2Prx::opClassAndUnknownOptional(const ::std::shared_ptr<A>& iceP_p, const std::optional<::std::shared_ptr<::Ice::Value>>& iceP_o, const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &Initial2Prx::_iceI_opClassAndUnknownOptional, iceP_p, iceP_o, context).get();
}

::std::future<void>
Test::Initial2Prx::opClassAndUnknownOptionalAsync(const ::std::shared_ptr<A>& iceP_p, const std::optional<::std::shared_ptr<::Ice::Value>>& iceP_o, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &Initial2Prx::_iceI_opClassAndUnknownOptional, iceP_p, iceP_o, context);
}

::std::function<void()>
Test::Initial2Prx::opClassAndUnknownOptionalAsync(const ::std::shared_ptr<A>& iceP_p, const std::optional<::std::shared_ptr<::Ice::Value>>& iceP_o,
                                                  ::std::function<void ()> response,
                                                  ::std::function<void(::std::exception_ptr)> ex,
                                                  ::std::function<void(bool)> sent,
                                                  const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Initial2Prx::_iceI_opClassAndUnknownOptional, iceP_p, iceP_o, context);
}

/// \cond INTERNAL
void
Test::Initial2Prx::_iceI_opClassAndUnknownOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<A>& iceP_p, const std::optional<::std::shared_ptr<::Ice::Value>>& iceP_o, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Initial2_opClassAndUnknownOptional_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
            ostr->writeAll({1}, iceP_o);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

void
Test::Initial2Prx::opVoid(const std::optional<int>& iceP_a, const std::optional<::std::string>& iceP_v, const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &Initial2Prx::_iceI_opVoid, iceP_a, iceP_v, context).get();
}

::std::future<void>
Test::Initial2Prx::opVoidAsync(const std::optional<int>& iceP_a, const std::optional<::std::string>& iceP_v, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &Initial2Prx::_iceI_opVoid, iceP_a, iceP_v, context);
}

::std::function<void()>
Test::Initial2Prx::opVoidAsync(const std::optional<int>& iceP_a, const std::optional<::std::string>& iceP_v,
                               ::std::function<void ()> response,
                               ::std::function<void(::std::exception_ptr)> ex,
                               ::std::function<void(bool)> sent,
                               const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Initial2Prx::_iceI_opVoid, iceP_a, iceP_v, context);
}

/// \cond INTERNAL
void
Test::Initial2Prx::_iceI_opVoid(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const std::optional<int>& iceP_a, const std::optional<::std::string>& iceP_v, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Initial2_opVoid_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2}, iceP_a, iceP_v);
        },
        nullptr);
}
/// \endcond

const ::std::string&
Test::Initial2Prx::ice_staticId()
{
    return Initial2::ice_staticId();
}

Test::D::~D()
{
}

const ::std::string&
Test::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

bool
Test::Initial2::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial2_ids, iceC_Test_Initial2_ids + 2, s);
}

::std::vector<::std::string>
Test::Initial2::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Initial2_ids[0], &iceC_Test_Initial2_ids[2]);
}

::std::string
Test::Initial2::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial2::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial2";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial2::_iceD_opClassAndUnknownOptional(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<A> iceP_p;
    std::optional<::std::shared_ptr<::Ice::Value>> iceP_o;
    istr->readAll(iceP_p);
    istr->readAll({1}, iceP_o);
    istr->readPendingValues();
    inS.endReadParams();
    this->opClassAndUnknownOptional(::std::move(iceP_p), ::std::move(iceP_o), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial2::_iceD_opVoid(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<int> iceP_a;
    std::optional<::std::string> iceP_v;
    istr->readAll({1, 2}, iceP_a, iceP_v);
    inS.endReadParams();
    this->opVoid(iceP_a, ::std::move(iceP_v), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial2::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial2_ops, iceC_Test_Initial2_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial2_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opClassAndUnknownOptional(in, current);
        }
        case 5:
        {
            return _iceD_opVoid(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
