//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <ClientPrivate.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::D> iceC_Test_D_init("::Test::D");

const ::std::string iceC_Test_Initial2_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial2"
};
const ::std::string iceC_Test_Initial2_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opClassAndUnknownOptional",
    "opVoid"
};
const ::std::string iceC_Test_Initial2_opClassAndUnknownOptional_name = "opClassAndUnknownOptional";
const ::std::string iceC_Test_Initial2_opVoid_name = "opVoid";

}

bool
Test::Initial2::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial2_ids, iceC_Test_Initial2_ids + 2, s);
}

::std::vector<::std::string>
Test::Initial2::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Initial2_ids[0], &iceC_Test_Initial2_ids[2]);
}

::std::string
Test::Initial2::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial2::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial2";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial2::_iceD_opClassAndUnknownOptional(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<A> iceP_p;
    std::optional<::std::shared_ptr<::Ice::Value>> iceP_o;
    istr->readAll(iceP_p);
    istr->readAll({1}, iceP_o);
    istr->readPendingValues();
    inS.endReadParams();
    this->opClassAndUnknownOptional(::std::move(iceP_p), ::std::move(iceP_o), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial2::_iceD_opVoid(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    std::optional<int> iceP_a;
    std::optional<::std::string> iceP_v;
    istr->readAll({1, 2}, iceP_a, iceP_v);
    inS.endReadParams();
    this->opVoid(iceP_a, ::std::move(iceP_v), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial2::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial2_ops, iceC_Test_Initial2_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial2_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opClassAndUnknownOptional(in, current);
        }
        case 5:
        {
            return _iceD_opVoid(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::D::~D()
{
}

const ::std::string&
Test::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

/// \cond INTERNAL
void
Test::Initial2Prx::_iceI_opClassAndUnknownOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<A>& iceP_p, const std::optional<::std::shared_ptr<::Ice::Value>>& iceP_o, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial2_opClassAndUnknownOptional_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
            ostr->writeAll({1}, iceP_o);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial2Prx::_iceI_opVoid(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const std::optional<int>& iceP_a, const std::optional<::std::string>& iceP_v, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial2_opVoid_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2}, iceP_a, iceP_v);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::Initial2Prx::_newInstance() const
{
    return ::IceInternal::createProxy<Initial2Prx>();
}
/// \endcond

const ::std::string&
Test::Initial2Prx::ice_staticId()
{
    return Initial2::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_Initial2_opClassAndUnknownOptional_name = "opClassAndUnknownOptional";

const ::std::string iceC_Test_Initial2_opVoid_name = "opVoid";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Initial2* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Initial2>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Initial2;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Initial2::_iceI_begin_opClassAndUnknownOptional(const ::Test::APtr& iceP_p, const std::optional< ::Ice::ValuePtr>& iceP_o, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial2_opClassAndUnknownOptional_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial2_opClassAndUnknownOptional_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_p);
        ostr->write(1, iceP_o);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_Test_Initial2_opClassAndUnknownOptional_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial2::end_opClassAndUnknownOptional(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial2_opClassAndUnknownOptional_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial2::_iceI_begin_opVoid(const std::optional< ::Ice::Int>& iceP_a, const std::optional< ::std::string>& iceP_v, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial2_opVoid_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial2_opVoid_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(1, iceP_a);
        ostr->write(2, iceP_v);
        result->endWriteParams();
        result->invoke(iceC_Test_Initial2_opVoid_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial2::end_opVoid(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial2_opVoid_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Initial2::_newInstance() const
{
    return new Initial2;
}
/// \endcond

const ::std::string&
IceProxy::Test::Initial2::ice_staticId()
{
    return ::Test::Initial2::ice_staticId();
}

Test::Initial2::~Initial2()
{
}

namespace
{
const ::std::string iceC_Test_Initial2_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial2"
};

}

bool
Test::Initial2::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial2_ids, iceC_Test_Initial2_ids + 2, s);
}

::std::vector< ::std::string>
Test::Initial2::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Initial2_ids[0], &iceC_Test_Initial2_ids[2]);
}

const ::std::string&
Test::Initial2::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial2::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial2";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial2::_iceD_opClassAndUnknownOptional(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    APtr iceP_p;
    std::optional< ::Ice::ValuePtr> iceP_o;
    istr->read(iceP_p);
    istr->read(1, iceP_o);
    istr->readPendingValues();
    inS.endReadParams();
    this->opClassAndUnknownOptional(iceP_p, iceP_o, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial2::_iceD_opVoid(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    std::optional< ::Ice::Int> iceP_a;
    std::optional< ::std::string> iceP_v;
    istr->read(1, iceP_a);
    istr->read(2, iceP_v);
    inS.endReadParams();
    this->opVoid(iceP_a, iceP_v, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Initial2_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opClassAndUnknownOptional",
    "opVoid"
};

}

/// \cond INTERNAL
bool
Test::Initial2::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial2_all, iceC_Test_Initial2_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial2_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opClassAndUnknownOptional(in, current);
        }
        case 5:
        {
            return _iceD_opVoid(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::D::~D()
{
}

/// \cond INTERNAL
::Ice::Value* Test::upCast(D* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ValuePtr
Test::D::ice_clone() const
{
    ::Ice::Value* p = new D(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

std::string
Test::D::ice_id() const
{
    return ice_staticId();
}

const ::std::string&
Test::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

void
Test::D::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    B::_iceGcVisitMembers(v_);
    if(ao)
    {
        if((*ao))
        {
            if((::Test::upCast((*ao).get())->_iceGcVisit(v_)))
            {
                (*ao) = 0;
            }
        }
    }
}

/// \cond STREAM
void
Test::D::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::D::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::D> iceC_Test_D_init("::Test::D");
}

::Ice::ValueFactoryPtr
Test::D::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::D::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchValuePtr(DPtr& handle, const ::Ice::ValuePtr& v)
{
    handle = DPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(D::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
