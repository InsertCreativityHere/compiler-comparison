//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `File1.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <File1.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::std::string iceC_Test_Interface1_ids[2] =
{
    "::Ice::Object",
    "::Test::Interface1"
};
const ::std::string iceC_Test_Interface1_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "method"
};
const ::std::string iceC_Test_Interface1_method_name = "method";

const ::IceInternal::DefaultValueFactoryInit<::Test2::Class1> iceC_Test2_Class1_init("::Test2::Class1");

}

void
Test::Interface1Prx::method(const ::Ice::Context& context)
{
    _makePromiseOutgoing<void>(true, this, &Interface1Prx::_iceI_method, context).get();
}

::std::future<void>
Test::Interface1Prx::methodAsync(const ::Ice::Context& context)
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &Interface1Prx::_iceI_method, context);
}

::std::function<void()>
Test::Interface1Prx::methodAsync(::std::function<void ()> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context)
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::Interface1Prx::_iceI_method, context);
}

/// \cond INTERNAL
void
Test::Interface1Prx::_iceI_method(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Interface1_method_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::Interface1Prx::ice_staticId()
{
    return Interface1::ice_staticId();
}

Test2::Class1::~Class1()
{
}

const ::std::string&
Test2::Class1::ice_staticId()
{
    static const ::std::string typeId = "::Test2::Class1";
    return typeId;
}

bool
Test::Interface1::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Interface1_ids, iceC_Test_Interface1_ids + 2, s);
}

::std::vector<::std::string>
Test::Interface1::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Interface1_ids[0], &iceC_Test_Interface1_ids[2]);
}

::std::string
Test::Interface1::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Interface1::ice_staticId()
{
    static const ::std::string typeId = "::Test::Interface1";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Interface1::_iceD_method(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->method(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Interface1::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Interface1_ops, iceC_Test_Interface1_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Interface1_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_method(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
