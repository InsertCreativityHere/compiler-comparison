// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Key.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

std::ostream&
abstract::operator<<(std::ostream& os, assert value)
{
    switch (value)
    {
        case assert::boolean:
            return os << "boolean";
        default:
            return os << static_cast<std::int32_t>(value);
    }
}

namespace
{
    const IceInternal::FactoryTableInit iceC_factoryTableInit;
    const IceInternal::DefaultValueFactoryInit<::abstract::else> iceC_abstract_else_init("::abstract::else");
    const IceInternal::DefaultUserExceptionFactoryInit<::abstract::hashCode> iceC_abstract_hashCode_init("::abstract::hashCode");
    const IceInternal::DefaultUserExceptionFactoryInit<::abstract::import> iceC_abstract_import_init("::abstract::import");
}

void
abstract::catchPrx::checkedCast(std::int32_t iceP_clone, std::int32_t& iceP_continue, const Ice::Context& context) const
{
    iceP_continue = IceInternal::makePromiseOutgoing<std::int32_t>(true, this, &catchPrx::_iceI_checkedCast, iceP_clone, context).get();
}

std::future<std::int32_t>
abstract::catchPrx::checkedCastAsync(std::int32_t iceP_clone, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::int32_t>(false, this, &catchPrx::_iceI_checkedCast, iceP_clone, context);
}

std::function<void()>
abstract::catchPrx::checkedCastAsync(std::int32_t iceP_clone, std::function<void(std::int32_t)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::int32_t>(std::move(response), std::move(ex), std::move(sent), this, &abstract::catchPrx::_iceI_checkedCast, iceP_clone, context);
}

void
abstract::catchPrx::_iceI_checkedCast(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int32_t>>& outAsync, std::int32_t iceP_clone, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "checkedCast";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_clone);
        },
        nullptr);
}

abstract::catchPrx::~catchPrx() = default;

const char*
abstract::catchPrx::ice_staticId() noexcept
{
    return "::abstract::catch";
}

void
abstract::defaultPrx::do(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &defaultPrx::_iceI_do, context).get();
}

std::future<void>
abstract::defaultPrx::doAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &defaultPrx::_iceI_do, context);
}

std::function<void()>
abstract::defaultPrx::doAsync(std::function<void()> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &abstract::defaultPrx::_iceI_do, context);
}

void
abstract::defaultPrx::_iceI_do(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "do";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

abstract::defaultPrx::~defaultPrx() = default;

const char*
abstract::defaultPrx::ice_staticId() noexcept
{
    return "::abstract::default";
}

abstract::finalizePrx::~finalizePrx() = default;

const char*
abstract::finalizePrx::ice_staticId() noexcept
{
    return "::abstract::finalize";
}

::abstract::assert
abstract::newPrx::notify(const break& iceP_notifyAll, const elsePtr& iceP_null, const std::optional<finalizePrx>& iceP_package, const std::optional<catchPrx>& iceP_public, const std::optional<defaultPrx>& iceP_return, std::int32_t iceP_static, std::int32_t iceP_strictfp, std::int32_t iceP_super, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<assert>(true, this, &newPrx::_iceI_notify, iceP_notifyAll, iceP_null, iceP_package, iceP_public, iceP_return, iceP_static, iceP_strictfp, iceP_super, context).get();
}

std::future<::abstract::assert>
abstract::newPrx::notifyAsync(const break& iceP_notifyAll, const elsePtr& iceP_null, const std::optional<finalizePrx>& iceP_package, const std::optional<catchPrx>& iceP_public, const std::optional<defaultPrx>& iceP_return, std::int32_t iceP_static, std::int32_t iceP_strictfp, std::int32_t iceP_super, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<assert>(false, this, &newPrx::_iceI_notify, iceP_notifyAll, iceP_null, iceP_package, iceP_public, iceP_return, iceP_static, iceP_strictfp, iceP_super, context);
}

std::function<void()>
abstract::newPrx::notifyAsync(const break& iceP_notifyAll, const elsePtr& iceP_null, const std::optional<finalizePrx>& iceP_package, const std::optional<catchPrx>& iceP_public, const std::optional<defaultPrx>& iceP_return, std::int32_t iceP_static, std::int32_t iceP_strictfp, std::int32_t iceP_super, std::function<void(::abstract::assert)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<assert>(std::move(response), std::move(ex), std::move(sent), this, &abstract::newPrx::_iceI_notify, iceP_notifyAll, iceP_null, iceP_package, iceP_public, iceP_return, iceP_static, iceP_strictfp, iceP_super, context);
}

void
abstract::newPrx::_iceI_notify(const std::shared_ptr<IceInternal::OutgoingAsyncT<assert>>& outAsync, const break& iceP_notifyAll, const elsePtr& iceP_null, const std::optional<finalizePrx>& iceP_package, const std::optional<catchPrx>& iceP_public, const std::optional<defaultPrx>& iceP_return, std::int32_t iceP_static, std::int32_t iceP_strictfp, std::int32_t iceP_super, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "notify";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_notifyAll, iceP_null, iceP_package, iceP_public, iceP_return, iceP_static, iceP_strictfp, iceP_super);
            ostr->writePendingValues();
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const import&)
            {
                throw;
            }
            catch (const hashCode&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

abstract::newPrx::~newPrx() = default;

const char*
abstract::newPrx::ice_staticId() noexcept
{
    return "::abstract::new";
}

void
abstract::break::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "case = ", this->case);
}

std::ostream&
abstract::operator<<(std::ostream& os, const ::abstract::break& value)
{
    os << "abstract::break{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
abstract::else::ice_staticId() noexcept
{
    return "::abstract::else";
}

const char*
abstract::else::ice_id() const noexcept
{
    return ice_staticId();
}

void
abstract::else::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "if = ", this->if);
    Ice::print(os << ", equals = ", this->equals);
    Ice::print(os << ", final = ", this->final);
}

Ice::ValuePtr
abstract::else::_iceCloneImpl() const
{
    return CloneEnabler<else>::clone(*this);
}

void
abstract::else::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->if, this->equals, this->final);
    ostr->endSlice();
}

void
abstract::else::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->if, this->equals, this->final);
    istr->endSlice();
}

void
abstract::hashCode::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "if = ", this->if);
}

const char*
abstract::hashCode::ice_staticId() noexcept
{
    return "::abstract::hashCode";
}

const char*
abstract::hashCode::ice_id() const noexcept
{
    return ice_staticId();
}

void
abstract::hashCode::ice_throw() const
{
    throw *this;
}

void
abstract::hashCode::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->if);
    ostr->endSlice();
}

void
abstract::hashCode::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->if);
    istr->endSlice();
}

void
abstract::import::ice_printFields(std::ostream& os) const
{
    hashCode::ice_printFields(os);
    Ice::print(os << ", instanceof = ", this->instanceof);
    Ice::print(os << ", native = ", this->native);
}

const char*
abstract::import::ice_staticId() noexcept
{
    return "::abstract::import";
}

const char*
abstract::import::ice_id() const noexcept
{
    return ice_staticId();
}

void
abstract::import::ice_throw() const
{
    throw *this;
}

void
abstract::import::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->instanceof, this->native);
    ostr->endSlice();
    hashCode::_writeImpl(ostr);
}

void
abstract::import::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->instanceof, this->native);
    istr->endSlice();
    hashCode::_readImpl(istr);
}

std::vector<std::string>
abstract::catch::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::abstract::catch"};
    return allTypeIds;
}

std::string
abstract::catch::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
abstract::catch::ice_staticId() noexcept
{
    return "::abstract::catch";
}

/// \cond INTERNAL
void
abstract::catch::_iceD_checkedCast(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::int32_t iceP_clone;
    istr->readAll(iceP_clone);
    istr->endEncapsulation();
    auto responseHandler = std::make_shared<IceInternal::AsyncResponseHandler>(std::move(sendResponse), request.current());
    auto responseCb = [responseHandler](std::int32_t iceP_continue)
    {
        responseHandler->sendResponse(
            [&](Ice::OutputStream* ostr)
            {
                ostr->writeAll(iceP_continue);
            });
    };
    try
    {
        this->checkedCastAsync(iceP_clone, std::move(responseCb), [responseHandler](std::exception_ptr ex) { responseHandler->sendException(ex); }, responseHandler->current());
    }
    catch (...)
    {
        responseHandler->sendException(std::current_exception());
    }
}
/// \endcond

void
abstract::catch::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"checkedCast", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation);
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_checkedCast(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
abstract::default::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::abstract::default"};
    return allTypeIds;
}

std::string
abstract::default::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
abstract::default::ice_staticId() noexcept
{
    return "::abstract::default";
}

/// \cond INTERNAL
void
abstract::default::_iceD_do(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->do(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

void
abstract::default::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"do", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation);
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_do(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
abstract::finalize::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::abstract::catch", "::abstract::default", "::abstract::finalize"};
    return allTypeIds;
}

std::string
abstract::finalize::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
abstract::finalize::ice_staticId() noexcept
{
    return "::abstract::finalize";
}

void
abstract::finalize::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 6> allOperations{"checkedCast", "do", "ice_id", "ice_ids", "ice_isA", "ice_ping"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation);
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_checkedCast(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_do(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
abstract::new::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::abstract::new"};
    return allTypeIds;
}

std::string
abstract::new::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
abstract::new::ice_staticId() noexcept
{
    return "::abstract::new";
}

/// \cond INTERNAL
void
abstract::new::_iceD_notify(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    break iceP_notifyAll;
    elsePtr iceP_null;
    std::optional<finalizePrx> iceP_package;
    std::optional<catchPrx> iceP_public;
    std::optional<defaultPrx> iceP_return;
    std::int32_t iceP_static;
    std::int32_t iceP_strictfp;
    std::int32_t iceP_super;
    istr->readAll(iceP_notifyAll, iceP_null, iceP_package, iceP_public, iceP_return, iceP_static, iceP_strictfp, iceP_super);
    istr->readPendingValues();
    istr->endEncapsulation();
    const assert ret = this->notify(iceP_notifyAll, std::move(iceP_null), std::move(iceP_package), std::move(iceP_public), std::move(iceP_return), iceP_static, iceP_strictfp, iceP_super, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

void
abstract::new::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"ice_id", "ice_ids", "ice_isA", "ice_ping", "notify"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation);
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_notify(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
