//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Key_h__
#define __Key_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace abstract
{

class _cpp_catch;
class catchPrx;
class _cpp_default;
class defaultPrx;
class _cpp_else;
class finalize;
class finalizePrx;
class _cpp_new;
class newPrx;

}

namespace abstract
{

enum class assert : unsigned char
{
    boolean
};

struct _cpp_break
{
    int _cpp_case;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(_cpp_case);
    }
};

using _cpp_for = ::std::vector<assert>;

using _cpp_goto = ::std::map<::std::string, assert>;

class hashCode : public ::Ice::UserExceptionHelper<hashCode, ::Ice::UserException>
{
public:

    virtual ~hashCode();

    hashCode(const hashCode&) = default;

    hashCode() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    hashCode(int _cpp_if) :
        _cpp_if(_cpp_if)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(_cpp_if);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_if;
};

/// \cond INTERNAL
static hashCode _iceS_hashCode_init;
/// \endcond

class import : public ::Ice::UserExceptionHelper<import, hashCode>
{
public:

    virtual ~import();

    import(const import&) = default;

    import() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    import(int _cpp_if, int instanceof, int native) :
        ::Ice::UserExceptionHelper<import, hashCode>(_cpp_if),
        instanceof(instanceof),
        native(native)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(_cpp_if, instanceof, native);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int instanceof;
    int native;
};

constexpr int _cpp_switch = 0;

constexpr int synchronized = 0;

constexpr int _cpp_this = 0;

constexpr int _cpp_throw = 0;

constexpr int toString = 0;

constexpr int _cpp_try = 0;

constexpr int uncheckedCast = 0;

constexpr int _cpp_volatile = 0;

constexpr int wait = 0;

constexpr int _cpp_while = 0;

constexpr int finally = 0;

constexpr int getClass = 0;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace abstract
{

class _cpp_catch : public virtual ::Ice::Object
{
public:

    using ProxyType = catchPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void checkedCastAsync(int clone, ::std::function<void(int _cpp_continue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_checkedCast(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class _cpp_default : public virtual ::Ice::Object
{
public:

    using ProxyType = defaultPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_do(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_do(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class finalize : public virtual _cpp_default,
                 public virtual _cpp_catch
{
public:

    using ProxyType = finalizePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class _cpp_new : public virtual ::Ice::Object
{
public:

    using ProxyType = newPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual assert notify(_cpp_break notifyAll, ::std::shared_ptr<else> null, ::std::shared_ptr<finalizePrx> package, ::std::shared_ptr<catchPrx> _cpp_public, ::std::shared_ptr<defaultPrx> _cpp_return, int _cpp_static, int strictfp, int super, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_notify(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace abstract
{

class _cpp_else : public ::Ice::ValueHelper<_cpp_else, ::Ice::Value>
{
public:

    virtual ~_cpp_else();

    _cpp_else() = default;

    _cpp_else(const _cpp_else&) = default;
    _cpp_else(_cpp_else&&) = default;
    _cpp_else& operator=(const _cpp_else&) = default;
    _cpp_else& operator=(_cpp_else&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_else(int _cpp_if, const ::std::shared_ptr<::abstract::defaultPrx>& equals, int final) :
        _cpp_if(_cpp_if),
        equals(equals),
        final(final)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const ::std::shared_ptr<::abstract::defaultPrx>&, const int&> ice_tuple() const
    {
        return std::tie(_cpp_if, equals, final);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int _cpp_if;
    ::std::shared_ptr<::abstract::defaultPrx> equals;
    int final;
};

/// \cond INTERNAL
static _cpp_else _iceS_else_init;
/// \endcond

}

namespace abstract
{

class catchPrx : public virtual ::Ice::Proxy<catchPrx, ::Ice::ObjectPrx>
{
public:

    void checkedCast(int clone, int& _cpp_continue, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _cpp_continue = _makePromiseOutgoing<int>(true, this, &catchPrx::_iceI_checkedCast, clone, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto checkedCastAsync(int clone, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &catchPrx::_iceI_checkedCast, clone, context);
    }

    ::std::function<void()>
    checkedCastAsync(int clone,
                     ::std::function<void(int)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &abstract::catchPrx::_iceI_checkedCast, clone, context);
    }

    /// \cond INTERNAL
    void _iceI_checkedCast(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    catchPrx() = default;
    friend ::std::shared_ptr<catchPrx> IceInternal::createProxy<catchPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class defaultPrx : public virtual ::Ice::Proxy<defaultPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_do(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &defaultPrx::_iceI_do, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto doAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &defaultPrx::_iceI_do, context);
    }

    ::std::function<void()>
    doAsync(::std::function<void()> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &abstract::defaultPrx::_iceI_do, context);
    }

    /// \cond INTERNAL
    void _iceI_do(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    defaultPrx() = default;
    friend ::std::shared_ptr<defaultPrx> IceInternal::createProxy<defaultPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class finalizePrx : public virtual ::Ice::Proxy<finalizePrx, defaultPrx, catchPrx>
{
public:

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    finalizePrx() = default;
    friend ::std::shared_ptr<finalizePrx> IceInternal::createProxy<finalizePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class newPrx : public virtual ::Ice::Proxy<newPrx, ::Ice::ObjectPrx>
{
public:

    assert notify(const _cpp_break& notifyAll, const ::std::shared_ptr<_cpp_else>& null, const ::std::shared_ptr<finalizePrx>& package, const ::std::shared_ptr<catchPrx>& _cpp_public, const ::std::shared_ptr<defaultPrx>& _cpp_return, int _cpp_static, int strictfp, int super, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::abstract::assert>(true, this, &newPrx::_iceI_notify, notifyAll, null, package, _cpp_public, _cpp_return, _cpp_static, strictfp, super, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto notifyAsync(const _cpp_break& notifyAll, const ::std::shared_ptr<_cpp_else>& null, const ::std::shared_ptr<finalizePrx>& package, const ::std::shared_ptr<catchPrx>& _cpp_public, const ::std::shared_ptr<defaultPrx>& _cpp_return, int _cpp_static, int strictfp, int super, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::abstract::assert>>().get_future())
    {
        return _makePromiseOutgoing<::abstract::assert, P>(false, this, &newPrx::_iceI_notify, notifyAll, null, package, _cpp_public, _cpp_return, _cpp_static, strictfp, super, context);
    }

    ::std::function<void()>
    notifyAsync(const _cpp_break& notifyAll, const ::std::shared_ptr<_cpp_else>& null, const ::std::shared_ptr<finalizePrx>& package, const ::std::shared_ptr<catchPrx>& _cpp_public, const ::std::shared_ptr<defaultPrx>& _cpp_return, int _cpp_static, int strictfp, int super,
                ::std::function<void(::abstract::assert)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::abstract::assert>(std::move(response), std::move(ex), std::move(sent), this, &abstract::newPrx::_iceI_notify, notifyAll, null, package, _cpp_public, _cpp_return, _cpp_static, strictfp, super, context);
    }

    /// \cond INTERNAL
    void _iceI_notify(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::abstract::assert>>&, const _cpp_break&, const ::std::shared_ptr<_cpp_else>&, const ::std::shared_ptr<finalizePrx>&, const ::std::shared_ptr<catchPrx>&, const ::std::shared_ptr<defaultPrx>&, int, int, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    newPrx() = default;
    friend ::std::shared_ptr<newPrx> IceInternal::createProxy<newPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::abstract::assert>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::abstract::_cpp_break>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::abstract::_cpp_break, S>
{
    static void read(S* istr, ::abstract::_cpp_break& v)
    {
        istr->readAll(v._cpp_case);
    }
};

template<typename S>
struct StreamReader<::abstract::_cpp_else, S>
{
    static void read(S* istr, ::abstract::_cpp_else& v)
    {
        istr->readAll(v._cpp_if, v.equals, v.final);
    }
};

template<typename S>
struct StreamReader<::abstract::hashCode, S>
{
    static void read(S* istr, ::abstract::hashCode& v)
    {
        istr->readAll(v._cpp_if);
    }
};

template<typename S>
struct StreamWriter<::abstract::import, S>
{
    static void write(S* ostr, const ::abstract::import& v)
    {
        ostr->writeAll(v.instanceof, v.native);
    }
};

template<typename S>
struct StreamReader<::abstract::import, S>
{
    static void read(S* istr, ::abstract::import& v)
    {
        istr->readAll(v.instanceof, v.native);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace abstract
{

using catchPtr = ::std::shared_ptr<_cpp_catch>;
using catchPrxPtr = ::std::shared_ptr<catchPrx>;

using defaultPtr = ::std::shared_ptr<_cpp_default>;
using defaultPrxPtr = ::std::shared_ptr<defaultPrx>;

using elsePtr = ::std::shared_ptr<_cpp_else>;

using finalizePtr = ::std::shared_ptr<finalize>;
using finalizePrxPtr = ::std::shared_ptr<finalizePrx>;

using newPtr = ::std::shared_ptr<_cpp_new>;
using newPrxPtr = ::std::shared_ptr<newPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace abstract
{

class _cpp_catch;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_catch>&);
::IceProxy::Ice::Object* upCast(_cpp_catch*);
/// \endcond

class _cpp_default;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_default>&);
::IceProxy::Ice::Object* upCast(_cpp_default*);
/// \endcond

class finalize;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< finalize>&);
::IceProxy::Ice::Object* upCast(finalize*);
/// \endcond

class _cpp_new;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< _cpp_new>&);
::IceProxy::Ice::Object* upCast(_cpp_new*);
/// \endcond

}

}

namespace abstract
{
typedef ::IceInternal::ProxyHandle< ::IceProxy::abstract::_cpp_catch> catchPrx;
typedef catchPrx catchPrxPtr;

class _cpp_catch;
typedef ::IceInternal::Handle< _cpp_catch> catchPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::abstract::_cpp_default> defaultPrx;
typedef defaultPrx defaultPrxPtr;

class _cpp_default;
typedef ::IceInternal::Handle< _cpp_default> defaultPtr;

class _cpp_else;
using elsePtr = ::Ice::SharedPtr<_cpp_else>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::abstract::finalize> finalizePrx;
typedef finalizePrx finalizePrxPtr;

class finalize;
typedef ::IceInternal::Handle< finalize> finalizePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::abstract::_cpp_new> newPrx;
typedef newPrx newPrxPtr;

class _cpp_new;
typedef ::IceInternal::Handle< _cpp_new> newPtr;

}

namespace abstract
{

enum assert
{
    boolean
};

struct _cpp_break
{
    ::Ice::Int _cpp_case;

    bool operator==(const _cpp_break& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(_cpp_case != rhs_._cpp_case)
        {
            return false;
        }
        return true;
    }

    bool operator<(const _cpp_break& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(_cpp_case < rhs_._cpp_case)
        {
            return true;
        }
        else if(rhs_._cpp_case < _cpp_case)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const _cpp_break& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const _cpp_break& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const _cpp_break& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const _cpp_break& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector<assert> _cpp_for;

typedef ::std::map< ::std::string, assert> _cpp_goto;

class hashCode : public ::Ice::UserException
{
public:

    hashCode() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit hashCode(::Ice::Int _cpp_if);
    hashCode(const hashCode&) = default;
    virtual ~hashCode();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual hashCode* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int _cpp_if;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static hashCode _iceS_hashCode_init;
/// \endcond

class import : public hashCode
{
public:

    import() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    import(::Ice::Int _cpp_if, ::Ice::Int instanceof, ::Ice::Int native);
    import(const import&) = default;
    virtual ~import();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual import* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Ice::Int instanceof;
    ::Ice::Int native;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

const ::Ice::Int _cpp_switch = 0;

const ::Ice::Int synchronized = 0;

const ::Ice::Int _cpp_this = 0;

const ::Ice::Int _cpp_throw = 0;

const ::Ice::Int toString = 0;

const ::Ice::Int _cpp_try = 0;

const ::Ice::Int uncheckedCast = 0;

const ::Ice::Int _cpp_volatile = 0;

const ::Ice::Int wait = 0;

const ::Ice::Int _cpp_while = 0;

const ::Ice::Int finally = 0;

const ::Ice::Int getClass = 0;

}

namespace abstract
{

/**
 * AMD callback class for abstract::_cpp_catch::checkedCast_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_catch_checkedCast : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_catch_checkedCast();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(::Ice::Int _cpp_continue) = 0;
};

typedef ::IceUtil::Handle< ::abstract::AMD_catch_checkedCast> AMD_catch_checkedCastPtr;

}

/// \cond INTERNAL
namespace IceAsync
{

namespace abstract
{

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_catch_checkedCast : public ::abstract::AMD_catch_checkedCast, public ::IceInternal::IncomingAsync
{
public:

    AMD_catch_checkedCast(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

}

}
/// \endcond

namespace abstract
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::abstract::_cpp_catch::begin_checkedCast.
 * Create a wrapper instance by calling ::abstract::newCallback_catch_checkedCast.
 */
class Callback_catch_checkedCast_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_catch_checkedCast_Base> Callback_catch_checkedCastPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::abstract::_cpp_default::begin_do.
 * Create a wrapper instance by calling ::abstract::newCallback_default_do.
 */
class Callback_default_do_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_default_do_Base> Callback_default_doPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::abstract::_cpp_new::begin_notify.
 * Create a wrapper instance by calling ::abstract::newCallback_new_notify.
 */
class Callback_new_notify_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_new_notify_Base> Callback_new_notifyPtr;

}

namespace IceProxy
{

namespace abstract
{

class _cpp_catch : public virtual ::Ice::Proxy<_cpp_catch, ::IceProxy::Ice::Object>
{
public:

    void checkedCast(::Ice::Int clone, ::Ice::Int& _cpp_continue, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_checkedCast(_cpp_continue, _iceI_begin_checkedCast(clone, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_checkedCast(::Ice::Int clone, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_checkedCast(clone, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkedCast(::Ice::Int clone, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_checkedCast(clone, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_checkedCast(::Ice::Int clone, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_checkedCast(clone, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_checkedCast(::Ice::Int clone, const ::abstract::Callback_catch_checkedCastPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_checkedCast(clone, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_checkedCast(::Ice::Int clone, const ::Ice::Context& context, const ::abstract::Callback_catch_checkedCastPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_checkedCast(clone, context, cb, cookie);
    }

    void end_checkedCast(::Ice::Int& _cpp_continue, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_checkedCast(::Ice::Int& iceP_continue, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_checkedCast(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class _cpp_default : public virtual ::Ice::Proxy<_cpp_default, ::IceProxy::Ice::Object>
{
public:

    void _cpp_do(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_do(_iceI_begin_do(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_do(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_do(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_do(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_do(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_do(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_do(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_do(const ::abstract::Callback_default_doPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_do(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_do(const ::Ice::Context& context, const ::abstract::Callback_default_doPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_do(context, cb, cookie);
    }

    void end_do(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_do(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

/// \cond INTERNAL
class _finalizeBase : public virtual ::IceProxy::abstract::_cpp_default, 
                      public virtual ::IceProxy::abstract::_cpp_catch
{
public:

    virtual ~_finalizeBase();

protected:

    virtual Object* _newInstance() const = 0;
};
/// \endcond

class finalize : public virtual ::Ice::Proxy<finalize, _finalizeBase>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class _cpp_new : public virtual ::Ice::Proxy<_cpp_new, ::IceProxy::Ice::Object>
{
public:

    ::abstract::assert notify(const ::abstract::_cpp_break& notifyAll, const ::abstract::elsePtr& null, const ::abstract::finalizePrx& package, const ::abstract::catchPrx& _cpp_public, const ::abstract::defaultPrx& _cpp_return, ::Ice::Int _cpp_static, ::Ice::Int strictfp, ::Ice::Int super, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_notify(_iceI_begin_notify(notifyAll, null, package, _cpp_public, _cpp_return, _cpp_static, strictfp, super, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_notify(const ::abstract::_cpp_break& notifyAll, const ::abstract::elsePtr& null, const ::abstract::finalizePrx& package, const ::abstract::catchPrx& _cpp_public, const ::abstract::defaultPrx& _cpp_return, ::Ice::Int _cpp_static, ::Ice::Int strictfp, ::Ice::Int super, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_notify(notifyAll, null, package, _cpp_public, _cpp_return, _cpp_static, strictfp, super, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_notify(const ::abstract::_cpp_break& notifyAll, const ::abstract::elsePtr& null, const ::abstract::finalizePrx& package, const ::abstract::catchPrx& _cpp_public, const ::abstract::defaultPrx& _cpp_return, ::Ice::Int _cpp_static, ::Ice::Int strictfp, ::Ice::Int super, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_notify(notifyAll, null, package, _cpp_public, _cpp_return, _cpp_static, strictfp, super, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_notify(const ::abstract::_cpp_break& notifyAll, const ::abstract::elsePtr& null, const ::abstract::finalizePrx& package, const ::abstract::catchPrx& _cpp_public, const ::abstract::defaultPrx& _cpp_return, ::Ice::Int _cpp_static, ::Ice::Int strictfp, ::Ice::Int super, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_notify(notifyAll, null, package, _cpp_public, _cpp_return, _cpp_static, strictfp, super, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_notify(const ::abstract::_cpp_break& notifyAll, const ::abstract::elsePtr& null, const ::abstract::finalizePrx& package, const ::abstract::catchPrx& _cpp_public, const ::abstract::defaultPrx& _cpp_return, ::Ice::Int _cpp_static, ::Ice::Int strictfp, ::Ice::Int super, const ::abstract::Callback_new_notifyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_notify(notifyAll, null, package, _cpp_public, _cpp_return, _cpp_static, strictfp, super, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_notify(const ::abstract::_cpp_break& notifyAll, const ::abstract::elsePtr& null, const ::abstract::finalizePrx& package, const ::abstract::catchPrx& _cpp_public, const ::abstract::defaultPrx& _cpp_return, ::Ice::Int _cpp_static, ::Ice::Int strictfp, ::Ice::Int super, const ::Ice::Context& context, const ::abstract::Callback_new_notifyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_notify(notifyAll, null, package, _cpp_public, _cpp_return, _cpp_static, strictfp, super, context, cb, cookie);
    }

    ::abstract::assert end_notify(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_notify(const ::abstract::_cpp_break&, const ::abstract::elsePtr&, const ::abstract::finalizePrx&, const ::abstract::catchPrx&, const ::abstract::defaultPrx&, ::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace abstract
{

class _cpp_catch : public virtual ::Ice::Object
{
public:

    typedef catchPrx ProxyType;

    virtual ~_cpp_catch();
    _cpp_catch() = default;
    _cpp_catch(const _cpp_catch&) = default;
    _cpp_catch& operator=(const _cpp_catch&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void checkedCast_async(const ::abstract::AMD_catch_checkedCastPtr& cb, ::Ice::Int clone, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_checkedCast(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class _cpp_default : public virtual ::Ice::Object
{
public:

    typedef defaultPrx ProxyType;

    virtual ~_cpp_default();
    _cpp_default() = default;
    _cpp_default(const _cpp_default&) = default;
    _cpp_default& operator=(const _cpp_default&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void _cpp_do(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_do(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class finalize : public virtual _cpp_default,
                 public virtual _cpp_catch
{
public:

    typedef finalizePrx ProxyType;

    virtual ~finalize();
    finalize() = default;
    finalize(const finalize&) = default;
    finalize& operator=(const finalize&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class _cpp_new : public virtual ::Ice::Object
{
public:

    typedef newPrx ProxyType;

    virtual ~_cpp_new();
    _cpp_new() = default;
    _cpp_new(const _cpp_new&) = default;
    _cpp_new& operator=(const _cpp_new&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual assert notify(const _cpp_break& notifyAll, const elsePtr& null, const finalizePrx& package, const catchPrx& _cpp_public, const defaultPrx& _cpp_return, ::Ice::Int _cpp_static, ::Ice::Int strictfp, ::Ice::Int super, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_notify(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

namespace abstract
{

class _cpp_else : public ::Ice::ValueHelper<_cpp_else, ::Ice::Value>
{
public:

    virtual ~_cpp_else();

    _cpp_else() = default;

    _cpp_else(const _cpp_else&) = default;
    _cpp_else(_cpp_else&&) = default;
    _cpp_else& operator=(const _cpp_else&) = default;
    _cpp_else& operator=(_cpp_else&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_else(::Ice::Int _cpp_if, const ::abstract::defaultPrx& equals, ::Ice::Int final) :
        _cpp_if(_cpp_if),
        equals(equals),
        final(final)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Int&, const ::abstract::defaultPrx&, const ::Ice::Int&> ice_tuple() const
    {
        return std::tie(_cpp_if, equals, final);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Ice::Int _cpp_if;
    ::abstract::defaultPrx equals;
    ::Ice::Int final;
};

/// \cond INTERNAL
static _cpp_else _iceS_else_init;
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::abstract::assert>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::abstract::_cpp_break>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::abstract::_cpp_break, S>
{
    static void write(S* ostr, const ::abstract::_cpp_break& v)
    {
        ostr->write(v._cpp_case);
    }
};

template<typename S>
struct StreamReader< ::abstract::_cpp_break, S>
{
    static void read(S* istr, ::abstract::_cpp_break& v)
    {
        istr->read(v._cpp_case);
    }
};

template<typename S>
struct StreamWriter< ::abstract::_cpp_else, S>
{
    static void write(S* ostr, const ::abstract::_cpp_else& v)
    {
        ostr->write(v._cpp_if);
        ostr->write(v.equals);
        ostr->write(v.final);
    }
};

template<typename S>
struct StreamReader< ::abstract::_cpp_else, S>
{
    static void read(S* istr, ::abstract::_cpp_else& v)
    {
        istr->read(v._cpp_if);
        istr->read(v.equals);
        istr->read(v.final);
    }
};

template<>
struct StreamableTraits< ::abstract::hashCode>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::abstract::hashCode, S>
{
    static void write(S* ostr, const ::abstract::hashCode& v)
    {
        ostr->write(v._cpp_if);
    }
};

template<typename S>
struct StreamReader< ::abstract::hashCode, S>
{
    static void read(S* istr, ::abstract::hashCode& v)
    {
        istr->read(v._cpp_if);
    }
};

template<>
struct StreamableTraits< ::abstract::import>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::abstract::import, S>
{
    static void write(S* ostr, const ::abstract::import& v)
    {
        ostr->write(v.instanceof);
        ostr->write(v.native);
    }
};

template<typename S>
struct StreamReader< ::abstract::import, S>
{
    static void read(S* istr, ::abstract::import& v)
    {
        istr->read(v.instanceof);
        istr->read(v.native);
    }
};

}
/// \endcond

namespace abstract
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::abstract::_cpp_catch::begin_checkedCast.
 * Create a wrapper instance by calling ::abstract::newCallback_catch_checkedCast.
 */
template<class T>
class CallbackNC_catch_checkedCast : public Callback_catch_checkedCast_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_catch_checkedCast(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        catchPrx proxy = catchPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_continue;
        try
        {
            proxy->end_checkedCast(iceP_continue, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_continue);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::catch::begin_checkedCast.
 */
template<class T> Callback_catch_checkedCastPtr
newCallback_catch_checkedCast(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_catch_checkedCast<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::catch::begin_checkedCast.
 */
template<class T> Callback_catch_checkedCastPtr
newCallback_catch_checkedCast(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_catch_checkedCast<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::abstract::_cpp_catch::begin_checkedCast.
 * Create a wrapper instance by calling ::abstract::newCallback_catch_checkedCast.
 */
template<class T, typename CT>
class Callback_catch_checkedCast : public Callback_catch_checkedCast_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_catch_checkedCast(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        catchPrx proxy = catchPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_continue;
        try
        {
            proxy->end_checkedCast(iceP_continue, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_continue, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::catch::begin_checkedCast.
 */
template<class T, typename CT> Callback_catch_checkedCastPtr
newCallback_catch_checkedCast(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_catch_checkedCast<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::catch::begin_checkedCast.
 */
template<class T, typename CT> Callback_catch_checkedCastPtr
newCallback_catch_checkedCast(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_catch_checkedCast<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::abstract::_cpp_default::begin_do.
 * Create a wrapper instance by calling ::abstract::newCallback_default_do.
 */
template<class T>
class CallbackNC_default_do : public Callback_default_do_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_default_do(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::default::begin_do.
 */
template<class T> Callback_default_doPtr
newCallback_default_do(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_default_do<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::default::begin_do.
 */
template<class T> Callback_default_doPtr
newCallback_default_do(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_default_do<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::default::begin_do.
 */
template<class T> Callback_default_doPtr
newCallback_default_do(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_default_do<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::default::begin_do.
 */
template<class T> Callback_default_doPtr
newCallback_default_do(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_default_do<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::abstract::_cpp_default::begin_do.
 * Create a wrapper instance by calling ::abstract::newCallback_default_do.
 */
template<class T, typename CT>
class Callback_default_do : public Callback_default_do_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_default_do(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::default::begin_do.
 */
template<class T, typename CT> Callback_default_doPtr
newCallback_default_do(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_default_do<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::default::begin_do.
 */
template<class T, typename CT> Callback_default_doPtr
newCallback_default_do(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_default_do<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::default::begin_do.
 */
template<class T, typename CT> Callback_default_doPtr
newCallback_default_do(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_default_do<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::default::begin_do.
 */
template<class T, typename CT> Callback_default_doPtr
newCallback_default_do(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_default_do<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::abstract::_cpp_new::begin_notify.
 * Create a wrapper instance by calling ::abstract::newCallback_new_notify.
 */
template<class T>
class CallbackNC_new_notify : public Callback_new_notify_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(assert);

    CallbackNC_new_notify(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        newPrx proxy = newPrx::uncheckedCast(result->getProxy());
        assert ret;
        try
        {
            ret = proxy->end_notify(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::new::begin_notify.
 */
template<class T> Callback_new_notifyPtr
newCallback_new_notify(const IceUtil::Handle<T>& instance, void (T::*cb)(assert), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_new_notify<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::new::begin_notify.
 */
template<class T> Callback_new_notifyPtr
newCallback_new_notify(T* instance, void (T::*cb)(assert), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_new_notify<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::abstract::_cpp_new::begin_notify.
 * Create a wrapper instance by calling ::abstract::newCallback_new_notify.
 */
template<class T, typename CT>
class Callback_new_notify : public Callback_new_notify_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(assert, const CT&);

    Callback_new_notify(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        newPrx proxy = newPrx::uncheckedCast(result->getProxy());
        assert ret;
        try
        {
            ret = proxy->end_notify(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::new::begin_notify.
 */
template<class T, typename CT> Callback_new_notifyPtr
newCallback_new_notify(const IceUtil::Handle<T>& instance, void (T::*cb)(assert, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_new_notify<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::abstract::new::begin_notify.
 */
template<class T, typename CT> Callback_new_notifyPtr
newCallback_new_notify(T* instance, void (T::*cb)(assert, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_new_notify<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
