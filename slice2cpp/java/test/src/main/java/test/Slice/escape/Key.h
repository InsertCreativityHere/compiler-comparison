//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Key.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Key_h__
#define __Key_h__

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace abstract
{
    enum class assert : ::std::uint8_t
    {
        boolean
    };

    struct _cpp_break;

    class catchPrx;

    class defaultPrx;

    class _cpp_else;
    using elsePtr = ::std::shared_ptr<_cpp_else>;

    class finalizePrx;

    using _cpp_for = ::std::vector<assert>;

    using _cpp_goto = ::std::map<::std::string, assert>;

    class newPrx;

    constexpr ::std::int32_t _cpp_switch = 0;

    constexpr ::std::int32_t synchronized = 0;

    constexpr ::std::int32_t _cpp_this = 0;

    constexpr ::std::int32_t _cpp_throw = 0;

    constexpr ::std::int32_t toString = 0;

    constexpr ::std::int32_t _cpp_try = 0;

    constexpr ::std::int32_t uncheckedCast = 0;

    constexpr ::std::int32_t _cpp_volatile = 0;

    constexpr ::std::int32_t wait = 0;

    constexpr ::std::int32_t _cpp_while = 0;

    constexpr ::std::int32_t finally = 0;

    constexpr ::std::int32_t getClass = 0;

}

namespace abstract
{

class catchPrx : public ::Ice::Proxy<catchPrx, ::Ice::ObjectPrx>
{
public:

    void checkedCast(::std::int32_t clone, ::std::int32_t& _cpp_continue, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<::std::int32_t> checkedCastAsync(::std::int32_t clone, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    checkedCastAsync(::std::int32_t clone, ::std::function<void(::std::int32_t)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_checkedCast(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::int32_t>>&, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    explicit catchPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    catchPrx(const catchPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    catchPrx(catchPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    catchPrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    catchPrx& operator=(const catchPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    catchPrx& operator=(catchPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static catchPrx _fromReference(::IceInternal::ReferencePtr ref) { return catchPrx(::std::move(ref)); }

protected:

    catchPrx() = default;

    explicit catchPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

class defaultPrx : public ::Ice::Proxy<defaultPrx, ::Ice::ObjectPrx>
{
public:

    void _cpp_do(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> doAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    doAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_do(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    explicit defaultPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    defaultPrx(const defaultPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    defaultPrx(defaultPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    defaultPrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    defaultPrx& operator=(const defaultPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    defaultPrx& operator=(defaultPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static defaultPrx _fromReference(::IceInternal::ReferencePtr ref) { return defaultPrx(::std::move(ref)); }

protected:

    defaultPrx() = default;

    explicit defaultPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

class finalizePrx : public ::Ice::Proxy<finalizePrx, defaultPrx, catchPrx>
{
public:

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

#if defined(__GNUC__)
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wextra" // initialize all virtual bases in correct order
#endif

    explicit finalizePrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    finalizePrx(const finalizePrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    finalizePrx(finalizePrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    finalizePrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    finalizePrx& operator=(const finalizePrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    finalizePrx& operator=(finalizePrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static finalizePrx _fromReference(::IceInternal::ReferencePtr ref) { return finalizePrx(::std::move(ref)); }

protected:

    finalizePrx() = default;

    explicit finalizePrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond

#if defined(__GNUC__)
#   pragma GCC diagnostic pop
#endif
};

class newPrx : public ::Ice::Proxy<newPrx, ::Ice::ObjectPrx>
{
public:

    assert notify(const _cpp_break& notifyAll, const elsePtr& null, const ::std::optional<finalizePrx>& package, const ::std::optional<catchPrx>& _cpp_public, const ::std::optional<defaultPrx>& _cpp_return, ::std::int32_t _cpp_static, ::std::int32_t strictfp, ::std::int32_t super, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<assert> notifyAsync(const _cpp_break& notifyAll, const elsePtr& null, const ::std::optional<finalizePrx>& package, const ::std::optional<catchPrx>& _cpp_public, const ::std::optional<defaultPrx>& _cpp_return, ::std::int32_t _cpp_static, ::std::int32_t strictfp, ::std::int32_t super, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    notifyAsync(const _cpp_break& notifyAll, const elsePtr& null, const ::std::optional<finalizePrx>& package, const ::std::optional<catchPrx>& _cpp_public, const ::std::optional<defaultPrx>& _cpp_return, ::std::int32_t _cpp_static, ::std::int32_t strictfp, ::std::int32_t super, ::std::function<void(::abstract::assert)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_notify(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<assert>>&, const _cpp_break&, const elsePtr&, const ::std::optional<finalizePrx>&, const ::std::optional<catchPrx>&, const ::std::optional<defaultPrx>&, ::std::int32_t, ::std::int32_t, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    explicit newPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    newPrx(const newPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    newPrx(newPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    newPrx(const ::Ice::CommunicatorPtr& communicator, std::string_view proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    newPrx& operator=(const newPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    newPrx& operator=(newPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static newPrx _fromReference(::IceInternal::ReferencePtr ref) { return newPrx(::std::move(ref)); }

protected:

    newPrx() = default;

    explicit newPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace abstract
{

struct _cpp_break
{
    ::std::int32_t _cpp_case;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(_cpp_case);
    }
};

class _cpp_else : public ::Ice::Value
{
public:

    _cpp_else() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    _cpp_else(::std::int32_t _cpp_if, ::std::optional<::abstract::defaultPrx> equals, ::std::int32_t final) :
        _cpp_if(_cpp_if),
        equals(::std::move(equals)),
        final(final)
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    ::std::string ice_id() const override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::optional<::abstract::defaultPrx>&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(_cpp_if, equals, final);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    elsePtr ice_clone() const { return ::std::static_pointer_cast <_cpp_else>(_iceCloneImpl()); }

    ::std::int32_t _cpp_if;
    ::std::optional<::abstract::defaultPrx> equals;
    ::std::int32_t final;

protected:

    _cpp_else(const _cpp_else&) = default;

    ::Ice::ValuePtr _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

/// \cond INTERNAL
static _cpp_else _iceS_else_init;
/// \endcond

class hashCode : public ::Ice::UserException
{
public:
    /**
     * Default constructor.
     */
    hashCode() noexcept = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    hashCode(::std::int32_t _cpp_if) noexcept :
        _cpp_if(_cpp_if)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(_cpp_if);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    void ice_throw() const override;

    ::std::int32_t _cpp_if;

protected:
    void _writeImpl(::Ice::OutputStream*) const override;

    void _readImpl(::Ice::InputStream*) override;
};

class import : public hashCode
{
public:
    /**
     * Default constructor.
     */
    import() noexcept = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    import(::std::int32_t _cpp_if, ::std::int32_t instanceof, ::std::int32_t native) noexcept :
        hashCode(_cpp_if),
        instanceof(instanceof),
        native(native)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(_cpp_if, instanceof, native);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const char* ice_staticId() noexcept;

    const char* ice_id() const noexcept override;

    void ice_throw() const override;

    ::std::int32_t instanceof;
    ::std::int32_t native;

protected:
    void _writeImpl(::Ice::OutputStream*) const override;

    void _readImpl(::Ice::InputStream*) override;
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace abstract
{

class _cpp_catch : public virtual ::Ice::Object
{
public:

    using ProxyType = catchPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    virtual void checkedCastAsync(::std::int32_t clone, ::std::function<void(::std::int32_t _cpp_continue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_checkedCast(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using catchPtr = ::std::shared_ptr<_cpp_catch>;

class _cpp_default : public virtual ::Ice::Object
{
public:

    using ProxyType = defaultPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    virtual void _cpp_do(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_do(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using defaultPtr = ::std::shared_ptr<_cpp_default>;

class finalize : public virtual _cpp_default,
                 public virtual _cpp_catch
{
public:

    using ProxyType = finalizePrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using finalizePtr = ::std::shared_ptr<finalize>;

class _cpp_new : public virtual ::Ice::Object
{
public:

    using ProxyType = newPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    virtual assert notify(_cpp_break notifyAll, elsePtr null, ::std::optional<finalizePrx> package, ::std::optional<catchPrx> _cpp_public, ::std::optional<defaultPrx> _cpp_return, ::std::int32_t _cpp_static, ::std::int32_t strictfp, ::std::int32_t super, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    void _iceD_notify(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>);
    /// \endcond

    /// \cond INTERNAL
    void dispatch(::Ice::IncomingRequest&, ::std::function<void(::Ice::OutgoingResponse)>) override;
    /// \endcond
};

using newPtr = ::std::shared_ptr<_cpp_new>;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::abstract::assert>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::abstract::_cpp_break>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<>
struct StreamReader<::abstract::_cpp_break>
{
    static void read(InputStream* istr, ::abstract::_cpp_break& v)
    {
        istr->readAll(v._cpp_case);
    }
};

template<>
struct StreamReader<::abstract::_cpp_else>
{
    static void read(InputStream* istr, ::abstract::_cpp_else& v)
    {
        istr->readAll(v._cpp_if, v.equals, v.final);
    }
};

template<>
struct StreamReader<::abstract::hashCode>
{
    static void read(InputStream* istr, ::abstract::hashCode& v)
    {
        istr->readAll(v._cpp_if);
    }
};

template<>
struct StreamWriter<::abstract::import>
{
    static void write(OutputStream* ostr, const ::abstract::import& v)
    {
        ostr->writeAll(v.instanceof, v.native);
    }
};

template<>
struct StreamReader<::abstract::import>
{
    static void read(InputStream* istr, ::abstract::import& v)
    {
        istr->readAll(v.instanceof, v.native);
    }
};

}
/// \endcond

#include <Ice/PopDisableWarnings.h>
#endif
