//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{

class MyClass;
class MyClassPrx;
class Baz;

}

namespace Test
{

using SerialSmall = ::std::vector<::Ice::Byte>;

using SerialLarge = ::std::vector<::Ice::Byte>;

using SerialStruct = ::std::vector<::Ice::Byte>;

using SLS = ::std::vector<SerialLarge>;

using SLSS = ::std::vector<SLS>;

using SLD = ::std::map<int, SerialLarge>;

using SLSD = ::std::map<int, SLS>;

struct Foo
{
    ::Test::SerialLarge SLmem;
    ::Test::SLS SLSmem;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::SerialLarge&, const ::Test::SLS&> ice_tuple() const
    {
        return std::tie(SLmem, SLSmem);
    }
};

class Bar : public ::Ice::UserExceptionHelper<Bar, ::Ice::UserException>
{
public:

    virtual ~Bar();

    Bar(const Bar&) = default;

    Bar() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Bar(const SerialLarge& SLmem, const SLS& SLSmem) :
        SLmem(SLmem),
        SLSmem(SLSmem)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::SerialLarge&, const ::Test::SLS&> ice_tuple() const
    {
        return std::tie(SLmem, SLSmem);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::SerialLarge SLmem;
    ::Test::SLS SLSmem;
};

/// \cond INTERNAL
static Bar _iceS_Bar_init;
/// \endcond

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test
{

class MyClass : public virtual ::Ice::Object
{
public:

    using ProxyType = MyClassPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSerialSmallJava.
     */
    struct OpSerialSmallJavaResult
    {
        SerialSmall returnValue;
        SerialSmall o;
    };

    virtual SerialSmall opSerialSmallJava(SerialSmall i, SerialSmall& o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSerialSmallJava(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSerialLargeJava.
     */
    struct OpSerialLargeJavaResult
    {
        SerialLarge returnValue;
        SerialLarge o;
    };

    virtual SerialLarge opSerialLargeJava(SerialLarge i, SerialLarge& o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSerialLargeJava(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSerialStructJava.
     */
    struct OpSerialStructJavaResult
    {
        SerialStruct returnValue;
        SerialStruct o;
    };

    virtual SerialStruct opSerialStructJava(SerialStruct i, SerialStruct& o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSerialStructJava(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test
{

class Baz : public ::Ice::ValueHelper<Baz, ::Ice::Value>
{
public:

    virtual ~Baz();

    Baz() = default;

    Baz(const Baz&) = default;
    Baz(Baz&&) = default;
    Baz& operator=(const Baz&) = default;
    Baz& operator=(Baz&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Baz(const ::Test::SerialLarge& SLmem, const ::Test::SLS& SLSmem) :
        SLmem(SLmem),
        SLSmem(SLSmem)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::SerialLarge&, const ::Test::SLS&> ice_tuple() const
    {
        return std::tie(SLmem, SLSmem);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::SerialLarge SLmem;
    ::Test::SLS SLSmem;
};

/// \cond INTERNAL
static Baz _iceS_Baz_init;
/// \endcond

}

namespace Test
{

class MyClassPrx : public virtual ::Ice::Proxy<MyClassPrx, ::Ice::ObjectPrx>
{
public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &MyClassPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &MyClassPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_shutdown, context);
    }

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    SerialSmall opSerialSmallJava(const SerialSmall& i, SerialSmall& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpSerialSmallJavaResult>(true, this, &MyClassPrx::_iceI_opSerialSmallJava, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSerialSmallJavaAsync(const SerialSmall& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpSerialSmallJavaResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpSerialSmallJavaResult, P>(false, this, &MyClassPrx::_iceI_opSerialSmallJava, i, context);
    }

    ::std::function<void()>
    opSerialSmallJavaAsync(const SerialSmall& i,
                           ::std::function<void(::Test::SerialSmall, ::Test::SerialSmall)> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpSerialSmallJavaResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpSerialSmallJavaResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opSerialSmallJava, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opSerialSmallJava(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSerialSmallJavaResult>>&, const SerialSmall&, const ::Ice::Context&);
    /// \endcond

    SerialLarge opSerialLargeJava(const SerialLarge& i, SerialLarge& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpSerialLargeJavaResult>(true, this, &MyClassPrx::_iceI_opSerialLargeJava, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSerialLargeJavaAsync(const SerialLarge& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpSerialLargeJavaResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpSerialLargeJavaResult, P>(false, this, &MyClassPrx::_iceI_opSerialLargeJava, i, context);
    }

    ::std::function<void()>
    opSerialLargeJavaAsync(const SerialLarge& i,
                           ::std::function<void(::Test::SerialLarge, ::Test::SerialLarge)> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpSerialLargeJavaResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpSerialLargeJavaResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opSerialLargeJava, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opSerialLargeJava(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSerialLargeJavaResult>>&, const SerialLarge&, const ::Ice::Context&);
    /// \endcond

    SerialStruct opSerialStructJava(const SerialStruct& i, SerialStruct& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<MyClass::OpSerialStructJavaResult>(true, this, &MyClassPrx::_iceI_opSerialStructJava, i, context).get();
        o = ::std::move(_result.o);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSerialStructJavaAsync(const SerialStruct& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<MyClass::OpSerialStructJavaResult>>().get_future())
    {
        return _makePromiseOutgoing<MyClass::OpSerialStructJavaResult, P>(false, this, &MyClassPrx::_iceI_opSerialStructJava, i, context);
    }

    ::std::function<void()>
    opSerialStructJavaAsync(const SerialStruct& i,
                            ::std::function<void(::Test::SerialStruct, ::Test::SerialStruct)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](MyClass::OpSerialStructJavaResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.o));
        };
        return _makeLambdaOutgoing<MyClass::OpSerialStructJavaResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::MyClassPrx::_iceI_opSerialStructJava, i, context);
    }

    /// \cond INTERNAL
    void _iceI_opSerialStructJava(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<MyClass::OpSerialStructJavaResult>>&, const SerialStruct&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    MyClassPrx() = default;
    friend ::std::shared_ptr<MyClassPrx> IceInternal::createProxy<MyClassPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::Test::Foo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::Foo, S>
{
    static void read(S* istr, ::Test::Foo& v)
    {
        istr->readAll(v.SLmem, v.SLSmem);
    }
};

template<typename S>
struct StreamReader<::Test::Bar, S>
{
    static void read(S* istr, ::Test::Bar& v)
    {
        istr->readAll(v.SLmem, v.SLSmem);
    }
};

template<typename S>
struct StreamReader<::Test::Baz, S>
{
    static void read(S* istr, ::Test::Baz& v)
    {
        istr->readAll(v.SLmem, v.SLSmem);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using MyClassPtr = ::std::shared_ptr<MyClass>;
using MyClassPrxPtr = ::std::shared_ptr<MyClassPrx>;

using BazPtr = ::std::shared_ptr<Baz>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Test
{

class MyClass;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< MyClass>&);
::IceProxy::Ice::Object* upCast(MyClass*);
/// \endcond

}

}

namespace Test
{
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::MyClass> MyClassPrx;
typedef MyClassPrx MyClassPrxPtr;

class MyClass;
using MyClassPtr = ::Ice::SharedPtr< MyClass>;

class Baz;
using BazPtr = ::Ice::SharedPtr<Baz>;

}

namespace Test
{

typedef ::std::vector< ::Ice::Byte> SerialSmall;

typedef ::std::vector< ::Ice::Byte> SerialLarge;

typedef ::std::vector< ::Ice::Byte> SerialStruct;

typedef ::std::vector<SerialLarge> SLS;

typedef ::std::vector<SLS> SLSS;

typedef ::std::map< ::Ice::Int, SerialLarge> SLD;

typedef ::std::map< ::Ice::Int, SLS> SLSD;

struct Foo
{
    ::Test::SerialLarge SLmem;
    ::Test::SLS SLSmem;
};

class Bar : public ::Ice::UserException
{
public:

    Bar() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    Bar(const SerialLarge& SLmem, const SLS& SLSmem);
    Bar(const Bar&) = default;
    virtual ~Bar();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual Bar* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::Test::SerialLarge SLmem;
    ::Test::SLS SLSmem;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static Bar _iceS_Bar_init;
/// \endcond

}

namespace Test
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyClass::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_shutdown.
 */
class Callback_MyClass_shutdown_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyClass_shutdown_Base> Callback_MyClass_shutdownPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyClass::begin_opSerialSmallJava.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opSerialSmallJava.
 */
class Callback_MyClass_opSerialSmallJava_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyClass_opSerialSmallJava_Base> Callback_MyClass_opSerialSmallJavaPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyClass::begin_opSerialLargeJava.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opSerialLargeJava.
 */
class Callback_MyClass_opSerialLargeJava_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyClass_opSerialLargeJava_Base> Callback_MyClass_opSerialLargeJavaPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyClass::begin_opSerialStructJava.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opSerialStructJava.
 */
class Callback_MyClass_opSerialStructJava_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyClass_opSerialStructJava_Base> Callback_MyClass_opSerialStructJavaPtr;

}

namespace IceProxy
{

namespace Test
{

class MyClass : public virtual ::Ice::Proxy<MyClass, ::IceProxy::Ice::Object>
{
public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_shutdown(_iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_MyClass_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Test::Callback_MyClass_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_shutdown(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::SerialSmall opSerialSmallJava(const ::Test::SerialSmall& i, ::Test::SerialSmall& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSerialSmallJava(o, _iceI_begin_opSerialSmallJava(i, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSerialSmallJava(const ::Test::SerialSmall& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSerialSmallJava(i, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSerialSmallJava(const ::Test::SerialSmall& i, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerialSmallJava(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSerialSmallJava(const ::Test::SerialSmall& i, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerialSmallJava(i, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSerialSmallJava(const ::Test::SerialSmall& i, const ::Test::Callback_MyClass_opSerialSmallJavaPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerialSmallJava(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSerialSmallJava(const ::Test::SerialSmall& i, const ::Ice::Context& context, const ::Test::Callback_MyClass_opSerialSmallJavaPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerialSmallJava(i, context, cb, cookie);
    }

    ::Test::SerialSmall end_opSerialSmallJava(::Test::SerialSmall& o, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSerialSmallJava(::Test::SerialSmall& iceP_o, ::Test::SerialSmall& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSerialSmallJava(const ::Test::SerialSmall&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::SerialLarge opSerialLargeJava(const ::Test::SerialLarge& i, ::Test::SerialLarge& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSerialLargeJava(o, _iceI_begin_opSerialLargeJava(i, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSerialLargeJava(const ::Test::SerialLarge& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSerialLargeJava(i, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSerialLargeJava(const ::Test::SerialLarge& i, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerialLargeJava(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSerialLargeJava(const ::Test::SerialLarge& i, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerialLargeJava(i, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSerialLargeJava(const ::Test::SerialLarge& i, const ::Test::Callback_MyClass_opSerialLargeJavaPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerialLargeJava(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSerialLargeJava(const ::Test::SerialLarge& i, const ::Ice::Context& context, const ::Test::Callback_MyClass_opSerialLargeJavaPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerialLargeJava(i, context, cb, cookie);
    }

    ::Test::SerialLarge end_opSerialLargeJava(::Test::SerialLarge& o, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSerialLargeJava(::Test::SerialLarge& iceP_o, ::Test::SerialLarge& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSerialLargeJava(const ::Test::SerialLarge&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::SerialStruct opSerialStructJava(const ::Test::SerialStruct& i, ::Test::SerialStruct& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSerialStructJava(o, _iceI_begin_opSerialStructJava(i, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSerialStructJava(const ::Test::SerialStruct& i, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSerialStructJava(i, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSerialStructJava(const ::Test::SerialStruct& i, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerialStructJava(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSerialStructJava(const ::Test::SerialStruct& i, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerialStructJava(i, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSerialStructJava(const ::Test::SerialStruct& i, const ::Test::Callback_MyClass_opSerialStructJavaPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerialStructJava(i, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSerialStructJava(const ::Test::SerialStruct& i, const ::Ice::Context& context, const ::Test::Callback_MyClass_opSerialStructJavaPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerialStructJava(i, context, cb, cookie);
    }

    ::Test::SerialStruct end_opSerialStructJava(::Test::SerialStruct& o, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSerialStructJava(::Test::SerialStruct& iceP_o, ::Test::SerialStruct& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSerialStructJava(const ::Test::SerialStruct&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Test
{

class MyClass : public virtual ::Ice::Object
{
public:

    typedef MyClassPrx ProxyType;

    virtual ~MyClass();
    MyClass() = default;
    MyClass(const MyClass&) = default;
    MyClass& operator=(const MyClass&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void shutdown(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SerialSmall opSerialSmallJava(const SerialSmall& i, SerialSmall& o, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSerialSmallJava(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SerialLarge opSerialLargeJava(const SerialLarge& i, SerialLarge& o, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSerialLargeJava(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual SerialStruct opSerialStructJava(const SerialStruct& i, SerialStruct& o, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSerialStructJava(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

namespace Test
{

class Baz : public ::Ice::ValueHelper<Baz, ::Ice::Value>
{
public:

    virtual ~Baz();

    Baz() = default;

    Baz(const Baz&) = default;
    Baz(Baz&&) = default;
    Baz& operator=(const Baz&) = default;
    Baz& operator=(Baz&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Baz(const ::Test::SerialLarge& SLmem, const ::Test::SLS& SLSmem) :
        SLmem(SLmem),
        SLSmem(SLSmem)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::SerialLarge&, const ::Test::SLS&> ice_tuple() const
    {
        return std::tie(SLmem, SLSmem);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::SerialLarge SLmem;
    ::Test::SLS SLSmem;
};

/// \cond INTERNAL
static Baz _iceS_Baz_init;
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Test::Foo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Test::Foo, S>
{
    static void write(S* ostr, const ::Test::Foo& v)
    {
        ostr->write(v.SLmem);
        ostr->write(v.SLSmem);
    }
};

template<typename S>
struct StreamReader< ::Test::Foo, S>
{
    static void read(S* istr, ::Test::Foo& v)
    {
        istr->read(v.SLmem);
        istr->read(v.SLSmem);
    }
};

template<>
struct StreamableTraits< ::Test::Bar>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::Bar, S>
{
    static void write(S* ostr, const ::Test::Bar& v)
    {
        ostr->write(v.SLmem);
        ostr->write(v.SLSmem);
    }
};

template<typename S>
struct StreamReader< ::Test::Bar, S>
{
    static void read(S* istr, ::Test::Bar& v)
    {
        istr->read(v.SLmem);
        istr->read(v.SLSmem);
    }
};

template<typename S>
struct StreamWriter< ::Test::Baz, S>
{
    static void write(S* ostr, const ::Test::Baz& v)
    {
        ostr->write(v.SLmem);
        ostr->write(v.SLSmem);
    }
};

template<typename S>
struct StreamReader< ::Test::Baz, S>
{
    static void read(S* istr, ::Test::Baz& v)
    {
        istr->read(v.SLmem);
        istr->read(v.SLSmem);
    }
};

}
/// \endcond

namespace Test
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyClass::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_shutdown.
 */
template<class T>
class CallbackNC_MyClass_shutdown : public Callback_MyClass_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MyClass_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyClass::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_shutdown.
 */
template<class T, typename CT>
class Callback_MyClass_shutdown : public Callback_MyClass_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MyClass_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T, typename CT> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T, typename CT> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T, typename CT> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_shutdown.
 */
template<class T, typename CT> Callback_MyClass_shutdownPtr
newCallback_MyClass_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyClass::begin_opSerialSmallJava.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opSerialSmallJava.
 */
template<class T>
class CallbackNC_MyClass_opSerialSmallJava : public Callback_MyClass_opSerialSmallJava_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SerialSmall&, const SerialSmall&);

    CallbackNC_MyClass_opSerialSmallJava(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        SerialSmall iceP_o;
        SerialSmall ret;
        try
        {
            ret = proxy->end_opSerialSmallJava(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_o);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opSerialSmallJava.
 */
template<class T> Callback_MyClass_opSerialSmallJavaPtr
newCallback_MyClass_opSerialSmallJava(const IceUtil::Handle<T>& instance, void (T::*cb)(const SerialSmall&, const SerialSmall&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opSerialSmallJava<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opSerialSmallJava.
 */
template<class T> Callback_MyClass_opSerialSmallJavaPtr
newCallback_MyClass_opSerialSmallJava(T* instance, void (T::*cb)(const SerialSmall&, const SerialSmall&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opSerialSmallJava<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyClass::begin_opSerialSmallJava.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opSerialSmallJava.
 */
template<class T, typename CT>
class Callback_MyClass_opSerialSmallJava : public Callback_MyClass_opSerialSmallJava_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SerialSmall&, const SerialSmall&, const CT&);

    Callback_MyClass_opSerialSmallJava(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        SerialSmall iceP_o;
        SerialSmall ret;
        try
        {
            ret = proxy->end_opSerialSmallJava(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_o, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opSerialSmallJava.
 */
template<class T, typename CT> Callback_MyClass_opSerialSmallJavaPtr
newCallback_MyClass_opSerialSmallJava(const IceUtil::Handle<T>& instance, void (T::*cb)(const SerialSmall&, const SerialSmall&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opSerialSmallJava<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opSerialSmallJava.
 */
template<class T, typename CT> Callback_MyClass_opSerialSmallJavaPtr
newCallback_MyClass_opSerialSmallJava(T* instance, void (T::*cb)(const SerialSmall&, const SerialSmall&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opSerialSmallJava<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyClass::begin_opSerialLargeJava.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opSerialLargeJava.
 */
template<class T>
class CallbackNC_MyClass_opSerialLargeJava : public Callback_MyClass_opSerialLargeJava_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SerialLarge&, const SerialLarge&);

    CallbackNC_MyClass_opSerialLargeJava(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        SerialLarge iceP_o;
        SerialLarge ret;
        try
        {
            ret = proxy->end_opSerialLargeJava(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_o);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opSerialLargeJava.
 */
template<class T> Callback_MyClass_opSerialLargeJavaPtr
newCallback_MyClass_opSerialLargeJava(const IceUtil::Handle<T>& instance, void (T::*cb)(const SerialLarge&, const SerialLarge&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opSerialLargeJava<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opSerialLargeJava.
 */
template<class T> Callback_MyClass_opSerialLargeJavaPtr
newCallback_MyClass_opSerialLargeJava(T* instance, void (T::*cb)(const SerialLarge&, const SerialLarge&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opSerialLargeJava<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyClass::begin_opSerialLargeJava.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opSerialLargeJava.
 */
template<class T, typename CT>
class Callback_MyClass_opSerialLargeJava : public Callback_MyClass_opSerialLargeJava_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SerialLarge&, const SerialLarge&, const CT&);

    Callback_MyClass_opSerialLargeJava(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        SerialLarge iceP_o;
        SerialLarge ret;
        try
        {
            ret = proxy->end_opSerialLargeJava(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_o, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opSerialLargeJava.
 */
template<class T, typename CT> Callback_MyClass_opSerialLargeJavaPtr
newCallback_MyClass_opSerialLargeJava(const IceUtil::Handle<T>& instance, void (T::*cb)(const SerialLarge&, const SerialLarge&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opSerialLargeJava<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opSerialLargeJava.
 */
template<class T, typename CT> Callback_MyClass_opSerialLargeJavaPtr
newCallback_MyClass_opSerialLargeJava(T* instance, void (T::*cb)(const SerialLarge&, const SerialLarge&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opSerialLargeJava<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyClass::begin_opSerialStructJava.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opSerialStructJava.
 */
template<class T>
class CallbackNC_MyClass_opSerialStructJava : public Callback_MyClass_opSerialStructJava_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const SerialStruct&, const SerialStruct&);

    CallbackNC_MyClass_opSerialStructJava(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        SerialStruct iceP_o;
        SerialStruct ret;
        try
        {
            ret = proxy->end_opSerialStructJava(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_o);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opSerialStructJava.
 */
template<class T> Callback_MyClass_opSerialStructJavaPtr
newCallback_MyClass_opSerialStructJava(const IceUtil::Handle<T>& instance, void (T::*cb)(const SerialStruct&, const SerialStruct&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opSerialStructJava<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opSerialStructJava.
 */
template<class T> Callback_MyClass_opSerialStructJavaPtr
newCallback_MyClass_opSerialStructJava(T* instance, void (T::*cb)(const SerialStruct&, const SerialStruct&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyClass_opSerialStructJava<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyClass::begin_opSerialStructJava.
 * Create a wrapper instance by calling ::Test::newCallback_MyClass_opSerialStructJava.
 */
template<class T, typename CT>
class Callback_MyClass_opSerialStructJava : public Callback_MyClass_opSerialStructJava_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const SerialStruct&, const SerialStruct&, const CT&);

    Callback_MyClass_opSerialStructJava(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyClassPrx proxy = MyClassPrx::uncheckedCast(result->getProxy());
        SerialStruct iceP_o;
        SerialStruct ret;
        try
        {
            ret = proxy->end_opSerialStructJava(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_o, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opSerialStructJava.
 */
template<class T, typename CT> Callback_MyClass_opSerialStructJavaPtr
newCallback_MyClass_opSerialStructJava(const IceUtil::Handle<T>& instance, void (T::*cb)(const SerialStruct&, const SerialStruct&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opSerialStructJava<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyClass::begin_opSerialStructJava.
 */
template<class T, typename CT> Callback_MyClass_opSerialStructJavaPtr
newCallback_MyClass_opSerialStructJava(T* instance, void (T::*cb)(const SerialStruct&, const SerialStruct&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyClass_opSerialStructJava<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
