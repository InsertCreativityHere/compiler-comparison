//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{

class MyObject;
class MyObjectPrx;

}

namespace Test
{

class InvalidInputException : public ::Ice::UserExceptionHelper<InvalidInputException, ::Ice::UserException>
{
public:

    virtual ~InvalidInputException();

    InvalidInputException(const InvalidInputException&) = default;

    InvalidInputException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    InvalidInputException(const ::std::string& message) :
        message(message)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(message);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string message;
};

/// \cond INTERNAL
static InvalidInputException _iceS_InvalidInputException_init;
/// \endcond

}

namespace Test
{

class MyObject : public virtual ::Ice::Object
{
public:

    using ProxyType = MyObjectPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual int add(int x, int y, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_add(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int addWithRetry(int x, int y, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_addWithRetry(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int badAdd(int x, int y, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_badAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int notExistAdd(int x, int y, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_notExistAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual int badSystemAdd(int x, int y, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_badSystemAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void amdAddAsync(int x, int y, ::std::function<void(int returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_amdAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void amdAddWithRetryAsync(int x, int y, ::std::function<void(int returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_amdAddWithRetry(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void amdBadAddAsync(int x, int y, ::std::function<void(int returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_amdBadAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void amdNotExistAddAsync(int x, int y, ::std::function<void(int returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_amdNotExistAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void amdBadSystemAddAsync(int x, int y, ::std::function<void(int returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_amdBadSystemAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test
{

class MyObjectPrx : public virtual ::Ice::Proxy<MyObjectPrx, ::Ice::ObjectPrx>
{
public:

    int add(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &MyObjectPrx::_iceI_add, x, y, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto addAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &MyObjectPrx::_iceI_add, x, y, context);
    }

    ::std::function<void()>
    addAsync(int x, int y,
             ::std::function<void(int)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_add, x, y, context);
    }

    /// \cond INTERNAL
    void _iceI_add(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int addWithRetry(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &MyObjectPrx::_iceI_addWithRetry, x, y, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto addWithRetryAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &MyObjectPrx::_iceI_addWithRetry, x, y, context);
    }

    ::std::function<void()>
    addWithRetryAsync(int x, int y,
                      ::std::function<void(int)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_addWithRetry, x, y, context);
    }

    /// \cond INTERNAL
    void _iceI_addWithRetry(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int badAdd(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &MyObjectPrx::_iceI_badAdd, x, y, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto badAddAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &MyObjectPrx::_iceI_badAdd, x, y, context);
    }

    ::std::function<void()>
    badAddAsync(int x, int y,
                ::std::function<void(int)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_badAdd, x, y, context);
    }

    /// \cond INTERNAL
    void _iceI_badAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int notExistAdd(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &MyObjectPrx::_iceI_notExistAdd, x, y, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto notExistAddAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &MyObjectPrx::_iceI_notExistAdd, x, y, context);
    }

    ::std::function<void()>
    notExistAddAsync(int x, int y,
                     ::std::function<void(int)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_notExistAdd, x, y, context);
    }

    /// \cond INTERNAL
    void _iceI_notExistAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int badSystemAdd(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &MyObjectPrx::_iceI_badSystemAdd, x, y, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto badSystemAddAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &MyObjectPrx::_iceI_badSystemAdd, x, y, context);
    }

    ::std::function<void()>
    badSystemAddAsync(int x, int y,
                      ::std::function<void(int)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_badSystemAdd, x, y, context);
    }

    /// \cond INTERNAL
    void _iceI_badSystemAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int amdAdd(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &MyObjectPrx::_iceI_amdAdd, x, y, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto amdAddAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &MyObjectPrx::_iceI_amdAdd, x, y, context);
    }

    ::std::function<void()>
    amdAddAsync(int x, int y,
                ::std::function<void(int)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_amdAdd, x, y, context);
    }

    /// \cond INTERNAL
    void _iceI_amdAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int amdAddWithRetry(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &MyObjectPrx::_iceI_amdAddWithRetry, x, y, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto amdAddWithRetryAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &MyObjectPrx::_iceI_amdAddWithRetry, x, y, context);
    }

    ::std::function<void()>
    amdAddWithRetryAsync(int x, int y,
                         ::std::function<void(int)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_amdAddWithRetry, x, y, context);
    }

    /// \cond INTERNAL
    void _iceI_amdAddWithRetry(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int amdBadAdd(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &MyObjectPrx::_iceI_amdBadAdd, x, y, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto amdBadAddAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &MyObjectPrx::_iceI_amdBadAdd, x, y, context);
    }

    ::std::function<void()>
    amdBadAddAsync(int x, int y,
                   ::std::function<void(int)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_amdBadAdd, x, y, context);
    }

    /// \cond INTERNAL
    void _iceI_amdBadAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int amdNotExistAdd(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &MyObjectPrx::_iceI_amdNotExistAdd, x, y, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto amdNotExistAddAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &MyObjectPrx::_iceI_amdNotExistAdd, x, y, context);
    }

    ::std::function<void()>
    amdNotExistAddAsync(int x, int y,
                        ::std::function<void(int)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_amdNotExistAdd, x, y, context);
    }

    /// \cond INTERNAL
    void _iceI_amdNotExistAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    int amdBadSystemAdd(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &MyObjectPrx::_iceI_amdBadSystemAdd, x, y, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto amdBadSystemAddAsync(int x, int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &MyObjectPrx::_iceI_amdBadSystemAdd, x, y, context);
    }

    ::std::function<void()>
    amdBadSystemAddAsync(int x, int y,
                         ::std::function<void(int)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<int>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyObjectPrx::_iceI_amdBadSystemAdd, x, y, context);
    }

    /// \cond INTERNAL
    void _iceI_amdBadSystemAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    MyObjectPrx() = default;
    friend ::std::shared_ptr<MyObjectPrx> IceInternal::createProxy<MyObjectPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::Test::InvalidInputException, S>
{
    static void read(S* istr, ::Test::InvalidInputException& v)
    {
        istr->readAll(v.message);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using MyObjectPtr = ::std::shared_ptr<MyObject>;
using MyObjectPrxPtr = ::std::shared_ptr<MyObjectPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Test
{

class MyObject;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< MyObject>&);
::IceProxy::Ice::Object* upCast(MyObject*);
/// \endcond

}

}

namespace Test
{

class MyObject;
/// \cond INTERNAL
::Ice::Object* upCast(MyObject*);
/// \endcond
typedef ::IceInternal::Handle< MyObject> MyObjectPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::MyObject> MyObjectPrx;
typedef MyObjectPrx MyObjectPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(MyObjectPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Test
{

class InvalidInputException : public ::Ice::UserException
{
public:

    InvalidInputException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit InvalidInputException(const ::std::string& message);
    InvalidInputException(const InvalidInputException&) = default;
    virtual ~InvalidInputException();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual InvalidInputException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string message;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static InvalidInputException _iceS_InvalidInputException_init;
/// \endcond

}

namespace Test
{

/**
 * AMD callback class for Test::MyObject::amdAdd_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_MyObject_amdAdd : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_MyObject_amdAdd();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(::Ice::Int result) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyObject_amdAdd> AMD_MyObject_amdAddPtr;

/**
 * AMD callback class for Test::MyObject::amdAddWithRetry_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_MyObject_amdAddWithRetry : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_MyObject_amdAddWithRetry();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(::Ice::Int result) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyObject_amdAddWithRetry> AMD_MyObject_amdAddWithRetryPtr;

/**
 * AMD callback class for Test::MyObject::amdBadAdd_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_MyObject_amdBadAdd : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_MyObject_amdBadAdd();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(::Ice::Int result) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyObject_amdBadAdd> AMD_MyObject_amdBadAddPtr;

/**
 * AMD callback class for Test::MyObject::amdNotExistAdd_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_MyObject_amdNotExistAdd : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_MyObject_amdNotExistAdd();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(::Ice::Int result) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyObject_amdNotExistAdd> AMD_MyObject_amdNotExistAddPtr;

/**
 * AMD callback class for Test::MyObject::amdBadSystemAdd_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_MyObject_amdBadSystemAdd : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_MyObject_amdBadSystemAdd();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(::Ice::Int result) = 0;
};

typedef ::IceUtil::Handle< ::Test::AMD_MyObject_amdBadSystemAdd> AMD_MyObject_amdBadSystemAddPtr;

}

/// \cond INTERNAL
namespace IceAsync
{

namespace Test
{

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_MyObject_amdAdd : public ::Test::AMD_MyObject_amdAdd, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyObject_amdAdd(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_MyObject_amdAddWithRetry : public ::Test::AMD_MyObject_amdAddWithRetry, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyObject_amdAddWithRetry(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_MyObject_amdBadAdd : public ::Test::AMD_MyObject_amdBadAdd, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyObject_amdBadAdd(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_MyObject_amdNotExistAdd : public ::Test::AMD_MyObject_amdNotExistAdd, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyObject_amdNotExistAdd(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_MyObject_amdBadSystemAdd : public ::Test::AMD_MyObject_amdBadSystemAdd, public ::IceInternal::IncomingAsync
{
public:

    AMD_MyObject_amdBadSystemAdd(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

}

}
/// \endcond

namespace Test
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyObject::begin_add.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_add.
 */
class Callback_MyObject_add_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_add_Base> Callback_MyObject_addPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyObject::begin_addWithRetry.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_addWithRetry.
 */
class Callback_MyObject_addWithRetry_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_addWithRetry_Base> Callback_MyObject_addWithRetryPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyObject::begin_badAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_badAdd.
 */
class Callback_MyObject_badAdd_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_badAdd_Base> Callback_MyObject_badAddPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyObject::begin_notExistAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_notExistAdd.
 */
class Callback_MyObject_notExistAdd_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_notExistAdd_Base> Callback_MyObject_notExistAddPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyObject::begin_badSystemAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_badSystemAdd.
 */
class Callback_MyObject_badSystemAdd_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_badSystemAdd_Base> Callback_MyObject_badSystemAddPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyObject::begin_amdAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_amdAdd.
 */
class Callback_MyObject_amdAdd_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_amdAdd_Base> Callback_MyObject_amdAddPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyObject::begin_amdAddWithRetry.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_amdAddWithRetry.
 */
class Callback_MyObject_amdAddWithRetry_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_amdAddWithRetry_Base> Callback_MyObject_amdAddWithRetryPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyObject::begin_amdBadAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_amdBadAdd.
 */
class Callback_MyObject_amdBadAdd_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_amdBadAdd_Base> Callback_MyObject_amdBadAddPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyObject::begin_amdNotExistAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_amdNotExistAdd.
 */
class Callback_MyObject_amdNotExistAdd_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_amdNotExistAdd_Base> Callback_MyObject_amdNotExistAddPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyObject::begin_amdBadSystemAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_amdBadSystemAdd.
 */
class Callback_MyObject_amdBadSystemAdd_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyObject_amdBadSystemAdd_Base> Callback_MyObject_amdBadSystemAddPtr;

}

namespace IceProxy
{

namespace Test
{

class MyObject : public virtual ::Ice::Proxy<MyObject, ::IceProxy::Ice::Object>
{
public:

    ::Ice::Int add(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_add(_iceI_begin_add(x, y, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_add(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_add(x, y, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_add(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_add(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_add(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_add(x, y, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_add(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_addPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_add(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_add(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Test::Callback_MyObject_addPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_add(x, y, context, cb, cookie);
    }

    ::Ice::Int end_add(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_add(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_addWithRetry(_iceI_begin_addWithRetry(x, y, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_addWithRetry(x, y, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addWithRetry(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addWithRetry(x, y, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_addWithRetryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addWithRetry(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Test::Callback_MyObject_addWithRetryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_addWithRetry(x, y, context, cb, cookie);
    }

    ::Ice::Int end_addWithRetry(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_addWithRetry(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int badAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_badAdd(_iceI_begin_badAdd(x, y, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_badAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_badAdd(x, y, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_badAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_badAdd(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_badAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_badAdd(x, y, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_badAdd(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_badAddPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_badAdd(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_badAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Test::Callback_MyObject_badAddPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_badAdd(x, y, context, cb, cookie);
    }

    ::Ice::Int end_badAdd(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_badAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_notExistAdd(_iceI_begin_notExistAdd(x, y, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_notExistAdd(x, y, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_notExistAdd(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_notExistAdd(x, y, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_notExistAddPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_notExistAdd(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Test::Callback_MyObject_notExistAddPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_notExistAdd(x, y, context, cb, cookie);
    }

    ::Ice::Int end_notExistAdd(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_notExistAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_badSystemAdd(_iceI_begin_badSystemAdd(x, y, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_badSystemAdd(x, y, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_badSystemAdd(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_badSystemAdd(x, y, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_badSystemAddPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_badSystemAdd(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Test::Callback_MyObject_badSystemAddPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_badSystemAdd(x, y, context, cb, cookie);
    }

    ::Ice::Int end_badSystemAdd(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_badSystemAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int amdAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_amdAdd(_iceI_begin_amdAdd(x, y, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_amdAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_amdAdd(x, y, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_amdAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdAdd(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_amdAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdAdd(x, y, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_amdAdd(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_amdAddPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdAdd(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_amdAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Test::Callback_MyObject_amdAddPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdAdd(x, y, context, cb, cookie);
    }

    ::Ice::Int end_amdAdd(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_amdAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_amdAddWithRetry(_iceI_begin_amdAddWithRetry(x, y, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_amdAddWithRetry(x, y, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdAddWithRetry(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdAddWithRetry(x, y, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_amdAddWithRetryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdAddWithRetry(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_amdAddWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Test::Callback_MyObject_amdAddWithRetryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdAddWithRetry(x, y, context, cb, cookie);
    }

    ::Ice::Int end_amdAddWithRetry(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_amdAddWithRetry(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_amdBadAdd(_iceI_begin_amdBadAdd(x, y, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_amdBadAdd(x, y, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdBadAdd(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdBadAdd(x, y, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_amdBadAddPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdBadAdd(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_amdBadAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Test::Callback_MyObject_amdBadAddPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdBadAdd(x, y, context, cb, cookie);
    }

    ::Ice::Int end_amdBadAdd(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_amdBadAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_amdNotExistAdd(_iceI_begin_amdNotExistAdd(x, y, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_amdNotExistAdd(x, y, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdNotExistAdd(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdNotExistAdd(x, y, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_amdNotExistAddPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdNotExistAdd(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_amdNotExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Test::Callback_MyObject_amdNotExistAddPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdNotExistAdd(x, y, context, cb, cookie);
    }

    ::Ice::Int end_amdNotExistAdd(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_amdNotExistAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_amdBadSystemAdd(_iceI_begin_amdBadSystemAdd(x, y, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_amdBadSystemAdd(x, y, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdBadSystemAdd(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdBadSystemAdd(x, y, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Test::Callback_MyObject_amdBadSystemAddPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdBadSystemAdd(x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_amdBadSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Context& context, const ::Test::Callback_MyObject_amdBadSystemAddPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_amdBadSystemAdd(x, y, context, cb, cookie);
    }

    ::Ice::Int end_amdBadSystemAdd(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_amdBadSystemAdd(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Test
{

class MyObject : public virtual ::Ice::Object
{
public:

    typedef MyObjectPrx ProxyType;
    typedef MyObjectPtr PointerType;

    virtual ~MyObject();
    MyObject() = default;
    MyObject(const MyObject&) = default;
    MyObject& operator=(const MyObject&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int add(::Ice::Int x, ::Ice::Int y, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_add(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Int addWithRetry(::Ice::Int x, ::Ice::Int y, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_addWithRetry(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Int badAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_badAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Int notExistAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_notExistAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::Int badSystemAdd(::Ice::Int x, ::Ice::Int y, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_badSystemAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void amdAdd_async(const ::Test::AMD_MyObject_amdAddPtr& cb, ::Ice::Int x, ::Ice::Int y, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_amdAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void amdAddWithRetry_async(const ::Test::AMD_MyObject_amdAddWithRetryPtr& cb, ::Ice::Int x, ::Ice::Int y, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_amdAddWithRetry(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void amdBadAdd_async(const ::Test::AMD_MyObject_amdBadAddPtr& cb, ::Ice::Int x, ::Ice::Int y, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_amdBadAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void amdNotExistAdd_async(const ::Test::AMD_MyObject_amdNotExistAddPtr& cb, ::Ice::Int x, ::Ice::Int y, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_amdNotExistAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void amdBadSystemAdd_async(const ::Test::AMD_MyObject_amdBadSystemAddPtr& cb, ::Ice::Int x, ::Ice::Int y, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_amdBadSystemAdd(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const MyObject& lhs, const MyObject& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const MyObject& lhs, const MyObject& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Test::InvalidInputException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::InvalidInputException, S>
{
    static void write(S* ostr, const ::Test::InvalidInputException& v)
    {
        ostr->write(v.message);
    }
};

template<typename S>
struct StreamReader< ::Test::InvalidInputException, S>
{
    static void read(S* istr, ::Test::InvalidInputException& v)
    {
        istr->read(v.message);
    }
};

}
/// \endcond

namespace Test
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyObject::begin_add.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_add.
 */
template<class T>
class CallbackNC_MyObject_add : public Callback_MyObject_add_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_add(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_add(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_add.
 */
template<class T> Callback_MyObject_addPtr
newCallback_MyObject_add(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_add<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_add.
 */
template<class T> Callback_MyObject_addPtr
newCallback_MyObject_add(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_add<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyObject::begin_add.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_add.
 */
template<class T, typename CT>
class Callback_MyObject_add : public Callback_MyObject_add_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_add(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_add(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_add.
 */
template<class T, typename CT> Callback_MyObject_addPtr
newCallback_MyObject_add(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_add<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_add.
 */
template<class T, typename CT> Callback_MyObject_addPtr
newCallback_MyObject_add(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_add<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyObject::begin_addWithRetry.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_addWithRetry.
 */
template<class T>
class CallbackNC_MyObject_addWithRetry : public Callback_MyObject_addWithRetry_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_addWithRetry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_addWithRetry(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_addWithRetry.
 */
template<class T> Callback_MyObject_addWithRetryPtr
newCallback_MyObject_addWithRetry(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_addWithRetry<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_addWithRetry.
 */
template<class T> Callback_MyObject_addWithRetryPtr
newCallback_MyObject_addWithRetry(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_addWithRetry<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyObject::begin_addWithRetry.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_addWithRetry.
 */
template<class T, typename CT>
class Callback_MyObject_addWithRetry : public Callback_MyObject_addWithRetry_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_addWithRetry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_addWithRetry(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_addWithRetry.
 */
template<class T, typename CT> Callback_MyObject_addWithRetryPtr
newCallback_MyObject_addWithRetry(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_addWithRetry<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_addWithRetry.
 */
template<class T, typename CT> Callback_MyObject_addWithRetryPtr
newCallback_MyObject_addWithRetry(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_addWithRetry<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyObject::begin_badAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_badAdd.
 */
template<class T>
class CallbackNC_MyObject_badAdd : public Callback_MyObject_badAdd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_badAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_badAdd(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_badAdd.
 */
template<class T> Callback_MyObject_badAddPtr
newCallback_MyObject_badAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_badAdd<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_badAdd.
 */
template<class T> Callback_MyObject_badAddPtr
newCallback_MyObject_badAdd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_badAdd<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyObject::begin_badAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_badAdd.
 */
template<class T, typename CT>
class Callback_MyObject_badAdd : public Callback_MyObject_badAdd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_badAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_badAdd(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_badAdd.
 */
template<class T, typename CT> Callback_MyObject_badAddPtr
newCallback_MyObject_badAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_badAdd<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_badAdd.
 */
template<class T, typename CT> Callback_MyObject_badAddPtr
newCallback_MyObject_badAdd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_badAdd<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyObject::begin_notExistAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_notExistAdd.
 */
template<class T>
class CallbackNC_MyObject_notExistAdd : public Callback_MyObject_notExistAdd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_notExistAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_notExistAdd(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_notExistAdd.
 */
template<class T> Callback_MyObject_notExistAddPtr
newCallback_MyObject_notExistAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_notExistAdd<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_notExistAdd.
 */
template<class T> Callback_MyObject_notExistAddPtr
newCallback_MyObject_notExistAdd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_notExistAdd<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyObject::begin_notExistAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_notExistAdd.
 */
template<class T, typename CT>
class Callback_MyObject_notExistAdd : public Callback_MyObject_notExistAdd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_notExistAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_notExistAdd(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_notExistAdd.
 */
template<class T, typename CT> Callback_MyObject_notExistAddPtr
newCallback_MyObject_notExistAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_notExistAdd<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_notExistAdd.
 */
template<class T, typename CT> Callback_MyObject_notExistAddPtr
newCallback_MyObject_notExistAdd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_notExistAdd<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyObject::begin_badSystemAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_badSystemAdd.
 */
template<class T>
class CallbackNC_MyObject_badSystemAdd : public Callback_MyObject_badSystemAdd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_badSystemAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_badSystemAdd(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_badSystemAdd.
 */
template<class T> Callback_MyObject_badSystemAddPtr
newCallback_MyObject_badSystemAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_badSystemAdd<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_badSystemAdd.
 */
template<class T> Callback_MyObject_badSystemAddPtr
newCallback_MyObject_badSystemAdd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_badSystemAdd<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyObject::begin_badSystemAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_badSystemAdd.
 */
template<class T, typename CT>
class Callback_MyObject_badSystemAdd : public Callback_MyObject_badSystemAdd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_badSystemAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_badSystemAdd(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_badSystemAdd.
 */
template<class T, typename CT> Callback_MyObject_badSystemAddPtr
newCallback_MyObject_badSystemAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_badSystemAdd<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_badSystemAdd.
 */
template<class T, typename CT> Callback_MyObject_badSystemAddPtr
newCallback_MyObject_badSystemAdd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_badSystemAdd<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyObject::begin_amdAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_amdAdd.
 */
template<class T>
class CallbackNC_MyObject_amdAdd : public Callback_MyObject_amdAdd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_amdAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_amdAdd(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdAdd.
 */
template<class T> Callback_MyObject_amdAddPtr
newCallback_MyObject_amdAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdAdd<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdAdd.
 */
template<class T> Callback_MyObject_amdAddPtr
newCallback_MyObject_amdAdd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdAdd<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyObject::begin_amdAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_amdAdd.
 */
template<class T, typename CT>
class Callback_MyObject_amdAdd : public Callback_MyObject_amdAdd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_amdAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_amdAdd(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdAdd.
 */
template<class T, typename CT> Callback_MyObject_amdAddPtr
newCallback_MyObject_amdAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdAdd<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdAdd.
 */
template<class T, typename CT> Callback_MyObject_amdAddPtr
newCallback_MyObject_amdAdd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdAdd<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyObject::begin_amdAddWithRetry.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_amdAddWithRetry.
 */
template<class T>
class CallbackNC_MyObject_amdAddWithRetry : public Callback_MyObject_amdAddWithRetry_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_amdAddWithRetry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_amdAddWithRetry(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdAddWithRetry.
 */
template<class T> Callback_MyObject_amdAddWithRetryPtr
newCallback_MyObject_amdAddWithRetry(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdAddWithRetry<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdAddWithRetry.
 */
template<class T> Callback_MyObject_amdAddWithRetryPtr
newCallback_MyObject_amdAddWithRetry(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdAddWithRetry<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyObject::begin_amdAddWithRetry.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_amdAddWithRetry.
 */
template<class T, typename CT>
class Callback_MyObject_amdAddWithRetry : public Callback_MyObject_amdAddWithRetry_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_amdAddWithRetry(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_amdAddWithRetry(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdAddWithRetry.
 */
template<class T, typename CT> Callback_MyObject_amdAddWithRetryPtr
newCallback_MyObject_amdAddWithRetry(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdAddWithRetry<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdAddWithRetry.
 */
template<class T, typename CT> Callback_MyObject_amdAddWithRetryPtr
newCallback_MyObject_amdAddWithRetry(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdAddWithRetry<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyObject::begin_amdBadAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_amdBadAdd.
 */
template<class T>
class CallbackNC_MyObject_amdBadAdd : public Callback_MyObject_amdBadAdd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_amdBadAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_amdBadAdd(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdBadAdd.
 */
template<class T> Callback_MyObject_amdBadAddPtr
newCallback_MyObject_amdBadAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdBadAdd<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdBadAdd.
 */
template<class T> Callback_MyObject_amdBadAddPtr
newCallback_MyObject_amdBadAdd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdBadAdd<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyObject::begin_amdBadAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_amdBadAdd.
 */
template<class T, typename CT>
class Callback_MyObject_amdBadAdd : public Callback_MyObject_amdBadAdd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_amdBadAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_amdBadAdd(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdBadAdd.
 */
template<class T, typename CT> Callback_MyObject_amdBadAddPtr
newCallback_MyObject_amdBadAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdBadAdd<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdBadAdd.
 */
template<class T, typename CT> Callback_MyObject_amdBadAddPtr
newCallback_MyObject_amdBadAdd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdBadAdd<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyObject::begin_amdNotExistAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_amdNotExistAdd.
 */
template<class T>
class CallbackNC_MyObject_amdNotExistAdd : public Callback_MyObject_amdNotExistAdd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_amdNotExistAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_amdNotExistAdd(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdNotExistAdd.
 */
template<class T> Callback_MyObject_amdNotExistAddPtr
newCallback_MyObject_amdNotExistAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdNotExistAdd<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdNotExistAdd.
 */
template<class T> Callback_MyObject_amdNotExistAddPtr
newCallback_MyObject_amdNotExistAdd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdNotExistAdd<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyObject::begin_amdNotExistAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_amdNotExistAdd.
 */
template<class T, typename CT>
class Callback_MyObject_amdNotExistAdd : public Callback_MyObject_amdNotExistAdd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_amdNotExistAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_amdNotExistAdd(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdNotExistAdd.
 */
template<class T, typename CT> Callback_MyObject_amdNotExistAddPtr
newCallback_MyObject_amdNotExistAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdNotExistAdd<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdNotExistAdd.
 */
template<class T, typename CT> Callback_MyObject_amdNotExistAddPtr
newCallback_MyObject_amdNotExistAdd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdNotExistAdd<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyObject::begin_amdBadSystemAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_amdBadSystemAdd.
 */
template<class T>
class CallbackNC_MyObject_amdBadSystemAdd : public Callback_MyObject_amdBadSystemAdd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_MyObject_amdBadSystemAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_amdBadSystemAdd(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdBadSystemAdd.
 */
template<class T> Callback_MyObject_amdBadSystemAddPtr
newCallback_MyObject_amdBadSystemAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdBadSystemAdd<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdBadSystemAdd.
 */
template<class T> Callback_MyObject_amdBadSystemAddPtr
newCallback_MyObject_amdBadSystemAdd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyObject_amdBadSystemAdd<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyObject::begin_amdBadSystemAdd.
 * Create a wrapper instance by calling ::Test::newCallback_MyObject_amdBadSystemAdd.
 */
template<class T, typename CT>
class Callback_MyObject_amdBadSystemAdd : public Callback_MyObject_amdBadSystemAdd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_MyObject_amdBadSystemAdd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        MyObjectPrx proxy = MyObjectPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_amdBadSystemAdd(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdBadSystemAdd.
 */
template<class T, typename CT> Callback_MyObject_amdBadSystemAddPtr
newCallback_MyObject_amdBadSystemAdd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdBadSystemAdd<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyObject::begin_amdBadSystemAdd.
 */
template<class T, typename CT> Callback_MyObject_amdBadSystemAddPtr
newCallback_MyObject_amdBadSystemAdd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyObject_amdBadSystemAdd<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
