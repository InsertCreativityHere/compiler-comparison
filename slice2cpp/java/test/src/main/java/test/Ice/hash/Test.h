//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{
    struct PointF;

    struct PointD;

    struct Point;

    using Points = ::std::vector<Point>;

    struct Polyline;

    struct Color;

    using StringColorMap = ::std::map<::std::int32_t, Color>;

    struct ColorPalette;

    class Pen;
    using PenPtr = ::std::shared_ptr<Pen>;

    struct Draw;

}

namespace Test
{

struct PointF
{
    float x;
    float y;
    float z;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y, z);
    }
};

struct PointD
{
    double x;
    double y;
    double z;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const double&, const double&, const double&> ice_tuple() const
    {
        return std::tie(x, y, z);
    }
};

struct Point
{
    ::std::int32_t x;
    ::std::int32_t y;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(x, y);
    }
};

struct Polyline
{
    ::Test::Points vertices;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::Points&> ice_tuple() const
    {
        return std::tie(vertices);
    }
};

struct Color
{
    ::std::int32_t r;
    ::std::int32_t g;
    ::std::int32_t b;
    ::std::int32_t a;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(r, g, b, a);
    }
};

struct ColorPalette
{
    ::Test::StringColorMap colors;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::StringColorMap&> ice_tuple() const
    {
        return std::tie(colors);
    }
};

class Pen : public ::Ice::Value
{
public:

    Pen() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Pen(::std::int32_t thickness, ::Test::Color color) :
        thickness(thickness),
        color(::std::move(color))
    {
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId() noexcept;

    ::std::string ice_id() const override;

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::Test::Color&> ice_tuple() const
    {
        return std::tie(thickness, color);
    }

    /**
     * Creates a shallow polymorphic copy of this instance.
     * @return The cloned value.
     */
    PenPtr ice_clone() const { return ::std::static_pointer_cast <Pen>(_iceCloneImpl()); }

    ::std::int32_t thickness;
    ::Test::Color color;

protected:

    Pen(const Pen&) = default;

    ::Ice::ValuePtr _iceCloneImpl() const override;
    void _iceWriteImpl(::Ice::OutputStream*) const override;

    void _iceReadImpl(::Ice::InputStream*) override;
};

/// \cond INTERNAL
static Pen _iceS_Pen_init;
/// \endcond

struct Draw
{
    ::Test::Color backgroundColor;
    ::Test::PenPtr pen;
    bool shared;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::Color&, const ::Test::PenPtr&, const bool&> ice_tuple() const
    {
        return std::tie(backgroundColor, pen, shared);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::Test::PointF>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<>
struct StreamReader<::Test::PointF>
{
    static void read(InputStream* istr, ::Test::PointF& v)
    {
        istr->readAll(v.x, v.y, v.z);
    }
};

template<>
struct StreamableTraits<::Test::PointD>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<>
struct StreamReader<::Test::PointD>
{
    static void read(InputStream* istr, ::Test::PointD& v)
    {
        istr->readAll(v.x, v.y, v.z);
    }
};

template<>
struct StreamableTraits<::Test::Point>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<>
struct StreamReader<::Test::Point>
{
    static void read(InputStream* istr, ::Test::Point& v)
    {
        istr->readAll(v.x, v.y);
    }
};

template<>
struct StreamableTraits<::Test::Polyline>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamReader<::Test::Polyline>
{
    static void read(InputStream* istr, ::Test::Polyline& v)
    {
        istr->readAll(v.vertices);
    }
};

template<>
struct StreamableTraits<::Test::Color>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<>
struct StreamReader<::Test::Color>
{
    static void read(InputStream* istr, ::Test::Color& v)
    {
        istr->readAll(v.r, v.g, v.b, v.a);
    }
};

template<>
struct StreamableTraits<::Test::ColorPalette>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamReader<::Test::ColorPalette>
{
    static void read(InputStream* istr, ::Test::ColorPalette& v)
    {
        istr->readAll(v.colors);
    }
};

template<>
struct StreamReader<::Test::Pen>
{
    static void read(InputStream* istr, ::Test::Pen& v)
    {
        istr->readAll(v.thickness, v.color);
    }
};

template<>
struct StreamableTraits<::Test::Draw>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 18;
    static const bool fixedLength = false;
};

template<>
struct StreamReader<::Test::Draw>
{
    static void read(InputStream* istr, ::Test::Draw& v)
    {
        istr->readAll(v.backgroundColor, v.pen, v.shared);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
