//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultValueFactoryInit<::Test::C1> iceC_Test_C1_init("::Test::C1");

const ::IceInternal::DefaultValueFactoryInit<::Test::C2> iceC_Test_C2_init("::Test::C2");

const ::std::string iceC_Test_I_ids[2] =
{
    "::Ice::Object",
    "::Test::I"
};
const ::std::string iceC_Test_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opC1",
    "opCMap",
    "opCSeq",
    "opE1",
    "opS",
    "opS1",
    "opSMap",
    "opSSeq",
    "shutdown"
};
const ::std::string iceC_Test_I_opS_name = "opS";
const ::std::string iceC_Test_I_opSSeq_name = "opSSeq";
const ::std::string iceC_Test_I_opSMap_name = "opSMap";
const ::std::string iceC_Test_I_opC_name = "opC";
const ::std::string iceC_Test_I_opCSeq_name = "opCSeq";
const ::std::string iceC_Test_I_opCMap_name = "opCMap";
const ::std::string iceC_Test_I_opE1_name = "opE1";
const ::std::string iceC_Test_I_opS1_name = "opS1";
const ::std::string iceC_Test_I_opC1_name = "opC1";
const ::std::string iceC_Test_I_shutdown_name = "shutdown";

const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::Inner2::C> iceC_Test_Inner_Inner2_C_init("::Test::Inner::Inner2::C");

const ::std::string iceC_Test_Inner_Inner2_I_ids[2] =
{
    "::Ice::Object",
    "::Test::Inner::Inner2::I"
};
const ::std::string iceC_Test_Inner_Inner2_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opCMap",
    "opCSeq",
    "opS",
    "opSMap",
    "opSSeq",
    "shutdown"
};
const ::std::string iceC_Test_Inner_Inner2_I_opS_name = "opS";
const ::std::string iceC_Test_Inner_Inner2_I_opSSeq_name = "opSSeq";
const ::std::string iceC_Test_Inner_Inner2_I_opSMap_name = "opSMap";
const ::std::string iceC_Test_Inner_Inner2_I_opC_name = "opC";
const ::std::string iceC_Test_Inner_Inner2_I_opCSeq_name = "opCSeq";
const ::std::string iceC_Test_Inner_Inner2_I_opCMap_name = "opCMap";
const ::std::string iceC_Test_Inner_Inner2_I_shutdown_name = "shutdown";

const ::IceInternal::DefaultValueFactoryInit<::Test::Inner::C> iceC_Test_Inner_C_init("::Test::Inner::C");

const ::std::string iceC_Test_Inner_I_ids[2] =
{
    "::Ice::Object",
    "::Test::Inner::I"
};
const ::std::string iceC_Test_Inner_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opCMap",
    "opCSeq",
    "opS",
    "opSMap",
    "opSSeq",
    "shutdown"
};
const ::std::string iceC_Test_Inner_I_opS_name = "opS";
const ::std::string iceC_Test_Inner_I_opSSeq_name = "opSSeq";
const ::std::string iceC_Test_Inner_I_opSMap_name = "opSMap";
const ::std::string iceC_Test_Inner_I_opC_name = "opC";
const ::std::string iceC_Test_Inner_I_opCSeq_name = "opCSeq";
const ::std::string iceC_Test_Inner_I_opCMap_name = "opCMap";
const ::std::string iceC_Test_Inner_I_shutdown_name = "shutdown";

const ::std::string iceC_Inner_Test_Inner2_I_ids[2] =
{
    "::Ice::Object",
    "::Inner::Test::Inner2::I"
};
const ::std::string iceC_Inner_Test_Inner2_I_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "opC",
    "opCMap",
    "opCSeq",
    "opS",
    "opSMap",
    "opSSeq",
    "shutdown"
};
const ::std::string iceC_Inner_Test_Inner2_I_opS_name = "opS";
const ::std::string iceC_Inner_Test_Inner2_I_opSSeq_name = "opSSeq";
const ::std::string iceC_Inner_Test_Inner2_I_opSMap_name = "opSMap";
const ::std::string iceC_Inner_Test_Inner2_I_opC_name = "opC";
const ::std::string iceC_Inner_Test_Inner2_I_opCSeq_name = "opCSeq";
const ::std::string iceC_Inner_Test_Inner2_I_opCMap_name = "opCMap";
const ::std::string iceC_Inner_Test_Inner2_I_shutdown_name = "shutdown";

}

bool
Test::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_I_ids, iceC_Test_I_ids + 2, s);
}

::std::vector<::std::string>
Test::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_I_ids[0], &iceC_Test_I_ids[2]);
}

::std::string
Test::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    S iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    S iceP_s2;
    S ret = this->opS(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SSeq iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    SSeq iceP_s2;
    SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SMap iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    SMap iceP_s2;
    SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<C> iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<C> iceP_c2;
    ::std::shared_ptr<C> ret = this->opC(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CSeq iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    CSeq iceP_c2;
    CSeq ret = this->opCSeq(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    CMap iceP_c2;
    CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opE1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    E1 iceP_E1;
    istr->readAll(iceP_E1);
    inS.endReadParams();
    E1 ret = this->opE1(iceP_E1, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opS1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    S1 iceP_S1;
    istr->readAll(iceP_S1);
    inS.endReadParams();
    S1 ret = this->opS1(::std::move(iceP_S1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_opC1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<C1> iceP_C1;
    istr->readAll(iceP_C1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<C1> ret = this->opC1(::std::move(iceP_C1), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_I_ops, iceC_Test_I_ops + 14, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_I_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opC1(in, current);
        }
        case 6:
        {
            return _iceD_opCMap(in, current);
        }
        case 7:
        {
            return _iceD_opCSeq(in, current);
        }
        case 8:
        {
            return _iceD_opE1(in, current);
        }
        case 9:
        {
            return _iceD_opS(in, current);
        }
        case 10:
        {
            return _iceD_opS1(in, current);
        }
        case 11:
        {
            return _iceD_opSMap(in, current);
        }
        case 12:
        {
            return _iceD_opSSeq(in, current);
        }
        case 13:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Inner::Inner2::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Inner_Inner2_I_ids, iceC_Test_Inner_Inner2_I_ids + 2, s);
}

::std::vector<::std::string>
Test::Inner::Inner2::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Inner_Inner2_I_ids[0], &iceC_Test_Inner_Inner2_I_ids[2]);
}

::std::string
Test::Inner::Inner2::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Inner::Inner2::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Inner2::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    S iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    S iceP_s2;
    S ret = this->opS(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SSeq iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    SSeq iceP_s2;
    SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    SMap iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    SMap iceP_s2;
    SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<C> iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<C> iceP_c2;
    ::std::shared_ptr<C> ret = this->opC(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CSeq iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    CSeq iceP_c2;
    CSeq ret = this->opCSeq(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    CMap iceP_c2;
    CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::Inner2::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Inner_Inner2_I_ops, iceC_Test_Inner_Inner2_I_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Inner_Inner2_I_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opCMap(in, current);
        }
        case 6:
        {
            return _iceD_opCSeq(in, current);
        }
        case 7:
        {
            return _iceD_opS(in, current);
        }
        case 8:
        {
            return _iceD_opSMap(in, current);
        }
        case 9:
        {
            return _iceD_opSSeq(in, current);
        }
        case 10:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::Inner::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Inner_I_ids, iceC_Test_Inner_I_ids + 2, s);
}

::std::vector<::std::string>
Test::Inner::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Inner_I_ids[0], &iceC_Test_Inner_I_ids[2]);
}

::std::string
Test::Inner::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Inner::I::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::I";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::Inner::Inner2::S iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::Inner::Inner2::S iceP_s2;
    ::Test::Inner::Inner2::S ret = this->opS(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::Inner::Inner2::SSeq iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::Inner::Inner2::SSeq iceP_s2;
    ::Test::Inner::Inner2::SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::Inner::Inner2::SMap iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::Inner::Inner2::SMap iceP_s2;
    ::Test::Inner::Inner2::SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Test::Inner::Inner2::C> iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<::Test::Inner::Inner2::C> iceP_c2;
    ::std::shared_ptr<::Test::Inner::Inner2::C> ret = this->opC(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::Inner::Inner2::CSeq iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::Inner::Inner2::CSeq iceP_c2;
    ::Test::Inner::Inner2::CSeq ret = this->opCSeq(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::Inner::Inner2::CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::Inner::Inner2::CMap iceP_c2;
    ::Test::Inner::Inner2::CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Inner::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Inner_I_ops, iceC_Test_Inner_I_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Inner_I_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opCMap(in, current);
        }
        case 6:
        {
            return _iceD_opCSeq(in, current);
        }
        case 7:
        {
            return _iceD_opS(in, current);
        }
        case 8:
        {
            return _iceD_opSMap(in, current);
        }
        case 9:
        {
            return _iceD_opSSeq(in, current);
        }
        case 10:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Inner::Test::Inner2::I::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Inner_Test_Inner2_I_ids, iceC_Inner_Test_Inner2_I_ids + 2, s);
}

::std::vector<::std::string>
Inner::Test::Inner2::I::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Inner_Test_Inner2_I_ids[0], &iceC_Inner_Test_Inner2_I_ids[2]);
}

::std::string
Inner::Test::Inner2::I::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Inner::Test::Inner2::I::ice_staticId()
{
    static const ::std::string typeId = "::Inner::Test::Inner2::I";
    return typeId;
}

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opS(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::S iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::S iceP_s2;
    ::Test::S ret = this->opS(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opSSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::SSeq iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::SSeq iceP_s2;
    ::Test::SSeq ret = this->opSSeq(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opSMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::SMap iceP_s1;
    istr->readAll(iceP_s1);
    inS.endReadParams();
    ::Test::SMap iceP_s2;
    ::Test::SMap ret = this->opSMap(::std::move(iceP_s1), iceP_s2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_s2, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Test::C> iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<::Test::C> iceP_c2;
    ::std::shared_ptr<::Test::C> ret = this->opC(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opCSeq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::CSeq iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::CSeq iceP_c2;
    ::Test::CSeq ret = this->opCSeq(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_opCMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Test::CMap iceP_c1;
    istr->readAll(iceP_c1);
    istr->readPendingValues();
    inS.endReadParams();
    ::Test::CMap iceP_c2;
    ::Test::CMap ret = this->opCMap(::std::move(iceP_c1), iceP_c2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_c2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Inner::Test::Inner2::I::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Inner_Test_Inner2_I_ops, iceC_Inner_Test_Inner2_I_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Inner_Test_Inner2_I_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_opC(in, current);
        }
        case 5:
        {
            return _iceD_opCMap(in, current);
        }
        case 6:
        {
            return _iceD_opCSeq(in, current);
        }
        case 7:
        {
            return _iceD_opS(in, current);
        }
        case 8:
        {
            return _iceD_opSMap(in, current);
        }
        case 9:
        {
            return _iceD_opSSeq(in, current);
        }
        case 10:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::C::~C()
{
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

Test::C1::~C1()
{
}

const ::std::string&
Test::C1::ice_staticId()
{
    static const ::std::string typeId = "::Test::C1";
    return typeId;
}

Test::C2::~C2()
{
}

const ::std::string&
Test::C2::ice_staticId()
{
    static const ::std::string typeId = "::Test::C2";
    return typeId;
}

Test::Inner::Inner2::C::~C()
{
}

const ::std::string&
Test::Inner::Inner2::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::Inner2::C";
    return typeId;
}

Test::Inner::C::~C()
{
}

const ::std::string&
Test::Inner::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::Inner::C";
    return typeId;
}

/// \cond INTERNAL
void
Test::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSResult>>& outAsync, const S& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opS_name);
    outAsync->invoke(iceC_Test_I_opS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSSeqResult>>& outAsync, const SSeq& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opSSeq_name);
    outAsync->invoke(iceC_Test_I_opSSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSSeqResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSMapResult>>& outAsync, const SMap& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opSMap_name);
    outAsync->invoke(iceC_Test_I_opSMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSMapResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCResult>>& outAsync, const ::std::shared_ptr<C>& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opC_name);
    outAsync->invoke(iceC_Test_I_opC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCSeqResult>>& outAsync, const CSeq& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opCSeq_name);
    outAsync->invoke(iceC_Test_I_opCSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCSeqResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCMapResult>>& outAsync, const CMap& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opCMap_name);
    outAsync->invoke(iceC_Test_I_opCMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCMapResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opE1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::E1>>& outAsync, E1 iceP_E1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opE1_name);
    outAsync->invoke(iceC_Test_I_opE1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_E1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opS1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::S1>>& outAsync, const S1& iceP_S1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opS1_name);
    outAsync->invoke(iceC_Test_I_opS1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_S1);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_opC1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::C1>>>& outAsync, const ::std::shared_ptr<C1>& iceP_C1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_I_opC1_name);
    outAsync->invoke(iceC_Test_I_opC1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_C1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<C1> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_I_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::IPrx::ice_staticId()
{
    return I::ice_staticId();
}

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSResult>>& outAsync, const S& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opS_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSSeqResult>>& outAsync, const SSeq& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opSSeq_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opSSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSSeqResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSMapResult>>& outAsync, const SMap& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opSMap_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opSMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSMapResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCResult>>& outAsync, const ::std::shared_ptr<C>& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opC_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCSeqResult>>& outAsync, const CSeq& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opCSeq_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opCSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCSeqResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCMapResult>>& outAsync, const CMap& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_Inner2_I_opCMap_name);
    outAsync->invoke(iceC_Test_Inner_Inner2_I_opCMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCMapResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::Inner2::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Inner_Inner2_I_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::Inner::Inner2::IPrx::ice_staticId()
{
    return I::ice_staticId();
}

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSResult>>& outAsync, const ::Test::Inner::Inner2::S& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opS_name);
    outAsync->invoke(iceC_Test_Inner_I_opS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSSeqResult>>& outAsync, const ::Test::Inner::Inner2::SSeq& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opSSeq_name);
    outAsync->invoke(iceC_Test_Inner_I_opSSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSSeqResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSMapResult>>& outAsync, const ::Test::Inner::Inner2::SMap& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opSMap_name);
    outAsync->invoke(iceC_Test_Inner_I_opSMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSMapResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCResult>>& outAsync, const ::std::shared_ptr<::Test::Inner::Inner2::C>& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opC_name);
    outAsync->invoke(iceC_Test_Inner_I_opC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCSeqResult>>& outAsync, const ::Test::Inner::Inner2::CSeq& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opCSeq_name);
    outAsync->invoke(iceC_Test_Inner_I_opCSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCSeqResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCMapResult>>& outAsync, const ::Test::Inner::Inner2::CMap& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Inner_I_opCMap_name);
    outAsync->invoke(iceC_Test_Inner_I_opCMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCMapResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::Inner::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Inner_I_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::Inner::IPrx::ice_staticId()
{
    return I::ice_staticId();
}

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opS(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSResult>>& outAsync, const ::Test::S& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opS_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opS_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opSSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSSeqResult>>& outAsync, const ::Test::SSeq& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opSSeq_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opSSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSSeqResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opSMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpSMapResult>>& outAsync, const ::Test::SMap& iceP_s1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opSMap_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opSMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s1);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpSMapResult v;
            istr->readAll(v.s2, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCResult>>& outAsync, const ::std::shared_ptr<::Test::C>& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opC_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opCSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCSeqResult>>& outAsync, const ::Test::CSeq& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opCSeq_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opCSeq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCSeqResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_opCMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<I::OpCMapResult>>& outAsync, const ::Test::CMap& iceP_c1, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Inner_Test_Inner2_I_opCMap_name);
    outAsync->invoke(iceC_Inner_Test_Inner2_I_opCMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_c1);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            I::OpCMapResult v;
            istr->readAll(v.c2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Inner::Test::Inner2::IPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Inner_Test_Inner2_I_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Inner::Test::Inner2::IPrx::ice_staticId()
{
    return I::ice_staticId();
}

namespace Ice
{
}
