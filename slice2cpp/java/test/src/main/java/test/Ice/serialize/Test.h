//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 9
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{

class Initial;
class InitialPrx;
class Base;
class Derived;

}

namespace Test
{

enum class MyEnum : unsigned char
{
    enum1,
    enum2,
    enum3
};

struct Struct1
{
    bool bo;
    ::Ice::Byte by;
    short sh;
    int i;
    long long int l;
    float f;
    double d;
    ::std::string str;
    ::Test::MyEnum e;
    ::std::shared_ptr<::Test::InitialPrx> p;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const ::Ice::Byte&, const short&, const int&, const long long int&, const float&, const double&, const ::std::string&, const ::Test::MyEnum&, const ::std::shared_ptr<::Test::InitialPrx>&> ice_tuple() const
    {
        return std::tie(bo, by, sh, i, l, f, d, str, e, p);
    }
};

using ByteS = ::std::vector<::Ice::Byte>;

using IntS = ::std::vector<int>;

using MyEnumS = ::std::vector<MyEnum>;

using BaseS = ::std::vector<::std::shared_ptr<Base>>;

using ByteBoolD = ::std::map<::Ice::Byte, bool>;

using ShortIntD = ::std::map<short, int>;

using StringMyEnumD = ::std::map<::std::string, MyEnum>;

using StringBaseD = ::std::map<::std::string, ::std::shared_ptr<Base>>;

class Ex : public ::Ice::UserExceptionHelper<Ex, ::Ice::UserException>
{
public:

    virtual ~Ex();

    Ex(const Ex&) = default;

    Ex() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Ex(const Struct1& s, const ::std::shared_ptr<Base>& b) :
        s(s),
        b(b)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::Struct1&, const ::std::shared_ptr<::Test::Base>&> ice_tuple() const
    {
        return std::tie(s, b);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond STREAM
    virtual bool _usesClasses() const override;
    /// \endcond

    ::Test::Struct1 s;
    ::std::shared_ptr<::Test::Base> b;
};

/// \cond INTERNAL
static Ex _iceS_Ex_init;
/// \endcond

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test
{

class Initial : public virtual ::Ice::Object
{
public:

    using ProxyType = InitialPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ByteS getStruct1(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getStruct1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ByteS getBase(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getBase(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ByteS getEx(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getEx(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test
{

class Base : public ::Ice::ValueHelper<Base, ::Ice::Value>
{
public:

    virtual ~Base();

    Base() = default;

    Base(const Base&) = default;
    Base(Base&&) = default;
    Base& operator=(const Base&) = default;
    Base& operator=(Base&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Base(const ::std::shared_ptr<::Test::Base>& b, const ::std::shared_ptr<::Ice::Value>& o, const ::Test::Struct1& s, const ::Test::ByteS& seq1, const ::Test::IntS& seq2, const ::Test::MyEnumS& seq3, const ::Test::BaseS& seq4, const ::Test::ByteBoolD& d1, const ::Test::ShortIntD& d2, const ::Test::StringMyEnumD& d3, const ::Test::StringBaseD& d4) :
        b(b),
        o(o),
        s(s),
        seq1(seq1),
        seq2(seq2),
        seq3(seq3),
        seq4(seq4),
        d1(d1),
        d2(d2),
        d3(d3),
        d4(d4)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::Base>&, const ::std::shared_ptr<::Ice::Value>&, const ::Test::Struct1&, const ::Test::ByteS&, const ::Test::IntS&, const ::Test::MyEnumS&, const ::Test::BaseS&, const ::Test::ByteBoolD&, const ::Test::ShortIntD&, const ::Test::StringMyEnumD&, const ::Test::StringBaseD&> ice_tuple() const
    {
        return std::tie(b, o, s, seq1, seq2, seq3, seq4, d1, d2, d3, d4);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::Base> b;
    ::std::shared_ptr<::Ice::Value> o;
    ::Test::Struct1 s;
    ::Test::ByteS seq1;
    ::Test::IntS seq2;
    ::Test::MyEnumS seq3;
    ::Test::BaseS seq4;
    ::Test::ByteBoolD d1;
    ::Test::ShortIntD d2;
    ::Test::StringMyEnumD d3;
    ::Test::StringBaseD d4;
};

/// \cond INTERNAL
static Base _iceS_Base_init;
/// \endcond

class Derived : public ::Ice::ValueHelper<Derived, Base>
{
public:

    virtual ~Derived();

    Derived() = default;

    Derived(const Derived&) = default;
    Derived(Derived&&) = default;
    Derived& operator=(const Derived&) = default;
    Derived& operator=(Derived&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Derived(const ::std::shared_ptr<::Test::Base>& b, const ::std::shared_ptr<::Ice::Value>& o, const ::Test::Struct1& s, const ::Test::ByteS& seq1, const ::Test::IntS& seq2, const ::Test::MyEnumS& seq3, const ::Test::BaseS& seq4, const ::Test::ByteBoolD& d1, const ::Test::ShortIntD& d2, const ::Test::StringMyEnumD& d3, const ::Test::StringBaseD& d4, const ::std::shared_ptr<::Ice::ObjectPrx>& p) :
        Ice::ValueHelper<Derived, Base>(b, o, s, seq1, seq2, seq3, seq4, d1, d2, d3, d4),
        p(p)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::Base>&, const ::std::shared_ptr<::Ice::Value>&, const ::Test::Struct1&, const ::Test::ByteS&, const ::Test::IntS&, const ::Test::MyEnumS&, const ::Test::BaseS&, const ::Test::ByteBoolD&, const ::Test::ShortIntD&, const ::Test::StringMyEnumD&, const ::Test::StringBaseD&, const ::std::shared_ptr<::Ice::ObjectPrx>&> ice_tuple() const
    {
        return std::tie(b, o, s, seq1, seq2, seq3, seq4, d1, d2, d3, d4, p);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Ice::ObjectPrx> p;
};

}

namespace Test
{

class InitialPrx : public virtual ::Ice::Proxy<InitialPrx, ::Ice::ObjectPrx>
{
public:

    ByteS getStruct1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::ByteS>(true, this, &InitialPrx::_iceI_getStruct1, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getStruct1Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::ByteS>>().get_future())
    {
        return _makePromiseOutgoing<::Test::ByteS, P>(false, this, &InitialPrx::_iceI_getStruct1, context);
    }

    ::std::function<void()>
    getStruct1Async(::std::function<void(::Test::ByteS)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Test::ByteS>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getStruct1, context);
    }

    /// \cond INTERNAL
    void _iceI_getStruct1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::ByteS>>&, const ::Ice::Context&);
    /// \endcond

    ByteS getBase(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::ByteS>(true, this, &InitialPrx::_iceI_getBase, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getBaseAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::ByteS>>().get_future())
    {
        return _makePromiseOutgoing<::Test::ByteS, P>(false, this, &InitialPrx::_iceI_getBase, context);
    }

    ::std::function<void()>
    getBaseAsync(::std::function<void(::Test::ByteS)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Test::ByteS>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getBase, context);
    }

    /// \cond INTERNAL
    void _iceI_getBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::ByteS>>&, const ::Ice::Context&);
    /// \endcond

    ByteS getEx(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::Test::ByteS>(true, this, &InitialPrx::_iceI_getEx, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getExAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Test::ByteS>>().get_future())
    {
        return _makePromiseOutgoing<::Test::ByteS, P>(false, this, &InitialPrx::_iceI_getEx, context);
    }

    ::std::function<void()>
    getExAsync(::std::function<void(::Test::ByteS)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Test::ByteS>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_getEx, context);
    }

    /// \cond INTERNAL
    void _iceI_getEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::ByteS>>&, const ::Ice::Context&);
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_shutdown, context);
    }

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    InitialPrx() = default;
    friend ::std::shared_ptr<InitialPrx> IceInternal::createProxy<InitialPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Test::MyEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::Test::Struct1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 32;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::Struct1, S>
{
    static void read(S* istr, ::Test::Struct1& v)
    {
        istr->readAll(v.bo, v.by, v.sh, v.i, v.l, v.f, v.d, v.str, v.e, v.p);
    }
};

template<typename S>
struct StreamReader<::Test::Base, S>
{
    static void read(S* istr, ::Test::Base& v)
    {
        istr->readAll(v.b, v.o, v.s, v.seq1, v.seq2, v.seq3, v.seq4, v.d1, v.d2, v.d3, v.d4);
    }
};

template<typename S>
struct StreamWriter<::Test::Derived, S>
{
    static void write(S* ostr, const ::Test::Derived& v)
    {
        ostr->writeAll(v.p);
    }
};

template<typename S>
struct StreamReader<::Test::Derived, S>
{
    static void read(S* istr, ::Test::Derived& v)
    {
        istr->readAll(v.p);
    }
};

template<typename S>
struct StreamReader<::Test::Ex, S>
{
    static void read(S* istr, ::Test::Ex& v)
    {
        istr->readAll(v.s, v.b);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using InitialPtr = ::std::shared_ptr<Initial>;
using InitialPrxPtr = ::std::shared_ptr<InitialPrx>;

using BasePtr = ::std::shared_ptr<Base>;

using DerivedPtr = ::std::shared_ptr<Derived>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Test
{

class Initial;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Initial>&);
::IceProxy::Ice::Object* upCast(Initial*);
/// \endcond

class Base;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Base>&);
::IceProxy::Ice::Object* upCast(Base*);
/// \endcond

class Derived;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Derived>&);
::IceProxy::Ice::Object* upCast(Derived*);
/// \endcond

}

}

namespace Test
{

class Initial;
/// \cond INTERNAL
::Ice::Object* upCast(Initial*);
/// \endcond
typedef ::IceInternal::Handle< Initial> InitialPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Initial> InitialPrx;
typedef InitialPrx InitialPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(InitialPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class Base;
/// \cond INTERNAL
::Ice::Object* upCast(Base*);
/// \endcond
typedef ::IceInternal::Handle< Base> BasePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Base> BasePrx;
typedef BasePrx BasePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(BasePtr&, const ::Ice::ObjectPtr&);
/// \endcond

class Derived;
/// \cond INTERNAL
::Ice::Object* upCast(Derived*);
/// \endcond
typedef ::IceInternal::Handle< Derived> DerivedPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Derived> DerivedPrx;
typedef DerivedPrx DerivedPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(DerivedPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Test
{

enum MyEnum
{
    enum1,
    enum2,
    enum3
};

struct Struct1
{
    bool bo;
    ::Ice::Byte by;
    ::Ice::Short sh;
    ::Ice::Int i;
    ::Ice::Long l;
    ::Ice::Float f;
    ::Ice::Double d;
    ::std::string str;
    ::Test::MyEnum e;
    ::Test::InitialPrx p;
};

typedef ::std::vector< ::Ice::Byte> ByteS;

typedef ::std::vector< ::Ice::Int> IntS;

typedef ::std::vector<MyEnum> MyEnumS;

typedef ::std::vector<BasePtr> BaseS;

typedef ::std::map< ::Ice::Byte, bool> ByteBoolD;

typedef ::std::map< ::Ice::Short, ::Ice::Int> ShortIntD;

typedef ::std::map< ::std::string, MyEnum> StringMyEnumD;

typedef ::std::map< ::std::string, BasePtr> StringBaseD;

class Ex : public ::Ice::UserException
{
public:

    Ex() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    Ex(const Struct1& s, const BasePtr& b);

#ifdef ICE_CPP11_COMPILER
    Ex(const Ex&) = default;
    virtual ~Ex();
#else
    virtual ~Ex() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual Ex* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    /// \cond STREAM
    virtual bool _usesClasses() const;
    /// \endcond

    ::Test::Struct1 s;
    ::Test::BasePtr b;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static Ex _iceS_Ex_init;
/// \endcond

}

namespace Test
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_getStruct1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getStruct1.
 */
class Callback_Initial_getStruct1_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getStruct1_Base> Callback_Initial_getStruct1Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_getBase.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getBase.
 */
class Callback_Initial_getBase_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getBase_Base> Callback_Initial_getBasePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_getEx.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getEx.
 */
class Callback_Initial_getEx_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_getEx_Base> Callback_Initial_getExPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_shutdown.
 */
class Callback_Initial_shutdown_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_shutdown_Base> Callback_Initial_shutdownPtr;

}

namespace IceProxy
{

namespace Test
{

class Base : public virtual ::Ice::Proxy<Base, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Derived : public virtual ::Ice::Proxy<Derived, ::IceProxy::Test::Base>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Initial : public virtual ::Ice::Proxy<Initial, ::IceProxy::Ice::Object>
{
public:

    ::Test::ByteS getStruct1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getStruct1(_iceI_begin_getStruct1(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getStruct1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getStruct1(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStruct1(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStruct1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStruct1(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStruct1(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStruct1(const ::Test::Callback_Initial_getStruct1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStruct1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStruct1(const ::Ice::Context& context, const ::Test::Callback_Initial_getStruct1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStruct1(context, cb, cookie);
    }

    ::Test::ByteS end_getStruct1(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getStruct1(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::ByteS getBase(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getBase(_iceI_begin_getBase(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getBase(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getBase(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBase(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBase(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBase(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBase(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBase(const ::Test::Callback_Initial_getBasePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBase(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBase(const ::Ice::Context& context, const ::Test::Callback_Initial_getBasePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBase(context, cb, cookie);
    }

    ::Test::ByteS end_getBase(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getBase(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::ByteS getEx(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getEx(_iceI_begin_getEx(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getEx(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getEx(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getEx(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getEx(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getEx(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getEx(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getEx(const ::Test::Callback_Initial_getExPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getEx(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getEx(const ::Ice::Context& context, const ::Test::Callback_Initial_getExPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getEx(context, cb, cookie);
    }

    ::Test::ByteS end_getEx(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getEx(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_shutdown(_iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_Initial_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Test::Callback_Initial_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_shutdown(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Test
{

class Base : public virtual ::Ice::Object, public ::IceInternal::GCObject
{
public:

    typedef BasePrx ProxyType;
    typedef BasePtr PointerType;

    virtual ~Base();

    Base()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    Base(const ::Test::BasePtr& b, const ::Ice::ObjectPtr& o, const ::Test::Struct1& s, const ::Test::ByteS& seq1, const ::Test::IntS& seq2, const ::Test::MyEnumS& seq3, const ::Test::BaseS& seq4, const ::Test::ByteBoolD& d1, const ::Test::ShortIntD& d2, const ::Test::StringMyEnumD& d3, const ::Test::StringBaseD& d4) :
        b(b),
        o(o),
        s(s),
        seq1(seq1),
        seq2(seq2),
        seq3(seq3),
        seq4(seq4),
        d1(d1),
        d2(d2),
        d3(d3),
        d4(d4)
    {
    }

#ifdef ICE_CPP11_COMPILER
    Base(const Base&) = default;
    Base& operator=(const Base&) = default;
#endif

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
    /// \cond INTERNAL
    virtual void _iceGcVisitMembers(::IceInternal::GCVisitor&);
    /// \endcond

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Test::BasePtr b;
    ::Ice::ObjectPtr o;
    ::Test::Struct1 s;
    ::Test::ByteS seq1;
    ::Test::IntS seq2;
    ::Test::MyEnumS seq3;
    ::Test::BaseS seq4;
    ::Test::ByteBoolD d1;
    ::Test::ShortIntD d2;
    ::Test::StringMyEnumD d3;
    ::Test::StringBaseD d4;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_Base_init = ::Test::Base::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const Base& lhs, const Base& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Base& lhs, const Base& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class Derived : public Base
{
public:

    typedef DerivedPrx ProxyType;
    typedef DerivedPtr PointerType;

    virtual ~Derived();

    Derived()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    Derived(const ::Test::BasePtr& b, const ::Ice::ObjectPtr& o, const ::Test::Struct1& s, const ::Test::ByteS& seq1, const ::Test::IntS& seq2, const ::Test::MyEnumS& seq3, const ::Test::BaseS& seq4, const ::Test::ByteBoolD& d1, const ::Test::ShortIntD& d2, const ::Test::StringMyEnumD& d3, const ::Test::StringBaseD& d4, const ::Ice::ObjectPrx& p) :
        ::Test::Base(b, o, s, seq1, seq2, seq3, seq4, d1, d2, d3, d4),
        p(p)
    {
    }

#ifdef ICE_CPP11_COMPILER
    Derived(const Derived&) = default;
    Derived& operator=(const Derived&) = default;
#endif

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
    /// \cond INTERNAL
    virtual void _iceGcVisitMembers(::IceInternal::GCVisitor&);
    /// \endcond

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Ice::ObjectPrx p;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_Derived_init = ::Test::Derived::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const Derived& lhs, const Derived& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Derived& lhs, const Derived& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class Initial : public virtual ::Ice::Object
{
public:

    typedef InitialPrx ProxyType;
    typedef InitialPtr PointerType;

    virtual ~Initial();

#ifdef ICE_CPP11_COMPILER
    Initial() = default;
    Initial(const Initial&) = default;
    Initial& operator=(const Initial&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ByteS getStruct1(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getStruct1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ByteS getBase(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getBase(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ByteS getEx(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getEx(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Initial& lhs, const Initial& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Initial& lhs, const Initial& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Test::MyEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Test::Struct1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 32;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Test::Struct1, S>
{
    static void write(S* ostr, const ::Test::Struct1& v)
    {
        ostr->write(v.bo);
        ostr->write(v.by);
        ostr->write(v.sh);
        ostr->write(v.i);
        ostr->write(v.l);
        ostr->write(v.f);
        ostr->write(v.d);
        ostr->write(v.str);
        ostr->write(v.e);
        ostr->write(v.p);
    }
};

template<typename S>
struct StreamReader< ::Test::Struct1, S>
{
    static void read(S* istr, ::Test::Struct1& v)
    {
        istr->read(v.bo);
        istr->read(v.by);
        istr->read(v.sh);
        istr->read(v.i);
        istr->read(v.l);
        istr->read(v.f);
        istr->read(v.d);
        istr->read(v.str);
        istr->read(v.e);
        istr->read(v.p);
    }
};

template<typename S>
struct StreamWriter< ::Test::Base, S>
{
    static void write(S* ostr, const ::Test::Base& v)
    {
        ostr->write(v.b);
        ostr->write(v.o);
        ostr->write(v.s);
        ostr->write(v.seq1);
        ostr->write(v.seq2);
        ostr->write(v.seq3);
        ostr->write(v.seq4);
        ostr->write(v.d1);
        ostr->write(v.d2);
        ostr->write(v.d3);
        ostr->write(v.d4);
    }
};

template<typename S>
struct StreamReader< ::Test::Base, S>
{
    static void read(S* istr, ::Test::Base& v)
    {
        istr->read(v.b);
        istr->read(v.o);
        istr->read(v.s);
        istr->read(v.seq1);
        istr->read(v.seq2);
        istr->read(v.seq3);
        istr->read(v.seq4);
        istr->read(v.d1);
        istr->read(v.d2);
        istr->read(v.d3);
        istr->read(v.d4);
    }
};

template<typename S>
struct StreamWriter< ::Test::Derived, S>
{
    static void write(S* ostr, const ::Test::Derived& v)
    {
        ostr->write(v.p);
    }
};

template<typename S>
struct StreamReader< ::Test::Derived, S>
{
    static void read(S* istr, ::Test::Derived& v)
    {
        istr->read(v.p);
    }
};

template<>
struct StreamableTraits< ::Test::Ex>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::Ex, S>
{
    static void write(S* ostr, const ::Test::Ex& v)
    {
        ostr->write(v.s);
        ostr->write(v.b);
    }
};

template<typename S>
struct StreamReader< ::Test::Ex, S>
{
    static void read(S* istr, ::Test::Ex& v)
    {
        istr->read(v.s);
        istr->read(v.b);
    }
};

}
/// \endcond

namespace Test
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_getStruct1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getStruct1.
 */
template<class T>
class CallbackNC_Initial_getStruct1 : public Callback_Initial_getStruct1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ByteS&);

    CallbackNC_Initial_getStruct1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ByteS ret;
        try
        {
            ret = proxy->end_getStruct1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getStruct1.
 */
template<class T> Callback_Initial_getStruct1Ptr
newCallback_Initial_getStruct1(const IceUtil::Handle<T>& instance, void (T::*cb)(const ByteS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getStruct1<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getStruct1.
 */
template<class T> Callback_Initial_getStruct1Ptr
newCallback_Initial_getStruct1(T* instance, void (T::*cb)(const ByteS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getStruct1<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_getStruct1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getStruct1.
 */
template<class T, typename CT>
class Callback_Initial_getStruct1 : public Callback_Initial_getStruct1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ByteS&, const CT&);

    Callback_Initial_getStruct1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ByteS ret;
        try
        {
            ret = proxy->end_getStruct1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getStruct1.
 */
template<class T, typename CT> Callback_Initial_getStruct1Ptr
newCallback_Initial_getStruct1(const IceUtil::Handle<T>& instance, void (T::*cb)(const ByteS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getStruct1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getStruct1.
 */
template<class T, typename CT> Callback_Initial_getStruct1Ptr
newCallback_Initial_getStruct1(T* instance, void (T::*cb)(const ByteS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getStruct1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_getBase.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getBase.
 */
template<class T>
class CallbackNC_Initial_getBase : public Callback_Initial_getBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ByteS&);

    CallbackNC_Initial_getBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ByteS ret;
        try
        {
            ret = proxy->end_getBase(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getBase.
 */
template<class T> Callback_Initial_getBasePtr
newCallback_Initial_getBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const ByteS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getBase<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getBase.
 */
template<class T> Callback_Initial_getBasePtr
newCallback_Initial_getBase(T* instance, void (T::*cb)(const ByteS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getBase<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_getBase.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getBase.
 */
template<class T, typename CT>
class Callback_Initial_getBase : public Callback_Initial_getBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ByteS&, const CT&);

    Callback_Initial_getBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ByteS ret;
        try
        {
            ret = proxy->end_getBase(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getBase.
 */
template<class T, typename CT> Callback_Initial_getBasePtr
newCallback_Initial_getBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const ByteS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getBase<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getBase.
 */
template<class T, typename CT> Callback_Initial_getBasePtr
newCallback_Initial_getBase(T* instance, void (T::*cb)(const ByteS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getBase<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_getEx.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getEx.
 */
template<class T>
class CallbackNC_Initial_getEx : public Callback_Initial_getEx_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ByteS&);

    CallbackNC_Initial_getEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ByteS ret;
        try
        {
            ret = proxy->end_getEx(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getEx.
 */
template<class T> Callback_Initial_getExPtr
newCallback_Initial_getEx(const IceUtil::Handle<T>& instance, void (T::*cb)(const ByteS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getEx<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getEx.
 */
template<class T> Callback_Initial_getExPtr
newCallback_Initial_getEx(T* instance, void (T::*cb)(const ByteS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_getEx<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_getEx.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_getEx.
 */
template<class T, typename CT>
class Callback_Initial_getEx : public Callback_Initial_getEx_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ByteS&, const CT&);

    Callback_Initial_getEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ByteS ret;
        try
        {
            ret = proxy->end_getEx(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getEx.
 */
template<class T, typename CT> Callback_Initial_getExPtr
newCallback_Initial_getEx(const IceUtil::Handle<T>& instance, void (T::*cb)(const ByteS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getEx<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_getEx.
 */
template<class T, typename CT> Callback_Initial_getExPtr
newCallback_Initial_getEx(T* instance, void (T::*cb)(const ByteS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_getEx<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_shutdown.
 */
template<class T>
class CallbackNC_Initial_shutdown : public Callback_Initial_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_shutdown.
 */
template<class T, typename CT>
class Callback_Initial_shutdown : public Callback_Initial_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
