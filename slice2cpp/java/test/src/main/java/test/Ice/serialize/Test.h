//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

class Initial;
class InitialPrx;

using InitialPrxPtr = ::std::optional<InitialPrx>;
class Base;
struct Struct1;
class Derived;

}

namespace Test
{

enum class MyEnum : unsigned char
{
    enum1,
    enum2,
    enum3
};

using ByteS = ::std::vector<::Ice::Byte>;

using IntS = ::std::vector<int>;

using MyEnumS = ::std::vector<MyEnum>;

using BaseS = ::std::vector<::std::shared_ptr<Base>>;

using ByteBoolD = ::std::map<::Ice::Byte, bool>;

using ShortIntD = ::std::map<short, int>;

using StringMyEnumD = ::std::map<::std::string, MyEnum>;

using StringBaseD = ::std::map<::std::string, ::std::shared_ptr<Base>>;

}

namespace Test
{

class InitialPrx : public ::Ice::Proxy<InitialPrx, ::Ice::ObjectPrx>
{
public:

    ByteS getStruct1(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<ByteS> getStruct1Async(const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    getStruct1Async(::std::function<void(::Test::ByteS)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getStruct1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<ByteS>>&, const ::Ice::Context&) const;
    /// \endcond

    ByteS getBase(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<ByteS> getBaseAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    getBaseAsync(::std::function<void(::Test::ByteS)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<ByteS>>&, const ::Ice::Context&) const;
    /// \endcond

    ByteS getEx(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<ByteS> getExAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    getExAsync(::std::function<void(::Test::ByteS)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<ByteS>>&, const ::Ice::Context&) const;
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)const;

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    explicit InitialPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    InitialPrx(const InitialPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    InitialPrx(InitialPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    InitialPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    InitialPrx& operator=(const InitialPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    InitialPrx& operator=(InitialPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static InitialPrx _fromReference(::IceInternal::ReferencePtr ref) { return InitialPrx(::std::move(ref)); }

protected:

    InitialPrx() = default;

    explicit InitialPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace Test
{

struct Struct1
{
    bool bo;
    ::Ice::Byte by;
    short sh;
    int i;
    long long int l;
    float f;
    double d;
    ::std::string str;
    ::Test::MyEnum e;
    ::std::optional<::Test::InitialPrx> p;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const ::Ice::Byte&, const short&, const int&, const long long int&, const float&, const double&, const ::std::string&, const ::Test::MyEnum&, const ::std::optional<::Test::InitialPrx>&> ice_tuple() const
    {
        return std::tie(bo, by, sh, i, l, f, d, str, e, p);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test
{

class Base : public ::Ice::ValueHelper<Base, ::Ice::Value>
{
public:

    virtual ~Base();

    Base() = default;

    Base(const Base&) = default;
    Base(Base&&) = default;
    Base& operator=(const Base&) = default;
    Base& operator=(Base&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Base(const ::std::shared_ptr<::Test::Base>& b, const ::std::shared_ptr<::Ice::Value>& o, const ::Test::Struct1& s, const ::Test::ByteS& seq1, const ::Test::IntS& seq2, const ::Test::MyEnumS& seq3, const ::Test::BaseS& seq4, const ::Test::ByteBoolD& d1, const ::Test::ShortIntD& d2, const ::Test::StringMyEnumD& d3, const ::Test::StringBaseD& d4) :
        b(b),
        o(o),
        s(s),
        seq1(seq1),
        seq2(seq2),
        seq3(seq3),
        seq4(seq4),
        d1(d1),
        d2(d2),
        d3(d3),
        d4(d4)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::Base>&, const ::std::shared_ptr<::Ice::Value>&, const ::Test::Struct1&, const ::Test::ByteS&, const ::Test::IntS&, const ::Test::MyEnumS&, const ::Test::BaseS&, const ::Test::ByteBoolD&, const ::Test::ShortIntD&, const ::Test::StringMyEnumD&, const ::Test::StringBaseD&> ice_tuple() const
    {
        return std::tie(b, o, s, seq1, seq2, seq3, seq4, d1, d2, d3, d4);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::Base> b;
    ::std::shared_ptr<::Ice::Value> o;
    ::Test::Struct1 s;
    ::Test::ByteS seq1;
    ::Test::IntS seq2;
    ::Test::MyEnumS seq3;
    ::Test::BaseS seq4;
    ::Test::ByteBoolD d1;
    ::Test::ShortIntD d2;
    ::Test::StringMyEnumD d3;
    ::Test::StringBaseD d4;
};

/// \cond INTERNAL
static Base _iceS_Base_init;
/// \endcond

class Derived : public ::Ice::ValueHelper<Derived, Base>
{
public:

    virtual ~Derived();

    Derived() = default;

    Derived(const Derived&) = default;
    Derived(Derived&&) = default;
    Derived& operator=(const Derived&) = default;
    Derived& operator=(Derived&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Derived(const ::std::shared_ptr<::Test::Base>& b, const ::std::shared_ptr<::Ice::Value>& o, const ::Test::Struct1& s, const ::Test::ByteS& seq1, const ::Test::IntS& seq2, const ::Test::MyEnumS& seq3, const ::Test::BaseS& seq4, const ::Test::ByteBoolD& d1, const ::Test::ShortIntD& d2, const ::Test::StringMyEnumD& d3, const ::Test::StringBaseD& d4, const ::std::optional<::Ice::ObjectPrx>& p) :
        Ice::ValueHelper<Derived, Base>(b, o, s, seq1, seq2, seq3, seq4, d1, d2, d3, d4),
        p(p)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::Base>&, const ::std::shared_ptr<::Ice::Value>&, const ::Test::Struct1&, const ::Test::ByteS&, const ::Test::IntS&, const ::Test::MyEnumS&, const ::Test::BaseS&, const ::Test::ByteBoolD&, const ::Test::ShortIntD&, const ::Test::StringMyEnumD&, const ::Test::StringBaseD&, const ::std::optional<::Ice::ObjectPrx>&> ice_tuple() const
    {
        return std::tie(b, o, s, seq1, seq2, seq3, seq4, d1, d2, d3, d4, p);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::optional<::Ice::ObjectPrx> p;
};

}

namespace Test
{

class Ex : public ::Ice::UserExceptionHelper<Ex, ::Ice::UserException>
{
public:

    virtual ~Ex();

    Ex(const Ex&) = default;

    Ex() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Ex(const Struct1& s, const ::std::shared_ptr<Base>& b) :
        s(s),
        b(b)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::Struct1&, const ::std::shared_ptr<::Test::Base>&> ice_tuple() const
    {
        return std::tie(s, b);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond STREAM
    virtual bool _usesClasses() const override;
    /// \endcond

    ::Test::Struct1 s;
    ::std::shared_ptr<::Test::Base> b;
};

/// \cond INTERNAL
static Ex _iceS_Ex_init;
/// \endcond

}

namespace Test
{

class Initial : public virtual ::Ice::Object
{
public:

    using ProxyType = InitialPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ByteS getStruct1(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getStruct1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ByteS getBase(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getBase(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ByteS getEx(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getEx(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Test::MyEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::Test::Struct1>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 32;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::Struct1, S>
{
    static void read(S* istr, ::Test::Struct1& v)
    {
        istr->readAll(v.bo, v.by, v.sh, v.i, v.l, v.f, v.d, v.str, v.e, v.p);
    }
};

template<typename S>
struct StreamReader<::Test::Base, S>
{
    static void read(S* istr, ::Test::Base& v)
    {
        istr->readAll(v.b, v.o, v.s, v.seq1, v.seq2, v.seq3, v.seq4, v.d1, v.d2, v.d3, v.d4);
    }
};

template<typename S>
struct StreamWriter<::Test::Derived, S>
{
    static void write(S* ostr, const ::Test::Derived& v)
    {
        ostr->writeAll(v.p);
    }
};

template<typename S>
struct StreamReader<::Test::Derived, S>
{
    static void read(S* istr, ::Test::Derived& v)
    {
        istr->readAll(v.p);
    }
};

template<typename S>
struct StreamReader<::Test::Ex, S>
{
    static void read(S* istr, ::Test::Ex& v)
    {
        istr->readAll(v.s, v.b);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using InitialPtr = ::std::shared_ptr<Initial>;

using BasePtr = ::std::shared_ptr<Base>;

using DerivedPtr = ::std::shared_ptr<Derived>;

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
