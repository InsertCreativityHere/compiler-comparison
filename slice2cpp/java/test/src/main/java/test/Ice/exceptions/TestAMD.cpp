//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <TestAMD.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::A> iceC_Test_A_init("::Test::A");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::B> iceC_Test_B_init("::Test::B");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::D> iceC_Test_D_init("::Test::D");

const ::std::string iceC_Test_Thrower_ids[2] =
{
    "::Ice::Object",
    "::Test::Thrower"
};
const ::std::string iceC_Test_Thrower_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown",
    "supportsAssertException",
    "supportsUndeclaredExceptions",
    "throwAasA",
    "throwAfterException",
    "throwAfterResponse",
    "throwAorDasAorD",
    "throwAssertException",
    "throwBasA",
    "throwBasB",
    "throwCasA",
    "throwCasB",
    "throwCasC",
    "throwLocalException",
    "throwLocalExceptionIdempotent",
    "throwMemoryLimitException",
    "throwNonIceException",
    "throwUndeclaredA",
    "throwUndeclaredB",
    "throwUndeclaredC"
};
const ::std::string iceC_Test_Thrower_shutdown_name = "shutdown";
const ::std::string iceC_Test_Thrower_supportsUndeclaredExceptions_name = "supportsUndeclaredExceptions";
const ::std::string iceC_Test_Thrower_supportsAssertException_name = "supportsAssertException";
const ::std::string iceC_Test_Thrower_throwAasA_name = "throwAasA";
const ::std::string iceC_Test_Thrower_throwAorDasAorD_name = "throwAorDasAorD";
const ::std::string iceC_Test_Thrower_throwBasA_name = "throwBasA";
const ::std::string iceC_Test_Thrower_throwCasA_name = "throwCasA";
const ::std::string iceC_Test_Thrower_throwBasB_name = "throwBasB";
const ::std::string iceC_Test_Thrower_throwCasB_name = "throwCasB";
const ::std::string iceC_Test_Thrower_throwCasC_name = "throwCasC";
const ::std::string iceC_Test_Thrower_throwUndeclaredA_name = "throwUndeclaredA";
const ::std::string iceC_Test_Thrower_throwUndeclaredB_name = "throwUndeclaredB";
const ::std::string iceC_Test_Thrower_throwUndeclaredC_name = "throwUndeclaredC";
const ::std::string iceC_Test_Thrower_throwLocalException_name = "throwLocalException";
const ::std::string iceC_Test_Thrower_throwNonIceException_name = "throwNonIceException";
const ::std::string iceC_Test_Thrower_throwAssertException_name = "throwAssertException";
const ::std::string iceC_Test_Thrower_throwMemoryLimitException_name = "throwMemoryLimitException";
const ::std::string iceC_Test_Thrower_throwLocalExceptionIdempotent_name = "throwLocalExceptionIdempotent";
const ::std::string iceC_Test_Thrower_throwAfterResponse_name = "throwAfterResponse";
const ::std::string iceC_Test_Thrower_throwAfterException_name = "throwAfterException";

const ::std::string iceC_Test_WrongOperation_ids[2] =
{
    "::Ice::Object",
    "::Test::WrongOperation"
};
const ::std::string iceC_Test_WrongOperation_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "noSuchOperation"
};
const ::std::string iceC_Test_WrongOperation_noSuchOperation_name = "noSuchOperation";

}

Test::A::~A()
{
}

const ::std::string&
Test::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

Test::B::~B()
{
}

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

Test::C::~C()
{
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

Test::D::~D()
{
}

const ::std::string&
Test::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

bool
Test::Thrower::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Thrower_ids, iceC_Test_Thrower_ids + 2, s);
}

::std::vector<::std::string>
Test::Thrower::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Thrower_ids[0], &iceC_Test_Thrower_ids[2]);
}

::std::string
Test::Thrower::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Thrower::ice_staticId()
{
    static const ::std::string typeId = "::Test::Thrower";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Thrower::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->shutdownAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_supportsUndeclaredExceptions(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](bool ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->supportsUndeclaredExceptionsAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_supportsAssertException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](bool ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->supportsAssertExceptionAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAasA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwAasAAsync(iceP_a, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAorDasAorD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwAorDasAorDAsync(iceP_a, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwBasA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    istr->readAll(iceP_a, iceP_b);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwBasAAsync(iceP_a, iceP_b, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwCasA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    int iceP_c;
    istr->readAll(iceP_a, iceP_b, iceP_c);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwCasAAsync(iceP_a, iceP_b, iceP_c, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwBasB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    istr->readAll(iceP_a, iceP_b);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwBasBAsync(iceP_a, iceP_b, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwCasB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    int iceP_c;
    istr->readAll(iceP_a, iceP_b, iceP_c);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwCasBAsync(iceP_a, iceP_b, iceP_c, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwCasC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    int iceP_c;
    istr->readAll(iceP_a, iceP_b, iceP_c);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwCasCAsync(iceP_a, iceP_b, iceP_c, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwUndeclaredA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwUndeclaredAAsync(iceP_a, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwUndeclaredB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    istr->readAll(iceP_a, iceP_b);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwUndeclaredBAsync(iceP_a, iceP_b, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwUndeclaredC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    int iceP_c;
    istr->readAll(iceP_a, iceP_b, iceP_c);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwUndeclaredCAsync(iceP_a, iceP_b, iceP_c, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwLocalException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwLocalExceptionAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwNonIceException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwNonIceExceptionAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAssertException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwAssertExceptionAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwMemoryLimitException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::ByteSeq iceP_seq;
    istr->readAll(iceP_seq);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::Ice::ByteSeq& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->throwMemoryLimitExceptionAsync(::std::move(iceP_seq), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwLocalExceptionIdempotent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwLocalExceptionIdempotentAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAfterResponse(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwAfterResponseAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAfterException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwAfterExceptionAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Thrower_ops, iceC_Test_Thrower_ops + 24, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Thrower_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_shutdown(in, current);
        }
        case 5:
        {
            return _iceD_supportsAssertException(in, current);
        }
        case 6:
        {
            return _iceD_supportsUndeclaredExceptions(in, current);
        }
        case 7:
        {
            return _iceD_throwAasA(in, current);
        }
        case 8:
        {
            return _iceD_throwAfterException(in, current);
        }
        case 9:
        {
            return _iceD_throwAfterResponse(in, current);
        }
        case 10:
        {
            return _iceD_throwAorDasAorD(in, current);
        }
        case 11:
        {
            return _iceD_throwAssertException(in, current);
        }
        case 12:
        {
            return _iceD_throwBasA(in, current);
        }
        case 13:
        {
            return _iceD_throwBasB(in, current);
        }
        case 14:
        {
            return _iceD_throwCasA(in, current);
        }
        case 15:
        {
            return _iceD_throwCasB(in, current);
        }
        case 16:
        {
            return _iceD_throwCasC(in, current);
        }
        case 17:
        {
            return _iceD_throwLocalException(in, current);
        }
        case 18:
        {
            return _iceD_throwLocalExceptionIdempotent(in, current);
        }
        case 19:
        {
            return _iceD_throwMemoryLimitException(in, current);
        }
        case 20:
        {
            return _iceD_throwNonIceException(in, current);
        }
        case 21:
        {
            return _iceD_throwUndeclaredA(in, current);
        }
        case 22:
        {
            return _iceD_throwUndeclaredB(in, current);
        }
        case 23:
        {
            return _iceD_throwUndeclaredC(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::WrongOperation::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_WrongOperation_ids, iceC_Test_WrongOperation_ids + 2, s);
}

::std::vector<::std::string>
Test::WrongOperation::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_WrongOperation_ids[0], &iceC_Test_WrongOperation_ids[2]);
}

::std::string
Test::WrongOperation::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::WrongOperation::ice_staticId()
{
    static const ::std::string typeId = "::Test::WrongOperation";
    return typeId;
}

/// \cond INTERNAL
bool
Test::WrongOperation::_iceD_noSuchOperation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->noSuchOperationAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::WrongOperation::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_WrongOperation_ops, iceC_Test_WrongOperation_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_WrongOperation_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_noSuchOperation(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_supportsUndeclaredExceptions(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_supportsUndeclaredExceptions_name);
    outAsync->invoke(iceC_Test_Thrower_supportsUndeclaredExceptions_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_supportsAssertException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_supportsAssertException_name);
    outAsync->invoke(iceC_Test_Thrower_supportsAssertException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwAasA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwAasA_name);
    outAsync->invoke(iceC_Test_Thrower_throwAasA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const A&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwAorDasAorD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwAorDasAorD_name);
    outAsync->invoke(iceC_Test_Thrower_throwAorDasAorD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const A&)
            {
                throw;
            }
            catch(const D&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwBasA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwBasA_name);
    outAsync->invoke(iceC_Test_Thrower_throwBasA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const A&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwCasA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwCasA_name);
    outAsync->invoke(iceC_Test_Thrower_throwCasA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b, iceP_c);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const A&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwBasB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwBasB_name);
    outAsync->invoke(iceC_Test_Thrower_throwBasB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const B&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwCasB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwCasB_name);
    outAsync->invoke(iceC_Test_Thrower_throwCasB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b, iceP_c);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const B&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwCasC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwCasC_name);
    outAsync->invoke(iceC_Test_Thrower_throwCasC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b, iceP_c);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const C&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwUndeclaredA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_throwUndeclaredA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwUndeclaredB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_throwUndeclaredB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwUndeclaredC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_throwUndeclaredC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b, iceP_c);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwLocalException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_throwLocalException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwNonIceException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_throwNonIceException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwAssertException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_throwAssertException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwMemoryLimitException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Ice::ByteSeq>>& outAsync, const ::Ice::ByteSeq& iceP_seq, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwMemoryLimitException_name);
    outAsync->invoke(iceC_Test_Thrower_throwMemoryLimitException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_seq);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwLocalExceptionIdempotent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_throwLocalExceptionIdempotent_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwAfterResponse(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Thrower_throwAfterResponse_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwAfterException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwAfterException_name);
    outAsync->invoke(iceC_Test_Thrower_throwAfterException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const A&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::ThrowerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ThrowerPrx>();
}
/// \endcond

const ::std::string&
Test::ThrowerPrx::ice_staticId()
{
    return Thrower::ice_staticId();
}

/// \cond INTERNAL
void
Test::WrongOperationPrx::_iceI_noSuchOperation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_WrongOperation_noSuchOperation_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::WrongOperationPrx::_newInstance() const
{
    return ::IceInternal::createProxy<WrongOperationPrx>();
}
/// \endcond

const ::std::string&
Test::WrongOperationPrx::ice_staticId()
{
    return WrongOperation::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_Thrower_shutdown_name = "shutdown";

const ::std::string iceC_Test_Thrower_supportsUndeclaredExceptions_name = "supportsUndeclaredExceptions";

const ::std::string iceC_Test_Thrower_supportsAssertException_name = "supportsAssertException";

const ::std::string iceC_Test_Thrower_throwAasA_name = "throwAasA";

const ::std::string iceC_Test_Thrower_throwAorDasAorD_name = "throwAorDasAorD";

const ::std::string iceC_Test_Thrower_throwBasA_name = "throwBasA";

const ::std::string iceC_Test_Thrower_throwCasA_name = "throwCasA";

const ::std::string iceC_Test_Thrower_throwBasB_name = "throwBasB";

const ::std::string iceC_Test_Thrower_throwCasB_name = "throwCasB";

const ::std::string iceC_Test_Thrower_throwCasC_name = "throwCasC";

const ::std::string iceC_Test_Thrower_throwUndeclaredA_name = "throwUndeclaredA";

const ::std::string iceC_Test_Thrower_throwUndeclaredB_name = "throwUndeclaredB";

const ::std::string iceC_Test_Thrower_throwUndeclaredC_name = "throwUndeclaredC";

const ::std::string iceC_Test_Thrower_throwLocalException_name = "throwLocalException";

const ::std::string iceC_Test_Thrower_throwNonIceException_name = "throwNonIceException";

const ::std::string iceC_Test_Thrower_throwAssertException_name = "throwAssertException";

const ::std::string iceC_Test_Thrower_throwMemoryLimitException_name = "throwMemoryLimitException";

const ::std::string iceC_Test_Thrower_throwLocalExceptionIdempotent_name = "throwLocalExceptionIdempotent";

const ::std::string iceC_Test_Thrower_throwAfterResponse_name = "throwAfterResponse";

const ::std::string iceC_Test_Thrower_throwAfterException_name = "throwAfterException";

const ::std::string iceC_Test_WrongOperation_noSuchOperation_name = "noSuchOperation";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::A> iceC_Test_A_init("::Test::A");

}

Test::A::A(::Ice::Int aMem) :
    ::Ice::UserException(),
    aMem(aMem)
{
}

#ifdef ICE_CPP11_COMPILER
Test::A::~A()
{
}
#else
Test::A::~A() throw()
{
}
#endif

::std::string
Test::A::ice_id() const
{
    return "::Test::A";
}

Test::A*
Test::A::ice_clone() const
{
    return new A(*this);
}

void
Test::A::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::A::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::A", -1, true);
    ::Ice::StreamWriter< A, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::A::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< A, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::B> iceC_Test_B_init("::Test::B");

}

Test::B::B(::Ice::Int aMem, ::Ice::Int bMem) :
    A(aMem),
    bMem(bMem)
{
}

#ifdef ICE_CPP11_COMPILER
Test::B::~B()
{
}
#else
Test::B::~B() throw()
{
}
#endif

::std::string
Test::B::ice_id() const
{
    return "::Test::B";
}

Test::B*
Test::B::ice_clone() const
{
    return new B(*this);
}

void
Test::B::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::B::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::B", -1, false);
    ::Ice::StreamWriter< B, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    A::_writeImpl(ostr);
}

void
Test::B::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< B, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    A::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::C> iceC_Test_C_init("::Test::C");

}

Test::C::C(::Ice::Int aMem, ::Ice::Int bMem, ::Ice::Int cMem) :
    B(aMem, bMem),
    cMem(cMem)
{
}

#ifdef ICE_CPP11_COMPILER
Test::C::~C()
{
}
#else
Test::C::~C() throw()
{
}
#endif

::std::string
Test::C::ice_id() const
{
    return "::Test::C";
}

Test::C*
Test::C::ice_clone() const
{
    return new C(*this);
}

void
Test::C::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::C::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::C", -1, false);
    ::Ice::StreamWriter< C, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    B::_writeImpl(ostr);
}

void
Test::C::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< C, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    B::_readImpl(istr);
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::D> iceC_Test_D_init("::Test::D");

}

Test::D::D(::Ice::Int dMem) :
    ::Ice::UserException(),
    dMem(dMem)
{
}

#ifdef ICE_CPP11_COMPILER
Test::D::~D()
{
}
#else
Test::D::~D() throw()
{
}
#endif

::std::string
Test::D::ice_id() const
{
    return "::Test::D";
}

Test::D*
Test::D::ice_clone() const
{
    return new D(*this);
}

void
Test::D::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::D::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::D", -1, true);
    ::Ice::StreamWriter< D, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::D::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< D, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

Test::AMD_Thrower_shutdown::~AMD_Thrower_shutdown()
{
}

Test::AMD_Thrower_supportsUndeclaredExceptions::~AMD_Thrower_supportsUndeclaredExceptions()
{
}

Test::AMD_Thrower_supportsAssertException::~AMD_Thrower_supportsAssertException()
{
}

Test::AMD_Thrower_throwAasA::~AMD_Thrower_throwAasA()
{
}

Test::AMD_Thrower_throwAorDasAorD::~AMD_Thrower_throwAorDasAorD()
{
}

Test::AMD_Thrower_throwBasA::~AMD_Thrower_throwBasA()
{
}

Test::AMD_Thrower_throwCasA::~AMD_Thrower_throwCasA()
{
}

Test::AMD_Thrower_throwBasB::~AMD_Thrower_throwBasB()
{
}

Test::AMD_Thrower_throwCasB::~AMD_Thrower_throwCasB()
{
}

Test::AMD_Thrower_throwCasC::~AMD_Thrower_throwCasC()
{
}

Test::AMD_Thrower_throwUndeclaredA::~AMD_Thrower_throwUndeclaredA()
{
}

Test::AMD_Thrower_throwUndeclaredB::~AMD_Thrower_throwUndeclaredB()
{
}

Test::AMD_Thrower_throwUndeclaredC::~AMD_Thrower_throwUndeclaredC()
{
}

Test::AMD_Thrower_throwLocalException::~AMD_Thrower_throwLocalException()
{
}

Test::AMD_Thrower_throwNonIceException::~AMD_Thrower_throwNonIceException()
{
}

Test::AMD_Thrower_throwAssertException::~AMD_Thrower_throwAssertException()
{
}

Test::AMD_Thrower_throwMemoryLimitException::~AMD_Thrower_throwMemoryLimitException()
{
}

Test::AMD_Thrower_throwLocalExceptionIdempotent::~AMD_Thrower_throwLocalExceptionIdempotent()
{
}

Test::AMD_Thrower_throwAfterResponse::~AMD_Thrower_throwAfterResponse()
{
}

Test::AMD_Thrower_throwAfterException::~AMD_Thrower_throwAfterException()
{
}

Test::AMD_WrongOperation_noSuchOperation::~AMD_WrongOperation_noSuchOperation()
{
}

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_shutdown::AMD_Thrower_shutdown(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_shutdown::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_supportsUndeclaredExceptions::AMD_Thrower_supportsUndeclaredExceptions(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_supportsUndeclaredExceptions::ice_response(bool ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_supportsAssertException::AMD_Thrower_supportsAssertException(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_supportsAssertException::ice_response(bool ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwAasA::AMD_Thrower_throwAasA(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwAasA::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwAorDasAorD::AMD_Thrower_throwAorDasAorD(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwAorDasAorD::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwBasA::AMD_Thrower_throwBasA(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwBasA::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwCasA::AMD_Thrower_throwCasA(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwCasA::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwBasB::AMD_Thrower_throwBasB(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwBasB::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwCasB::AMD_Thrower_throwCasB(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwCasB::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwCasC::AMD_Thrower_throwCasC(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwCasC::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwUndeclaredA::AMD_Thrower_throwUndeclaredA(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwUndeclaredA::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwUndeclaredB::AMD_Thrower_throwUndeclaredB(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwUndeclaredB::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwUndeclaredC::AMD_Thrower_throwUndeclaredC(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwUndeclaredC::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwLocalException::AMD_Thrower_throwLocalException(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwLocalException::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwNonIceException::AMD_Thrower_throwNonIceException(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwNonIceException::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwAssertException::AMD_Thrower_throwAssertException(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwAssertException::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwMemoryLimitException::AMD_Thrower_throwMemoryLimitException(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwMemoryLimitException::ice_response(const ::Ice::ByteSeq& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwLocalExceptionIdempotent::AMD_Thrower_throwLocalExceptionIdempotent(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwLocalExceptionIdempotent::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwAfterResponse::AMD_Thrower_throwAfterResponse(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwAfterResponse::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_Thrower_throwAfterException::AMD_Thrower_throwAfterException(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_Thrower_throwAfterException::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_WrongOperation_noSuchOperation::AMD_WrongOperation_noSuchOperation(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_WrongOperation_noSuchOperation::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Thrower* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Thrower>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Thrower;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Thrower_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Thrower_shutdown_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_supportsUndeclaredExceptions(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Thrower_supportsUndeclaredExceptions_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_supportsUndeclaredExceptions_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_supportsUndeclaredExceptions_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Thrower_supportsUndeclaredExceptions_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Test::Thrower::end_supportsUndeclaredExceptions(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Thrower_supportsUndeclaredExceptions_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_supportsAssertException(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Thrower_supportsAssertException_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_supportsAssertException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_supportsAssertException_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Thrower_supportsAssertException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Test::Thrower::end_supportsAssertException(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Thrower_supportsAssertException_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwAasA(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwAasA_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwAasA_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwAasA_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Thrower_throwAasA_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwAasA(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Thrower_throwAasA_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::A&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwAorDasAorD(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwAorDasAorD_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwAorDasAorD_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwAorDasAorD_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Thrower_throwAorDasAorD_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwAorDasAorD(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Thrower_throwAorDasAorD_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::A&)
        {
            throw;
        }
        catch(const ::Test::D&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwBasA(::Ice::Int iceP_a, ::Ice::Int iceP_b, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwBasA_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwBasA_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwBasA_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        ostr->write(iceP_b);
        result->endWriteParams();
        result->invoke(iceC_Test_Thrower_throwBasA_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwBasA(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Thrower_throwBasA_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::A&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwCasA(::Ice::Int iceP_a, ::Ice::Int iceP_b, ::Ice::Int iceP_c, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwCasA_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwCasA_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwCasA_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        ostr->write(iceP_b);
        ostr->write(iceP_c);
        result->endWriteParams();
        result->invoke(iceC_Test_Thrower_throwCasA_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwCasA(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Thrower_throwCasA_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::A&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwBasB(::Ice::Int iceP_a, ::Ice::Int iceP_b, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwBasB_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwBasB_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwBasB_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        ostr->write(iceP_b);
        result->endWriteParams();
        result->invoke(iceC_Test_Thrower_throwBasB_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwBasB(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Thrower_throwBasB_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::B&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwCasB(::Ice::Int iceP_a, ::Ice::Int iceP_b, ::Ice::Int iceP_c, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwCasB_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwCasB_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwCasB_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        ostr->write(iceP_b);
        ostr->write(iceP_c);
        result->endWriteParams();
        result->invoke(iceC_Test_Thrower_throwCasB_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwCasB(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Thrower_throwCasB_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::B&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwCasC(::Ice::Int iceP_a, ::Ice::Int iceP_b, ::Ice::Int iceP_c, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwCasC_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwCasC_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwCasC_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        ostr->write(iceP_b);
        ostr->write(iceP_c);
        result->endWriteParams();
        result->invoke(iceC_Test_Thrower_throwCasC_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwCasC(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Thrower_throwCasC_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::C&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwUndeclaredA(::Ice::Int iceP_a, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwUndeclaredA_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwUndeclaredA_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        result->endWriteParams();
        result->invoke(iceC_Test_Thrower_throwUndeclaredA_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwUndeclaredA(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Thrower_throwUndeclaredA_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwUndeclaredB(::Ice::Int iceP_a, ::Ice::Int iceP_b, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwUndeclaredB_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwUndeclaredB_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        ostr->write(iceP_b);
        result->endWriteParams();
        result->invoke(iceC_Test_Thrower_throwUndeclaredB_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwUndeclaredB(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Thrower_throwUndeclaredB_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwUndeclaredC(::Ice::Int iceP_a, ::Ice::Int iceP_b, ::Ice::Int iceP_c, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwUndeclaredC_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwUndeclaredC_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_a);
        ostr->write(iceP_b);
        ostr->write(iceP_c);
        result->endWriteParams();
        result->invoke(iceC_Test_Thrower_throwUndeclaredC_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwUndeclaredC(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Thrower_throwUndeclaredC_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwLocalException(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwLocalException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwLocalException_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Thrower_throwLocalException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwLocalException(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Thrower_throwLocalException_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwNonIceException(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwNonIceException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwNonIceException_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Thrower_throwNonIceException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwNonIceException(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Thrower_throwNonIceException_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwAssertException(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwAssertException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwAssertException_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Thrower_throwAssertException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwAssertException(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Thrower_throwAssertException_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwMemoryLimitException(const ::Ice::ByteSeq& iceP_seq, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwMemoryLimitException_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwMemoryLimitException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwMemoryLimitException_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_seq);
        result->endWriteParams();
        result->invoke(iceC_Test_Thrower_throwMemoryLimitException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::ByteSeq
IceProxy::Test::Thrower::end_throwMemoryLimitException(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Thrower_throwMemoryLimitException_name);
    ::Ice::ByteSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwLocalExceptionIdempotent(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwLocalExceptionIdempotent_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwLocalExceptionIdempotent_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Thrower_throwLocalExceptionIdempotent_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwLocalExceptionIdempotent(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Thrower_throwLocalExceptionIdempotent_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwAfterResponse(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwAfterResponse_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwAfterResponse_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Thrower_throwAfterResponse_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwAfterResponse(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Thrower_throwAfterResponse_name);
}

::Ice::AsyncResultPtr
IceProxy::Test::Thrower::_iceI_begin_throwAfterException(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Thrower_throwAfterException_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Thrower_throwAfterException_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Thrower_throwAfterException_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Thrower_throwAfterException_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Thrower::end_throwAfterException(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Thrower_throwAfterException_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::A&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Thrower::_newInstance() const
{
    return new Thrower;
}
/// \endcond

const ::std::string&
IceProxy::Test::Thrower::ice_staticId()
{
    return ::Test::Thrower::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(WrongOperation* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< WrongOperation>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new WrongOperation;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::WrongOperation::_iceI_begin_noSuchOperation(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_WrongOperation_noSuchOperation_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_WrongOperation_noSuchOperation_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_WrongOperation_noSuchOperation_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::WrongOperation::end_noSuchOperation(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_WrongOperation_noSuchOperation_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::WrongOperation::_newInstance() const
{
    return new WrongOperation;
}
/// \endcond

const ::std::string&
IceProxy::Test::WrongOperation::ice_staticId()
{
    return ::Test::WrongOperation::ice_staticId();
}

Test::Thrower::~Thrower()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Thrower* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_Thrower_ids[2] =
{
    "::Ice::Object",
    "::Test::Thrower"
};

}

bool
Test::Thrower::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Thrower_ids, iceC_Test_Thrower_ids + 2, s);
}

::std::vector< ::std::string>
Test::Thrower::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Thrower_ids[0], &iceC_Test_Thrower_ids[2]);
}

const ::std::string&
Test::Thrower::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Thrower::ice_staticId()
{
    static const ::std::string typeId = "::Test::Thrower";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Thrower::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown_async(new IceAsync::Test::AMD_Thrower_shutdown(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_supportsUndeclaredExceptions(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->supportsUndeclaredExceptions_async(new IceAsync::Test::AMD_Thrower_supportsUndeclaredExceptions(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_supportsAssertException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->supportsAssertException_async(new IceAsync::Test::AMD_Thrower_supportsAssertException(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAasA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->throwAasA_async(new IceAsync::Test::AMD_Thrower_throwAasA(inS), iceP_a, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAorDasAorD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->throwAorDasAorD_async(new IceAsync::Test::AMD_Thrower_throwAorDasAorD(inS), iceP_a, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwBasA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    ::Ice::Int iceP_b;
    istr->read(iceP_a);
    istr->read(iceP_b);
    inS.endReadParams();
    this->throwBasA_async(new IceAsync::Test::AMD_Thrower_throwBasA(inS), iceP_a, iceP_b, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwCasA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    ::Ice::Int iceP_b;
    ::Ice::Int iceP_c;
    istr->read(iceP_a);
    istr->read(iceP_b);
    istr->read(iceP_c);
    inS.endReadParams();
    this->throwCasA_async(new IceAsync::Test::AMD_Thrower_throwCasA(inS), iceP_a, iceP_b, iceP_c, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwBasB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    ::Ice::Int iceP_b;
    istr->read(iceP_a);
    istr->read(iceP_b);
    inS.endReadParams();
    this->throwBasB_async(new IceAsync::Test::AMD_Thrower_throwBasB(inS), iceP_a, iceP_b, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwCasB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    ::Ice::Int iceP_b;
    ::Ice::Int iceP_c;
    istr->read(iceP_a);
    istr->read(iceP_b);
    istr->read(iceP_c);
    inS.endReadParams();
    this->throwCasB_async(new IceAsync::Test::AMD_Thrower_throwCasB(inS), iceP_a, iceP_b, iceP_c, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwCasC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    ::Ice::Int iceP_b;
    ::Ice::Int iceP_c;
    istr->read(iceP_a);
    istr->read(iceP_b);
    istr->read(iceP_c);
    inS.endReadParams();
    this->throwCasC_async(new IceAsync::Test::AMD_Thrower_throwCasC(inS), iceP_a, iceP_b, iceP_c, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwUndeclaredA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    istr->read(iceP_a);
    inS.endReadParams();
    this->throwUndeclaredA_async(new IceAsync::Test::AMD_Thrower_throwUndeclaredA(inS), iceP_a, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwUndeclaredB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    ::Ice::Int iceP_b;
    istr->read(iceP_a);
    istr->read(iceP_b);
    inS.endReadParams();
    this->throwUndeclaredB_async(new IceAsync::Test::AMD_Thrower_throwUndeclaredB(inS), iceP_a, iceP_b, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwUndeclaredC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_a;
    ::Ice::Int iceP_b;
    ::Ice::Int iceP_c;
    istr->read(iceP_a);
    istr->read(iceP_b);
    istr->read(iceP_c);
    inS.endReadParams();
    this->throwUndeclaredC_async(new IceAsync::Test::AMD_Thrower_throwUndeclaredC(inS), iceP_a, iceP_b, iceP_c, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwLocalException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->throwLocalException_async(new IceAsync::Test::AMD_Thrower_throwLocalException(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwNonIceException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->throwNonIceException_async(new IceAsync::Test::AMD_Thrower_throwNonIceException(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAssertException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->throwAssertException_async(new IceAsync::Test::AMD_Thrower_throwAssertException(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwMemoryLimitException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::ByteSeq iceP_seq;
    istr->read(iceP_seq);
    inS.endReadParams();
    this->throwMemoryLimitException_async(new IceAsync::Test::AMD_Thrower_throwMemoryLimitException(inS), iceP_seq, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwLocalExceptionIdempotent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    this->throwLocalExceptionIdempotent_async(new IceAsync::Test::AMD_Thrower_throwLocalExceptionIdempotent(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAfterResponse(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->throwAfterResponse_async(new IceAsync::Test::AMD_Thrower_throwAfterResponse(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAfterException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->throwAfterException_async(new IceAsync::Test::AMD_Thrower_throwAfterException(inS), current);
    return false;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Thrower_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown",
    "supportsAssertException",
    "supportsUndeclaredExceptions",
    "throwAasA",
    "throwAfterException",
    "throwAfterResponse",
    "throwAorDasAorD",
    "throwAssertException",
    "throwBasA",
    "throwBasB",
    "throwCasA",
    "throwCasB",
    "throwCasC",
    "throwLocalException",
    "throwLocalExceptionIdempotent",
    "throwMemoryLimitException",
    "throwNonIceException",
    "throwUndeclaredA",
    "throwUndeclaredB",
    "throwUndeclaredC"
};

}

/// \cond INTERNAL
bool
Test::Thrower::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Thrower_all, iceC_Test_Thrower_all + 24, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Thrower_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_shutdown(in, current);
        }
        case 5:
        {
            return _iceD_supportsAssertException(in, current);
        }
        case 6:
        {
            return _iceD_supportsUndeclaredExceptions(in, current);
        }
        case 7:
        {
            return _iceD_throwAasA(in, current);
        }
        case 8:
        {
            return _iceD_throwAfterException(in, current);
        }
        case 9:
        {
            return _iceD_throwAfterResponse(in, current);
        }
        case 10:
        {
            return _iceD_throwAorDasAorD(in, current);
        }
        case 11:
        {
            return _iceD_throwAssertException(in, current);
        }
        case 12:
        {
            return _iceD_throwBasA(in, current);
        }
        case 13:
        {
            return _iceD_throwBasB(in, current);
        }
        case 14:
        {
            return _iceD_throwCasA(in, current);
        }
        case 15:
        {
            return _iceD_throwCasB(in, current);
        }
        case 16:
        {
            return _iceD_throwCasC(in, current);
        }
        case 17:
        {
            return _iceD_throwLocalException(in, current);
        }
        case 18:
        {
            return _iceD_throwLocalExceptionIdempotent(in, current);
        }
        case 19:
        {
            return _iceD_throwMemoryLimitException(in, current);
        }
        case 20:
        {
            return _iceD_throwNonIceException(in, current);
        }
        case 21:
        {
            return _iceD_throwUndeclaredA(in, current);
        }
        case 22:
        {
            return _iceD_throwUndeclaredB(in, current);
        }
        case 23:
        {
            return _iceD_throwUndeclaredC(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::Thrower::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Thrower, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Thrower::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Thrower, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(ThrowerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ThrowerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Thrower::ice_staticId(), v);
    }
}
/// \endcond

Test::WrongOperation::~WrongOperation()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(WrongOperation* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_WrongOperation_ids[2] =
{
    "::Ice::Object",
    "::Test::WrongOperation"
};

}

bool
Test::WrongOperation::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_WrongOperation_ids, iceC_Test_WrongOperation_ids + 2, s);
}

::std::vector< ::std::string>
Test::WrongOperation::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_WrongOperation_ids[0], &iceC_Test_WrongOperation_ids[2]);
}

const ::std::string&
Test::WrongOperation::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::WrongOperation::ice_staticId()
{
    static const ::std::string typeId = "::Test::WrongOperation";
    return typeId;
}

/// \cond INTERNAL
bool
Test::WrongOperation::_iceD_noSuchOperation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->noSuchOperation_async(new IceAsync::Test::AMD_WrongOperation_noSuchOperation(inS), current);
    return false;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_WrongOperation_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "noSuchOperation"
};

}

/// \cond INTERNAL
bool
Test::WrongOperation::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_WrongOperation_all, iceC_Test_WrongOperation_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_WrongOperation_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_noSuchOperation(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::WrongOperation::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< WrongOperation, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::WrongOperation::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< WrongOperation, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(WrongOperationPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = WrongOperationPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(WrongOperation::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
