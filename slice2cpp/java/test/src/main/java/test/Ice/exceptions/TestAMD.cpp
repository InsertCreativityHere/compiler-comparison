//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `TestAMD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <TestAMD.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::A> iceC_Test_A_init("::Test::A");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::B> iceC_Test_B_init("::Test::B");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::D> iceC_Test_D_init("::Test::D");

const ::std::string iceC_Test_Thrower_ids[2] =
{
    "::Ice::Object",
    "::Test::Thrower"
};
const ::std::string iceC_Test_Thrower_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown",
    "supportsAssertException",
    "supportsUndeclaredExceptions",
    "throwAasA",
    "throwAfterException",
    "throwAfterResponse",
    "throwAorDasAorD",
    "throwAssertException",
    "throwBasA",
    "throwBasB",
    "throwCasA",
    "throwCasB",
    "throwCasC",
    "throwLocalException",
    "throwLocalExceptionIdempotent",
    "throwMemoryLimitException",
    "throwNonIceException",
    "throwUndeclaredA",
    "throwUndeclaredB",
    "throwUndeclaredC"
};
const ::std::string iceC_Test_Thrower_shutdown_name = "shutdown";
const ::std::string iceC_Test_Thrower_supportsUndeclaredExceptions_name = "supportsUndeclaredExceptions";
const ::std::string iceC_Test_Thrower_supportsAssertException_name = "supportsAssertException";
const ::std::string iceC_Test_Thrower_throwAasA_name = "throwAasA";
const ::std::string iceC_Test_Thrower_throwAorDasAorD_name = "throwAorDasAorD";
const ::std::string iceC_Test_Thrower_throwBasA_name = "throwBasA";
const ::std::string iceC_Test_Thrower_throwCasA_name = "throwCasA";
const ::std::string iceC_Test_Thrower_throwBasB_name = "throwBasB";
const ::std::string iceC_Test_Thrower_throwCasB_name = "throwCasB";
const ::std::string iceC_Test_Thrower_throwCasC_name = "throwCasC";
const ::std::string iceC_Test_Thrower_throwUndeclaredA_name = "throwUndeclaredA";
const ::std::string iceC_Test_Thrower_throwUndeclaredB_name = "throwUndeclaredB";
const ::std::string iceC_Test_Thrower_throwUndeclaredC_name = "throwUndeclaredC";
const ::std::string iceC_Test_Thrower_throwLocalException_name = "throwLocalException";
const ::std::string iceC_Test_Thrower_throwNonIceException_name = "throwNonIceException";
const ::std::string iceC_Test_Thrower_throwAssertException_name = "throwAssertException";
const ::std::string iceC_Test_Thrower_throwMemoryLimitException_name = "throwMemoryLimitException";
const ::std::string iceC_Test_Thrower_throwLocalExceptionIdempotent_name = "throwLocalExceptionIdempotent";
const ::std::string iceC_Test_Thrower_throwAfterResponse_name = "throwAfterResponse";
const ::std::string iceC_Test_Thrower_throwAfterException_name = "throwAfterException";

const ::std::string iceC_Test_WrongOperation_ids[2] =
{
    "::Ice::Object",
    "::Test::WrongOperation"
};
const ::std::string iceC_Test_WrongOperation_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "noSuchOperation"
};
const ::std::string iceC_Test_WrongOperation_noSuchOperation_name = "noSuchOperation";

}

void
Test::ThrowerPrx::shutdown(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_shutdown, context).get();
}

::std::future<void>
Test::ThrowerPrx::shutdownAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_shutdown, context);
}

::std::function<void()>
Test::ThrowerPrx::shutdownAsync(::std::function<void ()> response,
                                ::std::function<void(::std::exception_ptr)> ex,
                                ::std::function<void(bool)> sent,
                                const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_shutdown, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Thrower_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

bool
Test::ThrowerPrx::supportsUndeclaredExceptions(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<bool>(true, this, &ThrowerPrx::_iceI_supportsUndeclaredExceptions, context).get();
}

::std::future<bool>
Test::ThrowerPrx::supportsUndeclaredExceptionsAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<bool, ::std::promise>(false, this, &ThrowerPrx::_iceI_supportsUndeclaredExceptions, context);
}

::std::function<void()>
Test::ThrowerPrx::supportsUndeclaredExceptionsAsync(::std::function<void (bool)> response,
                                                    ::std::function<void(::std::exception_ptr)> ex,
                                                    ::std::function<void(bool)> sent,
                                                    const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_supportsUndeclaredExceptions, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_supportsUndeclaredExceptions(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Thrower_supportsUndeclaredExceptions_name);
    outAsync->invoke(iceC_Test_Thrower_supportsUndeclaredExceptions_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

bool
Test::ThrowerPrx::supportsAssertException(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<bool>(true, this, &ThrowerPrx::_iceI_supportsAssertException, context).get();
}

::std::future<bool>
Test::ThrowerPrx::supportsAssertExceptionAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<bool, ::std::promise>(false, this, &ThrowerPrx::_iceI_supportsAssertException, context);
}

::std::function<void()>
Test::ThrowerPrx::supportsAssertExceptionAsync(::std::function<void (bool)> response,
                                               ::std::function<void(::std::exception_ptr)> ex,
                                               ::std::function<void(bool)> sent,
                                               const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_supportsAssertException, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_supportsAssertException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Thrower_supportsAssertException_name);
    outAsync->invoke(iceC_Test_Thrower_supportsAssertException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
Test::ThrowerPrx::throwAasA(int iceP_a, const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwAasA, iceP_a, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwAasAAsync(int iceP_a, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwAasA, iceP_a, context);
}

::std::function<void()>
Test::ThrowerPrx::throwAasAAsync(int iceP_a,
                                 ::std::function<void ()> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwAasA, iceP_a, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwAasA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Thrower_throwAasA_name);
    outAsync->invoke(iceC_Test_Thrower_throwAasA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const A&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::ThrowerPrx::throwAorDasAorD(int iceP_a, const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwAorDasAorD, iceP_a, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwAorDasAorDAsync(int iceP_a, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwAorDasAorD, iceP_a, context);
}

::std::function<void()>
Test::ThrowerPrx::throwAorDasAorDAsync(int iceP_a,
                                       ::std::function<void ()> response,
                                       ::std::function<void(::std::exception_ptr)> ex,
                                       ::std::function<void(bool)> sent,
                                       const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwAorDasAorD, iceP_a, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwAorDasAorD(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Thrower_throwAorDasAorD_name);
    outAsync->invoke(iceC_Test_Thrower_throwAorDasAorD_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const A&)
            {
                throw;
            }
            catch(const D&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::ThrowerPrx::throwBasA(int iceP_a, int iceP_b, const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwBasA, iceP_a, iceP_b, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwBasAAsync(int iceP_a, int iceP_b, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwBasA, iceP_a, iceP_b, context);
}

::std::function<void()>
Test::ThrowerPrx::throwBasAAsync(int iceP_a, int iceP_b,
                                 ::std::function<void ()> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwBasA, iceP_a, iceP_b, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwBasA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Thrower_throwBasA_name);
    outAsync->invoke(iceC_Test_Thrower_throwBasA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const A&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::ThrowerPrx::throwCasA(int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwCasA, iceP_a, iceP_b, iceP_c, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwCasAAsync(int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwCasA, iceP_a, iceP_b, iceP_c, context);
}

::std::function<void()>
Test::ThrowerPrx::throwCasAAsync(int iceP_a, int iceP_b, int iceP_c,
                                 ::std::function<void ()> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwCasA, iceP_a, iceP_b, iceP_c, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwCasA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Thrower_throwCasA_name);
    outAsync->invoke(iceC_Test_Thrower_throwCasA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b, iceP_c);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const A&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::ThrowerPrx::throwBasB(int iceP_a, int iceP_b, const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwBasB, iceP_a, iceP_b, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwBasBAsync(int iceP_a, int iceP_b, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwBasB, iceP_a, iceP_b, context);
}

::std::function<void()>
Test::ThrowerPrx::throwBasBAsync(int iceP_a, int iceP_b,
                                 ::std::function<void ()> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwBasB, iceP_a, iceP_b, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwBasB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Thrower_throwBasB_name);
    outAsync->invoke(iceC_Test_Thrower_throwBasB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const B&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::ThrowerPrx::throwCasB(int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwCasB, iceP_a, iceP_b, iceP_c, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwCasBAsync(int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwCasB, iceP_a, iceP_b, iceP_c, context);
}

::std::function<void()>
Test::ThrowerPrx::throwCasBAsync(int iceP_a, int iceP_b, int iceP_c,
                                 ::std::function<void ()> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwCasB, iceP_a, iceP_b, iceP_c, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwCasB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Thrower_throwCasB_name);
    outAsync->invoke(iceC_Test_Thrower_throwCasB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b, iceP_c);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const B&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::ThrowerPrx::throwCasC(int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwCasC, iceP_a, iceP_b, iceP_c, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwCasCAsync(int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwCasC, iceP_a, iceP_b, iceP_c, context);
}

::std::function<void()>
Test::ThrowerPrx::throwCasCAsync(int iceP_a, int iceP_b, int iceP_c,
                                 ::std::function<void ()> response,
                                 ::std::function<void(::std::exception_ptr)> ex,
                                 ::std::function<void(bool)> sent,
                                 const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwCasC, iceP_a, iceP_b, iceP_c, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwCasC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Thrower_throwCasC_name);
    outAsync->invoke(iceC_Test_Thrower_throwCasC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b, iceP_c);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const C&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

void
Test::ThrowerPrx::throwUndeclaredA(int iceP_a, const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwUndeclaredA, iceP_a, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwUndeclaredAAsync(int iceP_a, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwUndeclaredA, iceP_a, context);
}

::std::function<void()>
Test::ThrowerPrx::throwUndeclaredAAsync(int iceP_a,
                                        ::std::function<void ()> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwUndeclaredA, iceP_a, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwUndeclaredA(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Thrower_throwUndeclaredA_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a);
        },
        nullptr);
}
/// \endcond

void
Test::ThrowerPrx::throwUndeclaredB(int iceP_a, int iceP_b, const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwUndeclaredB, iceP_a, iceP_b, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwUndeclaredBAsync(int iceP_a, int iceP_b, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwUndeclaredB, iceP_a, iceP_b, context);
}

::std::function<void()>
Test::ThrowerPrx::throwUndeclaredBAsync(int iceP_a, int iceP_b,
                                        ::std::function<void ()> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwUndeclaredB, iceP_a, iceP_b, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwUndeclaredB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Thrower_throwUndeclaredB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b);
        },
        nullptr);
}
/// \endcond

void
Test::ThrowerPrx::throwUndeclaredC(int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwUndeclaredC, iceP_a, iceP_b, iceP_c, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwUndeclaredCAsync(int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwUndeclaredC, iceP_a, iceP_b, iceP_c, context);
}

::std::function<void()>
Test::ThrowerPrx::throwUndeclaredCAsync(int iceP_a, int iceP_b, int iceP_c,
                                        ::std::function<void ()> response,
                                        ::std::function<void(::std::exception_ptr)> ex,
                                        ::std::function<void(bool)> sent,
                                        const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwUndeclaredC, iceP_a, iceP_b, iceP_c, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwUndeclaredC(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_a, int iceP_b, int iceP_c, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Thrower_throwUndeclaredC_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_a, iceP_b, iceP_c);
        },
        nullptr);
}
/// \endcond

void
Test::ThrowerPrx::throwLocalException(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwLocalException, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwLocalExceptionAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwLocalException, context);
}

::std::function<void()>
Test::ThrowerPrx::throwLocalExceptionAsync(::std::function<void ()> response,
                                           ::std::function<void(::std::exception_ptr)> ex,
                                           ::std::function<void(bool)> sent,
                                           const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwLocalException, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwLocalException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Thrower_throwLocalException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
Test::ThrowerPrx::throwNonIceException(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwNonIceException, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwNonIceExceptionAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwNonIceException, context);
}

::std::function<void()>
Test::ThrowerPrx::throwNonIceExceptionAsync(::std::function<void ()> response,
                                            ::std::function<void(::std::exception_ptr)> ex,
                                            ::std::function<void(bool)> sent,
                                            const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwNonIceException, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwNonIceException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Thrower_throwNonIceException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
Test::ThrowerPrx::throwAssertException(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwAssertException, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwAssertExceptionAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwAssertException, context);
}

::std::function<void()>
Test::ThrowerPrx::throwAssertExceptionAsync(::std::function<void ()> response,
                                            ::std::function<void(::std::exception_ptr)> ex,
                                            ::std::function<void(bool)> sent,
                                            const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwAssertException, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwAssertException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Thrower_throwAssertException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

::Ice::ByteSeq
Test::ThrowerPrx::throwMemoryLimitException(const ::Ice::ByteSeq& iceP_seq, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::Ice::ByteSeq>(true, this, &ThrowerPrx::_iceI_throwMemoryLimitException, iceP_seq, context).get();
}

::std::future<::Ice::ByteSeq>
Test::ThrowerPrx::throwMemoryLimitExceptionAsync(const ::Ice::ByteSeq& iceP_seq, const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<::Ice::ByteSeq, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwMemoryLimitException, iceP_seq, context);
}

::std::function<void()>
Test::ThrowerPrx::throwMemoryLimitExceptionAsync(const ::Ice::ByteSeq& iceP_seq,
                                                 ::std::function<void (::Ice::ByteSeq)> response,
                                                 ::std::function<void(::std::exception_ptr)> ex,
                                                 ::std::function<void(bool)> sent,
                                                 const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<::Ice::ByteSeq>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwMemoryLimitException, iceP_seq, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwMemoryLimitException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Ice::ByteSeq>>& outAsync, const ::Ice::ByteSeq& iceP_seq, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Thrower_throwMemoryLimitException_name);
    outAsync->invoke(iceC_Test_Thrower_throwMemoryLimitException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_seq);
        },
        nullptr);
}
/// \endcond

void
Test::ThrowerPrx::throwLocalExceptionIdempotent(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwLocalExceptionIdempotent, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwLocalExceptionIdempotentAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwLocalExceptionIdempotent, context);
}

::std::function<void()>
Test::ThrowerPrx::throwLocalExceptionIdempotentAsync(::std::function<void ()> response,
                                                     ::std::function<void(::std::exception_ptr)> ex,
                                                     ::std::function<void(bool)> sent,
                                                     const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwLocalExceptionIdempotent, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwLocalExceptionIdempotent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Thrower_throwLocalExceptionIdempotent_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
Test::ThrowerPrx::throwAfterResponse(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwAfterResponse, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwAfterResponseAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwAfterResponse, context);
}

::std::function<void()>
Test::ThrowerPrx::throwAfterResponseAsync(::std::function<void ()> response,
                                          ::std::function<void(::std::exception_ptr)> ex,
                                          ::std::function<void(bool)> sent,
                                          const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwAfterResponse, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwAfterResponse(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_Thrower_throwAfterResponse_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
Test::ThrowerPrx::throwAfterException(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &ThrowerPrx::_iceI_throwAfterException, context).get();
}

::std::future<void>
Test::ThrowerPrx::throwAfterExceptionAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &ThrowerPrx::_iceI_throwAfterException, context);
}

::std::function<void()>
Test::ThrowerPrx::throwAfterExceptionAsync(::std::function<void ()> response,
                                           ::std::function<void(::std::exception_ptr)> ex,
                                           ::std::function<void(bool)> sent,
                                           const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::ThrowerPrx::_iceI_throwAfterException, context);
}

/// \cond INTERNAL
void
Test::ThrowerPrx::_iceI_throwAfterException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    _checkTwowayOnly(iceC_Test_Thrower_throwAfterException_name);
    outAsync->invoke(iceC_Test_Thrower_throwAfterException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const A&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

const ::std::string&
Test::ThrowerPrx::ice_staticId()
{
    return Thrower::ice_staticId();
}

void
Test::WrongOperationPrx::noSuchOperation(const ::Ice::Context& context) const
{
    _makePromiseOutgoing<void>(true, this, &WrongOperationPrx::_iceI_noSuchOperation, context).get();
}

::std::future<void>
Test::WrongOperationPrx::noSuchOperationAsync(const ::Ice::Context& context) const
{
    return _makePromiseOutgoing<void, ::std::promise>(false, this, &WrongOperationPrx::_iceI_noSuchOperation, context);
}

::std::function<void()>
Test::WrongOperationPrx::noSuchOperationAsync(::std::function<void ()> response,
                                              ::std::function<void(::std::exception_ptr)> ex,
                                              ::std::function<void(bool)> sent,
                                              const ::Ice::Context& context) const
{
    return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::WrongOperationPrx::_iceI_noSuchOperation, context);
}

/// \cond INTERNAL
void
Test::WrongOperationPrx::_iceI_noSuchOperation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context) const
{
    outAsync->invoke(iceC_Test_WrongOperation_noSuchOperation_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::WrongOperationPrx::ice_staticId()
{
    return WrongOperation::ice_staticId();
}

Test::A::~A()
{
}

const ::std::string&
Test::A::ice_staticId()
{
    static const ::std::string typeId = "::Test::A";
    return typeId;
}

Test::B::~B()
{
}

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

Test::C::~C()
{
}

const ::std::string&
Test::C::ice_staticId()
{
    static const ::std::string typeId = "::Test::C";
    return typeId;
}

Test::D::~D()
{
}

const ::std::string&
Test::D::ice_staticId()
{
    static const ::std::string typeId = "::Test::D";
    return typeId;
}

bool
Test::Thrower::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Thrower_ids, iceC_Test_Thrower_ids + 2, s);
}

::std::vector<::std::string>
Test::Thrower::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Thrower_ids[0], &iceC_Test_Thrower_ids[2]);
}

::std::string
Test::Thrower::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Thrower::ice_staticId()
{
    static const ::std::string typeId = "::Test::Thrower";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Thrower::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->shutdownAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_supportsUndeclaredExceptions(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](bool ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->supportsUndeclaredExceptionsAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_supportsAssertException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](bool ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->supportsAssertExceptionAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAasA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwAasAAsync(iceP_a, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAorDasAorD(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwAorDasAorDAsync(iceP_a, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwBasA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    istr->readAll(iceP_a, iceP_b);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwBasAAsync(iceP_a, iceP_b, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwCasA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    int iceP_c;
    istr->readAll(iceP_a, iceP_b, iceP_c);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwCasAAsync(iceP_a, iceP_b, iceP_c, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwBasB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    istr->readAll(iceP_a, iceP_b);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwBasBAsync(iceP_a, iceP_b, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwCasB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    int iceP_c;
    istr->readAll(iceP_a, iceP_b, iceP_c);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwCasBAsync(iceP_a, iceP_b, iceP_c, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwCasC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    int iceP_c;
    istr->readAll(iceP_a, iceP_b, iceP_c);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwCasCAsync(iceP_a, iceP_b, iceP_c, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwUndeclaredA(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    istr->readAll(iceP_a);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwUndeclaredAAsync(iceP_a, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwUndeclaredB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    istr->readAll(iceP_a, iceP_b);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwUndeclaredBAsync(iceP_a, iceP_b, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwUndeclaredC(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_a;
    int iceP_b;
    int iceP_c;
    istr->readAll(iceP_a, iceP_b, iceP_c);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwUndeclaredCAsync(iceP_a, iceP_b, iceP_c, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwLocalException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwLocalExceptionAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwNonIceException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwNonIceExceptionAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAssertException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwAssertExceptionAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwMemoryLimitException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::ByteSeq iceP_seq;
    istr->readAll(iceP_seq);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::Ice::ByteSeq& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->throwMemoryLimitExceptionAsync(::std::move(iceP_seq), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwLocalExceptionIdempotent(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwLocalExceptionIdempotentAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAfterResponse(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwAfterResponseAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceD_throwAfterException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwAfterExceptionAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Thrower::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Thrower_ops, iceC_Test_Thrower_ops + 24, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Thrower_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_shutdown(in, current);
        }
        case 5:
        {
            return _iceD_supportsAssertException(in, current);
        }
        case 6:
        {
            return _iceD_supportsUndeclaredExceptions(in, current);
        }
        case 7:
        {
            return _iceD_throwAasA(in, current);
        }
        case 8:
        {
            return _iceD_throwAfterException(in, current);
        }
        case 9:
        {
            return _iceD_throwAfterResponse(in, current);
        }
        case 10:
        {
            return _iceD_throwAorDasAorD(in, current);
        }
        case 11:
        {
            return _iceD_throwAssertException(in, current);
        }
        case 12:
        {
            return _iceD_throwBasA(in, current);
        }
        case 13:
        {
            return _iceD_throwBasB(in, current);
        }
        case 14:
        {
            return _iceD_throwCasA(in, current);
        }
        case 15:
        {
            return _iceD_throwCasB(in, current);
        }
        case 16:
        {
            return _iceD_throwCasC(in, current);
        }
        case 17:
        {
            return _iceD_throwLocalException(in, current);
        }
        case 18:
        {
            return _iceD_throwLocalExceptionIdempotent(in, current);
        }
        case 19:
        {
            return _iceD_throwMemoryLimitException(in, current);
        }
        case 20:
        {
            return _iceD_throwNonIceException(in, current);
        }
        case 21:
        {
            return _iceD_throwUndeclaredA(in, current);
        }
        case 22:
        {
            return _iceD_throwUndeclaredB(in, current);
        }
        case 23:
        {
            return _iceD_throwUndeclaredC(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Test::WrongOperation::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_WrongOperation_ids, iceC_Test_WrongOperation_ids + 2, s);
}

::std::vector<::std::string>
Test::WrongOperation::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_WrongOperation_ids[0], &iceC_Test_WrongOperation_ids[2]);
}

::std::string
Test::WrongOperation::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::WrongOperation::ice_staticId()
{
    static const ::std::string typeId = "::Test::WrongOperation";
    return typeId;
}

/// \cond INTERNAL
bool
Test::WrongOperation::_iceD_noSuchOperation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->noSuchOperationAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::WrongOperation::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_WrongOperation_ops, iceC_Test_WrongOperation_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_WrongOperation_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_noSuchOperation(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
