//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Ice/BuiltinSequences.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{

class MyClass;
class MyInterface;
class MyInterfacePrx;
class OptionalClass;
class Bar;

}

namespace Test
{

enum class MyEnum : unsigned char
{
    enum1,
    enum2,
    enum3
};

using SerialSmall = ::std::vector<::Ice::Byte>;

struct SmallStruct
{
    bool bo;
    ::Ice::Byte by;
    short sh;
    int i;
    long long int l;
    float f;
    double d;
    ::std::string str;
    ::Test::MyEnum e;
    ::std::shared_ptr<::Test::MyClass> c;
    ::std::shared_ptr<::Test::MyInterfacePrx> p;
    ::Test::SerialSmall ss;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const ::Ice::Byte&, const short&, const int&, const long long int&, const float&, const double&, const ::std::string&, const ::Test::MyEnum&, const ::std::shared_ptr<::Test::MyClass>&, const ::std::shared_ptr<::Test::MyInterfacePrx>&, const ::Test::SerialSmall&> ice_tuple() const
    {
        return std::tie(bo, by, sh, i, l, f, d, str, e, c, p, ss);
    }
};

struct Point
{
    int x;
    int y;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&> ice_tuple() const
    {
        return std::tie(x, y);
    }
};

using MyEnumS = ::std::vector<MyEnum>;

using MyClassS = ::std::vector<::std::shared_ptr<MyClass>>;

using ByteBoolD = ::std::map<::Ice::Byte, bool>;

using ShortIntD = ::std::map<short, int>;

using StringMyClassD = ::std::map<::std::string, ::std::shared_ptr<MyClass>>;

using BoolSS = ::std::vector<::Ice::BoolSeq>;

using ByteSS = ::std::vector<::Ice::ByteSeq>;

using ShortSS = ::std::vector<::Ice::ShortSeq>;

using IntSS = ::std::vector<::Ice::IntSeq>;

using LongSS = ::std::vector<::Ice::LongSeq>;

using FloatSS = ::std::vector<::Ice::FloatSeq>;

using DoubleSS = ::std::vector<::Ice::DoubleSeq>;

using StringSS = ::std::vector<::Ice::StringSeq>;

using MyEnumSS = ::std::vector<MyEnumS>;

using MyClassSS = ::std::vector<MyClassS>;

using LongFloatD = ::std::map<long long int, float>;

using StringStringD = ::std::map<::std::string, ::std::string>;

class MyException : public ::Ice::UserExceptionHelper<MyException, ::Ice::UserException>
{
public:

    virtual ~MyException();

    MyException(const MyException&) = default;

    MyException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    MyException(const ::std::shared_ptr<MyClass>& c) :
        c(c)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::MyClass>&> ice_tuple() const
    {
        return std::tie(c);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond STREAM
    virtual bool _usesClasses() const override;
    /// \endcond

    ::std::shared_ptr<::Test::MyClass> c;
};

/// \cond INTERNAL
static MyException _iceS_MyException_init;
/// \endcond

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test
{

class MyInterface : public virtual ::Ice::Object
{
public:

    using ProxyType = MyInterfacePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

}

namespace Test
{

class OptionalClass : public ::Ice::ValueHelper<OptionalClass, ::Ice::Value>
{
public:

    virtual ~OptionalClass();

    OptionalClass() = default;

    OptionalClass(const OptionalClass&) = default;
    OptionalClass(OptionalClass&&) = default;
    OptionalClass& operator=(const OptionalClass&) = default;
    OptionalClass& operator=(OptionalClass&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    OptionalClass(bool bo, ::Ice::Byte by, const Ice::optional<short>& sh, const Ice::optional<int>& i, const Ice::optional<::Test::SmallStruct>& sm, const Ice::optional<::Test::MyEnumS>& enumS4, const Ice::optional<::Test::MyClassS>& myClassS5, const Ice::optional<::Test::ByteBoolD>& byteBoolD6, const Ice::optional<::Test::ShortIntD>& shortIntD7, const Ice::optional<::Test::MyEnum>& enum8, const Ice::optional<::std::shared_ptr<::Test::MyClass>>& class9, const Ice::optional<::Test::StringMyClassD>& stringMyClassD10, const Ice::optional<::Ice::IntSeq>& intSeq12, const Ice::optional<::Ice::ByteSeq>& byteSeq13, const Ice::optional<::Ice::StringSeq>& stringSeq14, const Ice::optional<::Test::Point>& p15) :
        bo(bo),
        by(by),
        sh(sh),
        i(i),
        sm(sm),
        enumS4(enumS4),
        myClassS5(myClassS5),
        byteBoolD6(byteBoolD6),
        shortIntD7(shortIntD7),
        enum8(enum8),
        class9(class9),
        stringMyClassD10(stringMyClassD10),
        intSeq12(intSeq12),
        byteSeq13(byteSeq13),
        stringSeq14(stringSeq14),
        p15(p15)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const ::Ice::Byte&, const Ice::optional<short>&, const Ice::optional<int>&, const Ice::optional<::Test::SmallStruct>&, const Ice::optional<::Test::MyEnumS>&, const Ice::optional<::Test::MyClassS>&, const Ice::optional<::Test::ByteBoolD>&, const Ice::optional<::Test::ShortIntD>&, const Ice::optional<::Test::MyEnum>&, const Ice::optional<::std::shared_ptr<::Test::MyClass>>&, const Ice::optional<::Test::StringMyClassD>&, const Ice::optional<::Ice::IntSeq>&, const Ice::optional<::Ice::ByteSeq>&, const Ice::optional<::Ice::StringSeq>&, const Ice::optional<::Test::Point>&> ice_tuple() const
    {
        return std::tie(bo, by, sh, i, sm, enumS4, myClassS5, byteBoolD6, shortIntD7, enum8, class9, stringMyClassD10, intSeq12, byteSeq13, stringSeq14, p15);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    bool bo;
    ::Ice::Byte by;
    Ice::optional<short> sh;
    Ice::optional<int> i;
    Ice::optional<::Test::SmallStruct> sm;
    Ice::optional<::Test::MyEnumS> enumS4;
    Ice::optional<::Test::MyClassS> myClassS5;
    Ice::optional<::Test::ByteBoolD> byteBoolD6;
    Ice::optional<::Test::ShortIntD> shortIntD7;
    Ice::optional<::Test::MyEnum> enum8;
    Ice::optional<::std::shared_ptr<::Test::MyClass>> class9;
    Ice::optional<::Test::StringMyClassD> stringMyClassD10;
    Ice::optional<::Ice::IntSeq> intSeq12;
    Ice::optional<::Ice::ByteSeq> byteSeq13;
    Ice::optional<::Ice::StringSeq> stringSeq14;
    Ice::optional<::Test::Point> p15;
};

/// \cond INTERNAL
static OptionalClass _iceS_OptionalClass_init;
/// \endcond

class MyClass : public ::Ice::ValueHelper<MyClass, ::Ice::Value>
{
public:

    virtual ~MyClass();

    MyClass() = default;

    MyClass(const MyClass&) = default;
    MyClass(MyClass&&) = default;
    MyClass& operator=(const MyClass&) = default;
    MyClass& operator=(MyClass&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    MyClass(const ::std::shared_ptr<::Test::MyClass>& c, const ::std::shared_ptr<::Test::MyInterfacePrx>& prx, const ::std::shared_ptr<::Ice::Value>& o, const ::Test::SmallStruct& s, const ::Ice::BoolSeq& seq1, const ::Ice::ByteSeq& seq2, const ::Ice::ShortSeq& seq3, const ::Ice::IntSeq& seq4, const ::Ice::LongSeq& seq5, const ::Ice::FloatSeq& seq6, const ::Ice::DoubleSeq& seq7, const ::Ice::StringSeq& seq8, const ::Test::MyEnumS& seq9, const ::Test::MyClassS& seq10, const ::Test::StringMyClassD& d) :
        c(c),
        prx(prx),
        o(o),
        s(s),
        seq1(seq1),
        seq2(seq2),
        seq3(seq3),
        seq4(seq4),
        seq5(seq5),
        seq6(seq6),
        seq7(seq7),
        seq8(seq8),
        seq9(seq9),
        seq10(seq10),
        d(d)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::MyClass>&, const ::std::shared_ptr<::Test::MyInterfacePrx>&, const ::std::shared_ptr<::Ice::Value>&, const ::Test::SmallStruct&, const ::Ice::BoolSeq&, const ::Ice::ByteSeq&, const ::Ice::ShortSeq&, const ::Ice::IntSeq&, const ::Ice::LongSeq&, const ::Ice::FloatSeq&, const ::Ice::DoubleSeq&, const ::Ice::StringSeq&, const ::Test::MyEnumS&, const ::Test::MyClassS&, const ::Test::StringMyClassD&> ice_tuple() const
    {
        return std::tie(c, prx, o, s, seq1, seq2, seq3, seq4, seq5, seq6, seq7, seq8, seq9, seq10, d);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::MyClass> c;
    ::std::shared_ptr<::Test::MyInterfacePrx> prx;
    ::std::shared_ptr<::Ice::Value> o;
    ::Test::SmallStruct s;
    ::Ice::BoolSeq seq1;
    ::Ice::ByteSeq seq2;
    ::Ice::ShortSeq seq3;
    ::Ice::IntSeq seq4;
    ::Ice::LongSeq seq5;
    ::Ice::FloatSeq seq6;
    ::Ice::DoubleSeq seq7;
    ::Ice::StringSeq seq8;
    ::Test::MyEnumS seq9;
    ::Test::MyClassS seq10;
    ::Test::StringMyClassD d;
};

}

namespace Test
{

class MyInterfacePrx : public virtual ::Ice::Proxy<MyInterfacePrx, ::Ice::ObjectPrx>
{
public:

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    MyInterfacePrx() = default;
    friend ::std::shared_ptr<MyInterfacePrx> IceInternal::createProxy<MyInterfacePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Test::MyEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::Test::SmallStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 34;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::SmallStruct, S>
{
    static void read(S* istr, ::Test::SmallStruct& v)
    {
        istr->readAll(v.bo, v.by, v.sh, v.i, v.l, v.f, v.d, v.str, v.e, v.c, v.p, v.ss);
    }
};

template<>
struct StreamableTraits<::Test::Point>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Test::Point, S>
{
    static void read(S* istr, ::Test::Point& v)
    {
        istr->readAll(v.x, v.y);
    }
};

template<typename S>
struct StreamWriter<::Test::OptionalClass, S>
{
    static void write(S* ostr, const ::Test::OptionalClass& v)
    {
        ostr->writeAll(v.bo, v.by);
        ostr->writeAll({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15}, v.sh, v.i, v.sm, v.enumS4, v.myClassS5, v.byteBoolD6, v.shortIntD7, v.enum8, v.class9, v.stringMyClassD10, v.intSeq12, v.byteSeq13, v.stringSeq14, v.p15);
    }
};

template<typename S>
struct StreamReader<::Test::OptionalClass, S>
{
    static void read(S* istr, ::Test::OptionalClass& v)
    {
        istr->readAll(v.bo, v.by);
        istr->readAll({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15}, v.sh, v.i, v.sm, v.enumS4, v.myClassS5, v.byteBoolD6, v.shortIntD7, v.enum8, v.class9, v.stringMyClassD10, v.intSeq12, v.byteSeq13, v.stringSeq14, v.p15);
    }
};

template<typename S>
struct StreamReader<::Test::MyClass, S>
{
    static void read(S* istr, ::Test::MyClass& v)
    {
        istr->readAll(v.c, v.prx, v.o, v.s, v.seq1, v.seq2, v.seq3, v.seq4, v.seq5, v.seq6, v.seq7, v.seq8, v.seq9, v.seq10, v.d);
    }
};

template<typename S>
struct StreamReader<::Test::MyException, S>
{
    static void read(S* istr, ::Test::MyException& v)
    {
        istr->readAll(v.c);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using MyClassPtr = ::std::shared_ptr<MyClass>;

using MyInterfacePtr = ::std::shared_ptr<MyInterface>;
using MyInterfacePrxPtr = ::std::shared_ptr<MyInterfacePrx>;

using OptionalClassPtr = ::std::shared_ptr<OptionalClass>;

using BarPtr = ::std::shared_ptr<Bar>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Test
{

class MyClass;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< MyClass>&);
::IceProxy::Ice::Object* upCast(MyClass*);
/// \endcond

class MyInterface;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< MyInterface>&);
::IceProxy::Ice::Object* upCast(MyInterface*);
/// \endcond

class OptionalClass;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< OptionalClass>&);
::IceProxy::Ice::Object* upCast(OptionalClass*);
/// \endcond

class Bar;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Bar>&);
::IceProxy::Ice::Object* upCast(Bar*);
/// \endcond

}

}

namespace Test
{

class MyClass;
/// \cond INTERNAL
::Ice::Object* upCast(MyClass*);
/// \endcond
typedef ::IceInternal::Handle< MyClass> MyClassPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::MyClass> MyClassPrx;
typedef MyClassPrx MyClassPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(MyClassPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class MyInterface;
/// \cond INTERNAL
::Ice::Object* upCast(MyInterface*);
/// \endcond
typedef ::IceInternal::Handle< MyInterface> MyInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::MyInterface> MyInterfacePrx;
typedef MyInterfacePrx MyInterfacePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(MyInterfacePtr&, const ::Ice::ObjectPtr&);
/// \endcond

class OptionalClass;
/// \cond INTERNAL
::Ice::Object* upCast(OptionalClass*);
/// \endcond
typedef ::IceInternal::Handle< OptionalClass> OptionalClassPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::OptionalClass> OptionalClassPrx;
typedef OptionalClassPrx OptionalClassPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(OptionalClassPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class Bar;
/// \cond INTERNAL
::Ice::Object* upCast(Bar*);
/// \endcond
typedef ::IceInternal::Handle< Bar> BarPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Bar> BarPrx;
typedef BarPrx BarPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(BarPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Test
{

enum MyEnum
{
    enum1,
    enum2,
    enum3
};

typedef ::std::vector< ::Ice::Byte> SerialSmall;

struct SmallStruct
{
    bool bo;
    ::Ice::Byte by;
    ::Ice::Short sh;
    ::Ice::Int i;
    ::Ice::Long l;
    ::Ice::Float f;
    ::Ice::Double d;
    ::std::string str;
    ::Test::MyEnum e;
    ::Test::MyClassPtr c;
    ::Test::MyInterfacePrx p;
    ::Test::SerialSmall ss;
};

struct Point
{
    ::Ice::Int x;
    ::Ice::Int y;

    bool operator==(const Point& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(x != rhs_.x)
        {
            return false;
        }
        if(y != rhs_.y)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Point& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(x < rhs_.x)
        {
            return true;
        }
        else if(rhs_.x < x)
        {
            return false;
        }
        if(y < rhs_.y)
        {
            return true;
        }
        else if(rhs_.y < y)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Point& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const Point& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const Point& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const Point& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector<MyEnum> MyEnumS;

typedef ::std::vector<MyClassPtr> MyClassS;

typedef ::std::map< ::Ice::Byte, bool> ByteBoolD;

typedef ::std::map< ::Ice::Short, ::Ice::Int> ShortIntD;

typedef ::std::map< ::std::string, MyClassPtr> StringMyClassD;

typedef ::std::vector< ::Ice::BoolSeq> BoolSS;

typedef ::std::vector< ::Ice::ByteSeq> ByteSS;

typedef ::std::vector< ::Ice::ShortSeq> ShortSS;

typedef ::std::vector< ::Ice::IntSeq> IntSS;

typedef ::std::vector< ::Ice::LongSeq> LongSS;

typedef ::std::vector< ::Ice::FloatSeq> FloatSS;

typedef ::std::vector< ::Ice::DoubleSeq> DoubleSS;

typedef ::std::vector< ::Ice::StringSeq> StringSS;

typedef ::std::vector<MyEnumS> MyEnumSS;

typedef ::std::vector<MyClassS> MyClassSS;

typedef ::std::map< ::Ice::Long, ::Ice::Float> LongFloatD;

typedef ::std::map< ::std::string, ::std::string> StringStringD;

class MyException : public ::Ice::UserException
{
public:

    MyException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit MyException(const MyClassPtr& c);

#ifdef ICE_CPP11_COMPILER
    MyException(const MyException&) = default;
    virtual ~MyException();
#else
    virtual ~MyException() throw();
#endif

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual MyException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    /// \cond STREAM
    virtual bool _usesClasses() const;
    /// \endcond

    ::Test::MyClassPtr c;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static MyException _iceS_MyException_init;
/// \endcond

}

namespace Test
{

}

namespace IceProxy
{

namespace Test
{

class OptionalClass : public virtual ::Ice::Proxy<OptionalClass, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class MyClass : public virtual ::Ice::Proxy<MyClass, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class MyInterface : public virtual ::Ice::Proxy<MyInterface, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Test
{

class OptionalClass : public virtual ::Ice::Object, public ::IceInternal::GCObject
{
public:

    typedef OptionalClassPrx ProxyType;
    typedef OptionalClassPtr PointerType;

    virtual ~OptionalClass();

    OptionalClass()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    OptionalClass(bool bo, ::Ice::Byte by, const IceUtil::Optional< ::Ice::Short>& sh, const IceUtil::Optional< ::Ice::Int>& i, const IceUtil::Optional< ::Test::SmallStruct>& sm, const IceUtil::Optional< ::Test::MyEnumS>& enumS4, const IceUtil::Optional< ::Test::MyClassS>& myClassS5, const IceUtil::Optional< ::Test::ByteBoolD>& byteBoolD6, const IceUtil::Optional< ::Test::ShortIntD>& shortIntD7, const IceUtil::Optional< ::Test::MyEnum>& enum8, const IceUtil::Optional< ::Test::MyClassPtr>& class9, const IceUtil::Optional< ::Test::StringMyClassD>& stringMyClassD10, const IceUtil::Optional< ::Ice::IntSeq>& intSeq12, const IceUtil::Optional< ::Ice::ByteSeq>& byteSeq13, const IceUtil::Optional< ::Ice::StringSeq>& stringSeq14, const IceUtil::Optional< ::Test::Point>& p15) :
        bo(bo),
        by(by),
        sh(sh),
        i(i),
        sm(sm),
        enumS4(enumS4),
        myClassS5(myClassS5),
        byteBoolD6(byteBoolD6),
        shortIntD7(shortIntD7),
        enum8(enum8),
        class9(class9),
        stringMyClassD10(stringMyClassD10),
        intSeq12(intSeq12),
        byteSeq13(byteSeq13),
        stringSeq14(stringSeq14),
        p15(p15)
    {
    }

#ifdef ICE_CPP11_COMPILER
    OptionalClass(const OptionalClass&) = default;
    OptionalClass& operator=(const OptionalClass&) = default;
#endif

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
    /// \cond INTERNAL
    virtual void _iceGcVisitMembers(::IceInternal::GCVisitor&);
    /// \endcond

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    bool bo;
    ::Ice::Byte by;
    IceUtil::Optional< ::Ice::Short> sh;
    IceUtil::Optional< ::Ice::Int> i;
    IceUtil::Optional< ::Test::SmallStruct> sm;
    IceUtil::Optional< ::Test::MyEnumS> enumS4;
    IceUtil::Optional< ::Test::MyClassS> myClassS5;
    IceUtil::Optional< ::Test::ByteBoolD> byteBoolD6;
    IceUtil::Optional< ::Test::ShortIntD> shortIntD7;
    IceUtil::Optional< ::Test::MyEnum> enum8;
    IceUtil::Optional< ::Test::MyClassPtr> class9;
    IceUtil::Optional< ::Test::StringMyClassD> stringMyClassD10;
    IceUtil::Optional< ::Ice::IntSeq> intSeq12;
    IceUtil::Optional< ::Ice::ByteSeq> byteSeq13;
    IceUtil::Optional< ::Ice::StringSeq> stringSeq14;
    IceUtil::Optional< ::Test::Point> p15;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_OptionalClass_init = ::Test::OptionalClass::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const OptionalClass& lhs, const OptionalClass& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const OptionalClass& lhs, const OptionalClass& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class MyClass : public virtual ::Ice::Object, public ::IceInternal::GCObject
{
public:

    typedef MyClassPrx ProxyType;
    typedef MyClassPtr PointerType;

    virtual ~MyClass();

    MyClass()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    MyClass(const ::Test::MyClassPtr& c, const ::Test::MyInterfacePrx& prx, const ::Ice::ObjectPtr& o, const ::Test::SmallStruct& s, const ::Ice::BoolSeq& seq1, const ::Ice::ByteSeq& seq2, const ::Ice::ShortSeq& seq3, const ::Ice::IntSeq& seq4, const ::Ice::LongSeq& seq5, const ::Ice::FloatSeq& seq6, const ::Ice::DoubleSeq& seq7, const ::Ice::StringSeq& seq8, const ::Test::MyEnumS& seq9, const ::Test::MyClassS& seq10, const ::Test::StringMyClassD& d) :
        c(c),
        prx(prx),
        o(o),
        s(s),
        seq1(seq1),
        seq2(seq2),
        seq3(seq3),
        seq4(seq4),
        seq5(seq5),
        seq6(seq6),
        seq7(seq7),
        seq8(seq8),
        seq9(seq9),
        seq10(seq10),
        d(d)
    {
    }

#ifdef ICE_CPP11_COMPILER
    MyClass(const MyClass&) = default;
    MyClass& operator=(const MyClass&) = default;
#endif

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
    /// \cond INTERNAL
    virtual void _iceGcVisitMembers(::IceInternal::GCVisitor&);
    /// \endcond

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Test::MyClassPtr c;
    ::Test::MyInterfacePrx prx;
    ::Ice::ObjectPtr o;
    ::Test::SmallStruct s;
    ::Ice::BoolSeq seq1;
    ::Ice::ByteSeq seq2;
    ::Ice::ShortSeq seq3;
    ::Ice::IntSeq seq4;
    ::Ice::LongSeq seq5;
    ::Ice::FloatSeq seq6;
    ::Ice::DoubleSeq seq7;
    ::Ice::StringSeq seq8;
    ::Test::MyEnumS seq9;
    ::Test::MyClassS seq10;
    ::Test::StringMyClassD d;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_MyClass_init = ::Test::MyClass::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const MyClass& lhs, const MyClass& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const MyClass& lhs, const MyClass& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class MyInterface : public virtual ::Ice::Object
{
public:

    typedef MyInterfacePrx ProxyType;
    typedef MyInterfacePtr PointerType;

    virtual ~MyInterface();

#ifdef ICE_CPP11_COMPILER
    MyInterface() = default;
    MyInterface(const MyInterface&) = default;
    MyInterface& operator=(const MyInterface&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const MyInterface& lhs, const MyInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const MyInterface& lhs, const MyInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Test::MyEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Test::SmallStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 34;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Test::SmallStruct, S>
{
    static void write(S* ostr, const ::Test::SmallStruct& v)
    {
        ostr->write(v.bo);
        ostr->write(v.by);
        ostr->write(v.sh);
        ostr->write(v.i);
        ostr->write(v.l);
        ostr->write(v.f);
        ostr->write(v.d);
        ostr->write(v.str);
        ostr->write(v.e);
        ostr->write(v.c);
        ostr->write(v.p);
        ostr->write(v.ss);
    }
};

template<typename S>
struct StreamReader< ::Test::SmallStruct, S>
{
    static void read(S* istr, ::Test::SmallStruct& v)
    {
        istr->read(v.bo);
        istr->read(v.by);
        istr->read(v.sh);
        istr->read(v.i);
        istr->read(v.l);
        istr->read(v.f);
        istr->read(v.d);
        istr->read(v.str);
        istr->read(v.e);
        istr->read(v.c);
        istr->read(v.p);
        istr->read(v.ss);
    }
};

template<>
struct StreamableTraits< ::Test::Point>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::Test::Point, S>
{
    static void write(S* ostr, const ::Test::Point& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
    }
};

template<typename S>
struct StreamReader< ::Test::Point, S>
{
    static void read(S* istr, ::Test::Point& v)
    {
        istr->read(v.x);
        istr->read(v.y);
    }
};

template<typename S>
struct StreamWriter< ::Test::OptionalClass, S>
{
    static void write(S* ostr, const ::Test::OptionalClass& v)
    {
        ostr->write(v.bo);
        ostr->write(v.by);
        ostr->write(1, v.sh);
        ostr->write(2, v.i);
        ostr->write(3, v.sm);
        ostr->write(4, v.enumS4);
        ostr->write(5, v.myClassS5);
        ostr->write(6, v.byteBoolD6);
        ostr->write(7, v.shortIntD7);
        ostr->write(8, v.enum8);
        ostr->write(9, v.class9);
        ostr->write(10, v.stringMyClassD10);
        ostr->write(12, v.intSeq12);
        ostr->write(13, v.byteSeq13);
        ostr->write(14, v.stringSeq14);
        ostr->write(15, v.p15);
    }
};

template<typename S>
struct StreamReader< ::Test::OptionalClass, S>
{
    static void read(S* istr, ::Test::OptionalClass& v)
    {
        istr->read(v.bo);
        istr->read(v.by);
        istr->read(1, v.sh);
        istr->read(2, v.i);
        istr->read(3, v.sm);
        istr->read(4, v.enumS4);
        istr->read(5, v.myClassS5);
        istr->read(6, v.byteBoolD6);
        istr->read(7, v.shortIntD7);
        istr->read(8, v.enum8);
        istr->read(9, v.class9);
        istr->read(10, v.stringMyClassD10);
        istr->read(12, v.intSeq12);
        istr->read(13, v.byteSeq13);
        istr->read(14, v.stringSeq14);
        istr->read(15, v.p15);
    }
};

template<typename S>
struct StreamWriter< ::Test::MyClass, S>
{
    static void write(S* ostr, const ::Test::MyClass& v)
    {
        ostr->write(v.c);
        ostr->write(v.prx);
        ostr->write(v.o);
        ostr->write(v.s);
        ostr->write(v.seq1);
        ostr->write(v.seq2);
        ostr->write(v.seq3);
        ostr->write(v.seq4);
        ostr->write(v.seq5);
        ostr->write(v.seq6);
        ostr->write(v.seq7);
        ostr->write(v.seq8);
        ostr->write(v.seq9);
        ostr->write(v.seq10);
        ostr->write(v.d);
    }
};

template<typename S>
struct StreamReader< ::Test::MyClass, S>
{
    static void read(S* istr, ::Test::MyClass& v)
    {
        istr->read(v.c);
        istr->read(v.prx);
        istr->read(v.o);
        istr->read(v.s);
        istr->read(v.seq1);
        istr->read(v.seq2);
        istr->read(v.seq3);
        istr->read(v.seq4);
        istr->read(v.seq5);
        istr->read(v.seq6);
        istr->read(v.seq7);
        istr->read(v.seq8);
        istr->read(v.seq9);
        istr->read(v.seq10);
        istr->read(v.d);
    }
};

template<>
struct StreamableTraits< ::Test::MyException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::MyException, S>
{
    static void write(S* ostr, const ::Test::MyException& v)
    {
        ostr->write(v.c);
    }
};

template<typename S>
struct StreamReader< ::Test::MyException, S>
{
    static void read(S* istr, ::Test::MyException& v)
    {
        istr->read(v.c);
    }
};

}
/// \endcond

namespace Test
{

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
