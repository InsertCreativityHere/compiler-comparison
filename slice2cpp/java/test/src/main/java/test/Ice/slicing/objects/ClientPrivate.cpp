//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `ClientPrivate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <ClientPrivate.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::SBase> iceC_Test_SBase_init("::Test::SBase");

const ::IceInternal::DefaultValueFactoryInit<::Test::SBSKnownDerived> iceC_Test_SBSKnownDerived_init("::Test::SBSKnownDerived");

const ::IceInternal::DefaultValueFactoryInit<::Test::B> iceC_Test_B_init("::Test::B");

const ::IceInternal::DefaultValueFactoryInit<::Test::D1> iceC_Test_D1_init("::Test::D1");

const ::IceInternal::DefaultValueFactoryInit<::Test::SS1> iceC_Test_SS1_init("::Test::SS1");

const ::IceInternal::DefaultValueFactoryInit<::Test::SS2> iceC_Test_SS2_init("::Test::SS2");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::BaseException> iceC_Test_BaseException_init("::Test::BaseException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::DerivedException> iceC_Test_DerivedException_init("::Test::DerivedException");

const ::IceInternal::DefaultValueFactoryInit<::Test::PBase> iceC_Test_PBase_init("::Test::PBase");

const ::IceInternal::DefaultValueFactoryInit<::Test::Preserved> iceC_Test_Preserved_init("::Test::Preserved");

const ::IceInternal::DefaultValueFactoryInit<::Test::PDerived> iceC_Test_PDerived_init("::Test::PDerived");

const ::IceInternal::DefaultValueFactoryInit<::Test::CompactPDerived> iceC_Test_CompactPDerived_init("::Test::CompactPDerived");
const ::IceInternal::CompactIdInit iceC_Test_CompactPDerived_compactIdInit ("::Test::CompactPDerived", 56);

const ::IceInternal::DefaultValueFactoryInit<::Test::PNode> iceC_Test_PNode_init("::Test::PNode");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::PreservedException> iceC_Test_PreservedException_init("::Test::PreservedException");

const ::std::string iceC_Test_TestIntf_ids[2] =
{
    "::Ice::Object",
    "::Test::TestIntf"
};
const ::std::string iceC_Test_TestIntf_ops[] =
{
    "D1AsB",
    "D1AsD1",
    "D2AsB",
    "PBSUnknown2AsPreservedWithGraph",
    "PBSUnknownAsPreserved",
    "PBSUnknownAsPreservedWithGraph",
    "SBSKnownDerivedAsSBSKnownDerived",
    "SBSKnownDerivedAsSBase",
    "SBSUnknownDerivedAsSBase",
    "SBSUnknownDerivedAsSBaseCompact",
    "SBaseAsObject",
    "SBaseAsSBase",
    "SUnknownAsObject",
    "checkPBSUnknown",
    "checkPBSUnknown2WithGraph",
    "checkPBSUnknownWithGraph",
    "checkSUnknown",
    "dictionaryTest",
    "exchangePBase",
    "exchangePNode",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "oneElementCycle",
    "paramTest1",
    "paramTest2",
    "paramTest3",
    "paramTest4",
    "returnTest1",
    "returnTest2",
    "returnTest3",
    "sequenceTest",
    "shutdown",
    "throwBaseAsBase",
    "throwDerivedAsBase",
    "throwDerivedAsDerived",
    "throwPreservedException",
    "throwUnknownDerivedAsBase",
    "twoElementCycle",
    "useForward"
};
const ::std::string iceC_Test_TestIntf_SBaseAsObject_name = "SBaseAsObject";
const ::std::string iceC_Test_TestIntf_SBaseAsSBase_name = "SBaseAsSBase";
const ::std::string iceC_Test_TestIntf_SBSKnownDerivedAsSBase_name = "SBSKnownDerivedAsSBase";
const ::std::string iceC_Test_TestIntf_SBSKnownDerivedAsSBSKnownDerived_name = "SBSKnownDerivedAsSBSKnownDerived";
const ::std::string iceC_Test_TestIntf_SBSUnknownDerivedAsSBase_name = "SBSUnknownDerivedAsSBase";
const ::std::string iceC_Test_TestIntf_SBSUnknownDerivedAsSBaseCompact_name = "SBSUnknownDerivedAsSBaseCompact";
const ::std::string iceC_Test_TestIntf_SUnknownAsObject_name = "SUnknownAsObject";
const ::std::string iceC_Test_TestIntf_checkSUnknown_name = "checkSUnknown";
const ::std::string iceC_Test_TestIntf_oneElementCycle_name = "oneElementCycle";
const ::std::string iceC_Test_TestIntf_twoElementCycle_name = "twoElementCycle";
const ::std::string iceC_Test_TestIntf_D1AsB_name = "D1AsB";
const ::std::string iceC_Test_TestIntf_D1AsD1_name = "D1AsD1";
const ::std::string iceC_Test_TestIntf_D2AsB_name = "D2AsB";
const ::std::string iceC_Test_TestIntf_paramTest1_name = "paramTest1";
const ::std::string iceC_Test_TestIntf_paramTest2_name = "paramTest2";
const ::std::string iceC_Test_TestIntf_paramTest3_name = "paramTest3";
const ::std::string iceC_Test_TestIntf_paramTest4_name = "paramTest4";
const ::std::string iceC_Test_TestIntf_returnTest1_name = "returnTest1";
const ::std::string iceC_Test_TestIntf_returnTest2_name = "returnTest2";
const ::std::string iceC_Test_TestIntf_returnTest3_name = "returnTest3";
const ::std::string iceC_Test_TestIntf_sequenceTest_name = "sequenceTest";
const ::std::string iceC_Test_TestIntf_dictionaryTest_name = "dictionaryTest";
const ::std::string iceC_Test_TestIntf_exchangePBase_name = "exchangePBase";
const ::std::string iceC_Test_TestIntf_PBSUnknownAsPreserved_name = "PBSUnknownAsPreserved";
const ::std::string iceC_Test_TestIntf_checkPBSUnknown_name = "checkPBSUnknown";
const ::std::string iceC_Test_TestIntf_PBSUnknownAsPreservedWithGraph_name = "PBSUnknownAsPreservedWithGraph";
const ::std::string iceC_Test_TestIntf_checkPBSUnknownWithGraph_name = "checkPBSUnknownWithGraph";
const ::std::string iceC_Test_TestIntf_PBSUnknown2AsPreservedWithGraph_name = "PBSUnknown2AsPreservedWithGraph";
const ::std::string iceC_Test_TestIntf_checkPBSUnknown2WithGraph_name = "checkPBSUnknown2WithGraph";
const ::std::string iceC_Test_TestIntf_exchangePNode_name = "exchangePNode";
const ::std::string iceC_Test_TestIntf_throwBaseAsBase_name = "throwBaseAsBase";
const ::std::string iceC_Test_TestIntf_throwDerivedAsBase_name = "throwDerivedAsBase";
const ::std::string iceC_Test_TestIntf_throwDerivedAsDerived_name = "throwDerivedAsDerived";
const ::std::string iceC_Test_TestIntf_throwUnknownDerivedAsBase_name = "throwUnknownDerivedAsBase";
const ::std::string iceC_Test_TestIntf_throwPreservedException_name = "throwPreservedException";
const ::std::string iceC_Test_TestIntf_useForward_name = "useForward";
const ::std::string iceC_Test_TestIntf_shutdown_name = "shutdown";

const ::IceInternal::DefaultValueFactoryInit<::Test::D3> iceC_Test_D3_init("::Test::D3");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCUnknown> iceC_Test_PCUnknown_init("::Test::PCUnknown");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCDerived> iceC_Test_PCDerived_init("::Test::PCDerived");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCDerived2> iceC_Test_PCDerived2_init("::Test::PCDerived2");

const ::IceInternal::DefaultValueFactoryInit<::Test::PCDerived3> iceC_Test_PCDerived3_init("::Test::PCDerived3");

const ::IceInternal::DefaultValueFactoryInit<::Test::CompactPCDerived> iceC_Test_CompactPCDerived_init("::Test::CompactPCDerived");
const ::IceInternal::CompactIdInit iceC_Test_CompactPCDerived_compactIdInit ("::Test::CompactPCDerived", 57);

const ::IceInternal::DefaultValueFactoryInit<::Test::Hidden> iceC_Test_Hidden_init("::Test::Hidden");

const ::IceInternal::DefaultValueFactoryInit<::Test::Forward> iceC_Test_Forward_init("::Test::Forward");

}

Test::BaseException::~BaseException()
{
}

const ::std::string&
Test::BaseException::ice_staticId()
{
    static const ::std::string typeId = "::Test::BaseException";
    return typeId;
}

/// \cond STREAM
bool
Test::BaseException::_usesClasses() const
{
    return true;
}
/// \endcond

Test::DerivedException::~DerivedException()
{
}

const ::std::string&
Test::DerivedException::ice_staticId()
{
    static const ::std::string typeId = "::Test::DerivedException";
    return typeId;
}

Test::PreservedException::~PreservedException()
{
}

const ::std::string&
Test::PreservedException::ice_staticId()
{
    static const ::std::string typeId = "::Test::PreservedException";
    return typeId;
}

::std::shared_ptr<::Ice::SlicedData>
Test::PreservedException::ice_getSlicedData() const
{
    return _slicedData;
}

/// \cond STREAM
void
Test::PreservedException::_write(::Ice::OutputStream* ostr) const
{
    ostr->startException(_slicedData);
    _writeImpl(ostr);
    ostr->endException();
}

void
Test::PreservedException::_read(::Ice::InputStream* istr)
{
    istr->startException();
    _readImpl(istr);
    _slicedData = istr->endException(true);
}
/// \endcond

bool
Test::TestIntf::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_TestIntf_ids, iceC_Test_TestIntf_ids + 2, s);
}

::std::vector<::std::string>
Test::TestIntf::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_TestIntf_ids[0], &iceC_Test_TestIntf_ids[2]);
}

::std::string
Test::TestIntf::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::TestIntf::ice_staticId()
{
    static const ::std::string typeId = "::Test::TestIntf";
    return typeId;
}

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_SBaseAsObject(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<::Ice::Value> ret = this->SBaseAsObject(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_SBaseAsSBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<SBase> ret = this->SBaseAsSBase(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_SBSKnownDerivedAsSBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<SBase> ret = this->SBSKnownDerivedAsSBase(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_SBSKnownDerivedAsSBSKnownDerived(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<SBSKnownDerived> ret = this->SBSKnownDerivedAsSBSKnownDerived(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_SBSUnknownDerivedAsSBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<SBase> ret = this->SBSUnknownDerivedAsSBase(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_SBSUnknownDerivedAsSBaseCompact(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::CompactFormat);
    ::std::shared_ptr<SBase> ret = this->SBSUnknownDerivedAsSBaseCompact(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_SUnknownAsObject(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<::Ice::Value> ret = this->SUnknownAsObject(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_checkSUnknown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Ice::Value> iceP_o;
    istr->readAll(iceP_o);
    istr->readPendingValues();
    inS.endReadParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->checkSUnknown(::std::move(iceP_o), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_oneElementCycle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<B> ret = this->oneElementCycle(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_twoElementCycle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<B> ret = this->twoElementCycle(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_D1AsB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<B> ret = this->D1AsB(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_D1AsD1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<D1> ret = this->D1AsD1(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_D2AsB(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<B> ret = this->D2AsB(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_paramTest1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<B> iceP_p1;
    ::std::shared_ptr<B> iceP_p2;
    this->paramTest1(iceP_p1, iceP_p2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p1, iceP_p2);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_paramTest2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<B> iceP_p2;
    ::std::shared_ptr<B> iceP_p1;
    this->paramTest2(iceP_p2, iceP_p1, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p2, iceP_p1);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_paramTest3(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<B> iceP_p1;
    ::std::shared_ptr<B> iceP_p2;
    ::std::shared_ptr<B> ret = this->paramTest3(iceP_p1, iceP_p2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p1, iceP_p2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_paramTest4(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<B> iceP_p;
    ::std::shared_ptr<B> ret = this->paramTest4(iceP_p, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_returnTest1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<B> iceP_p1;
    ::std::shared_ptr<B> iceP_p2;
    ::std::shared_ptr<B> ret = this->returnTest1(iceP_p1, iceP_p2, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p1, iceP_p2, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_returnTest2(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<B> iceP_p2;
    ::std::shared_ptr<B> iceP_p1;
    ::std::shared_ptr<B> ret = this->returnTest2(iceP_p2, iceP_p1, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_p2, iceP_p1, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_returnTest3(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<B> iceP_p1;
    ::std::shared_ptr<B> iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->readPendingValues();
    inS.endReadParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<B> ret = this->returnTest3(::std::move(iceP_p1), ::std::move(iceP_p2), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_sequenceTest(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<SS1> iceP_p1;
    ::std::shared_ptr<SS2> iceP_p2;
    istr->readAll(iceP_p1, iceP_p2);
    istr->readPendingValues();
    inS.endReadParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    SS3 ret = this->sequenceTest(::std::move(iceP_p1), ::std::move(iceP_p2), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_dictionaryTest(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    BDict iceP_bin;
    istr->readAll(iceP_bin);
    istr->readPendingValues();
    inS.endReadParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    BDict iceP_bout;
    BDict ret = this->dictionaryTest(::std::move(iceP_bin), iceP_bout, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_bout, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_exchangePBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<PBase> iceP_pb;
    istr->readAll(iceP_pb);
    istr->readPendingValues();
    inS.endReadParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<PBase> ret = this->exchangePBase(::std::move(iceP_pb), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_PBSUnknownAsPreserved(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<Preserved> ret = this->PBSUnknownAsPreserved(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_checkPBSUnknown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<Preserved> iceP_p;
    istr->readAll(iceP_p);
    istr->readPendingValues();
    inS.endReadParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->checkPBSUnknown(::std::move(iceP_p), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_PBSUnknownAsPreservedWithGraph(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::shared_ptr<Preserved>& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        ostr->writePendingValues();
        inA->endWriteParams();
        inA->completed();
    };
    this->PBSUnknownAsPreservedWithGraphAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_checkPBSUnknownWithGraph(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<Preserved> iceP_p;
    istr->readAll(iceP_p);
    istr->readPendingValues();
    inS.endReadParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->checkPBSUnknownWithGraph(::std::move(iceP_p), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_PBSUnknown2AsPreservedWithGraph(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::shared_ptr<Preserved>& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        ostr->writePendingValues();
        inA->endWriteParams();
        inA->completed();
    };
    this->PBSUnknown2AsPreservedWithGraphAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_checkPBSUnknown2WithGraph(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<Preserved> iceP_p;
    istr->readAll(iceP_p);
    istr->readPendingValues();
    inS.endReadParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->checkPBSUnknown2WithGraph(::std::move(iceP_p), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_exchangePNode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<PNode> iceP_pn;
    istr->readAll(iceP_pn);
    istr->readPendingValues();
    inS.endReadParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<PNode> ret = this->exchangePNode(::std::move(iceP_pn), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_throwBaseAsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->throwBaseAsBase(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_throwDerivedAsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->throwDerivedAsBase(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_throwDerivedAsDerived(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->throwDerivedAsDerived(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_throwUnknownDerivedAsBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->throwUnknownDerivedAsBase(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_throwPreservedException(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->throwPreservedExceptionAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_useForward(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    ::std::shared_ptr<Forward> iceP_f;
    this->useForward(iceP_f, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_f);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    inS.setFormat(::Ice::FormatType::SlicedFormat);
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::TestIntf::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_TestIntf_ops, iceC_Test_TestIntf_ops + 41, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_TestIntf_ops)
    {
        case 0:
        {
            return _iceD_D1AsB(in, current);
        }
        case 1:
        {
            return _iceD_D1AsD1(in, current);
        }
        case 2:
        {
            return _iceD_D2AsB(in, current);
        }
        case 3:
        {
            return _iceD_PBSUnknown2AsPreservedWithGraph(in, current);
        }
        case 4:
        {
            return _iceD_PBSUnknownAsPreserved(in, current);
        }
        case 5:
        {
            return _iceD_PBSUnknownAsPreservedWithGraph(in, current);
        }
        case 6:
        {
            return _iceD_SBSKnownDerivedAsSBSKnownDerived(in, current);
        }
        case 7:
        {
            return _iceD_SBSKnownDerivedAsSBase(in, current);
        }
        case 8:
        {
            return _iceD_SBSUnknownDerivedAsSBase(in, current);
        }
        case 9:
        {
            return _iceD_SBSUnknownDerivedAsSBaseCompact(in, current);
        }
        case 10:
        {
            return _iceD_SBaseAsObject(in, current);
        }
        case 11:
        {
            return _iceD_SBaseAsSBase(in, current);
        }
        case 12:
        {
            return _iceD_SUnknownAsObject(in, current);
        }
        case 13:
        {
            return _iceD_checkPBSUnknown(in, current);
        }
        case 14:
        {
            return _iceD_checkPBSUnknown2WithGraph(in, current);
        }
        case 15:
        {
            return _iceD_checkPBSUnknownWithGraph(in, current);
        }
        case 16:
        {
            return _iceD_checkSUnknown(in, current);
        }
        case 17:
        {
            return _iceD_dictionaryTest(in, current);
        }
        case 18:
        {
            return _iceD_exchangePBase(in, current);
        }
        case 19:
        {
            return _iceD_exchangePNode(in, current);
        }
        case 20:
        {
            return _iceD_ice_id(in, current);
        }
        case 21:
        {
            return _iceD_ice_ids(in, current);
        }
        case 22:
        {
            return _iceD_ice_isA(in, current);
        }
        case 23:
        {
            return _iceD_ice_ping(in, current);
        }
        case 24:
        {
            return _iceD_oneElementCycle(in, current);
        }
        case 25:
        {
            return _iceD_paramTest1(in, current);
        }
        case 26:
        {
            return _iceD_paramTest2(in, current);
        }
        case 27:
        {
            return _iceD_paramTest3(in, current);
        }
        case 28:
        {
            return _iceD_paramTest4(in, current);
        }
        case 29:
        {
            return _iceD_returnTest1(in, current);
        }
        case 30:
        {
            return _iceD_returnTest2(in, current);
        }
        case 31:
        {
            return _iceD_returnTest3(in, current);
        }
        case 32:
        {
            return _iceD_sequenceTest(in, current);
        }
        case 33:
        {
            return _iceD_shutdown(in, current);
        }
        case 34:
        {
            return _iceD_throwBaseAsBase(in, current);
        }
        case 35:
        {
            return _iceD_throwDerivedAsBase(in, current);
        }
        case 36:
        {
            return _iceD_throwDerivedAsDerived(in, current);
        }
        case 37:
        {
            return _iceD_throwPreservedException(in, current);
        }
        case 38:
        {
            return _iceD_throwUnknownDerivedAsBase(in, current);
        }
        case 39:
        {
            return _iceD_twoElementCycle(in, current);
        }
        case 40:
        {
            return _iceD_useForward(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::SBase::~SBase()
{
}

const ::std::string&
Test::SBase::ice_staticId()
{
    static const ::std::string typeId = "::Test::SBase";
    return typeId;
}

Test::SBSKnownDerived::~SBSKnownDerived()
{
}

const ::std::string&
Test::SBSKnownDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::SBSKnownDerived";
    return typeId;
}

Test::B::~B()
{
}

const ::std::string&
Test::B::ice_staticId()
{
    static const ::std::string typeId = "::Test::B";
    return typeId;
}

Test::D1::~D1()
{
}

const ::std::string&
Test::D1::ice_staticId()
{
    static const ::std::string typeId = "::Test::D1";
    return typeId;
}

Test::SS1::~SS1()
{
}

const ::std::string&
Test::SS1::ice_staticId()
{
    static const ::std::string typeId = "::Test::SS1";
    return typeId;
}

Test::SS2::~SS2()
{
}

const ::std::string&
Test::SS2::ice_staticId()
{
    static const ::std::string typeId = "::Test::SS2";
    return typeId;
}

Test::PBase::~PBase()
{
}

const ::std::string&
Test::PBase::ice_staticId()
{
    static const ::std::string typeId = "::Test::PBase";
    return typeId;
}

Test::Preserved::~Preserved()
{
}

::std::shared_ptr<::Ice::SlicedData>
Test::Preserved::ice_getSlicedData() const
{
    return _iceSlicedData;
}

/// \cond STREAM
void
Test::Preserved::_iceWrite(::Ice::OutputStream* ostr) const
{
    ostr->startValue(_iceSlicedData);
    _iceWriteImpl(ostr);
    ostr->endValue();
}

void
Test::Preserved::_iceRead(::Ice::InputStream* istr)
{
    istr->startValue();
    _iceReadImpl(istr);
    _iceSlicedData = istr->endValue(true);
}
/// \endcond

const ::std::string&
Test::Preserved::ice_staticId()
{
    static const ::std::string typeId = "::Test::Preserved";
    return typeId;
}

Test::PDerived::~PDerived()
{
}

const ::std::string&
Test::PDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::PDerived";
    return typeId;
}

Test::CompactPDerived::~CompactPDerived()
{
}

const ::std::string&
Test::CompactPDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::CompactPDerived";
    return typeId;
}

Test::PNode::~PNode()
{
}

::std::shared_ptr<::Ice::SlicedData>
Test::PNode::ice_getSlicedData() const
{
    return _iceSlicedData;
}

/// \cond STREAM
void
Test::PNode::_iceWrite(::Ice::OutputStream* ostr) const
{
    ostr->startValue(_iceSlicedData);
    _iceWriteImpl(ostr);
    ostr->endValue();
}

void
Test::PNode::_iceRead(::Ice::InputStream* istr)
{
    istr->startValue();
    _iceReadImpl(istr);
    _iceSlicedData = istr->endValue(true);
}
/// \endcond

const ::std::string&
Test::PNode::ice_staticId()
{
    static const ::std::string typeId = "::Test::PNode";
    return typeId;
}

Test::D3::~D3()
{
}

const ::std::string&
Test::D3::ice_staticId()
{
    static const ::std::string typeId = "::Test::D3";
    return typeId;
}

Test::PCUnknown::~PCUnknown()
{
}

::std::shared_ptr<::Ice::SlicedData>
Test::PCUnknown::ice_getSlicedData() const
{
    return _iceSlicedData;
}

/// \cond STREAM
void
Test::PCUnknown::_iceWrite(::Ice::OutputStream* ostr) const
{
    ostr->startValue(_iceSlicedData);
    _iceWriteImpl(ostr);
    ostr->endValue();
}

void
Test::PCUnknown::_iceRead(::Ice::InputStream* istr)
{
    istr->startValue();
    _iceReadImpl(istr);
    _iceSlicedData = istr->endValue(true);
}
/// \endcond

const ::std::string&
Test::PCUnknown::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCUnknown";
    return typeId;
}

Test::PCDerived::~PCDerived()
{
}

const ::std::string&
Test::PCDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCDerived";
    return typeId;
}

Test::PCDerived2::~PCDerived2()
{
}

const ::std::string&
Test::PCDerived2::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCDerived2";
    return typeId;
}

Test::PCDerived3::~PCDerived3()
{
}

const ::std::string&
Test::PCDerived3::ice_staticId()
{
    static const ::std::string typeId = "::Test::PCDerived3";
    return typeId;
}

Test::CompactPCDerived::~CompactPCDerived()
{
}

const ::std::string&
Test::CompactPCDerived::ice_staticId()
{
    static const ::std::string typeId = "::Test::CompactPCDerived";
    return typeId;
}

Test::Hidden::~Hidden()
{
}

const ::std::string&
Test::Hidden::ice_staticId()
{
    static const ::std::string typeId = "::Test::Hidden";
    return typeId;
}

Test::Forward::~Forward()
{
}

const ::std::string&
Test::Forward::ice_staticId()
{
    static const ::std::string typeId = "::Test::Forward";
    return typeId;
}

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_SBaseAsObject(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::Value>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_SBaseAsObject_name);
    outAsync->invoke(iceC_Test_TestIntf_SBaseAsObject_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Ice::Value> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_SBaseAsSBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::SBase>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_SBaseAsSBase_name);
    outAsync->invoke(iceC_Test_TestIntf_SBaseAsSBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<SBase> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_SBSKnownDerivedAsSBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::SBase>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_SBSKnownDerivedAsSBase_name);
    outAsync->invoke(iceC_Test_TestIntf_SBSKnownDerivedAsSBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<SBase> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_SBSKnownDerivedAsSBSKnownDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::SBSKnownDerived>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_SBSKnownDerivedAsSBSKnownDerived_name);
    outAsync->invoke(iceC_Test_TestIntf_SBSKnownDerivedAsSBSKnownDerived_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<SBSKnownDerived> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_SBSUnknownDerivedAsSBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::SBase>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_SBSUnknownDerivedAsSBase_name);
    outAsync->invoke(iceC_Test_TestIntf_SBSUnknownDerivedAsSBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<SBase> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_SBSUnknownDerivedAsSBaseCompact(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::SBase>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_SBSUnknownDerivedAsSBaseCompact_name);
    outAsync->invoke(iceC_Test_TestIntf_SBSUnknownDerivedAsSBaseCompact_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::CompactFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<SBase> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_SUnknownAsObject(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::Value>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_SUnknownAsObject_name);
    outAsync->invoke(iceC_Test_TestIntf_SUnknownAsObject_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<::Ice::Value> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_checkSUnknown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<::Ice::Value>& iceP_o, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_checkSUnknown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_o);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_oneElementCycle(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_oneElementCycle_name);
    outAsync->invoke(iceC_Test_TestIntf_oneElementCycle_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_twoElementCycle(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_twoElementCycle_name);
    outAsync->invoke(iceC_Test_TestIntf_twoElementCycle_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_D1AsB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_D1AsB_name);
    outAsync->invoke(iceC_Test_TestIntf_D1AsB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_D1AsD1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::D1>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_D1AsD1_name);
    outAsync->invoke(iceC_Test_TestIntf_D1AsD1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<D1> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_D2AsB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_D2AsB_name);
    outAsync->invoke(iceC_Test_TestIntf_D2AsB_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_paramTest1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<TestIntf::ParamTest1Result>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_paramTest1_name);
    outAsync->invoke(iceC_Test_TestIntf_paramTest1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            TestIntf::ParamTest1Result v;
            istr->readAll(v.p1, v.p2);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_paramTest2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<TestIntf::ParamTest2Result>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_paramTest2_name);
    outAsync->invoke(iceC_Test_TestIntf_paramTest2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            TestIntf::ParamTest2Result v;
            istr->readAll(v.p2, v.p1);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_paramTest3(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<TestIntf::ParamTest3Result>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_paramTest3_name);
    outAsync->invoke(iceC_Test_TestIntf_paramTest3_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            TestIntf::ParamTest3Result v;
            istr->readAll(v.p1, v.p2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_paramTest4(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<TestIntf::ParamTest4Result>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_paramTest4_name);
    outAsync->invoke(iceC_Test_TestIntf_paramTest4_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            TestIntf::ParamTest4Result v;
            istr->readAll(v.p, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_returnTest1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<TestIntf::ReturnTest1Result>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_returnTest1_name);
    outAsync->invoke(iceC_Test_TestIntf_returnTest1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            TestIntf::ReturnTest1Result v;
            istr->readAll(v.p1, v.p2, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_returnTest2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<TestIntf::ReturnTest2Result>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_returnTest2_name);
    outAsync->invoke(iceC_Test_TestIntf_returnTest2_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            TestIntf::ReturnTest2Result v;
            istr->readAll(v.p2, v.p1, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_returnTest3(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::B>>>& outAsync, const ::std::shared_ptr<B>& iceP_p1, const ::std::shared_ptr<B>& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_returnTest3_name);
    outAsync->invoke(iceC_Test_TestIntf_returnTest3_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<B> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_sequenceTest(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::SS3>>& outAsync, const ::std::shared_ptr<SS1>& iceP_p1, const ::std::shared_ptr<SS2>& iceP_p2, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_sequenceTest_name);
    outAsync->invoke(iceC_Test_TestIntf_sequenceTest_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1, iceP_p2);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            SS3 ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_dictionaryTest(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<TestIntf::DictionaryTestResult>>& outAsync, const BDict& iceP_bin, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_dictionaryTest_name);
    outAsync->invoke(iceC_Test_TestIntf_dictionaryTest_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_bin);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            TestIntf::DictionaryTestResult v;
            istr->readAll(v.bout, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_exchangePBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::PBase>>>& outAsync, const ::std::shared_ptr<PBase>& iceP_pb, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_exchangePBase_name);
    outAsync->invoke(iceC_Test_TestIntf_exchangePBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pb);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<PBase> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_PBSUnknownAsPreserved(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Preserved>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_PBSUnknownAsPreserved_name);
    outAsync->invoke(iceC_Test_TestIntf_PBSUnknownAsPreserved_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<Preserved> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_checkPBSUnknown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<Preserved>& iceP_p, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_checkPBSUnknown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_PBSUnknownAsPreservedWithGraph(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Preserved>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_PBSUnknownAsPreservedWithGraph_name);
    outAsync->invoke(iceC_Test_TestIntf_PBSUnknownAsPreservedWithGraph_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<Preserved> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_checkPBSUnknownWithGraph(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<Preserved>& iceP_p, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_checkPBSUnknownWithGraph_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_PBSUnknown2AsPreservedWithGraph(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Preserved>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_PBSUnknown2AsPreservedWithGraph_name);
    outAsync->invoke(iceC_Test_TestIntf_PBSUnknown2AsPreservedWithGraph_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<Preserved> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_checkPBSUnknown2WithGraph(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<Preserved>& iceP_p, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_checkPBSUnknown2WithGraph_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_exchangePNode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::PNode>>>& outAsync, const ::std::shared_ptr<PNode>& iceP_pn, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_exchangePNode_name);
    outAsync->invoke(iceC_Test_TestIntf_exchangePNode_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pn);
            ostr->writePendingValues();
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<PNode> ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_throwBaseAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_throwBaseAsBase_name);
    outAsync->invoke(iceC_Test_TestIntf_throwBaseAsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BaseException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_throwDerivedAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_throwDerivedAsBase_name);
    outAsync->invoke(iceC_Test_TestIntf_throwDerivedAsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BaseException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_throwDerivedAsDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_throwDerivedAsDerived_name);
    outAsync->invoke(iceC_Test_TestIntf_throwDerivedAsDerived_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const DerivedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_throwUnknownDerivedAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_throwUnknownDerivedAsBase_name);
    outAsync->invoke(iceC_Test_TestIntf_throwUnknownDerivedAsBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BaseException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_throwPreservedException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_throwPreservedException_name);
    outAsync->invoke(iceC_Test_TestIntf_throwPreservedException_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const PreservedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_useForward(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::Forward>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_TestIntf_useForward_name);
    outAsync->invoke(iceC_Test_TestIntf_useForward_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::std::shared_ptr<Forward> iceP_f;
            istr->readAll(iceP_f);
            istr->readPendingValues();
            return iceP_f;
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::TestIntfPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_TestIntf_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::SlicedFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
Test::TestIntfPrx::ice_staticId()
{
    return TestIntf::ice_staticId();
}

namespace Ice
{
}
