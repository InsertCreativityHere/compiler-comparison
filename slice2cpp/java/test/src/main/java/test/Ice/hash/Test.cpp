// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{
    const ::IceInternal::FactoryTableInit iceC_factoryTableInit;
    const ::IceInternal::DefaultValueFactoryInit<::Test::Pen> iceC_Test_Pen_init("::Test::Pen");
}

void
Test::PointF::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "x = ", this->x);
    Ice::print(os << ", y = ", this->y);
    Ice::print(os << ", z = ", this->z);
}

::std::ostream&
Test::operator<<(::std::ostream& os, const ::Test::PointF& value)
{
    os << "Test::PointF{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
Test::PointD::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "x = ", this->x);
    Ice::print(os << ", y = ", this->y);
    Ice::print(os << ", z = ", this->z);
}

::std::ostream&
Test::operator<<(::std::ostream& os, const ::Test::PointD& value)
{
    os << "Test::PointD{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
Test::Point::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "x = ", this->x);
    Ice::print(os << ", y = ", this->y);
}

::std::ostream&
Test::operator<<(::std::ostream& os, const ::Test::Point& value)
{
    os << "Test::Point{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
Test::Polyline::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "vertices = ", this->vertices);
}

::std::ostream&
Test::operator<<(::std::ostream& os, const ::Test::Polyline& value)
{
    os << "Test::Polyline{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
Test::Color::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "r = ", this->r);
    Ice::print(os << ", g = ", this->g);
    Ice::print(os << ", b = ", this->b);
    Ice::print(os << ", a = ", this->a);
}

::std::ostream&
Test::operator<<(::std::ostream& os, const ::Test::Color& value)
{
    os << "Test::Color{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
Test::ColorPalette::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "colors = ", this->colors);
}

::std::ostream&
Test::operator<<(::std::ostream& os, const ::Test::ColorPalette& value)
{
    os << "Test::ColorPalette{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
Test::Pen::ice_staticId() noexcept
{
    return "::Test::Pen";
}

const char*
Test::Pen::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::Pen::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "thickness = ", this->thickness);
    Ice::print(os << ", color = ", this->color);
}

::Ice::ValuePtr
Test::Pen::_iceCloneImpl() const
{
    return CloneEnabler<Pen>::clone(*this);
}

void
Test::Pen::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->thickness, this->color);
    ostr->endSlice();
}

void
Test::Pen::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->thickness, this->color);
    istr->endSlice();
}

void
Test::Draw::ice_printFields(::std::ostream& os) const
{
    Ice::print(os << "backgroundColor = ", this->backgroundColor);
    Ice::print(os << ", pen = ", this->pen);
    Ice::print(os << ", shared = ", this->shared);
}

::std::ostream&
Test::operator<<(::std::ostream& os, const ::Test::Draw& value)
{
    os << "Test::Draw{";
    value.ice_printFields(os);
    os << '}';
    return os;
}
