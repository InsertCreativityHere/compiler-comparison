//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::Pen> iceC_Test_Pen_init("::Test::Pen");

}

Test::Pen::~Pen()
{
}

const ::std::string&
Test::Pen::ice_staticId()
{
    static const ::std::string typeId = "::Test::Pen";
    return typeId;
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

}

Test::Pen::~Pen()
{
}
::Ice::ValuePtr
Test::Pen::ice_clone() const
{
    ::Ice::Value* p = new Pen(*this);
    return p;
}

std::string
Test::Pen::ice_id() const
{
    return ice_staticId();
}

const ::std::string&
Test::Pen::ice_staticId()
{
    static const ::std::string typeId = "::Test::Pen";
    return typeId;
}

/// \cond STREAM
void
Test::Pen::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Pen, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Pen::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Pen, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Pen> iceC_Test_Pen_init("::Test::Pen");
}

::Ice::ValueFactoryPtr
Test::Pen::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Pen::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchValuePtr(PenPtr& handle, const ::Ice::ValuePtr& v)
{
    handle = PenPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Pen::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
