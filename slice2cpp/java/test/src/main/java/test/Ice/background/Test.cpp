// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

void
Test::BackgroundPrx::op(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &BackgroundPrx::_iceI_op, context).get();
}

std::future<void>
Test::BackgroundPrx::opAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &BackgroundPrx::_iceI_op, context);
}

std::function<void()>
Test::BackgroundPrx::opAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::BackgroundPrx::_iceI_op, context);
}

void
Test::BackgroundPrx::_iceI_op(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "op";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

void
Test::BackgroundPrx::opWithPayload(const ::Ice::ByteSeq& iceP_seq, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &BackgroundPrx::_iceI_opWithPayload, iceP_seq, context).get();
}

std::future<void>
Test::BackgroundPrx::opWithPayloadAsync(const ::Ice::ByteSeq& iceP_seq, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &BackgroundPrx::_iceI_opWithPayload, iceP_seq, context);
}

std::function<void()>
Test::BackgroundPrx::opWithPayloadAsync(const ::Ice::ByteSeq& iceP_seq, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::BackgroundPrx::_iceI_opWithPayload, iceP_seq, context);
}

void
Test::BackgroundPrx::_iceI_opWithPayload(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::ByteSeq& iceP_seq, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opWithPayload";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_seq);
        },
        nullptr);
}

void
Test::BackgroundPrx::shutdown(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &BackgroundPrx::_iceI_shutdown, context).get();
}

std::future<void>
Test::BackgroundPrx::shutdownAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &BackgroundPrx::_iceI_shutdown, context);
}

std::function<void()>
Test::BackgroundPrx::shutdownAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::BackgroundPrx::_iceI_shutdown, context);
}

void
Test::BackgroundPrx::_iceI_shutdown(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

Test::BackgroundPrx::~BackgroundPrx() = default;

const char*
Test::BackgroundPrx::ice_staticId() noexcept
{
    return "::Test::Background";
}

void
Test::BackgroundControllerPrx::pauseCall(std::string_view iceP_call, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &BackgroundControllerPrx::_iceI_pauseCall, iceP_call, context).get();
}

std::future<void>
Test::BackgroundControllerPrx::pauseCallAsync(std::string_view iceP_call, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &BackgroundControllerPrx::_iceI_pauseCall, iceP_call, context);
}

std::function<void()>
Test::BackgroundControllerPrx::pauseCallAsync(std::string_view iceP_call, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::BackgroundControllerPrx::_iceI_pauseCall, iceP_call, context);
}

void
Test::BackgroundControllerPrx::_iceI_pauseCall(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, std::string_view iceP_call, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "pauseCall";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_call);
        },
        nullptr);
}

void
Test::BackgroundControllerPrx::resumeCall(std::string_view iceP_call, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &BackgroundControllerPrx::_iceI_resumeCall, iceP_call, context).get();
}

std::future<void>
Test::BackgroundControllerPrx::resumeCallAsync(std::string_view iceP_call, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &BackgroundControllerPrx::_iceI_resumeCall, iceP_call, context);
}

std::function<void()>
Test::BackgroundControllerPrx::resumeCallAsync(std::string_view iceP_call, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::BackgroundControllerPrx::_iceI_resumeCall, iceP_call, context);
}

void
Test::BackgroundControllerPrx::_iceI_resumeCall(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, std::string_view iceP_call, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "resumeCall";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_call);
        },
        nullptr);
}

void
Test::BackgroundControllerPrx::holdAdapter(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &BackgroundControllerPrx::_iceI_holdAdapter, context).get();
}

std::future<void>
Test::BackgroundControllerPrx::holdAdapterAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &BackgroundControllerPrx::_iceI_holdAdapter, context);
}

std::function<void()>
Test::BackgroundControllerPrx::holdAdapterAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::BackgroundControllerPrx::_iceI_holdAdapter, context);
}

void
Test::BackgroundControllerPrx::_iceI_holdAdapter(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "holdAdapter";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

void
Test::BackgroundControllerPrx::resumeAdapter(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &BackgroundControllerPrx::_iceI_resumeAdapter, context).get();
}

std::future<void>
Test::BackgroundControllerPrx::resumeAdapterAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &BackgroundControllerPrx::_iceI_resumeAdapter, context);
}

std::function<void()>
Test::BackgroundControllerPrx::resumeAdapterAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::BackgroundControllerPrx::_iceI_resumeAdapter, context);
}

void
Test::BackgroundControllerPrx::_iceI_resumeAdapter(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "resumeAdapter";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

void
Test::BackgroundControllerPrx::initializeSocketStatus(std::int32_t iceP_status, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &BackgroundControllerPrx::_iceI_initializeSocketStatus, iceP_status, context).get();
}

std::future<void>
Test::BackgroundControllerPrx::initializeSocketStatusAsync(std::int32_t iceP_status, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &BackgroundControllerPrx::_iceI_initializeSocketStatus, iceP_status, context);
}

std::function<void()>
Test::BackgroundControllerPrx::initializeSocketStatusAsync(std::int32_t iceP_status, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::BackgroundControllerPrx::_iceI_initializeSocketStatus, iceP_status, context);
}

void
Test::BackgroundControllerPrx::_iceI_initializeSocketStatus(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, std::int32_t iceP_status, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "initializeSocketStatus";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_status);
        },
        nullptr);
}

void
Test::BackgroundControllerPrx::initializeException(bool iceP_enable, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &BackgroundControllerPrx::_iceI_initializeException, iceP_enable, context).get();
}

std::future<void>
Test::BackgroundControllerPrx::initializeExceptionAsync(bool iceP_enable, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &BackgroundControllerPrx::_iceI_initializeException, iceP_enable, context);
}

std::function<void()>
Test::BackgroundControllerPrx::initializeExceptionAsync(bool iceP_enable, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::BackgroundControllerPrx::_iceI_initializeException, iceP_enable, context);
}

void
Test::BackgroundControllerPrx::_iceI_initializeException(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_enable, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "initializeException";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_enable);
        },
        nullptr);
}

void
Test::BackgroundControllerPrx::readReady(bool iceP_enable, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &BackgroundControllerPrx::_iceI_readReady, iceP_enable, context).get();
}

std::future<void>
Test::BackgroundControllerPrx::readReadyAsync(bool iceP_enable, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &BackgroundControllerPrx::_iceI_readReady, iceP_enable, context);
}

std::function<void()>
Test::BackgroundControllerPrx::readReadyAsync(bool iceP_enable, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::BackgroundControllerPrx::_iceI_readReady, iceP_enable, context);
}

void
Test::BackgroundControllerPrx::_iceI_readReady(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_enable, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "readReady";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_enable);
        },
        nullptr);
}

void
Test::BackgroundControllerPrx::readException(bool iceP_enable, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &BackgroundControllerPrx::_iceI_readException, iceP_enable, context).get();
}

std::future<void>
Test::BackgroundControllerPrx::readExceptionAsync(bool iceP_enable, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &BackgroundControllerPrx::_iceI_readException, iceP_enable, context);
}

std::function<void()>
Test::BackgroundControllerPrx::readExceptionAsync(bool iceP_enable, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::BackgroundControllerPrx::_iceI_readException, iceP_enable, context);
}

void
Test::BackgroundControllerPrx::_iceI_readException(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_enable, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "readException";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_enable);
        },
        nullptr);
}

void
Test::BackgroundControllerPrx::writeReady(bool iceP_enable, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &BackgroundControllerPrx::_iceI_writeReady, iceP_enable, context).get();
}

std::future<void>
Test::BackgroundControllerPrx::writeReadyAsync(bool iceP_enable, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &BackgroundControllerPrx::_iceI_writeReady, iceP_enable, context);
}

std::function<void()>
Test::BackgroundControllerPrx::writeReadyAsync(bool iceP_enable, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::BackgroundControllerPrx::_iceI_writeReady, iceP_enable, context);
}

void
Test::BackgroundControllerPrx::_iceI_writeReady(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_enable, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "writeReady";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_enable);
        },
        nullptr);
}

void
Test::BackgroundControllerPrx::writeException(bool iceP_enable, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &BackgroundControllerPrx::_iceI_writeException, iceP_enable, context).get();
}

std::future<void>
Test::BackgroundControllerPrx::writeExceptionAsync(bool iceP_enable, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &BackgroundControllerPrx::_iceI_writeException, iceP_enable, context);
}

std::function<void()>
Test::BackgroundControllerPrx::writeExceptionAsync(bool iceP_enable, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::BackgroundControllerPrx::_iceI_writeException, iceP_enable, context);
}

void
Test::BackgroundControllerPrx::_iceI_writeException(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_enable, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "writeException";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_enable);
        },
        nullptr);
}

void
Test::BackgroundControllerPrx::buffered(bool iceP_enable, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &BackgroundControllerPrx::_iceI_buffered, iceP_enable, context).get();
}

std::future<void>
Test::BackgroundControllerPrx::bufferedAsync(bool iceP_enable, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &BackgroundControllerPrx::_iceI_buffered, iceP_enable, context);
}

std::function<void()>
Test::BackgroundControllerPrx::bufferedAsync(bool iceP_enable, std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::BackgroundControllerPrx::_iceI_buffered, iceP_enable, context);
}

void
Test::BackgroundControllerPrx::_iceI_buffered(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_enable, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "buffered";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_enable);
        },
        nullptr);
}

Test::BackgroundControllerPrx::~BackgroundControllerPrx() = default;

const char*
Test::BackgroundControllerPrx::ice_staticId() noexcept
{
    return "::Test::BackgroundController";
}

std::vector<std::string>
Test::Background::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::Test::Background"};
    return allTypeIds;
}

std::string
Test::Background::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
Test::Background::ice_staticId() noexcept
{
    return "::Test::Background";
}

/// \cond INTERNAL
void
Test::Background::_iceD_op(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->op(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Background::_iceD_opWithPayload(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    ::Ice::ByteSeq iceP_seq;
    istr->readAll(iceP_seq);
    istr->endEncapsulation();
    this->opWithPayload(std::move(iceP_seq), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Background::_iceD_shutdown(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

void
Test::Background::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 7> allOperations{"ice_id", "ice_ids", "ice_isA", "ice_ping", "op", "opWithPayload", "shutdown"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation);
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_op(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_opWithPayload(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_shutdown(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}

std::vector<std::string>
Test::BackgroundController::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::Test::BackgroundController"};
    return allTypeIds;
}

std::string
Test::BackgroundController::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
Test::BackgroundController::ice_staticId() noexcept
{
    return "::Test::BackgroundController";
}

/// \cond INTERNAL
void
Test::BackgroundController::_iceD_pauseCall(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::string iceP_call;
    istr->readAll(iceP_call);
    istr->endEncapsulation();
    this->pauseCall(std::move(iceP_call), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundController::_iceD_resumeCall(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::string iceP_call;
    istr->readAll(iceP_call);
    istr->endEncapsulation();
    this->resumeCall(std::move(iceP_call), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundController::_iceD_holdAdapter(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->holdAdapter(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundController::_iceD_resumeAdapter(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->resumeAdapter(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundController::_iceD_initializeSocketStatus(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::int32_t iceP_status;
    istr->readAll(iceP_status);
    istr->endEncapsulation();
    this->initializeSocketStatus(iceP_status, request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundController::_iceD_initializeException(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    bool iceP_enable;
    istr->readAll(iceP_enable);
    istr->endEncapsulation();
    this->initializeException(iceP_enable, request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundController::_iceD_readReady(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    bool iceP_enable;
    istr->readAll(iceP_enable);
    istr->endEncapsulation();
    this->readReady(iceP_enable, request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundController::_iceD_readException(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    bool iceP_enable;
    istr->readAll(iceP_enable);
    istr->endEncapsulation();
    this->readException(iceP_enable, request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundController::_iceD_writeReady(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    bool iceP_enable;
    istr->readAll(iceP_enable);
    istr->endEncapsulation();
    this->writeReady(iceP_enable, request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundController::_iceD_writeException(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    bool iceP_enable;
    istr->readAll(iceP_enable);
    istr->endEncapsulation();
    this->writeException(iceP_enable, request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::BackgroundController::_iceD_buffered(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    bool iceP_enable;
    istr->readAll(iceP_enable);
    istr->endEncapsulation();
    this->buffered(iceP_enable, request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

void
Test::BackgroundController::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 15> allOperations{"buffered", "holdAdapter", "ice_id", "ice_ids", "ice_isA", "ice_ping", "initializeException", "initializeSocketStatus", "pauseCall", "readException", "readReady", "resumeAdapter", "resumeCall", "writeException", "writeReady"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation);
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_buffered(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_holdAdapter(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_initializeException(request, std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_initializeSocketStatus(request, std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_pauseCall(request, std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_readException(request, std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_readReady(request, std::move(sendResponse));
            break;
        }
        case 11:
        {
            _iceD_resumeAdapter(request, std::move(sendResponse));
            break;
        }
        case 12:
        {
            _iceD_resumeCall(request, std::move(sendResponse));
            break;
        }
        case 13:
        {
            _iceD_writeException(request, std::move(sendResponse));
            break;
        }
        case 14:
        {
            _iceD_writeReady(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
