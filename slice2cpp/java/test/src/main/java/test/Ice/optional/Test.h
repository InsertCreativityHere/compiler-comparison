//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Test
{

class OneOptional;
class MyInterface;
class MyInterfacePrx;
class MultiOptional;
class A;
class B;
class C;
class WD;
class OptionalWithCustom;
class E;
class F;
class G1;
class G2;
class G;
class Recursive;
class Initial;
class InitialPrx;

}

namespace Test
{

enum class MyEnum : unsigned char
{
    MyEnumMember
};

struct SmallStruct
{
    ::Ice::Byte m;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Byte&> ice_tuple() const
    {
        return std::tie(m);
    }
};

struct FixedStruct
{
    int m;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(m);
    }
};

struct VarStruct
{
    ::std::string m;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(m);
    }
};

struct ClassVarStruct
{
    int a;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(a);
    }
};

using ByteSeq = ::std::vector<::Ice::Byte>;

using BoolSeq = ::std::vector<bool>;

using ShortSeq = ::std::vector<short>;

using IntSeq = ::std::vector<int>;

using LongSeq = ::std::vector<long long int>;

using FloatSeq = ::std::vector<float>;

using DoubleSeq = ::std::vector<double>;

using StringSeq = ::std::vector<::std::string>;

using MyEnumSeq = ::std::vector<MyEnum>;

using SmallStructSeq = ::std::vector<SmallStruct>;

using SmallStructList = ::std::vector<SmallStruct>;

using FixedStructSeq = ::std::vector<FixedStruct>;

using FixedStructList = ::std::vector<FixedStruct>;

using VarStructSeq = ::std::vector<VarStruct>;

using OneOptionalSeq = ::std::vector<::std::shared_ptr<OneOptional>>;

using MyInterfacePrxSeq = ::std::vector<::std::shared_ptr<MyInterfacePrx>>;

using Serializable = ::std::vector<::Ice::Byte>;

using IntIntDict = ::std::map<int, int>;

using StringIntDict = ::std::map<::std::string, int>;

using IntEnumDict = ::std::map<int, MyEnum>;

using IntFixedStructDict = ::std::map<int, FixedStruct>;

using IntVarStructDict = ::std::map<int, VarStruct>;

using IntOneOptionalDict = ::std::map<int, ::std::shared_ptr<OneOptional>>;

using IntMyInterfacePrxDict = ::std::map<int, ::std::shared_ptr<MyInterfacePrx>>;

class OptionalException : public ::Ice::UserExceptionHelper<OptionalException, ::Ice::UserException>
{
public:

    virtual ~OptionalException();

    OptionalException(const OptionalException&) = default;

    OptionalException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    OptionalException(bool req, const std::optional<int>& a, const std::optional<::std::string>& b, const std::optional<::std::shared_ptr<OneOptional>>& o) :
        req(req),
        a(a),
        b(b),
        o(o)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const std::optional<int>&, const std::optional<::std::string>&, const std::optional<::std::shared_ptr<::Test::OneOptional>>&> ice_tuple() const
    {
        return std::tie(req, a, b, o);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    bool req = false;
    std::optional<int> a = 5;
    std::optional<::std::string> b;
    std::optional<::std::shared_ptr<::Test::OneOptional>> o;
};

/// \cond INTERNAL
static OptionalException _iceS_OptionalException_init;
/// \endcond

class DerivedException : public ::Ice::UserExceptionHelper<DerivedException, OptionalException>
{
public:

    virtual ~DerivedException();

    DerivedException(const DerivedException&) = default;

    DerivedException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    DerivedException(bool req, const std::optional<int>& a, const std::optional<::std::string>& b, const std::optional<::std::shared_ptr<OneOptional>>& o, const ::std::string& d1, const std::optional<::std::string>& ss, const std::optional<::std::shared_ptr<OneOptional>>& o2, const ::std::string& d2) :
        ::Ice::UserExceptionHelper<DerivedException, OptionalException>(req, a, b, o),
        d1(d1),
        ss(ss),
        o2(o2),
        d2(d2)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const std::optional<int>&, const std::optional<::std::string>&, const std::optional<::std::shared_ptr<::Test::OneOptional>>&, const ::std::string&, const std::optional<::std::string>&, const std::optional<::std::shared_ptr<::Test::OneOptional>>&, const ::std::string&> ice_tuple() const
    {
        return std::tie(req, a, b, o, d1, ss, o2, d2);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string d1;
    std::optional<::std::string> ss{"test"};
    std::optional<::std::shared_ptr<::Test::OneOptional>> o2;
    ::std::string d2;
};

class RequiredException : public ::Ice::UserExceptionHelper<RequiredException, OptionalException>
{
public:

    virtual ~RequiredException();

    RequiredException(const RequiredException&) = default;

    RequiredException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    RequiredException(bool req, const std::optional<int>& a, const std::optional<::std::string>& b, const std::optional<::std::shared_ptr<OneOptional>>& o, const ::std::string& ss, const ::std::shared_ptr<OneOptional>& o2) :
        ::Ice::UserExceptionHelper<RequiredException, OptionalException>(req, a, b, o),
        ss(ss),
        o2(o2)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const bool&, const std::optional<int>&, const std::optional<::std::string>&, const std::optional<::std::shared_ptr<::Test::OneOptional>>&, const ::std::string&, const ::std::shared_ptr<::Test::OneOptional>&> ice_tuple() const
    {
        return std::tie(req, a, b, o, ss, o2);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /// \cond STREAM
    virtual bool _usesClasses() const override;
    /// \endcond

    ::std::string ss = "test";
    ::std::shared_ptr<::Test::OneOptional> o2;
};

using RecursiveSeq = ::std::vector<::std::shared_ptr<Recursive>>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Test
{

class MyInterface : public virtual ::Ice::Object
{
public:

    using ProxyType = MyInterfacePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void op(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class Initial : public virtual ::Ice::Object
{
public:

    using ProxyType = InitialPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<::Ice::Value> pingPong(::std::shared_ptr<::Ice::Value> o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_pingPong(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opOptionalException(std::optional<int> a, std::optional<::std::string> b, std::optional<::std::shared_ptr<OneOptional>> o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opOptionalException(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opDerivedException(std::optional<int> a, std::optional<::std::string> b, std::optional<::std::shared_ptr<OneOptional>> o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opDerivedException(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opRequiredException(std::optional<int> a, std::optional<::std::string> b, std::optional<::std::shared_ptr<OneOptional>> o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opRequiredException(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opByte.
     */
    struct OpByteResult
    {
        std::optional<::Ice::Byte> returnValue;
        std::optional<::Ice::Byte> p3;
    };

    virtual std::optional<::Ice::Byte> opByte(std::optional<::Ice::Byte> p1, std::optional<::Ice::Byte>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opByte(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opByteReq.
     */
    struct OpByteReqResult
    {
        std::optional<::Ice::Byte> returnValue;
        std::optional<::Ice::Byte> p3;
    };

    virtual std::optional<::Ice::Byte> opByteReq(std::optional<::Ice::Byte> p1, std::optional<::Ice::Byte>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opByteReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opBool.
     */
    struct OpBoolResult
    {
        std::optional<bool> returnValue;
        std::optional<bool> p3;
    };

    virtual std::optional<bool> opBool(std::optional<bool> p1, std::optional<bool>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opBool(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opBoolReq.
     */
    struct OpBoolReqResult
    {
        std::optional<bool> returnValue;
        std::optional<bool> p3;
    };

    virtual std::optional<bool> opBoolReq(std::optional<bool> p1, std::optional<bool>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opBoolReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opShort.
     */
    struct OpShortResult
    {
        std::optional<short> returnValue;
        std::optional<short> p3;
    };

    virtual std::optional<short> opShort(std::optional<short> p1, std::optional<short>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opShort(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opShortReq.
     */
    struct OpShortReqResult
    {
        std::optional<short> returnValue;
        std::optional<short> p3;
    };

    virtual std::optional<short> opShortReq(std::optional<short> p1, std::optional<short>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opShortReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opInt.
     */
    struct OpIntResult
    {
        std::optional<int> returnValue;
        std::optional<int> p3;
    };

    virtual std::optional<int> opInt(std::optional<int> p1, std::optional<int>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opInt(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opIntReq.
     */
    struct OpIntReqResult
    {
        std::optional<int> returnValue;
        std::optional<int> p3;
    };

    virtual std::optional<int> opIntReq(std::optional<int> p1, std::optional<int>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opLong.
     */
    struct OpLongResult
    {
        std::optional<long long int> returnValue;
        std::optional<long long int> p3;
    };

    virtual std::optional<long long int> opLong(std::optional<long long int> p1, std::optional<long long int>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opLong(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opLongReq.
     */
    struct OpLongReqResult
    {
        std::optional<long long int> returnValue;
        std::optional<long long int> p3;
    };

    virtual std::optional<long long int> opLongReq(std::optional<long long int> p1, std::optional<long long int>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opLongReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opFloat.
     */
    struct OpFloatResult
    {
        std::optional<float> returnValue;
        std::optional<float> p3;
    };

    virtual std::optional<float> opFloat(std::optional<float> p1, std::optional<float>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opFloat(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opFloatReq.
     */
    struct OpFloatReqResult
    {
        std::optional<float> returnValue;
        std::optional<float> p3;
    };

    virtual std::optional<float> opFloatReq(std::optional<float> p1, std::optional<float>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opFloatReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opDouble.
     */
    struct OpDoubleResult
    {
        std::optional<double> returnValue;
        std::optional<double> p3;
    };

    virtual std::optional<double> opDouble(std::optional<double> p1, std::optional<double>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opDouble(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opDoubleReq.
     */
    struct OpDoubleReqResult
    {
        std::optional<double> returnValue;
        std::optional<double> p3;
    };

    virtual std::optional<double> opDoubleReq(std::optional<double> p1, std::optional<double>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opDoubleReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opString.
     */
    struct OpStringResult
    {
        std::optional<::std::string> returnValue;
        std::optional<::std::string> p3;
    };

    virtual std::optional<::std::string> opString(std::optional<::std::string> p1, std::optional<::std::string>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opString(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opStringReq.
     */
    struct OpStringReqResult
    {
        std::optional<::std::string> returnValue;
        std::optional<::std::string> p3;
    };

    virtual std::optional<::std::string> opStringReq(std::optional<::std::string> p1, std::optional<::std::string>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opStringReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opMyEnum.
     */
    struct OpMyEnumResult
    {
        std::optional<MyEnum> returnValue;
        std::optional<MyEnum> p3;
    };

    virtual std::optional<MyEnum> opMyEnum(std::optional<MyEnum> p1, std::optional<MyEnum>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opMyEnum(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opMyEnumReq.
     */
    struct OpMyEnumReqResult
    {
        std::optional<MyEnum> returnValue;
        std::optional<MyEnum> p3;
    };

    virtual std::optional<MyEnum> opMyEnumReq(std::optional<MyEnum> p1, std::optional<MyEnum>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opMyEnumReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSmallStruct.
     */
    struct OpSmallStructResult
    {
        std::optional<SmallStruct> returnValue;
        std::optional<SmallStruct> p3;
    };

    virtual std::optional<SmallStruct> opSmallStruct(std::optional<SmallStruct> p1, std::optional<SmallStruct>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSmallStruct(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSmallStructReq.
     */
    struct OpSmallStructReqResult
    {
        std::optional<SmallStruct> returnValue;
        std::optional<SmallStruct> p3;
    };

    virtual std::optional<SmallStruct> opSmallStructReq(std::optional<SmallStruct> p1, std::optional<SmallStruct>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSmallStructReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opFixedStruct.
     */
    struct OpFixedStructResult
    {
        std::optional<FixedStruct> returnValue;
        std::optional<FixedStruct> p3;
    };

    virtual std::optional<FixedStruct> opFixedStruct(std::optional<FixedStruct> p1, std::optional<FixedStruct>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opFixedStruct(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opFixedStructReq.
     */
    struct OpFixedStructReqResult
    {
        std::optional<FixedStruct> returnValue;
        std::optional<FixedStruct> p3;
    };

    virtual std::optional<FixedStruct> opFixedStructReq(std::optional<FixedStruct> p1, std::optional<FixedStruct>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opFixedStructReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opVarStruct.
     */
    struct OpVarStructResult
    {
        std::optional<VarStruct> returnValue;
        std::optional<VarStruct> p3;
    };

    virtual std::optional<VarStruct> opVarStruct(std::optional<VarStruct> p1, std::optional<VarStruct>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opVarStruct(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opVarStructReq.
     */
    struct OpVarStructReqResult
    {
        std::optional<VarStruct> returnValue;
        std::optional<VarStruct> p3;
    };

    virtual std::optional<VarStruct> opVarStructReq(std::optional<VarStruct> p1, std::optional<VarStruct>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opVarStructReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opOneOptional.
     */
    struct OpOneOptionalResult
    {
        std::optional<::std::shared_ptr<OneOptional>> returnValue;
        std::optional<::std::shared_ptr<OneOptional>> p3;
    };

    virtual std::optional<::std::shared_ptr<OneOptional>> opOneOptional(std::optional<::std::shared_ptr<OneOptional>> p1, std::optional<::std::shared_ptr<OneOptional>>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opOneOptional(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opOneOptionalReq.
     */
    struct OpOneOptionalReqResult
    {
        std::optional<::std::shared_ptr<OneOptional>> returnValue;
        std::optional<::std::shared_ptr<OneOptional>> p3;
    };

    virtual std::optional<::std::shared_ptr<OneOptional>> opOneOptionalReq(std::optional<::std::shared_ptr<OneOptional>> p1, std::optional<::std::shared_ptr<OneOptional>>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opOneOptionalReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opMyInterfaceProxy.
     */
    struct OpMyInterfaceProxyResult
    {
        std::optional<::std::shared_ptr<MyInterfacePrx>> returnValue;
        std::optional<::std::shared_ptr<MyInterfacePrx>> p3;
    };

    virtual std::optional<::std::shared_ptr<MyInterfacePrx>> opMyInterfaceProxy(std::optional<::std::shared_ptr<MyInterfacePrx>> p1, std::optional<::std::shared_ptr<MyInterfacePrx>>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opMyInterfaceProxy(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opMyInterfaceProxyReq.
     */
    struct OpMyInterfaceProxyReqResult
    {
        std::optional<::std::shared_ptr<MyInterfacePrx>> returnValue;
        std::optional<::std::shared_ptr<MyInterfacePrx>> p3;
    };

    virtual std::optional<::std::shared_ptr<MyInterfacePrx>> opMyInterfaceProxyReq(std::optional<::std::shared_ptr<MyInterfacePrx>> p1, std::optional<::std::shared_ptr<MyInterfacePrx>>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opMyInterfaceProxyReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opByteSeq.
     */
    struct OpByteSeqResult
    {
        std::optional<ByteSeq> returnValue;
        std::optional<ByteSeq> p3;
    };

    virtual std::optional<ByteSeq> opByteSeq(std::optional<ByteSeq> p1, std::optional<ByteSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opByteSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opByteSeqReq.
     */
    struct OpByteSeqReqResult
    {
        std::optional<ByteSeq> returnValue;
        std::optional<ByteSeq> p3;
    };

    virtual std::optional<ByteSeq> opByteSeqReq(std::optional<ByteSeq> p1, std::optional<ByteSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opByteSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opBoolSeq.
     */
    struct OpBoolSeqResult
    {
        std::optional<BoolSeq> returnValue;
        std::optional<BoolSeq> p3;
    };

    virtual std::optional<BoolSeq> opBoolSeq(std::optional<BoolSeq> p1, std::optional<BoolSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opBoolSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opBoolSeqReq.
     */
    struct OpBoolSeqReqResult
    {
        std::optional<BoolSeq> returnValue;
        std::optional<BoolSeq> p3;
    };

    virtual std::optional<BoolSeq> opBoolSeqReq(std::optional<BoolSeq> p1, std::optional<BoolSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opBoolSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opShortSeq.
     */
    struct OpShortSeqResult
    {
        std::optional<ShortSeq> returnValue;
        std::optional<ShortSeq> p3;
    };

    virtual std::optional<ShortSeq> opShortSeq(std::optional<ShortSeq> p1, std::optional<ShortSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opShortSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opShortSeqReq.
     */
    struct OpShortSeqReqResult
    {
        std::optional<ShortSeq> returnValue;
        std::optional<ShortSeq> p3;
    };

    virtual std::optional<ShortSeq> opShortSeqReq(std::optional<ShortSeq> p1, std::optional<ShortSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opShortSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opIntSeq.
     */
    struct OpIntSeqResult
    {
        std::optional<IntSeq> returnValue;
        std::optional<IntSeq> p3;
    };

    virtual std::optional<IntSeq> opIntSeq(std::optional<IntSeq> p1, std::optional<IntSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opIntSeqReq.
     */
    struct OpIntSeqReqResult
    {
        std::optional<IntSeq> returnValue;
        std::optional<IntSeq> p3;
    };

    virtual std::optional<IntSeq> opIntSeqReq(std::optional<IntSeq> p1, std::optional<IntSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opLongSeq.
     */
    struct OpLongSeqResult
    {
        std::optional<LongSeq> returnValue;
        std::optional<LongSeq> p3;
    };

    virtual std::optional<LongSeq> opLongSeq(std::optional<LongSeq> p1, std::optional<LongSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opLongSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opLongSeqReq.
     */
    struct OpLongSeqReqResult
    {
        std::optional<LongSeq> returnValue;
        std::optional<LongSeq> p3;
    };

    virtual std::optional<LongSeq> opLongSeqReq(std::optional<LongSeq> p1, std::optional<LongSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opLongSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opFloatSeq.
     */
    struct OpFloatSeqResult
    {
        std::optional<FloatSeq> returnValue;
        std::optional<FloatSeq> p3;
    };

    virtual std::optional<FloatSeq> opFloatSeq(std::optional<FloatSeq> p1, std::optional<FloatSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opFloatSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opFloatSeqReq.
     */
    struct OpFloatSeqReqResult
    {
        std::optional<FloatSeq> returnValue;
        std::optional<FloatSeq> p3;
    };

    virtual std::optional<FloatSeq> opFloatSeqReq(std::optional<FloatSeq> p1, std::optional<FloatSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opFloatSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opDoubleSeq.
     */
    struct OpDoubleSeqResult
    {
        std::optional<DoubleSeq> returnValue;
        std::optional<DoubleSeq> p3;
    };

    virtual std::optional<DoubleSeq> opDoubleSeq(std::optional<DoubleSeq> p1, std::optional<DoubleSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opDoubleSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opDoubleSeqReq.
     */
    struct OpDoubleSeqReqResult
    {
        std::optional<DoubleSeq> returnValue;
        std::optional<DoubleSeq> p3;
    };

    virtual std::optional<DoubleSeq> opDoubleSeqReq(std::optional<DoubleSeq> p1, std::optional<DoubleSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opDoubleSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opStringSeq.
     */
    struct OpStringSeqResult
    {
        std::optional<StringSeq> returnValue;
        std::optional<StringSeq> p3;
    };

    virtual std::optional<StringSeq> opStringSeq(std::optional<StringSeq> p1, std::optional<StringSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opStringSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opStringSeqReq.
     */
    struct OpStringSeqReqResult
    {
        std::optional<StringSeq> returnValue;
        std::optional<StringSeq> p3;
    };

    virtual std::optional<StringSeq> opStringSeqReq(std::optional<StringSeq> p1, std::optional<StringSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opStringSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSmallStructSeq.
     */
    struct OpSmallStructSeqResult
    {
        std::optional<SmallStructSeq> returnValue;
        std::optional<SmallStructSeq> p3;
    };

    virtual std::optional<SmallStructSeq> opSmallStructSeq(std::optional<SmallStructSeq> p1, std::optional<SmallStructSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSmallStructSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSmallStructSeqReq.
     */
    struct OpSmallStructSeqReqResult
    {
        std::optional<SmallStructSeq> returnValue;
        std::optional<SmallStructSeq> p3;
    };

    virtual std::optional<SmallStructSeq> opSmallStructSeqReq(std::optional<SmallStructSeq> p1, std::optional<SmallStructSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSmallStructSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSmallStructList.
     */
    struct OpSmallStructListResult
    {
        std::optional<SmallStructList> returnValue;
        std::optional<SmallStructList> p3;
    };

    virtual std::optional<SmallStructList> opSmallStructList(std::optional<SmallStructList> p1, std::optional<SmallStructList>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSmallStructList(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSmallStructListReq.
     */
    struct OpSmallStructListReqResult
    {
        std::optional<SmallStructList> returnValue;
        std::optional<SmallStructList> p3;
    };

    virtual std::optional<SmallStructList> opSmallStructListReq(std::optional<SmallStructList> p1, std::optional<SmallStructList>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSmallStructListReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opFixedStructSeq.
     */
    struct OpFixedStructSeqResult
    {
        std::optional<FixedStructSeq> returnValue;
        std::optional<FixedStructSeq> p3;
    };

    virtual std::optional<FixedStructSeq> opFixedStructSeq(std::optional<FixedStructSeq> p1, std::optional<FixedStructSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opFixedStructSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opFixedStructSeqReq.
     */
    struct OpFixedStructSeqReqResult
    {
        std::optional<FixedStructSeq> returnValue;
        std::optional<FixedStructSeq> p3;
    };

    virtual std::optional<FixedStructSeq> opFixedStructSeqReq(std::optional<FixedStructSeq> p1, std::optional<FixedStructSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opFixedStructSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opFixedStructList.
     */
    struct OpFixedStructListResult
    {
        std::optional<FixedStructList> returnValue;
        std::optional<FixedStructList> p3;
    };

    virtual std::optional<FixedStructList> opFixedStructList(std::optional<FixedStructList> p1, std::optional<FixedStructList>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opFixedStructList(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opFixedStructListReq.
     */
    struct OpFixedStructListReqResult
    {
        std::optional<FixedStructList> returnValue;
        std::optional<FixedStructList> p3;
    };

    virtual std::optional<FixedStructList> opFixedStructListReq(std::optional<FixedStructList> p1, std::optional<FixedStructList>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opFixedStructListReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opVarStructSeq.
     */
    struct OpVarStructSeqResult
    {
        std::optional<VarStructSeq> returnValue;
        std::optional<VarStructSeq> p3;
    };

    virtual std::optional<VarStructSeq> opVarStructSeq(std::optional<VarStructSeq> p1, std::optional<VarStructSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opVarStructSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opVarStructSeqReq.
     */
    struct OpVarStructSeqReqResult
    {
        std::optional<VarStructSeq> returnValue;
        std::optional<VarStructSeq> p3;
    };

    virtual std::optional<VarStructSeq> opVarStructSeqReq(std::optional<VarStructSeq> p1, std::optional<VarStructSeq>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opVarStructSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSerializable.
     */
    struct OpSerializableResult
    {
        std::optional<Serializable> returnValue;
        std::optional<Serializable> p3;
    };

    virtual std::optional<Serializable> opSerializable(std::optional<Serializable> p1, std::optional<Serializable>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSerializable(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opSerializableReq.
     */
    struct OpSerializableReqResult
    {
        std::optional<Serializable> returnValue;
        std::optional<Serializable> p3;
    };

    virtual std::optional<Serializable> opSerializableReq(std::optional<Serializable> p1, std::optional<Serializable>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opSerializableReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opIntIntDict.
     */
    struct OpIntIntDictResult
    {
        std::optional<IntIntDict> returnValue;
        std::optional<IntIntDict> p3;
    };

    virtual std::optional<IntIntDict> opIntIntDict(std::optional<IntIntDict> p1, std::optional<IntIntDict>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntIntDict(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opIntIntDictReq.
     */
    struct OpIntIntDictReqResult
    {
        std::optional<IntIntDict> returnValue;
        std::optional<IntIntDict> p3;
    };

    virtual std::optional<IntIntDict> opIntIntDictReq(std::optional<IntIntDict> p1, std::optional<IntIntDict>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntIntDictReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opStringIntDict.
     */
    struct OpStringIntDictResult
    {
        std::optional<StringIntDict> returnValue;
        std::optional<StringIntDict> p3;
    };

    virtual std::optional<StringIntDict> opStringIntDict(std::optional<StringIntDict> p1, std::optional<StringIntDict>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opStringIntDict(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opStringIntDictReq.
     */
    struct OpStringIntDictReqResult
    {
        std::optional<StringIntDict> returnValue;
        std::optional<StringIntDict> p3;
    };

    virtual std::optional<StringIntDict> opStringIntDictReq(std::optional<StringIntDict> p1, std::optional<StringIntDict>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opStringIntDictReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opIntOneOptionalDict.
     */
    struct OpIntOneOptionalDictResult
    {
        std::optional<IntOneOptionalDict> returnValue;
        std::optional<IntOneOptionalDict> p3;
    };

    virtual std::optional<IntOneOptionalDict> opIntOneOptionalDict(std::optional<IntOneOptionalDict> p1, std::optional<IntOneOptionalDict>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntOneOptionalDict(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opIntOneOptionalDictReq.
     */
    struct OpIntOneOptionalDictReqResult
    {
        std::optional<IntOneOptionalDict> returnValue;
        std::optional<IntOneOptionalDict> p3;
    };

    virtual std::optional<IntOneOptionalDict> opIntOneOptionalDictReq(std::optional<IntOneOptionalDict> p1, std::optional<IntOneOptionalDict>& p3, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntOneOptionalDictReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opClassAndUnknownOptional(::std::shared_ptr<A> p, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opClassAndUnknownOptional(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sendOptionalClass(bool req, std::optional<::std::shared_ptr<OneOptional>> o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sendOptionalClass(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void returnOptionalClass(bool req, std::optional<::std::shared_ptr<OneOptional>>& o, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_returnOptionalClass(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<G> opG(::std::shared_ptr<G> g, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opG(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opVoid(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opVoid(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Marshaled result structure for operation opMStruct1.
     */
    class OpMStruct1MarshaledResult : public ::Ice::MarshaledResult
    {
    public:
        /**
         * Marshals the results immediately.
         * @param current The Current object for the invocation.
         */
        OpMStruct1MarshaledResult(const std::optional<SmallStruct>& returnValue, const ::Ice::Current& current);
    };

    virtual OpMStruct1MarshaledResult opMStruct1(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opMStruct1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opMStruct2.
     */
    struct OpMStruct2Result
    {
        std::optional<SmallStruct> returnValue;
        std::optional<SmallStruct> p2;
    };

    /**
     * Marshaled result structure for operation opMStruct2.
     */
    class OpMStruct2MarshaledResult : public ::Ice::MarshaledResult
    {
    public:
        /**
         * Marshals the results immediately.
         * @param current The Current object for the invocation.
         */
        OpMStruct2MarshaledResult(const std::optional<SmallStruct>& returnValue, const std::optional<SmallStruct>& p2, const ::Ice::Current& current);
    };

    virtual OpMStruct2MarshaledResult opMStruct2(std::optional<SmallStruct> p1, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opMStruct2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Marshaled result structure for operation opMSeq1.
     */
    class OpMSeq1MarshaledResult : public ::Ice::MarshaledResult
    {
    public:
        /**
         * Marshals the results immediately.
         * @param current The Current object for the invocation.
         */
        OpMSeq1MarshaledResult(const std::optional<StringSeq>& returnValue, const ::Ice::Current& current);
    };

    virtual OpMSeq1MarshaledResult opMSeq1(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opMSeq1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opMSeq2.
     */
    struct OpMSeq2Result
    {
        std::optional<StringSeq> returnValue;
        std::optional<StringSeq> p2;
    };

    /**
     * Marshaled result structure for operation opMSeq2.
     */
    class OpMSeq2MarshaledResult : public ::Ice::MarshaledResult
    {
    public:
        /**
         * Marshals the results immediately.
         * @param current The Current object for the invocation.
         */
        OpMSeq2MarshaledResult(const std::optional<StringSeq>& returnValue, const std::optional<StringSeq>& p2, const ::Ice::Current& current);
    };

    virtual OpMSeq2MarshaledResult opMSeq2(std::optional<StringSeq> p1, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opMSeq2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Marshaled result structure for operation opMDict1.
     */
    class OpMDict1MarshaledResult : public ::Ice::MarshaledResult
    {
    public:
        /**
         * Marshals the results immediately.
         * @param current The Current object for the invocation.
         */
        OpMDict1MarshaledResult(const std::optional<StringIntDict>& returnValue, const ::Ice::Current& current);
    };

    virtual OpMDict1MarshaledResult opMDict1(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opMDict1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opMDict2.
     */
    struct OpMDict2Result
    {
        std::optional<StringIntDict> returnValue;
        std::optional<StringIntDict> p2;
    };

    /**
     * Marshaled result structure for operation opMDict2.
     */
    class OpMDict2MarshaledResult : public ::Ice::MarshaledResult
    {
    public:
        /**
         * Marshals the results immediately.
         * @param current The Current object for the invocation.
         */
        OpMDict2MarshaledResult(const std::optional<StringIntDict>& returnValue, const std::optional<StringIntDict>& p2, const ::Ice::Current& current);
    };

    virtual OpMDict2MarshaledResult opMDict2(std::optional<StringIntDict> p1, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opMDict2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Marshaled result structure for operation opMG1.
     */
    class OpMG1MarshaledResult : public ::Ice::MarshaledResult
    {
    public:
        /**
         * Marshals the results immediately.
         * @param current The Current object for the invocation.
         */
        OpMG1MarshaledResult(const std::optional<::std::shared_ptr<G>>& returnValue, const ::Ice::Current& current);
    };

    virtual OpMG1MarshaledResult opMG1(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opMG1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to opMG2.
     */
    struct OpMG2Result
    {
        std::optional<::std::shared_ptr<G>> returnValue;
        std::optional<::std::shared_ptr<G>> p2;
    };

    /**
     * Marshaled result structure for operation opMG2.
     */
    class OpMG2MarshaledResult : public ::Ice::MarshaledResult
    {
    public:
        /**
         * Marshals the results immediately.
         * @param current The Current object for the invocation.
         */
        OpMG2MarshaledResult(const std::optional<::std::shared_ptr<G>>& returnValue, const std::optional<::std::shared_ptr<G>>& p2, const ::Ice::Current& current);
    };

    virtual OpMG2MarshaledResult opMG2(std::optional<::std::shared_ptr<G>> p1, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_opMG2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool supportsRequiredParams(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_supportsRequiredParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool supportsJavaSerializable(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_supportsJavaSerializable(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool supportsCsharpSerializable(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_supportsCsharpSerializable(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool supportsCppStringView(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_supportsCppStringView(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool supportsNullOptional(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_supportsNullOptional(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Test
{

class OneOptional : public ::Ice::ValueHelper<OneOptional, ::Ice::Value>
{
public:

    virtual ~OneOptional();

    OneOptional() = default;

    OneOptional(const OneOptional&) = default;
    OneOptional(OneOptional&&) = default;
    OneOptional& operator=(const OneOptional&) = default;
    OneOptional& operator=(OneOptional&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit OneOptional(const std::optional<int>& a) :
        a(a)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional<int>&> ice_tuple() const
    {
        return std::tie(a);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional<int> a;
};

/// \cond INTERNAL
static OneOptional _iceS_OneOptional_init;
/// \endcond

class MultiOptional : public ::Ice::ValueHelper<MultiOptional, ::Ice::Value>
{
public:

    virtual ~MultiOptional();

    MultiOptional() = default;

    MultiOptional(const MultiOptional&) = default;
    MultiOptional(MultiOptional&&) = default;
    MultiOptional& operator=(const MultiOptional&) = default;
    MultiOptional& operator=(MultiOptional&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    MultiOptional(const std::optional<::Ice::Byte>& a, const std::optional<bool>& b, const std::optional<short>& c, const std::optional<int>& d, const std::optional<long long int>& e, const std::optional<float>& f, const std::optional<double>& g, const std::optional<::std::string>& h, const std::optional<::Test::MyEnum>& i, const std::optional<::std::shared_ptr<::Test::MyInterfacePrx>>& j, const std::optional<::std::shared_ptr<::Test::MultiOptional>>& k, const std::optional<::Test::ByteSeq>& bs, const std::optional<::Test::StringSeq>& ss, const std::optional<::Test::IntIntDict>& iid, const std::optional<::Test::StringIntDict>& sid, const std::optional<::Test::FixedStruct>& fs, const std::optional<::Test::VarStruct>& vs, const std::optional<::Test::ShortSeq>& shs, const std::optional<::Test::MyEnumSeq>& es, const std::optional<::Test::FixedStructSeq>& fss, const std::optional<::Test::VarStructSeq>& vss, const std::optional<::Test::OneOptionalSeq>& oos, const std::optional<::Test::MyInterfacePrxSeq>& mips, const std::optional<::Test::IntEnumDict>& ied, const std::optional<::Test::IntFixedStructDict>& ifsd, const std::optional<::Test::IntVarStructDict>& ivsd, const std::optional<::Test::IntOneOptionalDict>& iood, const std::optional<::Test::IntMyInterfacePrxDict>& imipd, const std::optional<::Test::BoolSeq>& bos, const std::optional<::Test::Serializable>& ser) :
        a(a),
        b(b),
        c(c),
        d(d),
        e(e),
        f(f),
        g(g),
        h(h),
        i(i),
        j(j),
        k(k),
        bs(bs),
        ss(ss),
        iid(iid),
        sid(sid),
        fs(fs),
        vs(vs),
        shs(shs),
        es(es),
        fss(fss),
        vss(vss),
        oos(oos),
        mips(mips),
        ied(ied),
        ifsd(ifsd),
        ivsd(ivsd),
        iood(iood),
        imipd(imipd),
        bos(bos),
        ser(ser)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional<::Ice::Byte>&, const std::optional<bool>&, const std::optional<short>&, const std::optional<int>&, const std::optional<long long int>&, const std::optional<float>&, const std::optional<double>&, const std::optional<::std::string>&, const std::optional<::Test::MyEnum>&, const std::optional<::std::shared_ptr<::Test::MyInterfacePrx>>&, const std::optional<::std::shared_ptr<::Test::MultiOptional>>&, const std::optional<::Test::ByteSeq>&, const std::optional<::Test::StringSeq>&, const std::optional<::Test::IntIntDict>&, const std::optional<::Test::StringIntDict>&, const std::optional<::Test::FixedStruct>&, const std::optional<::Test::VarStruct>&, const std::optional<::Test::ShortSeq>&, const std::optional<::Test::MyEnumSeq>&, const std::optional<::Test::FixedStructSeq>&, const std::optional<::Test::VarStructSeq>&, const std::optional<::Test::OneOptionalSeq>&, const std::optional<::Test::MyInterfacePrxSeq>&, const std::optional<::Test::IntEnumDict>&, const std::optional<::Test::IntFixedStructDict>&, const std::optional<::Test::IntVarStructDict>&, const std::optional<::Test::IntOneOptionalDict>&, const std::optional<::Test::IntMyInterfacePrxDict>&, const std::optional<::Test::BoolSeq>&, const std::optional<::Test::Serializable>&> ice_tuple() const
    {
        return std::tie(a, b, c, d, e, f, g, h, i, j, k, bs, ss, iid, sid, fs, vs, shs, es, fss, vss, oos, mips, ied, ifsd, ivsd, iood, imipd, bos, ser);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional<::Ice::Byte> a;
    std::optional<bool> b;
    std::optional<short> c;
    std::optional<int> d;
    std::optional<long long int> e;
    std::optional<float> f;
    std::optional<double> g;
    std::optional<::std::string> h;
    std::optional<::Test::MyEnum> i;
    std::optional<::std::shared_ptr<::Test::MyInterfacePrx>> j;
    std::optional<::std::shared_ptr<::Test::MultiOptional>> k;
    std::optional<::Test::ByteSeq> bs;
    std::optional<::Test::StringSeq> ss;
    std::optional<::Test::IntIntDict> iid;
    std::optional<::Test::StringIntDict> sid;
    std::optional<::Test::FixedStruct> fs;
    std::optional<::Test::VarStruct> vs;
    std::optional<::Test::ShortSeq> shs;
    std::optional<::Test::MyEnumSeq> es;
    std::optional<::Test::FixedStructSeq> fss;
    std::optional<::Test::VarStructSeq> vss;
    std::optional<::Test::OneOptionalSeq> oos;
    std::optional<::Test::MyInterfacePrxSeq> mips;
    std::optional<::Test::IntEnumDict> ied;
    std::optional<::Test::IntFixedStructDict> ifsd;
    std::optional<::Test::IntVarStructDict> ivsd;
    std::optional<::Test::IntOneOptionalDict> iood;
    std::optional<::Test::IntMyInterfacePrxDict> imipd;
    std::optional<::Test::BoolSeq> bos;
    std::optional<::Test::Serializable> ser;
};

class A : public ::Ice::ValueHelper<A, ::Ice::Value>
{
public:

    virtual ~A();

    A() = default;

    A(const A&) = default;
    A(A&&) = default;
    A& operator=(const A&) = default;
    A& operator=(A&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    A(int requiredA, const std::optional<int>& ma, const std::optional<int>& mb, const std::optional<int>& mc) :
        requiredA(requiredA),
        ma(ma),
        mb(mb),
        mc(mc)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const std::optional<int>&, const std::optional<int>&, const std::optional<int>&> ice_tuple() const
    {
        return std::tie(requiredA, ma, mb, mc);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int requiredA;
    std::optional<int> ma;
    std::optional<int> mb;
    std::optional<int> mc;
};

class B : public ::Ice::ValueHelper<B, A>
{
public:

    virtual ~B();

    B() = default;

    B(const B&) = default;
    B(B&&) = default;
    B& operator=(const B&) = default;
    B& operator=(B&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    B(int requiredA, const std::optional<int>& ma, const std::optional<int>& mb, const std::optional<int>& mc, int requiredB, const std::optional<int>& md) :
        Ice::ValueHelper<B, A>(requiredA, ma, mb, mc),
        requiredB(requiredB),
        md(md)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const std::optional<int>&, const std::optional<int>&, const std::optional<int>&, const int&, const std::optional<int>&> ice_tuple() const
    {
        return std::tie(requiredA, ma, mb, mc, requiredB, md);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains the SlicedData object created when an unknown value type was marshaled
     * in the sliced format and the Ice run time sliced it to a known type.
     * @return The SlicedData object, or nil if the value was not sliced or was not
     * marshaled in the sliced format.
     */
    virtual ::std::shared_ptr<::Ice::SlicedData> ice_getSlicedData() const override;

    /// \cond STREAM
    virtual void _iceWrite(::Ice::OutputStream*) const override;
    virtual void _iceRead(::Ice::InputStream*) override;
    /// \endcond

    int requiredB;
    std::optional<int> md;

protected:

    /// \cond STREAM
    ::std::shared_ptr<::Ice::SlicedData> _iceSlicedData;
    /// \endcond
};

class C : public ::Ice::ValueHelper<C, B>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C(int requiredA, const std::optional<int>& ma, const std::optional<int>& mb, const std::optional<int>& mc, int requiredB, const std::optional<int>& md, const ::std::string& ss, const std::optional<::std::string>& ms) :
        Ice::ValueHelper<C, B>(requiredA, ma, mb, mc, requiredB, md),
        ss(ss),
        ms(ms)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const std::optional<int>&, const std::optional<int>&, const std::optional<int>&, const int&, const std::optional<int>&, const ::std::string&, const std::optional<::std::string>&> ice_tuple() const
    {
        return std::tie(requiredA, ma, mb, mc, requiredB, md, ss, ms);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string ss;
    std::optional<::std::string> ms;
};

class WD : public ::Ice::ValueHelper<WD, ::Ice::Value>
{
public:

    virtual ~WD();

    WD() = default;

    WD(const WD&) = default;
    WD(WD&&) = default;
    WD& operator=(const WD&) = default;
    WD& operator=(WD&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    WD(const std::optional<int>& a, const std::optional<::std::string>& s) :
        a(a),
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional<int>&, const std::optional<::std::string>&> ice_tuple() const
    {
        return std::tie(a, s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional<int> a = 5;
    std::optional<::std::string> s{"test"};
};

class OptionalWithCustom : public ::Ice::ValueHelper<OptionalWithCustom, ::Ice::Value>
{
public:

    virtual ~OptionalWithCustom();

    OptionalWithCustom() = default;

    OptionalWithCustom(const OptionalWithCustom&) = default;
    OptionalWithCustom(OptionalWithCustom&&) = default;
    OptionalWithCustom& operator=(const OptionalWithCustom&) = default;
    OptionalWithCustom& operator=(OptionalWithCustom&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    OptionalWithCustom(const std::optional<::Test::SmallStructList>& l, const std::optional<::Test::SmallStructList>& lp, const std::optional<::Test::ClassVarStruct>& s) :
        l(l),
        lp(lp),
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional<::Test::SmallStructList>&, const std::optional<::Test::SmallStructList>&, const std::optional<::Test::ClassVarStruct>&> ice_tuple() const
    {
        return std::tie(l, lp, s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional<::Test::SmallStructList> l;

protected:

    std::optional<::Test::SmallStructList> lp;

public:

    std::optional<::Test::ClassVarStruct> s;

protected:

    template<typename T, typename S>
    friend struct Ice::StreamWriter;
    template<typename T, typename S>
    friend struct Ice::StreamReader;
};

class E : public ::Ice::ValueHelper<E, ::Ice::Value>
{
public:

    virtual ~E();

    E() = default;

    E(const E&) = default;
    E(E&&) = default;
    E& operator=(const E&) = default;
    E& operator=(E&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit E(const ::std::shared_ptr<::Test::A>& ae) :
        ae(ae)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::A>&> ice_tuple() const
    {
        return std::tie(ae);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::Test::A> ae;
};

class F : public ::Ice::ValueHelper<F, E>
{
public:

    virtual ~F();

    F() = default;

    F(const F&) = default;
    F(F&&) = default;
    F& operator=(const F&) = default;
    F& operator=(F&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    F(const ::std::shared_ptr<::Test::A>& ae, const std::optional<::std::shared_ptr<::Test::A>>& af) :
        Ice::ValueHelper<F, E>(ae),
        af(af)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::Test::A>&, const std::optional<::std::shared_ptr<::Test::A>>&> ice_tuple() const
    {
        return std::tie(ae, af);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional<::std::shared_ptr<::Test::A>> af;
};

class G1 : public ::Ice::ValueHelper<G1, ::Ice::Value>
{
public:

    virtual ~G1();

    G1() = default;

    G1(const G1&) = default;
    G1(G1&&) = default;
    G1& operator=(const G1&) = default;
    G1& operator=(G1&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit G1(const ::std::string& a) :
        a(a)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(a);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string a;
};

class G2 : public ::Ice::ValueHelper<G2, ::Ice::Value>
{
public:

    virtual ~G2();

    G2() = default;

    G2(const G2&) = default;
    G2(G2&&) = default;
    G2& operator=(const G2&) = default;
    G2& operator=(G2&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit G2(long long int a) :
        a(a)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const long long int&> ice_tuple() const
    {
        return std::tie(a);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    long long int a;
};

class G : public ::Ice::ValueHelper<G, ::Ice::Value>
{
public:

    virtual ~G();

    G() = default;

    G(const G&) = default;
    G(G&&) = default;
    G& operator=(const G&) = default;
    G& operator=(G&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    G(const std::optional<::std::shared_ptr<::Test::G1>>& gg1Opt, const ::std::shared_ptr<::Test::G2>& gg2, const std::optional<::std::shared_ptr<::Test::G2>>& gg2Opt, const ::std::shared_ptr<::Test::G1>& gg1) :
        gg1Opt(gg1Opt),
        gg2(gg2),
        gg2Opt(gg2Opt),
        gg1(gg1)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional<::std::shared_ptr<::Test::G1>>&, const ::std::shared_ptr<::Test::G2>&, const std::optional<::std::shared_ptr<::Test::G2>>&, const ::std::shared_ptr<::Test::G1>&> ice_tuple() const
    {
        return std::tie(gg1Opt, gg2, gg2Opt, gg1);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional<::std::shared_ptr<::Test::G1>> gg1Opt;
    ::std::shared_ptr<::Test::G2> gg2;
    std::optional<::std::shared_ptr<::Test::G2>> gg2Opt;
    ::std::shared_ptr<::Test::G1> gg1;
};

class Recursive : public ::Ice::ValueHelper<Recursive, ::Ice::Value>
{
public:

    virtual ~Recursive();

    Recursive() = default;

    Recursive(const Recursive&) = default;
    Recursive(Recursive&&) = default;
    Recursive& operator=(const Recursive&) = default;
    Recursive& operator=(Recursive&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit Recursive(const std::optional<::Test::RecursiveSeq>& value) :
        value(value)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional<::Test::RecursiveSeq>&> ice_tuple() const
    {
        return std::tie(value);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional<::Test::RecursiveSeq> value;
};

}

namespace Test
{

class MyInterfacePrx : public virtual ::Ice::Proxy<MyInterfacePrx, ::Ice::ObjectPrx>
{
public:

    void op(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &MyInterfacePrx::_iceI_op, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &MyInterfacePrx::_iceI_op, context);
    }

    ::std::function<void()>
    opAsync(::std::function<void()> response,
            ::std::function<void(::std::exception_ptr)> ex = nullptr,
            ::std::function<void(bool)> sent = nullptr,
            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyInterfacePrx::_iceI_op, context);
    }

    /// \cond INTERNAL
    void _iceI_op(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    MyInterfacePrx() = default;
    friend ::std::shared_ptr<MyInterfacePrx> IceInternal::createProxy<MyInterfacePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class InitialPrx : public virtual ::Ice::Proxy<InitialPrx, ::Ice::ObjectPrx>
{
public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_shutdown, context);
    }

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<::Ice::Value> pingPong(const ::std::shared_ptr<::Ice::Value>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Ice::Value>>(true, this, &InitialPrx::_iceI_pingPong, o, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto pingPongAsync(const ::std::shared_ptr<::Ice::Value>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Ice::Value>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Ice::Value>, P>(false, this, &InitialPrx::_iceI_pingPong, o, context);
    }

    ::std::function<void()>
    pingPongAsync(const ::std::shared_ptr<::Ice::Value>& o,
                  ::std::function<void(::std::shared_ptr<::Ice::Value>)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Ice::Value>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_pingPong, o, context);
    }

    /// \cond INTERNAL
    void _iceI_pingPong(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::Value>>>&, const ::std::shared_ptr<::Ice::Value>&, const ::Ice::Context&);
    /// \endcond

    void opOptionalException(const std::optional<int>& a, const std::optional<::std::string>& b, const std::optional<::std::shared_ptr<OneOptional>>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_opOptionalException, a, b, o, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opOptionalExceptionAsync(const std::optional<int>& a, const std::optional<::std::string>& b, const std::optional<::std::shared_ptr<OneOptional>>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_opOptionalException, a, b, o, context);
    }

    ::std::function<void()>
    opOptionalExceptionAsync(const std::optional<int>& a, const std::optional<::std::string>& b, const std::optional<::std::shared_ptr<OneOptional>>& o,
                             ::std::function<void()> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opOptionalException, a, b, o, context);
    }

    /// \cond INTERNAL
    void _iceI_opOptionalException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const std::optional<int>&, const std::optional<::std::string>&, const std::optional<::std::shared_ptr<OneOptional>>&, const ::Ice::Context&);
    /// \endcond

    void opDerivedException(const std::optional<int>& a, const std::optional<::std::string>& b, const std::optional<::std::shared_ptr<OneOptional>>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_opDerivedException, a, b, o, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opDerivedExceptionAsync(const std::optional<int>& a, const std::optional<::std::string>& b, const std::optional<::std::shared_ptr<OneOptional>>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_opDerivedException, a, b, o, context);
    }

    ::std::function<void()>
    opDerivedExceptionAsync(const std::optional<int>& a, const std::optional<::std::string>& b, const std::optional<::std::shared_ptr<OneOptional>>& o,
                            ::std::function<void()> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opDerivedException, a, b, o, context);
    }

    /// \cond INTERNAL
    void _iceI_opDerivedException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const std::optional<int>&, const std::optional<::std::string>&, const std::optional<::std::shared_ptr<OneOptional>>&, const ::Ice::Context&);
    /// \endcond

    void opRequiredException(const std::optional<int>& a, const std::optional<::std::string>& b, const std::optional<::std::shared_ptr<OneOptional>>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_opRequiredException, a, b, o, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opRequiredExceptionAsync(const std::optional<int>& a, const std::optional<::std::string>& b, const std::optional<::std::shared_ptr<OneOptional>>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_opRequiredException, a, b, o, context);
    }

    ::std::function<void()>
    opRequiredExceptionAsync(const std::optional<int>& a, const std::optional<::std::string>& b, const std::optional<::std::shared_ptr<OneOptional>>& o,
                             ::std::function<void()> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opRequiredException, a, b, o, context);
    }

    /// \cond INTERNAL
    void _iceI_opRequiredException(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const std::optional<int>&, const std::optional<::std::string>&, const std::optional<::std::shared_ptr<OneOptional>>&, const ::Ice::Context&);
    /// \endcond

    std::optional<::Ice::Byte> opByte(const std::optional<::Ice::Byte>& p1, std::optional<::Ice::Byte>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpByteResult>(true, this, &InitialPrx::_iceI_opByte, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opByteAsync(const std::optional<::Ice::Byte>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpByteResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpByteResult, P>(false, this, &InitialPrx::_iceI_opByte, p1, context);
    }

    ::std::function<void()>
    opByteAsync(const std::optional<::Ice::Byte>& p1,
                ::std::function<void(std::optional<::Ice::Byte>, std::optional<::Ice::Byte>)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpByteResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpByteResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opByte, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opByte(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpByteResult>>&, const std::optional<::Ice::Byte>&, const ::Ice::Context&);
    /// \endcond

    std::optional<::Ice::Byte> opByteReq(const std::optional<::Ice::Byte>& p1, std::optional<::Ice::Byte>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpByteReqResult>(true, this, &InitialPrx::_iceI_opByteReq, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opByteReqAsync(const std::optional<::Ice::Byte>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpByteReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpByteReqResult, P>(false, this, &InitialPrx::_iceI_opByteReq, p1, context);
    }

    ::std::function<void()>
    opByteReqAsync(const std::optional<::Ice::Byte>& p1,
                   ::std::function<void(std::optional<::Ice::Byte>, std::optional<::Ice::Byte>)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpByteReqResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpByteReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opByteReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opByteReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpByteReqResult>>&, const std::optional<::Ice::Byte>&, const ::Ice::Context&);
    /// \endcond

    std::optional<bool> opBool(const std::optional<bool>& p1, std::optional<bool>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpBoolResult>(true, this, &InitialPrx::_iceI_opBool, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opBoolAsync(const std::optional<bool>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpBoolResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpBoolResult, P>(false, this, &InitialPrx::_iceI_opBool, p1, context);
    }

    ::std::function<void()>
    opBoolAsync(const std::optional<bool>& p1,
                ::std::function<void(std::optional<bool>, std::optional<bool>)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpBoolResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpBoolResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opBool, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opBool(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpBoolResult>>&, const std::optional<bool>&, const ::Ice::Context&);
    /// \endcond

    std::optional<bool> opBoolReq(const std::optional<bool>& p1, std::optional<bool>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpBoolReqResult>(true, this, &InitialPrx::_iceI_opBoolReq, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opBoolReqAsync(const std::optional<bool>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpBoolReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpBoolReqResult, P>(false, this, &InitialPrx::_iceI_opBoolReq, p1, context);
    }

    ::std::function<void()>
    opBoolReqAsync(const std::optional<bool>& p1,
                   ::std::function<void(std::optional<bool>, std::optional<bool>)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpBoolReqResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpBoolReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opBoolReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opBoolReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpBoolReqResult>>&, const std::optional<bool>&, const ::Ice::Context&);
    /// \endcond

    std::optional<short> opShort(const std::optional<short>& p1, std::optional<short>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpShortResult>(true, this, &InitialPrx::_iceI_opShort, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opShortAsync(const std::optional<short>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpShortResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpShortResult, P>(false, this, &InitialPrx::_iceI_opShort, p1, context);
    }

    ::std::function<void()>
    opShortAsync(const std::optional<short>& p1,
                 ::std::function<void(std::optional<short>, std::optional<short>)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpShortResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpShortResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opShort, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opShort(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpShortResult>>&, const std::optional<short>&, const ::Ice::Context&);
    /// \endcond

    std::optional<short> opShortReq(const std::optional<short>& p1, std::optional<short>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpShortReqResult>(true, this, &InitialPrx::_iceI_opShortReq, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opShortReqAsync(const std::optional<short>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpShortReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpShortReqResult, P>(false, this, &InitialPrx::_iceI_opShortReq, p1, context);
    }

    ::std::function<void()>
    opShortReqAsync(const std::optional<short>& p1,
                    ::std::function<void(std::optional<short>, std::optional<short>)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpShortReqResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpShortReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opShortReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opShortReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpShortReqResult>>&, const std::optional<short>&, const ::Ice::Context&);
    /// \endcond

    std::optional<int> opInt(const std::optional<int>& p1, std::optional<int>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpIntResult>(true, this, &InitialPrx::_iceI_opInt, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opIntAsync(const std::optional<int>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpIntResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpIntResult, P>(false, this, &InitialPrx::_iceI_opInt, p1, context);
    }

    ::std::function<void()>
    opIntAsync(const std::optional<int>& p1,
               ::std::function<void(std::optional<int>, std::optional<int>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpIntResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpIntResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opInt, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opInt(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntResult>>&, const std::optional<int>&, const ::Ice::Context&);
    /// \endcond

    std::optional<int> opIntReq(const std::optional<int>& p1, std::optional<int>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpIntReqResult>(true, this, &InitialPrx::_iceI_opIntReq, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opIntReqAsync(const std::optional<int>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpIntReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpIntReqResult, P>(false, this, &InitialPrx::_iceI_opIntReq, p1, context);
    }

    ::std::function<void()>
    opIntReqAsync(const std::optional<int>& p1,
                  ::std::function<void(std::optional<int>, std::optional<int>)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpIntReqResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpIntReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opIntReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opIntReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntReqResult>>&, const std::optional<int>&, const ::Ice::Context&);
    /// \endcond

    std::optional<long long int> opLong(const std::optional<long long int>& p1, std::optional<long long int>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpLongResult>(true, this, &InitialPrx::_iceI_opLong, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opLongAsync(const std::optional<long long int>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpLongResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpLongResult, P>(false, this, &InitialPrx::_iceI_opLong, p1, context);
    }

    ::std::function<void()>
    opLongAsync(const std::optional<long long int>& p1,
                ::std::function<void(std::optional<long long int>, std::optional<long long int>)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpLongResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpLongResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opLong, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opLong(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpLongResult>>&, const std::optional<long long int>&, const ::Ice::Context&);
    /// \endcond

    std::optional<long long int> opLongReq(const std::optional<long long int>& p1, std::optional<long long int>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpLongReqResult>(true, this, &InitialPrx::_iceI_opLongReq, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opLongReqAsync(const std::optional<long long int>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpLongReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpLongReqResult, P>(false, this, &InitialPrx::_iceI_opLongReq, p1, context);
    }

    ::std::function<void()>
    opLongReqAsync(const std::optional<long long int>& p1,
                   ::std::function<void(std::optional<long long int>, std::optional<long long int>)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpLongReqResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpLongReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opLongReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opLongReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpLongReqResult>>&, const std::optional<long long int>&, const ::Ice::Context&);
    /// \endcond

    std::optional<float> opFloat(const std::optional<float>& p1, std::optional<float>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpFloatResult>(true, this, &InitialPrx::_iceI_opFloat, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opFloatAsync(const std::optional<float>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpFloatResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpFloatResult, P>(false, this, &InitialPrx::_iceI_opFloat, p1, context);
    }

    ::std::function<void()>
    opFloatAsync(const std::optional<float>& p1,
                 ::std::function<void(std::optional<float>, std::optional<float>)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpFloatResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpFloatResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFloat, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opFloat(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFloatResult>>&, const std::optional<float>&, const ::Ice::Context&);
    /// \endcond

    std::optional<float> opFloatReq(const std::optional<float>& p1, std::optional<float>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpFloatReqResult>(true, this, &InitialPrx::_iceI_opFloatReq, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opFloatReqAsync(const std::optional<float>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpFloatReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpFloatReqResult, P>(false, this, &InitialPrx::_iceI_opFloatReq, p1, context);
    }

    ::std::function<void()>
    opFloatReqAsync(const std::optional<float>& p1,
                    ::std::function<void(std::optional<float>, std::optional<float>)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpFloatReqResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpFloatReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFloatReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opFloatReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFloatReqResult>>&, const std::optional<float>&, const ::Ice::Context&);
    /// \endcond

    std::optional<double> opDouble(const std::optional<double>& p1, std::optional<double>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpDoubleResult>(true, this, &InitialPrx::_iceI_opDouble, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opDoubleAsync(const std::optional<double>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpDoubleResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpDoubleResult, P>(false, this, &InitialPrx::_iceI_opDouble, p1, context);
    }

    ::std::function<void()>
    opDoubleAsync(const std::optional<double>& p1,
                  ::std::function<void(std::optional<double>, std::optional<double>)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpDoubleResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpDoubleResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opDouble, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opDouble(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpDoubleResult>>&, const std::optional<double>&, const ::Ice::Context&);
    /// \endcond

    std::optional<double> opDoubleReq(const std::optional<double>& p1, std::optional<double>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpDoubleReqResult>(true, this, &InitialPrx::_iceI_opDoubleReq, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opDoubleReqAsync(const std::optional<double>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpDoubleReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpDoubleReqResult, P>(false, this, &InitialPrx::_iceI_opDoubleReq, p1, context);
    }

    ::std::function<void()>
    opDoubleReqAsync(const std::optional<double>& p1,
                     ::std::function<void(std::optional<double>, std::optional<double>)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpDoubleReqResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpDoubleReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opDoubleReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opDoubleReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpDoubleReqResult>>&, const std::optional<double>&, const ::Ice::Context&);
    /// \endcond

    std::optional<::std::string> opString(const std::optional<::std::string>& p1, std::optional<::std::string>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpStringResult>(true, this, &InitialPrx::_iceI_opString, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opStringAsync(const std::optional<::std::string>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpStringResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpStringResult, P>(false, this, &InitialPrx::_iceI_opString, p1, context);
    }

    ::std::function<void()>
    opStringAsync(const std::optional<::std::string>& p1,
                  ::std::function<void(std::optional<::std::string>, std::optional<::std::string>)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpStringResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpStringResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opString, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpStringResult>>&, const std::optional<::std::string>&, const ::Ice::Context&);
    /// \endcond

    std::optional<::std::string> opStringReq(const std::optional<::std::string>& p1, std::optional<::std::string>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpStringReqResult>(true, this, &InitialPrx::_iceI_opStringReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opStringReqAsync(const std::optional<::std::string>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpStringReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpStringReqResult, P>(false, this, &InitialPrx::_iceI_opStringReq, p1, context);
    }

    ::std::function<void()>
    opStringReqAsync(const std::optional<::std::string>& p1,
                     ::std::function<void(std::optional<::std::string>, std::optional<::std::string>)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpStringReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpStringReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opStringReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opStringReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpStringReqResult>>&, const std::optional<::std::string>&, const ::Ice::Context&);
    /// \endcond

    std::optional<MyEnum> opMyEnum(const std::optional<MyEnum>& p1, std::optional<MyEnum>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpMyEnumResult>(true, this, &InitialPrx::_iceI_opMyEnum, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opMyEnumAsync(const std::optional<MyEnum>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpMyEnumResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpMyEnumResult, P>(false, this, &InitialPrx::_iceI_opMyEnum, p1, context);
    }

    ::std::function<void()>
    opMyEnumAsync(const std::optional<MyEnum>& p1,
                  ::std::function<void(std::optional<::Test::MyEnum>, std::optional<::Test::MyEnum>)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpMyEnumResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpMyEnumResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMyEnum, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opMyEnum(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMyEnumResult>>&, const std::optional<MyEnum>&, const ::Ice::Context&);
    /// \endcond

    std::optional<MyEnum> opMyEnumReq(const std::optional<MyEnum>& p1, std::optional<MyEnum>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpMyEnumReqResult>(true, this, &InitialPrx::_iceI_opMyEnumReq, p1, context).get();
        p3 = _result.p3;
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto opMyEnumReqAsync(const std::optional<MyEnum>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpMyEnumReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpMyEnumReqResult, P>(false, this, &InitialPrx::_iceI_opMyEnumReq, p1, context);
    }

    ::std::function<void()>
    opMyEnumReqAsync(const std::optional<MyEnum>& p1,
                     ::std::function<void(std::optional<::Test::MyEnum>, std::optional<::Test::MyEnum>)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpMyEnumReqResult&& _result)
        {
            response(_result.returnValue, _result.p3);
        };
        return _makeLambdaOutgoing<Initial::OpMyEnumReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMyEnumReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opMyEnumReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMyEnumReqResult>>&, const std::optional<MyEnum>&, const ::Ice::Context&);
    /// \endcond

    std::optional<SmallStruct> opSmallStruct(const std::optional<SmallStruct>& p1, std::optional<SmallStruct>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpSmallStructResult>(true, this, &InitialPrx::_iceI_opSmallStruct, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSmallStructAsync(const std::optional<SmallStruct>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpSmallStructResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpSmallStructResult, P>(false, this, &InitialPrx::_iceI_opSmallStruct, p1, context);
    }

    ::std::function<void()>
    opSmallStructAsync(const std::optional<SmallStruct>& p1,
                       ::std::function<void(std::optional<::Test::SmallStruct>, std::optional<::Test::SmallStruct>)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpSmallStructResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpSmallStructResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSmallStruct, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSmallStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSmallStructResult>>&, const std::optional<SmallStruct>&, const ::Ice::Context&);
    /// \endcond

    std::optional<SmallStruct> opSmallStructReq(const std::optional<SmallStruct>& p1, std::optional<SmallStruct>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpSmallStructReqResult>(true, this, &InitialPrx::_iceI_opSmallStructReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSmallStructReqAsync(const std::optional<SmallStruct>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpSmallStructReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpSmallStructReqResult, P>(false, this, &InitialPrx::_iceI_opSmallStructReq, p1, context);
    }

    ::std::function<void()>
    opSmallStructReqAsync(const std::optional<SmallStruct>& p1,
                          ::std::function<void(std::optional<::Test::SmallStruct>, std::optional<::Test::SmallStruct>)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpSmallStructReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpSmallStructReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSmallStructReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSmallStructReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSmallStructReqResult>>&, const std::optional<SmallStruct>&, const ::Ice::Context&);
    /// \endcond

    std::optional<FixedStruct> opFixedStruct(const std::optional<FixedStruct>& p1, std::optional<FixedStruct>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpFixedStructResult>(true, this, &InitialPrx::_iceI_opFixedStruct, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opFixedStructAsync(const std::optional<FixedStruct>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpFixedStructResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpFixedStructResult, P>(false, this, &InitialPrx::_iceI_opFixedStruct, p1, context);
    }

    ::std::function<void()>
    opFixedStructAsync(const std::optional<FixedStruct>& p1,
                       ::std::function<void(std::optional<::Test::FixedStruct>, std::optional<::Test::FixedStruct>)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpFixedStructResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpFixedStructResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFixedStruct, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opFixedStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFixedStructResult>>&, const std::optional<FixedStruct>&, const ::Ice::Context&);
    /// \endcond

    std::optional<FixedStruct> opFixedStructReq(const std::optional<FixedStruct>& p1, std::optional<FixedStruct>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpFixedStructReqResult>(true, this, &InitialPrx::_iceI_opFixedStructReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opFixedStructReqAsync(const std::optional<FixedStruct>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpFixedStructReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpFixedStructReqResult, P>(false, this, &InitialPrx::_iceI_opFixedStructReq, p1, context);
    }

    ::std::function<void()>
    opFixedStructReqAsync(const std::optional<FixedStruct>& p1,
                          ::std::function<void(std::optional<::Test::FixedStruct>, std::optional<::Test::FixedStruct>)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpFixedStructReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpFixedStructReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFixedStructReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opFixedStructReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFixedStructReqResult>>&, const std::optional<FixedStruct>&, const ::Ice::Context&);
    /// \endcond

    std::optional<VarStruct> opVarStruct(const std::optional<VarStruct>& p1, std::optional<VarStruct>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpVarStructResult>(true, this, &InitialPrx::_iceI_opVarStruct, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opVarStructAsync(const std::optional<VarStruct>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpVarStructResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpVarStructResult, P>(false, this, &InitialPrx::_iceI_opVarStruct, p1, context);
    }

    ::std::function<void()>
    opVarStructAsync(const std::optional<VarStruct>& p1,
                     ::std::function<void(std::optional<::Test::VarStruct>, std::optional<::Test::VarStruct>)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpVarStructResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpVarStructResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opVarStruct, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opVarStruct(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpVarStructResult>>&, const std::optional<VarStruct>&, const ::Ice::Context&);
    /// \endcond

    std::optional<VarStruct> opVarStructReq(const std::optional<VarStruct>& p1, std::optional<VarStruct>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpVarStructReqResult>(true, this, &InitialPrx::_iceI_opVarStructReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opVarStructReqAsync(const std::optional<VarStruct>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpVarStructReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpVarStructReqResult, P>(false, this, &InitialPrx::_iceI_opVarStructReq, p1, context);
    }

    ::std::function<void()>
    opVarStructReqAsync(const std::optional<VarStruct>& p1,
                        ::std::function<void(std::optional<::Test::VarStruct>, std::optional<::Test::VarStruct>)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpVarStructReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpVarStructReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opVarStructReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opVarStructReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpVarStructReqResult>>&, const std::optional<VarStruct>&, const ::Ice::Context&);
    /// \endcond

    std::optional<::std::shared_ptr<OneOptional>> opOneOptional(const std::optional<::std::shared_ptr<OneOptional>>& p1, std::optional<::std::shared_ptr<OneOptional>>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpOneOptionalResult>(true, this, &InitialPrx::_iceI_opOneOptional, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opOneOptionalAsync(const std::optional<::std::shared_ptr<OneOptional>>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpOneOptionalResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpOneOptionalResult, P>(false, this, &InitialPrx::_iceI_opOneOptional, p1, context);
    }

    ::std::function<void()>
    opOneOptionalAsync(const std::optional<::std::shared_ptr<OneOptional>>& p1,
                       ::std::function<void(std::optional<::std::shared_ptr<::Test::OneOptional>>, std::optional<::std::shared_ptr<::Test::OneOptional>>)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpOneOptionalResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpOneOptionalResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opOneOptional, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opOneOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpOneOptionalResult>>&, const std::optional<::std::shared_ptr<OneOptional>>&, const ::Ice::Context&);
    /// \endcond

    std::optional<::std::shared_ptr<OneOptional>> opOneOptionalReq(const std::optional<::std::shared_ptr<OneOptional>>& p1, std::optional<::std::shared_ptr<OneOptional>>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpOneOptionalReqResult>(true, this, &InitialPrx::_iceI_opOneOptionalReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opOneOptionalReqAsync(const std::optional<::std::shared_ptr<OneOptional>>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpOneOptionalReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpOneOptionalReqResult, P>(false, this, &InitialPrx::_iceI_opOneOptionalReq, p1, context);
    }

    ::std::function<void()>
    opOneOptionalReqAsync(const std::optional<::std::shared_ptr<OneOptional>>& p1,
                          ::std::function<void(std::optional<::std::shared_ptr<::Test::OneOptional>>, std::optional<::std::shared_ptr<::Test::OneOptional>>)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpOneOptionalReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpOneOptionalReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opOneOptionalReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opOneOptionalReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpOneOptionalReqResult>>&, const std::optional<::std::shared_ptr<OneOptional>>&, const ::Ice::Context&);
    /// \endcond

    std::optional<::std::shared_ptr<MyInterfacePrx>> opMyInterfaceProxy(const std::optional<::std::shared_ptr<MyInterfacePrx>>& p1, std::optional<::std::shared_ptr<MyInterfacePrx>>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpMyInterfaceProxyResult>(true, this, &InitialPrx::_iceI_opMyInterfaceProxy, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opMyInterfaceProxyAsync(const std::optional<::std::shared_ptr<MyInterfacePrx>>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpMyInterfaceProxyResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpMyInterfaceProxyResult, P>(false, this, &InitialPrx::_iceI_opMyInterfaceProxy, p1, context);
    }

    ::std::function<void()>
    opMyInterfaceProxyAsync(const std::optional<::std::shared_ptr<MyInterfacePrx>>& p1,
                            ::std::function<void(std::optional<::std::shared_ptr<::Test::MyInterfacePrx>>, std::optional<::std::shared_ptr<::Test::MyInterfacePrx>>)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpMyInterfaceProxyResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpMyInterfaceProxyResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMyInterfaceProxy, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opMyInterfaceProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMyInterfaceProxyResult>>&, const std::optional<::std::shared_ptr<MyInterfacePrx>>&, const ::Ice::Context&);
    /// \endcond

    std::optional<::std::shared_ptr<MyInterfacePrx>> opMyInterfaceProxyReq(const std::optional<::std::shared_ptr<MyInterfacePrx>>& p1, std::optional<::std::shared_ptr<MyInterfacePrx>>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpMyInterfaceProxyReqResult>(true, this, &InitialPrx::_iceI_opMyInterfaceProxyReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opMyInterfaceProxyReqAsync(const std::optional<::std::shared_ptr<MyInterfacePrx>>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpMyInterfaceProxyReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpMyInterfaceProxyReqResult, P>(false, this, &InitialPrx::_iceI_opMyInterfaceProxyReq, p1, context);
    }

    ::std::function<void()>
    opMyInterfaceProxyReqAsync(const std::optional<::std::shared_ptr<MyInterfacePrx>>& p1,
                               ::std::function<void(std::optional<::std::shared_ptr<::Test::MyInterfacePrx>>, std::optional<::std::shared_ptr<::Test::MyInterfacePrx>>)> response,
                               ::std::function<void(::std::exception_ptr)> ex = nullptr,
                               ::std::function<void(bool)> sent = nullptr,
                               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpMyInterfaceProxyReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpMyInterfaceProxyReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMyInterfaceProxyReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opMyInterfaceProxyReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMyInterfaceProxyReqResult>>&, const std::optional<::std::shared_ptr<MyInterfacePrx>>&, const ::Ice::Context&);
    /// \endcond

    std::optional<ByteSeq> opByteSeq(const std::optional<ByteSeq>& p1, std::optional<ByteSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpByteSeqResult>(true, this, &InitialPrx::_iceI_opByteSeq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opByteSeqAsync(const std::optional<ByteSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpByteSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpByteSeqResult, P>(false, this, &InitialPrx::_iceI_opByteSeq, p1, context);
    }

    ::std::function<void()>
    opByteSeqAsync(const std::optional<ByteSeq>& p1,
                   ::std::function<void(std::optional<::Test::ByteSeq>, std::optional<::Test::ByteSeq>)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpByteSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpByteSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opByteSeq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opByteSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpByteSeqResult>>&, const std::optional<ByteSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<ByteSeq> opByteSeqReq(const std::optional<ByteSeq>& p1, std::optional<ByteSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpByteSeqReqResult>(true, this, &InitialPrx::_iceI_opByteSeqReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opByteSeqReqAsync(const std::optional<ByteSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpByteSeqReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpByteSeqReqResult, P>(false, this, &InitialPrx::_iceI_opByteSeqReq, p1, context);
    }

    ::std::function<void()>
    opByteSeqReqAsync(const std::optional<ByteSeq>& p1,
                      ::std::function<void(std::optional<::Test::ByteSeq>, std::optional<::Test::ByteSeq>)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpByteSeqReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpByteSeqReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opByteSeqReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opByteSeqReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpByteSeqReqResult>>&, const std::optional<ByteSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<BoolSeq> opBoolSeq(const std::optional<BoolSeq>& p1, std::optional<BoolSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpBoolSeqResult>(true, this, &InitialPrx::_iceI_opBoolSeq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opBoolSeqAsync(const std::optional<BoolSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpBoolSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpBoolSeqResult, P>(false, this, &InitialPrx::_iceI_opBoolSeq, p1, context);
    }

    ::std::function<void()>
    opBoolSeqAsync(const std::optional<BoolSeq>& p1,
                   ::std::function<void(std::optional<::Test::BoolSeq>, std::optional<::Test::BoolSeq>)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpBoolSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpBoolSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opBoolSeq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opBoolSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpBoolSeqResult>>&, const std::optional<BoolSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<BoolSeq> opBoolSeqReq(const std::optional<BoolSeq>& p1, std::optional<BoolSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpBoolSeqReqResult>(true, this, &InitialPrx::_iceI_opBoolSeqReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opBoolSeqReqAsync(const std::optional<BoolSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpBoolSeqReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpBoolSeqReqResult, P>(false, this, &InitialPrx::_iceI_opBoolSeqReq, p1, context);
    }

    ::std::function<void()>
    opBoolSeqReqAsync(const std::optional<BoolSeq>& p1,
                      ::std::function<void(std::optional<::Test::BoolSeq>, std::optional<::Test::BoolSeq>)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpBoolSeqReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpBoolSeqReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opBoolSeqReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opBoolSeqReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpBoolSeqReqResult>>&, const std::optional<BoolSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<ShortSeq> opShortSeq(const std::optional<ShortSeq>& p1, std::optional<ShortSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpShortSeqResult>(true, this, &InitialPrx::_iceI_opShortSeq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opShortSeqAsync(const std::optional<ShortSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpShortSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpShortSeqResult, P>(false, this, &InitialPrx::_iceI_opShortSeq, p1, context);
    }

    ::std::function<void()>
    opShortSeqAsync(const std::optional<ShortSeq>& p1,
                    ::std::function<void(std::optional<::Test::ShortSeq>, std::optional<::Test::ShortSeq>)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpShortSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpShortSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opShortSeq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opShortSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpShortSeqResult>>&, const std::optional<ShortSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<ShortSeq> opShortSeqReq(const std::optional<ShortSeq>& p1, std::optional<ShortSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpShortSeqReqResult>(true, this, &InitialPrx::_iceI_opShortSeqReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opShortSeqReqAsync(const std::optional<ShortSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpShortSeqReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpShortSeqReqResult, P>(false, this, &InitialPrx::_iceI_opShortSeqReq, p1, context);
    }

    ::std::function<void()>
    opShortSeqReqAsync(const std::optional<ShortSeq>& p1,
                       ::std::function<void(std::optional<::Test::ShortSeq>, std::optional<::Test::ShortSeq>)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpShortSeqReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpShortSeqReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opShortSeqReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opShortSeqReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpShortSeqReqResult>>&, const std::optional<ShortSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<IntSeq> opIntSeq(const std::optional<IntSeq>& p1, std::optional<IntSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpIntSeqResult>(true, this, &InitialPrx::_iceI_opIntSeq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opIntSeqAsync(const std::optional<IntSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpIntSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpIntSeqResult, P>(false, this, &InitialPrx::_iceI_opIntSeq, p1, context);
    }

    ::std::function<void()>
    opIntSeqAsync(const std::optional<IntSeq>& p1,
                  ::std::function<void(std::optional<::Test::IntSeq>, std::optional<::Test::IntSeq>)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpIntSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpIntSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opIntSeq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opIntSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntSeqResult>>&, const std::optional<IntSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<IntSeq> opIntSeqReq(const std::optional<IntSeq>& p1, std::optional<IntSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpIntSeqReqResult>(true, this, &InitialPrx::_iceI_opIntSeqReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opIntSeqReqAsync(const std::optional<IntSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpIntSeqReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpIntSeqReqResult, P>(false, this, &InitialPrx::_iceI_opIntSeqReq, p1, context);
    }

    ::std::function<void()>
    opIntSeqReqAsync(const std::optional<IntSeq>& p1,
                     ::std::function<void(std::optional<::Test::IntSeq>, std::optional<::Test::IntSeq>)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpIntSeqReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpIntSeqReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opIntSeqReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opIntSeqReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntSeqReqResult>>&, const std::optional<IntSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<LongSeq> opLongSeq(const std::optional<LongSeq>& p1, std::optional<LongSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpLongSeqResult>(true, this, &InitialPrx::_iceI_opLongSeq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opLongSeqAsync(const std::optional<LongSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpLongSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpLongSeqResult, P>(false, this, &InitialPrx::_iceI_opLongSeq, p1, context);
    }

    ::std::function<void()>
    opLongSeqAsync(const std::optional<LongSeq>& p1,
                   ::std::function<void(std::optional<::Test::LongSeq>, std::optional<::Test::LongSeq>)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpLongSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpLongSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opLongSeq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opLongSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpLongSeqResult>>&, const std::optional<LongSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<LongSeq> opLongSeqReq(const std::optional<LongSeq>& p1, std::optional<LongSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpLongSeqReqResult>(true, this, &InitialPrx::_iceI_opLongSeqReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opLongSeqReqAsync(const std::optional<LongSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpLongSeqReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpLongSeqReqResult, P>(false, this, &InitialPrx::_iceI_opLongSeqReq, p1, context);
    }

    ::std::function<void()>
    opLongSeqReqAsync(const std::optional<LongSeq>& p1,
                      ::std::function<void(std::optional<::Test::LongSeq>, std::optional<::Test::LongSeq>)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpLongSeqReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpLongSeqReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opLongSeqReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opLongSeqReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpLongSeqReqResult>>&, const std::optional<LongSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<FloatSeq> opFloatSeq(const std::optional<FloatSeq>& p1, std::optional<FloatSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpFloatSeqResult>(true, this, &InitialPrx::_iceI_opFloatSeq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opFloatSeqAsync(const std::optional<FloatSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpFloatSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpFloatSeqResult, P>(false, this, &InitialPrx::_iceI_opFloatSeq, p1, context);
    }

    ::std::function<void()>
    opFloatSeqAsync(const std::optional<FloatSeq>& p1,
                    ::std::function<void(std::optional<::Test::FloatSeq>, std::optional<::Test::FloatSeq>)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpFloatSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpFloatSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFloatSeq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opFloatSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFloatSeqResult>>&, const std::optional<FloatSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<FloatSeq> opFloatSeqReq(const std::optional<FloatSeq>& p1, std::optional<FloatSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpFloatSeqReqResult>(true, this, &InitialPrx::_iceI_opFloatSeqReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opFloatSeqReqAsync(const std::optional<FloatSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpFloatSeqReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpFloatSeqReqResult, P>(false, this, &InitialPrx::_iceI_opFloatSeqReq, p1, context);
    }

    ::std::function<void()>
    opFloatSeqReqAsync(const std::optional<FloatSeq>& p1,
                       ::std::function<void(std::optional<::Test::FloatSeq>, std::optional<::Test::FloatSeq>)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpFloatSeqReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpFloatSeqReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFloatSeqReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opFloatSeqReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFloatSeqReqResult>>&, const std::optional<FloatSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<DoubleSeq> opDoubleSeq(const std::optional<DoubleSeq>& p1, std::optional<DoubleSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpDoubleSeqResult>(true, this, &InitialPrx::_iceI_opDoubleSeq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opDoubleSeqAsync(const std::optional<DoubleSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpDoubleSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpDoubleSeqResult, P>(false, this, &InitialPrx::_iceI_opDoubleSeq, p1, context);
    }

    ::std::function<void()>
    opDoubleSeqAsync(const std::optional<DoubleSeq>& p1,
                     ::std::function<void(std::optional<::Test::DoubleSeq>, std::optional<::Test::DoubleSeq>)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpDoubleSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpDoubleSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opDoubleSeq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opDoubleSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpDoubleSeqResult>>&, const std::optional<DoubleSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<DoubleSeq> opDoubleSeqReq(const std::optional<DoubleSeq>& p1, std::optional<DoubleSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpDoubleSeqReqResult>(true, this, &InitialPrx::_iceI_opDoubleSeqReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opDoubleSeqReqAsync(const std::optional<DoubleSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpDoubleSeqReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpDoubleSeqReqResult, P>(false, this, &InitialPrx::_iceI_opDoubleSeqReq, p1, context);
    }

    ::std::function<void()>
    opDoubleSeqReqAsync(const std::optional<DoubleSeq>& p1,
                        ::std::function<void(std::optional<::Test::DoubleSeq>, std::optional<::Test::DoubleSeq>)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpDoubleSeqReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpDoubleSeqReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opDoubleSeqReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opDoubleSeqReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpDoubleSeqReqResult>>&, const std::optional<DoubleSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<StringSeq> opStringSeq(const std::optional<StringSeq>& p1, std::optional<StringSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpStringSeqResult>(true, this, &InitialPrx::_iceI_opStringSeq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opStringSeqAsync(const std::optional<StringSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpStringSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpStringSeqResult, P>(false, this, &InitialPrx::_iceI_opStringSeq, p1, context);
    }

    ::std::function<void()>
    opStringSeqAsync(const std::optional<StringSeq>& p1,
                     ::std::function<void(std::optional<::Test::StringSeq>, std::optional<::Test::StringSeq>)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpStringSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpStringSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opStringSeq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opStringSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpStringSeqResult>>&, const std::optional<StringSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<StringSeq> opStringSeqReq(const std::optional<StringSeq>& p1, std::optional<StringSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpStringSeqReqResult>(true, this, &InitialPrx::_iceI_opStringSeqReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opStringSeqReqAsync(const std::optional<StringSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpStringSeqReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpStringSeqReqResult, P>(false, this, &InitialPrx::_iceI_opStringSeqReq, p1, context);
    }

    ::std::function<void()>
    opStringSeqReqAsync(const std::optional<StringSeq>& p1,
                        ::std::function<void(std::optional<::Test::StringSeq>, std::optional<::Test::StringSeq>)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpStringSeqReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpStringSeqReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opStringSeqReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opStringSeqReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpStringSeqReqResult>>&, const std::optional<StringSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<SmallStructSeq> opSmallStructSeq(const std::optional<SmallStructSeq>& p1, std::optional<SmallStructSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpSmallStructSeqResult>(true, this, &InitialPrx::_iceI_opSmallStructSeq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSmallStructSeqAsync(const std::optional<SmallStructSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpSmallStructSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpSmallStructSeqResult, P>(false, this, &InitialPrx::_iceI_opSmallStructSeq, p1, context);
    }

    ::std::function<void()>
    opSmallStructSeqAsync(const std::optional<SmallStructSeq>& p1,
                          ::std::function<void(std::optional<::Test::SmallStructSeq>, std::optional<::Test::SmallStructSeq>)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpSmallStructSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpSmallStructSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSmallStructSeq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSmallStructSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSmallStructSeqResult>>&, const std::optional<SmallStructSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<SmallStructSeq> opSmallStructSeqReq(const std::optional<SmallStructSeq>& p1, std::optional<SmallStructSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpSmallStructSeqReqResult>(true, this, &InitialPrx::_iceI_opSmallStructSeqReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSmallStructSeqReqAsync(const std::optional<SmallStructSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpSmallStructSeqReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpSmallStructSeqReqResult, P>(false, this, &InitialPrx::_iceI_opSmallStructSeqReq, p1, context);
    }

    ::std::function<void()>
    opSmallStructSeqReqAsync(const std::optional<SmallStructSeq>& p1,
                             ::std::function<void(std::optional<::Test::SmallStructSeq>, std::optional<::Test::SmallStructSeq>)> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpSmallStructSeqReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpSmallStructSeqReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSmallStructSeqReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSmallStructSeqReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSmallStructSeqReqResult>>&, const std::optional<SmallStructSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<SmallStructList> opSmallStructList(const std::optional<SmallStructList>& p1, std::optional<SmallStructList>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpSmallStructListResult>(true, this, &InitialPrx::_iceI_opSmallStructList, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSmallStructListAsync(const std::optional<SmallStructList>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpSmallStructListResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpSmallStructListResult, P>(false, this, &InitialPrx::_iceI_opSmallStructList, p1, context);
    }

    ::std::function<void()>
    opSmallStructListAsync(const std::optional<SmallStructList>& p1,
                           ::std::function<void(std::optional<::Test::SmallStructList>, std::optional<::Test::SmallStructList>)> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpSmallStructListResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpSmallStructListResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSmallStructList, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSmallStructList(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSmallStructListResult>>&, const std::optional<SmallStructList>&, const ::Ice::Context&);
    /// \endcond

    std::optional<SmallStructList> opSmallStructListReq(const std::optional<SmallStructList>& p1, std::optional<SmallStructList>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpSmallStructListReqResult>(true, this, &InitialPrx::_iceI_opSmallStructListReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSmallStructListReqAsync(const std::optional<SmallStructList>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpSmallStructListReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpSmallStructListReqResult, P>(false, this, &InitialPrx::_iceI_opSmallStructListReq, p1, context);
    }

    ::std::function<void()>
    opSmallStructListReqAsync(const std::optional<SmallStructList>& p1,
                              ::std::function<void(std::optional<::Test::SmallStructList>, std::optional<::Test::SmallStructList>)> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpSmallStructListReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpSmallStructListReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSmallStructListReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSmallStructListReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSmallStructListReqResult>>&, const std::optional<SmallStructList>&, const ::Ice::Context&);
    /// \endcond

    std::optional<FixedStructSeq> opFixedStructSeq(const std::optional<FixedStructSeq>& p1, std::optional<FixedStructSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpFixedStructSeqResult>(true, this, &InitialPrx::_iceI_opFixedStructSeq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opFixedStructSeqAsync(const std::optional<FixedStructSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpFixedStructSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpFixedStructSeqResult, P>(false, this, &InitialPrx::_iceI_opFixedStructSeq, p1, context);
    }

    ::std::function<void()>
    opFixedStructSeqAsync(const std::optional<FixedStructSeq>& p1,
                          ::std::function<void(std::optional<::Test::FixedStructSeq>, std::optional<::Test::FixedStructSeq>)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpFixedStructSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpFixedStructSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFixedStructSeq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opFixedStructSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFixedStructSeqResult>>&, const std::optional<FixedStructSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<FixedStructSeq> opFixedStructSeqReq(const std::optional<FixedStructSeq>& p1, std::optional<FixedStructSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpFixedStructSeqReqResult>(true, this, &InitialPrx::_iceI_opFixedStructSeqReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opFixedStructSeqReqAsync(const std::optional<FixedStructSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpFixedStructSeqReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpFixedStructSeqReqResult, P>(false, this, &InitialPrx::_iceI_opFixedStructSeqReq, p1, context);
    }

    ::std::function<void()>
    opFixedStructSeqReqAsync(const std::optional<FixedStructSeq>& p1,
                             ::std::function<void(std::optional<::Test::FixedStructSeq>, std::optional<::Test::FixedStructSeq>)> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpFixedStructSeqReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpFixedStructSeqReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFixedStructSeqReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opFixedStructSeqReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFixedStructSeqReqResult>>&, const std::optional<FixedStructSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<FixedStructList> opFixedStructList(const std::optional<FixedStructList>& p1, std::optional<FixedStructList>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpFixedStructListResult>(true, this, &InitialPrx::_iceI_opFixedStructList, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opFixedStructListAsync(const std::optional<FixedStructList>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpFixedStructListResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpFixedStructListResult, P>(false, this, &InitialPrx::_iceI_opFixedStructList, p1, context);
    }

    ::std::function<void()>
    opFixedStructListAsync(const std::optional<FixedStructList>& p1,
                           ::std::function<void(std::optional<::Test::FixedStructList>, std::optional<::Test::FixedStructList>)> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpFixedStructListResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpFixedStructListResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFixedStructList, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opFixedStructList(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFixedStructListResult>>&, const std::optional<FixedStructList>&, const ::Ice::Context&);
    /// \endcond

    std::optional<FixedStructList> opFixedStructListReq(const std::optional<FixedStructList>& p1, std::optional<FixedStructList>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpFixedStructListReqResult>(true, this, &InitialPrx::_iceI_opFixedStructListReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opFixedStructListReqAsync(const std::optional<FixedStructList>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpFixedStructListReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpFixedStructListReqResult, P>(false, this, &InitialPrx::_iceI_opFixedStructListReq, p1, context);
    }

    ::std::function<void()>
    opFixedStructListReqAsync(const std::optional<FixedStructList>& p1,
                              ::std::function<void(std::optional<::Test::FixedStructList>, std::optional<::Test::FixedStructList>)> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpFixedStructListReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpFixedStructListReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFixedStructListReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opFixedStructListReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpFixedStructListReqResult>>&, const std::optional<FixedStructList>&, const ::Ice::Context&);
    /// \endcond

    std::optional<VarStructSeq> opVarStructSeq(const std::optional<VarStructSeq>& p1, std::optional<VarStructSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpVarStructSeqResult>(true, this, &InitialPrx::_iceI_opVarStructSeq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opVarStructSeqAsync(const std::optional<VarStructSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpVarStructSeqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpVarStructSeqResult, P>(false, this, &InitialPrx::_iceI_opVarStructSeq, p1, context);
    }

    ::std::function<void()>
    opVarStructSeqAsync(const std::optional<VarStructSeq>& p1,
                        ::std::function<void(std::optional<::Test::VarStructSeq>, std::optional<::Test::VarStructSeq>)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpVarStructSeqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpVarStructSeqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opVarStructSeq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opVarStructSeq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpVarStructSeqResult>>&, const std::optional<VarStructSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<VarStructSeq> opVarStructSeqReq(const std::optional<VarStructSeq>& p1, std::optional<VarStructSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpVarStructSeqReqResult>(true, this, &InitialPrx::_iceI_opVarStructSeqReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opVarStructSeqReqAsync(const std::optional<VarStructSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpVarStructSeqReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpVarStructSeqReqResult, P>(false, this, &InitialPrx::_iceI_opVarStructSeqReq, p1, context);
    }

    ::std::function<void()>
    opVarStructSeqReqAsync(const std::optional<VarStructSeq>& p1,
                           ::std::function<void(std::optional<::Test::VarStructSeq>, std::optional<::Test::VarStructSeq>)> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpVarStructSeqReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpVarStructSeqReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opVarStructSeqReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opVarStructSeqReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpVarStructSeqReqResult>>&, const std::optional<VarStructSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<Serializable> opSerializable(const std::optional<Serializable>& p1, std::optional<Serializable>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpSerializableResult>(true, this, &InitialPrx::_iceI_opSerializable, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSerializableAsync(const std::optional<Serializable>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpSerializableResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpSerializableResult, P>(false, this, &InitialPrx::_iceI_opSerializable, p1, context);
    }

    ::std::function<void()>
    opSerializableAsync(const std::optional<Serializable>& p1,
                        ::std::function<void(std::optional<::Test::Serializable>, std::optional<::Test::Serializable>)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpSerializableResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpSerializableResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSerializable, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSerializable(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSerializableResult>>&, const std::optional<Serializable>&, const ::Ice::Context&);
    /// \endcond

    std::optional<Serializable> opSerializableReq(const std::optional<Serializable>& p1, std::optional<Serializable>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpSerializableReqResult>(true, this, &InitialPrx::_iceI_opSerializableReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opSerializableReqAsync(const std::optional<Serializable>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpSerializableReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpSerializableReqResult, P>(false, this, &InitialPrx::_iceI_opSerializableReq, p1, context);
    }

    ::std::function<void()>
    opSerializableReqAsync(const std::optional<Serializable>& p1,
                           ::std::function<void(std::optional<::Test::Serializable>, std::optional<::Test::Serializable>)> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpSerializableReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpSerializableReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSerializableReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opSerializableReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpSerializableReqResult>>&, const std::optional<Serializable>&, const ::Ice::Context&);
    /// \endcond

    std::optional<IntIntDict> opIntIntDict(const std::optional<IntIntDict>& p1, std::optional<IntIntDict>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpIntIntDictResult>(true, this, &InitialPrx::_iceI_opIntIntDict, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opIntIntDictAsync(const std::optional<IntIntDict>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpIntIntDictResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpIntIntDictResult, P>(false, this, &InitialPrx::_iceI_opIntIntDict, p1, context);
    }

    ::std::function<void()>
    opIntIntDictAsync(const std::optional<IntIntDict>& p1,
                      ::std::function<void(std::optional<::Test::IntIntDict>, std::optional<::Test::IntIntDict>)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpIntIntDictResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpIntIntDictResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opIntIntDict, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opIntIntDict(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntIntDictResult>>&, const std::optional<IntIntDict>&, const ::Ice::Context&);
    /// \endcond

    std::optional<IntIntDict> opIntIntDictReq(const std::optional<IntIntDict>& p1, std::optional<IntIntDict>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpIntIntDictReqResult>(true, this, &InitialPrx::_iceI_opIntIntDictReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opIntIntDictReqAsync(const std::optional<IntIntDict>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpIntIntDictReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpIntIntDictReqResult, P>(false, this, &InitialPrx::_iceI_opIntIntDictReq, p1, context);
    }

    ::std::function<void()>
    opIntIntDictReqAsync(const std::optional<IntIntDict>& p1,
                         ::std::function<void(std::optional<::Test::IntIntDict>, std::optional<::Test::IntIntDict>)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpIntIntDictReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpIntIntDictReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opIntIntDictReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opIntIntDictReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntIntDictReqResult>>&, const std::optional<IntIntDict>&, const ::Ice::Context&);
    /// \endcond

    std::optional<StringIntDict> opStringIntDict(const std::optional<StringIntDict>& p1, std::optional<StringIntDict>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpStringIntDictResult>(true, this, &InitialPrx::_iceI_opStringIntDict, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opStringIntDictAsync(const std::optional<StringIntDict>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpStringIntDictResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpStringIntDictResult, P>(false, this, &InitialPrx::_iceI_opStringIntDict, p1, context);
    }

    ::std::function<void()>
    opStringIntDictAsync(const std::optional<StringIntDict>& p1,
                         ::std::function<void(std::optional<::Test::StringIntDict>, std::optional<::Test::StringIntDict>)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpStringIntDictResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpStringIntDictResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opStringIntDict, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opStringIntDict(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpStringIntDictResult>>&, const std::optional<StringIntDict>&, const ::Ice::Context&);
    /// \endcond

    std::optional<StringIntDict> opStringIntDictReq(const std::optional<StringIntDict>& p1, std::optional<StringIntDict>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpStringIntDictReqResult>(true, this, &InitialPrx::_iceI_opStringIntDictReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opStringIntDictReqAsync(const std::optional<StringIntDict>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpStringIntDictReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpStringIntDictReqResult, P>(false, this, &InitialPrx::_iceI_opStringIntDictReq, p1, context);
    }

    ::std::function<void()>
    opStringIntDictReqAsync(const std::optional<StringIntDict>& p1,
                            ::std::function<void(std::optional<::Test::StringIntDict>, std::optional<::Test::StringIntDict>)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpStringIntDictReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpStringIntDictReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opStringIntDictReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opStringIntDictReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpStringIntDictReqResult>>&, const std::optional<StringIntDict>&, const ::Ice::Context&);
    /// \endcond

    std::optional<IntOneOptionalDict> opIntOneOptionalDict(const std::optional<IntOneOptionalDict>& p1, std::optional<IntOneOptionalDict>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpIntOneOptionalDictResult>(true, this, &InitialPrx::_iceI_opIntOneOptionalDict, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opIntOneOptionalDictAsync(const std::optional<IntOneOptionalDict>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpIntOneOptionalDictResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpIntOneOptionalDictResult, P>(false, this, &InitialPrx::_iceI_opIntOneOptionalDict, p1, context);
    }

    ::std::function<void()>
    opIntOneOptionalDictAsync(const std::optional<IntOneOptionalDict>& p1,
                              ::std::function<void(std::optional<::Test::IntOneOptionalDict>, std::optional<::Test::IntOneOptionalDict>)> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpIntOneOptionalDictResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpIntOneOptionalDictResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opIntOneOptionalDict, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opIntOneOptionalDict(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntOneOptionalDictResult>>&, const std::optional<IntOneOptionalDict>&, const ::Ice::Context&);
    /// \endcond

    std::optional<IntOneOptionalDict> opIntOneOptionalDictReq(const std::optional<IntOneOptionalDict>& p1, std::optional<IntOneOptionalDict>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpIntOneOptionalDictReqResult>(true, this, &InitialPrx::_iceI_opIntOneOptionalDictReq, p1, context).get();
        p3 = ::std::move(_result.p3);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opIntOneOptionalDictReqAsync(const std::optional<IntOneOptionalDict>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpIntOneOptionalDictReqResult>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpIntOneOptionalDictReqResult, P>(false, this, &InitialPrx::_iceI_opIntOneOptionalDictReq, p1, context);
    }

    ::std::function<void()>
    opIntOneOptionalDictReqAsync(const std::optional<IntOneOptionalDict>& p1,
                                 ::std::function<void(std::optional<::Test::IntOneOptionalDict>, std::optional<::Test::IntOneOptionalDict>)> response,
                                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                 ::std::function<void(bool)> sent = nullptr,
                                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpIntOneOptionalDictReqResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p3));
        };
        return _makeLambdaOutgoing<Initial::OpIntOneOptionalDictReqResult>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opIntOneOptionalDictReq, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opIntOneOptionalDictReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpIntOneOptionalDictReqResult>>&, const std::optional<IntOneOptionalDict>&, const ::Ice::Context&);
    /// \endcond

    void opClassAndUnknownOptional(const ::std::shared_ptr<A>& p, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_opClassAndUnknownOptional, p, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opClassAndUnknownOptionalAsync(const ::std::shared_ptr<A>& p, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_opClassAndUnknownOptional, p, context);
    }

    ::std::function<void()>
    opClassAndUnknownOptionalAsync(const ::std::shared_ptr<A>& p,
                                   ::std::function<void()> response,
                                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                   ::std::function<void(bool)> sent = nullptr,
                                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opClassAndUnknownOptional, p, context);
    }

    /// \cond INTERNAL
    void _iceI_opClassAndUnknownOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<A>&, const ::Ice::Context&);
    /// \endcond

    void sendOptionalClass(bool req, const std::optional<::std::shared_ptr<OneOptional>>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_sendOptionalClass, req, o, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendOptionalClassAsync(bool req, const std::optional<::std::shared_ptr<OneOptional>>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_sendOptionalClass, req, o, context);
    }

    ::std::function<void()>
    sendOptionalClassAsync(bool req, const std::optional<::std::shared_ptr<OneOptional>>& o,
                           ::std::function<void()> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_sendOptionalClass, req, o, context);
    }

    /// \cond INTERNAL
    void _iceI_sendOptionalClass(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, bool, const std::optional<::std::shared_ptr<OneOptional>>&, const ::Ice::Context&);
    /// \endcond

    void returnOptionalClass(bool req, std::optional<::std::shared_ptr<OneOptional>>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        o = _makePromiseOutgoing<std::optional<::std::shared_ptr<::Test::OneOptional>>>(true, this, &InitialPrx::_iceI_returnOptionalClass, req, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto returnOptionalClassAsync(bool req, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<std::optional<::std::shared_ptr<::Test::OneOptional>>>>().get_future())
    {
        return _makePromiseOutgoing<std::optional<::std::shared_ptr<::Test::OneOptional>>, P>(false, this, &InitialPrx::_iceI_returnOptionalClass, req, context);
    }

    ::std::function<void()>
    returnOptionalClassAsync(bool req,
                             ::std::function<void(std::optional<::std::shared_ptr<::Test::OneOptional>>)> response,
                             ::std::function<void(::std::exception_ptr)> ex = nullptr,
                             ::std::function<void(bool)> sent = nullptr,
                             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<std::optional<::std::shared_ptr<::Test::OneOptional>>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_returnOptionalClass, req, context);
    }

    /// \cond INTERNAL
    void _iceI_returnOptionalClass(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::std::shared_ptr<::Test::OneOptional>>>>&, bool, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<G> opG(const ::std::shared_ptr<G>& g, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::G>>(true, this, &InitialPrx::_iceI_opG, g, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opGAsync(const ::std::shared_ptr<G>& g, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<::Test::G>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<::Test::G>, P>(false, this, &InitialPrx::_iceI_opG, g, context);
    }

    ::std::function<void()>
    opGAsync(const ::std::shared_ptr<G>& g,
             ::std::function<void(::std::shared_ptr<::Test::G>)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<::std::shared_ptr<::Test::G>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opG, g, context);
    }

    /// \cond INTERNAL
    void _iceI_opG(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Test::G>>>&, const ::std::shared_ptr<G>&, const ::Ice::Context&);
    /// \endcond

    void opVoid(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_opVoid, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opVoidAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &InitialPrx::_iceI_opVoid, context);
    }

    ::std::function<void()>
    opVoidAsync(::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opVoid, context);
    }

    /// \cond INTERNAL
    void _iceI_opVoid(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    std::optional<SmallStruct> opMStruct1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<std::optional<::Test::SmallStruct>>(true, this, &InitialPrx::_iceI_opMStruct1, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opMStruct1Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<std::optional<::Test::SmallStruct>>>().get_future())
    {
        return _makePromiseOutgoing<std::optional<::Test::SmallStruct>, P>(false, this, &InitialPrx::_iceI_opMStruct1, context);
    }

    ::std::function<void()>
    opMStruct1Async(::std::function<void(std::optional<::Test::SmallStruct>)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<std::optional<::Test::SmallStruct>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMStruct1, context);
    }

    /// \cond INTERNAL
    void _iceI_opMStruct1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::Test::SmallStruct>>>&, const ::Ice::Context&);
    /// \endcond

    std::optional<SmallStruct> opMStruct2(const std::optional<SmallStruct>& p1, std::optional<SmallStruct>& p2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpMStruct2Result>(true, this, &InitialPrx::_iceI_opMStruct2, p1, context).get();
        p2 = ::std::move(_result.p2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opMStruct2Async(const std::optional<SmallStruct>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpMStruct2Result>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpMStruct2Result, P>(false, this, &InitialPrx::_iceI_opMStruct2, p1, context);
    }

    ::std::function<void()>
    opMStruct2Async(const std::optional<SmallStruct>& p1,
                    ::std::function<void(std::optional<::Test::SmallStruct>, std::optional<::Test::SmallStruct>)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpMStruct2Result&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p2));
        };
        return _makeLambdaOutgoing<Initial::OpMStruct2Result>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMStruct2, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opMStruct2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMStruct2Result>>&, const std::optional<SmallStruct>&, const ::Ice::Context&);
    /// \endcond

    std::optional<StringSeq> opMSeq1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<std::optional<::Test::StringSeq>>(true, this, &InitialPrx::_iceI_opMSeq1, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opMSeq1Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<std::optional<::Test::StringSeq>>>().get_future())
    {
        return _makePromiseOutgoing<std::optional<::Test::StringSeq>, P>(false, this, &InitialPrx::_iceI_opMSeq1, context);
    }

    ::std::function<void()>
    opMSeq1Async(::std::function<void(std::optional<::Test::StringSeq>)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<std::optional<::Test::StringSeq>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMSeq1, context);
    }

    /// \cond INTERNAL
    void _iceI_opMSeq1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::Test::StringSeq>>>&, const ::Ice::Context&);
    /// \endcond

    std::optional<StringSeq> opMSeq2(const std::optional<StringSeq>& p1, std::optional<StringSeq>& p2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpMSeq2Result>(true, this, &InitialPrx::_iceI_opMSeq2, p1, context).get();
        p2 = ::std::move(_result.p2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opMSeq2Async(const std::optional<StringSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpMSeq2Result>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpMSeq2Result, P>(false, this, &InitialPrx::_iceI_opMSeq2, p1, context);
    }

    ::std::function<void()>
    opMSeq2Async(const std::optional<StringSeq>& p1,
                 ::std::function<void(std::optional<::Test::StringSeq>, std::optional<::Test::StringSeq>)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpMSeq2Result&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p2));
        };
        return _makeLambdaOutgoing<Initial::OpMSeq2Result>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMSeq2, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opMSeq2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMSeq2Result>>&, const std::optional<StringSeq>&, const ::Ice::Context&);
    /// \endcond

    std::optional<StringIntDict> opMDict1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<std::optional<::Test::StringIntDict>>(true, this, &InitialPrx::_iceI_opMDict1, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opMDict1Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<std::optional<::Test::StringIntDict>>>().get_future())
    {
        return _makePromiseOutgoing<std::optional<::Test::StringIntDict>, P>(false, this, &InitialPrx::_iceI_opMDict1, context);
    }

    ::std::function<void()>
    opMDict1Async(::std::function<void(std::optional<::Test::StringIntDict>)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<std::optional<::Test::StringIntDict>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMDict1, context);
    }

    /// \cond INTERNAL
    void _iceI_opMDict1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::Test::StringIntDict>>>&, const ::Ice::Context&);
    /// \endcond

    std::optional<StringIntDict> opMDict2(const std::optional<StringIntDict>& p1, std::optional<StringIntDict>& p2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpMDict2Result>(true, this, &InitialPrx::_iceI_opMDict2, p1, context).get();
        p2 = ::std::move(_result.p2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opMDict2Async(const std::optional<StringIntDict>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpMDict2Result>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpMDict2Result, P>(false, this, &InitialPrx::_iceI_opMDict2, p1, context);
    }

    ::std::function<void()>
    opMDict2Async(const std::optional<StringIntDict>& p1,
                  ::std::function<void(std::optional<::Test::StringIntDict>, std::optional<::Test::StringIntDict>)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpMDict2Result&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p2));
        };
        return _makeLambdaOutgoing<Initial::OpMDict2Result>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMDict2, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opMDict2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMDict2Result>>&, const std::optional<StringIntDict>&, const ::Ice::Context&);
    /// \endcond

    std::optional<::std::shared_ptr<G>> opMG1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<std::optional<::std::shared_ptr<::Test::G>>>(true, this, &InitialPrx::_iceI_opMG1, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto opMG1Async(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<std::optional<::std::shared_ptr<::Test::G>>>>().get_future())
    {
        return _makePromiseOutgoing<std::optional<::std::shared_ptr<::Test::G>>, P>(false, this, &InitialPrx::_iceI_opMG1, context);
    }

    ::std::function<void()>
    opMG1Async(::std::function<void(std::optional<::std::shared_ptr<::Test::G>>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<std::optional<::std::shared_ptr<::Test::G>>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMG1, context);
    }

    /// \cond INTERNAL
    void _iceI_opMG1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<std::optional<::std::shared_ptr<::Test::G>>>>&, const ::Ice::Context&);
    /// \endcond

    std::optional<::std::shared_ptr<G>> opMG2(const std::optional<::std::shared_ptr<G>>& p1, std::optional<::std::shared_ptr<G>>& p2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Initial::OpMG2Result>(true, this, &InitialPrx::_iceI_opMG2, p1, context).get();
        p2 = ::std::move(_result.p2);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto opMG2Async(const std::optional<::std::shared_ptr<G>>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Initial::OpMG2Result>>().get_future())
    {
        return _makePromiseOutgoing<Initial::OpMG2Result, P>(false, this, &InitialPrx::_iceI_opMG2, p1, context);
    }

    ::std::function<void()>
    opMG2Async(const std::optional<::std::shared_ptr<G>>& p1,
               ::std::function<void(std::optional<::std::shared_ptr<::Test::G>>, std::optional<::std::shared_ptr<::Test::G>>)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Initial::OpMG2Result&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.p2));
        };
        return _makeLambdaOutgoing<Initial::OpMG2Result>(std::move(_responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMG2, p1, context);
    }

    /// \cond INTERNAL
    void _iceI_opMG2(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Initial::OpMG2Result>>&, const std::optional<::std::shared_ptr<G>>&, const ::Ice::Context&);
    /// \endcond

    bool supportsRequiredParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_supportsRequiredParams, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto supportsRequiredParamsAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &InitialPrx::_iceI_supportsRequiredParams, context);
    }

    ::std::function<void()>
    supportsRequiredParamsAsync(::std::function<void(bool)> response,
                                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                ::std::function<void(bool)> sent = nullptr,
                                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_supportsRequiredParams, context);
    }

    /// \cond INTERNAL
    void _iceI_supportsRequiredParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    bool supportsJavaSerializable(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_supportsJavaSerializable, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto supportsJavaSerializableAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &InitialPrx::_iceI_supportsJavaSerializable, context);
    }

    ::std::function<void()>
    supportsJavaSerializableAsync(::std::function<void(bool)> response,
                                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                  ::std::function<void(bool)> sent = nullptr,
                                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_supportsJavaSerializable, context);
    }

    /// \cond INTERNAL
    void _iceI_supportsJavaSerializable(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    bool supportsCsharpSerializable(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_supportsCsharpSerializable, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto supportsCsharpSerializableAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &InitialPrx::_iceI_supportsCsharpSerializable, context);
    }

    ::std::function<void()>
    supportsCsharpSerializableAsync(::std::function<void(bool)> response,
                                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                    ::std::function<void(bool)> sent = nullptr,
                                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_supportsCsharpSerializable, context);
    }

    /// \cond INTERNAL
    void _iceI_supportsCsharpSerializable(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    bool supportsCppStringView(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_supportsCppStringView, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto supportsCppStringViewAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &InitialPrx::_iceI_supportsCppStringView, context);
    }

    ::std::function<void()>
    supportsCppStringViewAsync(::std::function<void(bool)> response,
                               ::std::function<void(::std::exception_ptr)> ex = nullptr,
                               ::std::function<void(bool)> sent = nullptr,
                               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_supportsCppStringView, context);
    }

    /// \cond INTERNAL
    void _iceI_supportsCppStringView(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    bool supportsNullOptional(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_supportsNullOptional, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto supportsNullOptionalAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &InitialPrx::_iceI_supportsNullOptional, context);
    }

    ::std::function<void()>
    supportsNullOptionalAsync(::std::function<void(bool)> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_supportsNullOptional, context);
    }

    /// \cond INTERNAL
    void _iceI_supportsNullOptional(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    InitialPrx() = default;
    friend ::std::shared_ptr<InitialPrx> IceInternal::createProxy<InitialPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter<::Test::OneOptional, S>
{
    static void write(S* ostr, const ::Test::OneOptional& v)
    {
        ostr->writeAll({1}, v.a);
    }
};

template<typename S>
struct StreamReader<::Test::OneOptional, S>
{
    static void read(S* istr, ::Test::OneOptional& v)
    {
        istr->readAll({1}, v.a);
    }
};

template<>
struct StreamableTraits< ::Test::MyEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::Test::SmallStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Test::SmallStruct, S>
{
    static void read(S* istr, ::Test::SmallStruct& v)
    {
        istr->readAll(v.m);
    }
};

template<>
struct StreamableTraits<::Test::FixedStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Test::FixedStruct, S>
{
    static void read(S* istr, ::Test::FixedStruct& v)
    {
        istr->readAll(v.m);
    }
};

template<>
struct StreamableTraits<::Test::VarStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Test::VarStruct, S>
{
    static void read(S* istr, ::Test::VarStruct& v)
    {
        istr->readAll(v.m);
    }
};

template<>
struct StreamableTraits<::Test::ClassVarStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Test::ClassVarStruct, S>
{
    static void read(S* istr, ::Test::ClassVarStruct& v)
    {
        istr->readAll(v.a);
    }
};

template<typename S>
struct StreamWriter<::Test::MultiOptional, S>
{
    static void write(S* ostr, const ::Test::MultiOptional& v)
    {
        ostr->writeAll({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}, v.a, v.b, v.c, v.d, v.e, v.f, v.g, v.h, v.i, v.j, v.k, v.bs, v.ss, v.iid, v.sid, v.fs, v.vs, v.shs, v.es, v.fss, v.vss, v.oos, v.mips, v.ied, v.ifsd, v.ivsd, v.iood, v.imipd, v.bos, v.ser);
    }
};

template<typename S>
struct StreamReader<::Test::MultiOptional, S>
{
    static void read(S* istr, ::Test::MultiOptional& v)
    {
        istr->readAll({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}, v.a, v.b, v.c, v.d, v.e, v.f, v.g, v.h, v.i, v.j, v.k, v.bs, v.ss, v.iid, v.sid, v.fs, v.vs, v.shs, v.es, v.fss, v.vss, v.oos, v.mips, v.ied, v.ifsd, v.ivsd, v.iood, v.imipd, v.bos, v.ser);
    }
};

template<typename S>
struct StreamWriter<::Test::A, S>
{
    static void write(S* ostr, const ::Test::A& v)
    {
        ostr->writeAll(v.requiredA);
        ostr->writeAll({1, 50, 500}, v.ma, v.mb, v.mc);
    }
};

template<typename S>
struct StreamReader<::Test::A, S>
{
    static void read(S* istr, ::Test::A& v)
    {
        istr->readAll(v.requiredA);
        istr->readAll({1, 50, 500}, v.ma, v.mb, v.mc);
    }
};

template<typename S>
struct StreamWriter<::Test::B, S>
{
    static void write(S* ostr, const ::Test::B& v)
    {
        ostr->writeAll(v.requiredB);
        ostr->writeAll({10}, v.md);
    }
};

template<typename S>
struct StreamReader<::Test::B, S>
{
    static void read(S* istr, ::Test::B& v)
    {
        istr->readAll(v.requiredB);
        istr->readAll({10}, v.md);
    }
};

template<typename S>
struct StreamWriter<::Test::C, S>
{
    static void write(S* ostr, const ::Test::C& v)
    {
        ostr->writeAll(v.ss);
        ostr->writeAll({890}, v.ms);
    }
};

template<typename S>
struct StreamReader<::Test::C, S>
{
    static void read(S* istr, ::Test::C& v)
    {
        istr->readAll(v.ss);
        istr->readAll({890}, v.ms);
    }
};

template<typename S>
struct StreamWriter<::Test::WD, S>
{
    static void write(S* ostr, const ::Test::WD& v)
    {
        ostr->writeAll({1, 2}, v.a, v.s);
    }
};

template<typename S>
struct StreamReader<::Test::WD, S>
{
    static void read(S* istr, ::Test::WD& v)
    {
        istr->readAll({1, 2}, v.a, v.s);
    }
};

template<typename S>
struct StreamWriter<::Test::OptionalException, S>
{
    static void write(S* ostr, const ::Test::OptionalException& v)
    {
        ostr->writeAll(v.req);
        ostr->writeAll({1, 2, 50}, v.a, v.b, v.o);
    }
};

template<typename S>
struct StreamReader<::Test::OptionalException, S>
{
    static void read(S* istr, ::Test::OptionalException& v)
    {
        istr->readAll(v.req);
        istr->readAll({1, 2, 50}, v.a, v.b, v.o);
    }
};

template<typename S>
struct StreamWriter<::Test::DerivedException, S>
{
    static void write(S* ostr, const ::Test::DerivedException& v)
    {
        ostr->writeAll(v.d1, v.d2);
        ostr->writeAll({600, 601}, v.ss, v.o2);
    }
};

template<typename S>
struct StreamReader<::Test::DerivedException, S>
{
    static void read(S* istr, ::Test::DerivedException& v)
    {
        istr->readAll(v.d1, v.d2);
        istr->readAll({600, 601}, v.ss, v.o2);
    }
};

template<typename S>
struct StreamWriter<::Test::RequiredException, S>
{
    static void write(S* ostr, const ::Test::RequiredException& v)
    {
        ostr->writeAll(v.ss, v.o2);
    }
};

template<typename S>
struct StreamReader<::Test::RequiredException, S>
{
    static void read(S* istr, ::Test::RequiredException& v)
    {
        istr->readAll(v.ss, v.o2);
    }
};

template<typename S>
struct StreamWriter<::Test::OptionalWithCustom, S>
{
    static void write(S* ostr, const ::Test::OptionalWithCustom& v)
    {
        ostr->writeAll({1, 2, 3}, v.l, v.lp, v.s);
    }
};

template<typename S>
struct StreamReader<::Test::OptionalWithCustom, S>
{
    static void read(S* istr, ::Test::OptionalWithCustom& v)
    {
        istr->readAll({1, 2, 3}, v.l, v.lp, v.s);
    }
};

template<typename S>
struct StreamReader<::Test::E, S>
{
    static void read(S* istr, ::Test::E& v)
    {
        istr->readAll(v.ae);
    }
};

template<typename S>
struct StreamWriter<::Test::F, S>
{
    static void write(S* ostr, const ::Test::F& v)
    {
        ostr->writeAll({1}, v.af);
    }
};

template<typename S>
struct StreamReader<::Test::F, S>
{
    static void read(S* istr, ::Test::F& v)
    {
        istr->readAll({1}, v.af);
    }
};

template<typename S>
struct StreamReader<::Test::G1, S>
{
    static void read(S* istr, ::Test::G1& v)
    {
        istr->readAll(v.a);
    }
};

template<typename S>
struct StreamReader<::Test::G2, S>
{
    static void read(S* istr, ::Test::G2& v)
    {
        istr->readAll(v.a);
    }
};

template<typename S>
struct StreamWriter<::Test::G, S>
{
    static void write(S* ostr, const ::Test::G& v)
    {
        ostr->writeAll(v.gg2, v.gg1);
        ostr->writeAll({0, 1}, v.gg2Opt, v.gg1Opt);
    }
};

template<typename S>
struct StreamReader<::Test::G, S>
{
    static void read(S* istr, ::Test::G& v)
    {
        istr->readAll(v.gg2, v.gg1);
        istr->readAll({0, 1}, v.gg2Opt, v.gg1Opt);
    }
};

template<typename S>
struct StreamWriter<::Test::Recursive, S>
{
    static void write(S* ostr, const ::Test::Recursive& v)
    {
        ostr->writeAll({0}, v.value);
    }
};

template<typename S>
struct StreamReader<::Test::Recursive, S>
{
    static void read(S* istr, ::Test::Recursive& v)
    {
        istr->readAll({0}, v.value);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Test
{

using OneOptionalPtr = ::std::shared_ptr<OneOptional>;

using MyInterfacePtr = ::std::shared_ptr<MyInterface>;
using MyInterfacePrxPtr = ::std::shared_ptr<MyInterfacePrx>;

using MultiOptionalPtr = ::std::shared_ptr<MultiOptional>;

using APtr = ::std::shared_ptr<A>;

using BPtr = ::std::shared_ptr<B>;

using CPtr = ::std::shared_ptr<C>;

using WDPtr = ::std::shared_ptr<WD>;

using OptionalWithCustomPtr = ::std::shared_ptr<OptionalWithCustom>;

using EPtr = ::std::shared_ptr<E>;

using FPtr = ::std::shared_ptr<F>;

using G1Ptr = ::std::shared_ptr<G1>;

using G2Ptr = ::std::shared_ptr<G2>;

using GPtr = ::std::shared_ptr<G>;

using RecursivePtr = ::std::shared_ptr<Recursive>;

using InitialPtr = ::std::shared_ptr<Initial>;
using InitialPrxPtr = ::std::shared_ptr<InitialPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Test
{

class MyInterface;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< MyInterface>&);
::IceProxy::Ice::Object* upCast(MyInterface*);
/// \endcond

class Initial;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Initial>&);
::IceProxy::Ice::Object* upCast(Initial*);
/// \endcond

}

}

namespace Test
{

class OneOptional;
using OneOptionalPtr = ::Ice::SharedPtr<OneOptional>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::MyInterface> MyInterfacePrx;
typedef MyInterfacePrx MyInterfacePrxPtr;

class MyInterface;
using MyInterfacePtr = ::Ice::SharedPtr< MyInterface>;

class MultiOptional;
using MultiOptionalPtr = ::Ice::SharedPtr<MultiOptional>;

class A;
using APtr = ::Ice::SharedPtr<A>;

class B;
using BPtr = ::Ice::SharedPtr<B>;

class C;
using CPtr = ::Ice::SharedPtr<C>;

class WD;
using WDPtr = ::Ice::SharedPtr<WD>;

class OptionalWithCustom;
using OptionalWithCustomPtr = ::Ice::SharedPtr<OptionalWithCustom>;

class E;
using EPtr = ::Ice::SharedPtr<E>;

class F;
using FPtr = ::Ice::SharedPtr<F>;

class G1;
using G1Ptr = ::Ice::SharedPtr<G1>;

class G2;
using G2Ptr = ::Ice::SharedPtr<G2>;

class G;
using GPtr = ::Ice::SharedPtr<G>;

class Recursive;
using RecursivePtr = ::Ice::SharedPtr<Recursive>;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Test::Initial> InitialPrx;
typedef InitialPrx InitialPrxPtr;

class Initial;
using InitialPtr = ::Ice::SharedPtr< Initial>;

}

namespace Test
{

enum MyEnum
{
    MyEnumMember
};

struct SmallStruct
{
    ::Ice::Byte m;

    bool operator==(const SmallStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(m != rhs_.m)
        {
            return false;
        }
        return true;
    }

    bool operator<(const SmallStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(m < rhs_.m)
        {
            return true;
        }
        else if(rhs_.m < m)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const SmallStruct& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const SmallStruct& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const SmallStruct& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const SmallStruct& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct FixedStruct
{
    ::Ice::Int m;

    bool operator==(const FixedStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(m != rhs_.m)
        {
            return false;
        }
        return true;
    }

    bool operator<(const FixedStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(m < rhs_.m)
        {
            return true;
        }
        else if(rhs_.m < m)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const FixedStruct& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const FixedStruct& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const FixedStruct& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const FixedStruct& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct VarStruct
{
    ::std::string m;

    bool operator==(const VarStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(m != rhs_.m)
        {
            return false;
        }
        return true;
    }

    bool operator<(const VarStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(m < rhs_.m)
        {
            return true;
        }
        else if(rhs_.m < m)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const VarStruct& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const VarStruct& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const VarStruct& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const VarStruct& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct ClassVarStruct
{
    ::Ice::Int a;

    bool operator==(const ClassVarStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(a != rhs_.a)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ClassVarStruct& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(a < rhs_.a)
        {
            return true;
        }
        else if(rhs_.a < a)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ClassVarStruct& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const ClassVarStruct& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const ClassVarStruct& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const ClassVarStruct& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector< ::Ice::Byte> ByteSeq;

typedef ::std::vector<bool> BoolSeq;

typedef ::std::vector< ::Ice::Short> ShortSeq;

typedef ::std::vector< ::Ice::Int> IntSeq;

typedef ::std::vector< ::Ice::Long> LongSeq;

typedef ::std::vector< ::Ice::Float> FloatSeq;

typedef ::std::vector< ::Ice::Double> DoubleSeq;

typedef ::std::vector< ::std::string> StringSeq;

typedef ::std::vector<MyEnum> MyEnumSeq;

typedef ::std::vector<SmallStruct> SmallStructSeq;

typedef ::std::vector<SmallStruct> SmallStructList;

typedef ::std::vector<FixedStruct> FixedStructSeq;

typedef ::std::vector<FixedStruct> FixedStructList;

typedef ::std::vector<VarStruct> VarStructSeq;

typedef ::std::vector<OneOptionalPtr> OneOptionalSeq;

typedef ::std::vector<MyInterfacePrx> MyInterfacePrxSeq;

typedef ::std::vector< ::Ice::Byte> Serializable;

typedef ::std::map< ::Ice::Int, ::Ice::Int> IntIntDict;

typedef ::std::map< ::std::string, ::Ice::Int> StringIntDict;

typedef ::std::map< ::Ice::Int, MyEnum> IntEnumDict;

typedef ::std::map< ::Ice::Int, FixedStruct> IntFixedStructDict;

typedef ::std::map< ::Ice::Int, VarStruct> IntVarStructDict;

typedef ::std::map< ::Ice::Int, OneOptionalPtr> IntOneOptionalDict;

typedef ::std::map< ::Ice::Int, MyInterfacePrx> IntMyInterfacePrxDict;

class OptionalException : public ::Ice::UserException
{
public:

    /** Default constructor that assigns default values to members as specified in the Slice definition. */
    OptionalException();
    /**
     * One-shot constructor to initialize all data members.
     */
    OptionalException(bool req, const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional<OneOptionalPtr>& o);
    OptionalException(const OptionalException&) = default;
    virtual ~OptionalException();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual OptionalException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    bool req;
    std::optional< ::Ice::Int> a;
    std::optional< ::std::string> b;
    std::optional< ::Test::OneOptionalPtr> o;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static OptionalException _iceS_OptionalException_init;
/// \endcond

class DerivedException : public OptionalException
{
public:

    /** Default constructor that assigns default values to members as specified in the Slice definition. */
    DerivedException();
    /**
     * One-shot constructor to initialize all data members.
     */
    DerivedException(bool req, const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional<OneOptionalPtr>& o, const ::std::string& d1, const std::optional< ::std::string>& ss, const std::optional<OneOptionalPtr>& o2, const ::std::string& d2);
    DerivedException(const DerivedException&) = default;
    virtual ~DerivedException();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual DerivedException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string d1;
    std::optional< ::std::string> ss;
    std::optional< ::Test::OneOptionalPtr> o2;
    ::std::string d2;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class RequiredException : public OptionalException
{
public:

    /** Default constructor that assigns default values to members as specified in the Slice definition. */
    RequiredException();
    /**
     * One-shot constructor to initialize all data members.
     */
    RequiredException(bool req, const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional<OneOptionalPtr>& o, const ::std::string& ss, const OneOptionalPtr& o2);
    RequiredException(const RequiredException&) = default;
    virtual ~RequiredException();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymorphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual RequiredException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    /// \cond STREAM
    virtual bool _usesClasses() const;
    /// \endcond

    ::std::string ss;
    ::Test::OneOptionalPtr o2;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

typedef ::std::vector<RecursivePtr> RecursiveSeq;

}

namespace Test
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::MyInterface::begin_op.
 * Create a wrapper instance by calling ::Test::newCallback_MyInterface_op.
 */
class Callback_MyInterface_op_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MyInterface_op_Base> Callback_MyInterface_opPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_shutdown.
 */
class Callback_Initial_shutdown_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_shutdown_Base> Callback_Initial_shutdownPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_pingPong.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_pingPong.
 */
class Callback_Initial_pingPong_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_pingPong_Base> Callback_Initial_pingPongPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opOptionalException.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opOptionalException.
 */
class Callback_Initial_opOptionalException_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opOptionalException_Base> Callback_Initial_opOptionalExceptionPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opDerivedException.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opDerivedException.
 */
class Callback_Initial_opDerivedException_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opDerivedException_Base> Callback_Initial_opDerivedExceptionPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opRequiredException.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opRequiredException.
 */
class Callback_Initial_opRequiredException_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opRequiredException_Base> Callback_Initial_opRequiredExceptionPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opByte.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opByte.
 */
class Callback_Initial_opByte_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opByte_Base> Callback_Initial_opBytePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opByteReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opByteReq.
 */
class Callback_Initial_opByteReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opByteReq_Base> Callback_Initial_opByteReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opBool.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opBool.
 */
class Callback_Initial_opBool_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opBool_Base> Callback_Initial_opBoolPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opBoolReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opBoolReq.
 */
class Callback_Initial_opBoolReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opBoolReq_Base> Callback_Initial_opBoolReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opShort.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opShort.
 */
class Callback_Initial_opShort_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opShort_Base> Callback_Initial_opShortPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opShortReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opShortReq.
 */
class Callback_Initial_opShortReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opShortReq_Base> Callback_Initial_opShortReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opInt.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opInt.
 */
class Callback_Initial_opInt_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opInt_Base> Callback_Initial_opIntPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opIntReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntReq.
 */
class Callback_Initial_opIntReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opIntReq_Base> Callback_Initial_opIntReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opLong.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opLong.
 */
class Callback_Initial_opLong_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opLong_Base> Callback_Initial_opLongPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opLongReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opLongReq.
 */
class Callback_Initial_opLongReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opLongReq_Base> Callback_Initial_opLongReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opFloat.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFloat.
 */
class Callback_Initial_opFloat_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opFloat_Base> Callback_Initial_opFloatPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opFloatReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFloatReq.
 */
class Callback_Initial_opFloatReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opFloatReq_Base> Callback_Initial_opFloatReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opDouble.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opDouble.
 */
class Callback_Initial_opDouble_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opDouble_Base> Callback_Initial_opDoublePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opDoubleReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opDoubleReq.
 */
class Callback_Initial_opDoubleReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opDoubleReq_Base> Callback_Initial_opDoubleReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opString.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opString.
 */
class Callback_Initial_opString_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opString_Base> Callback_Initial_opStringPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opStringReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opStringReq.
 */
class Callback_Initial_opStringReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opStringReq_Base> Callback_Initial_opStringReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opMyEnum.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMyEnum.
 */
class Callback_Initial_opMyEnum_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opMyEnum_Base> Callback_Initial_opMyEnumPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opMyEnumReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMyEnumReq.
 */
class Callback_Initial_opMyEnumReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opMyEnumReq_Base> Callback_Initial_opMyEnumReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opSmallStruct.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStruct.
 */
class Callback_Initial_opSmallStruct_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opSmallStruct_Base> Callback_Initial_opSmallStructPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opSmallStructReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStructReq.
 */
class Callback_Initial_opSmallStructReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opSmallStructReq_Base> Callback_Initial_opSmallStructReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opFixedStruct.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStruct.
 */
class Callback_Initial_opFixedStruct_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opFixedStruct_Base> Callback_Initial_opFixedStructPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opFixedStructReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStructReq.
 */
class Callback_Initial_opFixedStructReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opFixedStructReq_Base> Callback_Initial_opFixedStructReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opVarStruct.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opVarStruct.
 */
class Callback_Initial_opVarStruct_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opVarStruct_Base> Callback_Initial_opVarStructPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opVarStructReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opVarStructReq.
 */
class Callback_Initial_opVarStructReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opVarStructReq_Base> Callback_Initial_opVarStructReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opOneOptional.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opOneOptional.
 */
class Callback_Initial_opOneOptional_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opOneOptional_Base> Callback_Initial_opOneOptionalPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opOneOptionalReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opOneOptionalReq.
 */
class Callback_Initial_opOneOptionalReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opOneOptionalReq_Base> Callback_Initial_opOneOptionalReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opMyInterfaceProxy.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMyInterfaceProxy.
 */
class Callback_Initial_opMyInterfaceProxy_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opMyInterfaceProxy_Base> Callback_Initial_opMyInterfaceProxyPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opMyInterfaceProxyReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMyInterfaceProxyReq.
 */
class Callback_Initial_opMyInterfaceProxyReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opMyInterfaceProxyReq_Base> Callback_Initial_opMyInterfaceProxyReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opByteSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opByteSeq.
 */
class Callback_Initial_opByteSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opByteSeq_Base> Callback_Initial_opByteSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opByteSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opByteSeqReq.
 */
class Callback_Initial_opByteSeqReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opByteSeqReq_Base> Callback_Initial_opByteSeqReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opBoolSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opBoolSeq.
 */
class Callback_Initial_opBoolSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opBoolSeq_Base> Callback_Initial_opBoolSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opBoolSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opBoolSeqReq.
 */
class Callback_Initial_opBoolSeqReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opBoolSeqReq_Base> Callback_Initial_opBoolSeqReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opShortSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opShortSeq.
 */
class Callback_Initial_opShortSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opShortSeq_Base> Callback_Initial_opShortSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opShortSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opShortSeqReq.
 */
class Callback_Initial_opShortSeqReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opShortSeqReq_Base> Callback_Initial_opShortSeqReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opIntSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntSeq.
 */
class Callback_Initial_opIntSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opIntSeq_Base> Callback_Initial_opIntSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opIntSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntSeqReq.
 */
class Callback_Initial_opIntSeqReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opIntSeqReq_Base> Callback_Initial_opIntSeqReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opLongSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opLongSeq.
 */
class Callback_Initial_opLongSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opLongSeq_Base> Callback_Initial_opLongSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opLongSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opLongSeqReq.
 */
class Callback_Initial_opLongSeqReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opLongSeqReq_Base> Callback_Initial_opLongSeqReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opFloatSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFloatSeq.
 */
class Callback_Initial_opFloatSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opFloatSeq_Base> Callback_Initial_opFloatSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opFloatSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFloatSeqReq.
 */
class Callback_Initial_opFloatSeqReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opFloatSeqReq_Base> Callback_Initial_opFloatSeqReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opDoubleSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opDoubleSeq.
 */
class Callback_Initial_opDoubleSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opDoubleSeq_Base> Callback_Initial_opDoubleSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opDoubleSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opDoubleSeqReq.
 */
class Callback_Initial_opDoubleSeqReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opDoubleSeqReq_Base> Callback_Initial_opDoubleSeqReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opStringSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opStringSeq.
 */
class Callback_Initial_opStringSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opStringSeq_Base> Callback_Initial_opStringSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opStringSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opStringSeqReq.
 */
class Callback_Initial_opStringSeqReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opStringSeqReq_Base> Callback_Initial_opStringSeqReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opSmallStructSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStructSeq.
 */
class Callback_Initial_opSmallStructSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opSmallStructSeq_Base> Callback_Initial_opSmallStructSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opSmallStructSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStructSeqReq.
 */
class Callback_Initial_opSmallStructSeqReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opSmallStructSeqReq_Base> Callback_Initial_opSmallStructSeqReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opSmallStructList.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStructList.
 */
class Callback_Initial_opSmallStructList_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opSmallStructList_Base> Callback_Initial_opSmallStructListPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opSmallStructListReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStructListReq.
 */
class Callback_Initial_opSmallStructListReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opSmallStructListReq_Base> Callback_Initial_opSmallStructListReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opFixedStructSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStructSeq.
 */
class Callback_Initial_opFixedStructSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opFixedStructSeq_Base> Callback_Initial_opFixedStructSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opFixedStructSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStructSeqReq.
 */
class Callback_Initial_opFixedStructSeqReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opFixedStructSeqReq_Base> Callback_Initial_opFixedStructSeqReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opFixedStructList.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStructList.
 */
class Callback_Initial_opFixedStructList_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opFixedStructList_Base> Callback_Initial_opFixedStructListPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opFixedStructListReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStructListReq.
 */
class Callback_Initial_opFixedStructListReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opFixedStructListReq_Base> Callback_Initial_opFixedStructListReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opVarStructSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opVarStructSeq.
 */
class Callback_Initial_opVarStructSeq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opVarStructSeq_Base> Callback_Initial_opVarStructSeqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opVarStructSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opVarStructSeqReq.
 */
class Callback_Initial_opVarStructSeqReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opVarStructSeqReq_Base> Callback_Initial_opVarStructSeqReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opSerializable.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSerializable.
 */
class Callback_Initial_opSerializable_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opSerializable_Base> Callback_Initial_opSerializablePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opSerializableReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSerializableReq.
 */
class Callback_Initial_opSerializableReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opSerializableReq_Base> Callback_Initial_opSerializableReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opIntIntDict.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntIntDict.
 */
class Callback_Initial_opIntIntDict_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opIntIntDict_Base> Callback_Initial_opIntIntDictPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opIntIntDictReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntIntDictReq.
 */
class Callback_Initial_opIntIntDictReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opIntIntDictReq_Base> Callback_Initial_opIntIntDictReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opStringIntDict.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opStringIntDict.
 */
class Callback_Initial_opStringIntDict_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opStringIntDict_Base> Callback_Initial_opStringIntDictPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opStringIntDictReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opStringIntDictReq.
 */
class Callback_Initial_opStringIntDictReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opStringIntDictReq_Base> Callback_Initial_opStringIntDictReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opIntOneOptionalDict.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntOneOptionalDict.
 */
class Callback_Initial_opIntOneOptionalDict_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opIntOneOptionalDict_Base> Callback_Initial_opIntOneOptionalDictPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opIntOneOptionalDictReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntOneOptionalDictReq.
 */
class Callback_Initial_opIntOneOptionalDictReq_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opIntOneOptionalDictReq_Base> Callback_Initial_opIntOneOptionalDictReqPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opClassAndUnknownOptional.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opClassAndUnknownOptional.
 */
class Callback_Initial_opClassAndUnknownOptional_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opClassAndUnknownOptional_Base> Callback_Initial_opClassAndUnknownOptionalPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_sendOptionalClass.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_sendOptionalClass.
 */
class Callback_Initial_sendOptionalClass_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_sendOptionalClass_Base> Callback_Initial_sendOptionalClassPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_returnOptionalClass.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_returnOptionalClass.
 */
class Callback_Initial_returnOptionalClass_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_returnOptionalClass_Base> Callback_Initial_returnOptionalClassPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opG.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opG.
 */
class Callback_Initial_opG_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opG_Base> Callback_Initial_opGPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opVoid.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opVoid.
 */
class Callback_Initial_opVoid_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opVoid_Base> Callback_Initial_opVoidPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opMStruct1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMStruct1.
 */
class Callback_Initial_opMStruct1_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opMStruct1_Base> Callback_Initial_opMStruct1Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opMStruct2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMStruct2.
 */
class Callback_Initial_opMStruct2_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opMStruct2_Base> Callback_Initial_opMStruct2Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opMSeq1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMSeq1.
 */
class Callback_Initial_opMSeq1_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opMSeq1_Base> Callback_Initial_opMSeq1Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opMSeq2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMSeq2.
 */
class Callback_Initial_opMSeq2_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opMSeq2_Base> Callback_Initial_opMSeq2Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opMDict1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMDict1.
 */
class Callback_Initial_opMDict1_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opMDict1_Base> Callback_Initial_opMDict1Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opMDict2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMDict2.
 */
class Callback_Initial_opMDict2_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opMDict2_Base> Callback_Initial_opMDict2Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opMG1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMG1.
 */
class Callback_Initial_opMG1_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opMG1_Base> Callback_Initial_opMG1Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_opMG2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMG2.
 */
class Callback_Initial_opMG2_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_opMG2_Base> Callback_Initial_opMG2Ptr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_supportsRequiredParams.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_supportsRequiredParams.
 */
class Callback_Initial_supportsRequiredParams_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_supportsRequiredParams_Base> Callback_Initial_supportsRequiredParamsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_supportsJavaSerializable.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_supportsJavaSerializable.
 */
class Callback_Initial_supportsJavaSerializable_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_supportsJavaSerializable_Base> Callback_Initial_supportsJavaSerializablePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_supportsCsharpSerializable.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_supportsCsharpSerializable.
 */
class Callback_Initial_supportsCsharpSerializable_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_supportsCsharpSerializable_Base> Callback_Initial_supportsCsharpSerializablePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_supportsCppStringView.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_supportsCppStringView.
 */
class Callback_Initial_supportsCppStringView_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_supportsCppStringView_Base> Callback_Initial_supportsCppStringViewPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Test::Initial::begin_supportsNullOptional.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_supportsNullOptional.
 */
class Callback_Initial_supportsNullOptional_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Initial_supportsNullOptional_Base> Callback_Initial_supportsNullOptionalPtr;

}

namespace IceProxy
{

namespace Test
{

class MyInterface : public virtual ::Ice::Proxy<MyInterface, ::IceProxy::Ice::Object>
{
public:

    void op(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_op(_iceI_begin_op(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_op(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Test::Callback_MyInterface_opPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_op(const ::Ice::Context& context, const ::Test::Callback_MyInterface_opPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_op(context, cb, cookie);
    }

    void end_op(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_op(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class Initial : public virtual ::Ice::Proxy<Initial, ::IceProxy::Ice::Object>
{
public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_shutdown(_iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Test::Callback_Initial_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Test::Callback_Initial_shutdownPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, cb, cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_shutdown(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::ValuePtr pingPong(const ::Ice::ValuePtr& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_pingPong(_iceI_begin_pingPong(o, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_pingPong(const ::Ice::ValuePtr& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_pingPong(o, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pingPong(const ::Ice::ValuePtr& o, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_pingPong(o, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_pingPong(const ::Ice::ValuePtr& o, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_pingPong(o, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_pingPong(const ::Ice::ValuePtr& o, const ::Test::Callback_Initial_pingPongPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_pingPong(o, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_pingPong(const ::Ice::ValuePtr& o, const ::Ice::Context& context, const ::Test::Callback_Initial_pingPongPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_pingPong(o, context, cb, cookie);
    }

    ::Ice::ValuePtr end_pingPong(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_pingPong(const ::Ice::ValuePtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void opOptionalException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_opOptionalException(_iceI_begin_opOptionalException(a, b, o, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opOptionalException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opOptionalException(a, b, o, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opOptionalException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opOptionalException(a, b, o, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opOptionalException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opOptionalException(a, b, o, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opOptionalException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Test::Callback_Initial_opOptionalExceptionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opOptionalException(a, b, o, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opOptionalException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context, const ::Test::Callback_Initial_opOptionalExceptionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opOptionalException(a, b, o, context, cb, cookie);
    }

    void end_opOptionalException(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opOptionalException(const std::optional< ::Ice::Int>&, const std::optional< ::std::string>&, const std::optional< ::Test::OneOptionalPtr>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void opDerivedException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_opDerivedException(_iceI_begin_opDerivedException(a, b, o, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opDerivedException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opDerivedException(a, b, o, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opDerivedException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDerivedException(a, b, o, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDerivedException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDerivedException(a, b, o, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDerivedException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Test::Callback_Initial_opDerivedExceptionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDerivedException(a, b, o, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDerivedException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context, const ::Test::Callback_Initial_opDerivedExceptionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDerivedException(a, b, o, context, cb, cookie);
    }

    void end_opDerivedException(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opDerivedException(const std::optional< ::Ice::Int>&, const std::optional< ::std::string>&, const std::optional< ::Test::OneOptionalPtr>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void opRequiredException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_opRequiredException(_iceI_begin_opRequiredException(a, b, o, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opRequiredException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opRequiredException(a, b, o, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opRequiredException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opRequiredException(a, b, o, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opRequiredException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opRequiredException(a, b, o, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opRequiredException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Test::Callback_Initial_opRequiredExceptionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opRequiredException(a, b, o, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opRequiredException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context, const ::Test::Callback_Initial_opRequiredExceptionPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opRequiredException(a, b, o, context, cb, cookie);
    }

    void end_opRequiredException(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opRequiredException(const std::optional< ::Ice::Int>&, const std::optional< ::std::string>&, const std::optional< ::Test::OneOptionalPtr>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Ice::Byte> opByte(const std::optional< ::Ice::Byte>& p1, std::optional< ::Ice::Byte>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opByte(p3, _iceI_begin_opByte(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opByte(const std::optional< ::Ice::Byte>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opByte(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opByte(const std::optional< ::Ice::Byte>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByte(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByte(const std::optional< ::Ice::Byte>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByte(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByte(const std::optional< ::Ice::Byte>& p1, const ::Test::Callback_Initial_opBytePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByte(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByte(const std::optional< ::Ice::Byte>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opBytePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByte(p1, context, cb, cookie);
    }

    std::optional< ::Ice::Byte> end_opByte(std::optional< ::Ice::Byte>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opByte(std::optional< ::Ice::Byte>& iceP_p3, std::optional< ::Ice::Byte>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opByte(const std::optional< ::Ice::Byte>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Ice::Byte> opByteReq(const std::optional< ::Ice::Byte>& p1, std::optional< ::Ice::Byte>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opByteReq(p3, _iceI_begin_opByteReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opByteReq(const std::optional< ::Ice::Byte>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opByteReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opByteReq(const std::optional< ::Ice::Byte>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteReq(const std::optional< ::Ice::Byte>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteReq(const std::optional< ::Ice::Byte>& p1, const ::Test::Callback_Initial_opByteReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteReq(const std::optional< ::Ice::Byte>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opByteReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteReq(p1, context, cb, cookie);
    }

    std::optional< ::Ice::Byte> end_opByteReq(std::optional< ::Ice::Byte>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opByteReq(std::optional< ::Ice::Byte>& iceP_p3, std::optional< ::Ice::Byte>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opByteReq(const std::optional< ::Ice::Byte>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional<bool> opBool(const std::optional<bool>& p1, std::optional<bool>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opBool(p3, _iceI_begin_opBool(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opBool(const std::optional<bool>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opBool(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opBool(const std::optional<bool>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBool(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBool(const std::optional<bool>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBool(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBool(const std::optional<bool>& p1, const ::Test::Callback_Initial_opBoolPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBool(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBool(const std::optional<bool>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opBoolPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBool(p1, context, cb, cookie);
    }

    std::optional<bool> end_opBool(std::optional<bool>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opBool(std::optional<bool>& iceP_p3, std::optional<bool>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opBool(const std::optional<bool>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional<bool> opBoolReq(const std::optional<bool>& p1, std::optional<bool>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opBoolReq(p3, _iceI_begin_opBoolReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opBoolReq(const std::optional<bool>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opBoolReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opBoolReq(const std::optional<bool>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBoolReq(const std::optional<bool>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBoolReq(const std::optional<bool>& p1, const ::Test::Callback_Initial_opBoolReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBoolReq(const std::optional<bool>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opBoolReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolReq(p1, context, cb, cookie);
    }

    std::optional<bool> end_opBoolReq(std::optional<bool>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opBoolReq(std::optional<bool>& iceP_p3, std::optional<bool>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opBoolReq(const std::optional<bool>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Ice::Short> opShort(const std::optional< ::Ice::Short>& p1, std::optional< ::Ice::Short>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opShort(p3, _iceI_begin_opShort(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opShort(const std::optional< ::Ice::Short>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opShort(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opShort(const std::optional< ::Ice::Short>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShort(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShort(const std::optional< ::Ice::Short>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShort(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShort(const std::optional< ::Ice::Short>& p1, const ::Test::Callback_Initial_opShortPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShort(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShort(const std::optional< ::Ice::Short>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opShortPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShort(p1, context, cb, cookie);
    }

    std::optional< ::Ice::Short> end_opShort(std::optional< ::Ice::Short>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opShort(std::optional< ::Ice::Short>& iceP_p3, std::optional< ::Ice::Short>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opShort(const std::optional< ::Ice::Short>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Ice::Short> opShortReq(const std::optional< ::Ice::Short>& p1, std::optional< ::Ice::Short>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opShortReq(p3, _iceI_begin_opShortReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opShortReq(const std::optional< ::Ice::Short>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opShortReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opShortReq(const std::optional< ::Ice::Short>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShortReq(const std::optional< ::Ice::Short>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShortReq(const std::optional< ::Ice::Short>& p1, const ::Test::Callback_Initial_opShortReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShortReq(const std::optional< ::Ice::Short>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opShortReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortReq(p1, context, cb, cookie);
    }

    std::optional< ::Ice::Short> end_opShortReq(std::optional< ::Ice::Short>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opShortReq(std::optional< ::Ice::Short>& iceP_p3, std::optional< ::Ice::Short>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opShortReq(const std::optional< ::Ice::Short>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Ice::Int> opInt(const std::optional< ::Ice::Int>& p1, std::optional< ::Ice::Int>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opInt(p3, _iceI_begin_opInt(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opInt(const std::optional< ::Ice::Int>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opInt(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opInt(const std::optional< ::Ice::Int>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opInt(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opInt(const std::optional< ::Ice::Int>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opInt(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opInt(const std::optional< ::Ice::Int>& p1, const ::Test::Callback_Initial_opIntPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opInt(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opInt(const std::optional< ::Ice::Int>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opIntPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opInt(p1, context, cb, cookie);
    }

    std::optional< ::Ice::Int> end_opInt(std::optional< ::Ice::Int>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opInt(std::optional< ::Ice::Int>& iceP_p3, std::optional< ::Ice::Int>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opInt(const std::optional< ::Ice::Int>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Ice::Int> opIntReq(const std::optional< ::Ice::Int>& p1, std::optional< ::Ice::Int>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opIntReq(p3, _iceI_begin_opIntReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opIntReq(const std::optional< ::Ice::Int>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opIntReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opIntReq(const std::optional< ::Ice::Int>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntReq(const std::optional< ::Ice::Int>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntReq(const std::optional< ::Ice::Int>& p1, const ::Test::Callback_Initial_opIntReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntReq(const std::optional< ::Ice::Int>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opIntReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntReq(p1, context, cb, cookie);
    }

    std::optional< ::Ice::Int> end_opIntReq(std::optional< ::Ice::Int>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opIntReq(std::optional< ::Ice::Int>& iceP_p3, std::optional< ::Ice::Int>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opIntReq(const std::optional< ::Ice::Int>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Ice::Long> opLong(const std::optional< ::Ice::Long>& p1, std::optional< ::Ice::Long>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opLong(p3, _iceI_begin_opLong(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opLong(const std::optional< ::Ice::Long>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opLong(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opLong(const std::optional< ::Ice::Long>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLong(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLong(const std::optional< ::Ice::Long>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLong(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLong(const std::optional< ::Ice::Long>& p1, const ::Test::Callback_Initial_opLongPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLong(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLong(const std::optional< ::Ice::Long>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opLongPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLong(p1, context, cb, cookie);
    }

    std::optional< ::Ice::Long> end_opLong(std::optional< ::Ice::Long>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opLong(std::optional< ::Ice::Long>& iceP_p3, std::optional< ::Ice::Long>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opLong(const std::optional< ::Ice::Long>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Ice::Long> opLongReq(const std::optional< ::Ice::Long>& p1, std::optional< ::Ice::Long>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opLongReq(p3, _iceI_begin_opLongReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opLongReq(const std::optional< ::Ice::Long>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opLongReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opLongReq(const std::optional< ::Ice::Long>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLongReq(const std::optional< ::Ice::Long>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLongReq(const std::optional< ::Ice::Long>& p1, const ::Test::Callback_Initial_opLongReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLongReq(const std::optional< ::Ice::Long>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opLongReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongReq(p1, context, cb, cookie);
    }

    std::optional< ::Ice::Long> end_opLongReq(std::optional< ::Ice::Long>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opLongReq(std::optional< ::Ice::Long>& iceP_p3, std::optional< ::Ice::Long>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opLongReq(const std::optional< ::Ice::Long>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Ice::Float> opFloat(const std::optional< ::Ice::Float>& p1, std::optional< ::Ice::Float>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opFloat(p3, _iceI_begin_opFloat(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opFloat(const std::optional< ::Ice::Float>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opFloat(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opFloat(const std::optional< ::Ice::Float>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloat(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloat(const std::optional< ::Ice::Float>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloat(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloat(const std::optional< ::Ice::Float>& p1, const ::Test::Callback_Initial_opFloatPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloat(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloat(const std::optional< ::Ice::Float>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opFloatPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloat(p1, context, cb, cookie);
    }

    std::optional< ::Ice::Float> end_opFloat(std::optional< ::Ice::Float>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opFloat(std::optional< ::Ice::Float>& iceP_p3, std::optional< ::Ice::Float>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opFloat(const std::optional< ::Ice::Float>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Ice::Float> opFloatReq(const std::optional< ::Ice::Float>& p1, std::optional< ::Ice::Float>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opFloatReq(p3, _iceI_begin_opFloatReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opFloatReq(const std::optional< ::Ice::Float>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opFloatReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opFloatReq(const std::optional< ::Ice::Float>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloatReq(const std::optional< ::Ice::Float>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloatReq(const std::optional< ::Ice::Float>& p1, const ::Test::Callback_Initial_opFloatReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloatReq(const std::optional< ::Ice::Float>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opFloatReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatReq(p1, context, cb, cookie);
    }

    std::optional< ::Ice::Float> end_opFloatReq(std::optional< ::Ice::Float>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opFloatReq(std::optional< ::Ice::Float>& iceP_p3, std::optional< ::Ice::Float>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opFloatReq(const std::optional< ::Ice::Float>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Ice::Double> opDouble(const std::optional< ::Ice::Double>& p1, std::optional< ::Ice::Double>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opDouble(p3, _iceI_begin_opDouble(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opDouble(const std::optional< ::Ice::Double>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opDouble(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opDouble(const std::optional< ::Ice::Double>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDouble(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDouble(const std::optional< ::Ice::Double>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDouble(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDouble(const std::optional< ::Ice::Double>& p1, const ::Test::Callback_Initial_opDoublePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDouble(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDouble(const std::optional< ::Ice::Double>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opDoublePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDouble(p1, context, cb, cookie);
    }

    std::optional< ::Ice::Double> end_opDouble(std::optional< ::Ice::Double>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opDouble(std::optional< ::Ice::Double>& iceP_p3, std::optional< ::Ice::Double>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opDouble(const std::optional< ::Ice::Double>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Ice::Double> opDoubleReq(const std::optional< ::Ice::Double>& p1, std::optional< ::Ice::Double>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opDoubleReq(p3, _iceI_begin_opDoubleReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opDoubleReq(const std::optional< ::Ice::Double>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opDoubleReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opDoubleReq(const std::optional< ::Ice::Double>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDoubleReq(const std::optional< ::Ice::Double>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDoubleReq(const std::optional< ::Ice::Double>& p1, const ::Test::Callback_Initial_opDoubleReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDoubleReq(const std::optional< ::Ice::Double>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opDoubleReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleReq(p1, context, cb, cookie);
    }

    std::optional< ::Ice::Double> end_opDoubleReq(std::optional< ::Ice::Double>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opDoubleReq(std::optional< ::Ice::Double>& iceP_p3, std::optional< ::Ice::Double>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opDoubleReq(const std::optional< ::Ice::Double>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::std::string> opString(const std::optional< ::std::string>& p1, std::optional< ::std::string>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opString(p3, _iceI_begin_opString(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opString(const std::optional< ::std::string>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opString(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opString(const std::optional< ::std::string>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opString(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opString(const std::optional< ::std::string>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opString(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opString(const std::optional< ::std::string>& p1, const ::Test::Callback_Initial_opStringPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opString(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opString(const std::optional< ::std::string>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opStringPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opString(p1, context, cb, cookie);
    }

    std::optional< ::std::string> end_opString(std::optional< ::std::string>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opString(std::optional< ::std::string>& iceP_p3, std::optional< ::std::string>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opString(const std::optional< ::std::string>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::std::string> opStringReq(const std::optional< ::std::string>& p1, std::optional< ::std::string>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opStringReq(p3, _iceI_begin_opStringReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opStringReq(const std::optional< ::std::string>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opStringReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opStringReq(const std::optional< ::std::string>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStringReq(const std::optional< ::std::string>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStringReq(const std::optional< ::std::string>& p1, const ::Test::Callback_Initial_opStringReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStringReq(const std::optional< ::std::string>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opStringReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringReq(p1, context, cb, cookie);
    }

    std::optional< ::std::string> end_opStringReq(std::optional< ::std::string>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opStringReq(std::optional< ::std::string>& iceP_p3, std::optional< ::std::string>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opStringReq(const std::optional< ::std::string>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::MyEnum> opMyEnum(const std::optional< ::Test::MyEnum>& p1, std::optional< ::Test::MyEnum>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opMyEnum(p3, _iceI_begin_opMyEnum(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opMyEnum(const std::optional< ::Test::MyEnum>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opMyEnum(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opMyEnum(const std::optional< ::Test::MyEnum>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyEnum(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMyEnum(const std::optional< ::Test::MyEnum>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyEnum(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMyEnum(const std::optional< ::Test::MyEnum>& p1, const ::Test::Callback_Initial_opMyEnumPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyEnum(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMyEnum(const std::optional< ::Test::MyEnum>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opMyEnumPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyEnum(p1, context, cb, cookie);
    }

    std::optional< ::Test::MyEnum> end_opMyEnum(std::optional< ::Test::MyEnum>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opMyEnum(std::optional< ::Test::MyEnum>& iceP_p3, std::optional< ::Test::MyEnum>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opMyEnum(const std::optional< ::Test::MyEnum>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::MyEnum> opMyEnumReq(const std::optional< ::Test::MyEnum>& p1, std::optional< ::Test::MyEnum>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opMyEnumReq(p3, _iceI_begin_opMyEnumReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opMyEnumReq(const std::optional< ::Test::MyEnum>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opMyEnumReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opMyEnumReq(const std::optional< ::Test::MyEnum>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyEnumReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMyEnumReq(const std::optional< ::Test::MyEnum>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyEnumReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMyEnumReq(const std::optional< ::Test::MyEnum>& p1, const ::Test::Callback_Initial_opMyEnumReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyEnumReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMyEnumReq(const std::optional< ::Test::MyEnum>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opMyEnumReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyEnumReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::MyEnum> end_opMyEnumReq(std::optional< ::Test::MyEnum>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opMyEnumReq(std::optional< ::Test::MyEnum>& iceP_p3, std::optional< ::Test::MyEnum>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opMyEnumReq(const std::optional< ::Test::MyEnum>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::SmallStruct> opSmallStruct(const std::optional< ::Test::SmallStruct>& p1, std::optional< ::Test::SmallStruct>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSmallStruct(p3, _iceI_begin_opSmallStruct(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSmallStruct(const std::optional< ::Test::SmallStruct>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSmallStruct(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSmallStruct(const std::optional< ::Test::SmallStruct>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStruct(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStruct(const std::optional< ::Test::SmallStruct>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStruct(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStruct(const std::optional< ::Test::SmallStruct>& p1, const ::Test::Callback_Initial_opSmallStructPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStruct(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStruct(const std::optional< ::Test::SmallStruct>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opSmallStructPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStruct(p1, context, cb, cookie);
    }

    std::optional< ::Test::SmallStruct> end_opSmallStruct(std::optional< ::Test::SmallStruct>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSmallStruct(std::optional< ::Test::SmallStruct>& iceP_p3, std::optional< ::Test::SmallStruct>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSmallStruct(const std::optional< ::Test::SmallStruct>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::SmallStruct> opSmallStructReq(const std::optional< ::Test::SmallStruct>& p1, std::optional< ::Test::SmallStruct>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSmallStructReq(p3, _iceI_begin_opSmallStructReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSmallStructReq(const std::optional< ::Test::SmallStruct>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSmallStructReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructReq(const std::optional< ::Test::SmallStruct>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructReq(const std::optional< ::Test::SmallStruct>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructReq(const std::optional< ::Test::SmallStruct>& p1, const ::Test::Callback_Initial_opSmallStructReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructReq(const std::optional< ::Test::SmallStruct>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opSmallStructReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::SmallStruct> end_opSmallStructReq(std::optional< ::Test::SmallStruct>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSmallStructReq(std::optional< ::Test::SmallStruct>& iceP_p3, std::optional< ::Test::SmallStruct>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSmallStructReq(const std::optional< ::Test::SmallStruct>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::FixedStruct> opFixedStruct(const std::optional< ::Test::FixedStruct>& p1, std::optional< ::Test::FixedStruct>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opFixedStruct(p3, _iceI_begin_opFixedStruct(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opFixedStruct(const std::optional< ::Test::FixedStruct>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opFixedStruct(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opFixedStruct(const std::optional< ::Test::FixedStruct>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStruct(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStruct(const std::optional< ::Test::FixedStruct>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStruct(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStruct(const std::optional< ::Test::FixedStruct>& p1, const ::Test::Callback_Initial_opFixedStructPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStruct(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStruct(const std::optional< ::Test::FixedStruct>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opFixedStructPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStruct(p1, context, cb, cookie);
    }

    std::optional< ::Test::FixedStruct> end_opFixedStruct(std::optional< ::Test::FixedStruct>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opFixedStruct(std::optional< ::Test::FixedStruct>& iceP_p3, std::optional< ::Test::FixedStruct>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opFixedStruct(const std::optional< ::Test::FixedStruct>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::FixedStruct> opFixedStructReq(const std::optional< ::Test::FixedStruct>& p1, std::optional< ::Test::FixedStruct>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opFixedStructReq(p3, _iceI_begin_opFixedStructReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opFixedStructReq(const std::optional< ::Test::FixedStruct>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opFixedStructReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructReq(const std::optional< ::Test::FixedStruct>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructReq(const std::optional< ::Test::FixedStruct>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructReq(const std::optional< ::Test::FixedStruct>& p1, const ::Test::Callback_Initial_opFixedStructReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructReq(const std::optional< ::Test::FixedStruct>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opFixedStructReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::FixedStruct> end_opFixedStructReq(std::optional< ::Test::FixedStruct>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opFixedStructReq(std::optional< ::Test::FixedStruct>& iceP_p3, std::optional< ::Test::FixedStruct>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opFixedStructReq(const std::optional< ::Test::FixedStruct>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::VarStruct> opVarStruct(const std::optional< ::Test::VarStruct>& p1, std::optional< ::Test::VarStruct>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opVarStruct(p3, _iceI_begin_opVarStruct(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opVarStruct(const std::optional< ::Test::VarStruct>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opVarStruct(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opVarStruct(const std::optional< ::Test::VarStruct>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStruct(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opVarStruct(const std::optional< ::Test::VarStruct>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStruct(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opVarStruct(const std::optional< ::Test::VarStruct>& p1, const ::Test::Callback_Initial_opVarStructPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStruct(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opVarStruct(const std::optional< ::Test::VarStruct>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opVarStructPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStruct(p1, context, cb, cookie);
    }

    std::optional< ::Test::VarStruct> end_opVarStruct(std::optional< ::Test::VarStruct>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opVarStruct(std::optional< ::Test::VarStruct>& iceP_p3, std::optional< ::Test::VarStruct>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opVarStruct(const std::optional< ::Test::VarStruct>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::VarStruct> opVarStructReq(const std::optional< ::Test::VarStruct>& p1, std::optional< ::Test::VarStruct>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opVarStructReq(p3, _iceI_begin_opVarStructReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opVarStructReq(const std::optional< ::Test::VarStruct>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opVarStructReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opVarStructReq(const std::optional< ::Test::VarStruct>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStructReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opVarStructReq(const std::optional< ::Test::VarStruct>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStructReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opVarStructReq(const std::optional< ::Test::VarStruct>& p1, const ::Test::Callback_Initial_opVarStructReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStructReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opVarStructReq(const std::optional< ::Test::VarStruct>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opVarStructReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStructReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::VarStruct> end_opVarStructReq(std::optional< ::Test::VarStruct>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opVarStructReq(std::optional< ::Test::VarStruct>& iceP_p3, std::optional< ::Test::VarStruct>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opVarStructReq(const std::optional< ::Test::VarStruct>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::OneOptionalPtr> opOneOptional(const std::optional< ::Test::OneOptionalPtr>& p1, std::optional< ::Test::OneOptionalPtr>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opOneOptional(p3, _iceI_begin_opOneOptional(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opOneOptional(const std::optional< ::Test::OneOptionalPtr>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opOneOptional(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opOneOptional(const std::optional< ::Test::OneOptionalPtr>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opOneOptional(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opOneOptional(const std::optional< ::Test::OneOptionalPtr>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opOneOptional(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opOneOptional(const std::optional< ::Test::OneOptionalPtr>& p1, const ::Test::Callback_Initial_opOneOptionalPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opOneOptional(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opOneOptional(const std::optional< ::Test::OneOptionalPtr>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opOneOptionalPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opOneOptional(p1, context, cb, cookie);
    }

    std::optional< ::Test::OneOptionalPtr> end_opOneOptional(std::optional< ::Test::OneOptionalPtr>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opOneOptional(std::optional< ::Test::OneOptionalPtr>& iceP_p3, std::optional< ::Test::OneOptionalPtr>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opOneOptional(const std::optional< ::Test::OneOptionalPtr>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::OneOptionalPtr> opOneOptionalReq(const std::optional< ::Test::OneOptionalPtr>& p1, std::optional< ::Test::OneOptionalPtr>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opOneOptionalReq(p3, _iceI_begin_opOneOptionalReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opOneOptionalReq(const std::optional< ::Test::OneOptionalPtr>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opOneOptionalReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opOneOptionalReq(const std::optional< ::Test::OneOptionalPtr>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opOneOptionalReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opOneOptionalReq(const std::optional< ::Test::OneOptionalPtr>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opOneOptionalReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opOneOptionalReq(const std::optional< ::Test::OneOptionalPtr>& p1, const ::Test::Callback_Initial_opOneOptionalReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opOneOptionalReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opOneOptionalReq(const std::optional< ::Test::OneOptionalPtr>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opOneOptionalReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opOneOptionalReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::OneOptionalPtr> end_opOneOptionalReq(std::optional< ::Test::OneOptionalPtr>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opOneOptionalReq(std::optional< ::Test::OneOptionalPtr>& iceP_p3, std::optional< ::Test::OneOptionalPtr>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opOneOptionalReq(const std::optional< ::Test::OneOptionalPtr>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::MyInterfacePrx> opMyInterfaceProxy(const std::optional< ::Test::MyInterfacePrx>& p1, std::optional< ::Test::MyInterfacePrx>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opMyInterfaceProxy(p3, _iceI_begin_opMyInterfaceProxy(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opMyInterfaceProxy(const std::optional< ::Test::MyInterfacePrx>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opMyInterfaceProxy(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opMyInterfaceProxy(const std::optional< ::Test::MyInterfacePrx>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyInterfaceProxy(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMyInterfaceProxy(const std::optional< ::Test::MyInterfacePrx>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyInterfaceProxy(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMyInterfaceProxy(const std::optional< ::Test::MyInterfacePrx>& p1, const ::Test::Callback_Initial_opMyInterfaceProxyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyInterfaceProxy(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMyInterfaceProxy(const std::optional< ::Test::MyInterfacePrx>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opMyInterfaceProxyPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyInterfaceProxy(p1, context, cb, cookie);
    }

    std::optional< ::Test::MyInterfacePrx> end_opMyInterfaceProxy(std::optional< ::Test::MyInterfacePrx>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opMyInterfaceProxy(std::optional< ::Test::MyInterfacePrx>& iceP_p3, std::optional< ::Test::MyInterfacePrx>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opMyInterfaceProxy(const std::optional< ::Test::MyInterfacePrx>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::MyInterfacePrx> opMyInterfaceProxyReq(const std::optional< ::Test::MyInterfacePrx>& p1, std::optional< ::Test::MyInterfacePrx>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opMyInterfaceProxyReq(p3, _iceI_begin_opMyInterfaceProxyReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opMyInterfaceProxyReq(const std::optional< ::Test::MyInterfacePrx>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opMyInterfaceProxyReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opMyInterfaceProxyReq(const std::optional< ::Test::MyInterfacePrx>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyInterfaceProxyReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMyInterfaceProxyReq(const std::optional< ::Test::MyInterfacePrx>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyInterfaceProxyReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMyInterfaceProxyReq(const std::optional< ::Test::MyInterfacePrx>& p1, const ::Test::Callback_Initial_opMyInterfaceProxyReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyInterfaceProxyReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMyInterfaceProxyReq(const std::optional< ::Test::MyInterfacePrx>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opMyInterfaceProxyReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMyInterfaceProxyReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::MyInterfacePrx> end_opMyInterfaceProxyReq(std::optional< ::Test::MyInterfacePrx>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opMyInterfaceProxyReq(std::optional< ::Test::MyInterfacePrx>& iceP_p3, std::optional< ::Test::MyInterfacePrx>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opMyInterfaceProxyReq(const std::optional< ::Test::MyInterfacePrx>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::ByteSeq> opByteSeq(const std::optional< ::Test::ByteSeq>& p1, std::optional< ::Test::ByteSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opByteSeq(p3, _iceI_begin_opByteSeq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opByteSeq(const std::optional< ::Test::ByteSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opByteSeq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opByteSeq(const std::optional< ::Test::ByteSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteSeq(const std::optional< ::Test::ByteSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteSeq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteSeq(const std::optional< ::Test::ByteSeq>& p1, const ::Test::Callback_Initial_opByteSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteSeq(const std::optional< ::Test::ByteSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opByteSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteSeq(p1, context, cb, cookie);
    }

    std::optional< ::Test::ByteSeq> end_opByteSeq(std::optional< ::Test::ByteSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opByteSeq(std::optional< ::Test::ByteSeq>& iceP_p3, std::optional< ::Test::ByteSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opByteSeq(const std::optional< ::Test::ByteSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::ByteSeq> opByteSeqReq(const std::optional< ::Test::ByteSeq>& p1, std::optional< ::Test::ByteSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opByteSeqReq(p3, _iceI_begin_opByteSeqReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opByteSeqReq(const std::optional< ::Test::ByteSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opByteSeqReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opByteSeqReq(const std::optional< ::Test::ByteSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteSeqReq(const std::optional< ::Test::ByteSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteSeqReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteSeqReq(const std::optional< ::Test::ByteSeq>& p1, const ::Test::Callback_Initial_opByteSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opByteSeqReq(const std::optional< ::Test::ByteSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opByteSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opByteSeqReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::ByteSeq> end_opByteSeqReq(std::optional< ::Test::ByteSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opByteSeqReq(std::optional< ::Test::ByteSeq>& iceP_p3, std::optional< ::Test::ByteSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opByteSeqReq(const std::optional< ::Test::ByteSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::BoolSeq> opBoolSeq(const std::optional< ::Test::BoolSeq>& p1, std::optional< ::Test::BoolSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opBoolSeq(p3, _iceI_begin_opBoolSeq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opBoolSeq(const std::optional< ::Test::BoolSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opBoolSeq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opBoolSeq(const std::optional< ::Test::BoolSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBoolSeq(const std::optional< ::Test::BoolSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolSeq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBoolSeq(const std::optional< ::Test::BoolSeq>& p1, const ::Test::Callback_Initial_opBoolSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBoolSeq(const std::optional< ::Test::BoolSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opBoolSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolSeq(p1, context, cb, cookie);
    }

    std::optional< ::Test::BoolSeq> end_opBoolSeq(std::optional< ::Test::BoolSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opBoolSeq(std::optional< ::Test::BoolSeq>& iceP_p3, std::optional< ::Test::BoolSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opBoolSeq(const std::optional< ::Test::BoolSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::BoolSeq> opBoolSeqReq(const std::optional< ::Test::BoolSeq>& p1, std::optional< ::Test::BoolSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opBoolSeqReq(p3, _iceI_begin_opBoolSeqReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opBoolSeqReq(const std::optional< ::Test::BoolSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opBoolSeqReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opBoolSeqReq(const std::optional< ::Test::BoolSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBoolSeqReq(const std::optional< ::Test::BoolSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolSeqReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBoolSeqReq(const std::optional< ::Test::BoolSeq>& p1, const ::Test::Callback_Initial_opBoolSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opBoolSeqReq(const std::optional< ::Test::BoolSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opBoolSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opBoolSeqReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::BoolSeq> end_opBoolSeqReq(std::optional< ::Test::BoolSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opBoolSeqReq(std::optional< ::Test::BoolSeq>& iceP_p3, std::optional< ::Test::BoolSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opBoolSeqReq(const std::optional< ::Test::BoolSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::ShortSeq> opShortSeq(const std::optional< ::Test::ShortSeq>& p1, std::optional< ::Test::ShortSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opShortSeq(p3, _iceI_begin_opShortSeq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opShortSeq(const std::optional< ::Test::ShortSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opShortSeq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opShortSeq(const std::optional< ::Test::ShortSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShortSeq(const std::optional< ::Test::ShortSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortSeq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShortSeq(const std::optional< ::Test::ShortSeq>& p1, const ::Test::Callback_Initial_opShortSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShortSeq(const std::optional< ::Test::ShortSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opShortSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortSeq(p1, context, cb, cookie);
    }

    std::optional< ::Test::ShortSeq> end_opShortSeq(std::optional< ::Test::ShortSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opShortSeq(std::optional< ::Test::ShortSeq>& iceP_p3, std::optional< ::Test::ShortSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opShortSeq(const std::optional< ::Test::ShortSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::ShortSeq> opShortSeqReq(const std::optional< ::Test::ShortSeq>& p1, std::optional< ::Test::ShortSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opShortSeqReq(p3, _iceI_begin_opShortSeqReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opShortSeqReq(const std::optional< ::Test::ShortSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opShortSeqReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opShortSeqReq(const std::optional< ::Test::ShortSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShortSeqReq(const std::optional< ::Test::ShortSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortSeqReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShortSeqReq(const std::optional< ::Test::ShortSeq>& p1, const ::Test::Callback_Initial_opShortSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opShortSeqReq(const std::optional< ::Test::ShortSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opShortSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opShortSeqReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::ShortSeq> end_opShortSeqReq(std::optional< ::Test::ShortSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opShortSeqReq(std::optional< ::Test::ShortSeq>& iceP_p3, std::optional< ::Test::ShortSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opShortSeqReq(const std::optional< ::Test::ShortSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::IntSeq> opIntSeq(const std::optional< ::Test::IntSeq>& p1, std::optional< ::Test::IntSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opIntSeq(p3, _iceI_begin_opIntSeq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opIntSeq(const std::optional< ::Test::IntSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opIntSeq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opIntSeq(const std::optional< ::Test::IntSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntSeq(const std::optional< ::Test::IntSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntSeq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntSeq(const std::optional< ::Test::IntSeq>& p1, const ::Test::Callback_Initial_opIntSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntSeq(const std::optional< ::Test::IntSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opIntSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntSeq(p1, context, cb, cookie);
    }

    std::optional< ::Test::IntSeq> end_opIntSeq(std::optional< ::Test::IntSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opIntSeq(std::optional< ::Test::IntSeq>& iceP_p3, std::optional< ::Test::IntSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opIntSeq(const std::optional< ::Test::IntSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::IntSeq> opIntSeqReq(const std::optional< ::Test::IntSeq>& p1, std::optional< ::Test::IntSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opIntSeqReq(p3, _iceI_begin_opIntSeqReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opIntSeqReq(const std::optional< ::Test::IntSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opIntSeqReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opIntSeqReq(const std::optional< ::Test::IntSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntSeqReq(const std::optional< ::Test::IntSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntSeqReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntSeqReq(const std::optional< ::Test::IntSeq>& p1, const ::Test::Callback_Initial_opIntSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntSeqReq(const std::optional< ::Test::IntSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opIntSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntSeqReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::IntSeq> end_opIntSeqReq(std::optional< ::Test::IntSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opIntSeqReq(std::optional< ::Test::IntSeq>& iceP_p3, std::optional< ::Test::IntSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opIntSeqReq(const std::optional< ::Test::IntSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::LongSeq> opLongSeq(const std::optional< ::Test::LongSeq>& p1, std::optional< ::Test::LongSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opLongSeq(p3, _iceI_begin_opLongSeq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opLongSeq(const std::optional< ::Test::LongSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opLongSeq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opLongSeq(const std::optional< ::Test::LongSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLongSeq(const std::optional< ::Test::LongSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongSeq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLongSeq(const std::optional< ::Test::LongSeq>& p1, const ::Test::Callback_Initial_opLongSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLongSeq(const std::optional< ::Test::LongSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opLongSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongSeq(p1, context, cb, cookie);
    }

    std::optional< ::Test::LongSeq> end_opLongSeq(std::optional< ::Test::LongSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opLongSeq(std::optional< ::Test::LongSeq>& iceP_p3, std::optional< ::Test::LongSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opLongSeq(const std::optional< ::Test::LongSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::LongSeq> opLongSeqReq(const std::optional< ::Test::LongSeq>& p1, std::optional< ::Test::LongSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opLongSeqReq(p3, _iceI_begin_opLongSeqReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opLongSeqReq(const std::optional< ::Test::LongSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opLongSeqReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opLongSeqReq(const std::optional< ::Test::LongSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLongSeqReq(const std::optional< ::Test::LongSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongSeqReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLongSeqReq(const std::optional< ::Test::LongSeq>& p1, const ::Test::Callback_Initial_opLongSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opLongSeqReq(const std::optional< ::Test::LongSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opLongSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opLongSeqReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::LongSeq> end_opLongSeqReq(std::optional< ::Test::LongSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opLongSeqReq(std::optional< ::Test::LongSeq>& iceP_p3, std::optional< ::Test::LongSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opLongSeqReq(const std::optional< ::Test::LongSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::FloatSeq> opFloatSeq(const std::optional< ::Test::FloatSeq>& p1, std::optional< ::Test::FloatSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opFloatSeq(p3, _iceI_begin_opFloatSeq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opFloatSeq(const std::optional< ::Test::FloatSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opFloatSeq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opFloatSeq(const std::optional< ::Test::FloatSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloatSeq(const std::optional< ::Test::FloatSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatSeq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloatSeq(const std::optional< ::Test::FloatSeq>& p1, const ::Test::Callback_Initial_opFloatSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloatSeq(const std::optional< ::Test::FloatSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opFloatSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatSeq(p1, context, cb, cookie);
    }

    std::optional< ::Test::FloatSeq> end_opFloatSeq(std::optional< ::Test::FloatSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opFloatSeq(std::optional< ::Test::FloatSeq>& iceP_p3, std::optional< ::Test::FloatSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opFloatSeq(const std::optional< ::Test::FloatSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::FloatSeq> opFloatSeqReq(const std::optional< ::Test::FloatSeq>& p1, std::optional< ::Test::FloatSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opFloatSeqReq(p3, _iceI_begin_opFloatSeqReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opFloatSeqReq(const std::optional< ::Test::FloatSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opFloatSeqReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opFloatSeqReq(const std::optional< ::Test::FloatSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloatSeqReq(const std::optional< ::Test::FloatSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatSeqReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloatSeqReq(const std::optional< ::Test::FloatSeq>& p1, const ::Test::Callback_Initial_opFloatSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFloatSeqReq(const std::optional< ::Test::FloatSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opFloatSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFloatSeqReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::FloatSeq> end_opFloatSeqReq(std::optional< ::Test::FloatSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opFloatSeqReq(std::optional< ::Test::FloatSeq>& iceP_p3, std::optional< ::Test::FloatSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opFloatSeqReq(const std::optional< ::Test::FloatSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::DoubleSeq> opDoubleSeq(const std::optional< ::Test::DoubleSeq>& p1, std::optional< ::Test::DoubleSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opDoubleSeq(p3, _iceI_begin_opDoubleSeq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opDoubleSeq(const std::optional< ::Test::DoubleSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opDoubleSeq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opDoubleSeq(const std::optional< ::Test::DoubleSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDoubleSeq(const std::optional< ::Test::DoubleSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleSeq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDoubleSeq(const std::optional< ::Test::DoubleSeq>& p1, const ::Test::Callback_Initial_opDoubleSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDoubleSeq(const std::optional< ::Test::DoubleSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opDoubleSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleSeq(p1, context, cb, cookie);
    }

    std::optional< ::Test::DoubleSeq> end_opDoubleSeq(std::optional< ::Test::DoubleSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opDoubleSeq(std::optional< ::Test::DoubleSeq>& iceP_p3, std::optional< ::Test::DoubleSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opDoubleSeq(const std::optional< ::Test::DoubleSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::DoubleSeq> opDoubleSeqReq(const std::optional< ::Test::DoubleSeq>& p1, std::optional< ::Test::DoubleSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opDoubleSeqReq(p3, _iceI_begin_opDoubleSeqReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opDoubleSeqReq(const std::optional< ::Test::DoubleSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opDoubleSeqReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opDoubleSeqReq(const std::optional< ::Test::DoubleSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDoubleSeqReq(const std::optional< ::Test::DoubleSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleSeqReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDoubleSeqReq(const std::optional< ::Test::DoubleSeq>& p1, const ::Test::Callback_Initial_opDoubleSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opDoubleSeqReq(const std::optional< ::Test::DoubleSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opDoubleSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opDoubleSeqReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::DoubleSeq> end_opDoubleSeqReq(std::optional< ::Test::DoubleSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opDoubleSeqReq(std::optional< ::Test::DoubleSeq>& iceP_p3, std::optional< ::Test::DoubleSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opDoubleSeqReq(const std::optional< ::Test::DoubleSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::StringSeq> opStringSeq(const std::optional< ::Test::StringSeq>& p1, std::optional< ::Test::StringSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opStringSeq(p3, _iceI_begin_opStringSeq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opStringSeq(const std::optional< ::Test::StringSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opStringSeq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opStringSeq(const std::optional< ::Test::StringSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStringSeq(const std::optional< ::Test::StringSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringSeq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStringSeq(const std::optional< ::Test::StringSeq>& p1, const ::Test::Callback_Initial_opStringSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStringSeq(const std::optional< ::Test::StringSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opStringSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringSeq(p1, context, cb, cookie);
    }

    std::optional< ::Test::StringSeq> end_opStringSeq(std::optional< ::Test::StringSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opStringSeq(std::optional< ::Test::StringSeq>& iceP_p3, std::optional< ::Test::StringSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opStringSeq(const std::optional< ::Test::StringSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::StringSeq> opStringSeqReq(const std::optional< ::Test::StringSeq>& p1, std::optional< ::Test::StringSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opStringSeqReq(p3, _iceI_begin_opStringSeqReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opStringSeqReq(const std::optional< ::Test::StringSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opStringSeqReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opStringSeqReq(const std::optional< ::Test::StringSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStringSeqReq(const std::optional< ::Test::StringSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringSeqReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStringSeqReq(const std::optional< ::Test::StringSeq>& p1, const ::Test::Callback_Initial_opStringSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStringSeqReq(const std::optional< ::Test::StringSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opStringSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringSeqReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::StringSeq> end_opStringSeqReq(std::optional< ::Test::StringSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opStringSeqReq(std::optional< ::Test::StringSeq>& iceP_p3, std::optional< ::Test::StringSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opStringSeqReq(const std::optional< ::Test::StringSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::SmallStructSeq> opSmallStructSeq(const std::optional< ::Test::SmallStructSeq>& p1, std::optional< ::Test::SmallStructSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSmallStructSeq(p3, _iceI_begin_opSmallStructSeq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSmallStructSeq(const std::optional< ::Test::SmallStructSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSmallStructSeq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructSeq(const std::optional< ::Test::SmallStructSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructSeq(const std::optional< ::Test::SmallStructSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructSeq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructSeq(const std::optional< ::Test::SmallStructSeq>& p1, const ::Test::Callback_Initial_opSmallStructSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructSeq(const std::optional< ::Test::SmallStructSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opSmallStructSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructSeq(p1, context, cb, cookie);
    }

    std::optional< ::Test::SmallStructSeq> end_opSmallStructSeq(std::optional< ::Test::SmallStructSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSmallStructSeq(std::optional< ::Test::SmallStructSeq>& iceP_p3, std::optional< ::Test::SmallStructSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSmallStructSeq(const std::optional< ::Test::SmallStructSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::SmallStructSeq> opSmallStructSeqReq(const std::optional< ::Test::SmallStructSeq>& p1, std::optional< ::Test::SmallStructSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSmallStructSeqReq(p3, _iceI_begin_opSmallStructSeqReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSmallStructSeqReq(const std::optional< ::Test::SmallStructSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSmallStructSeqReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructSeqReq(const std::optional< ::Test::SmallStructSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructSeqReq(const std::optional< ::Test::SmallStructSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructSeqReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructSeqReq(const std::optional< ::Test::SmallStructSeq>& p1, const ::Test::Callback_Initial_opSmallStructSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructSeqReq(const std::optional< ::Test::SmallStructSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opSmallStructSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructSeqReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::SmallStructSeq> end_opSmallStructSeqReq(std::optional< ::Test::SmallStructSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSmallStructSeqReq(std::optional< ::Test::SmallStructSeq>& iceP_p3, std::optional< ::Test::SmallStructSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSmallStructSeqReq(const std::optional< ::Test::SmallStructSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::SmallStructList> opSmallStructList(const std::optional< ::Test::SmallStructList>& p1, std::optional< ::Test::SmallStructList>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSmallStructList(p3, _iceI_begin_opSmallStructList(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSmallStructList(const std::optional< ::Test::SmallStructList>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSmallStructList(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructList(const std::optional< ::Test::SmallStructList>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructList(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructList(const std::optional< ::Test::SmallStructList>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructList(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructList(const std::optional< ::Test::SmallStructList>& p1, const ::Test::Callback_Initial_opSmallStructListPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructList(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructList(const std::optional< ::Test::SmallStructList>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opSmallStructListPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructList(p1, context, cb, cookie);
    }

    std::optional< ::Test::SmallStructList> end_opSmallStructList(std::optional< ::Test::SmallStructList>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSmallStructList(std::optional< ::Test::SmallStructList>& iceP_p3, std::optional< ::Test::SmallStructList>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSmallStructList(const std::optional< ::Test::SmallStructList>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::SmallStructList> opSmallStructListReq(const std::optional< ::Test::SmallStructList>& p1, std::optional< ::Test::SmallStructList>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSmallStructListReq(p3, _iceI_begin_opSmallStructListReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSmallStructListReq(const std::optional< ::Test::SmallStructList>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSmallStructListReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructListReq(const std::optional< ::Test::SmallStructList>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructListReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructListReq(const std::optional< ::Test::SmallStructList>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructListReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructListReq(const std::optional< ::Test::SmallStructList>& p1, const ::Test::Callback_Initial_opSmallStructListReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructListReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSmallStructListReq(const std::optional< ::Test::SmallStructList>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opSmallStructListReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSmallStructListReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::SmallStructList> end_opSmallStructListReq(std::optional< ::Test::SmallStructList>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSmallStructListReq(std::optional< ::Test::SmallStructList>& iceP_p3, std::optional< ::Test::SmallStructList>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSmallStructListReq(const std::optional< ::Test::SmallStructList>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::FixedStructSeq> opFixedStructSeq(const std::optional< ::Test::FixedStructSeq>& p1, std::optional< ::Test::FixedStructSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opFixedStructSeq(p3, _iceI_begin_opFixedStructSeq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opFixedStructSeq(const std::optional< ::Test::FixedStructSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opFixedStructSeq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructSeq(const std::optional< ::Test::FixedStructSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructSeq(const std::optional< ::Test::FixedStructSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructSeq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructSeq(const std::optional< ::Test::FixedStructSeq>& p1, const ::Test::Callback_Initial_opFixedStructSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructSeq(const std::optional< ::Test::FixedStructSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opFixedStructSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructSeq(p1, context, cb, cookie);
    }

    std::optional< ::Test::FixedStructSeq> end_opFixedStructSeq(std::optional< ::Test::FixedStructSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opFixedStructSeq(std::optional< ::Test::FixedStructSeq>& iceP_p3, std::optional< ::Test::FixedStructSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opFixedStructSeq(const std::optional< ::Test::FixedStructSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::FixedStructSeq> opFixedStructSeqReq(const std::optional< ::Test::FixedStructSeq>& p1, std::optional< ::Test::FixedStructSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opFixedStructSeqReq(p3, _iceI_begin_opFixedStructSeqReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opFixedStructSeqReq(const std::optional< ::Test::FixedStructSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opFixedStructSeqReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructSeqReq(const std::optional< ::Test::FixedStructSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructSeqReq(const std::optional< ::Test::FixedStructSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructSeqReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructSeqReq(const std::optional< ::Test::FixedStructSeq>& p1, const ::Test::Callback_Initial_opFixedStructSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructSeqReq(const std::optional< ::Test::FixedStructSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opFixedStructSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructSeqReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::FixedStructSeq> end_opFixedStructSeqReq(std::optional< ::Test::FixedStructSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opFixedStructSeqReq(std::optional< ::Test::FixedStructSeq>& iceP_p3, std::optional< ::Test::FixedStructSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opFixedStructSeqReq(const std::optional< ::Test::FixedStructSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::FixedStructList> opFixedStructList(const std::optional< ::Test::FixedStructList>& p1, std::optional< ::Test::FixedStructList>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opFixedStructList(p3, _iceI_begin_opFixedStructList(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opFixedStructList(const std::optional< ::Test::FixedStructList>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opFixedStructList(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructList(const std::optional< ::Test::FixedStructList>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructList(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructList(const std::optional< ::Test::FixedStructList>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructList(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructList(const std::optional< ::Test::FixedStructList>& p1, const ::Test::Callback_Initial_opFixedStructListPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructList(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructList(const std::optional< ::Test::FixedStructList>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opFixedStructListPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructList(p1, context, cb, cookie);
    }

    std::optional< ::Test::FixedStructList> end_opFixedStructList(std::optional< ::Test::FixedStructList>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opFixedStructList(std::optional< ::Test::FixedStructList>& iceP_p3, std::optional< ::Test::FixedStructList>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opFixedStructList(const std::optional< ::Test::FixedStructList>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::FixedStructList> opFixedStructListReq(const std::optional< ::Test::FixedStructList>& p1, std::optional< ::Test::FixedStructList>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opFixedStructListReq(p3, _iceI_begin_opFixedStructListReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opFixedStructListReq(const std::optional< ::Test::FixedStructList>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opFixedStructListReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructListReq(const std::optional< ::Test::FixedStructList>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructListReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructListReq(const std::optional< ::Test::FixedStructList>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructListReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructListReq(const std::optional< ::Test::FixedStructList>& p1, const ::Test::Callback_Initial_opFixedStructListReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructListReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opFixedStructListReq(const std::optional< ::Test::FixedStructList>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opFixedStructListReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opFixedStructListReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::FixedStructList> end_opFixedStructListReq(std::optional< ::Test::FixedStructList>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opFixedStructListReq(std::optional< ::Test::FixedStructList>& iceP_p3, std::optional< ::Test::FixedStructList>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opFixedStructListReq(const std::optional< ::Test::FixedStructList>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::VarStructSeq> opVarStructSeq(const std::optional< ::Test::VarStructSeq>& p1, std::optional< ::Test::VarStructSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opVarStructSeq(p3, _iceI_begin_opVarStructSeq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opVarStructSeq(const std::optional< ::Test::VarStructSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opVarStructSeq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opVarStructSeq(const std::optional< ::Test::VarStructSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStructSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opVarStructSeq(const std::optional< ::Test::VarStructSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStructSeq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opVarStructSeq(const std::optional< ::Test::VarStructSeq>& p1, const ::Test::Callback_Initial_opVarStructSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStructSeq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opVarStructSeq(const std::optional< ::Test::VarStructSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opVarStructSeqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStructSeq(p1, context, cb, cookie);
    }

    std::optional< ::Test::VarStructSeq> end_opVarStructSeq(std::optional< ::Test::VarStructSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opVarStructSeq(std::optional< ::Test::VarStructSeq>& iceP_p3, std::optional< ::Test::VarStructSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opVarStructSeq(const std::optional< ::Test::VarStructSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::VarStructSeq> opVarStructSeqReq(const std::optional< ::Test::VarStructSeq>& p1, std::optional< ::Test::VarStructSeq>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opVarStructSeqReq(p3, _iceI_begin_opVarStructSeqReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opVarStructSeqReq(const std::optional< ::Test::VarStructSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opVarStructSeqReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opVarStructSeqReq(const std::optional< ::Test::VarStructSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStructSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opVarStructSeqReq(const std::optional< ::Test::VarStructSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStructSeqReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opVarStructSeqReq(const std::optional< ::Test::VarStructSeq>& p1, const ::Test::Callback_Initial_opVarStructSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStructSeqReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opVarStructSeqReq(const std::optional< ::Test::VarStructSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opVarStructSeqReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVarStructSeqReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::VarStructSeq> end_opVarStructSeqReq(std::optional< ::Test::VarStructSeq>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opVarStructSeqReq(std::optional< ::Test::VarStructSeq>& iceP_p3, std::optional< ::Test::VarStructSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opVarStructSeqReq(const std::optional< ::Test::VarStructSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::Serializable> opSerializable(const std::optional< ::Test::Serializable>& p1, std::optional< ::Test::Serializable>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSerializable(p3, _iceI_begin_opSerializable(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSerializable(const std::optional< ::Test::Serializable>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSerializable(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSerializable(const std::optional< ::Test::Serializable>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerializable(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSerializable(const std::optional< ::Test::Serializable>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerializable(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSerializable(const std::optional< ::Test::Serializable>& p1, const ::Test::Callback_Initial_opSerializablePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerializable(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSerializable(const std::optional< ::Test::Serializable>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opSerializablePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerializable(p1, context, cb, cookie);
    }

    std::optional< ::Test::Serializable> end_opSerializable(std::optional< ::Test::Serializable>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSerializable(std::optional< ::Test::Serializable>& iceP_p3, std::optional< ::Test::Serializable>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSerializable(const std::optional< ::Test::Serializable>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::Serializable> opSerializableReq(const std::optional< ::Test::Serializable>& p1, std::optional< ::Test::Serializable>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opSerializableReq(p3, _iceI_begin_opSerializableReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opSerializableReq(const std::optional< ::Test::Serializable>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opSerializableReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opSerializableReq(const std::optional< ::Test::Serializable>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerializableReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSerializableReq(const std::optional< ::Test::Serializable>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerializableReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSerializableReq(const std::optional< ::Test::Serializable>& p1, const ::Test::Callback_Initial_opSerializableReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerializableReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opSerializableReq(const std::optional< ::Test::Serializable>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opSerializableReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opSerializableReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::Serializable> end_opSerializableReq(std::optional< ::Test::Serializable>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opSerializableReq(std::optional< ::Test::Serializable>& iceP_p3, std::optional< ::Test::Serializable>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opSerializableReq(const std::optional< ::Test::Serializable>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::IntIntDict> opIntIntDict(const std::optional< ::Test::IntIntDict>& p1, std::optional< ::Test::IntIntDict>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opIntIntDict(p3, _iceI_begin_opIntIntDict(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opIntIntDict(const std::optional< ::Test::IntIntDict>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opIntIntDict(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opIntIntDict(const std::optional< ::Test::IntIntDict>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntIntDict(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntIntDict(const std::optional< ::Test::IntIntDict>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntIntDict(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntIntDict(const std::optional< ::Test::IntIntDict>& p1, const ::Test::Callback_Initial_opIntIntDictPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntIntDict(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntIntDict(const std::optional< ::Test::IntIntDict>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opIntIntDictPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntIntDict(p1, context, cb, cookie);
    }

    std::optional< ::Test::IntIntDict> end_opIntIntDict(std::optional< ::Test::IntIntDict>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opIntIntDict(std::optional< ::Test::IntIntDict>& iceP_p3, std::optional< ::Test::IntIntDict>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opIntIntDict(const std::optional< ::Test::IntIntDict>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::IntIntDict> opIntIntDictReq(const std::optional< ::Test::IntIntDict>& p1, std::optional< ::Test::IntIntDict>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opIntIntDictReq(p3, _iceI_begin_opIntIntDictReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opIntIntDictReq(const std::optional< ::Test::IntIntDict>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opIntIntDictReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opIntIntDictReq(const std::optional< ::Test::IntIntDict>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntIntDictReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntIntDictReq(const std::optional< ::Test::IntIntDict>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntIntDictReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntIntDictReq(const std::optional< ::Test::IntIntDict>& p1, const ::Test::Callback_Initial_opIntIntDictReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntIntDictReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntIntDictReq(const std::optional< ::Test::IntIntDict>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opIntIntDictReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntIntDictReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::IntIntDict> end_opIntIntDictReq(std::optional< ::Test::IntIntDict>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opIntIntDictReq(std::optional< ::Test::IntIntDict>& iceP_p3, std::optional< ::Test::IntIntDict>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opIntIntDictReq(const std::optional< ::Test::IntIntDict>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::StringIntDict> opStringIntDict(const std::optional< ::Test::StringIntDict>& p1, std::optional< ::Test::StringIntDict>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opStringIntDict(p3, _iceI_begin_opStringIntDict(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opStringIntDict(const std::optional< ::Test::StringIntDict>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opStringIntDict(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opStringIntDict(const std::optional< ::Test::StringIntDict>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringIntDict(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStringIntDict(const std::optional< ::Test::StringIntDict>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringIntDict(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStringIntDict(const std::optional< ::Test::StringIntDict>& p1, const ::Test::Callback_Initial_opStringIntDictPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringIntDict(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStringIntDict(const std::optional< ::Test::StringIntDict>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opStringIntDictPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringIntDict(p1, context, cb, cookie);
    }

    std::optional< ::Test::StringIntDict> end_opStringIntDict(std::optional< ::Test::StringIntDict>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opStringIntDict(std::optional< ::Test::StringIntDict>& iceP_p3, std::optional< ::Test::StringIntDict>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opStringIntDict(const std::optional< ::Test::StringIntDict>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::StringIntDict> opStringIntDictReq(const std::optional< ::Test::StringIntDict>& p1, std::optional< ::Test::StringIntDict>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opStringIntDictReq(p3, _iceI_begin_opStringIntDictReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opStringIntDictReq(const std::optional< ::Test::StringIntDict>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opStringIntDictReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opStringIntDictReq(const std::optional< ::Test::StringIntDict>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringIntDictReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStringIntDictReq(const std::optional< ::Test::StringIntDict>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringIntDictReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStringIntDictReq(const std::optional< ::Test::StringIntDict>& p1, const ::Test::Callback_Initial_opStringIntDictReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringIntDictReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opStringIntDictReq(const std::optional< ::Test::StringIntDict>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opStringIntDictReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opStringIntDictReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::StringIntDict> end_opStringIntDictReq(std::optional< ::Test::StringIntDict>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opStringIntDictReq(std::optional< ::Test::StringIntDict>& iceP_p3, std::optional< ::Test::StringIntDict>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opStringIntDictReq(const std::optional< ::Test::StringIntDict>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::IntOneOptionalDict> opIntOneOptionalDict(const std::optional< ::Test::IntOneOptionalDict>& p1, std::optional< ::Test::IntOneOptionalDict>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opIntOneOptionalDict(p3, _iceI_begin_opIntOneOptionalDict(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opIntOneOptionalDict(const std::optional< ::Test::IntOneOptionalDict>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opIntOneOptionalDict(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opIntOneOptionalDict(const std::optional< ::Test::IntOneOptionalDict>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntOneOptionalDict(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntOneOptionalDict(const std::optional< ::Test::IntOneOptionalDict>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntOneOptionalDict(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntOneOptionalDict(const std::optional< ::Test::IntOneOptionalDict>& p1, const ::Test::Callback_Initial_opIntOneOptionalDictPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntOneOptionalDict(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntOneOptionalDict(const std::optional< ::Test::IntOneOptionalDict>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opIntOneOptionalDictPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntOneOptionalDict(p1, context, cb, cookie);
    }

    std::optional< ::Test::IntOneOptionalDict> end_opIntOneOptionalDict(std::optional< ::Test::IntOneOptionalDict>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opIntOneOptionalDict(std::optional< ::Test::IntOneOptionalDict>& iceP_p3, std::optional< ::Test::IntOneOptionalDict>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opIntOneOptionalDict(const std::optional< ::Test::IntOneOptionalDict>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::IntOneOptionalDict> opIntOneOptionalDictReq(const std::optional< ::Test::IntOneOptionalDict>& p1, std::optional< ::Test::IntOneOptionalDict>& p3, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opIntOneOptionalDictReq(p3, _iceI_begin_opIntOneOptionalDictReq(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opIntOneOptionalDictReq(const std::optional< ::Test::IntOneOptionalDict>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opIntOneOptionalDictReq(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opIntOneOptionalDictReq(const std::optional< ::Test::IntOneOptionalDict>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntOneOptionalDictReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntOneOptionalDictReq(const std::optional< ::Test::IntOneOptionalDict>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntOneOptionalDictReq(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntOneOptionalDictReq(const std::optional< ::Test::IntOneOptionalDict>& p1, const ::Test::Callback_Initial_opIntOneOptionalDictReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntOneOptionalDictReq(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opIntOneOptionalDictReq(const std::optional< ::Test::IntOneOptionalDict>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opIntOneOptionalDictReqPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opIntOneOptionalDictReq(p1, context, cb, cookie);
    }

    std::optional< ::Test::IntOneOptionalDict> end_opIntOneOptionalDictReq(std::optional< ::Test::IntOneOptionalDict>& p3, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opIntOneOptionalDictReq(std::optional< ::Test::IntOneOptionalDict>& iceP_p3, std::optional< ::Test::IntOneOptionalDict>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opIntOneOptionalDictReq(const std::optional< ::Test::IntOneOptionalDict>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void opClassAndUnknownOptional(const ::Test::APtr& p, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_opClassAndUnknownOptional(_iceI_begin_opClassAndUnknownOptional(p, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opClassAndUnknownOptional(const ::Test::APtr& p, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opClassAndUnknownOptional(p, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opClassAndUnknownOptional(const ::Test::APtr& p, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opClassAndUnknownOptional(p, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opClassAndUnknownOptional(const ::Test::APtr& p, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opClassAndUnknownOptional(p, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opClassAndUnknownOptional(const ::Test::APtr& p, const ::Test::Callback_Initial_opClassAndUnknownOptionalPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opClassAndUnknownOptional(p, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opClassAndUnknownOptional(const ::Test::APtr& p, const ::Ice::Context& context, const ::Test::Callback_Initial_opClassAndUnknownOptionalPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opClassAndUnknownOptional(p, context, cb, cookie);
    }

    void end_opClassAndUnknownOptional(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opClassAndUnknownOptional(const ::Test::APtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void sendOptionalClass(bool req, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sendOptionalClass(_iceI_begin_sendOptionalClass(req, o, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendOptionalClass(bool req, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendOptionalClass(req, o, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendOptionalClass(bool req, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendOptionalClass(req, o, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendOptionalClass(bool req, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendOptionalClass(req, o, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendOptionalClass(bool req, const std::optional< ::Test::OneOptionalPtr>& o, const ::Test::Callback_Initial_sendOptionalClassPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendOptionalClass(req, o, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendOptionalClass(bool req, const std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context, const ::Test::Callback_Initial_sendOptionalClassPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendOptionalClass(req, o, context, cb, cookie);
    }

    void end_sendOptionalClass(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendOptionalClass(bool, const std::optional< ::Test::OneOptionalPtr>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void returnOptionalClass(bool req, std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_returnOptionalClass(o, _iceI_begin_returnOptionalClass(req, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_returnOptionalClass(bool req, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_returnOptionalClass(req, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_returnOptionalClass(bool req, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_returnOptionalClass(req, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_returnOptionalClass(bool req, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_returnOptionalClass(req, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_returnOptionalClass(bool req, const ::Test::Callback_Initial_returnOptionalClassPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_returnOptionalClass(req, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_returnOptionalClass(bool req, const ::Ice::Context& context, const ::Test::Callback_Initial_returnOptionalClassPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_returnOptionalClass(req, context, cb, cookie);
    }

    void end_returnOptionalClass(std::optional< ::Test::OneOptionalPtr>& o, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_returnOptionalClass(std::optional< ::Test::OneOptionalPtr>& iceP_o, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_returnOptionalClass(bool, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Test::GPtr opG(const ::Test::GPtr& g, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opG(_iceI_begin_opG(g, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opG(const ::Test::GPtr& g, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opG(g, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opG(const ::Test::GPtr& g, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opG(g, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opG(const ::Test::GPtr& g, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opG(g, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opG(const ::Test::GPtr& g, const ::Test::Callback_Initial_opGPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opG(g, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opG(const ::Test::GPtr& g, const ::Ice::Context& context, const ::Test::Callback_Initial_opGPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opG(g, context, cb, cookie);
    }

    ::Test::GPtr end_opG(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opG(const ::Test::GPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void opVoid(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_opVoid(_iceI_begin_opVoid(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opVoid(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opVoid(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opVoid(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVoid(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opVoid(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVoid(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opVoid(const ::Test::Callback_Initial_opVoidPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVoid(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opVoid(const ::Ice::Context& context, const ::Test::Callback_Initial_opVoidPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opVoid(context, cb, cookie);
    }

    void end_opVoid(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opVoid(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::SmallStruct> opMStruct1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opMStruct1(_iceI_begin_opMStruct1(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opMStruct1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opMStruct1(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opMStruct1(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMStruct1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMStruct1(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMStruct1(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMStruct1(const ::Test::Callback_Initial_opMStruct1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMStruct1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMStruct1(const ::Ice::Context& context, const ::Test::Callback_Initial_opMStruct1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMStruct1(context, cb, cookie);
    }

    std::optional< ::Test::SmallStruct> end_opMStruct1(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opMStruct1(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::SmallStruct> opMStruct2(const std::optional< ::Test::SmallStruct>& p1, std::optional< ::Test::SmallStruct>& p2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opMStruct2(p2, _iceI_begin_opMStruct2(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opMStruct2(const std::optional< ::Test::SmallStruct>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opMStruct2(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opMStruct2(const std::optional< ::Test::SmallStruct>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMStruct2(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMStruct2(const std::optional< ::Test::SmallStruct>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMStruct2(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMStruct2(const std::optional< ::Test::SmallStruct>& p1, const ::Test::Callback_Initial_opMStruct2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMStruct2(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMStruct2(const std::optional< ::Test::SmallStruct>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opMStruct2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMStruct2(p1, context, cb, cookie);
    }

    std::optional< ::Test::SmallStruct> end_opMStruct2(std::optional< ::Test::SmallStruct>& p2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opMStruct2(std::optional< ::Test::SmallStruct>& iceP_p2, std::optional< ::Test::SmallStruct>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opMStruct2(const std::optional< ::Test::SmallStruct>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::StringSeq> opMSeq1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opMSeq1(_iceI_begin_opMSeq1(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opMSeq1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opMSeq1(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opMSeq1(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMSeq1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMSeq1(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMSeq1(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMSeq1(const ::Test::Callback_Initial_opMSeq1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMSeq1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMSeq1(const ::Ice::Context& context, const ::Test::Callback_Initial_opMSeq1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMSeq1(context, cb, cookie);
    }

    std::optional< ::Test::StringSeq> end_opMSeq1(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opMSeq1(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::StringSeq> opMSeq2(const std::optional< ::Test::StringSeq>& p1, std::optional< ::Test::StringSeq>& p2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opMSeq2(p2, _iceI_begin_opMSeq2(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opMSeq2(const std::optional< ::Test::StringSeq>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opMSeq2(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opMSeq2(const std::optional< ::Test::StringSeq>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMSeq2(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMSeq2(const std::optional< ::Test::StringSeq>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMSeq2(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMSeq2(const std::optional< ::Test::StringSeq>& p1, const ::Test::Callback_Initial_opMSeq2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMSeq2(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMSeq2(const std::optional< ::Test::StringSeq>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opMSeq2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMSeq2(p1, context, cb, cookie);
    }

    std::optional< ::Test::StringSeq> end_opMSeq2(std::optional< ::Test::StringSeq>& p2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opMSeq2(std::optional< ::Test::StringSeq>& iceP_p2, std::optional< ::Test::StringSeq>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opMSeq2(const std::optional< ::Test::StringSeq>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::StringIntDict> opMDict1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opMDict1(_iceI_begin_opMDict1(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opMDict1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opMDict1(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opMDict1(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMDict1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMDict1(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMDict1(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMDict1(const ::Test::Callback_Initial_opMDict1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMDict1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMDict1(const ::Ice::Context& context, const ::Test::Callback_Initial_opMDict1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMDict1(context, cb, cookie);
    }

    std::optional< ::Test::StringIntDict> end_opMDict1(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opMDict1(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::StringIntDict> opMDict2(const std::optional< ::Test::StringIntDict>& p1, std::optional< ::Test::StringIntDict>& p2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opMDict2(p2, _iceI_begin_opMDict2(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opMDict2(const std::optional< ::Test::StringIntDict>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opMDict2(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opMDict2(const std::optional< ::Test::StringIntDict>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMDict2(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMDict2(const std::optional< ::Test::StringIntDict>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMDict2(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMDict2(const std::optional< ::Test::StringIntDict>& p1, const ::Test::Callback_Initial_opMDict2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMDict2(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMDict2(const std::optional< ::Test::StringIntDict>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opMDict2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMDict2(p1, context, cb, cookie);
    }

    std::optional< ::Test::StringIntDict> end_opMDict2(std::optional< ::Test::StringIntDict>& p2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opMDict2(std::optional< ::Test::StringIntDict>& iceP_p2, std::optional< ::Test::StringIntDict>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opMDict2(const std::optional< ::Test::StringIntDict>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::GPtr> opMG1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opMG1(_iceI_begin_opMG1(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opMG1(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opMG1(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opMG1(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMG1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMG1(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMG1(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMG1(const ::Test::Callback_Initial_opMG1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMG1(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMG1(const ::Ice::Context& context, const ::Test::Callback_Initial_opMG1Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMG1(context, cb, cookie);
    }

    std::optional< ::Test::GPtr> end_opMG1(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_opMG1(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    std::optional< ::Test::GPtr> opMG2(const std::optional< ::Test::GPtr>& p1, std::optional< ::Test::GPtr>& p2, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_opMG2(p2, _iceI_begin_opMG2(p1, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_opMG2(const std::optional< ::Test::GPtr>& p1, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_opMG2(p1, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_opMG2(const std::optional< ::Test::GPtr>& p1, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMG2(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMG2(const std::optional< ::Test::GPtr>& p1, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMG2(p1, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMG2(const std::optional< ::Test::GPtr>& p1, const ::Test::Callback_Initial_opMG2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMG2(p1, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_opMG2(const std::optional< ::Test::GPtr>& p1, const ::Ice::Context& context, const ::Test::Callback_Initial_opMG2Ptr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_opMG2(p1, context, cb, cookie);
    }

    std::optional< ::Test::GPtr> end_opMG2(std::optional< ::Test::GPtr>& p2, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_opMG2(std::optional< ::Test::GPtr>& iceP_p2, std::optional< ::Test::GPtr>& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_opMG2(const std::optional< ::Test::GPtr>&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool supportsRequiredParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_supportsRequiredParams(_iceI_begin_supportsRequiredParams(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_supportsRequiredParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_supportsRequiredParams(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_supportsRequiredParams(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsRequiredParams(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsRequiredParams(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsRequiredParams(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsRequiredParams(const ::Test::Callback_Initial_supportsRequiredParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsRequiredParams(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsRequiredParams(const ::Ice::Context& context, const ::Test::Callback_Initial_supportsRequiredParamsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsRequiredParams(context, cb, cookie);
    }

    bool end_supportsRequiredParams(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_supportsRequiredParams(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool supportsJavaSerializable(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_supportsJavaSerializable(_iceI_begin_supportsJavaSerializable(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_supportsJavaSerializable(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_supportsJavaSerializable(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_supportsJavaSerializable(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsJavaSerializable(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsJavaSerializable(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsJavaSerializable(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsJavaSerializable(const ::Test::Callback_Initial_supportsJavaSerializablePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsJavaSerializable(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsJavaSerializable(const ::Ice::Context& context, const ::Test::Callback_Initial_supportsJavaSerializablePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsJavaSerializable(context, cb, cookie);
    }

    bool end_supportsJavaSerializable(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_supportsJavaSerializable(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool supportsCsharpSerializable(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_supportsCsharpSerializable(_iceI_begin_supportsCsharpSerializable(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_supportsCsharpSerializable(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_supportsCsharpSerializable(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_supportsCsharpSerializable(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsCsharpSerializable(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsCsharpSerializable(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsCsharpSerializable(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsCsharpSerializable(const ::Test::Callback_Initial_supportsCsharpSerializablePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsCsharpSerializable(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsCsharpSerializable(const ::Ice::Context& context, const ::Test::Callback_Initial_supportsCsharpSerializablePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsCsharpSerializable(context, cb, cookie);
    }

    bool end_supportsCsharpSerializable(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_supportsCsharpSerializable(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool supportsCppStringView(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_supportsCppStringView(_iceI_begin_supportsCppStringView(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_supportsCppStringView(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_supportsCppStringView(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_supportsCppStringView(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsCppStringView(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsCppStringView(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsCppStringView(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsCppStringView(const ::Test::Callback_Initial_supportsCppStringViewPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsCppStringView(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsCppStringView(const ::Ice::Context& context, const ::Test::Callback_Initial_supportsCppStringViewPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsCppStringView(context, cb, cookie);
    }

    bool end_supportsCppStringView(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_supportsCppStringView(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool supportsNullOptional(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_supportsNullOptional(_iceI_begin_supportsNullOptional(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_supportsNullOptional(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_supportsNullOptional(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_supportsNullOptional(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsNullOptional(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsNullOptional(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsNullOptional(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsNullOptional(const ::Test::Callback_Initial_supportsNullOptionalPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsNullOptional(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_supportsNullOptional(const ::Ice::Context& context, const ::Test::Callback_Initial_supportsNullOptionalPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_supportsNullOptional(context, cb, cookie);
    }

    bool end_supportsNullOptional(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_supportsNullOptional(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Test
{

class MyInterface : public virtual ::Ice::Object
{
public:

    typedef MyInterfacePrx ProxyType;

    virtual ~MyInterface();
    MyInterface() = default;
    MyInterface(const MyInterface&) = default;
    MyInterface& operator=(const MyInterface&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void op(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_op(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

class Initial : public virtual ::Ice::Object
{
public:

    typedef InitialPrx ProxyType;

    virtual ~Initial();
    Initial() = default;
    Initial(const Initial&) = default;
    Initial& operator=(const Initial&) = default;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void shutdown(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::Ice::ValuePtr pingPong(const ::Ice::ValuePtr& o, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_pingPong(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opOptionalException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional<OneOptionalPtr>& o, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opOptionalException(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opDerivedException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional<OneOptionalPtr>& o, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opDerivedException(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opRequiredException(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& b, const std::optional<OneOptionalPtr>& o, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opRequiredException(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional< ::Ice::Byte> opByte(const std::optional< ::Ice::Byte>& p1, std::optional< ::Ice::Byte>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opByte(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional< ::Ice::Byte> opByteReq(const std::optional< ::Ice::Byte>& p1, std::optional< ::Ice::Byte>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opByteReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<bool> opBool(const std::optional<bool>& p1, std::optional<bool>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opBool(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<bool> opBoolReq(const std::optional<bool>& p1, std::optional<bool>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opBoolReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional< ::Ice::Short> opShort(const std::optional< ::Ice::Short>& p1, std::optional< ::Ice::Short>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opShort(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional< ::Ice::Short> opShortReq(const std::optional< ::Ice::Short>& p1, std::optional< ::Ice::Short>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opShortReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional< ::Ice::Int> opInt(const std::optional< ::Ice::Int>& p1, std::optional< ::Ice::Int>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opInt(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional< ::Ice::Int> opIntReq(const std::optional< ::Ice::Int>& p1, std::optional< ::Ice::Int>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional< ::Ice::Long> opLong(const std::optional< ::Ice::Long>& p1, std::optional< ::Ice::Long>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opLong(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional< ::Ice::Long> opLongReq(const std::optional< ::Ice::Long>& p1, std::optional< ::Ice::Long>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opLongReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional< ::Ice::Float> opFloat(const std::optional< ::Ice::Float>& p1, std::optional< ::Ice::Float>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opFloat(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional< ::Ice::Float> opFloatReq(const std::optional< ::Ice::Float>& p1, std::optional< ::Ice::Float>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opFloatReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional< ::Ice::Double> opDouble(const std::optional< ::Ice::Double>& p1, std::optional< ::Ice::Double>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opDouble(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional< ::Ice::Double> opDoubleReq(const std::optional< ::Ice::Double>& p1, std::optional< ::Ice::Double>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opDoubleReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional< ::std::string> opString(const std::optional< ::std::string>& p1, std::optional< ::std::string>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opString(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional< ::std::string> opStringReq(const std::optional< ::std::string>& p1, std::optional< ::std::string>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opStringReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<MyEnum> opMyEnum(const std::optional<MyEnum>& p1, std::optional<MyEnum>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opMyEnum(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<MyEnum> opMyEnumReq(const std::optional<MyEnum>& p1, std::optional<MyEnum>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opMyEnumReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<SmallStruct> opSmallStruct(const std::optional<SmallStruct>& p1, std::optional<SmallStruct>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSmallStruct(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<SmallStruct> opSmallStructReq(const std::optional<SmallStruct>& p1, std::optional<SmallStruct>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSmallStructReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<FixedStruct> opFixedStruct(const std::optional<FixedStruct>& p1, std::optional<FixedStruct>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opFixedStruct(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<FixedStruct> opFixedStructReq(const std::optional<FixedStruct>& p1, std::optional<FixedStruct>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opFixedStructReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<VarStruct> opVarStruct(const std::optional<VarStruct>& p1, std::optional<VarStruct>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opVarStruct(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<VarStruct> opVarStructReq(const std::optional<VarStruct>& p1, std::optional<VarStruct>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opVarStructReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<OneOptionalPtr> opOneOptional(const std::optional<OneOptionalPtr>& p1, std::optional<OneOptionalPtr>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opOneOptional(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<OneOptionalPtr> opOneOptionalReq(const std::optional<OneOptionalPtr>& p1, std::optional<OneOptionalPtr>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opOneOptionalReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<MyInterfacePrx> opMyInterfaceProxy(const std::optional<MyInterfacePrx>& p1, std::optional<MyInterfacePrx>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opMyInterfaceProxy(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<MyInterfacePrx> opMyInterfaceProxyReq(const std::optional<MyInterfacePrx>& p1, std::optional<MyInterfacePrx>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opMyInterfaceProxyReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<ByteSeq> opByteSeq(const std::optional<ByteSeq>& p1, std::optional<ByteSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opByteSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<ByteSeq> opByteSeqReq(const std::optional<ByteSeq>& p1, std::optional<ByteSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opByteSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<BoolSeq> opBoolSeq(const std::optional<BoolSeq>& p1, std::optional<BoolSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opBoolSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<BoolSeq> opBoolSeqReq(const std::optional<BoolSeq>& p1, std::optional<BoolSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opBoolSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<ShortSeq> opShortSeq(const std::optional<ShortSeq>& p1, std::optional<ShortSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opShortSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<ShortSeq> opShortSeqReq(const std::optional<ShortSeq>& p1, std::optional<ShortSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opShortSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<IntSeq> opIntSeq(const std::optional<IntSeq>& p1, std::optional<IntSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<IntSeq> opIntSeqReq(const std::optional<IntSeq>& p1, std::optional<IntSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<LongSeq> opLongSeq(const std::optional<LongSeq>& p1, std::optional<LongSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opLongSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<LongSeq> opLongSeqReq(const std::optional<LongSeq>& p1, std::optional<LongSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opLongSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<FloatSeq> opFloatSeq(const std::optional<FloatSeq>& p1, std::optional<FloatSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opFloatSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<FloatSeq> opFloatSeqReq(const std::optional<FloatSeq>& p1, std::optional<FloatSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opFloatSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<DoubleSeq> opDoubleSeq(const std::optional<DoubleSeq>& p1, std::optional<DoubleSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opDoubleSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<DoubleSeq> opDoubleSeqReq(const std::optional<DoubleSeq>& p1, std::optional<DoubleSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opDoubleSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<StringSeq> opStringSeq(const std::optional<StringSeq>& p1, std::optional<StringSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opStringSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<StringSeq> opStringSeqReq(const std::optional<StringSeq>& p1, std::optional<StringSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opStringSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<SmallStructSeq> opSmallStructSeq(const std::optional<SmallStructSeq>& p1, std::optional<SmallStructSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSmallStructSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<SmallStructSeq> opSmallStructSeqReq(const std::optional<SmallStructSeq>& p1, std::optional<SmallStructSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSmallStructSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<SmallStructList> opSmallStructList(const std::optional<SmallStructList>& p1, std::optional<SmallStructList>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSmallStructList(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<SmallStructList> opSmallStructListReq(const std::optional<SmallStructList>& p1, std::optional<SmallStructList>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSmallStructListReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<FixedStructSeq> opFixedStructSeq(const std::optional<FixedStructSeq>& p1, std::optional<FixedStructSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opFixedStructSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<FixedStructSeq> opFixedStructSeqReq(const std::optional<FixedStructSeq>& p1, std::optional<FixedStructSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opFixedStructSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<FixedStructList> opFixedStructList(const std::optional<FixedStructList>& p1, std::optional<FixedStructList>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opFixedStructList(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<FixedStructList> opFixedStructListReq(const std::optional<FixedStructList>& p1, std::optional<FixedStructList>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opFixedStructListReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<VarStructSeq> opVarStructSeq(const std::optional<VarStructSeq>& p1, std::optional<VarStructSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opVarStructSeq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<VarStructSeq> opVarStructSeqReq(const std::optional<VarStructSeq>& p1, std::optional<VarStructSeq>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opVarStructSeqReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<Serializable> opSerializable(const std::optional<Serializable>& p1, std::optional<Serializable>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSerializable(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<Serializable> opSerializableReq(const std::optional<Serializable>& p1, std::optional<Serializable>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opSerializableReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<IntIntDict> opIntIntDict(const std::optional<IntIntDict>& p1, std::optional<IntIntDict>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntIntDict(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<IntIntDict> opIntIntDictReq(const std::optional<IntIntDict>& p1, std::optional<IntIntDict>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntIntDictReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<StringIntDict> opStringIntDict(const std::optional<StringIntDict>& p1, std::optional<StringIntDict>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opStringIntDict(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<StringIntDict> opStringIntDictReq(const std::optional<StringIntDict>& p1, std::optional<StringIntDict>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opStringIntDictReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<IntOneOptionalDict> opIntOneOptionalDict(const std::optional<IntOneOptionalDict>& p1, std::optional<IntOneOptionalDict>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntOneOptionalDict(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<IntOneOptionalDict> opIntOneOptionalDictReq(const std::optional<IntOneOptionalDict>& p1, std::optional<IntOneOptionalDict>& p3, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opIntOneOptionalDictReq(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opClassAndUnknownOptional(const APtr& p, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opClassAndUnknownOptional(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sendOptionalClass(bool req, const std::optional<OneOptionalPtr>& o, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sendOptionalClass(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void returnOptionalClass(bool req, std::optional<OneOptionalPtr>& o, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_returnOptionalClass(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual GPtr opG(const GPtr& g, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opG(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void opVoid(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opVoid(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<SmallStruct> opMStruct1(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opMStruct1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<SmallStruct> opMStruct2(const std::optional<SmallStruct>& p1, std::optional<SmallStruct>& p2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opMStruct2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<StringSeq> opMSeq1(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opMSeq1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<StringSeq> opMSeq2(const std::optional<StringSeq>& p1, std::optional<StringSeq>& p2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opMSeq2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<StringIntDict> opMDict1(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opMDict1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<StringIntDict> opMDict2(const std::optional<StringIntDict>& p1, std::optional<StringIntDict>& p2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opMDict2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<GPtr> opMG1(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opMG1(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual std::optional<GPtr> opMG2(const std::optional<GPtr>& p1, std::optional<GPtr>& p2, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_opMG2(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool supportsRequiredParams(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_supportsRequiredParams(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool supportsJavaSerializable(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_supportsJavaSerializable(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool supportsCsharpSerializable(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_supportsCsharpSerializable(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool supportsCppStringView(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_supportsCppStringView(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual bool supportsNullOptional(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_supportsNullOptional(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond
};

}

namespace Test
{

class OneOptional : public ::Ice::ValueHelper<OneOptional, ::Ice::Value>
{
public:

    virtual ~OneOptional();

    OneOptional() = default;

    OneOptional(const OneOptional&) = default;
    OneOptional(OneOptional&&) = default;
    OneOptional& operator=(const OneOptional&) = default;
    OneOptional& operator=(OneOptional&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit OneOptional(const std::optional< ::Ice::Int>& a) :
        a(a)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional< ::Ice::Int>&> ice_tuple() const
    {
        return std::tie(a);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional< ::Ice::Int> a;
};

/// \cond INTERNAL
static OneOptional _iceS_OneOptional_init;
/// \endcond

class MultiOptional : public ::Ice::ValueHelper<MultiOptional, ::Ice::Value>
{
public:

    virtual ~MultiOptional();

    MultiOptional() = default;

    MultiOptional(const MultiOptional&) = default;
    MultiOptional(MultiOptional&&) = default;
    MultiOptional& operator=(const MultiOptional&) = default;
    MultiOptional& operator=(MultiOptional&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    MultiOptional(const std::optional< ::Ice::Byte>& a, const std::optional<bool>& b, const std::optional< ::Ice::Short>& c, const std::optional< ::Ice::Int>& d, const std::optional< ::Ice::Long>& e, const std::optional< ::Ice::Float>& f, const std::optional< ::Ice::Double>& g, const std::optional< ::std::string>& h, const std::optional< ::Test::MyEnum>& i, const std::optional< ::Test::MyInterfacePrx>& j, const std::optional< ::Test::MultiOptionalPtr>& k, const std::optional< ::Test::ByteSeq>& bs, const std::optional< ::Test::StringSeq>& ss, const std::optional< ::Test::IntIntDict>& iid, const std::optional< ::Test::StringIntDict>& sid, const std::optional< ::Test::FixedStruct>& fs, const std::optional< ::Test::VarStruct>& vs, const std::optional< ::Test::ShortSeq>& shs, const std::optional< ::Test::MyEnumSeq>& es, const std::optional< ::Test::FixedStructSeq>& fss, const std::optional< ::Test::VarStructSeq>& vss, const std::optional< ::Test::OneOptionalSeq>& oos, const std::optional< ::Test::MyInterfacePrxSeq>& mips, const std::optional< ::Test::IntEnumDict>& ied, const std::optional< ::Test::IntFixedStructDict>& ifsd, const std::optional< ::Test::IntVarStructDict>& ivsd, const std::optional< ::Test::IntOneOptionalDict>& iood, const std::optional< ::Test::IntMyInterfacePrxDict>& imipd, const std::optional< ::Test::BoolSeq>& bos, const std::optional< ::Test::Serializable>& ser) :
        a(a),
        b(b),
        c(c),
        d(d),
        e(e),
        f(f),
        g(g),
        h(h),
        i(i),
        j(j),
        k(k),
        bs(bs),
        ss(ss),
        iid(iid),
        sid(sid),
        fs(fs),
        vs(vs),
        shs(shs),
        es(es),
        fss(fss),
        vss(vss),
        oos(oos),
        mips(mips),
        ied(ied),
        ifsd(ifsd),
        ivsd(ivsd),
        iood(iood),
        imipd(imipd),
        bos(bos),
        ser(ser)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional< ::Ice::Byte>&, const std::optional<bool>&, const std::optional< ::Ice::Short>&, const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Long>&, const std::optional< ::Ice::Float>&, const std::optional< ::Ice::Double>&, const std::optional< ::std::string>&, const std::optional< ::Test::MyEnum>&, const std::optional< ::Test::MyInterfacePrx>&, const std::optional< ::Test::MultiOptionalPtr>&, const std::optional< ::Test::ByteSeq>&, const std::optional< ::Test::StringSeq>&, const std::optional< ::Test::IntIntDict>&, const std::optional< ::Test::StringIntDict>&, const std::optional< ::Test::FixedStruct>&, const std::optional< ::Test::VarStruct>&, const std::optional< ::Test::ShortSeq>&, const std::optional< ::Test::MyEnumSeq>&, const std::optional< ::Test::FixedStructSeq>&, const std::optional< ::Test::VarStructSeq>&, const std::optional< ::Test::OneOptionalSeq>&, const std::optional< ::Test::MyInterfacePrxSeq>&, const std::optional< ::Test::IntEnumDict>&, const std::optional< ::Test::IntFixedStructDict>&, const std::optional< ::Test::IntVarStructDict>&, const std::optional< ::Test::IntOneOptionalDict>&, const std::optional< ::Test::IntMyInterfacePrxDict>&, const std::optional< ::Test::BoolSeq>&, const std::optional< ::Test::Serializable>&> ice_tuple() const
    {
        return std::tie(a, b, c, d, e, f, g, h, i, j, k, bs, ss, iid, sid, fs, vs, shs, es, fss, vss, oos, mips, ied, ifsd, ivsd, iood, imipd, bos, ser);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional< ::Ice::Byte> a;
    std::optional<bool> b;
    std::optional< ::Ice::Short> c;
    std::optional< ::Ice::Int> d;
    std::optional< ::Ice::Long> e;
    std::optional< ::Ice::Float> f;
    std::optional< ::Ice::Double> g;
    std::optional< ::std::string> h;
    std::optional< ::Test::MyEnum> i;
    std::optional< ::Test::MyInterfacePrx> j;
    std::optional< ::Test::MultiOptionalPtr> k;
    std::optional< ::Test::ByteSeq> bs;
    std::optional< ::Test::StringSeq> ss;
    std::optional< ::Test::IntIntDict> iid;
    std::optional< ::Test::StringIntDict> sid;
    std::optional< ::Test::FixedStruct> fs;
    std::optional< ::Test::VarStruct> vs;
    std::optional< ::Test::ShortSeq> shs;
    std::optional< ::Test::MyEnumSeq> es;
    std::optional< ::Test::FixedStructSeq> fss;
    std::optional< ::Test::VarStructSeq> vss;
    std::optional< ::Test::OneOptionalSeq> oos;
    std::optional< ::Test::MyInterfacePrxSeq> mips;
    std::optional< ::Test::IntEnumDict> ied;
    std::optional< ::Test::IntFixedStructDict> ifsd;
    std::optional< ::Test::IntVarStructDict> ivsd;
    std::optional< ::Test::IntOneOptionalDict> iood;
    std::optional< ::Test::IntMyInterfacePrxDict> imipd;
    std::optional< ::Test::BoolSeq> bos;
    std::optional< ::Test::Serializable> ser;
};

class A : public ::Ice::ValueHelper<A, ::Ice::Value>
{
public:

    virtual ~A();

    A() = default;

    A(const A&) = default;
    A(A&&) = default;
    A& operator=(const A&) = default;
    A& operator=(A&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    A(::Ice::Int requiredA, const std::optional< ::Ice::Int>& ma, const std::optional< ::Ice::Int>& mb, const std::optional< ::Ice::Int>& mc) :
        requiredA(requiredA),
        ma(ma),
        mb(mb),
        mc(mc)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Int&, const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&> ice_tuple() const
    {
        return std::tie(requiredA, ma, mb, mc);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Ice::Int requiredA;
    std::optional< ::Ice::Int> ma;
    std::optional< ::Ice::Int> mb;
    std::optional< ::Ice::Int> mc;
};

class B : public ::Ice::ValueHelper<B, A>
{
public:

    virtual ~B();

    B() = default;

    B(const B&) = default;
    B(B&&) = default;
    B& operator=(const B&) = default;
    B& operator=(B&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    B(::Ice::Int requiredA, const std::optional< ::Ice::Int>& ma, const std::optional< ::Ice::Int>& mb, const std::optional< ::Ice::Int>& mc, ::Ice::Int requiredB, const std::optional< ::Ice::Int>& md) :
        Ice::ValueHelper<B, A>(requiredA, ma, mb, mc),
        requiredB(requiredB),
        md(md)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Int&, const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&, const ::Ice::Int&, const std::optional< ::Ice::Int>&> ice_tuple() const
    {
        return std::tie(requiredA, ma, mb, mc, requiredB, md);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Obtains the SlicedData object created when an unknown value type was marshaled
     * in the sliced format and the Ice run time sliced it to a known type.
     * @return The SlicedData object, or nil if the value was not sliced or was not
     * marshaled in the sliced format.
     */
    virtual ::Ice::SlicedDataPtr ice_getSlicedData() const override;

    /// \cond STREAM
    virtual void _iceWrite(::Ice::OutputStream*) const override;
    virtual void _iceRead(::Ice::InputStream*) override;
    /// \endcond

    ::Ice::Int requiredB;
    std::optional< ::Ice::Int> md;

protected:

    /// \cond STREAM
    ::Ice::SlicedDataPtr _iceSlicedData;
    /// \endcond
};

class C : public ::Ice::ValueHelper<C, B>
{
public:

    virtual ~C();

    C() = default;

    C(const C&) = default;
    C(C&&) = default;
    C& operator=(const C&) = default;
    C& operator=(C&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    C(::Ice::Int requiredA, const std::optional< ::Ice::Int>& ma, const std::optional< ::Ice::Int>& mb, const std::optional< ::Ice::Int>& mc, ::Ice::Int requiredB, const std::optional< ::Ice::Int>& md, const ::std::string& ss, const std::optional< ::std::string>& ms) :
        Ice::ValueHelper<C, B>(requiredA, ma, mb, mc, requiredB, md),
        ss(ss),
        ms(ms)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Int&, const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&, const ::Ice::Int&, const std::optional< ::Ice::Int>&, const ::std::string&, const std::optional< ::std::string>&> ice_tuple() const
    {
        return std::tie(requiredA, ma, mb, mc, requiredB, md, ss, ms);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string ss;
    std::optional< ::std::string> ms;
};

class WD : public ::Ice::ValueHelper<WD, ::Ice::Value>
{
public:

    virtual ~WD();

    WD() = default;

    WD(const WD&) = default;
    WD(WD&&) = default;
    WD& operator=(const WD&) = default;
    WD& operator=(WD&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    WD(const std::optional< ::Ice::Int>& a, const std::optional< ::std::string>& s) :
        a(a),
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional< ::Ice::Int>&, const std::optional< ::std::string>&> ice_tuple() const
    {
        return std::tie(a, s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional< ::Ice::Int> a = 5;
    std::optional< ::std::string> s{"test"};
};

class OptionalWithCustom : public ::Ice::ValueHelper<OptionalWithCustom, ::Ice::Value>
{
public:

    virtual ~OptionalWithCustom();

    OptionalWithCustom() = default;

    OptionalWithCustom(const OptionalWithCustom&) = default;
    OptionalWithCustom(OptionalWithCustom&&) = default;
    OptionalWithCustom& operator=(const OptionalWithCustom&) = default;
    OptionalWithCustom& operator=(OptionalWithCustom&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    OptionalWithCustom(const std::optional< ::Test::SmallStructList>& l, const std::optional< ::Test::SmallStructList>& lp, const std::optional< ::Test::ClassVarStruct>& s) :
        l(l),
        lp(lp),
        s(s)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional< ::Test::SmallStructList>&, const std::optional< ::Test::SmallStructList>&, const std::optional< ::Test::ClassVarStruct>&> ice_tuple() const
    {
        return std::tie(l, lp, s);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional< ::Test::SmallStructList> l;

protected:

    std::optional< ::Test::SmallStructList> lp;

public:

    std::optional< ::Test::ClassVarStruct> s;

protected:

    template<typename T, typename S>
    friend struct Ice::StreamWriter;
    template<typename T, typename S>
    friend struct Ice::StreamReader;
};

class E : public ::Ice::ValueHelper<E, ::Ice::Value>
{
public:

    virtual ~E();

    E() = default;

    E(const E&) = default;
    E(E&&) = default;
    E& operator=(const E&) = default;
    E& operator=(E&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit E(const ::Test::APtr& ae) :
        ae(ae)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::APtr&> ice_tuple() const
    {
        return std::tie(ae);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Test::APtr ae;
};

class F : public ::Ice::ValueHelper<F, E>
{
public:

    virtual ~F();

    F() = default;

    F(const F&) = default;
    F(F&&) = default;
    F& operator=(const F&) = default;
    F& operator=(F&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    F(const ::Test::APtr& ae, const std::optional< ::Test::APtr>& af) :
        Ice::ValueHelper<F, E>(ae),
        af(af)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Test::APtr&, const std::optional< ::Test::APtr>&> ice_tuple() const
    {
        return std::tie(ae, af);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional< ::Test::APtr> af;
};

class G1 : public ::Ice::ValueHelper<G1, ::Ice::Value>
{
public:

    virtual ~G1();

    G1() = default;

    G1(const G1&) = default;
    G1(G1&&) = default;
    G1& operator=(const G1&) = default;
    G1& operator=(G1&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit G1(const ::std::string& a) :
        a(a)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(a);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string a;
};

class G2 : public ::Ice::ValueHelper<G2, ::Ice::Value>
{
public:

    virtual ~G2();

    G2() = default;

    G2(const G2&) = default;
    G2(G2&&) = default;
    G2& operator=(const G2&) = default;
    G2& operator=(G2&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit G2(::Ice::Long a) :
        a(a)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Long&> ice_tuple() const
    {
        return std::tie(a);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::Ice::Long a;
};

class G : public ::Ice::ValueHelper<G, ::Ice::Value>
{
public:

    virtual ~G();

    G() = default;

    G(const G&) = default;
    G(G&&) = default;
    G& operator=(const G&) = default;
    G& operator=(G&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    G(const std::optional< ::Test::G1Ptr>& gg1Opt, const ::Test::G2Ptr& gg2, const std::optional< ::Test::G2Ptr>& gg2Opt, const ::Test::G1Ptr& gg1) :
        gg1Opt(gg1Opt),
        gg2(gg2),
        gg2Opt(gg2Opt),
        gg1(gg1)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional< ::Test::G1Ptr>&, const ::Test::G2Ptr&, const std::optional< ::Test::G2Ptr>&, const ::Test::G1Ptr&> ice_tuple() const
    {
        return std::tie(gg1Opt, gg2, gg2Opt, gg1);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional< ::Test::G1Ptr> gg1Opt;
    ::Test::G2Ptr gg2;
    std::optional< ::Test::G2Ptr> gg2Opt;
    ::Test::G1Ptr gg1;
};

class Recursive : public ::Ice::ValueHelper<Recursive, ::Ice::Value>
{
public:

    virtual ~Recursive();

    Recursive() = default;

    Recursive(const Recursive&) = default;
    Recursive(Recursive&&) = default;
    Recursive& operator=(const Recursive&) = default;
    Recursive& operator=(Recursive&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit Recursive(const std::optional< ::Test::RecursiveSeq>& value) :
        value(value)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const std::optional< ::Test::RecursiveSeq>&> ice_tuple() const
    {
        return std::tie(value);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    std::optional< ::Test::RecursiveSeq> value;
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::Test::OneOptional, S>
{
    static void write(S* ostr, const ::Test::OneOptional& v)
    {
        ostr->write(1, v.a);
    }
};

template<typename S>
struct StreamReader< ::Test::OneOptional, S>
{
    static void read(S* istr, ::Test::OneOptional& v)
    {
        istr->read(1, v.a);
    }
};

template<>
struct StreamableTraits< ::Test::MyEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 0;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Test::SmallStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::Test::SmallStruct, S>
{
    static void write(S* ostr, const ::Test::SmallStruct& v)
    {
        ostr->write(v.m);
    }
};

template<typename S>
struct StreamReader< ::Test::SmallStruct, S>
{
    static void read(S* istr, ::Test::SmallStruct& v)
    {
        istr->read(v.m);
    }
};

template<>
struct StreamableTraits< ::Test::FixedStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::Test::FixedStruct, S>
{
    static void write(S* ostr, const ::Test::FixedStruct& v)
    {
        ostr->write(v.m);
    }
};

template<typename S>
struct StreamReader< ::Test::FixedStruct, S>
{
    static void read(S* istr, ::Test::FixedStruct& v)
    {
        istr->read(v.m);
    }
};

template<>
struct StreamableTraits< ::Test::VarStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Test::VarStruct, S>
{
    static void write(S* ostr, const ::Test::VarStruct& v)
    {
        ostr->write(v.m);
    }
};

template<typename S>
struct StreamReader< ::Test::VarStruct, S>
{
    static void read(S* istr, ::Test::VarStruct& v)
    {
        istr->read(v.m);
    }
};

template<>
struct StreamableTraits< ::Test::ClassVarStruct>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::Test::ClassVarStruct, S>
{
    static void write(S* ostr, const ::Test::ClassVarStruct& v)
    {
        ostr->write(v.a);
    }
};

template<typename S>
struct StreamReader< ::Test::ClassVarStruct, S>
{
    static void read(S* istr, ::Test::ClassVarStruct& v)
    {
        istr->read(v.a);
    }
};

template<typename S>
struct StreamWriter< ::Test::MultiOptional, S>
{
    static void write(S* ostr, const ::Test::MultiOptional& v)
    {
        ostr->write(1, v.a);
        ostr->write(2, v.b);
        ostr->write(3, v.c);
        ostr->write(4, v.d);
        ostr->write(5, v.e);
        ostr->write(6, v.f);
        ostr->write(7, v.g);
        ostr->write(8, v.h);
        ostr->write(9, v.i);
        ostr->write(10, v.j);
        ostr->write(11, v.k);
        ostr->write(12, v.bs);
        ostr->write(13, v.ss);
        ostr->write(14, v.iid);
        ostr->write(15, v.sid);
        ostr->write(16, v.fs);
        ostr->write(17, v.vs);
        ostr->write(18, v.shs);
        ostr->write(19, v.es);
        ostr->write(20, v.fss);
        ostr->write(21, v.vss);
        ostr->write(22, v.oos);
        ostr->write(23, v.mips);
        ostr->write(24, v.ied);
        ostr->write(25, v.ifsd);
        ostr->write(26, v.ivsd);
        ostr->write(27, v.iood);
        ostr->write(28, v.imipd);
        ostr->write(29, v.bos);
        ostr->write(30, v.ser);
    }
};

template<typename S>
struct StreamReader< ::Test::MultiOptional, S>
{
    static void read(S* istr, ::Test::MultiOptional& v)
    {
        istr->read(1, v.a);
        istr->read(2, v.b);
        istr->read(3, v.c);
        istr->read(4, v.d);
        istr->read(5, v.e);
        istr->read(6, v.f);
        istr->read(7, v.g);
        istr->read(8, v.h);
        istr->read(9, v.i);
        istr->read(10, v.j);
        istr->read(11, v.k);
        istr->read(12, v.bs);
        istr->read(13, v.ss);
        istr->read(14, v.iid);
        istr->read(15, v.sid);
        istr->read(16, v.fs);
        istr->read(17, v.vs);
        istr->read(18, v.shs);
        istr->read(19, v.es);
        istr->read(20, v.fss);
        istr->read(21, v.vss);
        istr->read(22, v.oos);
        istr->read(23, v.mips);
        istr->read(24, v.ied);
        istr->read(25, v.ifsd);
        istr->read(26, v.ivsd);
        istr->read(27, v.iood);
        istr->read(28, v.imipd);
        istr->read(29, v.bos);
        istr->read(30, v.ser);
    }
};

template<typename S>
struct StreamWriter< ::Test::A, S>
{
    static void write(S* ostr, const ::Test::A& v)
    {
        ostr->write(v.requiredA);
        ostr->write(1, v.ma);
        ostr->write(50, v.mb);
        ostr->write(500, v.mc);
    }
};

template<typename S>
struct StreamReader< ::Test::A, S>
{
    static void read(S* istr, ::Test::A& v)
    {
        istr->read(v.requiredA);
        istr->read(1, v.ma);
        istr->read(50, v.mb);
        istr->read(500, v.mc);
    }
};

template<typename S>
struct StreamWriter< ::Test::B, S>
{
    static void write(S* ostr, const ::Test::B& v)
    {
        ostr->write(v.requiredB);
        ostr->write(10, v.md);
    }
};

template<typename S>
struct StreamReader< ::Test::B, S>
{
    static void read(S* istr, ::Test::B& v)
    {
        istr->read(v.requiredB);
        istr->read(10, v.md);
    }
};

template<typename S>
struct StreamWriter< ::Test::C, S>
{
    static void write(S* ostr, const ::Test::C& v)
    {
        ostr->write(v.ss);
        ostr->write(890, v.ms);
    }
};

template<typename S>
struct StreamReader< ::Test::C, S>
{
    static void read(S* istr, ::Test::C& v)
    {
        istr->read(v.ss);
        istr->read(890, v.ms);
    }
};

template<typename S>
struct StreamWriter< ::Test::WD, S>
{
    static void write(S* ostr, const ::Test::WD& v)
    {
        ostr->write(1, v.a);
        ostr->write(2, v.s);
    }
};

template<typename S>
struct StreamReader< ::Test::WD, S>
{
    static void read(S* istr, ::Test::WD& v)
    {
        istr->read(1, v.a);
        istr->read(2, v.s);
    }
};

template<>
struct StreamableTraits< ::Test::OptionalException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::OptionalException, S>
{
    static void write(S* ostr, const ::Test::OptionalException& v)
    {
        ostr->write(v.req);
        ostr->write(1, v.a);
        ostr->write(2, v.b);
        ostr->write(50, v.o);
    }
};

template<typename S>
struct StreamReader< ::Test::OptionalException, S>
{
    static void read(S* istr, ::Test::OptionalException& v)
    {
        istr->read(v.req);
        istr->read(1, v.a);
        istr->read(2, v.b);
        istr->read(50, v.o);
    }
};

template<>
struct StreamableTraits< ::Test::DerivedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::DerivedException, S>
{
    static void write(S* ostr, const ::Test::DerivedException& v)
    {
        ostr->write(v.d1);
        ostr->write(v.d2);
        ostr->write(600, v.ss);
        ostr->write(601, v.o2);
    }
};

template<typename S>
struct StreamReader< ::Test::DerivedException, S>
{
    static void read(S* istr, ::Test::DerivedException& v)
    {
        istr->read(v.d1);
        istr->read(v.d2);
        istr->read(600, v.ss);
        istr->read(601, v.o2);
    }
};

template<>
struct StreamableTraits< ::Test::RequiredException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Test::RequiredException, S>
{
    static void write(S* ostr, const ::Test::RequiredException& v)
    {
        ostr->write(v.ss);
        ostr->write(v.o2);
    }
};

template<typename S>
struct StreamReader< ::Test::RequiredException, S>
{
    static void read(S* istr, ::Test::RequiredException& v)
    {
        istr->read(v.ss);
        istr->read(v.o2);
    }
};

template<typename S>
struct StreamWriter< ::Test::OptionalWithCustom, S>
{
    static void write(S* ostr, const ::Test::OptionalWithCustom& v)
    {
        ostr->write(1, v.l);
        ostr->write(2, v.lp);
        ostr->write(3, v.s);
    }
};

template<typename S>
struct StreamReader< ::Test::OptionalWithCustom, S>
{
    static void read(S* istr, ::Test::OptionalWithCustom& v)
    {
        istr->read(1, v.l);
        istr->read(2, v.lp);
        istr->read(3, v.s);
    }
};

template<typename S>
struct StreamWriter< ::Test::E, S>
{
    static void write(S* ostr, const ::Test::E& v)
    {
        ostr->write(v.ae);
    }
};

template<typename S>
struct StreamReader< ::Test::E, S>
{
    static void read(S* istr, ::Test::E& v)
    {
        istr->read(v.ae);
    }
};

template<typename S>
struct StreamWriter< ::Test::F, S>
{
    static void write(S* ostr, const ::Test::F& v)
    {
        ostr->write(1, v.af);
    }
};

template<typename S>
struct StreamReader< ::Test::F, S>
{
    static void read(S* istr, ::Test::F& v)
    {
        istr->read(1, v.af);
    }
};

template<typename S>
struct StreamWriter< ::Test::G1, S>
{
    static void write(S* ostr, const ::Test::G1& v)
    {
        ostr->write(v.a);
    }
};

template<typename S>
struct StreamReader< ::Test::G1, S>
{
    static void read(S* istr, ::Test::G1& v)
    {
        istr->read(v.a);
    }
};

template<typename S>
struct StreamWriter< ::Test::G2, S>
{
    static void write(S* ostr, const ::Test::G2& v)
    {
        ostr->write(v.a);
    }
};

template<typename S>
struct StreamReader< ::Test::G2, S>
{
    static void read(S* istr, ::Test::G2& v)
    {
        istr->read(v.a);
    }
};

template<typename S>
struct StreamWriter< ::Test::G, S>
{
    static void write(S* ostr, const ::Test::G& v)
    {
        ostr->write(v.gg2);
        ostr->write(v.gg1);
        ostr->write(0, v.gg2Opt);
        ostr->write(1, v.gg1Opt);
    }
};

template<typename S>
struct StreamReader< ::Test::G, S>
{
    static void read(S* istr, ::Test::G& v)
    {
        istr->read(v.gg2);
        istr->read(v.gg1);
        istr->read(0, v.gg2Opt);
        istr->read(1, v.gg1Opt);
    }
};

template<typename S>
struct StreamWriter< ::Test::Recursive, S>
{
    static void write(S* ostr, const ::Test::Recursive& v)
    {
        ostr->write(0, v.value);
    }
};

template<typename S>
struct StreamReader< ::Test::Recursive, S>
{
    static void read(S* istr, ::Test::Recursive& v)
    {
        istr->read(0, v.value);
    }
};

}
/// \endcond

namespace Test
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::MyInterface::begin_op.
 * Create a wrapper instance by calling ::Test::newCallback_MyInterface_op.
 */
template<class T>
class CallbackNC_MyInterface_op : public Callback_MyInterface_op_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MyInterface_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T> Callback_MyInterface_opPtr
newCallback_MyInterface_op(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyInterface_op<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T> Callback_MyInterface_opPtr
newCallback_MyInterface_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyInterface_op<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T> Callback_MyInterface_opPtr
newCallback_MyInterface_op(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyInterface_op<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T> Callback_MyInterface_opPtr
newCallback_MyInterface_op(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MyInterface_op<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::MyInterface::begin_op.
 * Create a wrapper instance by calling ::Test::newCallback_MyInterface_op.
 */
template<class T, typename CT>
class Callback_MyInterface_op : public Callback_MyInterface_op_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MyInterface_op(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T, typename CT> Callback_MyInterface_opPtr
newCallback_MyInterface_op(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyInterface_op<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T, typename CT> Callback_MyInterface_opPtr
newCallback_MyInterface_op(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyInterface_op<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T, typename CT> Callback_MyInterface_opPtr
newCallback_MyInterface_op(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyInterface_op<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::MyInterface::begin_op.
 */
template<class T, typename CT> Callback_MyInterface_opPtr
newCallback_MyInterface_op(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MyInterface_op<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_shutdown.
 */
template<class T>
class CallbackNC_Initial_shutdown : public Callback_Initial_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_shutdown<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_shutdown.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_shutdown.
 */
template<class T, typename CT>
class Callback_Initial_shutdown : public Callback_Initial_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_shutdown.
 */
template<class T, typename CT> Callback_Initial_shutdownPtr
newCallback_Initial_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_shutdown<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_pingPong.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_pingPong.
 */
template<class T>
class CallbackNC_Initial_pingPong : public Callback_Initial_pingPong_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::ValuePtr&);

    CallbackNC_Initial_pingPong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ::Ice::ValuePtr ret;
        try
        {
            ret = proxy->end_pingPong(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_pingPong.
 */
template<class T> Callback_Initial_pingPongPtr
newCallback_Initial_pingPong(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ValuePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_pingPong<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_pingPong.
 */
template<class T> Callback_Initial_pingPongPtr
newCallback_Initial_pingPong(T* instance, void (T::*cb)(const ::Ice::ValuePtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_pingPong<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_pingPong.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_pingPong.
 */
template<class T, typename CT>
class Callback_Initial_pingPong : public Callback_Initial_pingPong_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::ValuePtr&, const CT&);

    Callback_Initial_pingPong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        ::Ice::ValuePtr ret;
        try
        {
            ret = proxy->end_pingPong(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_pingPong.
 */
template<class T, typename CT> Callback_Initial_pingPongPtr
newCallback_Initial_pingPong(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ValuePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_pingPong<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_pingPong.
 */
template<class T, typename CT> Callback_Initial_pingPongPtr
newCallback_Initial_pingPong(T* instance, void (T::*cb)(const ::Ice::ValuePtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_pingPong<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opOptionalException.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opOptionalException.
 */
template<class T>
class CallbackNC_Initial_opOptionalException : public Callback_Initial_opOptionalException_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_opOptionalException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_opOptionalException(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOptionalException.
 */
template<class T> Callback_Initial_opOptionalExceptionPtr
newCallback_Initial_opOptionalException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opOptionalException<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOptionalException.
 */
template<class T> Callback_Initial_opOptionalExceptionPtr
newCallback_Initial_opOptionalException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opOptionalException<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOptionalException.
 */
template<class T> Callback_Initial_opOptionalExceptionPtr
newCallback_Initial_opOptionalException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opOptionalException<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOptionalException.
 */
template<class T> Callback_Initial_opOptionalExceptionPtr
newCallback_Initial_opOptionalException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opOptionalException<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opOptionalException.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opOptionalException.
 */
template<class T, typename CT>
class Callback_Initial_opOptionalException : public Callback_Initial_opOptionalException_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_opOptionalException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_opOptionalException(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOptionalException.
 */
template<class T, typename CT> Callback_Initial_opOptionalExceptionPtr
newCallback_Initial_opOptionalException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opOptionalException<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOptionalException.
 */
template<class T, typename CT> Callback_Initial_opOptionalExceptionPtr
newCallback_Initial_opOptionalException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opOptionalException<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOptionalException.
 */
template<class T, typename CT> Callback_Initial_opOptionalExceptionPtr
newCallback_Initial_opOptionalException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opOptionalException<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOptionalException.
 */
template<class T, typename CT> Callback_Initial_opOptionalExceptionPtr
newCallback_Initial_opOptionalException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opOptionalException<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opDerivedException.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opDerivedException.
 */
template<class T>
class CallbackNC_Initial_opDerivedException : public Callback_Initial_opDerivedException_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_opDerivedException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_opDerivedException(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDerivedException.
 */
template<class T> Callback_Initial_opDerivedExceptionPtr
newCallback_Initial_opDerivedException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opDerivedException<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDerivedException.
 */
template<class T> Callback_Initial_opDerivedExceptionPtr
newCallback_Initial_opDerivedException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opDerivedException<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDerivedException.
 */
template<class T> Callback_Initial_opDerivedExceptionPtr
newCallback_Initial_opDerivedException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opDerivedException<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDerivedException.
 */
template<class T> Callback_Initial_opDerivedExceptionPtr
newCallback_Initial_opDerivedException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opDerivedException<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opDerivedException.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opDerivedException.
 */
template<class T, typename CT>
class Callback_Initial_opDerivedException : public Callback_Initial_opDerivedException_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_opDerivedException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_opDerivedException(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDerivedException.
 */
template<class T, typename CT> Callback_Initial_opDerivedExceptionPtr
newCallback_Initial_opDerivedException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opDerivedException<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDerivedException.
 */
template<class T, typename CT> Callback_Initial_opDerivedExceptionPtr
newCallback_Initial_opDerivedException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opDerivedException<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDerivedException.
 */
template<class T, typename CT> Callback_Initial_opDerivedExceptionPtr
newCallback_Initial_opDerivedException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opDerivedException<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDerivedException.
 */
template<class T, typename CT> Callback_Initial_opDerivedExceptionPtr
newCallback_Initial_opDerivedException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opDerivedException<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opRequiredException.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opRequiredException.
 */
template<class T>
class CallbackNC_Initial_opRequiredException : public Callback_Initial_opRequiredException_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_opRequiredException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_opRequiredException(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opRequiredException.
 */
template<class T> Callback_Initial_opRequiredExceptionPtr
newCallback_Initial_opRequiredException(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opRequiredException<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opRequiredException.
 */
template<class T> Callback_Initial_opRequiredExceptionPtr
newCallback_Initial_opRequiredException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opRequiredException<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opRequiredException.
 */
template<class T> Callback_Initial_opRequiredExceptionPtr
newCallback_Initial_opRequiredException(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opRequiredException<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opRequiredException.
 */
template<class T> Callback_Initial_opRequiredExceptionPtr
newCallback_Initial_opRequiredException(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opRequiredException<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opRequiredException.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opRequiredException.
 */
template<class T, typename CT>
class Callback_Initial_opRequiredException : public Callback_Initial_opRequiredException_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_opRequiredException(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_opRequiredException(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opRequiredException.
 */
template<class T, typename CT> Callback_Initial_opRequiredExceptionPtr
newCallback_Initial_opRequiredException(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opRequiredException<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opRequiredException.
 */
template<class T, typename CT> Callback_Initial_opRequiredExceptionPtr
newCallback_Initial_opRequiredException(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opRequiredException<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opRequiredException.
 */
template<class T, typename CT> Callback_Initial_opRequiredExceptionPtr
newCallback_Initial_opRequiredException(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opRequiredException<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opRequiredException.
 */
template<class T, typename CT> Callback_Initial_opRequiredExceptionPtr
newCallback_Initial_opRequiredException(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opRequiredException<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opByte.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opByte.
 */
template<class T>
class CallbackNC_Initial_opByte : public Callback_Initial_opByte_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional< ::Ice::Byte>&, const std::optional< ::Ice::Byte>&);

    CallbackNC_Initial_opByte(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Byte> iceP_p3;
        std::optional< ::Ice::Byte> ret;
        try
        {
            ret = proxy->end_opByte(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByte.
 */
template<class T> Callback_Initial_opBytePtr
newCallback_Initial_opByte(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Byte>&, const std::optional< ::Ice::Byte>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opByte<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByte.
 */
template<class T> Callback_Initial_opBytePtr
newCallback_Initial_opByte(T* instance, void (T::*cb)(const std::optional< ::Ice::Byte>&, const std::optional< ::Ice::Byte>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opByte<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opByte.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opByte.
 */
template<class T, typename CT>
class Callback_Initial_opByte : public Callback_Initial_opByte_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional< ::Ice::Byte>&, const std::optional< ::Ice::Byte>&, const CT&);

    Callback_Initial_opByte(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Byte> iceP_p3;
        std::optional< ::Ice::Byte> ret;
        try
        {
            ret = proxy->end_opByte(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByte.
 */
template<class T, typename CT> Callback_Initial_opBytePtr
newCallback_Initial_opByte(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Byte>&, const std::optional< ::Ice::Byte>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opByte<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByte.
 */
template<class T, typename CT> Callback_Initial_opBytePtr
newCallback_Initial_opByte(T* instance, void (T::*cb)(const std::optional< ::Ice::Byte>&, const std::optional< ::Ice::Byte>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opByte<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opByteReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opByteReq.
 */
template<class T>
class CallbackNC_Initial_opByteReq : public Callback_Initial_opByteReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional< ::Ice::Byte>&, const std::optional< ::Ice::Byte>&);

    CallbackNC_Initial_opByteReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Byte> iceP_p3;
        std::optional< ::Ice::Byte> ret;
        try
        {
            ret = proxy->end_opByteReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByteReq.
 */
template<class T> Callback_Initial_opByteReqPtr
newCallback_Initial_opByteReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Byte>&, const std::optional< ::Ice::Byte>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opByteReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByteReq.
 */
template<class T> Callback_Initial_opByteReqPtr
newCallback_Initial_opByteReq(T* instance, void (T::*cb)(const std::optional< ::Ice::Byte>&, const std::optional< ::Ice::Byte>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opByteReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opByteReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opByteReq.
 */
template<class T, typename CT>
class Callback_Initial_opByteReq : public Callback_Initial_opByteReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional< ::Ice::Byte>&, const std::optional< ::Ice::Byte>&, const CT&);

    Callback_Initial_opByteReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Byte> iceP_p3;
        std::optional< ::Ice::Byte> ret;
        try
        {
            ret = proxy->end_opByteReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByteReq.
 */
template<class T, typename CT> Callback_Initial_opByteReqPtr
newCallback_Initial_opByteReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Byte>&, const std::optional< ::Ice::Byte>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opByteReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByteReq.
 */
template<class T, typename CT> Callback_Initial_opByteReqPtr
newCallback_Initial_opByteReq(T* instance, void (T::*cb)(const std::optional< ::Ice::Byte>&, const std::optional< ::Ice::Byte>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opByteReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opBool.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opBool.
 */
template<class T>
class CallbackNC_Initial_opBool : public Callback_Initial_opBool_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<bool>&, const std::optional<bool>&);

    CallbackNC_Initial_opBool(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<bool> iceP_p3;
        std::optional<bool> ret;
        try
        {
            ret = proxy->end_opBool(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBool.
 */
template<class T> Callback_Initial_opBoolPtr
newCallback_Initial_opBool(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<bool>&, const std::optional<bool>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opBool<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBool.
 */
template<class T> Callback_Initial_opBoolPtr
newCallback_Initial_opBool(T* instance, void (T::*cb)(const std::optional<bool>&, const std::optional<bool>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opBool<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opBool.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opBool.
 */
template<class T, typename CT>
class Callback_Initial_opBool : public Callback_Initial_opBool_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<bool>&, const std::optional<bool>&, const CT&);

    Callback_Initial_opBool(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<bool> iceP_p3;
        std::optional<bool> ret;
        try
        {
            ret = proxy->end_opBool(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBool.
 */
template<class T, typename CT> Callback_Initial_opBoolPtr
newCallback_Initial_opBool(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<bool>&, const std::optional<bool>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opBool<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBool.
 */
template<class T, typename CT> Callback_Initial_opBoolPtr
newCallback_Initial_opBool(T* instance, void (T::*cb)(const std::optional<bool>&, const std::optional<bool>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opBool<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opBoolReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opBoolReq.
 */
template<class T>
class CallbackNC_Initial_opBoolReq : public Callback_Initial_opBoolReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<bool>&, const std::optional<bool>&);

    CallbackNC_Initial_opBoolReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<bool> iceP_p3;
        std::optional<bool> ret;
        try
        {
            ret = proxy->end_opBoolReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBoolReq.
 */
template<class T> Callback_Initial_opBoolReqPtr
newCallback_Initial_opBoolReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<bool>&, const std::optional<bool>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opBoolReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBoolReq.
 */
template<class T> Callback_Initial_opBoolReqPtr
newCallback_Initial_opBoolReq(T* instance, void (T::*cb)(const std::optional<bool>&, const std::optional<bool>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opBoolReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opBoolReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opBoolReq.
 */
template<class T, typename CT>
class Callback_Initial_opBoolReq : public Callback_Initial_opBoolReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<bool>&, const std::optional<bool>&, const CT&);

    Callback_Initial_opBoolReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<bool> iceP_p3;
        std::optional<bool> ret;
        try
        {
            ret = proxy->end_opBoolReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBoolReq.
 */
template<class T, typename CT> Callback_Initial_opBoolReqPtr
newCallback_Initial_opBoolReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<bool>&, const std::optional<bool>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opBoolReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBoolReq.
 */
template<class T, typename CT> Callback_Initial_opBoolReqPtr
newCallback_Initial_opBoolReq(T* instance, void (T::*cb)(const std::optional<bool>&, const std::optional<bool>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opBoolReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opShort.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opShort.
 */
template<class T>
class CallbackNC_Initial_opShort : public Callback_Initial_opShort_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional< ::Ice::Short>&, const std::optional< ::Ice::Short>&);

    CallbackNC_Initial_opShort(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Short> iceP_p3;
        std::optional< ::Ice::Short> ret;
        try
        {
            ret = proxy->end_opShort(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShort.
 */
template<class T> Callback_Initial_opShortPtr
newCallback_Initial_opShort(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Short>&, const std::optional< ::Ice::Short>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opShort<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShort.
 */
template<class T> Callback_Initial_opShortPtr
newCallback_Initial_opShort(T* instance, void (T::*cb)(const std::optional< ::Ice::Short>&, const std::optional< ::Ice::Short>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opShort<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opShort.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opShort.
 */
template<class T, typename CT>
class Callback_Initial_opShort : public Callback_Initial_opShort_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional< ::Ice::Short>&, const std::optional< ::Ice::Short>&, const CT&);

    Callback_Initial_opShort(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Short> iceP_p3;
        std::optional< ::Ice::Short> ret;
        try
        {
            ret = proxy->end_opShort(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShort.
 */
template<class T, typename CT> Callback_Initial_opShortPtr
newCallback_Initial_opShort(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Short>&, const std::optional< ::Ice::Short>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opShort<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShort.
 */
template<class T, typename CT> Callback_Initial_opShortPtr
newCallback_Initial_opShort(T* instance, void (T::*cb)(const std::optional< ::Ice::Short>&, const std::optional< ::Ice::Short>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opShort<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opShortReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opShortReq.
 */
template<class T>
class CallbackNC_Initial_opShortReq : public Callback_Initial_opShortReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional< ::Ice::Short>&, const std::optional< ::Ice::Short>&);

    CallbackNC_Initial_opShortReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Short> iceP_p3;
        std::optional< ::Ice::Short> ret;
        try
        {
            ret = proxy->end_opShortReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShortReq.
 */
template<class T> Callback_Initial_opShortReqPtr
newCallback_Initial_opShortReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Short>&, const std::optional< ::Ice::Short>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opShortReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShortReq.
 */
template<class T> Callback_Initial_opShortReqPtr
newCallback_Initial_opShortReq(T* instance, void (T::*cb)(const std::optional< ::Ice::Short>&, const std::optional< ::Ice::Short>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opShortReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opShortReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opShortReq.
 */
template<class T, typename CT>
class Callback_Initial_opShortReq : public Callback_Initial_opShortReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional< ::Ice::Short>&, const std::optional< ::Ice::Short>&, const CT&);

    Callback_Initial_opShortReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Short> iceP_p3;
        std::optional< ::Ice::Short> ret;
        try
        {
            ret = proxy->end_opShortReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShortReq.
 */
template<class T, typename CT> Callback_Initial_opShortReqPtr
newCallback_Initial_opShortReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Short>&, const std::optional< ::Ice::Short>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opShortReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShortReq.
 */
template<class T, typename CT> Callback_Initial_opShortReqPtr
newCallback_Initial_opShortReq(T* instance, void (T::*cb)(const std::optional< ::Ice::Short>&, const std::optional< ::Ice::Short>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opShortReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opInt.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opInt.
 */
template<class T>
class CallbackNC_Initial_opInt : public Callback_Initial_opInt_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&);

    CallbackNC_Initial_opInt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Int> iceP_p3;
        std::optional< ::Ice::Int> ret;
        try
        {
            ret = proxy->end_opInt(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opInt.
 */
template<class T> Callback_Initial_opIntPtr
newCallback_Initial_opInt(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opInt<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opInt.
 */
template<class T> Callback_Initial_opIntPtr
newCallback_Initial_opInt(T* instance, void (T::*cb)(const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opInt<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opInt.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opInt.
 */
template<class T, typename CT>
class Callback_Initial_opInt : public Callback_Initial_opInt_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&, const CT&);

    Callback_Initial_opInt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Int> iceP_p3;
        std::optional< ::Ice::Int> ret;
        try
        {
            ret = proxy->end_opInt(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opInt.
 */
template<class T, typename CT> Callback_Initial_opIntPtr
newCallback_Initial_opInt(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opInt<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opInt.
 */
template<class T, typename CT> Callback_Initial_opIntPtr
newCallback_Initial_opInt(T* instance, void (T::*cb)(const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opInt<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opIntReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntReq.
 */
template<class T>
class CallbackNC_Initial_opIntReq : public Callback_Initial_opIntReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&);

    CallbackNC_Initial_opIntReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Int> iceP_p3;
        std::optional< ::Ice::Int> ret;
        try
        {
            ret = proxy->end_opIntReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntReq.
 */
template<class T> Callback_Initial_opIntReqPtr
newCallback_Initial_opIntReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opIntReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntReq.
 */
template<class T> Callback_Initial_opIntReqPtr
newCallback_Initial_opIntReq(T* instance, void (T::*cb)(const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opIntReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opIntReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntReq.
 */
template<class T, typename CT>
class Callback_Initial_opIntReq : public Callback_Initial_opIntReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&, const CT&);

    Callback_Initial_opIntReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Int> iceP_p3;
        std::optional< ::Ice::Int> ret;
        try
        {
            ret = proxy->end_opIntReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntReq.
 */
template<class T, typename CT> Callback_Initial_opIntReqPtr
newCallback_Initial_opIntReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opIntReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntReq.
 */
template<class T, typename CT> Callback_Initial_opIntReqPtr
newCallback_Initial_opIntReq(T* instance, void (T::*cb)(const std::optional< ::Ice::Int>&, const std::optional< ::Ice::Int>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opIntReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opLong.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opLong.
 */
template<class T>
class CallbackNC_Initial_opLong : public Callback_Initial_opLong_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional< ::Ice::Long>&, const std::optional< ::Ice::Long>&);

    CallbackNC_Initial_opLong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Long> iceP_p3;
        std::optional< ::Ice::Long> ret;
        try
        {
            ret = proxy->end_opLong(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLong.
 */
template<class T> Callback_Initial_opLongPtr
newCallback_Initial_opLong(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Long>&, const std::optional< ::Ice::Long>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opLong<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLong.
 */
template<class T> Callback_Initial_opLongPtr
newCallback_Initial_opLong(T* instance, void (T::*cb)(const std::optional< ::Ice::Long>&, const std::optional< ::Ice::Long>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opLong<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opLong.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opLong.
 */
template<class T, typename CT>
class Callback_Initial_opLong : public Callback_Initial_opLong_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional< ::Ice::Long>&, const std::optional< ::Ice::Long>&, const CT&);

    Callback_Initial_opLong(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Long> iceP_p3;
        std::optional< ::Ice::Long> ret;
        try
        {
            ret = proxy->end_opLong(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLong.
 */
template<class T, typename CT> Callback_Initial_opLongPtr
newCallback_Initial_opLong(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Long>&, const std::optional< ::Ice::Long>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opLong<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLong.
 */
template<class T, typename CT> Callback_Initial_opLongPtr
newCallback_Initial_opLong(T* instance, void (T::*cb)(const std::optional< ::Ice::Long>&, const std::optional< ::Ice::Long>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opLong<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opLongReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opLongReq.
 */
template<class T>
class CallbackNC_Initial_opLongReq : public Callback_Initial_opLongReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional< ::Ice::Long>&, const std::optional< ::Ice::Long>&);

    CallbackNC_Initial_opLongReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Long> iceP_p3;
        std::optional< ::Ice::Long> ret;
        try
        {
            ret = proxy->end_opLongReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLongReq.
 */
template<class T> Callback_Initial_opLongReqPtr
newCallback_Initial_opLongReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Long>&, const std::optional< ::Ice::Long>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opLongReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLongReq.
 */
template<class T> Callback_Initial_opLongReqPtr
newCallback_Initial_opLongReq(T* instance, void (T::*cb)(const std::optional< ::Ice::Long>&, const std::optional< ::Ice::Long>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opLongReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opLongReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opLongReq.
 */
template<class T, typename CT>
class Callback_Initial_opLongReq : public Callback_Initial_opLongReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional< ::Ice::Long>&, const std::optional< ::Ice::Long>&, const CT&);

    Callback_Initial_opLongReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Long> iceP_p3;
        std::optional< ::Ice::Long> ret;
        try
        {
            ret = proxy->end_opLongReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLongReq.
 */
template<class T, typename CT> Callback_Initial_opLongReqPtr
newCallback_Initial_opLongReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Long>&, const std::optional< ::Ice::Long>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opLongReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLongReq.
 */
template<class T, typename CT> Callback_Initial_opLongReqPtr
newCallback_Initial_opLongReq(T* instance, void (T::*cb)(const std::optional< ::Ice::Long>&, const std::optional< ::Ice::Long>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opLongReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opFloat.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFloat.
 */
template<class T>
class CallbackNC_Initial_opFloat : public Callback_Initial_opFloat_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional< ::Ice::Float>&, const std::optional< ::Ice::Float>&);

    CallbackNC_Initial_opFloat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Float> iceP_p3;
        std::optional< ::Ice::Float> ret;
        try
        {
            ret = proxy->end_opFloat(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloat.
 */
template<class T> Callback_Initial_opFloatPtr
newCallback_Initial_opFloat(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Float>&, const std::optional< ::Ice::Float>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFloat<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloat.
 */
template<class T> Callback_Initial_opFloatPtr
newCallback_Initial_opFloat(T* instance, void (T::*cb)(const std::optional< ::Ice::Float>&, const std::optional< ::Ice::Float>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFloat<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opFloat.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFloat.
 */
template<class T, typename CT>
class Callback_Initial_opFloat : public Callback_Initial_opFloat_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional< ::Ice::Float>&, const std::optional< ::Ice::Float>&, const CT&);

    Callback_Initial_opFloat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Float> iceP_p3;
        std::optional< ::Ice::Float> ret;
        try
        {
            ret = proxy->end_opFloat(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloat.
 */
template<class T, typename CT> Callback_Initial_opFloatPtr
newCallback_Initial_opFloat(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Float>&, const std::optional< ::Ice::Float>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFloat<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloat.
 */
template<class T, typename CT> Callback_Initial_opFloatPtr
newCallback_Initial_opFloat(T* instance, void (T::*cb)(const std::optional< ::Ice::Float>&, const std::optional< ::Ice::Float>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFloat<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opFloatReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFloatReq.
 */
template<class T>
class CallbackNC_Initial_opFloatReq : public Callback_Initial_opFloatReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional< ::Ice::Float>&, const std::optional< ::Ice::Float>&);

    CallbackNC_Initial_opFloatReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Float> iceP_p3;
        std::optional< ::Ice::Float> ret;
        try
        {
            ret = proxy->end_opFloatReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloatReq.
 */
template<class T> Callback_Initial_opFloatReqPtr
newCallback_Initial_opFloatReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Float>&, const std::optional< ::Ice::Float>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFloatReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloatReq.
 */
template<class T> Callback_Initial_opFloatReqPtr
newCallback_Initial_opFloatReq(T* instance, void (T::*cb)(const std::optional< ::Ice::Float>&, const std::optional< ::Ice::Float>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFloatReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opFloatReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFloatReq.
 */
template<class T, typename CT>
class Callback_Initial_opFloatReq : public Callback_Initial_opFloatReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional< ::Ice::Float>&, const std::optional< ::Ice::Float>&, const CT&);

    Callback_Initial_opFloatReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Float> iceP_p3;
        std::optional< ::Ice::Float> ret;
        try
        {
            ret = proxy->end_opFloatReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloatReq.
 */
template<class T, typename CT> Callback_Initial_opFloatReqPtr
newCallback_Initial_opFloatReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Float>&, const std::optional< ::Ice::Float>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFloatReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloatReq.
 */
template<class T, typename CT> Callback_Initial_opFloatReqPtr
newCallback_Initial_opFloatReq(T* instance, void (T::*cb)(const std::optional< ::Ice::Float>&, const std::optional< ::Ice::Float>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFloatReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opDouble.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opDouble.
 */
template<class T>
class CallbackNC_Initial_opDouble : public Callback_Initial_opDouble_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional< ::Ice::Double>&, const std::optional< ::Ice::Double>&);

    CallbackNC_Initial_opDouble(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Double> iceP_p3;
        std::optional< ::Ice::Double> ret;
        try
        {
            ret = proxy->end_opDouble(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDouble.
 */
template<class T> Callback_Initial_opDoublePtr
newCallback_Initial_opDouble(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Double>&, const std::optional< ::Ice::Double>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opDouble<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDouble.
 */
template<class T> Callback_Initial_opDoublePtr
newCallback_Initial_opDouble(T* instance, void (T::*cb)(const std::optional< ::Ice::Double>&, const std::optional< ::Ice::Double>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opDouble<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opDouble.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opDouble.
 */
template<class T, typename CT>
class Callback_Initial_opDouble : public Callback_Initial_opDouble_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional< ::Ice::Double>&, const std::optional< ::Ice::Double>&, const CT&);

    Callback_Initial_opDouble(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Double> iceP_p3;
        std::optional< ::Ice::Double> ret;
        try
        {
            ret = proxy->end_opDouble(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDouble.
 */
template<class T, typename CT> Callback_Initial_opDoublePtr
newCallback_Initial_opDouble(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Double>&, const std::optional< ::Ice::Double>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opDouble<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDouble.
 */
template<class T, typename CT> Callback_Initial_opDoublePtr
newCallback_Initial_opDouble(T* instance, void (T::*cb)(const std::optional< ::Ice::Double>&, const std::optional< ::Ice::Double>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opDouble<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opDoubleReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opDoubleReq.
 */
template<class T>
class CallbackNC_Initial_opDoubleReq : public Callback_Initial_opDoubleReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional< ::Ice::Double>&, const std::optional< ::Ice::Double>&);

    CallbackNC_Initial_opDoubleReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Double> iceP_p3;
        std::optional< ::Ice::Double> ret;
        try
        {
            ret = proxy->end_opDoubleReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDoubleReq.
 */
template<class T> Callback_Initial_opDoubleReqPtr
newCallback_Initial_opDoubleReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Double>&, const std::optional< ::Ice::Double>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opDoubleReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDoubleReq.
 */
template<class T> Callback_Initial_opDoubleReqPtr
newCallback_Initial_opDoubleReq(T* instance, void (T::*cb)(const std::optional< ::Ice::Double>&, const std::optional< ::Ice::Double>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opDoubleReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opDoubleReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opDoubleReq.
 */
template<class T, typename CT>
class Callback_Initial_opDoubleReq : public Callback_Initial_opDoubleReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional< ::Ice::Double>&, const std::optional< ::Ice::Double>&, const CT&);

    Callback_Initial_opDoubleReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::Ice::Double> iceP_p3;
        std::optional< ::Ice::Double> ret;
        try
        {
            ret = proxy->end_opDoubleReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDoubleReq.
 */
template<class T, typename CT> Callback_Initial_opDoubleReqPtr
newCallback_Initial_opDoubleReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::Ice::Double>&, const std::optional< ::Ice::Double>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opDoubleReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDoubleReq.
 */
template<class T, typename CT> Callback_Initial_opDoubleReqPtr
newCallback_Initial_opDoubleReq(T* instance, void (T::*cb)(const std::optional< ::Ice::Double>&, const std::optional< ::Ice::Double>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opDoubleReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opString.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opString.
 */
template<class T>
class CallbackNC_Initial_opString : public Callback_Initial_opString_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional< ::std::string>&, const std::optional< ::std::string>&);

    CallbackNC_Initial_opString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::std::string> iceP_p3;
        std::optional< ::std::string> ret;
        try
        {
            ret = proxy->end_opString(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opString.
 */
template<class T> Callback_Initial_opStringPtr
newCallback_Initial_opString(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::std::string>&, const std::optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opString<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opString.
 */
template<class T> Callback_Initial_opStringPtr
newCallback_Initial_opString(T* instance, void (T::*cb)(const std::optional< ::std::string>&, const std::optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opString<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opString.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opString.
 */
template<class T, typename CT>
class Callback_Initial_opString : public Callback_Initial_opString_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional< ::std::string>&, const std::optional< ::std::string>&, const CT&);

    Callback_Initial_opString(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::std::string> iceP_p3;
        std::optional< ::std::string> ret;
        try
        {
            ret = proxy->end_opString(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opString.
 */
template<class T, typename CT> Callback_Initial_opStringPtr
newCallback_Initial_opString(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::std::string>&, const std::optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opString<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opString.
 */
template<class T, typename CT> Callback_Initial_opStringPtr
newCallback_Initial_opString(T* instance, void (T::*cb)(const std::optional< ::std::string>&, const std::optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opString<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opStringReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opStringReq.
 */
template<class T>
class CallbackNC_Initial_opStringReq : public Callback_Initial_opStringReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional< ::std::string>&, const std::optional< ::std::string>&);

    CallbackNC_Initial_opStringReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::std::string> iceP_p3;
        std::optional< ::std::string> ret;
        try
        {
            ret = proxy->end_opStringReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringReq.
 */
template<class T> Callback_Initial_opStringReqPtr
newCallback_Initial_opStringReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::std::string>&, const std::optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opStringReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringReq.
 */
template<class T> Callback_Initial_opStringReqPtr
newCallback_Initial_opStringReq(T* instance, void (T::*cb)(const std::optional< ::std::string>&, const std::optional< ::std::string>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opStringReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opStringReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opStringReq.
 */
template<class T, typename CT>
class Callback_Initial_opStringReq : public Callback_Initial_opStringReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional< ::std::string>&, const std::optional< ::std::string>&, const CT&);

    Callback_Initial_opStringReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional< ::std::string> iceP_p3;
        std::optional< ::std::string> ret;
        try
        {
            ret = proxy->end_opStringReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringReq.
 */
template<class T, typename CT> Callback_Initial_opStringReqPtr
newCallback_Initial_opStringReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional< ::std::string>&, const std::optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opStringReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringReq.
 */
template<class T, typename CT> Callback_Initial_opStringReqPtr
newCallback_Initial_opStringReq(T* instance, void (T::*cb)(const std::optional< ::std::string>&, const std::optional< ::std::string>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opStringReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opMyEnum.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMyEnum.
 */
template<class T>
class CallbackNC_Initial_opMyEnum : public Callback_Initial_opMyEnum_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<MyEnum>&, const std::optional<MyEnum>&);

    CallbackNC_Initial_opMyEnum(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<MyEnum> iceP_p3;
        std::optional<MyEnum> ret;
        try
        {
            ret = proxy->end_opMyEnum(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyEnum.
 */
template<class T> Callback_Initial_opMyEnumPtr
newCallback_Initial_opMyEnum(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<MyEnum>&, const std::optional<MyEnum>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMyEnum<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyEnum.
 */
template<class T> Callback_Initial_opMyEnumPtr
newCallback_Initial_opMyEnum(T* instance, void (T::*cb)(const std::optional<MyEnum>&, const std::optional<MyEnum>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMyEnum<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opMyEnum.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMyEnum.
 */
template<class T, typename CT>
class Callback_Initial_opMyEnum : public Callback_Initial_opMyEnum_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<MyEnum>&, const std::optional<MyEnum>&, const CT&);

    Callback_Initial_opMyEnum(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<MyEnum> iceP_p3;
        std::optional<MyEnum> ret;
        try
        {
            ret = proxy->end_opMyEnum(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyEnum.
 */
template<class T, typename CT> Callback_Initial_opMyEnumPtr
newCallback_Initial_opMyEnum(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<MyEnum>&, const std::optional<MyEnum>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMyEnum<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyEnum.
 */
template<class T, typename CT> Callback_Initial_opMyEnumPtr
newCallback_Initial_opMyEnum(T* instance, void (T::*cb)(const std::optional<MyEnum>&, const std::optional<MyEnum>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMyEnum<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opMyEnumReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMyEnumReq.
 */
template<class T>
class CallbackNC_Initial_opMyEnumReq : public Callback_Initial_opMyEnumReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<MyEnum>&, const std::optional<MyEnum>&);

    CallbackNC_Initial_opMyEnumReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<MyEnum> iceP_p3;
        std::optional<MyEnum> ret;
        try
        {
            ret = proxy->end_opMyEnumReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyEnumReq.
 */
template<class T> Callback_Initial_opMyEnumReqPtr
newCallback_Initial_opMyEnumReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<MyEnum>&, const std::optional<MyEnum>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMyEnumReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyEnumReq.
 */
template<class T> Callback_Initial_opMyEnumReqPtr
newCallback_Initial_opMyEnumReq(T* instance, void (T::*cb)(const std::optional<MyEnum>&, const std::optional<MyEnum>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMyEnumReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opMyEnumReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMyEnumReq.
 */
template<class T, typename CT>
class Callback_Initial_opMyEnumReq : public Callback_Initial_opMyEnumReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<MyEnum>&, const std::optional<MyEnum>&, const CT&);

    Callback_Initial_opMyEnumReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<MyEnum> iceP_p3;
        std::optional<MyEnum> ret;
        try
        {
            ret = proxy->end_opMyEnumReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyEnumReq.
 */
template<class T, typename CT> Callback_Initial_opMyEnumReqPtr
newCallback_Initial_opMyEnumReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<MyEnum>&, const std::optional<MyEnum>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMyEnumReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyEnumReq.
 */
template<class T, typename CT> Callback_Initial_opMyEnumReqPtr
newCallback_Initial_opMyEnumReq(T* instance, void (T::*cb)(const std::optional<MyEnum>&, const std::optional<MyEnum>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMyEnumReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opSmallStruct.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStruct.
 */
template<class T>
class CallbackNC_Initial_opSmallStruct : public Callback_Initial_opSmallStruct_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&);

    CallbackNC_Initial_opSmallStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStruct> iceP_p3;
        std::optional<SmallStruct> ret;
        try
        {
            ret = proxy->end_opSmallStruct(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStruct.
 */
template<class T> Callback_Initial_opSmallStructPtr
newCallback_Initial_opSmallStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSmallStruct<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStruct.
 */
template<class T> Callback_Initial_opSmallStructPtr
newCallback_Initial_opSmallStruct(T* instance, void (T::*cb)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSmallStruct<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opSmallStruct.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStruct.
 */
template<class T, typename CT>
class Callback_Initial_opSmallStruct : public Callback_Initial_opSmallStruct_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&, const CT&);

    Callback_Initial_opSmallStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStruct> iceP_p3;
        std::optional<SmallStruct> ret;
        try
        {
            ret = proxy->end_opSmallStruct(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStruct.
 */
template<class T, typename CT> Callback_Initial_opSmallStructPtr
newCallback_Initial_opSmallStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSmallStruct<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStruct.
 */
template<class T, typename CT> Callback_Initial_opSmallStructPtr
newCallback_Initial_opSmallStruct(T* instance, void (T::*cb)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSmallStruct<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opSmallStructReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStructReq.
 */
template<class T>
class CallbackNC_Initial_opSmallStructReq : public Callback_Initial_opSmallStructReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&);

    CallbackNC_Initial_opSmallStructReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStruct> iceP_p3;
        std::optional<SmallStruct> ret;
        try
        {
            ret = proxy->end_opSmallStructReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructReq.
 */
template<class T> Callback_Initial_opSmallStructReqPtr
newCallback_Initial_opSmallStructReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSmallStructReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructReq.
 */
template<class T> Callback_Initial_opSmallStructReqPtr
newCallback_Initial_opSmallStructReq(T* instance, void (T::*cb)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSmallStructReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opSmallStructReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStructReq.
 */
template<class T, typename CT>
class Callback_Initial_opSmallStructReq : public Callback_Initial_opSmallStructReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&, const CT&);

    Callback_Initial_opSmallStructReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStruct> iceP_p3;
        std::optional<SmallStruct> ret;
        try
        {
            ret = proxy->end_opSmallStructReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructReq.
 */
template<class T, typename CT> Callback_Initial_opSmallStructReqPtr
newCallback_Initial_opSmallStructReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSmallStructReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructReq.
 */
template<class T, typename CT> Callback_Initial_opSmallStructReqPtr
newCallback_Initial_opSmallStructReq(T* instance, void (T::*cb)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSmallStructReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opFixedStruct.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStruct.
 */
template<class T>
class CallbackNC_Initial_opFixedStruct : public Callback_Initial_opFixedStruct_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<FixedStruct>&, const std::optional<FixedStruct>&);

    CallbackNC_Initial_opFixedStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FixedStruct> iceP_p3;
        std::optional<FixedStruct> ret;
        try
        {
            ret = proxy->end_opFixedStruct(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStruct.
 */
template<class T> Callback_Initial_opFixedStructPtr
newCallback_Initial_opFixedStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FixedStruct>&, const std::optional<FixedStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFixedStruct<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStruct.
 */
template<class T> Callback_Initial_opFixedStructPtr
newCallback_Initial_opFixedStruct(T* instance, void (T::*cb)(const std::optional<FixedStruct>&, const std::optional<FixedStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFixedStruct<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opFixedStruct.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStruct.
 */
template<class T, typename CT>
class Callback_Initial_opFixedStruct : public Callback_Initial_opFixedStruct_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<FixedStruct>&, const std::optional<FixedStruct>&, const CT&);

    Callback_Initial_opFixedStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FixedStruct> iceP_p3;
        std::optional<FixedStruct> ret;
        try
        {
            ret = proxy->end_opFixedStruct(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStruct.
 */
template<class T, typename CT> Callback_Initial_opFixedStructPtr
newCallback_Initial_opFixedStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FixedStruct>&, const std::optional<FixedStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFixedStruct<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStruct.
 */
template<class T, typename CT> Callback_Initial_opFixedStructPtr
newCallback_Initial_opFixedStruct(T* instance, void (T::*cb)(const std::optional<FixedStruct>&, const std::optional<FixedStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFixedStruct<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opFixedStructReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStructReq.
 */
template<class T>
class CallbackNC_Initial_opFixedStructReq : public Callback_Initial_opFixedStructReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<FixedStruct>&, const std::optional<FixedStruct>&);

    CallbackNC_Initial_opFixedStructReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FixedStruct> iceP_p3;
        std::optional<FixedStruct> ret;
        try
        {
            ret = proxy->end_opFixedStructReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructReq.
 */
template<class T> Callback_Initial_opFixedStructReqPtr
newCallback_Initial_opFixedStructReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FixedStruct>&, const std::optional<FixedStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFixedStructReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructReq.
 */
template<class T> Callback_Initial_opFixedStructReqPtr
newCallback_Initial_opFixedStructReq(T* instance, void (T::*cb)(const std::optional<FixedStruct>&, const std::optional<FixedStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFixedStructReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opFixedStructReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStructReq.
 */
template<class T, typename CT>
class Callback_Initial_opFixedStructReq : public Callback_Initial_opFixedStructReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<FixedStruct>&, const std::optional<FixedStruct>&, const CT&);

    Callback_Initial_opFixedStructReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FixedStruct> iceP_p3;
        std::optional<FixedStruct> ret;
        try
        {
            ret = proxy->end_opFixedStructReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructReq.
 */
template<class T, typename CT> Callback_Initial_opFixedStructReqPtr
newCallback_Initial_opFixedStructReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FixedStruct>&, const std::optional<FixedStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFixedStructReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructReq.
 */
template<class T, typename CT> Callback_Initial_opFixedStructReqPtr
newCallback_Initial_opFixedStructReq(T* instance, void (T::*cb)(const std::optional<FixedStruct>&, const std::optional<FixedStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFixedStructReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opVarStruct.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opVarStruct.
 */
template<class T>
class CallbackNC_Initial_opVarStruct : public Callback_Initial_opVarStruct_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<VarStruct>&, const std::optional<VarStruct>&);

    CallbackNC_Initial_opVarStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<VarStruct> iceP_p3;
        std::optional<VarStruct> ret;
        try
        {
            ret = proxy->end_opVarStruct(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStruct.
 */
template<class T> Callback_Initial_opVarStructPtr
newCallback_Initial_opVarStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<VarStruct>&, const std::optional<VarStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opVarStruct<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStruct.
 */
template<class T> Callback_Initial_opVarStructPtr
newCallback_Initial_opVarStruct(T* instance, void (T::*cb)(const std::optional<VarStruct>&, const std::optional<VarStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opVarStruct<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opVarStruct.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opVarStruct.
 */
template<class T, typename CT>
class Callback_Initial_opVarStruct : public Callback_Initial_opVarStruct_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<VarStruct>&, const std::optional<VarStruct>&, const CT&);

    Callback_Initial_opVarStruct(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<VarStruct> iceP_p3;
        std::optional<VarStruct> ret;
        try
        {
            ret = proxy->end_opVarStruct(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStruct.
 */
template<class T, typename CT> Callback_Initial_opVarStructPtr
newCallback_Initial_opVarStruct(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<VarStruct>&, const std::optional<VarStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opVarStruct<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStruct.
 */
template<class T, typename CT> Callback_Initial_opVarStructPtr
newCallback_Initial_opVarStruct(T* instance, void (T::*cb)(const std::optional<VarStruct>&, const std::optional<VarStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opVarStruct<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opVarStructReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opVarStructReq.
 */
template<class T>
class CallbackNC_Initial_opVarStructReq : public Callback_Initial_opVarStructReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<VarStruct>&, const std::optional<VarStruct>&);

    CallbackNC_Initial_opVarStructReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<VarStruct> iceP_p3;
        std::optional<VarStruct> ret;
        try
        {
            ret = proxy->end_opVarStructReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStructReq.
 */
template<class T> Callback_Initial_opVarStructReqPtr
newCallback_Initial_opVarStructReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<VarStruct>&, const std::optional<VarStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opVarStructReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStructReq.
 */
template<class T> Callback_Initial_opVarStructReqPtr
newCallback_Initial_opVarStructReq(T* instance, void (T::*cb)(const std::optional<VarStruct>&, const std::optional<VarStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opVarStructReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opVarStructReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opVarStructReq.
 */
template<class T, typename CT>
class Callback_Initial_opVarStructReq : public Callback_Initial_opVarStructReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<VarStruct>&, const std::optional<VarStruct>&, const CT&);

    Callback_Initial_opVarStructReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<VarStruct> iceP_p3;
        std::optional<VarStruct> ret;
        try
        {
            ret = proxy->end_opVarStructReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStructReq.
 */
template<class T, typename CT> Callback_Initial_opVarStructReqPtr
newCallback_Initial_opVarStructReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<VarStruct>&, const std::optional<VarStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opVarStructReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStructReq.
 */
template<class T, typename CT> Callback_Initial_opVarStructReqPtr
newCallback_Initial_opVarStructReq(T* instance, void (T::*cb)(const std::optional<VarStruct>&, const std::optional<VarStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opVarStructReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opOneOptional.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opOneOptional.
 */
template<class T>
class CallbackNC_Initial_opOneOptional : public Callback_Initial_opOneOptional_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<OneOptionalPtr>&, const std::optional<OneOptionalPtr>&);

    CallbackNC_Initial_opOneOptional(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<OneOptionalPtr> iceP_p3;
        std::optional<OneOptionalPtr> ret;
        try
        {
            ret = proxy->end_opOneOptional(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOneOptional.
 */
template<class T> Callback_Initial_opOneOptionalPtr
newCallback_Initial_opOneOptional(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<OneOptionalPtr>&, const std::optional<OneOptionalPtr>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opOneOptional<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOneOptional.
 */
template<class T> Callback_Initial_opOneOptionalPtr
newCallback_Initial_opOneOptional(T* instance, void (T::*cb)(const std::optional<OneOptionalPtr>&, const std::optional<OneOptionalPtr>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opOneOptional<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opOneOptional.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opOneOptional.
 */
template<class T, typename CT>
class Callback_Initial_opOneOptional : public Callback_Initial_opOneOptional_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<OneOptionalPtr>&, const std::optional<OneOptionalPtr>&, const CT&);

    Callback_Initial_opOneOptional(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<OneOptionalPtr> iceP_p3;
        std::optional<OneOptionalPtr> ret;
        try
        {
            ret = proxy->end_opOneOptional(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOneOptional.
 */
template<class T, typename CT> Callback_Initial_opOneOptionalPtr
newCallback_Initial_opOneOptional(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<OneOptionalPtr>&, const std::optional<OneOptionalPtr>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opOneOptional<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOneOptional.
 */
template<class T, typename CT> Callback_Initial_opOneOptionalPtr
newCallback_Initial_opOneOptional(T* instance, void (T::*cb)(const std::optional<OneOptionalPtr>&, const std::optional<OneOptionalPtr>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opOneOptional<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opOneOptionalReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opOneOptionalReq.
 */
template<class T>
class CallbackNC_Initial_opOneOptionalReq : public Callback_Initial_opOneOptionalReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<OneOptionalPtr>&, const std::optional<OneOptionalPtr>&);

    CallbackNC_Initial_opOneOptionalReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<OneOptionalPtr> iceP_p3;
        std::optional<OneOptionalPtr> ret;
        try
        {
            ret = proxy->end_opOneOptionalReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOneOptionalReq.
 */
template<class T> Callback_Initial_opOneOptionalReqPtr
newCallback_Initial_opOneOptionalReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<OneOptionalPtr>&, const std::optional<OneOptionalPtr>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opOneOptionalReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOneOptionalReq.
 */
template<class T> Callback_Initial_opOneOptionalReqPtr
newCallback_Initial_opOneOptionalReq(T* instance, void (T::*cb)(const std::optional<OneOptionalPtr>&, const std::optional<OneOptionalPtr>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opOneOptionalReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opOneOptionalReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opOneOptionalReq.
 */
template<class T, typename CT>
class Callback_Initial_opOneOptionalReq : public Callback_Initial_opOneOptionalReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<OneOptionalPtr>&, const std::optional<OneOptionalPtr>&, const CT&);

    Callback_Initial_opOneOptionalReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<OneOptionalPtr> iceP_p3;
        std::optional<OneOptionalPtr> ret;
        try
        {
            ret = proxy->end_opOneOptionalReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOneOptionalReq.
 */
template<class T, typename CT> Callback_Initial_opOneOptionalReqPtr
newCallback_Initial_opOneOptionalReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<OneOptionalPtr>&, const std::optional<OneOptionalPtr>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opOneOptionalReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opOneOptionalReq.
 */
template<class T, typename CT> Callback_Initial_opOneOptionalReqPtr
newCallback_Initial_opOneOptionalReq(T* instance, void (T::*cb)(const std::optional<OneOptionalPtr>&, const std::optional<OneOptionalPtr>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opOneOptionalReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opMyInterfaceProxy.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMyInterfaceProxy.
 */
template<class T>
class CallbackNC_Initial_opMyInterfaceProxy : public Callback_Initial_opMyInterfaceProxy_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<MyInterfacePrx>&, const std::optional<MyInterfacePrx>&);

    CallbackNC_Initial_opMyInterfaceProxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<MyInterfacePrx> iceP_p3;
        std::optional<MyInterfacePrx> ret;
        try
        {
            ret = proxy->end_opMyInterfaceProxy(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyInterfaceProxy.
 */
template<class T> Callback_Initial_opMyInterfaceProxyPtr
newCallback_Initial_opMyInterfaceProxy(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<MyInterfacePrx>&, const std::optional<MyInterfacePrx>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMyInterfaceProxy<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyInterfaceProxy.
 */
template<class T> Callback_Initial_opMyInterfaceProxyPtr
newCallback_Initial_opMyInterfaceProxy(T* instance, void (T::*cb)(const std::optional<MyInterfacePrx>&, const std::optional<MyInterfacePrx>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMyInterfaceProxy<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opMyInterfaceProxy.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMyInterfaceProxy.
 */
template<class T, typename CT>
class Callback_Initial_opMyInterfaceProxy : public Callback_Initial_opMyInterfaceProxy_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<MyInterfacePrx>&, const std::optional<MyInterfacePrx>&, const CT&);

    Callback_Initial_opMyInterfaceProxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<MyInterfacePrx> iceP_p3;
        std::optional<MyInterfacePrx> ret;
        try
        {
            ret = proxy->end_opMyInterfaceProxy(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyInterfaceProxy.
 */
template<class T, typename CT> Callback_Initial_opMyInterfaceProxyPtr
newCallback_Initial_opMyInterfaceProxy(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<MyInterfacePrx>&, const std::optional<MyInterfacePrx>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMyInterfaceProxy<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyInterfaceProxy.
 */
template<class T, typename CT> Callback_Initial_opMyInterfaceProxyPtr
newCallback_Initial_opMyInterfaceProxy(T* instance, void (T::*cb)(const std::optional<MyInterfacePrx>&, const std::optional<MyInterfacePrx>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMyInterfaceProxy<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opMyInterfaceProxyReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMyInterfaceProxyReq.
 */
template<class T>
class CallbackNC_Initial_opMyInterfaceProxyReq : public Callback_Initial_opMyInterfaceProxyReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<MyInterfacePrx>&, const std::optional<MyInterfacePrx>&);

    CallbackNC_Initial_opMyInterfaceProxyReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<MyInterfacePrx> iceP_p3;
        std::optional<MyInterfacePrx> ret;
        try
        {
            ret = proxy->end_opMyInterfaceProxyReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyInterfaceProxyReq.
 */
template<class T> Callback_Initial_opMyInterfaceProxyReqPtr
newCallback_Initial_opMyInterfaceProxyReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<MyInterfacePrx>&, const std::optional<MyInterfacePrx>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMyInterfaceProxyReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyInterfaceProxyReq.
 */
template<class T> Callback_Initial_opMyInterfaceProxyReqPtr
newCallback_Initial_opMyInterfaceProxyReq(T* instance, void (T::*cb)(const std::optional<MyInterfacePrx>&, const std::optional<MyInterfacePrx>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMyInterfaceProxyReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opMyInterfaceProxyReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMyInterfaceProxyReq.
 */
template<class T, typename CT>
class Callback_Initial_opMyInterfaceProxyReq : public Callback_Initial_opMyInterfaceProxyReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<MyInterfacePrx>&, const std::optional<MyInterfacePrx>&, const CT&);

    Callback_Initial_opMyInterfaceProxyReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<MyInterfacePrx> iceP_p3;
        std::optional<MyInterfacePrx> ret;
        try
        {
            ret = proxy->end_opMyInterfaceProxyReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyInterfaceProxyReq.
 */
template<class T, typename CT> Callback_Initial_opMyInterfaceProxyReqPtr
newCallback_Initial_opMyInterfaceProxyReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<MyInterfacePrx>&, const std::optional<MyInterfacePrx>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMyInterfaceProxyReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMyInterfaceProxyReq.
 */
template<class T, typename CT> Callback_Initial_opMyInterfaceProxyReqPtr
newCallback_Initial_opMyInterfaceProxyReq(T* instance, void (T::*cb)(const std::optional<MyInterfacePrx>&, const std::optional<MyInterfacePrx>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMyInterfaceProxyReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opByteSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opByteSeq.
 */
template<class T>
class CallbackNC_Initial_opByteSeq : public Callback_Initial_opByteSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<ByteSeq>&, const std::optional<ByteSeq>&);

    CallbackNC_Initial_opByteSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<ByteSeq> iceP_p3;
        std::optional<ByteSeq> ret;
        try
        {
            ret = proxy->end_opByteSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByteSeq.
 */
template<class T> Callback_Initial_opByteSeqPtr
newCallback_Initial_opByteSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<ByteSeq>&, const std::optional<ByteSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opByteSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByteSeq.
 */
template<class T> Callback_Initial_opByteSeqPtr
newCallback_Initial_opByteSeq(T* instance, void (T::*cb)(const std::optional<ByteSeq>&, const std::optional<ByteSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opByteSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opByteSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opByteSeq.
 */
template<class T, typename CT>
class Callback_Initial_opByteSeq : public Callback_Initial_opByteSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<ByteSeq>&, const std::optional<ByteSeq>&, const CT&);

    Callback_Initial_opByteSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<ByteSeq> iceP_p3;
        std::optional<ByteSeq> ret;
        try
        {
            ret = proxy->end_opByteSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByteSeq.
 */
template<class T, typename CT> Callback_Initial_opByteSeqPtr
newCallback_Initial_opByteSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<ByteSeq>&, const std::optional<ByteSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opByteSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByteSeq.
 */
template<class T, typename CT> Callback_Initial_opByteSeqPtr
newCallback_Initial_opByteSeq(T* instance, void (T::*cb)(const std::optional<ByteSeq>&, const std::optional<ByteSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opByteSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opByteSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opByteSeqReq.
 */
template<class T>
class CallbackNC_Initial_opByteSeqReq : public Callback_Initial_opByteSeqReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<ByteSeq>&, const std::optional<ByteSeq>&);

    CallbackNC_Initial_opByteSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<ByteSeq> iceP_p3;
        std::optional<ByteSeq> ret;
        try
        {
            ret = proxy->end_opByteSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByteSeqReq.
 */
template<class T> Callback_Initial_opByteSeqReqPtr
newCallback_Initial_opByteSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<ByteSeq>&, const std::optional<ByteSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opByteSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByteSeqReq.
 */
template<class T> Callback_Initial_opByteSeqReqPtr
newCallback_Initial_opByteSeqReq(T* instance, void (T::*cb)(const std::optional<ByteSeq>&, const std::optional<ByteSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opByteSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opByteSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opByteSeqReq.
 */
template<class T, typename CT>
class Callback_Initial_opByteSeqReq : public Callback_Initial_opByteSeqReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<ByteSeq>&, const std::optional<ByteSeq>&, const CT&);

    Callback_Initial_opByteSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<ByteSeq> iceP_p3;
        std::optional<ByteSeq> ret;
        try
        {
            ret = proxy->end_opByteSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByteSeqReq.
 */
template<class T, typename CT> Callback_Initial_opByteSeqReqPtr
newCallback_Initial_opByteSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<ByteSeq>&, const std::optional<ByteSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opByteSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opByteSeqReq.
 */
template<class T, typename CT> Callback_Initial_opByteSeqReqPtr
newCallback_Initial_opByteSeqReq(T* instance, void (T::*cb)(const std::optional<ByteSeq>&, const std::optional<ByteSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opByteSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opBoolSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opBoolSeq.
 */
template<class T>
class CallbackNC_Initial_opBoolSeq : public Callback_Initial_opBoolSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<BoolSeq>&, const std::optional<BoolSeq>&);

    CallbackNC_Initial_opBoolSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<BoolSeq> iceP_p3;
        std::optional<BoolSeq> ret;
        try
        {
            ret = proxy->end_opBoolSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBoolSeq.
 */
template<class T> Callback_Initial_opBoolSeqPtr
newCallback_Initial_opBoolSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<BoolSeq>&, const std::optional<BoolSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opBoolSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBoolSeq.
 */
template<class T> Callback_Initial_opBoolSeqPtr
newCallback_Initial_opBoolSeq(T* instance, void (T::*cb)(const std::optional<BoolSeq>&, const std::optional<BoolSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opBoolSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opBoolSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opBoolSeq.
 */
template<class T, typename CT>
class Callback_Initial_opBoolSeq : public Callback_Initial_opBoolSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<BoolSeq>&, const std::optional<BoolSeq>&, const CT&);

    Callback_Initial_opBoolSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<BoolSeq> iceP_p3;
        std::optional<BoolSeq> ret;
        try
        {
            ret = proxy->end_opBoolSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBoolSeq.
 */
template<class T, typename CT> Callback_Initial_opBoolSeqPtr
newCallback_Initial_opBoolSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<BoolSeq>&, const std::optional<BoolSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opBoolSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBoolSeq.
 */
template<class T, typename CT> Callback_Initial_opBoolSeqPtr
newCallback_Initial_opBoolSeq(T* instance, void (T::*cb)(const std::optional<BoolSeq>&, const std::optional<BoolSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opBoolSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opBoolSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opBoolSeqReq.
 */
template<class T>
class CallbackNC_Initial_opBoolSeqReq : public Callback_Initial_opBoolSeqReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<BoolSeq>&, const std::optional<BoolSeq>&);

    CallbackNC_Initial_opBoolSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<BoolSeq> iceP_p3;
        std::optional<BoolSeq> ret;
        try
        {
            ret = proxy->end_opBoolSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBoolSeqReq.
 */
template<class T> Callback_Initial_opBoolSeqReqPtr
newCallback_Initial_opBoolSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<BoolSeq>&, const std::optional<BoolSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opBoolSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBoolSeqReq.
 */
template<class T> Callback_Initial_opBoolSeqReqPtr
newCallback_Initial_opBoolSeqReq(T* instance, void (T::*cb)(const std::optional<BoolSeq>&, const std::optional<BoolSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opBoolSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opBoolSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opBoolSeqReq.
 */
template<class T, typename CT>
class Callback_Initial_opBoolSeqReq : public Callback_Initial_opBoolSeqReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<BoolSeq>&, const std::optional<BoolSeq>&, const CT&);

    Callback_Initial_opBoolSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<BoolSeq> iceP_p3;
        std::optional<BoolSeq> ret;
        try
        {
            ret = proxy->end_opBoolSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBoolSeqReq.
 */
template<class T, typename CT> Callback_Initial_opBoolSeqReqPtr
newCallback_Initial_opBoolSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<BoolSeq>&, const std::optional<BoolSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opBoolSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opBoolSeqReq.
 */
template<class T, typename CT> Callback_Initial_opBoolSeqReqPtr
newCallback_Initial_opBoolSeqReq(T* instance, void (T::*cb)(const std::optional<BoolSeq>&, const std::optional<BoolSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opBoolSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opShortSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opShortSeq.
 */
template<class T>
class CallbackNC_Initial_opShortSeq : public Callback_Initial_opShortSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<ShortSeq>&, const std::optional<ShortSeq>&);

    CallbackNC_Initial_opShortSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<ShortSeq> iceP_p3;
        std::optional<ShortSeq> ret;
        try
        {
            ret = proxy->end_opShortSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShortSeq.
 */
template<class T> Callback_Initial_opShortSeqPtr
newCallback_Initial_opShortSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<ShortSeq>&, const std::optional<ShortSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opShortSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShortSeq.
 */
template<class T> Callback_Initial_opShortSeqPtr
newCallback_Initial_opShortSeq(T* instance, void (T::*cb)(const std::optional<ShortSeq>&, const std::optional<ShortSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opShortSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opShortSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opShortSeq.
 */
template<class T, typename CT>
class Callback_Initial_opShortSeq : public Callback_Initial_opShortSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<ShortSeq>&, const std::optional<ShortSeq>&, const CT&);

    Callback_Initial_opShortSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<ShortSeq> iceP_p3;
        std::optional<ShortSeq> ret;
        try
        {
            ret = proxy->end_opShortSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShortSeq.
 */
template<class T, typename CT> Callback_Initial_opShortSeqPtr
newCallback_Initial_opShortSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<ShortSeq>&, const std::optional<ShortSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opShortSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShortSeq.
 */
template<class T, typename CT> Callback_Initial_opShortSeqPtr
newCallback_Initial_opShortSeq(T* instance, void (T::*cb)(const std::optional<ShortSeq>&, const std::optional<ShortSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opShortSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opShortSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opShortSeqReq.
 */
template<class T>
class CallbackNC_Initial_opShortSeqReq : public Callback_Initial_opShortSeqReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<ShortSeq>&, const std::optional<ShortSeq>&);

    CallbackNC_Initial_opShortSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<ShortSeq> iceP_p3;
        std::optional<ShortSeq> ret;
        try
        {
            ret = proxy->end_opShortSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShortSeqReq.
 */
template<class T> Callback_Initial_opShortSeqReqPtr
newCallback_Initial_opShortSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<ShortSeq>&, const std::optional<ShortSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opShortSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShortSeqReq.
 */
template<class T> Callback_Initial_opShortSeqReqPtr
newCallback_Initial_opShortSeqReq(T* instance, void (T::*cb)(const std::optional<ShortSeq>&, const std::optional<ShortSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opShortSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opShortSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opShortSeqReq.
 */
template<class T, typename CT>
class Callback_Initial_opShortSeqReq : public Callback_Initial_opShortSeqReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<ShortSeq>&, const std::optional<ShortSeq>&, const CT&);

    Callback_Initial_opShortSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<ShortSeq> iceP_p3;
        std::optional<ShortSeq> ret;
        try
        {
            ret = proxy->end_opShortSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShortSeqReq.
 */
template<class T, typename CT> Callback_Initial_opShortSeqReqPtr
newCallback_Initial_opShortSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<ShortSeq>&, const std::optional<ShortSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opShortSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opShortSeqReq.
 */
template<class T, typename CT> Callback_Initial_opShortSeqReqPtr
newCallback_Initial_opShortSeqReq(T* instance, void (T::*cb)(const std::optional<ShortSeq>&, const std::optional<ShortSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opShortSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opIntSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntSeq.
 */
template<class T>
class CallbackNC_Initial_opIntSeq : public Callback_Initial_opIntSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<IntSeq>&, const std::optional<IntSeq>&);

    CallbackNC_Initial_opIntSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<IntSeq> iceP_p3;
        std::optional<IntSeq> ret;
        try
        {
            ret = proxy->end_opIntSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntSeq.
 */
template<class T> Callback_Initial_opIntSeqPtr
newCallback_Initial_opIntSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<IntSeq>&, const std::optional<IntSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opIntSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntSeq.
 */
template<class T> Callback_Initial_opIntSeqPtr
newCallback_Initial_opIntSeq(T* instance, void (T::*cb)(const std::optional<IntSeq>&, const std::optional<IntSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opIntSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opIntSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntSeq.
 */
template<class T, typename CT>
class Callback_Initial_opIntSeq : public Callback_Initial_opIntSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<IntSeq>&, const std::optional<IntSeq>&, const CT&);

    Callback_Initial_opIntSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<IntSeq> iceP_p3;
        std::optional<IntSeq> ret;
        try
        {
            ret = proxy->end_opIntSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntSeq.
 */
template<class T, typename CT> Callback_Initial_opIntSeqPtr
newCallback_Initial_opIntSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<IntSeq>&, const std::optional<IntSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opIntSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntSeq.
 */
template<class T, typename CT> Callback_Initial_opIntSeqPtr
newCallback_Initial_opIntSeq(T* instance, void (T::*cb)(const std::optional<IntSeq>&, const std::optional<IntSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opIntSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opIntSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntSeqReq.
 */
template<class T>
class CallbackNC_Initial_opIntSeqReq : public Callback_Initial_opIntSeqReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<IntSeq>&, const std::optional<IntSeq>&);

    CallbackNC_Initial_opIntSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<IntSeq> iceP_p3;
        std::optional<IntSeq> ret;
        try
        {
            ret = proxy->end_opIntSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntSeqReq.
 */
template<class T> Callback_Initial_opIntSeqReqPtr
newCallback_Initial_opIntSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<IntSeq>&, const std::optional<IntSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opIntSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntSeqReq.
 */
template<class T> Callback_Initial_opIntSeqReqPtr
newCallback_Initial_opIntSeqReq(T* instance, void (T::*cb)(const std::optional<IntSeq>&, const std::optional<IntSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opIntSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opIntSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntSeqReq.
 */
template<class T, typename CT>
class Callback_Initial_opIntSeqReq : public Callback_Initial_opIntSeqReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<IntSeq>&, const std::optional<IntSeq>&, const CT&);

    Callback_Initial_opIntSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<IntSeq> iceP_p3;
        std::optional<IntSeq> ret;
        try
        {
            ret = proxy->end_opIntSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntSeqReq.
 */
template<class T, typename CT> Callback_Initial_opIntSeqReqPtr
newCallback_Initial_opIntSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<IntSeq>&, const std::optional<IntSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opIntSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntSeqReq.
 */
template<class T, typename CT> Callback_Initial_opIntSeqReqPtr
newCallback_Initial_opIntSeqReq(T* instance, void (T::*cb)(const std::optional<IntSeq>&, const std::optional<IntSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opIntSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opLongSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opLongSeq.
 */
template<class T>
class CallbackNC_Initial_opLongSeq : public Callback_Initial_opLongSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<LongSeq>&, const std::optional<LongSeq>&);

    CallbackNC_Initial_opLongSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<LongSeq> iceP_p3;
        std::optional<LongSeq> ret;
        try
        {
            ret = proxy->end_opLongSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLongSeq.
 */
template<class T> Callback_Initial_opLongSeqPtr
newCallback_Initial_opLongSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<LongSeq>&, const std::optional<LongSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opLongSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLongSeq.
 */
template<class T> Callback_Initial_opLongSeqPtr
newCallback_Initial_opLongSeq(T* instance, void (T::*cb)(const std::optional<LongSeq>&, const std::optional<LongSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opLongSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opLongSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opLongSeq.
 */
template<class T, typename CT>
class Callback_Initial_opLongSeq : public Callback_Initial_opLongSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<LongSeq>&, const std::optional<LongSeq>&, const CT&);

    Callback_Initial_opLongSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<LongSeq> iceP_p3;
        std::optional<LongSeq> ret;
        try
        {
            ret = proxy->end_opLongSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLongSeq.
 */
template<class T, typename CT> Callback_Initial_opLongSeqPtr
newCallback_Initial_opLongSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<LongSeq>&, const std::optional<LongSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opLongSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLongSeq.
 */
template<class T, typename CT> Callback_Initial_opLongSeqPtr
newCallback_Initial_opLongSeq(T* instance, void (T::*cb)(const std::optional<LongSeq>&, const std::optional<LongSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opLongSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opLongSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opLongSeqReq.
 */
template<class T>
class CallbackNC_Initial_opLongSeqReq : public Callback_Initial_opLongSeqReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<LongSeq>&, const std::optional<LongSeq>&);

    CallbackNC_Initial_opLongSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<LongSeq> iceP_p3;
        std::optional<LongSeq> ret;
        try
        {
            ret = proxy->end_opLongSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLongSeqReq.
 */
template<class T> Callback_Initial_opLongSeqReqPtr
newCallback_Initial_opLongSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<LongSeq>&, const std::optional<LongSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opLongSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLongSeqReq.
 */
template<class T> Callback_Initial_opLongSeqReqPtr
newCallback_Initial_opLongSeqReq(T* instance, void (T::*cb)(const std::optional<LongSeq>&, const std::optional<LongSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opLongSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opLongSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opLongSeqReq.
 */
template<class T, typename CT>
class Callback_Initial_opLongSeqReq : public Callback_Initial_opLongSeqReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<LongSeq>&, const std::optional<LongSeq>&, const CT&);

    Callback_Initial_opLongSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<LongSeq> iceP_p3;
        std::optional<LongSeq> ret;
        try
        {
            ret = proxy->end_opLongSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLongSeqReq.
 */
template<class T, typename CT> Callback_Initial_opLongSeqReqPtr
newCallback_Initial_opLongSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<LongSeq>&, const std::optional<LongSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opLongSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opLongSeqReq.
 */
template<class T, typename CT> Callback_Initial_opLongSeqReqPtr
newCallback_Initial_opLongSeqReq(T* instance, void (T::*cb)(const std::optional<LongSeq>&, const std::optional<LongSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opLongSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opFloatSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFloatSeq.
 */
template<class T>
class CallbackNC_Initial_opFloatSeq : public Callback_Initial_opFloatSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<FloatSeq>&, const std::optional<FloatSeq>&);

    CallbackNC_Initial_opFloatSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FloatSeq> iceP_p3;
        std::optional<FloatSeq> ret;
        try
        {
            ret = proxy->end_opFloatSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloatSeq.
 */
template<class T> Callback_Initial_opFloatSeqPtr
newCallback_Initial_opFloatSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FloatSeq>&, const std::optional<FloatSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFloatSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloatSeq.
 */
template<class T> Callback_Initial_opFloatSeqPtr
newCallback_Initial_opFloatSeq(T* instance, void (T::*cb)(const std::optional<FloatSeq>&, const std::optional<FloatSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFloatSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opFloatSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFloatSeq.
 */
template<class T, typename CT>
class Callback_Initial_opFloatSeq : public Callback_Initial_opFloatSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<FloatSeq>&, const std::optional<FloatSeq>&, const CT&);

    Callback_Initial_opFloatSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FloatSeq> iceP_p3;
        std::optional<FloatSeq> ret;
        try
        {
            ret = proxy->end_opFloatSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloatSeq.
 */
template<class T, typename CT> Callback_Initial_opFloatSeqPtr
newCallback_Initial_opFloatSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FloatSeq>&, const std::optional<FloatSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFloatSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloatSeq.
 */
template<class T, typename CT> Callback_Initial_opFloatSeqPtr
newCallback_Initial_opFloatSeq(T* instance, void (T::*cb)(const std::optional<FloatSeq>&, const std::optional<FloatSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFloatSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opFloatSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFloatSeqReq.
 */
template<class T>
class CallbackNC_Initial_opFloatSeqReq : public Callback_Initial_opFloatSeqReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<FloatSeq>&, const std::optional<FloatSeq>&);

    CallbackNC_Initial_opFloatSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FloatSeq> iceP_p3;
        std::optional<FloatSeq> ret;
        try
        {
            ret = proxy->end_opFloatSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloatSeqReq.
 */
template<class T> Callback_Initial_opFloatSeqReqPtr
newCallback_Initial_opFloatSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FloatSeq>&, const std::optional<FloatSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFloatSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloatSeqReq.
 */
template<class T> Callback_Initial_opFloatSeqReqPtr
newCallback_Initial_opFloatSeqReq(T* instance, void (T::*cb)(const std::optional<FloatSeq>&, const std::optional<FloatSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFloatSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opFloatSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFloatSeqReq.
 */
template<class T, typename CT>
class Callback_Initial_opFloatSeqReq : public Callback_Initial_opFloatSeqReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<FloatSeq>&, const std::optional<FloatSeq>&, const CT&);

    Callback_Initial_opFloatSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FloatSeq> iceP_p3;
        std::optional<FloatSeq> ret;
        try
        {
            ret = proxy->end_opFloatSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloatSeqReq.
 */
template<class T, typename CT> Callback_Initial_opFloatSeqReqPtr
newCallback_Initial_opFloatSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FloatSeq>&, const std::optional<FloatSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFloatSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFloatSeqReq.
 */
template<class T, typename CT> Callback_Initial_opFloatSeqReqPtr
newCallback_Initial_opFloatSeqReq(T* instance, void (T::*cb)(const std::optional<FloatSeq>&, const std::optional<FloatSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFloatSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opDoubleSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opDoubleSeq.
 */
template<class T>
class CallbackNC_Initial_opDoubleSeq : public Callback_Initial_opDoubleSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<DoubleSeq>&, const std::optional<DoubleSeq>&);

    CallbackNC_Initial_opDoubleSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<DoubleSeq> iceP_p3;
        std::optional<DoubleSeq> ret;
        try
        {
            ret = proxy->end_opDoubleSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDoubleSeq.
 */
template<class T> Callback_Initial_opDoubleSeqPtr
newCallback_Initial_opDoubleSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<DoubleSeq>&, const std::optional<DoubleSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opDoubleSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDoubleSeq.
 */
template<class T> Callback_Initial_opDoubleSeqPtr
newCallback_Initial_opDoubleSeq(T* instance, void (T::*cb)(const std::optional<DoubleSeq>&, const std::optional<DoubleSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opDoubleSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opDoubleSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opDoubleSeq.
 */
template<class T, typename CT>
class Callback_Initial_opDoubleSeq : public Callback_Initial_opDoubleSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<DoubleSeq>&, const std::optional<DoubleSeq>&, const CT&);

    Callback_Initial_opDoubleSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<DoubleSeq> iceP_p3;
        std::optional<DoubleSeq> ret;
        try
        {
            ret = proxy->end_opDoubleSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDoubleSeq.
 */
template<class T, typename CT> Callback_Initial_opDoubleSeqPtr
newCallback_Initial_opDoubleSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<DoubleSeq>&, const std::optional<DoubleSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opDoubleSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDoubleSeq.
 */
template<class T, typename CT> Callback_Initial_opDoubleSeqPtr
newCallback_Initial_opDoubleSeq(T* instance, void (T::*cb)(const std::optional<DoubleSeq>&, const std::optional<DoubleSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opDoubleSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opDoubleSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opDoubleSeqReq.
 */
template<class T>
class CallbackNC_Initial_opDoubleSeqReq : public Callback_Initial_opDoubleSeqReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<DoubleSeq>&, const std::optional<DoubleSeq>&);

    CallbackNC_Initial_opDoubleSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<DoubleSeq> iceP_p3;
        std::optional<DoubleSeq> ret;
        try
        {
            ret = proxy->end_opDoubleSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDoubleSeqReq.
 */
template<class T> Callback_Initial_opDoubleSeqReqPtr
newCallback_Initial_opDoubleSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<DoubleSeq>&, const std::optional<DoubleSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opDoubleSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDoubleSeqReq.
 */
template<class T> Callback_Initial_opDoubleSeqReqPtr
newCallback_Initial_opDoubleSeqReq(T* instance, void (T::*cb)(const std::optional<DoubleSeq>&, const std::optional<DoubleSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opDoubleSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opDoubleSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opDoubleSeqReq.
 */
template<class T, typename CT>
class Callback_Initial_opDoubleSeqReq : public Callback_Initial_opDoubleSeqReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<DoubleSeq>&, const std::optional<DoubleSeq>&, const CT&);

    Callback_Initial_opDoubleSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<DoubleSeq> iceP_p3;
        std::optional<DoubleSeq> ret;
        try
        {
            ret = proxy->end_opDoubleSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDoubleSeqReq.
 */
template<class T, typename CT> Callback_Initial_opDoubleSeqReqPtr
newCallback_Initial_opDoubleSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<DoubleSeq>&, const std::optional<DoubleSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opDoubleSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opDoubleSeqReq.
 */
template<class T, typename CT> Callback_Initial_opDoubleSeqReqPtr
newCallback_Initial_opDoubleSeqReq(T* instance, void (T::*cb)(const std::optional<DoubleSeq>&, const std::optional<DoubleSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opDoubleSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opStringSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opStringSeq.
 */
template<class T>
class CallbackNC_Initial_opStringSeq : public Callback_Initial_opStringSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<StringSeq>&, const std::optional<StringSeq>&);

    CallbackNC_Initial_opStringSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringSeq> iceP_p3;
        std::optional<StringSeq> ret;
        try
        {
            ret = proxy->end_opStringSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringSeq.
 */
template<class T> Callback_Initial_opStringSeqPtr
newCallback_Initial_opStringSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringSeq>&, const std::optional<StringSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opStringSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringSeq.
 */
template<class T> Callback_Initial_opStringSeqPtr
newCallback_Initial_opStringSeq(T* instance, void (T::*cb)(const std::optional<StringSeq>&, const std::optional<StringSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opStringSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opStringSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opStringSeq.
 */
template<class T, typename CT>
class Callback_Initial_opStringSeq : public Callback_Initial_opStringSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<StringSeq>&, const std::optional<StringSeq>&, const CT&);

    Callback_Initial_opStringSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringSeq> iceP_p3;
        std::optional<StringSeq> ret;
        try
        {
            ret = proxy->end_opStringSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringSeq.
 */
template<class T, typename CT> Callback_Initial_opStringSeqPtr
newCallback_Initial_opStringSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringSeq>&, const std::optional<StringSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opStringSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringSeq.
 */
template<class T, typename CT> Callback_Initial_opStringSeqPtr
newCallback_Initial_opStringSeq(T* instance, void (T::*cb)(const std::optional<StringSeq>&, const std::optional<StringSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opStringSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opStringSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opStringSeqReq.
 */
template<class T>
class CallbackNC_Initial_opStringSeqReq : public Callback_Initial_opStringSeqReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<StringSeq>&, const std::optional<StringSeq>&);

    CallbackNC_Initial_opStringSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringSeq> iceP_p3;
        std::optional<StringSeq> ret;
        try
        {
            ret = proxy->end_opStringSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringSeqReq.
 */
template<class T> Callback_Initial_opStringSeqReqPtr
newCallback_Initial_opStringSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringSeq>&, const std::optional<StringSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opStringSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringSeqReq.
 */
template<class T> Callback_Initial_opStringSeqReqPtr
newCallback_Initial_opStringSeqReq(T* instance, void (T::*cb)(const std::optional<StringSeq>&, const std::optional<StringSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opStringSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opStringSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opStringSeqReq.
 */
template<class T, typename CT>
class Callback_Initial_opStringSeqReq : public Callback_Initial_opStringSeqReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<StringSeq>&, const std::optional<StringSeq>&, const CT&);

    Callback_Initial_opStringSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringSeq> iceP_p3;
        std::optional<StringSeq> ret;
        try
        {
            ret = proxy->end_opStringSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringSeqReq.
 */
template<class T, typename CT> Callback_Initial_opStringSeqReqPtr
newCallback_Initial_opStringSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringSeq>&, const std::optional<StringSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opStringSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringSeqReq.
 */
template<class T, typename CT> Callback_Initial_opStringSeqReqPtr
newCallback_Initial_opStringSeqReq(T* instance, void (T::*cb)(const std::optional<StringSeq>&, const std::optional<StringSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opStringSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opSmallStructSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStructSeq.
 */
template<class T>
class CallbackNC_Initial_opSmallStructSeq : public Callback_Initial_opSmallStructSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<SmallStructSeq>&, const std::optional<SmallStructSeq>&);

    CallbackNC_Initial_opSmallStructSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStructSeq> iceP_p3;
        std::optional<SmallStructSeq> ret;
        try
        {
            ret = proxy->end_opSmallStructSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructSeq.
 */
template<class T> Callback_Initial_opSmallStructSeqPtr
newCallback_Initial_opSmallStructSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStructSeq>&, const std::optional<SmallStructSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSmallStructSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructSeq.
 */
template<class T> Callback_Initial_opSmallStructSeqPtr
newCallback_Initial_opSmallStructSeq(T* instance, void (T::*cb)(const std::optional<SmallStructSeq>&, const std::optional<SmallStructSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSmallStructSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opSmallStructSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStructSeq.
 */
template<class T, typename CT>
class Callback_Initial_opSmallStructSeq : public Callback_Initial_opSmallStructSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<SmallStructSeq>&, const std::optional<SmallStructSeq>&, const CT&);

    Callback_Initial_opSmallStructSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStructSeq> iceP_p3;
        std::optional<SmallStructSeq> ret;
        try
        {
            ret = proxy->end_opSmallStructSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructSeq.
 */
template<class T, typename CT> Callback_Initial_opSmallStructSeqPtr
newCallback_Initial_opSmallStructSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStructSeq>&, const std::optional<SmallStructSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSmallStructSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructSeq.
 */
template<class T, typename CT> Callback_Initial_opSmallStructSeqPtr
newCallback_Initial_opSmallStructSeq(T* instance, void (T::*cb)(const std::optional<SmallStructSeq>&, const std::optional<SmallStructSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSmallStructSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opSmallStructSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStructSeqReq.
 */
template<class T>
class CallbackNC_Initial_opSmallStructSeqReq : public Callback_Initial_opSmallStructSeqReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<SmallStructSeq>&, const std::optional<SmallStructSeq>&);

    CallbackNC_Initial_opSmallStructSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStructSeq> iceP_p3;
        std::optional<SmallStructSeq> ret;
        try
        {
            ret = proxy->end_opSmallStructSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructSeqReq.
 */
template<class T> Callback_Initial_opSmallStructSeqReqPtr
newCallback_Initial_opSmallStructSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStructSeq>&, const std::optional<SmallStructSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSmallStructSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructSeqReq.
 */
template<class T> Callback_Initial_opSmallStructSeqReqPtr
newCallback_Initial_opSmallStructSeqReq(T* instance, void (T::*cb)(const std::optional<SmallStructSeq>&, const std::optional<SmallStructSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSmallStructSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opSmallStructSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStructSeqReq.
 */
template<class T, typename CT>
class Callback_Initial_opSmallStructSeqReq : public Callback_Initial_opSmallStructSeqReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<SmallStructSeq>&, const std::optional<SmallStructSeq>&, const CT&);

    Callback_Initial_opSmallStructSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStructSeq> iceP_p3;
        std::optional<SmallStructSeq> ret;
        try
        {
            ret = proxy->end_opSmallStructSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructSeqReq.
 */
template<class T, typename CT> Callback_Initial_opSmallStructSeqReqPtr
newCallback_Initial_opSmallStructSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStructSeq>&, const std::optional<SmallStructSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSmallStructSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructSeqReq.
 */
template<class T, typename CT> Callback_Initial_opSmallStructSeqReqPtr
newCallback_Initial_opSmallStructSeqReq(T* instance, void (T::*cb)(const std::optional<SmallStructSeq>&, const std::optional<SmallStructSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSmallStructSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opSmallStructList.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStructList.
 */
template<class T>
class CallbackNC_Initial_opSmallStructList : public Callback_Initial_opSmallStructList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<SmallStructList>&, const std::optional<SmallStructList>&);

    CallbackNC_Initial_opSmallStructList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStructList> iceP_p3;
        std::optional<SmallStructList> ret;
        try
        {
            ret = proxy->end_opSmallStructList(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructList.
 */
template<class T> Callback_Initial_opSmallStructListPtr
newCallback_Initial_opSmallStructList(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStructList>&, const std::optional<SmallStructList>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSmallStructList<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructList.
 */
template<class T> Callback_Initial_opSmallStructListPtr
newCallback_Initial_opSmallStructList(T* instance, void (T::*cb)(const std::optional<SmallStructList>&, const std::optional<SmallStructList>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSmallStructList<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opSmallStructList.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStructList.
 */
template<class T, typename CT>
class Callback_Initial_opSmallStructList : public Callback_Initial_opSmallStructList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<SmallStructList>&, const std::optional<SmallStructList>&, const CT&);

    Callback_Initial_opSmallStructList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStructList> iceP_p3;
        std::optional<SmallStructList> ret;
        try
        {
            ret = proxy->end_opSmallStructList(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructList.
 */
template<class T, typename CT> Callback_Initial_opSmallStructListPtr
newCallback_Initial_opSmallStructList(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStructList>&, const std::optional<SmallStructList>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSmallStructList<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructList.
 */
template<class T, typename CT> Callback_Initial_opSmallStructListPtr
newCallback_Initial_opSmallStructList(T* instance, void (T::*cb)(const std::optional<SmallStructList>&, const std::optional<SmallStructList>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSmallStructList<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opSmallStructListReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStructListReq.
 */
template<class T>
class CallbackNC_Initial_opSmallStructListReq : public Callback_Initial_opSmallStructListReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<SmallStructList>&, const std::optional<SmallStructList>&);

    CallbackNC_Initial_opSmallStructListReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStructList> iceP_p3;
        std::optional<SmallStructList> ret;
        try
        {
            ret = proxy->end_opSmallStructListReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructListReq.
 */
template<class T> Callback_Initial_opSmallStructListReqPtr
newCallback_Initial_opSmallStructListReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStructList>&, const std::optional<SmallStructList>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSmallStructListReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructListReq.
 */
template<class T> Callback_Initial_opSmallStructListReqPtr
newCallback_Initial_opSmallStructListReq(T* instance, void (T::*cb)(const std::optional<SmallStructList>&, const std::optional<SmallStructList>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSmallStructListReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opSmallStructListReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSmallStructListReq.
 */
template<class T, typename CT>
class Callback_Initial_opSmallStructListReq : public Callback_Initial_opSmallStructListReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<SmallStructList>&, const std::optional<SmallStructList>&, const CT&);

    Callback_Initial_opSmallStructListReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStructList> iceP_p3;
        std::optional<SmallStructList> ret;
        try
        {
            ret = proxy->end_opSmallStructListReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructListReq.
 */
template<class T, typename CT> Callback_Initial_opSmallStructListReqPtr
newCallback_Initial_opSmallStructListReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStructList>&, const std::optional<SmallStructList>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSmallStructListReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSmallStructListReq.
 */
template<class T, typename CT> Callback_Initial_opSmallStructListReqPtr
newCallback_Initial_opSmallStructListReq(T* instance, void (T::*cb)(const std::optional<SmallStructList>&, const std::optional<SmallStructList>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSmallStructListReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opFixedStructSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStructSeq.
 */
template<class T>
class CallbackNC_Initial_opFixedStructSeq : public Callback_Initial_opFixedStructSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<FixedStructSeq>&, const std::optional<FixedStructSeq>&);

    CallbackNC_Initial_opFixedStructSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FixedStructSeq> iceP_p3;
        std::optional<FixedStructSeq> ret;
        try
        {
            ret = proxy->end_opFixedStructSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructSeq.
 */
template<class T> Callback_Initial_opFixedStructSeqPtr
newCallback_Initial_opFixedStructSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FixedStructSeq>&, const std::optional<FixedStructSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFixedStructSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructSeq.
 */
template<class T> Callback_Initial_opFixedStructSeqPtr
newCallback_Initial_opFixedStructSeq(T* instance, void (T::*cb)(const std::optional<FixedStructSeq>&, const std::optional<FixedStructSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFixedStructSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opFixedStructSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStructSeq.
 */
template<class T, typename CT>
class Callback_Initial_opFixedStructSeq : public Callback_Initial_opFixedStructSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<FixedStructSeq>&, const std::optional<FixedStructSeq>&, const CT&);

    Callback_Initial_opFixedStructSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FixedStructSeq> iceP_p3;
        std::optional<FixedStructSeq> ret;
        try
        {
            ret = proxy->end_opFixedStructSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructSeq.
 */
template<class T, typename CT> Callback_Initial_opFixedStructSeqPtr
newCallback_Initial_opFixedStructSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FixedStructSeq>&, const std::optional<FixedStructSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFixedStructSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructSeq.
 */
template<class T, typename CT> Callback_Initial_opFixedStructSeqPtr
newCallback_Initial_opFixedStructSeq(T* instance, void (T::*cb)(const std::optional<FixedStructSeq>&, const std::optional<FixedStructSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFixedStructSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opFixedStructSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStructSeqReq.
 */
template<class T>
class CallbackNC_Initial_opFixedStructSeqReq : public Callback_Initial_opFixedStructSeqReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<FixedStructSeq>&, const std::optional<FixedStructSeq>&);

    CallbackNC_Initial_opFixedStructSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FixedStructSeq> iceP_p3;
        std::optional<FixedStructSeq> ret;
        try
        {
            ret = proxy->end_opFixedStructSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructSeqReq.
 */
template<class T> Callback_Initial_opFixedStructSeqReqPtr
newCallback_Initial_opFixedStructSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FixedStructSeq>&, const std::optional<FixedStructSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFixedStructSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructSeqReq.
 */
template<class T> Callback_Initial_opFixedStructSeqReqPtr
newCallback_Initial_opFixedStructSeqReq(T* instance, void (T::*cb)(const std::optional<FixedStructSeq>&, const std::optional<FixedStructSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFixedStructSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opFixedStructSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStructSeqReq.
 */
template<class T, typename CT>
class Callback_Initial_opFixedStructSeqReq : public Callback_Initial_opFixedStructSeqReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<FixedStructSeq>&, const std::optional<FixedStructSeq>&, const CT&);

    Callback_Initial_opFixedStructSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FixedStructSeq> iceP_p3;
        std::optional<FixedStructSeq> ret;
        try
        {
            ret = proxy->end_opFixedStructSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructSeqReq.
 */
template<class T, typename CT> Callback_Initial_opFixedStructSeqReqPtr
newCallback_Initial_opFixedStructSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FixedStructSeq>&, const std::optional<FixedStructSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFixedStructSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructSeqReq.
 */
template<class T, typename CT> Callback_Initial_opFixedStructSeqReqPtr
newCallback_Initial_opFixedStructSeqReq(T* instance, void (T::*cb)(const std::optional<FixedStructSeq>&, const std::optional<FixedStructSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFixedStructSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opFixedStructList.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStructList.
 */
template<class T>
class CallbackNC_Initial_opFixedStructList : public Callback_Initial_opFixedStructList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<FixedStructList>&, const std::optional<FixedStructList>&);

    CallbackNC_Initial_opFixedStructList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FixedStructList> iceP_p3;
        std::optional<FixedStructList> ret;
        try
        {
            ret = proxy->end_opFixedStructList(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructList.
 */
template<class T> Callback_Initial_opFixedStructListPtr
newCallback_Initial_opFixedStructList(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FixedStructList>&, const std::optional<FixedStructList>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFixedStructList<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructList.
 */
template<class T> Callback_Initial_opFixedStructListPtr
newCallback_Initial_opFixedStructList(T* instance, void (T::*cb)(const std::optional<FixedStructList>&, const std::optional<FixedStructList>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFixedStructList<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opFixedStructList.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStructList.
 */
template<class T, typename CT>
class Callback_Initial_opFixedStructList : public Callback_Initial_opFixedStructList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<FixedStructList>&, const std::optional<FixedStructList>&, const CT&);

    Callback_Initial_opFixedStructList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FixedStructList> iceP_p3;
        std::optional<FixedStructList> ret;
        try
        {
            ret = proxy->end_opFixedStructList(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructList.
 */
template<class T, typename CT> Callback_Initial_opFixedStructListPtr
newCallback_Initial_opFixedStructList(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FixedStructList>&, const std::optional<FixedStructList>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFixedStructList<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructList.
 */
template<class T, typename CT> Callback_Initial_opFixedStructListPtr
newCallback_Initial_opFixedStructList(T* instance, void (T::*cb)(const std::optional<FixedStructList>&, const std::optional<FixedStructList>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFixedStructList<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opFixedStructListReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStructListReq.
 */
template<class T>
class CallbackNC_Initial_opFixedStructListReq : public Callback_Initial_opFixedStructListReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<FixedStructList>&, const std::optional<FixedStructList>&);

    CallbackNC_Initial_opFixedStructListReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FixedStructList> iceP_p3;
        std::optional<FixedStructList> ret;
        try
        {
            ret = proxy->end_opFixedStructListReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructListReq.
 */
template<class T> Callback_Initial_opFixedStructListReqPtr
newCallback_Initial_opFixedStructListReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FixedStructList>&, const std::optional<FixedStructList>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFixedStructListReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructListReq.
 */
template<class T> Callback_Initial_opFixedStructListReqPtr
newCallback_Initial_opFixedStructListReq(T* instance, void (T::*cb)(const std::optional<FixedStructList>&, const std::optional<FixedStructList>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opFixedStructListReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opFixedStructListReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opFixedStructListReq.
 */
template<class T, typename CT>
class Callback_Initial_opFixedStructListReq : public Callback_Initial_opFixedStructListReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<FixedStructList>&, const std::optional<FixedStructList>&, const CT&);

    Callback_Initial_opFixedStructListReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<FixedStructList> iceP_p3;
        std::optional<FixedStructList> ret;
        try
        {
            ret = proxy->end_opFixedStructListReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructListReq.
 */
template<class T, typename CT> Callback_Initial_opFixedStructListReqPtr
newCallback_Initial_opFixedStructListReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<FixedStructList>&, const std::optional<FixedStructList>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFixedStructListReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opFixedStructListReq.
 */
template<class T, typename CT> Callback_Initial_opFixedStructListReqPtr
newCallback_Initial_opFixedStructListReq(T* instance, void (T::*cb)(const std::optional<FixedStructList>&, const std::optional<FixedStructList>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opFixedStructListReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opVarStructSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opVarStructSeq.
 */
template<class T>
class CallbackNC_Initial_opVarStructSeq : public Callback_Initial_opVarStructSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<VarStructSeq>&, const std::optional<VarStructSeq>&);

    CallbackNC_Initial_opVarStructSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<VarStructSeq> iceP_p3;
        std::optional<VarStructSeq> ret;
        try
        {
            ret = proxy->end_opVarStructSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStructSeq.
 */
template<class T> Callback_Initial_opVarStructSeqPtr
newCallback_Initial_opVarStructSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<VarStructSeq>&, const std::optional<VarStructSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opVarStructSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStructSeq.
 */
template<class T> Callback_Initial_opVarStructSeqPtr
newCallback_Initial_opVarStructSeq(T* instance, void (T::*cb)(const std::optional<VarStructSeq>&, const std::optional<VarStructSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opVarStructSeq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opVarStructSeq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opVarStructSeq.
 */
template<class T, typename CT>
class Callback_Initial_opVarStructSeq : public Callback_Initial_opVarStructSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<VarStructSeq>&, const std::optional<VarStructSeq>&, const CT&);

    Callback_Initial_opVarStructSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<VarStructSeq> iceP_p3;
        std::optional<VarStructSeq> ret;
        try
        {
            ret = proxy->end_opVarStructSeq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStructSeq.
 */
template<class T, typename CT> Callback_Initial_opVarStructSeqPtr
newCallback_Initial_opVarStructSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<VarStructSeq>&, const std::optional<VarStructSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opVarStructSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStructSeq.
 */
template<class T, typename CT> Callback_Initial_opVarStructSeqPtr
newCallback_Initial_opVarStructSeq(T* instance, void (T::*cb)(const std::optional<VarStructSeq>&, const std::optional<VarStructSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opVarStructSeq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opVarStructSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opVarStructSeqReq.
 */
template<class T>
class CallbackNC_Initial_opVarStructSeqReq : public Callback_Initial_opVarStructSeqReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<VarStructSeq>&, const std::optional<VarStructSeq>&);

    CallbackNC_Initial_opVarStructSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<VarStructSeq> iceP_p3;
        std::optional<VarStructSeq> ret;
        try
        {
            ret = proxy->end_opVarStructSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStructSeqReq.
 */
template<class T> Callback_Initial_opVarStructSeqReqPtr
newCallback_Initial_opVarStructSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<VarStructSeq>&, const std::optional<VarStructSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opVarStructSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStructSeqReq.
 */
template<class T> Callback_Initial_opVarStructSeqReqPtr
newCallback_Initial_opVarStructSeqReq(T* instance, void (T::*cb)(const std::optional<VarStructSeq>&, const std::optional<VarStructSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opVarStructSeqReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opVarStructSeqReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opVarStructSeqReq.
 */
template<class T, typename CT>
class Callback_Initial_opVarStructSeqReq : public Callback_Initial_opVarStructSeqReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<VarStructSeq>&, const std::optional<VarStructSeq>&, const CT&);

    Callback_Initial_opVarStructSeqReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<VarStructSeq> iceP_p3;
        std::optional<VarStructSeq> ret;
        try
        {
            ret = proxy->end_opVarStructSeqReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStructSeqReq.
 */
template<class T, typename CT> Callback_Initial_opVarStructSeqReqPtr
newCallback_Initial_opVarStructSeqReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<VarStructSeq>&, const std::optional<VarStructSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opVarStructSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVarStructSeqReq.
 */
template<class T, typename CT> Callback_Initial_opVarStructSeqReqPtr
newCallback_Initial_opVarStructSeqReq(T* instance, void (T::*cb)(const std::optional<VarStructSeq>&, const std::optional<VarStructSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opVarStructSeqReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opSerializable.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSerializable.
 */
template<class T>
class CallbackNC_Initial_opSerializable : public Callback_Initial_opSerializable_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<Serializable>&, const std::optional<Serializable>&);

    CallbackNC_Initial_opSerializable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<Serializable> iceP_p3;
        std::optional<Serializable> ret;
        try
        {
            ret = proxy->end_opSerializable(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSerializable.
 */
template<class T> Callback_Initial_opSerializablePtr
newCallback_Initial_opSerializable(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<Serializable>&, const std::optional<Serializable>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSerializable<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSerializable.
 */
template<class T> Callback_Initial_opSerializablePtr
newCallback_Initial_opSerializable(T* instance, void (T::*cb)(const std::optional<Serializable>&, const std::optional<Serializable>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSerializable<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opSerializable.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSerializable.
 */
template<class T, typename CT>
class Callback_Initial_opSerializable : public Callback_Initial_opSerializable_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<Serializable>&, const std::optional<Serializable>&, const CT&);

    Callback_Initial_opSerializable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<Serializable> iceP_p3;
        std::optional<Serializable> ret;
        try
        {
            ret = proxy->end_opSerializable(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSerializable.
 */
template<class T, typename CT> Callback_Initial_opSerializablePtr
newCallback_Initial_opSerializable(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<Serializable>&, const std::optional<Serializable>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSerializable<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSerializable.
 */
template<class T, typename CT> Callback_Initial_opSerializablePtr
newCallback_Initial_opSerializable(T* instance, void (T::*cb)(const std::optional<Serializable>&, const std::optional<Serializable>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSerializable<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opSerializableReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSerializableReq.
 */
template<class T>
class CallbackNC_Initial_opSerializableReq : public Callback_Initial_opSerializableReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<Serializable>&, const std::optional<Serializable>&);

    CallbackNC_Initial_opSerializableReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<Serializable> iceP_p3;
        std::optional<Serializable> ret;
        try
        {
            ret = proxy->end_opSerializableReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSerializableReq.
 */
template<class T> Callback_Initial_opSerializableReqPtr
newCallback_Initial_opSerializableReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<Serializable>&, const std::optional<Serializable>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSerializableReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSerializableReq.
 */
template<class T> Callback_Initial_opSerializableReqPtr
newCallback_Initial_opSerializableReq(T* instance, void (T::*cb)(const std::optional<Serializable>&, const std::optional<Serializable>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opSerializableReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opSerializableReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opSerializableReq.
 */
template<class T, typename CT>
class Callback_Initial_opSerializableReq : public Callback_Initial_opSerializableReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<Serializable>&, const std::optional<Serializable>&, const CT&);

    Callback_Initial_opSerializableReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<Serializable> iceP_p3;
        std::optional<Serializable> ret;
        try
        {
            ret = proxy->end_opSerializableReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSerializableReq.
 */
template<class T, typename CT> Callback_Initial_opSerializableReqPtr
newCallback_Initial_opSerializableReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<Serializable>&, const std::optional<Serializable>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSerializableReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opSerializableReq.
 */
template<class T, typename CT> Callback_Initial_opSerializableReqPtr
newCallback_Initial_opSerializableReq(T* instance, void (T::*cb)(const std::optional<Serializable>&, const std::optional<Serializable>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opSerializableReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opIntIntDict.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntIntDict.
 */
template<class T>
class CallbackNC_Initial_opIntIntDict : public Callback_Initial_opIntIntDict_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<IntIntDict>&, const std::optional<IntIntDict>&);

    CallbackNC_Initial_opIntIntDict(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<IntIntDict> iceP_p3;
        std::optional<IntIntDict> ret;
        try
        {
            ret = proxy->end_opIntIntDict(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntIntDict.
 */
template<class T> Callback_Initial_opIntIntDictPtr
newCallback_Initial_opIntIntDict(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<IntIntDict>&, const std::optional<IntIntDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opIntIntDict<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntIntDict.
 */
template<class T> Callback_Initial_opIntIntDictPtr
newCallback_Initial_opIntIntDict(T* instance, void (T::*cb)(const std::optional<IntIntDict>&, const std::optional<IntIntDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opIntIntDict<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opIntIntDict.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntIntDict.
 */
template<class T, typename CT>
class Callback_Initial_opIntIntDict : public Callback_Initial_opIntIntDict_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<IntIntDict>&, const std::optional<IntIntDict>&, const CT&);

    Callback_Initial_opIntIntDict(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<IntIntDict> iceP_p3;
        std::optional<IntIntDict> ret;
        try
        {
            ret = proxy->end_opIntIntDict(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntIntDict.
 */
template<class T, typename CT> Callback_Initial_opIntIntDictPtr
newCallback_Initial_opIntIntDict(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<IntIntDict>&, const std::optional<IntIntDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opIntIntDict<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntIntDict.
 */
template<class T, typename CT> Callback_Initial_opIntIntDictPtr
newCallback_Initial_opIntIntDict(T* instance, void (T::*cb)(const std::optional<IntIntDict>&, const std::optional<IntIntDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opIntIntDict<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opIntIntDictReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntIntDictReq.
 */
template<class T>
class CallbackNC_Initial_opIntIntDictReq : public Callback_Initial_opIntIntDictReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<IntIntDict>&, const std::optional<IntIntDict>&);

    CallbackNC_Initial_opIntIntDictReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<IntIntDict> iceP_p3;
        std::optional<IntIntDict> ret;
        try
        {
            ret = proxy->end_opIntIntDictReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntIntDictReq.
 */
template<class T> Callback_Initial_opIntIntDictReqPtr
newCallback_Initial_opIntIntDictReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<IntIntDict>&, const std::optional<IntIntDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opIntIntDictReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntIntDictReq.
 */
template<class T> Callback_Initial_opIntIntDictReqPtr
newCallback_Initial_opIntIntDictReq(T* instance, void (T::*cb)(const std::optional<IntIntDict>&, const std::optional<IntIntDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opIntIntDictReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opIntIntDictReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntIntDictReq.
 */
template<class T, typename CT>
class Callback_Initial_opIntIntDictReq : public Callback_Initial_opIntIntDictReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<IntIntDict>&, const std::optional<IntIntDict>&, const CT&);

    Callback_Initial_opIntIntDictReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<IntIntDict> iceP_p3;
        std::optional<IntIntDict> ret;
        try
        {
            ret = proxy->end_opIntIntDictReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntIntDictReq.
 */
template<class T, typename CT> Callback_Initial_opIntIntDictReqPtr
newCallback_Initial_opIntIntDictReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<IntIntDict>&, const std::optional<IntIntDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opIntIntDictReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntIntDictReq.
 */
template<class T, typename CT> Callback_Initial_opIntIntDictReqPtr
newCallback_Initial_opIntIntDictReq(T* instance, void (T::*cb)(const std::optional<IntIntDict>&, const std::optional<IntIntDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opIntIntDictReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opStringIntDict.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opStringIntDict.
 */
template<class T>
class CallbackNC_Initial_opStringIntDict : public Callback_Initial_opStringIntDict_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&);

    CallbackNC_Initial_opStringIntDict(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringIntDict> iceP_p3;
        std::optional<StringIntDict> ret;
        try
        {
            ret = proxy->end_opStringIntDict(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringIntDict.
 */
template<class T> Callback_Initial_opStringIntDictPtr
newCallback_Initial_opStringIntDict(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opStringIntDict<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringIntDict.
 */
template<class T> Callback_Initial_opStringIntDictPtr
newCallback_Initial_opStringIntDict(T* instance, void (T::*cb)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opStringIntDict<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opStringIntDict.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opStringIntDict.
 */
template<class T, typename CT>
class Callback_Initial_opStringIntDict : public Callback_Initial_opStringIntDict_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&, const CT&);

    Callback_Initial_opStringIntDict(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringIntDict> iceP_p3;
        std::optional<StringIntDict> ret;
        try
        {
            ret = proxy->end_opStringIntDict(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringIntDict.
 */
template<class T, typename CT> Callback_Initial_opStringIntDictPtr
newCallback_Initial_opStringIntDict(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opStringIntDict<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringIntDict.
 */
template<class T, typename CT> Callback_Initial_opStringIntDictPtr
newCallback_Initial_opStringIntDict(T* instance, void (T::*cb)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opStringIntDict<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opStringIntDictReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opStringIntDictReq.
 */
template<class T>
class CallbackNC_Initial_opStringIntDictReq : public Callback_Initial_opStringIntDictReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&);

    CallbackNC_Initial_opStringIntDictReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringIntDict> iceP_p3;
        std::optional<StringIntDict> ret;
        try
        {
            ret = proxy->end_opStringIntDictReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringIntDictReq.
 */
template<class T> Callback_Initial_opStringIntDictReqPtr
newCallback_Initial_opStringIntDictReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opStringIntDictReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringIntDictReq.
 */
template<class T> Callback_Initial_opStringIntDictReqPtr
newCallback_Initial_opStringIntDictReq(T* instance, void (T::*cb)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opStringIntDictReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opStringIntDictReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opStringIntDictReq.
 */
template<class T, typename CT>
class Callback_Initial_opStringIntDictReq : public Callback_Initial_opStringIntDictReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&, const CT&);

    Callback_Initial_opStringIntDictReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringIntDict> iceP_p3;
        std::optional<StringIntDict> ret;
        try
        {
            ret = proxy->end_opStringIntDictReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringIntDictReq.
 */
template<class T, typename CT> Callback_Initial_opStringIntDictReqPtr
newCallback_Initial_opStringIntDictReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opStringIntDictReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opStringIntDictReq.
 */
template<class T, typename CT> Callback_Initial_opStringIntDictReqPtr
newCallback_Initial_opStringIntDictReq(T* instance, void (T::*cb)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opStringIntDictReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opIntOneOptionalDict.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntOneOptionalDict.
 */
template<class T>
class CallbackNC_Initial_opIntOneOptionalDict : public Callback_Initial_opIntOneOptionalDict_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<IntOneOptionalDict>&, const std::optional<IntOneOptionalDict>&);

    CallbackNC_Initial_opIntOneOptionalDict(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<IntOneOptionalDict> iceP_p3;
        std::optional<IntOneOptionalDict> ret;
        try
        {
            ret = proxy->end_opIntOneOptionalDict(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntOneOptionalDict.
 */
template<class T> Callback_Initial_opIntOneOptionalDictPtr
newCallback_Initial_opIntOneOptionalDict(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<IntOneOptionalDict>&, const std::optional<IntOneOptionalDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opIntOneOptionalDict<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntOneOptionalDict.
 */
template<class T> Callback_Initial_opIntOneOptionalDictPtr
newCallback_Initial_opIntOneOptionalDict(T* instance, void (T::*cb)(const std::optional<IntOneOptionalDict>&, const std::optional<IntOneOptionalDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opIntOneOptionalDict<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opIntOneOptionalDict.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntOneOptionalDict.
 */
template<class T, typename CT>
class Callback_Initial_opIntOneOptionalDict : public Callback_Initial_opIntOneOptionalDict_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<IntOneOptionalDict>&, const std::optional<IntOneOptionalDict>&, const CT&);

    Callback_Initial_opIntOneOptionalDict(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<IntOneOptionalDict> iceP_p3;
        std::optional<IntOneOptionalDict> ret;
        try
        {
            ret = proxy->end_opIntOneOptionalDict(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntOneOptionalDict.
 */
template<class T, typename CT> Callback_Initial_opIntOneOptionalDictPtr
newCallback_Initial_opIntOneOptionalDict(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<IntOneOptionalDict>&, const std::optional<IntOneOptionalDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opIntOneOptionalDict<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntOneOptionalDict.
 */
template<class T, typename CT> Callback_Initial_opIntOneOptionalDictPtr
newCallback_Initial_opIntOneOptionalDict(T* instance, void (T::*cb)(const std::optional<IntOneOptionalDict>&, const std::optional<IntOneOptionalDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opIntOneOptionalDict<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opIntOneOptionalDictReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntOneOptionalDictReq.
 */
template<class T>
class CallbackNC_Initial_opIntOneOptionalDictReq : public Callback_Initial_opIntOneOptionalDictReq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<IntOneOptionalDict>&, const std::optional<IntOneOptionalDict>&);

    CallbackNC_Initial_opIntOneOptionalDictReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<IntOneOptionalDict> iceP_p3;
        std::optional<IntOneOptionalDict> ret;
        try
        {
            ret = proxy->end_opIntOneOptionalDictReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p3);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntOneOptionalDictReq.
 */
template<class T> Callback_Initial_opIntOneOptionalDictReqPtr
newCallback_Initial_opIntOneOptionalDictReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<IntOneOptionalDict>&, const std::optional<IntOneOptionalDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opIntOneOptionalDictReq<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntOneOptionalDictReq.
 */
template<class T> Callback_Initial_opIntOneOptionalDictReqPtr
newCallback_Initial_opIntOneOptionalDictReq(T* instance, void (T::*cb)(const std::optional<IntOneOptionalDict>&, const std::optional<IntOneOptionalDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opIntOneOptionalDictReq<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opIntOneOptionalDictReq.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opIntOneOptionalDictReq.
 */
template<class T, typename CT>
class Callback_Initial_opIntOneOptionalDictReq : public Callback_Initial_opIntOneOptionalDictReq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<IntOneOptionalDict>&, const std::optional<IntOneOptionalDict>&, const CT&);

    Callback_Initial_opIntOneOptionalDictReq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<IntOneOptionalDict> iceP_p3;
        std::optional<IntOneOptionalDict> ret;
        try
        {
            ret = proxy->end_opIntOneOptionalDictReq(iceP_p3, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p3, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntOneOptionalDictReq.
 */
template<class T, typename CT> Callback_Initial_opIntOneOptionalDictReqPtr
newCallback_Initial_opIntOneOptionalDictReq(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<IntOneOptionalDict>&, const std::optional<IntOneOptionalDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opIntOneOptionalDictReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opIntOneOptionalDictReq.
 */
template<class T, typename CT> Callback_Initial_opIntOneOptionalDictReqPtr
newCallback_Initial_opIntOneOptionalDictReq(T* instance, void (T::*cb)(const std::optional<IntOneOptionalDict>&, const std::optional<IntOneOptionalDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opIntOneOptionalDictReq<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opClassAndUnknownOptional.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opClassAndUnknownOptional.
 */
template<class T>
class CallbackNC_Initial_opClassAndUnknownOptional : public Callback_Initial_opClassAndUnknownOptional_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_opClassAndUnknownOptional(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opClassAndUnknownOptional.
 */
template<class T> Callback_Initial_opClassAndUnknownOptionalPtr
newCallback_Initial_opClassAndUnknownOptional(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opClassAndUnknownOptional<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opClassAndUnknownOptional.
 */
template<class T> Callback_Initial_opClassAndUnknownOptionalPtr
newCallback_Initial_opClassAndUnknownOptional(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opClassAndUnknownOptional<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opClassAndUnknownOptional.
 */
template<class T> Callback_Initial_opClassAndUnknownOptionalPtr
newCallback_Initial_opClassAndUnknownOptional(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opClassAndUnknownOptional<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opClassAndUnknownOptional.
 */
template<class T> Callback_Initial_opClassAndUnknownOptionalPtr
newCallback_Initial_opClassAndUnknownOptional(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opClassAndUnknownOptional<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opClassAndUnknownOptional.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opClassAndUnknownOptional.
 */
template<class T, typename CT>
class Callback_Initial_opClassAndUnknownOptional : public Callback_Initial_opClassAndUnknownOptional_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_opClassAndUnknownOptional(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opClassAndUnknownOptional.
 */
template<class T, typename CT> Callback_Initial_opClassAndUnknownOptionalPtr
newCallback_Initial_opClassAndUnknownOptional(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opClassAndUnknownOptional<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opClassAndUnknownOptional.
 */
template<class T, typename CT> Callback_Initial_opClassAndUnknownOptionalPtr
newCallback_Initial_opClassAndUnknownOptional(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opClassAndUnknownOptional<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opClassAndUnknownOptional.
 */
template<class T, typename CT> Callback_Initial_opClassAndUnknownOptionalPtr
newCallback_Initial_opClassAndUnknownOptional(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opClassAndUnknownOptional<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opClassAndUnknownOptional.
 */
template<class T, typename CT> Callback_Initial_opClassAndUnknownOptionalPtr
newCallback_Initial_opClassAndUnknownOptional(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opClassAndUnknownOptional<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_sendOptionalClass.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_sendOptionalClass.
 */
template<class T>
class CallbackNC_Initial_sendOptionalClass : public Callback_Initial_sendOptionalClass_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_sendOptionalClass(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_sendOptionalClass.
 */
template<class T> Callback_Initial_sendOptionalClassPtr
newCallback_Initial_sendOptionalClass(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_sendOptionalClass<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_sendOptionalClass.
 */
template<class T> Callback_Initial_sendOptionalClassPtr
newCallback_Initial_sendOptionalClass(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_sendOptionalClass<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_sendOptionalClass.
 */
template<class T> Callback_Initial_sendOptionalClassPtr
newCallback_Initial_sendOptionalClass(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_sendOptionalClass<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_sendOptionalClass.
 */
template<class T> Callback_Initial_sendOptionalClassPtr
newCallback_Initial_sendOptionalClass(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_sendOptionalClass<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_sendOptionalClass.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_sendOptionalClass.
 */
template<class T, typename CT>
class Callback_Initial_sendOptionalClass : public Callback_Initial_sendOptionalClass_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_sendOptionalClass(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_sendOptionalClass.
 */
template<class T, typename CT> Callback_Initial_sendOptionalClassPtr
newCallback_Initial_sendOptionalClass(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_sendOptionalClass<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_sendOptionalClass.
 */
template<class T, typename CT> Callback_Initial_sendOptionalClassPtr
newCallback_Initial_sendOptionalClass(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_sendOptionalClass<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_sendOptionalClass.
 */
template<class T, typename CT> Callback_Initial_sendOptionalClassPtr
newCallback_Initial_sendOptionalClass(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_sendOptionalClass<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_sendOptionalClass.
 */
template<class T, typename CT> Callback_Initial_sendOptionalClassPtr
newCallback_Initial_sendOptionalClass(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_sendOptionalClass<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_returnOptionalClass.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_returnOptionalClass.
 */
template<class T>
class CallbackNC_Initial_returnOptionalClass : public Callback_Initial_returnOptionalClass_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<OneOptionalPtr>&);

    CallbackNC_Initial_returnOptionalClass(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<OneOptionalPtr> iceP_o;
        try
        {
            proxy->end_returnOptionalClass(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_o);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_returnOptionalClass.
 */
template<class T> Callback_Initial_returnOptionalClassPtr
newCallback_Initial_returnOptionalClass(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<OneOptionalPtr>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_returnOptionalClass<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_returnOptionalClass.
 */
template<class T> Callback_Initial_returnOptionalClassPtr
newCallback_Initial_returnOptionalClass(T* instance, void (T::*cb)(const std::optional<OneOptionalPtr>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_returnOptionalClass<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_returnOptionalClass.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_returnOptionalClass.
 */
template<class T, typename CT>
class Callback_Initial_returnOptionalClass : public Callback_Initial_returnOptionalClass_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<OneOptionalPtr>&, const CT&);

    Callback_Initial_returnOptionalClass(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<OneOptionalPtr> iceP_o;
        try
        {
            proxy->end_returnOptionalClass(iceP_o, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_o, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_returnOptionalClass.
 */
template<class T, typename CT> Callback_Initial_returnOptionalClassPtr
newCallback_Initial_returnOptionalClass(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<OneOptionalPtr>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_returnOptionalClass<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_returnOptionalClass.
 */
template<class T, typename CT> Callback_Initial_returnOptionalClassPtr
newCallback_Initial_returnOptionalClass(T* instance, void (T::*cb)(const std::optional<OneOptionalPtr>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_returnOptionalClass<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opG.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opG.
 */
template<class T>
class CallbackNC_Initial_opG : public Callback_Initial_opG_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const GPtr&);

    CallbackNC_Initial_opG(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        GPtr ret;
        try
        {
            ret = proxy->end_opG(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opG.
 */
template<class T> Callback_Initial_opGPtr
newCallback_Initial_opG(const IceUtil::Handle<T>& instance, void (T::*cb)(const GPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opG<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opG.
 */
template<class T> Callback_Initial_opGPtr
newCallback_Initial_opG(T* instance, void (T::*cb)(const GPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opG<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opG.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opG.
 */
template<class T, typename CT>
class Callback_Initial_opG : public Callback_Initial_opG_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const GPtr&, const CT&);

    Callback_Initial_opG(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        GPtr ret;
        try
        {
            ret = proxy->end_opG(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opG.
 */
template<class T, typename CT> Callback_Initial_opGPtr
newCallback_Initial_opG(const IceUtil::Handle<T>& instance, void (T::*cb)(const GPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opG<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opG.
 */
template<class T, typename CT> Callback_Initial_opGPtr
newCallback_Initial_opG(T* instance, void (T::*cb)(const GPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opG<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opVoid.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opVoid.
 */
template<class T>
class CallbackNC_Initial_opVoid : public Callback_Initial_opVoid_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Initial_opVoid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVoid.
 */
template<class T> Callback_Initial_opVoidPtr
newCallback_Initial_opVoid(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opVoid<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVoid.
 */
template<class T> Callback_Initial_opVoidPtr
newCallback_Initial_opVoid(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opVoid<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVoid.
 */
template<class T> Callback_Initial_opVoidPtr
newCallback_Initial_opVoid(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opVoid<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVoid.
 */
template<class T> Callback_Initial_opVoidPtr
newCallback_Initial_opVoid(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opVoid<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opVoid.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opVoid.
 */
template<class T, typename CT>
class Callback_Initial_opVoid : public Callback_Initial_opVoid_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Initial_opVoid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVoid.
 */
template<class T, typename CT> Callback_Initial_opVoidPtr
newCallback_Initial_opVoid(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opVoid<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVoid.
 */
template<class T, typename CT> Callback_Initial_opVoidPtr
newCallback_Initial_opVoid(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opVoid<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVoid.
 */
template<class T, typename CT> Callback_Initial_opVoidPtr
newCallback_Initial_opVoid(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opVoid<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opVoid.
 */
template<class T, typename CT> Callback_Initial_opVoidPtr
newCallback_Initial_opVoid(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opVoid<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opMStruct1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMStruct1.
 */
template<class T>
class CallbackNC_Initial_opMStruct1 : public Callback_Initial_opMStruct1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<SmallStruct>&);

    CallbackNC_Initial_opMStruct1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStruct> ret;
        try
        {
            ret = proxy->end_opMStruct1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMStruct1.
 */
template<class T> Callback_Initial_opMStruct1Ptr
newCallback_Initial_opMStruct1(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMStruct1<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMStruct1.
 */
template<class T> Callback_Initial_opMStruct1Ptr
newCallback_Initial_opMStruct1(T* instance, void (T::*cb)(const std::optional<SmallStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMStruct1<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opMStruct1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMStruct1.
 */
template<class T, typename CT>
class Callback_Initial_opMStruct1 : public Callback_Initial_opMStruct1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<SmallStruct>&, const CT&);

    Callback_Initial_opMStruct1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStruct> ret;
        try
        {
            ret = proxy->end_opMStruct1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMStruct1.
 */
template<class T, typename CT> Callback_Initial_opMStruct1Ptr
newCallback_Initial_opMStruct1(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMStruct1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMStruct1.
 */
template<class T, typename CT> Callback_Initial_opMStruct1Ptr
newCallback_Initial_opMStruct1(T* instance, void (T::*cb)(const std::optional<SmallStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMStruct1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opMStruct2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMStruct2.
 */
template<class T>
class CallbackNC_Initial_opMStruct2 : public Callback_Initial_opMStruct2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&);

    CallbackNC_Initial_opMStruct2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStruct> iceP_p2;
        std::optional<SmallStruct> ret;
        try
        {
            ret = proxy->end_opMStruct2(iceP_p2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMStruct2.
 */
template<class T> Callback_Initial_opMStruct2Ptr
newCallback_Initial_opMStruct2(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMStruct2<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMStruct2.
 */
template<class T> Callback_Initial_opMStruct2Ptr
newCallback_Initial_opMStruct2(T* instance, void (T::*cb)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMStruct2<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opMStruct2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMStruct2.
 */
template<class T, typename CT>
class Callback_Initial_opMStruct2 : public Callback_Initial_opMStruct2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&, const CT&);

    Callback_Initial_opMStruct2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<SmallStruct> iceP_p2;
        std::optional<SmallStruct> ret;
        try
        {
            ret = proxy->end_opMStruct2(iceP_p2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMStruct2.
 */
template<class T, typename CT> Callback_Initial_opMStruct2Ptr
newCallback_Initial_opMStruct2(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMStruct2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMStruct2.
 */
template<class T, typename CT> Callback_Initial_opMStruct2Ptr
newCallback_Initial_opMStruct2(T* instance, void (T::*cb)(const std::optional<SmallStruct>&, const std::optional<SmallStruct>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMStruct2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opMSeq1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMSeq1.
 */
template<class T>
class CallbackNC_Initial_opMSeq1 : public Callback_Initial_opMSeq1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<StringSeq>&);

    CallbackNC_Initial_opMSeq1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringSeq> ret;
        try
        {
            ret = proxy->end_opMSeq1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMSeq1.
 */
template<class T> Callback_Initial_opMSeq1Ptr
newCallback_Initial_opMSeq1(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMSeq1<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMSeq1.
 */
template<class T> Callback_Initial_opMSeq1Ptr
newCallback_Initial_opMSeq1(T* instance, void (T::*cb)(const std::optional<StringSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMSeq1<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opMSeq1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMSeq1.
 */
template<class T, typename CT>
class Callback_Initial_opMSeq1 : public Callback_Initial_opMSeq1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<StringSeq>&, const CT&);

    Callback_Initial_opMSeq1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringSeq> ret;
        try
        {
            ret = proxy->end_opMSeq1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMSeq1.
 */
template<class T, typename CT> Callback_Initial_opMSeq1Ptr
newCallback_Initial_opMSeq1(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMSeq1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMSeq1.
 */
template<class T, typename CT> Callback_Initial_opMSeq1Ptr
newCallback_Initial_opMSeq1(T* instance, void (T::*cb)(const std::optional<StringSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMSeq1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opMSeq2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMSeq2.
 */
template<class T>
class CallbackNC_Initial_opMSeq2 : public Callback_Initial_opMSeq2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<StringSeq>&, const std::optional<StringSeq>&);

    CallbackNC_Initial_opMSeq2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringSeq> iceP_p2;
        std::optional<StringSeq> ret;
        try
        {
            ret = proxy->end_opMSeq2(iceP_p2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMSeq2.
 */
template<class T> Callback_Initial_opMSeq2Ptr
newCallback_Initial_opMSeq2(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringSeq>&, const std::optional<StringSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMSeq2<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMSeq2.
 */
template<class T> Callback_Initial_opMSeq2Ptr
newCallback_Initial_opMSeq2(T* instance, void (T::*cb)(const std::optional<StringSeq>&, const std::optional<StringSeq>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMSeq2<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opMSeq2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMSeq2.
 */
template<class T, typename CT>
class Callback_Initial_opMSeq2 : public Callback_Initial_opMSeq2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<StringSeq>&, const std::optional<StringSeq>&, const CT&);

    Callback_Initial_opMSeq2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringSeq> iceP_p2;
        std::optional<StringSeq> ret;
        try
        {
            ret = proxy->end_opMSeq2(iceP_p2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMSeq2.
 */
template<class T, typename CT> Callback_Initial_opMSeq2Ptr
newCallback_Initial_opMSeq2(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringSeq>&, const std::optional<StringSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMSeq2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMSeq2.
 */
template<class T, typename CT> Callback_Initial_opMSeq2Ptr
newCallback_Initial_opMSeq2(T* instance, void (T::*cb)(const std::optional<StringSeq>&, const std::optional<StringSeq>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMSeq2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opMDict1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMDict1.
 */
template<class T>
class CallbackNC_Initial_opMDict1 : public Callback_Initial_opMDict1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<StringIntDict>&);

    CallbackNC_Initial_opMDict1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringIntDict> ret;
        try
        {
            ret = proxy->end_opMDict1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMDict1.
 */
template<class T> Callback_Initial_opMDict1Ptr
newCallback_Initial_opMDict1(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringIntDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMDict1<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMDict1.
 */
template<class T> Callback_Initial_opMDict1Ptr
newCallback_Initial_opMDict1(T* instance, void (T::*cb)(const std::optional<StringIntDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMDict1<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opMDict1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMDict1.
 */
template<class T, typename CT>
class Callback_Initial_opMDict1 : public Callback_Initial_opMDict1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<StringIntDict>&, const CT&);

    Callback_Initial_opMDict1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringIntDict> ret;
        try
        {
            ret = proxy->end_opMDict1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMDict1.
 */
template<class T, typename CT> Callback_Initial_opMDict1Ptr
newCallback_Initial_opMDict1(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringIntDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMDict1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMDict1.
 */
template<class T, typename CT> Callback_Initial_opMDict1Ptr
newCallback_Initial_opMDict1(T* instance, void (T::*cb)(const std::optional<StringIntDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMDict1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opMDict2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMDict2.
 */
template<class T>
class CallbackNC_Initial_opMDict2 : public Callback_Initial_opMDict2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&);

    CallbackNC_Initial_opMDict2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringIntDict> iceP_p2;
        std::optional<StringIntDict> ret;
        try
        {
            ret = proxy->end_opMDict2(iceP_p2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMDict2.
 */
template<class T> Callback_Initial_opMDict2Ptr
newCallback_Initial_opMDict2(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMDict2<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMDict2.
 */
template<class T> Callback_Initial_opMDict2Ptr
newCallback_Initial_opMDict2(T* instance, void (T::*cb)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMDict2<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opMDict2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMDict2.
 */
template<class T, typename CT>
class Callback_Initial_opMDict2 : public Callback_Initial_opMDict2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&, const CT&);

    Callback_Initial_opMDict2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<StringIntDict> iceP_p2;
        std::optional<StringIntDict> ret;
        try
        {
            ret = proxy->end_opMDict2(iceP_p2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMDict2.
 */
template<class T, typename CT> Callback_Initial_opMDict2Ptr
newCallback_Initial_opMDict2(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMDict2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMDict2.
 */
template<class T, typename CT> Callback_Initial_opMDict2Ptr
newCallback_Initial_opMDict2(T* instance, void (T::*cb)(const std::optional<StringIntDict>&, const std::optional<StringIntDict>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMDict2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opMG1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMG1.
 */
template<class T>
class CallbackNC_Initial_opMG1 : public Callback_Initial_opMG1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<GPtr>&);

    CallbackNC_Initial_opMG1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<GPtr> ret;
        try
        {
            ret = proxy->end_opMG1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMG1.
 */
template<class T> Callback_Initial_opMG1Ptr
newCallback_Initial_opMG1(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<GPtr>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMG1<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMG1.
 */
template<class T> Callback_Initial_opMG1Ptr
newCallback_Initial_opMG1(T* instance, void (T::*cb)(const std::optional<GPtr>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMG1<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opMG1.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMG1.
 */
template<class T, typename CT>
class Callback_Initial_opMG1 : public Callback_Initial_opMG1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<GPtr>&, const CT&);

    Callback_Initial_opMG1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<GPtr> ret;
        try
        {
            ret = proxy->end_opMG1(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMG1.
 */
template<class T, typename CT> Callback_Initial_opMG1Ptr
newCallback_Initial_opMG1(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<GPtr>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMG1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMG1.
 */
template<class T, typename CT> Callback_Initial_opMG1Ptr
newCallback_Initial_opMG1(T* instance, void (T::*cb)(const std::optional<GPtr>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMG1<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_opMG2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMG2.
 */
template<class T>
class CallbackNC_Initial_opMG2 : public Callback_Initial_opMG2_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const std::optional<GPtr>&, const std::optional<GPtr>&);

    CallbackNC_Initial_opMG2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<GPtr> iceP_p2;
        std::optional<GPtr> ret;
        try
        {
            ret = proxy->end_opMG2(iceP_p2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_p2);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMG2.
 */
template<class T> Callback_Initial_opMG2Ptr
newCallback_Initial_opMG2(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<GPtr>&, const std::optional<GPtr>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMG2<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMG2.
 */
template<class T> Callback_Initial_opMG2Ptr
newCallback_Initial_opMG2(T* instance, void (T::*cb)(const std::optional<GPtr>&, const std::optional<GPtr>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_opMG2<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_opMG2.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_opMG2.
 */
template<class T, typename CT>
class Callback_Initial_opMG2 : public Callback_Initial_opMG2_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const std::optional<GPtr>&, const std::optional<GPtr>&, const CT&);

    Callback_Initial_opMG2(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        std::optional<GPtr> iceP_p2;
        std::optional<GPtr> ret;
        try
        {
            ret = proxy->end_opMG2(iceP_p2, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_p2, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMG2.
 */
template<class T, typename CT> Callback_Initial_opMG2Ptr
newCallback_Initial_opMG2(const IceUtil::Handle<T>& instance, void (T::*cb)(const std::optional<GPtr>&, const std::optional<GPtr>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMG2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_opMG2.
 */
template<class T, typename CT> Callback_Initial_opMG2Ptr
newCallback_Initial_opMG2(T* instance, void (T::*cb)(const std::optional<GPtr>&, const std::optional<GPtr>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_opMG2<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_supportsRequiredParams.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_supportsRequiredParams.
 */
template<class T>
class CallbackNC_Initial_supportsRequiredParams : public Callback_Initial_supportsRequiredParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Initial_supportsRequiredParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_supportsRequiredParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsRequiredParams.
 */
template<class T> Callback_Initial_supportsRequiredParamsPtr
newCallback_Initial_supportsRequiredParams(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_supportsRequiredParams<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsRequiredParams.
 */
template<class T> Callback_Initial_supportsRequiredParamsPtr
newCallback_Initial_supportsRequiredParams(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_supportsRequiredParams<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_supportsRequiredParams.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_supportsRequiredParams.
 */
template<class T, typename CT>
class Callback_Initial_supportsRequiredParams : public Callback_Initial_supportsRequiredParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Initial_supportsRequiredParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_supportsRequiredParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsRequiredParams.
 */
template<class T, typename CT> Callback_Initial_supportsRequiredParamsPtr
newCallback_Initial_supportsRequiredParams(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_supportsRequiredParams<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsRequiredParams.
 */
template<class T, typename CT> Callback_Initial_supportsRequiredParamsPtr
newCallback_Initial_supportsRequiredParams(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_supportsRequiredParams<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_supportsJavaSerializable.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_supportsJavaSerializable.
 */
template<class T>
class CallbackNC_Initial_supportsJavaSerializable : public Callback_Initial_supportsJavaSerializable_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Initial_supportsJavaSerializable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_supportsJavaSerializable(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsJavaSerializable.
 */
template<class T> Callback_Initial_supportsJavaSerializablePtr
newCallback_Initial_supportsJavaSerializable(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_supportsJavaSerializable<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsJavaSerializable.
 */
template<class T> Callback_Initial_supportsJavaSerializablePtr
newCallback_Initial_supportsJavaSerializable(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_supportsJavaSerializable<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_supportsJavaSerializable.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_supportsJavaSerializable.
 */
template<class T, typename CT>
class Callback_Initial_supportsJavaSerializable : public Callback_Initial_supportsJavaSerializable_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Initial_supportsJavaSerializable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_supportsJavaSerializable(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsJavaSerializable.
 */
template<class T, typename CT> Callback_Initial_supportsJavaSerializablePtr
newCallback_Initial_supportsJavaSerializable(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_supportsJavaSerializable<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsJavaSerializable.
 */
template<class T, typename CT> Callback_Initial_supportsJavaSerializablePtr
newCallback_Initial_supportsJavaSerializable(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_supportsJavaSerializable<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_supportsCsharpSerializable.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_supportsCsharpSerializable.
 */
template<class T>
class CallbackNC_Initial_supportsCsharpSerializable : public Callback_Initial_supportsCsharpSerializable_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Initial_supportsCsharpSerializable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_supportsCsharpSerializable(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsCsharpSerializable.
 */
template<class T> Callback_Initial_supportsCsharpSerializablePtr
newCallback_Initial_supportsCsharpSerializable(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_supportsCsharpSerializable<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsCsharpSerializable.
 */
template<class T> Callback_Initial_supportsCsharpSerializablePtr
newCallback_Initial_supportsCsharpSerializable(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_supportsCsharpSerializable<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_supportsCsharpSerializable.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_supportsCsharpSerializable.
 */
template<class T, typename CT>
class Callback_Initial_supportsCsharpSerializable : public Callback_Initial_supportsCsharpSerializable_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Initial_supportsCsharpSerializable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_supportsCsharpSerializable(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsCsharpSerializable.
 */
template<class T, typename CT> Callback_Initial_supportsCsharpSerializablePtr
newCallback_Initial_supportsCsharpSerializable(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_supportsCsharpSerializable<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsCsharpSerializable.
 */
template<class T, typename CT> Callback_Initial_supportsCsharpSerializablePtr
newCallback_Initial_supportsCsharpSerializable(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_supportsCsharpSerializable<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_supportsCppStringView.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_supportsCppStringView.
 */
template<class T>
class CallbackNC_Initial_supportsCppStringView : public Callback_Initial_supportsCppStringView_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Initial_supportsCppStringView(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_supportsCppStringView(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsCppStringView.
 */
template<class T> Callback_Initial_supportsCppStringViewPtr
newCallback_Initial_supportsCppStringView(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_supportsCppStringView<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsCppStringView.
 */
template<class T> Callback_Initial_supportsCppStringViewPtr
newCallback_Initial_supportsCppStringView(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_supportsCppStringView<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_supportsCppStringView.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_supportsCppStringView.
 */
template<class T, typename CT>
class Callback_Initial_supportsCppStringView : public Callback_Initial_supportsCppStringView_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Initial_supportsCppStringView(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_supportsCppStringView(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsCppStringView.
 */
template<class T, typename CT> Callback_Initial_supportsCppStringViewPtr
newCallback_Initial_supportsCppStringView(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_supportsCppStringView<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsCppStringView.
 */
template<class T, typename CT> Callback_Initial_supportsCppStringViewPtr
newCallback_Initial_supportsCppStringView(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_supportsCppStringView<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Test::Initial::begin_supportsNullOptional.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_supportsNullOptional.
 */
template<class T>
class CallbackNC_Initial_supportsNullOptional : public Callback_Initial_supportsNullOptional_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Initial_supportsNullOptional(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_supportsNullOptional(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsNullOptional.
 */
template<class T> Callback_Initial_supportsNullOptionalPtr
newCallback_Initial_supportsNullOptional(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_supportsNullOptional<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsNullOptional.
 */
template<class T> Callback_Initial_supportsNullOptionalPtr
newCallback_Initial_supportsNullOptional(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Initial_supportsNullOptional<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Test::Initial::begin_supportsNullOptional.
 * Create a wrapper instance by calling ::Test::newCallback_Initial_supportsNullOptional.
 */
template<class T, typename CT>
class Callback_Initial_supportsNullOptional : public Callback_Initial_supportsNullOptional_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Initial_supportsNullOptional(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InitialPrx proxy = InitialPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_supportsNullOptional(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsNullOptional.
 */
template<class T, typename CT> Callback_Initial_supportsNullOptionalPtr
newCallback_Initial_supportsNullOptional(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_supportsNullOptional<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Test::Initial::begin_supportsNullOptional.
 */
template<class T, typename CT> Callback_Initial_supportsNullOptionalPtr
newCallback_Initial_supportsNullOptional(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Initial_supportsNullOptional<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
