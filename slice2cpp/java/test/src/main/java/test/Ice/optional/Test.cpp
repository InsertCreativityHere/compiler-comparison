// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

std::ostream&
Test::operator<<(std::ostream& os, MyEnum value)
{
    switch (value)
    {
        case MyEnum::MyEnumMember:
            return os << "MyEnumMember";
        default:
            return os << static_cast<std::int32_t>(value);
    }
}

namespace
{
    const IceInternal::FactoryTableInit iceC_factoryTableInit;
    const IceInternal::DefaultValueFactoryInit<::Test::OneOptional> iceC_Test_OneOptional_init("::Test::OneOptional");
    const IceInternal::DefaultValueFactoryInit<::Test::MultiOptional> iceC_Test_MultiOptional_init("::Test::MultiOptional");
    const IceInternal::DefaultValueFactoryInit<::Test::A> iceC_Test_A_init("::Test::A");
    const IceInternal::DefaultValueFactoryInit<::Test::B> iceC_Test_B_init("::Test::B");
    const IceInternal::DefaultValueFactoryInit<::Test::C> iceC_Test_C_init("::Test::C");
    const IceInternal::DefaultValueFactoryInit<::Test::WD> iceC_Test_WD_init("::Test::WD");
    const IceInternal::DefaultUserExceptionFactoryInit<::Test::OptionalException> iceC_Test_OptionalException_init("::Test::OptionalException");
    const IceInternal::DefaultUserExceptionFactoryInit<::Test::DerivedException> iceC_Test_DerivedException_init("::Test::DerivedException");
    const IceInternal::DefaultUserExceptionFactoryInit<::Test::RequiredException> iceC_Test_RequiredException_init("::Test::RequiredException");
    const IceInternal::DefaultValueFactoryInit<::Test::OptionalWithCustom> iceC_Test_OptionalWithCustom_init("::Test::OptionalWithCustom");
    const IceInternal::DefaultValueFactoryInit<::Test::E> iceC_Test_E_init("::Test::E");
    const IceInternal::DefaultValueFactoryInit<::Test::F> iceC_Test_F_init("::Test::F");
    const IceInternal::DefaultValueFactoryInit<::Test::G> iceC_Test_G_init("::Test::G");
}

void
Test::MyInterfacePrx::op(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &MyInterfacePrx::_iceI_op, context).get();
}

std::future<void>
Test::MyInterfacePrx::opAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &MyInterfacePrx::_iceI_op, context);
}

std::function<void()>
Test::MyInterfacePrx::opAsync(std::function<void()> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::MyInterfacePrx::_iceI_op, context);
}

void
Test::MyInterfacePrx::_iceI_op(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "op";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

Test::MyInterfacePrx::~MyInterfacePrx() = default;

const char*
Test::MyInterfacePrx::ice_staticId() noexcept
{
    return "::Test::MyInterface";
}

void
Test::InitialPrx::shutdown(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_shutdown, context).get();
}

std::future<void>
Test::InitialPrx::shutdownAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_shutdown, context);
}

std::function<void()>
Test::InitialPrx::shutdownAsync(std::function<void()> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_shutdown, context);
}

void
Test::InitialPrx::_iceI_shutdown(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

Ice::ValuePtr
Test::InitialPrx::pingPong(const Ice::ValuePtr& iceP_o, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<Ice::ValuePtr>(true, this, &InitialPrx::_iceI_pingPong, iceP_o, context).get();
}

std::future<Ice::ValuePtr>
Test::InitialPrx::pingPongAsync(const Ice::ValuePtr& iceP_o, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<Ice::ValuePtr>(false, this, &InitialPrx::_iceI_pingPong, iceP_o, context);
}

std::function<void()>
Test::InitialPrx::pingPongAsync(const Ice::ValuePtr& iceP_o, std::function<void(Ice::ValuePtr)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<Ice::ValuePtr>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_pingPong, iceP_o, context);
}

void
Test::InitialPrx::_iceI_pingPong(const std::shared_ptr<IceInternal::OutgoingAsyncT<Ice::ValuePtr>>& outAsync, const Ice::ValuePtr& iceP_o, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "pingPong";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_o);
            ostr->writePendingValues();
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            Ice::ValuePtr ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

void
Test::InitialPrx::opOptionalException(std::optional<std::int32_t> iceP_a, std::optional<std::string_view> iceP_b, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_opOptionalException, iceP_a, iceP_b, context).get();
}

std::future<void>
Test::InitialPrx::opOptionalExceptionAsync(std::optional<std::int32_t> iceP_a, std::optional<std::string_view> iceP_b, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_opOptionalException, iceP_a, iceP_b, context);
}

std::function<void()>
Test::InitialPrx::opOptionalExceptionAsync(std::optional<std::int32_t> iceP_a, std::optional<std::string_view> iceP_b, std::function<void()> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opOptionalException, iceP_a, iceP_b, context);
}

void
Test::InitialPrx::_iceI_opOptionalException(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, std::optional<std::int32_t> iceP_a, std::optional<std::string_view> iceP_b, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opOptionalException";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2}, iceP_a, iceP_b);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const OptionalException&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

void
Test::InitialPrx::opDerivedException(std::optional<std::int32_t> iceP_a, std::optional<std::string_view> iceP_b, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_opDerivedException, iceP_a, iceP_b, context).get();
}

std::future<void>
Test::InitialPrx::opDerivedExceptionAsync(std::optional<std::int32_t> iceP_a, std::optional<std::string_view> iceP_b, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_opDerivedException, iceP_a, iceP_b, context);
}

std::function<void()>
Test::InitialPrx::opDerivedExceptionAsync(std::optional<std::int32_t> iceP_a, std::optional<std::string_view> iceP_b, std::function<void()> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opDerivedException, iceP_a, iceP_b, context);
}

void
Test::InitialPrx::_iceI_opDerivedException(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, std::optional<std::int32_t> iceP_a, std::optional<std::string_view> iceP_b, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opDerivedException";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2}, iceP_a, iceP_b);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const OptionalException&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

void
Test::InitialPrx::opRequiredException(std::optional<std::int32_t> iceP_a, std::optional<std::string_view> iceP_b, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_opRequiredException, iceP_a, iceP_b, context).get();
}

std::future<void>
Test::InitialPrx::opRequiredExceptionAsync(std::optional<std::int32_t> iceP_a, std::optional<std::string_view> iceP_b, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_opRequiredException, iceP_a, iceP_b, context);
}

std::function<void()>
Test::InitialPrx::opRequiredExceptionAsync(std::optional<std::int32_t> iceP_a, std::optional<std::string_view> iceP_b, std::function<void()> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opRequiredException, iceP_a, iceP_b, context);
}

void
Test::InitialPrx::_iceI_opRequiredException(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, std::optional<std::int32_t> iceP_a, std::optional<std::string_view> iceP_b, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opRequiredException";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 2}, iceP_a, iceP_b);
        },
        [](const Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch (const OptionalException&)
            {
                throw;
            }
            catch (const Ice::UserException&)
            {
            }
        });
}

std::optional<std::uint8_t>
Test::InitialPrx::opByte(std::optional<std::uint8_t> iceP_p1, std::optional<std::uint8_t>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<std::uint8_t>, std::optional<std::uint8_t>>>(true, this, &InitialPrx::_iceI_opByte, iceP_p1, context).get();
    iceP_p3 = std::get<1>(result);
    return std::get<0>(result);
}

std::future<std::tuple<std::optional<std::uint8_t>, std::optional<std::uint8_t>>>
Test::InitialPrx::opByteAsync(std::optional<std::uint8_t> iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<std::uint8_t>, std::optional<std::uint8_t>>>(false, this, &InitialPrx::_iceI_opByte, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opByteAsync(std::optional<std::uint8_t> iceP_p1, std::function<void(std::optional<std::uint8_t>, std::optional<std::uint8_t>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<std::uint8_t>, std::optional<std::uint8_t>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<std::uint8_t>, std::optional<std::uint8_t>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opByte, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opByte(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<std::uint8_t>, std::optional<std::uint8_t>>>>& outAsync, std::optional<std::uint8_t> iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opByte";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<std::uint8_t>, std::optional<std::uint8_t>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<bool>
Test::InitialPrx::opBool(std::optional<bool> iceP_p1, std::optional<bool>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<bool>, std::optional<bool>>>(true, this, &InitialPrx::_iceI_opBool, iceP_p1, context).get();
    iceP_p3 = std::get<1>(result);
    return std::get<0>(result);
}

std::future<std::tuple<std::optional<bool>, std::optional<bool>>>
Test::InitialPrx::opBoolAsync(std::optional<bool> iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<bool>, std::optional<bool>>>(false, this, &InitialPrx::_iceI_opBool, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opBoolAsync(std::optional<bool> iceP_p1, std::function<void(std::optional<bool>, std::optional<bool>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<bool>, std::optional<bool>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<bool>, std::optional<bool>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opBool, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opBool(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<bool>, std::optional<bool>>>>& outAsync, std::optional<bool> iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opBool";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<bool>, std::optional<bool>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<std::int16_t>
Test::InitialPrx::opShort(std::optional<std::int16_t> iceP_p1, std::optional<std::int16_t>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<std::int16_t>, std::optional<std::int16_t>>>(true, this, &InitialPrx::_iceI_opShort, iceP_p1, context).get();
    iceP_p3 = std::get<1>(result);
    return std::get<0>(result);
}

std::future<std::tuple<std::optional<std::int16_t>, std::optional<std::int16_t>>>
Test::InitialPrx::opShortAsync(std::optional<std::int16_t> iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<std::int16_t>, std::optional<std::int16_t>>>(false, this, &InitialPrx::_iceI_opShort, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opShortAsync(std::optional<std::int16_t> iceP_p1, std::function<void(std::optional<std::int16_t>, std::optional<std::int16_t>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<std::int16_t>, std::optional<std::int16_t>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<std::int16_t>, std::optional<std::int16_t>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opShort, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opShort(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<std::int16_t>, std::optional<std::int16_t>>>>& outAsync, std::optional<std::int16_t> iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opShort";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<std::int16_t>, std::optional<std::int16_t>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<std::int32_t>
Test::InitialPrx::opInt(std::optional<std::int32_t> iceP_p1, std::optional<std::int32_t>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<std::int32_t>, std::optional<std::int32_t>>>(true, this, &InitialPrx::_iceI_opInt, iceP_p1, context).get();
    iceP_p3 = std::get<1>(result);
    return std::get<0>(result);
}

std::future<std::tuple<std::optional<std::int32_t>, std::optional<std::int32_t>>>
Test::InitialPrx::opIntAsync(std::optional<std::int32_t> iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<std::int32_t>, std::optional<std::int32_t>>>(false, this, &InitialPrx::_iceI_opInt, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opIntAsync(std::optional<std::int32_t> iceP_p1, std::function<void(std::optional<std::int32_t>, std::optional<std::int32_t>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<std::int32_t>, std::optional<std::int32_t>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<std::int32_t>, std::optional<std::int32_t>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opInt, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opInt(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<std::int32_t>, std::optional<std::int32_t>>>>& outAsync, std::optional<std::int32_t> iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opInt";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<std::int32_t>, std::optional<std::int32_t>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<std::int64_t>
Test::InitialPrx::opLong(std::optional<std::int64_t> iceP_p1, std::optional<std::int64_t>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<std::int64_t>, std::optional<std::int64_t>>>(true, this, &InitialPrx::_iceI_opLong, iceP_p1, context).get();
    iceP_p3 = std::get<1>(result);
    return std::get<0>(result);
}

std::future<std::tuple<std::optional<std::int64_t>, std::optional<std::int64_t>>>
Test::InitialPrx::opLongAsync(std::optional<std::int64_t> iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<std::int64_t>, std::optional<std::int64_t>>>(false, this, &InitialPrx::_iceI_opLong, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opLongAsync(std::optional<std::int64_t> iceP_p1, std::function<void(std::optional<std::int64_t>, std::optional<std::int64_t>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<std::int64_t>, std::optional<std::int64_t>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<std::int64_t>, std::optional<std::int64_t>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opLong, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opLong(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<std::int64_t>, std::optional<std::int64_t>>>>& outAsync, std::optional<std::int64_t> iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opLong";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<std::int64_t>, std::optional<std::int64_t>> v;
            istr->readAll({2, 3}, std::get<1>(v), std::get<0>(v));
            return v;
        });
}

std::optional<float>
Test::InitialPrx::opFloat(std::optional<float> iceP_p1, std::optional<float>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<float>, std::optional<float>>>(true, this, &InitialPrx::_iceI_opFloat, iceP_p1, context).get();
    iceP_p3 = std::get<1>(result);
    return std::get<0>(result);
}

std::future<std::tuple<std::optional<float>, std::optional<float>>>
Test::InitialPrx::opFloatAsync(std::optional<float> iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<float>, std::optional<float>>>(false, this, &InitialPrx::_iceI_opFloat, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opFloatAsync(std::optional<float> iceP_p1, std::function<void(std::optional<float>, std::optional<float>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<float>, std::optional<float>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<float>, std::optional<float>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFloat, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opFloat(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<float>, std::optional<float>>>>& outAsync, std::optional<float> iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opFloat";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<float>, std::optional<float>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<double>
Test::InitialPrx::opDouble(std::optional<double> iceP_p1, std::optional<double>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<double>, std::optional<double>>>(true, this, &InitialPrx::_iceI_opDouble, iceP_p1, context).get();
    iceP_p3 = std::get<1>(result);
    return std::get<0>(result);
}

std::future<std::tuple<std::optional<double>, std::optional<double>>>
Test::InitialPrx::opDoubleAsync(std::optional<double> iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<double>, std::optional<double>>>(false, this, &InitialPrx::_iceI_opDouble, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opDoubleAsync(std::optional<double> iceP_p1, std::function<void(std::optional<double>, std::optional<double>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<double>, std::optional<double>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<double>, std::optional<double>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opDouble, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opDouble(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<double>, std::optional<double>>>>& outAsync, std::optional<double> iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opDouble";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<double>, std::optional<double>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<std::string>
Test::InitialPrx::opString(std::optional<std::string_view> iceP_p1, std::optional<std::string>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<std::string>, std::optional<std::string>>>(true, this, &InitialPrx::_iceI_opString, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<std::string>, std::optional<std::string>>>
Test::InitialPrx::opStringAsync(std::optional<std::string_view> iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<std::string>, std::optional<std::string>>>(false, this, &InitialPrx::_iceI_opString, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opStringAsync(std::optional<std::string_view> iceP_p1, std::function<void(std::optional<std::string>, std::optional<std::string>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<std::string>, std::optional<std::string>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<std::string>, std::optional<std::string>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opString, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opString(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<std::string>, std::optional<std::string>>>>& outAsync, std::optional<std::string_view> iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opString";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<std::string>, std::optional<std::string>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::MyEnum>
Test::InitialPrx::opMyEnum(std::optional<MyEnum> iceP_p1, std::optional<MyEnum>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<MyEnum>, std::optional<MyEnum>>>(true, this, &InitialPrx::_iceI_opMyEnum, iceP_p1, context).get();
    iceP_p3 = std::get<1>(result);
    return std::get<0>(result);
}

std::future<std::tuple<std::optional<::Test::MyEnum>, std::optional<::Test::MyEnum>>>
Test::InitialPrx::opMyEnumAsync(std::optional<MyEnum> iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<MyEnum>, std::optional<MyEnum>>>(false, this, &InitialPrx::_iceI_opMyEnum, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opMyEnumAsync(std::optional<MyEnum> iceP_p1, std::function<void(std::optional<::Test::MyEnum>, std::optional<::Test::MyEnum>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<MyEnum>, std::optional<MyEnum>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<MyEnum>, std::optional<MyEnum>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMyEnum, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opMyEnum(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<MyEnum>, std::optional<MyEnum>>>>& outAsync, std::optional<MyEnum> iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opMyEnum";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<MyEnum>, std::optional<MyEnum>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::SmallStruct>
Test::InitialPrx::opSmallStruct(const std::optional<SmallStruct>& iceP_p1, std::optional<SmallStruct>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>(true, this, &InitialPrx::_iceI_opSmallStruct, iceP_p1, context).get();
    iceP_p3 = std::get<1>(result);
    return std::get<0>(result);
}

std::future<std::tuple<std::optional<::Test::SmallStruct>, std::optional<::Test::SmallStruct>>>
Test::InitialPrx::opSmallStructAsync(const std::optional<SmallStruct>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>(false, this, &InitialPrx::_iceI_opSmallStruct, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opSmallStructAsync(const std::optional<SmallStruct>& iceP_p1, std::function<void(std::optional<::Test::SmallStruct>, std::optional<::Test::SmallStruct>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSmallStruct, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opSmallStruct(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>>& outAsync, const std::optional<SmallStruct>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opSmallStruct";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::FixedStruct>
Test::InitialPrx::opFixedStruct(const std::optional<FixedStruct>& iceP_p1, std::optional<FixedStruct>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<FixedStruct>, std::optional<FixedStruct>>>(true, this, &InitialPrx::_iceI_opFixedStruct, iceP_p1, context).get();
    iceP_p3 = std::get<1>(result);
    return std::get<0>(result);
}

std::future<std::tuple<std::optional<::Test::FixedStruct>, std::optional<::Test::FixedStruct>>>
Test::InitialPrx::opFixedStructAsync(const std::optional<FixedStruct>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<FixedStruct>, std::optional<FixedStruct>>>(false, this, &InitialPrx::_iceI_opFixedStruct, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opFixedStructAsync(const std::optional<FixedStruct>& iceP_p1, std::function<void(std::optional<::Test::FixedStruct>, std::optional<::Test::FixedStruct>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<FixedStruct>, std::optional<FixedStruct>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<FixedStruct>, std::optional<FixedStruct>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFixedStruct, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opFixedStruct(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<FixedStruct>, std::optional<FixedStruct>>>>& outAsync, const std::optional<FixedStruct>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opFixedStruct";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<FixedStruct>, std::optional<FixedStruct>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::VarStruct>
Test::InitialPrx::opVarStruct(const std::optional<VarStruct>& iceP_p1, std::optional<VarStruct>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<VarStruct>, std::optional<VarStruct>>>(true, this, &InitialPrx::_iceI_opVarStruct, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::VarStruct>, std::optional<::Test::VarStruct>>>
Test::InitialPrx::opVarStructAsync(const std::optional<VarStruct>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<VarStruct>, std::optional<VarStruct>>>(false, this, &InitialPrx::_iceI_opVarStruct, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opVarStructAsync(const std::optional<VarStruct>& iceP_p1, std::function<void(std::optional<::Test::VarStruct>, std::optional<::Test::VarStruct>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<VarStruct>, std::optional<VarStruct>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<VarStruct>, std::optional<VarStruct>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opVarStruct, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opVarStruct(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<VarStruct>, std::optional<VarStruct>>>>& outAsync, const std::optional<VarStruct>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opVarStruct";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<VarStruct>, std::optional<VarStruct>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::MyInterfacePrx>
Test::InitialPrx::opMyInterfaceProxy(const std::optional<MyInterfacePrx>& iceP_p1, std::optional<MyInterfacePrx>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<MyInterfacePrx>, std::optional<MyInterfacePrx>>>(true, this, &InitialPrx::_iceI_opMyInterfaceProxy, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::MyInterfacePrx>, std::optional<::Test::MyInterfacePrx>>>
Test::InitialPrx::opMyInterfaceProxyAsync(const std::optional<MyInterfacePrx>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<MyInterfacePrx>, std::optional<MyInterfacePrx>>>(false, this, &InitialPrx::_iceI_opMyInterfaceProxy, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opMyInterfaceProxyAsync(const std::optional<MyInterfacePrx>& iceP_p1, std::function<void(std::optional<::Test::MyInterfacePrx>, std::optional<::Test::MyInterfacePrx>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<MyInterfacePrx>, std::optional<MyInterfacePrx>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<MyInterfacePrx>, std::optional<MyInterfacePrx>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMyInterfaceProxy, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opMyInterfaceProxy(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<MyInterfacePrx>, std::optional<MyInterfacePrx>>>>& outAsync, const std::optional<MyInterfacePrx>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opMyInterfaceProxy";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<MyInterfacePrx>, std::optional<MyInterfacePrx>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

::Test::OneOptionalPtr
Test::InitialPrx::opOneOptional(const OneOptionalPtr& iceP_p1, OneOptionalPtr& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<OneOptionalPtr, OneOptionalPtr>>(true, this, &InitialPrx::_iceI_opOneOptional, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<::Test::OneOptionalPtr, ::Test::OneOptionalPtr>>
Test::InitialPrx::opOneOptionalAsync(const OneOptionalPtr& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<OneOptionalPtr, OneOptionalPtr>>(false, this, &InitialPrx::_iceI_opOneOptional, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opOneOptionalAsync(const OneOptionalPtr& iceP_p1, std::function<void(::Test::OneOptionalPtr, ::Test::OneOptionalPtr)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<OneOptionalPtr, OneOptionalPtr>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<OneOptionalPtr, OneOptionalPtr>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opOneOptional, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opOneOptional(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<OneOptionalPtr, OneOptionalPtr>>>& outAsync, const OneOptionalPtr& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opOneOptional";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p1);
            ostr->writePendingValues();
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<OneOptionalPtr, OneOptionalPtr> v;
            istr->readAll(std::get<1>(v), std::get<0>(v));
            istr->readPendingValues();
            return v;
        });
}

std::optional<::Test::ByteSeq>
Test::InitialPrx::opByteSeq(const std::optional<ByteSeq>& iceP_p1, std::optional<ByteSeq>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<ByteSeq>, std::optional<ByteSeq>>>(true, this, &InitialPrx::_iceI_opByteSeq, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::ByteSeq>, std::optional<::Test::ByteSeq>>>
Test::InitialPrx::opByteSeqAsync(const std::optional<ByteSeq>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<ByteSeq>, std::optional<ByteSeq>>>(false, this, &InitialPrx::_iceI_opByteSeq, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opByteSeqAsync(const std::optional<ByteSeq>& iceP_p1, std::function<void(std::optional<::Test::ByteSeq>, std::optional<::Test::ByteSeq>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<ByteSeq>, std::optional<ByteSeq>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<ByteSeq>, std::optional<ByteSeq>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opByteSeq, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opByteSeq(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<ByteSeq>, std::optional<ByteSeq>>>>& outAsync, const std::optional<ByteSeq>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opByteSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<ByteSeq>, std::optional<ByteSeq>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::BoolSeq>
Test::InitialPrx::opBoolSeq(const std::optional<BoolSeq>& iceP_p1, std::optional<BoolSeq>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<BoolSeq>, std::optional<BoolSeq>>>(true, this, &InitialPrx::_iceI_opBoolSeq, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::BoolSeq>, std::optional<::Test::BoolSeq>>>
Test::InitialPrx::opBoolSeqAsync(const std::optional<BoolSeq>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<BoolSeq>, std::optional<BoolSeq>>>(false, this, &InitialPrx::_iceI_opBoolSeq, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opBoolSeqAsync(const std::optional<BoolSeq>& iceP_p1, std::function<void(std::optional<::Test::BoolSeq>, std::optional<::Test::BoolSeq>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<BoolSeq>, std::optional<BoolSeq>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<BoolSeq>, std::optional<BoolSeq>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opBoolSeq, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opBoolSeq(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<BoolSeq>, std::optional<BoolSeq>>>>& outAsync, const std::optional<BoolSeq>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opBoolSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<BoolSeq>, std::optional<BoolSeq>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::ShortSeq>
Test::InitialPrx::opShortSeq(const std::optional<ShortSeq>& iceP_p1, std::optional<ShortSeq>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<ShortSeq>, std::optional<ShortSeq>>>(true, this, &InitialPrx::_iceI_opShortSeq, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::ShortSeq>, std::optional<::Test::ShortSeq>>>
Test::InitialPrx::opShortSeqAsync(const std::optional<ShortSeq>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<ShortSeq>, std::optional<ShortSeq>>>(false, this, &InitialPrx::_iceI_opShortSeq, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opShortSeqAsync(const std::optional<ShortSeq>& iceP_p1, std::function<void(std::optional<::Test::ShortSeq>, std::optional<::Test::ShortSeq>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<ShortSeq>, std::optional<ShortSeq>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<ShortSeq>, std::optional<ShortSeq>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opShortSeq, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opShortSeq(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<ShortSeq>, std::optional<ShortSeq>>>>& outAsync, const std::optional<ShortSeq>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opShortSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<ShortSeq>, std::optional<ShortSeq>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::IntSeq>
Test::InitialPrx::opIntSeq(const std::optional<IntSeq>& iceP_p1, std::optional<IntSeq>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<IntSeq>, std::optional<IntSeq>>>(true, this, &InitialPrx::_iceI_opIntSeq, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::IntSeq>, std::optional<::Test::IntSeq>>>
Test::InitialPrx::opIntSeqAsync(const std::optional<IntSeq>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<IntSeq>, std::optional<IntSeq>>>(false, this, &InitialPrx::_iceI_opIntSeq, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opIntSeqAsync(const std::optional<IntSeq>& iceP_p1, std::function<void(std::optional<::Test::IntSeq>, std::optional<::Test::IntSeq>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<IntSeq>, std::optional<IntSeq>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<IntSeq>, std::optional<IntSeq>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opIntSeq, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opIntSeq(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<IntSeq>, std::optional<IntSeq>>>>& outAsync, const std::optional<IntSeq>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opIntSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<IntSeq>, std::optional<IntSeq>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::LongSeq>
Test::InitialPrx::opLongSeq(const std::optional<LongSeq>& iceP_p1, std::optional<LongSeq>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<LongSeq>, std::optional<LongSeq>>>(true, this, &InitialPrx::_iceI_opLongSeq, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::LongSeq>, std::optional<::Test::LongSeq>>>
Test::InitialPrx::opLongSeqAsync(const std::optional<LongSeq>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<LongSeq>, std::optional<LongSeq>>>(false, this, &InitialPrx::_iceI_opLongSeq, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opLongSeqAsync(const std::optional<LongSeq>& iceP_p1, std::function<void(std::optional<::Test::LongSeq>, std::optional<::Test::LongSeq>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<LongSeq>, std::optional<LongSeq>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<LongSeq>, std::optional<LongSeq>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opLongSeq, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opLongSeq(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<LongSeq>, std::optional<LongSeq>>>>& outAsync, const std::optional<LongSeq>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opLongSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<LongSeq>, std::optional<LongSeq>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::FloatSeq>
Test::InitialPrx::opFloatSeq(const std::optional<FloatSeq>& iceP_p1, std::optional<FloatSeq>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<FloatSeq>, std::optional<FloatSeq>>>(true, this, &InitialPrx::_iceI_opFloatSeq, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::FloatSeq>, std::optional<::Test::FloatSeq>>>
Test::InitialPrx::opFloatSeqAsync(const std::optional<FloatSeq>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<FloatSeq>, std::optional<FloatSeq>>>(false, this, &InitialPrx::_iceI_opFloatSeq, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opFloatSeqAsync(const std::optional<FloatSeq>& iceP_p1, std::function<void(std::optional<::Test::FloatSeq>, std::optional<::Test::FloatSeq>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<FloatSeq>, std::optional<FloatSeq>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<FloatSeq>, std::optional<FloatSeq>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFloatSeq, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opFloatSeq(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<FloatSeq>, std::optional<FloatSeq>>>>& outAsync, const std::optional<FloatSeq>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opFloatSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<FloatSeq>, std::optional<FloatSeq>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::DoubleSeq>
Test::InitialPrx::opDoubleSeq(const std::optional<DoubleSeq>& iceP_p1, std::optional<DoubleSeq>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<DoubleSeq>, std::optional<DoubleSeq>>>(true, this, &InitialPrx::_iceI_opDoubleSeq, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::DoubleSeq>, std::optional<::Test::DoubleSeq>>>
Test::InitialPrx::opDoubleSeqAsync(const std::optional<DoubleSeq>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<DoubleSeq>, std::optional<DoubleSeq>>>(false, this, &InitialPrx::_iceI_opDoubleSeq, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opDoubleSeqAsync(const std::optional<DoubleSeq>& iceP_p1, std::function<void(std::optional<::Test::DoubleSeq>, std::optional<::Test::DoubleSeq>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<DoubleSeq>, std::optional<DoubleSeq>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<DoubleSeq>, std::optional<DoubleSeq>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opDoubleSeq, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opDoubleSeq(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<DoubleSeq>, std::optional<DoubleSeq>>>>& outAsync, const std::optional<DoubleSeq>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opDoubleSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<DoubleSeq>, std::optional<DoubleSeq>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::StringSeq>
Test::InitialPrx::opStringSeq(const std::optional<StringSeq>& iceP_p1, std::optional<StringSeq>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>(true, this, &InitialPrx::_iceI_opStringSeq, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::StringSeq>, std::optional<::Test::StringSeq>>>
Test::InitialPrx::opStringSeqAsync(const std::optional<StringSeq>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>(false, this, &InitialPrx::_iceI_opStringSeq, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opStringSeqAsync(const std::optional<StringSeq>& iceP_p1, std::function<void(std::optional<::Test::StringSeq>, std::optional<::Test::StringSeq>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opStringSeq, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opStringSeq(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>>& outAsync, const std::optional<StringSeq>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opStringSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<StringSeq>, std::optional<StringSeq>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::SmallStructSeq>
Test::InitialPrx::opSmallStructSeq(const std::optional<SmallStructSeq>& iceP_p1, std::optional<SmallStructSeq>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<SmallStructSeq>, std::optional<SmallStructSeq>>>(true, this, &InitialPrx::_iceI_opSmallStructSeq, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::SmallStructSeq>, std::optional<::Test::SmallStructSeq>>>
Test::InitialPrx::opSmallStructSeqAsync(const std::optional<SmallStructSeq>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<SmallStructSeq>, std::optional<SmallStructSeq>>>(false, this, &InitialPrx::_iceI_opSmallStructSeq, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opSmallStructSeqAsync(const std::optional<SmallStructSeq>& iceP_p1, std::function<void(std::optional<::Test::SmallStructSeq>, std::optional<::Test::SmallStructSeq>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<SmallStructSeq>, std::optional<SmallStructSeq>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<SmallStructSeq>, std::optional<SmallStructSeq>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSmallStructSeq, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opSmallStructSeq(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<SmallStructSeq>, std::optional<SmallStructSeq>>>>& outAsync, const std::optional<SmallStructSeq>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opSmallStructSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<SmallStructSeq>, std::optional<SmallStructSeq>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::SmallStructList>
Test::InitialPrx::opSmallStructList(const std::optional<SmallStructList>& iceP_p1, std::optional<SmallStructList>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<SmallStructList>, std::optional<SmallStructList>>>(true, this, &InitialPrx::_iceI_opSmallStructList, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::SmallStructList>, std::optional<::Test::SmallStructList>>>
Test::InitialPrx::opSmallStructListAsync(const std::optional<SmallStructList>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<SmallStructList>, std::optional<SmallStructList>>>(false, this, &InitialPrx::_iceI_opSmallStructList, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opSmallStructListAsync(const std::optional<SmallStructList>& iceP_p1, std::function<void(std::optional<::Test::SmallStructList>, std::optional<::Test::SmallStructList>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<SmallStructList>, std::optional<SmallStructList>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<SmallStructList>, std::optional<SmallStructList>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSmallStructList, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opSmallStructList(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<SmallStructList>, std::optional<SmallStructList>>>>& outAsync, const std::optional<SmallStructList>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opSmallStructList";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<SmallStructList>, std::optional<SmallStructList>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::FixedStructSeq>
Test::InitialPrx::opFixedStructSeq(const std::optional<FixedStructSeq>& iceP_p1, std::optional<FixedStructSeq>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<FixedStructSeq>, std::optional<FixedStructSeq>>>(true, this, &InitialPrx::_iceI_opFixedStructSeq, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::FixedStructSeq>, std::optional<::Test::FixedStructSeq>>>
Test::InitialPrx::opFixedStructSeqAsync(const std::optional<FixedStructSeq>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<FixedStructSeq>, std::optional<FixedStructSeq>>>(false, this, &InitialPrx::_iceI_opFixedStructSeq, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opFixedStructSeqAsync(const std::optional<FixedStructSeq>& iceP_p1, std::function<void(std::optional<::Test::FixedStructSeq>, std::optional<::Test::FixedStructSeq>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<FixedStructSeq>, std::optional<FixedStructSeq>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<FixedStructSeq>, std::optional<FixedStructSeq>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFixedStructSeq, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opFixedStructSeq(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<FixedStructSeq>, std::optional<FixedStructSeq>>>>& outAsync, const std::optional<FixedStructSeq>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opFixedStructSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<FixedStructSeq>, std::optional<FixedStructSeq>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::FixedStructList>
Test::InitialPrx::opFixedStructList(const std::optional<FixedStructList>& iceP_p1, std::optional<FixedStructList>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<FixedStructList>, std::optional<FixedStructList>>>(true, this, &InitialPrx::_iceI_opFixedStructList, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::FixedStructList>, std::optional<::Test::FixedStructList>>>
Test::InitialPrx::opFixedStructListAsync(const std::optional<FixedStructList>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<FixedStructList>, std::optional<FixedStructList>>>(false, this, &InitialPrx::_iceI_opFixedStructList, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opFixedStructListAsync(const std::optional<FixedStructList>& iceP_p1, std::function<void(std::optional<::Test::FixedStructList>, std::optional<::Test::FixedStructList>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<FixedStructList>, std::optional<FixedStructList>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<FixedStructList>, std::optional<FixedStructList>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opFixedStructList, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opFixedStructList(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<FixedStructList>, std::optional<FixedStructList>>>>& outAsync, const std::optional<FixedStructList>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opFixedStructList";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<FixedStructList>, std::optional<FixedStructList>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::VarStructSeq>
Test::InitialPrx::opVarStructSeq(const std::optional<VarStructSeq>& iceP_p1, std::optional<VarStructSeq>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<VarStructSeq>, std::optional<VarStructSeq>>>(true, this, &InitialPrx::_iceI_opVarStructSeq, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::VarStructSeq>, std::optional<::Test::VarStructSeq>>>
Test::InitialPrx::opVarStructSeqAsync(const std::optional<VarStructSeq>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<VarStructSeq>, std::optional<VarStructSeq>>>(false, this, &InitialPrx::_iceI_opVarStructSeq, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opVarStructSeqAsync(const std::optional<VarStructSeq>& iceP_p1, std::function<void(std::optional<::Test::VarStructSeq>, std::optional<::Test::VarStructSeq>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<VarStructSeq>, std::optional<VarStructSeq>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<VarStructSeq>, std::optional<VarStructSeq>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opVarStructSeq, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opVarStructSeq(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<VarStructSeq>, std::optional<VarStructSeq>>>>& outAsync, const std::optional<VarStructSeq>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opVarStructSeq";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<VarStructSeq>, std::optional<VarStructSeq>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::Serializable>
Test::InitialPrx::opSerializable(const std::optional<Serializable>& iceP_p1, std::optional<Serializable>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<Serializable>, std::optional<Serializable>>>(true, this, &InitialPrx::_iceI_opSerializable, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::Serializable>, std::optional<::Test::Serializable>>>
Test::InitialPrx::opSerializableAsync(const std::optional<Serializable>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<Serializable>, std::optional<Serializable>>>(false, this, &InitialPrx::_iceI_opSerializable, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opSerializableAsync(const std::optional<Serializable>& iceP_p1, std::function<void(std::optional<::Test::Serializable>, std::optional<::Test::Serializable>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<Serializable>, std::optional<Serializable>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<Serializable>, std::optional<Serializable>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opSerializable, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opSerializable(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<Serializable>, std::optional<Serializable>>>>& outAsync, const std::optional<Serializable>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opSerializable";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<Serializable>, std::optional<Serializable>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::IntIntDict>
Test::InitialPrx::opIntIntDict(const std::optional<IntIntDict>& iceP_p1, std::optional<IntIntDict>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<IntIntDict>, std::optional<IntIntDict>>>(true, this, &InitialPrx::_iceI_opIntIntDict, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::IntIntDict>, std::optional<::Test::IntIntDict>>>
Test::InitialPrx::opIntIntDictAsync(const std::optional<IntIntDict>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<IntIntDict>, std::optional<IntIntDict>>>(false, this, &InitialPrx::_iceI_opIntIntDict, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opIntIntDictAsync(const std::optional<IntIntDict>& iceP_p1, std::function<void(std::optional<::Test::IntIntDict>, std::optional<::Test::IntIntDict>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<IntIntDict>, std::optional<IntIntDict>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<IntIntDict>, std::optional<IntIntDict>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opIntIntDict, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opIntIntDict(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<IntIntDict>, std::optional<IntIntDict>>>>& outAsync, const std::optional<IntIntDict>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opIntIntDict";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<IntIntDict>, std::optional<IntIntDict>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::StringIntDict>
Test::InitialPrx::opStringIntDict(const std::optional<StringIntDict>& iceP_p1, std::optional<StringIntDict>& iceP_p3, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>(true, this, &InitialPrx::_iceI_opStringIntDict, iceP_p1, context).get();
    iceP_p3 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::StringIntDict>, std::optional<::Test::StringIntDict>>>
Test::InitialPrx::opStringIntDictAsync(const std::optional<StringIntDict>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>(false, this, &InitialPrx::_iceI_opStringIntDict, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opStringIntDictAsync(const std::optional<StringIntDict>& iceP_p1, std::function<void(std::optional<::Test::StringIntDict>, std::optional<::Test::StringIntDict>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opStringIntDict, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opStringIntDict(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>>& outAsync, const std::optional<StringIntDict>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opStringIntDict";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

void
Test::InitialPrx::opClassAndUnknownOptional(const APtr& iceP_p, const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_opClassAndUnknownOptional, iceP_p, context).get();
}

std::future<void>
Test::InitialPrx::opClassAndUnknownOptionalAsync(const APtr& iceP_p, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_opClassAndUnknownOptional, iceP_p, context);
}

std::function<void()>
Test::InitialPrx::opClassAndUnknownOptionalAsync(const APtr& iceP_p, std::function<void()> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opClassAndUnknownOptional, iceP_p, context);
}

void
Test::InitialPrx::_iceI_opClassAndUnknownOptional(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const APtr& iceP_p, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opClassAndUnknownOptional";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p);
            ostr->writePendingValues();
        },
        nullptr);
}

::Test::GPtr
Test::InitialPrx::opG(const GPtr& iceP_g, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<GPtr>(true, this, &InitialPrx::_iceI_opG, iceP_g, context).get();
}

std::future<::Test::GPtr>
Test::InitialPrx::opGAsync(const GPtr& iceP_g, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<GPtr>(false, this, &InitialPrx::_iceI_opG, iceP_g, context);
}

std::function<void()>
Test::InitialPrx::opGAsync(const GPtr& iceP_g, std::function<void(::Test::GPtr)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<GPtr>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opG, iceP_g, context);
}

void
Test::InitialPrx::_iceI_opG(const std::shared_ptr<IceInternal::OutgoingAsyncT<GPtr>>& outAsync, const GPtr& iceP_g, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opG";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_g);
            ostr->writePendingValues();
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            GPtr ret;
            istr->readAll(ret);
            istr->readPendingValues();
            return ret;
        });
}

void
Test::InitialPrx::opVoid(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_opVoid, context).get();
}

std::future<void>
Test::InitialPrx::opVoidAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_opVoid, context);
}

std::function<void()>
Test::InitialPrx::opVoidAsync(std::function<void()> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opVoid, context);
}

void
Test::InitialPrx::_iceI_opVoid(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opVoid";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

std::optional<::Test::SmallStruct>
Test::InitialPrx::opMStruct1(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<SmallStruct>>(true, this, &InitialPrx::_iceI_opMStruct1, context).get();
}

std::future<std::optional<::Test::SmallStruct>>
Test::InitialPrx::opMStruct1Async(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<SmallStruct>>(false, this, &InitialPrx::_iceI_opMStruct1, context);
}

std::function<void()>
Test::InitialPrx::opMStruct1Async(std::function<void(std::optional<::Test::SmallStruct>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<SmallStruct>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMStruct1, context);
}

void
Test::InitialPrx::_iceI_opMStruct1(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<SmallStruct>>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opMStruct1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::optional<SmallStruct> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}

std::optional<::Test::SmallStruct>
Test::InitialPrx::opMStruct2(const std::optional<SmallStruct>& iceP_p1, std::optional<SmallStruct>& iceP_p2, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>(true, this, &InitialPrx::_iceI_opMStruct2, iceP_p1, context).get();
    iceP_p2 = std::get<1>(result);
    return std::get<0>(result);
}

std::future<std::tuple<std::optional<::Test::SmallStruct>, std::optional<::Test::SmallStruct>>>
Test::InitialPrx::opMStruct2Async(const std::optional<SmallStruct>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>(false, this, &InitialPrx::_iceI_opMStruct2, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opMStruct2Async(const std::optional<SmallStruct>& iceP_p1, std::function<void(std::optional<::Test::SmallStruct>, std::optional<::Test::SmallStruct>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMStruct2, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opMStruct2(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>>>>& outAsync, const std::optional<SmallStruct>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opMStruct2";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<SmallStruct>, std::optional<SmallStruct>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::StringSeq>
Test::InitialPrx::opMSeq1(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<StringSeq>>(true, this, &InitialPrx::_iceI_opMSeq1, context).get();
}

std::future<std::optional<::Test::StringSeq>>
Test::InitialPrx::opMSeq1Async(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<StringSeq>>(false, this, &InitialPrx::_iceI_opMSeq1, context);
}

std::function<void()>
Test::InitialPrx::opMSeq1Async(std::function<void(std::optional<::Test::StringSeq>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<StringSeq>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMSeq1, context);
}

void
Test::InitialPrx::_iceI_opMSeq1(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<StringSeq>>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opMSeq1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::optional<StringSeq> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}

std::optional<::Test::StringSeq>
Test::InitialPrx::opMSeq2(const std::optional<StringSeq>& iceP_p1, std::optional<StringSeq>& iceP_p2, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>(true, this, &InitialPrx::_iceI_opMSeq2, iceP_p1, context).get();
    iceP_p2 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::StringSeq>, std::optional<::Test::StringSeq>>>
Test::InitialPrx::opMSeq2Async(const std::optional<StringSeq>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>(false, this, &InitialPrx::_iceI_opMSeq2, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opMSeq2Async(const std::optional<StringSeq>& iceP_p1, std::function<void(std::optional<::Test::StringSeq>, std::optional<::Test::StringSeq>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMSeq2, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opMSeq2(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<StringSeq>, std::optional<StringSeq>>>>& outAsync, const std::optional<StringSeq>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opMSeq2";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<StringSeq>, std::optional<StringSeq>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

std::optional<::Test::StringIntDict>
Test::InitialPrx::opMDict1(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<StringIntDict>>(true, this, &InitialPrx::_iceI_opMDict1, context).get();
}

std::future<std::optional<::Test::StringIntDict>>
Test::InitialPrx::opMDict1Async(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::optional<StringIntDict>>(false, this, &InitialPrx::_iceI_opMDict1, context);
}

std::function<void()>
Test::InitialPrx::opMDict1Async(std::function<void(std::optional<::Test::StringIntDict>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<std::optional<StringIntDict>>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMDict1, context);
}

void
Test::InitialPrx::_iceI_opMDict1(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::optional<StringIntDict>>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opMDict1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::optional<StringIntDict> ret;
            istr->readAll({1}, ret);
            return ret;
        });
}

std::optional<::Test::StringIntDict>
Test::InitialPrx::opMDict2(const std::optional<StringIntDict>& iceP_p1, std::optional<StringIntDict>& iceP_p2, const Ice::Context& context) const
{
    auto result = IceInternal::makePromiseOutgoing<std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>(true, this, &InitialPrx::_iceI_opMDict2, iceP_p1, context).get();
    iceP_p2 = std::move(std::get<1>(result));
    return std::move(std::get<0>(result));
}

std::future<std::tuple<std::optional<::Test::StringIntDict>, std::optional<::Test::StringIntDict>>>
Test::InitialPrx::opMDict2Async(const std::optional<StringIntDict>& iceP_p1, const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>(false, this, &InitialPrx::_iceI_opMDict2, iceP_p1, context);
}

std::function<void()>
Test::InitialPrx::opMDict2Async(const std::optional<StringIntDict>& iceP_p1, std::function<void(std::optional<::Test::StringIntDict>, std::optional<::Test::StringIntDict>)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    auto responseCb = [response = std::move(response)](std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>&& result) mutable
    {
        std::apply(std::move(response), std::move(result));
    };
    return IceInternal::makeLambdaOutgoing<std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>(std::move(responseCb), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_opMDict2, iceP_p1, context);
}

void
Test::InitialPrx::_iceI_opMDict2(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>>>>& outAsync, const std::optional<StringIntDict>& iceP_p1, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "opMDict2";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        [&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2}, iceP_p1);
        },
        nullptr,
        [](Ice::InputStream* istr)
        {
            std::tuple<std::optional<StringIntDict>, std::optional<StringIntDict>> v;
            istr->readAll({1, 3}, std::get<0>(v), std::get<1>(v));
            return v;
        });
}

bool
Test::InitialPrx::supportsJavaSerializable(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<bool>(true, this, &InitialPrx::_iceI_supportsJavaSerializable, context).get();
}

std::future<bool>
Test::InitialPrx::supportsJavaSerializableAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<bool>(false, this, &InitialPrx::_iceI_supportsJavaSerializable, context);
}

std::function<void()>
Test::InitialPrx::supportsJavaSerializableAsync(std::function<void(bool)> response, std::function<void(std::exception_ptr)> ex, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<bool>(std::move(response), std::move(ex), std::move(sent), this, &Test::InitialPrx::_iceI_supportsJavaSerializable, context);
}

void
Test::InitialPrx::_iceI_supportsJavaSerializable(const std::shared_ptr<IceInternal::OutgoingAsyncT<bool>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "supportsJavaSerializable";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

Test::InitialPrx::~InitialPrx() = default;

const char*
Test::InitialPrx::ice_staticId() noexcept
{
    return "::Test::Initial";
}

const char*
Test::OneOptional::ice_staticId() noexcept
{
    return "::Test::OneOptional";
}

const char*
Test::OneOptional::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::OneOptional::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "a = ", this->a);
}

Ice::ValuePtr
Test::OneOptional::_iceCloneImpl() const
{
    return CloneEnabler<OneOptional>::clone(*this);
}

void
Test::OneOptional::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll({1}, this->a);
    ostr->endSlice();
}

void
Test::OneOptional::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll({1}, this->a);
    istr->endSlice();
}

void
Test::SmallStruct::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "m = ", this->m);
}

std::ostream&
Test::operator<<(std::ostream& os, const ::Test::SmallStruct& value)
{
    os << "Test::SmallStruct{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
Test::FixedStruct::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "m = ", this->m);
}

std::ostream&
Test::operator<<(std::ostream& os, const ::Test::FixedStruct& value)
{
    os << "Test::FixedStruct{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
Test::VarStruct::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "m = ", this->m);
}

std::ostream&
Test::operator<<(std::ostream& os, const ::Test::VarStruct& value)
{
    os << "Test::VarStruct{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
Test::MultiOptional::ice_staticId() noexcept
{
    return "::Test::MultiOptional";
}

const char*
Test::MultiOptional::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::MultiOptional::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "a = ", this->a);
    Ice::print(os << ", b = ", this->b);
    Ice::print(os << ", c = ", this->c);
    Ice::print(os << ", d = ", this->d);
    Ice::print(os << ", e = ", this->e);
    Ice::print(os << ", f = ", this->f);
    Ice::print(os << ", g = ", this->g);
    Ice::print(os << ", h = ", this->h);
    Ice::print(os << ", i = ", this->i);
    Ice::print(os << ", j = ", this->j);
    Ice::print(os << ", bs = ", this->bs);
    Ice::print(os << ", ss = ", this->ss);
    Ice::print(os << ", iid = ", this->iid);
    Ice::print(os << ", sid = ", this->sid);
    Ice::print(os << ", fs = ", this->fs);
    Ice::print(os << ", vs = ", this->vs);
    Ice::print(os << ", shs = ", this->shs);
    Ice::print(os << ", es = ", this->es);
    Ice::print(os << ", fss = ", this->fss);
    Ice::print(os << ", vss = ", this->vss);
    Ice::print(os << ", mips = ", this->mips);
    Ice::print(os << ", ied = ", this->ied);
    Ice::print(os << ", ifsd = ", this->ifsd);
    Ice::print(os << ", ivsd = ", this->ivsd);
    Ice::print(os << ", imipd = ", this->imipd);
    Ice::print(os << ", bos = ", this->bos);
    Ice::print(os << ", ser = ", this->ser);
}

Ice::ValuePtr
Test::MultiOptional::_iceCloneImpl() const
{
    return CloneEnabler<MultiOptional>::clone(*this);
}

void
Test::MultiOptional::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30}, this->a, this->b, this->c, this->d, this->e, this->f, this->g, this->h, this->i, this->j, this->bs, this->ss, this->iid, this->sid, this->fs, this->vs, this->shs, this->es, this->fss, this->vss, this->mips, this->ied, this->ifsd, this->ivsd, this->imipd, this->bos, this->ser);
    ostr->endSlice();
}

void
Test::MultiOptional::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30}, this->a, this->b, this->c, this->d, this->e, this->f, this->g, this->h, this->i, this->j, this->bs, this->ss, this->iid, this->sid, this->fs, this->vs, this->shs, this->es, this->fss, this->vss, this->mips, this->ied, this->ifsd, this->ivsd, this->imipd, this->bos, this->ser);
    istr->endSlice();
}

const char*
Test::A::ice_staticId() noexcept
{
    return "::Test::A";
}

const char*
Test::A::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::A::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "requiredA = ", this->requiredA);
    Ice::print(os << ", ma = ", this->ma);
    Ice::print(os << ", mb = ", this->mb);
    Ice::print(os << ", mc = ", this->mc);
}

Ice::ValuePtr
Test::A::_iceCloneImpl() const
{
    return CloneEnabler<A>::clone(*this);
}

void
Test::A::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->requiredA);
    ostr->writeAll({1, 50, 500}, this->ma, this->mb, this->mc);
    ostr->endSlice();
}

void
Test::A::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->requiredA);
    istr->readAll({1, 50, 500}, this->ma, this->mb, this->mc);
    istr->endSlice();
}

const char*
Test::B::ice_staticId() noexcept
{
    return "::Test::B";
}

const char*
Test::B::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::B::ice_printFields(std::ostream& os) const
{
    A::ice_printFields(os);
    Ice::print(os << ", requiredB = ", this->requiredB);
    Ice::print(os << ", md = ", this->md);
}

Ice::ValuePtr
Test::B::_iceCloneImpl() const
{
    return CloneEnabler<B>::clone(*this);
}

void
Test::B::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->requiredB);
    ostr->writeAll({10}, this->md);
    ostr->endSlice();
    A::_iceWriteImpl(ostr);
}

void
Test::B::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->requiredB);
    istr->readAll({10}, this->md);
    istr->endSlice();
    A::_iceReadImpl(istr);
}

const char*
Test::C::ice_staticId() noexcept
{
    return "::Test::C";
}

const char*
Test::C::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::C::ice_printFields(std::ostream& os) const
{
    B::ice_printFields(os);
    Ice::print(os << ", ss = ", this->ss);
    Ice::print(os << ", ms = ", this->ms);
}

Ice::ValuePtr
Test::C::_iceCloneImpl() const
{
    return CloneEnabler<C>::clone(*this);
}

void
Test::C::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->ss);
    ostr->writeAll({890}, this->ms);
    ostr->endSlice();
    B::_iceWriteImpl(ostr);
}

void
Test::C::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->ss);
    istr->readAll({890}, this->ms);
    istr->endSlice();
    B::_iceReadImpl(istr);
}

const char*
Test::WD::ice_staticId() noexcept
{
    return "::Test::WD";
}

const char*
Test::WD::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::WD::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "a = ", this->a);
    Ice::print(os << ", s = ", this->s);
}

Ice::ValuePtr
Test::WD::_iceCloneImpl() const
{
    return CloneEnabler<WD>::clone(*this);
}

void
Test::WD::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll({1, 2}, this->a, this->s);
    ostr->endSlice();
}

void
Test::WD::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll({1, 2}, this->a, this->s);
    istr->endSlice();
}

void
Test::OptionalException::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "req = ", this->req);
    Ice::print(os << ", a = ", this->a);
    Ice::print(os << ", b = ", this->b);
}

const char*
Test::OptionalException::ice_staticId() noexcept
{
    return "::Test::OptionalException";
}

const char*
Test::OptionalException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::OptionalException::ice_throw() const
{
    throw *this;
}

void
Test::OptionalException::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->req);
    ostr->writeAll({1, 2}, this->a, this->b);
    ostr->endSlice();
}

void
Test::OptionalException::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->req);
    istr->readAll({1, 2}, this->a, this->b);
    istr->endSlice();
}

void
Test::DerivedException::ice_printFields(std::ostream& os) const
{
    OptionalException::ice_printFields(os);
    Ice::print(os << ", d1 = ", this->d1);
    Ice::print(os << ", ss = ", this->ss);
    Ice::print(os << ", d2 = ", this->d2);
}

const char*
Test::DerivedException::ice_staticId() noexcept
{
    return "::Test::DerivedException";
}

const char*
Test::DerivedException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::DerivedException::ice_throw() const
{
    throw *this;
}

void
Test::DerivedException::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->d1, this->d2);
    ostr->writeAll({600}, this->ss);
    ostr->endSlice();
    OptionalException::_writeImpl(ostr);
}

void
Test::DerivedException::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->d1, this->d2);
    istr->readAll({600}, this->ss);
    istr->endSlice();
    OptionalException::_readImpl(istr);
}

void
Test::RequiredException::ice_printFields(std::ostream& os) const
{
    OptionalException::ice_printFields(os);
    Ice::print(os << ", ss = ", this->ss);
}

const char*
Test::RequiredException::ice_staticId() noexcept
{
    return "::Test::RequiredException";
}

const char*
Test::RequiredException::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::RequiredException::ice_throw() const
{
    throw *this;
}

void
Test::RequiredException::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->ss);
    ostr->endSlice();
    OptionalException::_writeImpl(ostr);
}

void
Test::RequiredException::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->ss);
    istr->endSlice();
    OptionalException::_readImpl(istr);
}

const char*
Test::OptionalWithCustom::ice_staticId() noexcept
{
    return "::Test::OptionalWithCustom";
}

const char*
Test::OptionalWithCustom::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::OptionalWithCustom::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "l = ", this->l);
}

Ice::ValuePtr
Test::OptionalWithCustom::_iceCloneImpl() const
{
    return CloneEnabler<OptionalWithCustom>::clone(*this);
}

void
Test::OptionalWithCustom::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll({1}, this->l);
    ostr->endSlice();
}

void
Test::OptionalWithCustom::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll({1}, this->l);
    istr->endSlice();
}

const char*
Test::E::ice_staticId() noexcept
{
    return "::Test::E";
}

const char*
Test::E::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::E::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "fse = ", this->fse);
}

Ice::ValuePtr
Test::E::_iceCloneImpl() const
{
    return CloneEnabler<E>::clone(*this);
}

void
Test::E::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->fse);
    ostr->endSlice();
}

void
Test::E::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->fse);
    istr->endSlice();
}

const char*
Test::F::ice_staticId() noexcept
{
    return "::Test::F";
}

const char*
Test::F::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::F::ice_printFields(std::ostream& os) const
{
    E::ice_printFields(os);
    Ice::print(os << ", fsf = ", this->fsf);
}

Ice::ValuePtr
Test::F::_iceCloneImpl() const
{
    return CloneEnabler<F>::clone(*this);
}

void
Test::F::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll({1}, this->fsf);
    ostr->endSlice();
    E::_iceWriteImpl(ostr);
}

void
Test::F::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll({1}, this->fsf);
    istr->endSlice();
    E::_iceReadImpl(istr);
}

void
Test::G1::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "a = ", this->a);
}

std::ostream&
Test::operator<<(std::ostream& os, const ::Test::G1& value)
{
    os << "Test::G1{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

void
Test::G2::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "a = ", this->a);
}

std::ostream&
Test::operator<<(std::ostream& os, const ::Test::G2& value)
{
    os << "Test::G2{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
Test::G::ice_staticId() noexcept
{
    return "::Test::G";
}

const char*
Test::G::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::G::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "gg1Opt = ", this->gg1Opt);
    Ice::print(os << ", gg2 = ", this->gg2);
    Ice::print(os << ", gg2Opt = ", this->gg2Opt);
    Ice::print(os << ", gg1 = ", this->gg1);
}

Ice::ValuePtr
Test::G::_iceCloneImpl() const
{
    return CloneEnabler<G>::clone(*this);
}

void
Test::G::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->gg2, this->gg1);
    ostr->writeAll({0, 1}, this->gg2Opt, this->gg1Opt);
    ostr->endSlice();
}

void
Test::G::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->gg2, this->gg1);
    istr->readAll({0, 1}, this->gg2Opt, this->gg1Opt);
    istr->endSlice();
}

std::vector<std::string>
Test::MyInterface::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::Test::MyInterface"};
    return allTypeIds;
}

std::string
Test::MyInterface::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
Test::MyInterface::ice_staticId() noexcept
{
    return "::Test::MyInterface";
}

/// \cond INTERNAL
void
Test::MyInterface::_iceD_op(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->op(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::MyInterface::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 5> allOperations{"ice_id", "ice_ids", "ice_isA", "ice_ping", "op"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation);
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_op(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond

std::vector<std::string>
Test::Initial::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::Test::Initial"};
    return allTypeIds;
}

std::string
Test::Initial::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
Test::Initial::ice_staticId() noexcept
{
    return "::Test::Initial";
}

/// \cond INTERNAL
void
Test::Initial::_iceD_shutdown(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_pingPong(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    Ice::ValuePtr iceP_o;
    istr->readAll(iceP_o);
    istr->readPendingValues();
    istr->endEncapsulation();
    const Ice::ValuePtr ret = this->pingPong(std::move(iceP_o), request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opOptionalException(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<std::int32_t> iceP_a;
    std::optional<std::string> iceP_b;
    istr->readAll({1, 2}, iceP_a, iceP_b);
    istr->endEncapsulation();
    this->opOptionalException(iceP_a, std::move(iceP_b), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opDerivedException(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<std::int32_t> iceP_a;
    std::optional<std::string> iceP_b;
    istr->readAll({1, 2}, iceP_a, iceP_b);
    istr->endEncapsulation();
    this->opDerivedException(iceP_a, std::move(iceP_b), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opRequiredException(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<std::int32_t> iceP_a;
    std::optional<std::string> iceP_b;
    istr->readAll({1, 2}, iceP_a, iceP_b);
    istr->endEncapsulation();
    this->opRequiredException(iceP_a, std::move(iceP_b), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opByte(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<std::uint8_t> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<std::uint8_t> iceP_p3;
    const std::optional<std::uint8_t> ret = this->opByte(iceP_p1, iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opBool(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<bool> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<bool> iceP_p3;
    const std::optional<bool> ret = this->opBool(iceP_p1, iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opShort(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<std::int16_t> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<std::int16_t> iceP_p3;
    const std::optional<std::int16_t> ret = this->opShort(iceP_p1, iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opInt(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<std::int32_t> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<std::int32_t> iceP_p3;
    const std::optional<std::int32_t> ret = this->opInt(iceP_p1, iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opLong(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<std::int64_t> iceP_p1;
    istr->readAll({1}, iceP_p1);
    istr->endEncapsulation();
    std::optional<std::int64_t> iceP_p3;
    const std::optional<std::int64_t> ret = this->opLong(iceP_p1, iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({2, 3}, iceP_p3, ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opFloat(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<float> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<float> iceP_p3;
    const std::optional<float> ret = this->opFloat(iceP_p1, iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opDouble(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<double> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<double> iceP_p3;
    const std::optional<double> ret = this->opDouble(iceP_p1, iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opString(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<std::string> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<std::string> iceP_p3;
    const std::optional<std::string> ret = this->opString(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opMyEnum(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<MyEnum> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<MyEnum> iceP_p3;
    const std::optional<MyEnum> ret = this->opMyEnum(iceP_p1, iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opSmallStruct(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<SmallStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<SmallStruct> iceP_p3;
    const std::optional<SmallStruct> ret = this->opSmallStruct(iceP_p1, iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opFixedStruct(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<FixedStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<FixedStruct> iceP_p3;
    const std::optional<FixedStruct> ret = this->opFixedStruct(iceP_p1, iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opVarStruct(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<VarStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<VarStruct> iceP_p3;
    const std::optional<VarStruct> ret = this->opVarStruct(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opMyInterfaceProxy(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<MyInterfacePrx> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<MyInterfacePrx> iceP_p3;
    const std::optional<MyInterfacePrx> ret = this->opMyInterfaceProxy(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opOneOptional(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    OneOptionalPtr iceP_p1;
    istr->readAll(iceP_p1);
    istr->readPendingValues();
    istr->endEncapsulation();
    OneOptionalPtr iceP_p3;
    const OneOptionalPtr ret = this->opOneOptional(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_p3, ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opByteSeq(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<ByteSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<ByteSeq> iceP_p3;
    const std::optional<ByteSeq> ret = this->opByteSeq(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opBoolSeq(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<BoolSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<BoolSeq> iceP_p3;
    const std::optional<BoolSeq> ret = this->opBoolSeq(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opShortSeq(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<ShortSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<ShortSeq> iceP_p3;
    const std::optional<ShortSeq> ret = this->opShortSeq(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opIntSeq(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<IntSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<IntSeq> iceP_p3;
    const std::optional<IntSeq> ret = this->opIntSeq(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opLongSeq(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<LongSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<LongSeq> iceP_p3;
    const std::optional<LongSeq> ret = this->opLongSeq(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opFloatSeq(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<FloatSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<FloatSeq> iceP_p3;
    const std::optional<FloatSeq> ret = this->opFloatSeq(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opDoubleSeq(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<DoubleSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<DoubleSeq> iceP_p3;
    const std::optional<DoubleSeq> ret = this->opDoubleSeq(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opStringSeq(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<StringSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<StringSeq> iceP_p3;
    const std::optional<StringSeq> ret = this->opStringSeq(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opSmallStructSeq(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<SmallStructSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<SmallStructSeq> iceP_p3;
    const std::optional<SmallStructSeq> ret = this->opSmallStructSeq(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opSmallStructList(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<SmallStructList> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<SmallStructList> iceP_p3;
    const std::optional<SmallStructList> ret = this->opSmallStructList(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opFixedStructSeq(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<FixedStructSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<FixedStructSeq> iceP_p3;
    const std::optional<FixedStructSeq> ret = this->opFixedStructSeq(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opFixedStructList(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<FixedStructList> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<FixedStructList> iceP_p3;
    const std::optional<FixedStructList> ret = this->opFixedStructList(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opVarStructSeq(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<VarStructSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<VarStructSeq> iceP_p3;
    const std::optional<VarStructSeq> ret = this->opVarStructSeq(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opSerializable(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<Serializable> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<Serializable> iceP_p3;
    const std::optional<Serializable> ret = this->opSerializable(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opIntIntDict(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<IntIntDict> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<IntIntDict> iceP_p3;
    const std::optional<IntIntDict> ret = this->opIntIntDict(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opStringIntDict(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<StringIntDict> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    std::optional<StringIntDict> iceP_p3;
    const std::optional<StringIntDict> ret = this->opStringIntDict(std::move(iceP_p1), iceP_p3, request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll({1, 3}, ret, iceP_p3);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opClassAndUnknownOptional(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    APtr iceP_p;
    istr->readAll(iceP_p);
    istr->readPendingValues();
    istr->endEncapsulation();
    this->opClassAndUnknownOptional(std::move(iceP_p), request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opG(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    GPtr iceP_g;
    istr->readAll(iceP_g);
    istr->readPendingValues();
    istr->endEncapsulation();
    const GPtr ret = this->opG(std::move(iceP_g), request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
            ostr->writePendingValues();
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_opVoid(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->opVoid(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

Test::Initial::OpMStruct1MarshaledResult::OpMStruct1MarshaledResult(const std::optional<SmallStruct>& ret, const Ice::Current& current):
    MarshaledResult(current)
{
    Ice::OutputStream* ostr = &_ostr;
    ostr->startEncapsulation(current.encoding, std::nullopt);
    ostr->writeAll({1}, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
void
Test::Initial::_iceD_opMStruct1(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    sendResponse(Ice::OutgoingResponse{this->opMStruct1(request.current()).outputStream(), request.current()});
}
/// \endcond

Test::Initial::OpMStruct2MarshaledResult::OpMStruct2MarshaledResult(const std::optional<SmallStruct>& ret, const std::optional<SmallStruct>& iceP_p2, const Ice::Current& current):
    MarshaledResult(current)
{
    Ice::OutputStream* ostr = &_ostr;
    ostr->startEncapsulation(current.encoding, std::nullopt);
    ostr->writeAll({1, 3}, ret, iceP_p2);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
void
Test::Initial::_iceD_opMStruct2(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<SmallStruct> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    sendResponse(Ice::OutgoingResponse{this->opMStruct2(iceP_p1, request.current()).outputStream(), request.current()});
}
/// \endcond

Test::Initial::OpMSeq1MarshaledResult::OpMSeq1MarshaledResult(const std::optional<StringSeq>& ret, const Ice::Current& current):
    MarshaledResult(current)
{
    Ice::OutputStream* ostr = &_ostr;
    ostr->startEncapsulation(current.encoding, std::nullopt);
    ostr->writeAll({1}, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
void
Test::Initial::_iceD_opMSeq1(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    sendResponse(Ice::OutgoingResponse{this->opMSeq1(request.current()).outputStream(), request.current()});
}
/// \endcond

Test::Initial::OpMSeq2MarshaledResult::OpMSeq2MarshaledResult(const std::optional<StringSeq>& ret, const std::optional<StringSeq>& iceP_p2, const Ice::Current& current):
    MarshaledResult(current)
{
    Ice::OutputStream* ostr = &_ostr;
    ostr->startEncapsulation(current.encoding, std::nullopt);
    ostr->writeAll({1, 3}, ret, iceP_p2);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
void
Test::Initial::_iceD_opMSeq2(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<StringSeq> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    sendResponse(Ice::OutgoingResponse{this->opMSeq2(std::move(iceP_p1), request.current()).outputStream(), request.current()});
}
/// \endcond

Test::Initial::OpMDict1MarshaledResult::OpMDict1MarshaledResult(const std::optional<StringIntDict>& ret, const Ice::Current& current):
    MarshaledResult(current)
{
    Ice::OutputStream* ostr = &_ostr;
    ostr->startEncapsulation(current.encoding, std::nullopt);
    ostr->writeAll({1}, ret);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
void
Test::Initial::_iceD_opMDict1(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    sendResponse(Ice::OutgoingResponse{this->opMDict1(request.current()).outputStream(), request.current()});
}
/// \endcond

Test::Initial::OpMDict2MarshaledResult::OpMDict2MarshaledResult(const std::optional<StringIntDict>& ret, const std::optional<StringIntDict>& iceP_p2, const Ice::Current& current):
    MarshaledResult(current)
{
    Ice::OutputStream* ostr = &_ostr;
    ostr->startEncapsulation(current.encoding, std::nullopt);
    ostr->writeAll({1, 3}, ret, iceP_p2);
    ostr->endEncapsulation();
}

/// \cond INTERNAL
void
Test::Initial::_iceD_opMDict2(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    auto istr = &request.inputStream();
    istr->startEncapsulation();
    std::optional<StringIntDict> iceP_p1;
    istr->readAll({2}, iceP_p1);
    istr->endEncapsulation();
    sendResponse(Ice::OutgoingResponse{this->opMDict2(std::move(iceP_p1), request.current()).outputStream(), request.current()});
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_supportsJavaSerializable(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    const bool ret = this->supportsJavaSerializable(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 49> allOperations{"ice_id", "ice_ids", "ice_isA", "ice_ping", "opBool", "opBoolSeq", "opByte", "opByteSeq", "opClassAndUnknownOptional", "opDerivedException", "opDouble", "opDoubleSeq", "opFixedStruct", "opFixedStructList", "opFixedStructSeq", "opFloat", "opFloatSeq", "opG", "opInt", "opIntIntDict", "opIntSeq", "opLong", "opLongSeq", "opMDict1", "opMDict2", "opMSeq1", "opMSeq2", "opMStruct1", "opMStruct2", "opMyEnum", "opMyInterfaceProxy", "opOneOptional", "opOptionalException", "opRequiredException", "opSerializable", "opShort", "opShortSeq", "opSmallStruct", "opSmallStructList", "opSmallStructSeq", "opString", "opStringIntDict", "opStringSeq", "opVarStruct", "opVarStructSeq", "opVoid", "pingPong", "shutdown", "supportsJavaSerializable"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation);
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_opBool(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_opBoolSeq(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_opByte(request, std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_opByteSeq(request, std::move(sendResponse));
            break;
        }
        case 8:
        {
            _iceD_opClassAndUnknownOptional(request, std::move(sendResponse));
            break;
        }
        case 9:
        {
            _iceD_opDerivedException(request, std::move(sendResponse));
            break;
        }
        case 10:
        {
            _iceD_opDouble(request, std::move(sendResponse));
            break;
        }
        case 11:
        {
            _iceD_opDoubleSeq(request, std::move(sendResponse));
            break;
        }
        case 12:
        {
            _iceD_opFixedStruct(request, std::move(sendResponse));
            break;
        }
        case 13:
        {
            _iceD_opFixedStructList(request, std::move(sendResponse));
            break;
        }
        case 14:
        {
            _iceD_opFixedStructSeq(request, std::move(sendResponse));
            break;
        }
        case 15:
        {
            _iceD_opFloat(request, std::move(sendResponse));
            break;
        }
        case 16:
        {
            _iceD_opFloatSeq(request, std::move(sendResponse));
            break;
        }
        case 17:
        {
            _iceD_opG(request, std::move(sendResponse));
            break;
        }
        case 18:
        {
            _iceD_opInt(request, std::move(sendResponse));
            break;
        }
        case 19:
        {
            _iceD_opIntIntDict(request, std::move(sendResponse));
            break;
        }
        case 20:
        {
            _iceD_opIntSeq(request, std::move(sendResponse));
            break;
        }
        case 21:
        {
            _iceD_opLong(request, std::move(sendResponse));
            break;
        }
        case 22:
        {
            _iceD_opLongSeq(request, std::move(sendResponse));
            break;
        }
        case 23:
        {
            _iceD_opMDict1(request, std::move(sendResponse));
            break;
        }
        case 24:
        {
            _iceD_opMDict2(request, std::move(sendResponse));
            break;
        }
        case 25:
        {
            _iceD_opMSeq1(request, std::move(sendResponse));
            break;
        }
        case 26:
        {
            _iceD_opMSeq2(request, std::move(sendResponse));
            break;
        }
        case 27:
        {
            _iceD_opMStruct1(request, std::move(sendResponse));
            break;
        }
        case 28:
        {
            _iceD_opMStruct2(request, std::move(sendResponse));
            break;
        }
        case 29:
        {
            _iceD_opMyEnum(request, std::move(sendResponse));
            break;
        }
        case 30:
        {
            _iceD_opMyInterfaceProxy(request, std::move(sendResponse));
            break;
        }
        case 31:
        {
            _iceD_opOneOptional(request, std::move(sendResponse));
            break;
        }
        case 32:
        {
            _iceD_opOptionalException(request, std::move(sendResponse));
            break;
        }
        case 33:
        {
            _iceD_opRequiredException(request, std::move(sendResponse));
            break;
        }
        case 34:
        {
            _iceD_opSerializable(request, std::move(sendResponse));
            break;
        }
        case 35:
        {
            _iceD_opShort(request, std::move(sendResponse));
            break;
        }
        case 36:
        {
            _iceD_opShortSeq(request, std::move(sendResponse));
            break;
        }
        case 37:
        {
            _iceD_opSmallStruct(request, std::move(sendResponse));
            break;
        }
        case 38:
        {
            _iceD_opSmallStructList(request, std::move(sendResponse));
            break;
        }
        case 39:
        {
            _iceD_opSmallStructSeq(request, std::move(sendResponse));
            break;
        }
        case 40:
        {
            _iceD_opString(request, std::move(sendResponse));
            break;
        }
        case 41:
        {
            _iceD_opStringIntDict(request, std::move(sendResponse));
            break;
        }
        case 42:
        {
            _iceD_opStringSeq(request, std::move(sendResponse));
            break;
        }
        case 43:
        {
            _iceD_opVarStruct(request, std::move(sendResponse));
            break;
        }
        case 44:
        {
            _iceD_opVarStructSeq(request, std::move(sendResponse));
            break;
        }
        case 45:
        {
            _iceD_opVoid(request, std::move(sendResponse));
            break;
        }
        case 46:
        {
            _iceD_pingPong(request, std::move(sendResponse));
            break;
        }
        case 47:
        {
            _iceD_shutdown(request, std::move(sendResponse));
            break;
        }
        case 48:
        {
            _iceD_supportsJavaSerializable(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
/// \endcond
