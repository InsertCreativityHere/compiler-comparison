// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

// clang-format off

#ifndef Test_h_
#define Test_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

// NOLINTBEGIN(modernize-concat-nested-namespaces)

namespace Test
{
    class HoldPrx;
}

namespace Test
{
    class HoldPrx : public Ice::Proxy<HoldPrx, Ice::ObjectPrx>
    {
    public:
        /// Puts the adapter on hold, and optionally reactivates it.
        /// @param delay When less than 0, puts the adapter on hold indefinitely. When 0, puts the adapter on hold and
        /// immediately reactivates it. When greater than 0, starts a background task that sleeps for delay
        /// milliseconds, puts the adapter on hold and then immediately reactivates it.
        /// @param context The Context map to send with the invocation.
        void putOnHold(std::int32_t delay, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Puts the adapter on hold, and optionally reactivates it.
        /// @param delay When less than 0, puts the adapter on hold indefinitely. When 0, puts the adapter on hold and
        /// immediately reactivates it. When greater than 0, starts a background task that sleeps for delay
        /// milliseconds, puts the adapter on hold and then immediately reactivates it.
        /// @param context The Context map to send with the invocation.
        /// @return The future object for the invocation.
        [[nodiscard]] std::future<void> putOnHoldAsync(std::int32_t delay, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Puts the adapter on hold, and optionally reactivates it.
        /// @param delay When less than 0, puts the adapter on hold indefinitely. When 0, puts the adapter on hold and
        /// immediately reactivates it. When greater than 0, starts a background task that sleeps for delay
        /// milliseconds, puts the adapter on hold and then immediately reactivates it.
        /// @param response The response callback.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The Context map to send with the invocation.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> putOnHoldAsync(std::int32_t delay, std::function<void()> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_putOnHold(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, std::int32_t, const Ice::Context&) const;
        /// \endcond

        /// Starts a background task that calls waitForHold and activate on the adapter.
        /// @param context The Context map to send with the invocation.
        void waitForHold(const Ice::Context& context = Ice::noExplicitContext) const;

        /// Starts a background task that calls waitForHold and activate on the adapter.
        /// @param context The Context map to send with the invocation.
        /// @return The future object for the invocation.
        [[nodiscard]] std::future<void> waitForHoldAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        /// Starts a background task that calls waitForHold and activate on the adapter.
        /// @param response The response callback.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The Context map to send with the invocation.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> waitForHoldAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_waitForHold(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;
        /// \endcond

        /// Saves value as the last value.
        /// @param value The new value.
        /// @param expected The current value as expected by the caller.
        /// @param context The Context map to send with the invocation.
        void setOneway(std::int32_t value, std::int32_t expected, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Saves value as the last value.
        /// @param value The new value.
        /// @param expected The current value as expected by the caller.
        /// @param context The Context map to send with the invocation.
        /// @return The future object for the invocation.
        [[nodiscard]] std::future<void> setOnewayAsync(std::int32_t value, std::int32_t expected, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Saves value as the last value.
        /// @param value The new value.
        /// @param expected The current value as expected by the caller.
        /// @param response The response callback.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The Context map to send with the invocation.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> setOnewayAsync(std::int32_t value, std::int32_t expected, std::function<void()> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_setOneway(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, std::int32_t, std::int32_t, const Ice::Context&) const;
        /// \endcond

        /// Saves value as the last value after a delay.
        /// @param value The new value.
        /// @param delay The delay in milliseconds.
        /// @param context The Context map to send with the invocation.
        /// @return The previous value.
        std::int32_t set(std::int32_t value, std::int32_t delay, const Ice::Context& context = Ice::noExplicitContext) const; // NOLINT(modernize-use-nodiscard)

        /// Saves value as the last value after a delay.
        /// @param value The new value.
        /// @param delay The delay in milliseconds.
        /// @param context The Context map to send with the invocation.
        /// @return The future object for the invocation.
        [[nodiscard]] std::future<std::int32_t> setAsync(std::int32_t value, std::int32_t delay, const Ice::Context& context = Ice::noExplicitContext) const;

        /// Saves value as the last value after a delay.
        /// @param value The new value.
        /// @param delay The delay in milliseconds.
        /// @param response The response callback.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The Context map to send with the invocation.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> setAsync(std::int32_t value, std::int32_t delay, std::function<void(std::int32_t)> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_set(const std::shared_ptr<IceInternal::OutgoingAsyncT<std::int32_t>>&, std::int32_t, std::int32_t, const Ice::Context&) const;
        /// \endcond

        /// Shuts down the server.
        /// @param context The Context map to send with the invocation.
        void shutdown(const Ice::Context& context = Ice::noExplicitContext) const;

        /// Shuts down the server.
        /// @param context The Context map to send with the invocation.
        /// @return The future object for the invocation.
        [[nodiscard]] std::future<void> shutdownAsync(const Ice::Context& context = Ice::noExplicitContext) const;

        /// Shuts down the server.
        /// @param response The response callback.
        /// @param exception The exception callback.
        /// @param sent The sent callback.
        /// @param context The Context map to send with the invocation.
        /// @return A function that can be called to cancel the invocation locally.
        // NOLINTNEXTLINE(modernize-use-nodiscard)
        std::function<void()> shutdownAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception = nullptr, std::function<void(bool)> sent = nullptr, const Ice::Context& context = Ice::noExplicitContext) const;

        /// \cond INTERNAL
        void _iceI_shutdown(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>&, const Ice::Context&) const;
        /// \endcond

        /// Obtains the Slice type ID of this interface.
        /// @return The fully-scoped type ID.
        static const char* ice_staticId() noexcept;

        HoldPrx(const HoldPrx& other) noexcept : Ice::ObjectPrx(other) {} // NOLINT(modernize-use-equals-default)

        HoldPrx(HoldPrx&& other) noexcept : Ice::ObjectPrx(std::move(other)) {} // NOLINT(modernize-use-equals-default)

        HoldPrx(const Ice::CommunicatorPtr& communicator, std::string_view proxyString) : Ice::ObjectPrx(communicator, proxyString) {} // NOLINT(modernize-use-equals-default)

        ~HoldPrx() override;

        HoldPrx& operator=(const HoldPrx& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(rhs);
            }
            return *this;
        }

        HoldPrx& operator=(HoldPrx&& rhs) noexcept
        {
            if (this != &rhs)
            {
                Ice::ObjectPrx::operator=(std::move(rhs));
            }
            return *this;
        }

        /// \cond INTERNAL
        static HoldPrx _fromReference(IceInternal::ReferencePtr ref) { return HoldPrx(std::move(ref)); }

    protected:
        HoldPrx() = default;

        explicit HoldPrx(IceInternal::ReferencePtr&& ref) : Ice::ObjectPrx(std::move(ref))
        {
        }
        /// \endcond
    };
}

namespace Test
{
    class Hold : public virtual Ice::Object
    {
    public:
        using ProxyType = HoldPrx;

        /// Obtains a list of the Slice type IDs representing the interfaces supported by this object.
        /// @param current The Current object for the invocation.
        /// @return A list of fully-scoped type IDs.
        [[nodiscard]] std::vector<std::string> ice_ids(const Ice::Current& current) const override;

        /// Obtains a Slice type ID representing the most-derived interface supported by this object.
        /// @param current The Current object for the invocation.
        /// @return A fully-scoped type ID.
        [[nodiscard]] std::string ice_id(const Ice::Current& current) const override;

        /// Obtains the Slice type ID corresponding to this interface.
        /// @return A fully-scoped type ID.
        static const char* ice_staticId() noexcept;

        /// Puts the adapter on hold, and optionally reactivates it.
        /// @param delay When less than 0, puts the adapter on hold indefinitely. When 0, puts the adapter on hold and
        /// immediately reactivates it. When greater than 0, starts a background task that sleeps for delay
        /// milliseconds, puts the adapter on hold and then immediately reactivates it.
        /// @param current The Current object for the invocation.
        virtual void putOnHold(std::int32_t delay, const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_putOnHold(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        /// Starts a background task that calls waitForHold and activate on the adapter.
        /// @param current The Current object for the invocation.
        virtual void waitForHold(const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_waitForHold(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        /// Saves value as the last value.
        /// @param value The new value.
        /// @param expected The current value as expected by the caller.
        /// @param current The Current object for the invocation.
        virtual void setOneway(std::int32_t value, std::int32_t expected, const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_setOneway(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        /// Saves value as the last value after a delay.
        /// @param value The new value.
        /// @param delay The delay in milliseconds.
        /// @param current The Current object for the invocation.
        /// @return The previous value.
        virtual std::int32_t set(std::int32_t value, std::int32_t delay, const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_set(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        /// Shuts down the server.
        /// @param current The Current object for the invocation.
        virtual void shutdown(const Ice::Current& current) = 0;

        /// \cond INTERNAL
        void _iceD_shutdown(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>);
        /// \endcond

        void dispatch(Ice::IncomingRequest&, std::function<void(Ice::OutgoingResponse)>) override;
    };

    using HoldPtr = std::shared_ptr<Hold>;
}

// NOLINTEND(modernize-concat-nested-namespaces)

#include <Ice/PopDisableWarnings.h>
#endif
