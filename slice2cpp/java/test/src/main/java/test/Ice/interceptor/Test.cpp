//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::InvalidInputException> iceC_Test_InvalidInputException_init("::Test::InvalidInputException");

const ::std::string iceC_Test_MyObject_ids[2] =
{
    "::Ice::Object",
    "::Test::MyObject"
};
const ::std::string iceC_Test_MyObject_ops[] =
{
    "add",
    "addWithRetry",
    "amdAdd",
    "amdAddWithRetry",
    "amdBadAdd",
    "amdBadSystemAdd",
    "amdNotExistAdd",
    "badAdd",
    "badSystemAdd",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "notExistAdd"
};
const ::std::string iceC_Test_MyObject_add_name = "add";
const ::std::string iceC_Test_MyObject_addWithRetry_name = "addWithRetry";
const ::std::string iceC_Test_MyObject_badAdd_name = "badAdd";
const ::std::string iceC_Test_MyObject_notExistAdd_name = "notExistAdd";
const ::std::string iceC_Test_MyObject_badSystemAdd_name = "badSystemAdd";
const ::std::string iceC_Test_MyObject_amdAdd_name = "amdAdd";
const ::std::string iceC_Test_MyObject_amdAddWithRetry_name = "amdAddWithRetry";
const ::std::string iceC_Test_MyObject_amdBadAdd_name = "amdBadAdd";
const ::std::string iceC_Test_MyObject_amdNotExistAdd_name = "amdNotExistAdd";
const ::std::string iceC_Test_MyObject_amdBadSystemAdd_name = "amdBadSystemAdd";

}

Test::InvalidInputException::~InvalidInputException()
{
}

const ::std::string&
Test::InvalidInputException::ice_staticId()
{
    static const ::std::string typeId = "::Test::InvalidInputException";
    return typeId;
}

bool
Test::MyObject::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyObject_ids, iceC_Test_MyObject_ids + 2, s);
}

::std::vector<::std::string>
Test::MyObject::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_MyObject_ids[0], &iceC_Test_MyObject_ids[2]);
}

::std::string
Test::MyObject::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyObject::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyObject";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MyObject::_iceD_add(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_x;
    int iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    int ret = this->add(iceP_x, iceP_y, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_addWithRetry(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_x;
    int iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    int ret = this->addWithRetry(iceP_x, iceP_y, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_badAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_x;
    int iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    int ret = this->badAdd(iceP_x, iceP_y, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_notExistAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_x;
    int iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    int ret = this->notExistAdd(iceP_x, iceP_y, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_badSystemAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_x;
    int iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    int ret = this->badSystemAdd(iceP_x, iceP_y, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_amdAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_x;
    int iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->amdAddAsync(iceP_x, iceP_y, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_amdAddWithRetry(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_x;
    int iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->amdAddWithRetryAsync(iceP_x, iceP_y, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_amdBadAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_x;
    int iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->amdBadAddAsync(iceP_x, iceP_y, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_amdNotExistAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_x;
    int iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->amdNotExistAddAsync(iceP_x, iceP_y, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_amdBadSystemAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_x;
    int iceP_y;
    istr->readAll(iceP_x, iceP_y);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->amdBadSystemAddAsync(iceP_x, iceP_y, responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MyObject_ops, iceC_Test_MyObject_ops + 14, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MyObject_ops)
    {
        case 0:
        {
            return _iceD_add(in, current);
        }
        case 1:
        {
            return _iceD_addWithRetry(in, current);
        }
        case 2:
        {
            return _iceD_amdAdd(in, current);
        }
        case 3:
        {
            return _iceD_amdAddWithRetry(in, current);
        }
        case 4:
        {
            return _iceD_amdBadAdd(in, current);
        }
        case 5:
        {
            return _iceD_amdBadSystemAdd(in, current);
        }
        case 6:
        {
            return _iceD_amdNotExistAdd(in, current);
        }
        case 7:
        {
            return _iceD_badAdd(in, current);
        }
        case 8:
        {
            return _iceD_badSystemAdd(in, current);
        }
        case 9:
        {
            return _iceD_ice_id(in, current);
        }
        case 10:
        {
            return _iceD_ice_ids(in, current);
        }
        case 11:
        {
            return _iceD_ice_isA(in, current);
        }
        case 12:
        {
            return _iceD_ice_ping(in, current);
        }
        case 13:
        {
            return _iceD_notExistAdd(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_add(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_x, int iceP_y, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyObject_add_name);
    outAsync->invoke(iceC_Test_MyObject_add_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_addWithRetry(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_x, int iceP_y, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyObject_addWithRetry_name);
    outAsync->invoke(iceC_Test_MyObject_addWithRetry_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_badAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_x, int iceP_y, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyObject_badAdd_name);
    outAsync->invoke(iceC_Test_MyObject_badAdd_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InvalidInputException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_notExistAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_x, int iceP_y, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyObject_notExistAdd_name);
    outAsync->invoke(iceC_Test_MyObject_notExistAdd_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_badSystemAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_x, int iceP_y, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyObject_badSystemAdd_name);
    outAsync->invoke(iceC_Test_MyObject_badSystemAdd_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_amdAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_x, int iceP_y, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyObject_amdAdd_name);
    outAsync->invoke(iceC_Test_MyObject_amdAdd_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_amdAddWithRetry(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_x, int iceP_y, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyObject_amdAddWithRetry_name);
    outAsync->invoke(iceC_Test_MyObject_amdAddWithRetry_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_amdBadAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_x, int iceP_y, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyObject_amdBadAdd_name);
    outAsync->invoke(iceC_Test_MyObject_amdBadAdd_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const InvalidInputException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_amdNotExistAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_x, int iceP_y, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyObject_amdNotExistAdd_name);
    outAsync->invoke(iceC_Test_MyObject_amdNotExistAdd_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::MyObjectPrx::_iceI_amdBadSystemAdd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_x, int iceP_y, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_MyObject_amdBadSystemAdd_name);
    outAsync->invoke(iceC_Test_MyObject_amdBadSystemAdd_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_x, iceP_y);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::MyObjectPrx::_newInstance() const
{
    return ::IceInternal::createProxy<MyObjectPrx>();
}
/// \endcond

const ::std::string&
Test::MyObjectPrx::ice_staticId()
{
    return MyObject::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_MyObject_add_name = "add";

const ::std::string iceC_Test_MyObject_addWithRetry_name = "addWithRetry";

const ::std::string iceC_Test_MyObject_badAdd_name = "badAdd";

const ::std::string iceC_Test_MyObject_notExistAdd_name = "notExistAdd";

const ::std::string iceC_Test_MyObject_badSystemAdd_name = "badSystemAdd";

const ::std::string iceC_Test_MyObject_amdAdd_name = "amdAdd";

const ::std::string iceC_Test_MyObject_amdAddWithRetry_name = "amdAddWithRetry";

const ::std::string iceC_Test_MyObject_amdBadAdd_name = "amdBadAdd";

const ::std::string iceC_Test_MyObject_amdNotExistAdd_name = "amdNotExistAdd";

const ::std::string iceC_Test_MyObject_amdBadSystemAdd_name = "amdBadSystemAdd";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::InvalidInputException> iceC_Test_InvalidInputException_init("::Test::InvalidInputException");

}

Test::InvalidInputException::InvalidInputException(const ::std::string& message) :
    ::Ice::UserException(),
    message(message)
{
}
Test::InvalidInputException::~InvalidInputException()
{
}

::std::string
Test::InvalidInputException::ice_id() const
{
    return "::Test::InvalidInputException";
}

Test::InvalidInputException*
Test::InvalidInputException::ice_clone() const
{
    return new InvalidInputException(*this);
}

void
Test::InvalidInputException::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Test::InvalidInputException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::InvalidInputException", -1, true);
    ::Ice::StreamWriter< InvalidInputException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::InvalidInputException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< InvalidInputException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

Test::AMD_MyObject_amdAdd::~AMD_MyObject_amdAdd()
{
}

Test::AMD_MyObject_amdAddWithRetry::~AMD_MyObject_amdAddWithRetry()
{
}

Test::AMD_MyObject_amdBadAdd::~AMD_MyObject_amdBadAdd()
{
}

Test::AMD_MyObject_amdNotExistAdd::~AMD_MyObject_amdNotExistAdd()
{
}

Test::AMD_MyObject_amdBadSystemAdd::~AMD_MyObject_amdBadSystemAdd()
{
}

/// \cond INTERNAL
IceAsync::Test::AMD_MyObject_amdAdd::AMD_MyObject_amdAdd(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyObject_amdAdd::ice_response(::Ice::Int ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyObject_amdAddWithRetry::AMD_MyObject_amdAddWithRetry(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyObject_amdAddWithRetry::ice_response(::Ice::Int ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyObject_amdBadAdd::AMD_MyObject_amdBadAdd(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyObject_amdBadAdd::ice_response(::Ice::Int ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyObject_amdNotExistAdd::AMD_MyObject_amdNotExistAdd(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyObject_amdNotExistAdd::ice_response(::Ice::Int ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::Test::AMD_MyObject_amdBadSystemAdd::AMD_MyObject_amdBadSystemAdd(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Test::AMD_MyObject_amdBadSystemAdd::ice_response(::Ice::Int ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(MyObject* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< MyObject>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new MyObject;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::MyObject::_iceI_begin_add(::Ice::Int iceP_x, ::Ice::Int iceP_y, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyObject_add_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyObject_add_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyObject_add_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_y);
        result->endWriteParams();
        result->invoke(iceC_Test_MyObject_add_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::MyObject::end_add(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyObject_add_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyObject::_iceI_begin_addWithRetry(::Ice::Int iceP_x, ::Ice::Int iceP_y, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyObject_addWithRetry_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyObject_addWithRetry_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyObject_addWithRetry_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_y);
        result->endWriteParams();
        result->invoke(iceC_Test_MyObject_addWithRetry_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::MyObject::end_addWithRetry(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyObject_addWithRetry_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyObject::_iceI_begin_badAdd(::Ice::Int iceP_x, ::Ice::Int iceP_y, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyObject_badAdd_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyObject_badAdd_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyObject_badAdd_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_y);
        result->endWriteParams();
        result->invoke(iceC_Test_MyObject_badAdd_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::MyObject::end_badAdd(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyObject_badAdd_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::InvalidInputException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyObject::_iceI_begin_notExistAdd(::Ice::Int iceP_x, ::Ice::Int iceP_y, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyObject_notExistAdd_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyObject_notExistAdd_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyObject_notExistAdd_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_y);
        result->endWriteParams();
        result->invoke(iceC_Test_MyObject_notExistAdd_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::MyObject::end_notExistAdd(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyObject_notExistAdd_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyObject::_iceI_begin_badSystemAdd(::Ice::Int iceP_x, ::Ice::Int iceP_y, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyObject_badSystemAdd_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyObject_badSystemAdd_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyObject_badSystemAdd_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_y);
        result->endWriteParams();
        result->invoke(iceC_Test_MyObject_badSystemAdd_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::MyObject::end_badSystemAdd(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyObject_badSystemAdd_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyObject::_iceI_begin_amdAdd(::Ice::Int iceP_x, ::Ice::Int iceP_y, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyObject_amdAdd_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyObject_amdAdd_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyObject_amdAdd_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_y);
        result->endWriteParams();
        result->invoke(iceC_Test_MyObject_amdAdd_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::MyObject::end_amdAdd(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyObject_amdAdd_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyObject::_iceI_begin_amdAddWithRetry(::Ice::Int iceP_x, ::Ice::Int iceP_y, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyObject_amdAddWithRetry_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyObject_amdAddWithRetry_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyObject_amdAddWithRetry_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_y);
        result->endWriteParams();
        result->invoke(iceC_Test_MyObject_amdAddWithRetry_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::MyObject::end_amdAddWithRetry(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyObject_amdAddWithRetry_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyObject::_iceI_begin_amdBadAdd(::Ice::Int iceP_x, ::Ice::Int iceP_y, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyObject_amdBadAdd_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyObject_amdBadAdd_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyObject_amdBadAdd_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_y);
        result->endWriteParams();
        result->invoke(iceC_Test_MyObject_amdBadAdd_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::MyObject::end_amdBadAdd(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyObject_amdBadAdd_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Test::InvalidInputException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyObject::_iceI_begin_amdNotExistAdd(::Ice::Int iceP_x, ::Ice::Int iceP_y, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyObject_amdNotExistAdd_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyObject_amdNotExistAdd_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyObject_amdNotExistAdd_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_y);
        result->endWriteParams();
        result->invoke(iceC_Test_MyObject_amdNotExistAdd_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::MyObject::end_amdNotExistAdd(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyObject_amdNotExistAdd_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::MyObject::_iceI_begin_amdBadSystemAdd(::Ice::Int iceP_x, ::Ice::Int iceP_y, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_MyObject_amdBadSystemAdd_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_MyObject_amdBadSystemAdd_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_MyObject_amdBadSystemAdd_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_x);
        ostr->write(iceP_y);
        result->endWriteParams();
        result->invoke(iceC_Test_MyObject_amdBadSystemAdd_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Test::MyObject::end_amdBadSystemAdd(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_MyObject_amdBadSystemAdd_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::MyObject::_newInstance() const
{
    return new MyObject;
}
/// \endcond

const ::std::string&
IceProxy::Test::MyObject::ice_staticId()
{
    return ::Test::MyObject::ice_staticId();
}

Test::MyObject::~MyObject()
{
}

namespace
{
const ::std::string iceC_Test_MyObject_ids[2] =
{
    "::Ice::Object",
    "::Test::MyObject"
};

}

bool
Test::MyObject::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_MyObject_ids, iceC_Test_MyObject_ids + 2, s);
}

::std::vector< ::std::string>
Test::MyObject::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_MyObject_ids[0], &iceC_Test_MyObject_ids[2]);
}

const ::std::string&
Test::MyObject::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::MyObject::ice_staticId()
{
    static const ::std::string typeId = "::Test::MyObject";
    return typeId;
}

/// \cond INTERNAL
bool
Test::MyObject::_iceD_add(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_x;
    ::Ice::Int iceP_y;
    istr->read(iceP_x);
    istr->read(iceP_y);
    inS.endReadParams();
    ::Ice::Int ret = this->add(iceP_x, iceP_y, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_addWithRetry(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_x;
    ::Ice::Int iceP_y;
    istr->read(iceP_x);
    istr->read(iceP_y);
    inS.endReadParams();
    ::Ice::Int ret = this->addWithRetry(iceP_x, iceP_y, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_badAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_x;
    ::Ice::Int iceP_y;
    istr->read(iceP_x);
    istr->read(iceP_y);
    inS.endReadParams();
    ::Ice::Int ret = this->badAdd(iceP_x, iceP_y, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_notExistAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_x;
    ::Ice::Int iceP_y;
    istr->read(iceP_x);
    istr->read(iceP_y);
    inS.endReadParams();
    ::Ice::Int ret = this->notExistAdd(iceP_x, iceP_y, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_badSystemAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_x;
    ::Ice::Int iceP_y;
    istr->read(iceP_x);
    istr->read(iceP_y);
    inS.endReadParams();
    ::Ice::Int ret = this->badSystemAdd(iceP_x, iceP_y, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_amdAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_x;
    ::Ice::Int iceP_y;
    istr->read(iceP_x);
    istr->read(iceP_y);
    inS.endReadParams();
    this->amdAdd_async(new IceAsync::Test::AMD_MyObject_amdAdd(inS), iceP_x, iceP_y, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_amdAddWithRetry(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_x;
    ::Ice::Int iceP_y;
    istr->read(iceP_x);
    istr->read(iceP_y);
    inS.endReadParams();
    this->amdAddWithRetry_async(new IceAsync::Test::AMD_MyObject_amdAddWithRetry(inS), iceP_x, iceP_y, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_amdBadAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_x;
    ::Ice::Int iceP_y;
    istr->read(iceP_x);
    istr->read(iceP_y);
    inS.endReadParams();
    this->amdBadAdd_async(new IceAsync::Test::AMD_MyObject_amdBadAdd(inS), iceP_x, iceP_y, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_amdNotExistAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_x;
    ::Ice::Int iceP_y;
    istr->read(iceP_x);
    istr->read(iceP_y);
    inS.endReadParams();
    this->amdNotExistAdd_async(new IceAsync::Test::AMD_MyObject_amdNotExistAdd(inS), iceP_x, iceP_y, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
Test::MyObject::_iceD_amdBadSystemAdd(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_x;
    ::Ice::Int iceP_y;
    istr->read(iceP_x);
    istr->read(iceP_y);
    inS.endReadParams();
    this->amdBadSystemAdd_async(new IceAsync::Test::AMD_MyObject_amdBadSystemAdd(inS), iceP_x, iceP_y, current);
    return false;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_MyObject_all[] =
{
    "add",
    "addWithRetry",
    "amdAdd",
    "amdAddWithRetry",
    "amdBadAdd",
    "amdBadSystemAdd",
    "amdNotExistAdd",
    "badAdd",
    "badSystemAdd",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "notExistAdd"
};

}

/// \cond INTERNAL
bool
Test::MyObject::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_MyObject_all, iceC_Test_MyObject_all + 14, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_MyObject_all)
    {
        case 0:
        {
            return _iceD_add(in, current);
        }
        case 1:
        {
            return _iceD_addWithRetry(in, current);
        }
        case 2:
        {
            return _iceD_amdAdd(in, current);
        }
        case 3:
        {
            return _iceD_amdAddWithRetry(in, current);
        }
        case 4:
        {
            return _iceD_amdBadAdd(in, current);
        }
        case 5:
        {
            return _iceD_amdBadSystemAdd(in, current);
        }
        case 6:
        {
            return _iceD_amdNotExistAdd(in, current);
        }
        case 7:
        {
            return _iceD_badAdd(in, current);
        }
        case 8:
        {
            return _iceD_badSystemAdd(in, current);
        }
        case 9:
        {
            return _iceD_ice_id(in, current);
        }
        case 10:
        {
            return _iceD_ice_ids(in, current);
        }
        case 11:
        {
            return _iceD_ice_isA(in, current);
        }
        case 12:
        {
            return _iceD_ice_ping(in, current);
        }
        case 13:
        {
            return _iceD_notExistAdd(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

namespace Ice
{
}

#endif
