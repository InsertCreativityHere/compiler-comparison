// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#define ICE_BUILDING_GENERATED_CODE
#include "Test.h"
#include <Ice/AsyncResponseHandler.h>
#include <Ice/FactoryTable.h>
#include <Ice/OutgoingAsync.h>
#include <algorithm>
#include <array>

#if defined(_MSC_VER)
#   pragma warning(disable : 4458) // declaration of ... hides class member
#   pragma warning(disable : 4996) // ... was declared deprecated
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#   pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

std::ostream&
Test::operator<<(std::ostream& os, MyEnum value)
{
    switch (value)
    {
        case MyEnum::enum1:
            return os << "enum1";
        case MyEnum::enum2:
            return os << "enum2";
        case MyEnum::enum3:
            return os << "enum3";
        default:
            return os << static_cast<std::int32_t>(value);
    }
}

namespace
{
    const IceInternal::FactoryTableInit iceC_factoryTableInit;
    const IceInternal::DefaultValueFactoryInit<::Test::Base> iceC_Test_Base_init("::Test::Base");
    const IceInternal::DefaultValueFactoryInit<::Test::Derived> iceC_Test_Derived_init("::Test::Derived");
    const IceInternal::DefaultUserExceptionFactoryInit<::Test::Ex> iceC_Test_Ex_init("::Test::Ex");
}

::Test::ByteS
Test::InitialPrx::getStruct1(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<ByteS>(true, this, &InitialPrx::_iceI_getStruct1, context).get();
}

std::future<::Test::ByteS>
Test::InitialPrx::getStruct1Async(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<ByteS>(false, this, &InitialPrx::_iceI_getStruct1, context);
}

std::function<void()>
Test::InitialPrx::getStruct1Async(std::function<void(::Test::ByteS)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<ByteS>(std::move(response), std::move(exception), std::move(sent), this, &Test::InitialPrx::_iceI_getStruct1, context);
}

void
Test::InitialPrx::_iceI_getStruct1(const std::shared_ptr<IceInternal::OutgoingAsyncT<ByteS>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getStruct1";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

::Test::ByteS
Test::InitialPrx::getBase(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<ByteS>(true, this, &InitialPrx::_iceI_getBase, context).get();
}

std::future<::Test::ByteS>
Test::InitialPrx::getBaseAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<ByteS>(false, this, &InitialPrx::_iceI_getBase, context);
}

std::function<void()>
Test::InitialPrx::getBaseAsync(std::function<void(::Test::ByteS)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<ByteS>(std::move(response), std::move(exception), std::move(sent), this, &Test::InitialPrx::_iceI_getBase, context);
}

void
Test::InitialPrx::_iceI_getBase(const std::shared_ptr<IceInternal::OutgoingAsyncT<ByteS>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getBase";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

::Test::ByteS
Test::InitialPrx::getEx(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<ByteS>(true, this, &InitialPrx::_iceI_getEx, context).get();
}

std::future<::Test::ByteS>
Test::InitialPrx::getExAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<ByteS>(false, this, &InitialPrx::_iceI_getEx, context);
}

std::function<void()>
Test::InitialPrx::getExAsync(std::function<void(::Test::ByteS)> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<ByteS>(std::move(response), std::move(exception), std::move(sent), this, &Test::InitialPrx::_iceI_getEx, context);
}

void
Test::InitialPrx::_iceI_getEx(const std::shared_ptr<IceInternal::OutgoingAsyncT<ByteS>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "getEx";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

void
Test::InitialPrx::shutdown(const Ice::Context& context) const
{
    IceInternal::makePromiseOutgoing<void>(true, this, &InitialPrx::_iceI_shutdown, context).get();
}

std::future<void>
Test::InitialPrx::shutdownAsync(const Ice::Context& context) const
{
    return IceInternal::makePromiseOutgoing<void>(false, this, &InitialPrx::_iceI_shutdown, context);
}

std::function<void()>
Test::InitialPrx::shutdownAsync(std::function<void()> response, std::function<void(std::exception_ptr)> exception, std::function<void(bool)> sent, const Ice::Context& context) const
{
    return IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(exception), std::move(sent), this, &Test::InitialPrx::_iceI_shutdown, context);
}

void
Test::InitialPrx::_iceI_shutdown(const std::shared_ptr<IceInternal::OutgoingAsyncT<void>>& outAsync, const Ice::Context& context) const
{
    static constexpr std::string_view operationName = "shutdown";

    outAsync->invoke(operationName, Ice::OperationMode::Normal, std::nullopt, context,
        nullptr,
        nullptr);
}

Test::InitialPrx::~InitialPrx() = default;

const char*
Test::InitialPrx::ice_staticId() noexcept
{
    return "::Test::Initial";
}

void
Test::Struct1::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "bo = ", this->bo);
    Ice::print(os << ", by = ", this->by);
    Ice::print(os << ", sh = ", this->sh);
    Ice::print(os << ", i = ", this->i);
    Ice::print(os << ", l = ", this->l);
    Ice::print(os << ", f = ", this->f);
    Ice::print(os << ", d = ", this->d);
    Ice::print(os << ", str = ", this->str);
    Ice::print(os << ", e = ", this->e);
    Ice::print(os << ", p = ", this->p);
}

std::ostream&
Test::operator<<(std::ostream& os, const ::Test::Struct1& value)
{
    os << "Test::Struct1{";
    value.ice_printFields(os);
    os << '}';
    return os;
}

const char*
Test::Base::ice_staticId() noexcept
{
    return "::Test::Base";
}

const char*
Test::Base::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::Base::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "b = ", this->b);
    Ice::print(os << ", o = ", this->o);
    Ice::print(os << ", s = ", this->s);
    Ice::print(os << ", seq1 = ", this->seq1);
    Ice::print(os << ", seq2 = ", this->seq2);
    Ice::print(os << ", seq3 = ", this->seq3);
    Ice::print(os << ", seq4 = ", this->seq4);
    Ice::print(os << ", d1 = ", this->d1);
    Ice::print(os << ", d2 = ", this->d2);
    Ice::print(os << ", d3 = ", this->d3);
    Ice::print(os << ", d4 = ", this->d4);
}

Ice::ValuePtr
Test::Base::_iceCloneImpl() const
{
    return CloneEnabler<Base>::clone(*this);
}

void
Test::Base::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->b, this->o, this->s, this->seq1, this->seq2, this->seq3, this->seq4, this->d1, this->d2, this->d3, this->d4);
    ostr->endSlice();
}

void
Test::Base::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->b, this->o, this->s, this->seq1, this->seq2, this->seq3, this->seq4, this->d1, this->d2, this->d3, this->d4);
    istr->endSlice();
}

const char*
Test::Derived::ice_staticId() noexcept
{
    return "::Test::Derived";
}

const char*
Test::Derived::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::Derived::ice_printFields(std::ostream& os) const
{
    Base::ice_printFields(os);
    Ice::print(os << ", p = ", this->p);
}

Ice::ValuePtr
Test::Derived::_iceCloneImpl() const
{
    return CloneEnabler<Derived>::clone(*this);
}

void
Test::Derived::_iceWriteImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ostr->writeAll(this->p);
    ostr->endSlice();
    Base::_iceWriteImpl(ostr);
}

void
Test::Derived::_iceReadImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->p);
    istr->endSlice();
    Base::_iceReadImpl(istr);
}

void
Test::Ex::ice_printFields(std::ostream& os) const
{
    Ice::print(os << "s = ", this->s);
    Ice::print(os << ", b = ", this->b);
}

const char*
Test::Ex::ice_staticId() noexcept
{
    return "::Test::Ex";
}

const char*
Test::Ex::ice_id() const noexcept
{
    return ice_staticId();
}

void
Test::Ex::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
bool
Test::Ex::_usesClasses() const
{
    return true;
}
/// \endcond

void
Test::Ex::_writeImpl(Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ostr->writeAll(this->s, this->b);
    ostr->endSlice();
}

void
Test::Ex::_readImpl(Ice::InputStream* istr)
{
    istr->startSlice();
    istr->readAll(this->s, this->b);
    istr->endSlice();
}

std::vector<std::string>
Test::Initial::ice_ids(const Ice::Current&) const
{
    static const std::vector<std::string> allTypeIds = {"::Ice::Object", "::Test::Initial"};
    return allTypeIds;
}

std::string
Test::Initial::ice_id(const Ice::Current&) const
{
    return std::string{ice_staticId()};
}

const char*
Test::Initial::ice_staticId() noexcept
{
    return "::Test::Initial";
}

/// \cond INTERNAL
void
Test::Initial::_iceD_getStruct1(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    const ByteS ret = this->getStruct1(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getBase(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    const ByteS ret = this->getBase(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_getEx(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    const ByteS ret = this->getEx(request.current());
    sendResponse(Ice::makeOutgoingResponse([&](Ice::OutputStream* ostr)
        {
            ostr->writeAll(ret);
        },
        request.current()));
}
/// \endcond

/// \cond INTERNAL
void
Test::Initial::_iceD_shutdown(
    Ice::IncomingRequest& request,
    std::function<void(Ice::OutgoingResponse)> sendResponse) // NOLINT(performance-unnecessary-value-param)
{
    _iceCheckMode(Ice::OperationMode::Normal, request.current().mode);
    request.inputStream().skipEmptyEncapsulation();
    this->shutdown(request.current());
    sendResponse(Ice::makeEmptyOutgoingResponse(request.current()));
}
/// \endcond

void
Test::Initial::dispatch(Ice::IncomingRequest& request, std::function<void(Ice::OutgoingResponse)> sendResponse)
{
    static constexpr std::array<std::string_view, 8> allOperations{"getBase", "getEx", "getStruct1", "ice_id", "ice_ids", "ice_isA", "ice_ping", "shutdown"};

    const Ice::Current& current = request.current();
    auto r = std::equal_range(allOperations.begin(), allOperations.end(), current.operation);
    if (r.first == r.second)
    {
        sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        return;
    }

    switch (r.first - allOperations.begin())
    {
        case 0:
        {
            _iceD_getBase(request, std::move(sendResponse));
            break;
        }
        case 1:
        {
            _iceD_getEx(request, std::move(sendResponse));
            break;
        }
        case 2:
        {
            _iceD_getStruct1(request, std::move(sendResponse));
            break;
        }
        case 3:
        {
            _iceD_ice_id(request, std::move(sendResponse));
            break;
        }
        case 4:
        {
            _iceD_ice_ids(request, std::move(sendResponse));
            break;
        }
        case 5:
        {
            _iceD_ice_isA(request, std::move(sendResponse));
            break;
        }
        case 6:
        {
            _iceD_ice_ping(request, std::move(sendResponse));
            break;
        }
        case 7:
        {
            _iceD_shutdown(request, std::move(sendResponse));
            break;
        }
        default:
        {
            assert(false);
            sendResponse(Ice::makeOutgoingResponse(std::make_exception_ptr(Ice::OperationNotExistException{__FILE__, __LINE__}), current));
        }
    }
}
