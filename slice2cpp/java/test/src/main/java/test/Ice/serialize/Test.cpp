//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Test.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 10
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Test::Base> iceC_Test_Base_init("::Test::Base");

const ::IceInternal::DefaultValueFactoryInit<::Test::Derived> iceC_Test_Derived_init("::Test::Derived");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Test::Ex> iceC_Test_Ex_init("::Test::Ex");

const ::std::string iceC_Test_Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};
const ::std::string iceC_Test_Initial_ops[] =
{
    "getBase",
    "getEx",
    "getStruct1",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown"
};
const ::std::string iceC_Test_Initial_getStruct1_name = "getStruct1";
const ::std::string iceC_Test_Initial_getBase_name = "getBase";
const ::std::string iceC_Test_Initial_getEx_name = "getEx";
const ::std::string iceC_Test_Initial_shutdown_name = "shutdown";

}

Test::Ex::~Ex()
{
}

const ::std::string&
Test::Ex::ice_staticId()
{
    static const ::std::string typeId = "::Test::Ex";
    return typeId;
}

/// \cond STREAM
bool
Test::Ex::_usesClasses() const
{
    return true;
}
/// \endcond

bool
Test::Initial::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial_ids, iceC_Test_Initial_ids + 2, s);
}

::std::vector<::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Test_Initial_ids[0], &iceC_Test_Initial_ids[2]);
}

::std::string
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_getStruct1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ByteS ret = this->getStruct1(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ByteS ret = this->getBase(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ByteS ret = this->getEx(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial_ops, iceC_Test_Initial_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial_ops)
    {
        case 0:
        {
            return _iceD_getBase(in, current);
        }
        case 1:
        {
            return _iceD_getEx(in, current);
        }
        case 2:
        {
            return _iceD_getStruct1(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

Test::Base::~Base()
{
}

const ::std::string&
Test::Base::ice_staticId()
{
    static const ::std::string typeId = "::Test::Base";
    return typeId;
}

Test::Derived::~Derived()
{
}

const ::std::string&
Test::Derived::ice_staticId()
{
    static const ::std::string typeId = "::Test::Derived";
    return typeId;
}

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getStruct1(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::ByteS>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getStruct1_name);
    outAsync->invoke(iceC_Test_Initial_getStruct1_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::ByteS>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getBase_name);
    outAsync->invoke(iceC_Test_Initial_getBase_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_getEx(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Test::ByteS>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Test_Initial_getEx_name);
    outAsync->invoke(iceC_Test_Initial_getEx_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Test::InitialPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Test_Initial_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Test::InitialPrx::_newInstance() const
{
    return ::IceInternal::createProxy<InitialPrx>();
}
/// \endcond

const ::std::string&
Test::InitialPrx::ice_staticId()
{
    return Initial::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Test_Initial_getStruct1_name = "getStruct1";

const ::std::string iceC_Test_Initial_getBase_name = "getBase";

const ::std::string iceC_Test_Initial_getEx_name = "getEx";

const ::std::string iceC_Test_Initial_shutdown_name = "shutdown";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Test::Ex> iceC_Test_Ex_init("::Test::Ex");

}

Test::Ex::Ex(const Struct1& s, const BasePtr& b) :
    ::Ice::UserException(),
    s(s),
    b(b)
{
}
Test::Ex::~Ex()
{
}

::std::string
Test::Ex::ice_id() const
{
    return "::Test::Ex";
}

Test::Ex*
Test::Ex::ice_clone() const
{
    return new Ex(*this);
}

void
Test::Ex::ice_throw() const
{
    throw *this;
}

bool
Test::Ex::_usesClasses() const
{
    return true;
}

/// \cond STREAM
void
Test::Ex::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Test::Ex", -1, true);
    ::Ice::StreamWriter< Ex, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Ex::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Ex, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Base* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Base>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Base;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Base::_newInstance() const
{
    return new Base;
}
/// \endcond

const ::std::string&
IceProxy::Test::Base::ice_staticId()
{
    return ::Test::Base::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Derived* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Derived>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Derived;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Derived::_newInstance() const
{
    return new Derived;
}
/// \endcond

const ::std::string&
IceProxy::Test::Derived::ice_staticId()
{
    return ::Test::Derived::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Test::upCast(Initial* p) { return p; }

void
::IceProxy::Test::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Initial>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Initial;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getStruct1(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getStruct1_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getStruct1_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getStruct1_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getStruct1_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ByteS
IceProxy::Test::Initial::end_getStruct1(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getStruct1_name);
    ::Test::ByteS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getBase(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getBase_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getBase_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getBase_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getBase_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ByteS
IceProxy::Test::Initial::end_getBase(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getBase_name);
    ::Test::ByteS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_getEx(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Test_Initial_getEx_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_getEx_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_getEx_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_getEx_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Test::ByteS
IceProxy::Test::Initial::end_getEx(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Test_Initial_getEx_name);
    ::Test::ByteS ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Test::Initial::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Test_Initial_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Test_Initial_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Test_Initial_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Test::Initial::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Test_Initial_shutdown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Test::Initial::_newInstance() const
{
    return new Initial;
}
/// \endcond

const ::std::string&
IceProxy::Test::Initial::ice_staticId()
{
    return ::Test::Initial::ice_staticId();
}

Test::Base::~Base()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Base* p) { return p; }

/// \endcond

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Test::Base::ice_clone() const
{
    ::Ice::Object* p = new Base(*this);
    return p;
}
#if defined(_MSC_VER)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_Test_Base_ids[2] =
{
    "::Ice::Object",
    "::Test::Base"
};

}

bool
Test::Base::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Base_ids, iceC_Test_Base_ids + 2, s);
}

::std::vector< ::std::string>
Test::Base::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Base_ids[0], &iceC_Test_Base_ids[2]);
}

const ::std::string&
Test::Base::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Base::ice_staticId()
{
    static const ::std::string typeId = "::Test::Base";
    return typeId;
}

void
Test::Base::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(b)
    {
        if((::Test::upCast(b.get())->_iceGcVisit(v_)))
        {
            b = 0;
        }
    }
    if(o)
    {
        if((o.get())->_iceGcVisit(v_))
        {
            o = 0;
        }
    }
    {
        for(::Test::BaseS::iterator _i0 = seq4.begin(); _i0 != seq4.end(); ++_i0)
        {
            if((*_i0))
            {
                if((::Test::upCast((*_i0).get())->_iceGcVisit(v_)))
                {
                    (*_i0) = 0;
                }
            }
        }
    }
    {
        for(::Test::StringBaseD::iterator _i0 = d4.begin(); _i0 != d4.end(); ++_i0)
        {
            if((*_i0).second)
            {
                if((::Test::upCast((*_i0).second.get())->_iceGcVisit(v_)))
                {
                    (*_i0).second = 0;
                }
            }
        }
    }
}

/// \cond STREAM
void
Test::Base::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Base, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Base::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Base, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Base> iceC_Test_Base_init("::Test::Base");
}

::Ice::ValueFactoryPtr
Test::Base::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Base::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(BasePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = BasePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Base::ice_staticId(), v);
    }
}
/// \endcond

Test::Derived::~Derived()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Derived* p) { return p; }

/// \endcond
::Ice::ObjectPtr
Test::Derived::ice_clone() const
{
    ::Ice::Object* p = new Derived(*this);
    return p;
}

namespace
{
const ::std::string iceC_Test_Derived_ids[3] =
{
    "::Ice::Object",
    "::Test::Base",
    "::Test::Derived"
};

}

bool
Test::Derived::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Derived_ids, iceC_Test_Derived_ids + 3, s);
}

::std::vector< ::std::string>
Test::Derived::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Derived_ids[0], &iceC_Test_Derived_ids[3]);
}

const ::std::string&
Test::Derived::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Derived::ice_staticId()
{
    static const ::std::string typeId = "::Test::Derived";
    return typeId;
}

void
Test::Derived::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    Base::_iceGcVisitMembers(v_);
}

/// \cond STREAM
void
Test::Derived::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< Derived, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    Base::_iceWriteImpl(ostr);
}

void
Test::Derived::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Derived, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    Base::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::Test::Derived> iceC_Test_Derived_init("::Test::Derived");
}

::Ice::ValueFactoryPtr
Test::Derived::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::Test::Derived::ice_staticId());
}

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(DerivedPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = DerivedPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Derived::ice_staticId(), v);
    }
}
/// \endcond

Test::Initial::~Initial()
{
}

/// \cond INTERNAL
::Ice::Object* Test::upCast(Initial* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Test_Initial_ids[2] =
{
    "::Ice::Object",
    "::Test::Initial"
};

}

bool
Test::Initial::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Test_Initial_ids, iceC_Test_Initial_ids + 2, s);
}

::std::vector< ::std::string>
Test::Initial::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Test_Initial_ids[0], &iceC_Test_Initial_ids[2]);
}

const ::std::string&
Test::Initial::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Test::Initial::ice_staticId()
{
    static const ::std::string typeId = "::Test::Initial";
    return typeId;
}

/// \cond INTERNAL
bool
Test::Initial::_iceD_getStruct1(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ByteS ret = this->getStruct1(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getBase(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ByteS ret = this->getBase(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_getEx(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ByteS ret = this->getEx(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Test::Initial::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Test_Initial_all[] =
{
    "getBase",
    "getEx",
    "getStruct1",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown"
};

}

/// \cond INTERNAL
bool
Test::Initial::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Test_Initial_all, iceC_Test_Initial_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Test_Initial_all)
    {
        case 0:
        {
            return _iceD_getBase(in, current);
        }
        case 1:
        {
            return _iceD_getEx(in, current);
        }
        case 2:
        {
            return _iceD_getStruct1(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Test::Initial::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Initial, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Test::Initial::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Initial, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Test::_icePatchObjectPtr(InitialPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = InitialPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Initial::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
