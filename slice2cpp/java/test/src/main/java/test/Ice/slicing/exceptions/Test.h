//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Test_h__
#define __Test_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace Test
{

class TestIntfPrx;

using TestIntfPrxPtr = ::std::optional<TestIntfPrx>;

}

namespace Test
{

class TestIntfPrx : public ::Ice::Proxy<TestIntfPrx, ::Ice::ObjectPrx>
{
public:

    void baseAsBase(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> baseAsBaseAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    baseAsBaseAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_baseAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void unknownDerivedAsBase(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> unknownDerivedAsBaseAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    unknownDerivedAsBaseAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_unknownDerivedAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void knownDerivedAsBase(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> knownDerivedAsBaseAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    knownDerivedAsBaseAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_knownDerivedAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void knownDerivedAsKnownDerived(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> knownDerivedAsKnownDerivedAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    knownDerivedAsKnownDerivedAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_knownDerivedAsKnownDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void unknownIntermediateAsBase(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> unknownIntermediateAsBaseAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    unknownIntermediateAsBaseAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_unknownIntermediateAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void knownIntermediateAsBase(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> knownIntermediateAsBaseAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    knownIntermediateAsBaseAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_knownIntermediateAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void knownMostDerivedAsBase(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> knownMostDerivedAsBaseAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    knownMostDerivedAsBaseAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_knownMostDerivedAsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void knownIntermediateAsKnownIntermediate(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> knownIntermediateAsKnownIntermediateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    knownIntermediateAsKnownIntermediateAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_knownIntermediateAsKnownIntermediate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void knownMostDerivedAsKnownIntermediate(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> knownMostDerivedAsKnownIntermediateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    knownMostDerivedAsKnownIntermediateAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_knownMostDerivedAsKnownIntermediate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void knownMostDerivedAsKnownMostDerived(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> knownMostDerivedAsKnownMostDerivedAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    knownMostDerivedAsKnownMostDerivedAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_knownMostDerivedAsKnownMostDerived(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void unknownMostDerived1AsBase(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> unknownMostDerived1AsBaseAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    unknownMostDerived1AsBaseAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_unknownMostDerived1AsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void unknownMostDerived1AsKnownIntermediate(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> unknownMostDerived1AsKnownIntermediateAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    unknownMostDerived1AsKnownIntermediateAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_unknownMostDerived1AsKnownIntermediate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void unknownMostDerived2AsBase(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> unknownMostDerived2AsBaseAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    unknownMostDerived2AsBaseAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_unknownMostDerived2AsBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::future<void> shutdownAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    explicit TestIntfPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    TestIntfPrx(const TestIntfPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    TestIntfPrx(TestIntfPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    TestIntfPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    TestIntfPrx& operator=(const TestIntfPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    TestIntfPrx& operator=(TestIntfPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static TestIntfPrx _fromReference(::IceInternal::ReferencePtr ref) { return TestIntfPrx(::std::move(ref)); }

protected:

    TestIntfPrx() = default;

    explicit TestIntfPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace Test
{

class Base : public ::Ice::UserExceptionHelper<Base, ::Ice::UserException>
{
public:

    virtual ~Base();

    Base(const Base&) = default;

    Base() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    Base(::std::string_view b) :
        b(b)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(b);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    ::std::string b;
};

/// \cond INTERNAL
static Base _iceS_Base_init;
/// \endcond

class KnownDerived : public ::Ice::UserExceptionHelper<KnownDerived, Base>
{
public:

    virtual ~KnownDerived();

    KnownDerived(const KnownDerived&) = default;

    KnownDerived() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    KnownDerived(::std::string_view b, ::std::string_view kd) :
        ::Ice::UserExceptionHelper<KnownDerived, Base>(b),
        kd(kd)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(b, kd);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    ::std::string kd;
};

class KnownIntermediate : public ::Ice::UserExceptionHelper<KnownIntermediate, Base>
{
public:

    virtual ~KnownIntermediate();

    KnownIntermediate(const KnownIntermediate&) = default;

    KnownIntermediate() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    KnownIntermediate(::std::string_view b, ::std::string_view ki) :
        ::Ice::UserExceptionHelper<KnownIntermediate, Base>(b),
        ki(ki)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(b, ki);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    ::std::string ki;
};

class KnownMostDerived : public ::Ice::UserExceptionHelper<KnownMostDerived, KnownIntermediate>
{
public:

    virtual ~KnownMostDerived();

    KnownMostDerived(const KnownMostDerived&) = default;

    KnownMostDerived() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    KnownMostDerived(::std::string_view b, ::std::string_view ki, ::std::string_view kmd) :
        ::Ice::UserExceptionHelper<KnownMostDerived, KnownIntermediate>(b, ki),
        kmd(kmd)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(b, ki, kmd);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    ::std::string kmd;
};

class KnownPreserved : public ::Ice::UserExceptionHelper<KnownPreserved, Base>
{
public:

    virtual ~KnownPreserved();

    KnownPreserved(const KnownPreserved&) = default;

    KnownPreserved() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    KnownPreserved(::std::string_view b, ::std::string_view kp) :
        ::Ice::UserExceptionHelper<KnownPreserved, Base>(b),
        kp(kp)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(b, kp);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    ::std::string kp;
};

class KnownPreservedDerived : public ::Ice::UserExceptionHelper<KnownPreservedDerived, KnownPreserved>
{
public:

    virtual ~KnownPreservedDerived();

    KnownPreservedDerived(const KnownPreservedDerived&) = default;

    KnownPreservedDerived() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    KnownPreservedDerived(::std::string_view b, ::std::string_view kp, ::std::string_view kpd) :
        ::Ice::UserExceptionHelper<KnownPreservedDerived, KnownPreserved>(b, kp),
        kpd(kpd)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(b, kp, kpd);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    ::std::string kpd;
};

}

namespace Test
{

class TestIntf : public virtual ::Ice::Object
{
public:

    using ProxyType = TestIntfPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    virtual void baseAsBase(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_baseAsBase(::IceInternal::Incoming&);
    /// \endcond

    virtual void unknownDerivedAsBase(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_unknownDerivedAsBase(::IceInternal::Incoming&);
    /// \endcond

    virtual void knownDerivedAsBase(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_knownDerivedAsBase(::IceInternal::Incoming&);
    /// \endcond

    virtual void knownDerivedAsKnownDerived(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_knownDerivedAsKnownDerived(::IceInternal::Incoming&);
    /// \endcond

    virtual void unknownIntermediateAsBase(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_unknownIntermediateAsBase(::IceInternal::Incoming&);
    /// \endcond

    virtual void knownIntermediateAsBase(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_knownIntermediateAsBase(::IceInternal::Incoming&);
    /// \endcond

    virtual void knownMostDerivedAsBase(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_knownMostDerivedAsBase(::IceInternal::Incoming&);
    /// \endcond

    virtual void knownIntermediateAsKnownIntermediate(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_knownIntermediateAsKnownIntermediate(::IceInternal::Incoming&);
    /// \endcond

    virtual void knownMostDerivedAsKnownIntermediate(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_knownMostDerivedAsKnownIntermediate(::IceInternal::Incoming&);
    /// \endcond

    virtual void knownMostDerivedAsKnownMostDerived(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_knownMostDerivedAsKnownMostDerived(::IceInternal::Incoming&);
    /// \endcond

    virtual void unknownMostDerived1AsBase(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_unknownMostDerived1AsBase(::IceInternal::Incoming&);
    /// \endcond

    virtual void unknownMostDerived1AsKnownIntermediate(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_unknownMostDerived1AsKnownIntermediate(::IceInternal::Incoming&);
    /// \endcond

    virtual void unknownMostDerived2AsBase(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_unknownMostDerived2AsBase(::IceInternal::Incoming&);
    /// \endcond

    virtual void shutdown(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_shutdown(::IceInternal::Incoming&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&) override;
    /// \endcond
};

using TestIntfPtr = ::std::shared_ptr<TestIntf>;

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::Test::Base, S>
{
    static void read(S* istr, ::Test::Base& v)
    {
        istr->readAll(v.b);
    }
};

template<typename S>
struct StreamWriter<::Test::KnownDerived, S>
{
    static void write(S* ostr, const ::Test::KnownDerived& v)
    {
        ostr->writeAll(v.kd);
    }
};

template<typename S>
struct StreamReader<::Test::KnownDerived, S>
{
    static void read(S* istr, ::Test::KnownDerived& v)
    {
        istr->readAll(v.kd);
    }
};

template<typename S>
struct StreamWriter<::Test::KnownIntermediate, S>
{
    static void write(S* ostr, const ::Test::KnownIntermediate& v)
    {
        ostr->writeAll(v.ki);
    }
};

template<typename S>
struct StreamReader<::Test::KnownIntermediate, S>
{
    static void read(S* istr, ::Test::KnownIntermediate& v)
    {
        istr->readAll(v.ki);
    }
};

template<typename S>
struct StreamWriter<::Test::KnownMostDerived, S>
{
    static void write(S* ostr, const ::Test::KnownMostDerived& v)
    {
        ostr->writeAll(v.kmd);
    }
};

template<typename S>
struct StreamReader<::Test::KnownMostDerived, S>
{
    static void read(S* istr, ::Test::KnownMostDerived& v)
    {
        istr->readAll(v.kmd);
    }
};

template<typename S>
struct StreamWriter<::Test::KnownPreserved, S>
{
    static void write(S* ostr, const ::Test::KnownPreserved& v)
    {
        ostr->writeAll(v.kp);
    }
};

template<typename S>
struct StreamReader<::Test::KnownPreserved, S>
{
    static void read(S* istr, ::Test::KnownPreserved& v)
    {
        istr->readAll(v.kp);
    }
};

template<typename S>
struct StreamWriter<::Test::KnownPreservedDerived, S>
{
    static void write(S* ostr, const ::Test::KnownPreservedDerived& v)
    {
        ostr->writeAll(v.kpd);
    }
};

template<typename S>
struct StreamReader<::Test::KnownPreservedDerived, S>
{
    static void read(S* istr, ::Test::KnownPreservedDerived& v)
    {
        istr->readAll(v.kpd);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
