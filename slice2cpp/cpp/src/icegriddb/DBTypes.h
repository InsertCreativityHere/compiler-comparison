//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `DBTypes.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __DBTypes_h__
#define __DBTypes_h__

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceGrid/Admin.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace IceGrid
{
    using StringLongDict = ::std::map<::std::string, ::std::int64_t>;

    struct AllData;

}

namespace IceGrid
{

struct AllData
{
    ::IceGrid::ApplicationInfoSeq applications;
    ::IceGrid::AdapterInfoSeq adapters;
    ::IceGrid::ObjectInfoSeq objects;
    ::IceGrid::ObjectInfoSeq internalObjects;
    ::IceGrid::StringLongDict serials;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::IceGrid::ApplicationInfoSeq&, const ::IceGrid::AdapterInfoSeq&, const ::IceGrid::ObjectInfoSeq&, const ::IceGrid::ObjectInfoSeq&, const ::IceGrid::StringLongDict&> ice_tuple() const
    {
        return std::tie(applications, adapters, objects, internalObjects, serials);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::IceGrid::AllData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<>
struct StreamReader<::IceGrid::AllData>
{
    static void read(InputStream* istr, ::IceGrid::AllData& v)
    {
        istr->readAll(v.applications, v.adapters, v.objects, v.internalObjects, v.serials);
    }
};

}
/// \endcond

#include <Ice/PopDisableWarnings.h>
#endif
