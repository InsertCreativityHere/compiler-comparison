//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `DBTypes.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __DBTypes_h__
#define __DBTypes_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <Ice/SlicedDataF.h>
#include <IceGrid/Admin.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 9
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace IceGrid
{

using StringLongDict = ::std::map<::std::string, long long int>;

struct AllData
{
    ::IceGrid::ApplicationInfoSeq applications;
    ::IceGrid::AdapterInfoSeq adapters;
    ::IceGrid::ObjectInfoSeq objects;
    ::IceGrid::ObjectInfoSeq internalObjects;
    ::IceGrid::StringLongDict serials;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::IceGrid::ApplicationInfoSeq&, const ::IceGrid::AdapterInfoSeq&, const ::IceGrid::ObjectInfoSeq&, const ::IceGrid::ObjectInfoSeq&, const ::IceGrid::StringLongDict&> ice_tuple() const
    {
        return std::tie(applications, adapters, objects, internalObjects, serials);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::IceGrid::AllData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::IceGrid::AllData, S>
{
    static void read(S* istr, ::IceGrid::AllData& v)
    {
        istr->readAll(v.applications, v.adapters, v.objects, v.internalObjects, v.serials);
    }
};

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

}

namespace IceGrid
{

typedef ::std::map< ::std::string, ::Ice::Long> StringLongDict;

struct AllData
{
    ::IceGrid::ApplicationInfoSeq applications;
    ::IceGrid::AdapterInfoSeq adapters;
    ::IceGrid::ObjectInfoSeq objects;
    ::IceGrid::ObjectInfoSeq internalObjects;
    ::IceGrid::StringLongDict serials;
};

}

/// \cond INTERNAL
namespace IceAsync
{

}
/// \endcond

namespace IceProxy
{

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::IceGrid::AllData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::IceGrid::AllData, S>
{
    static void write(S* ostr, const ::IceGrid::AllData& v)
    {
        ostr->write(v.applications);
        ostr->write(v.adapters);
        ostr->write(v.objects);
        ostr->write(v.internalObjects);
        ostr->write(v.serials);
    }
};

template<typename S>
struct StreamReader< ::IceGrid::AllData, S>
{
    static void read(S* istr, ::IceGrid::AllData& v)
    {
        istr->read(v.applications);
        istr->read(v.adapters);
        istr->read(v.objects);
        istr->read(v.internalObjects);
        istr->read(v.serials);
    }
};

}
/// \endcond

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
