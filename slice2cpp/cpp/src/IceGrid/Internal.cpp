//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <Internal.h>
#include <IceUtil/PushDisableWarnings.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::InternalDbEnvDescriptor> iceC_IceGrid_InternalDbEnvDescriptor_init("::IceGrid::InternalDbEnvDescriptor");

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::InternalAdapterDescriptor> iceC_IceGrid_InternalAdapterDescriptor_init("::IceGrid::InternalAdapterDescriptor");

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::InternalDistributionDescriptor> iceC_IceGrid_InternalDistributionDescriptor_init("::IceGrid::InternalDistributionDescriptor");

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::InternalServerDescriptor> iceC_IceGrid_InternalServerDescriptor_init("::IceGrid::InternalServerDescriptor");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::AdapterActiveException> iceC_IceGrid_AdapterActiveException_init("::IceGrid::AdapterActiveException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::AdapterNotActiveException> iceC_IceGrid_AdapterNotActiveException_init("::IceGrid::AdapterNotActiveException");

const ::std::string iceC_IceGrid_Adapter_ids[2] =
{
    "::Ice::Object",
    "::IceGrid::Adapter"
};
const ::std::string iceC_IceGrid_Adapter_ops[] =
{
    "activate",
    "getDirectProxy",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setDirectProxy"
};
const ::std::string iceC_IceGrid_Adapter_activate_name = "activate";
const ::std::string iceC_IceGrid_Adapter_getDirectProxy_name = "getDirectProxy";
const ::std::string iceC_IceGrid_Adapter_setDirectProxy_name = "setDirectProxy";

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::AdapterExistsException> iceC_IceGrid_AdapterExistsException_init("::IceGrid::AdapterExistsException");

const ::std::string iceC_IceGrid_FileReader_ids[2] =
{
    "::Ice::Object",
    "::IceGrid::FileReader"
};
const ::std::string iceC_IceGrid_FileReader_ops[] =
{
    "getOffsetFromEnd",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "read"
};
const ::std::string iceC_IceGrid_FileReader_getOffsetFromEnd_name = "getOffsetFromEnd";
const ::std::string iceC_IceGrid_FileReader_read_name = "read";

const ::std::string iceC_IceGrid_Server_ids[3] =
{
    "::Ice::Object",
    "::IceGrid::FileReader",
    "::IceGrid::Server"
};
const ::std::string iceC_IceGrid_Server_ops[] =
{
    "checkUpdate",
    "getOffsetFromEnd",
    "getPid",
    "getState",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isEnabled",
    "read",
    "sendSignal",
    "setEnabled",
    "setProcess",
    "start",
    "stop",
    "writeMessage"
};
const ::std::string iceC_IceGrid_Server_start_name = "start";
const ::std::string iceC_IceGrid_Server_stop_name = "stop";
const ::std::string iceC_IceGrid_Server_checkUpdate_name = "checkUpdate";
const ::std::string iceC_IceGrid_Server_setEnabled_name = "setEnabled";
const ::std::string iceC_IceGrid_Server_isEnabled_name = "isEnabled";
const ::std::string iceC_IceGrid_Server_sendSignal_name = "sendSignal";
const ::std::string iceC_IceGrid_Server_writeMessage_name = "writeMessage";
const ::std::string iceC_IceGrid_Server_getState_name = "getState";
const ::std::string iceC_IceGrid_Server_getPid_name = "getPid";
const ::std::string iceC_IceGrid_Server_setProcess_name = "setProcess";

const ::std::string iceC_IceGrid_ReplicaObserver_ids[2] =
{
    "::Ice::Object",
    "::IceGrid::ReplicaObserver"
};
const ::std::string iceC_IceGrid_ReplicaObserver_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "replicaAdded",
    "replicaInit",
    "replicaRemoved"
};
const ::std::string iceC_IceGrid_ReplicaObserver_replicaInit_name = "replicaInit";
const ::std::string iceC_IceGrid_ReplicaObserver_replicaAdded_name = "replicaAdded";
const ::std::string iceC_IceGrid_ReplicaObserver_replicaRemoved_name = "replicaRemoved";

const ::std::string iceC_IceGrid_PatcherFeedback_ids[2] =
{
    "::Ice::Object",
    "::IceGrid::PatcherFeedback"
};
const ::std::string iceC_IceGrid_PatcherFeedback_ops[] =
{
    "failed",
    "finished",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_IceGrid_PatcherFeedback_finished_name = "finished";
const ::std::string iceC_IceGrid_PatcherFeedback_failed_name = "failed";

const ::std::string iceC_IceGrid_Node_ids[4] =
{
    "::Ice::Object",
    "::IceGrid::FileReader",
    "::IceGrid::Node",
    "::IceGrid::ReplicaObserver"
};
const ::std::string iceC_IceGrid_Node_ops[] =
{
    "destroyServer",
    "destroyServerWithoutRestart",
    "getHostname",
    "getLoad",
    "getName",
    "getOffsetFromEnd",
    "getProcessorSocketCount",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "loadServer",
    "loadServerWithoutRestart",
    "patch",
    "read",
    "registerWithReplica",
    "replicaAdded",
    "replicaInit",
    "replicaRemoved",
    "shutdown"
};
const ::std::string iceC_IceGrid_Node_loadServer_name = "loadServer";
const ::std::string iceC_IceGrid_Node_loadServerWithoutRestart_name = "loadServerWithoutRestart";
const ::std::string iceC_IceGrid_Node_destroyServer_name = "destroyServer";
const ::std::string iceC_IceGrid_Node_destroyServerWithoutRestart_name = "destroyServerWithoutRestart";
const ::std::string iceC_IceGrid_Node_patch_name = "patch";
const ::std::string iceC_IceGrid_Node_registerWithReplica_name = "registerWithReplica";
const ::std::string iceC_IceGrid_Node_getName_name = "getName";
const ::std::string iceC_IceGrid_Node_getHostname_name = "getHostname";
const ::std::string iceC_IceGrid_Node_getLoad_name = "getLoad";
const ::std::string iceC_IceGrid_Node_getProcessorSocketCount_name = "getProcessorSocketCount";
const ::std::string iceC_IceGrid_Node_shutdown_name = "shutdown";

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::NodeActiveException> iceC_IceGrid_NodeActiveException_init("::IceGrid::NodeActiveException");

const ::std::string iceC_IceGrid_NodeSession_ids[2] =
{
    "::Ice::Object",
    "::IceGrid::NodeSession"
};
const ::std::string iceC_IceGrid_NodeSession_ops[] =
{
    "destroy",
    "getObserver",
    "getServers",
    "getTimeout",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "keepAlive",
    "loadServers",
    "setReplicaObserver",
    "waitForApplicationUpdate"
};
const ::std::string iceC_IceGrid_NodeSession_keepAlive_name = "keepAlive";
const ::std::string iceC_IceGrid_NodeSession_setReplicaObserver_name = "setReplicaObserver";
const ::std::string iceC_IceGrid_NodeSession_getTimeout_name = "getTimeout";
const ::std::string iceC_IceGrid_NodeSession_getObserver_name = "getObserver";
const ::std::string iceC_IceGrid_NodeSession_loadServers_name = "loadServers";
const ::std::string iceC_IceGrid_NodeSession_getServers_name = "getServers";
const ::std::string iceC_IceGrid_NodeSession_waitForApplicationUpdate_name = "waitForApplicationUpdate";
const ::std::string iceC_IceGrid_NodeSession_destroy_name = "destroy";

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceGrid::ReplicaActiveException> iceC_IceGrid_ReplicaActiveException_init("::IceGrid::ReplicaActiveException");

const ::std::string iceC_IceGrid_DatabaseObserver_ids[5] =
{
    "::Ice::Object",
    "::IceGrid::AdapterObserver",
    "::IceGrid::ApplicationObserver",
    "::IceGrid::DatabaseObserver",
    "::IceGrid::ObjectObserver"
};
const ::std::string iceC_IceGrid_DatabaseObserver_ops[] =
{
    "adapterAdded",
    "adapterInit",
    "adapterRemoved",
    "adapterUpdated",
    "applicationAdded",
    "applicationInit",
    "applicationRemoved",
    "applicationUpdated",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "objectAdded",
    "objectInit",
    "objectRemoved",
    "objectUpdated"
};

const ::std::string iceC_IceGrid_ReplicaSession_ids[2] =
{
    "::Ice::Object",
    "::IceGrid::ReplicaSession"
};
const ::std::string iceC_IceGrid_ReplicaSession_ops[] =
{
    "destroy",
    "getTimeout",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "keepAlive",
    "receivedUpdate",
    "registerWellKnownObjects",
    "setAdapterDirectProxy",
    "setDatabaseObserver",
    "setEndpoints"
};
const ::std::string iceC_IceGrid_ReplicaSession_keepAlive_name = "keepAlive";
const ::std::string iceC_IceGrid_ReplicaSession_getTimeout_name = "getTimeout";
const ::std::string iceC_IceGrid_ReplicaSession_setDatabaseObserver_name = "setDatabaseObserver";
const ::std::string iceC_IceGrid_ReplicaSession_setEndpoints_name = "setEndpoints";
const ::std::string iceC_IceGrid_ReplicaSession_registerWellKnownObjects_name = "registerWellKnownObjects";
const ::std::string iceC_IceGrid_ReplicaSession_setAdapterDirectProxy_name = "setAdapterDirectProxy";
const ::std::string iceC_IceGrid_ReplicaSession_receivedUpdate_name = "receivedUpdate";
const ::std::string iceC_IceGrid_ReplicaSession_destroy_name = "destroy";

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::InternalNodeInfo> iceC_IceGrid_InternalNodeInfo_init("::IceGrid::InternalNodeInfo");

const ::IceInternal::DefaultValueFactoryInit<::IceGrid::InternalReplicaInfo> iceC_IceGrid_InternalReplicaInfo_init("::IceGrid::InternalReplicaInfo");

const ::std::string iceC_IceGrid_InternalRegistry_ids[3] =
{
    "::Ice::Object",
    "::IceGrid::FileReader",
    "::IceGrid::InternalRegistry"
};
const ::std::string iceC_IceGrid_InternalRegistry_ops[] =
{
    "getAdapters",
    "getApplications",
    "getNodes",
    "getObjects",
    "getOffsetFromEnd",
    "getReplicas",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "read",
    "registerNode",
    "registerReplica",
    "registerWithReplica",
    "shutdown"
};
const ::std::string iceC_IceGrid_InternalRegistry_registerNode_name = "registerNode";
const ::std::string iceC_IceGrid_InternalRegistry_registerReplica_name = "registerReplica";
const ::std::string iceC_IceGrid_InternalRegistry_registerWithReplica_name = "registerWithReplica";
const ::std::string iceC_IceGrid_InternalRegistry_getNodes_name = "getNodes";
const ::std::string iceC_IceGrid_InternalRegistry_getReplicas_name = "getReplicas";
const ::std::string iceC_IceGrid_InternalRegistry_getApplications_name = "getApplications";
const ::std::string iceC_IceGrid_InternalRegistry_getAdapters_name = "getAdapters";
const ::std::string iceC_IceGrid_InternalRegistry_getObjects_name = "getObjects";
const ::std::string iceC_IceGrid_InternalRegistry_shutdown_name = "shutdown";

}

IceGrid::AdapterActiveException::~AdapterActiveException()
{
}

const ::std::string&
IceGrid::AdapterActiveException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::AdapterActiveException";
    return typeId;
}

IceGrid::AdapterNotActiveException::~AdapterNotActiveException()
{
}

const ::std::string&
IceGrid::AdapterNotActiveException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::AdapterNotActiveException";
    return typeId;
}

IceGrid::AdapterExistsException::~AdapterExistsException()
{
}

const ::std::string&
IceGrid::AdapterExistsException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::AdapterExistsException";
    return typeId;
}

IceGrid::NodeActiveException::~NodeActiveException()
{
}

const ::std::string&
IceGrid::NodeActiveException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::NodeActiveException";
    return typeId;
}

IceGrid::ReplicaActiveException::~ReplicaActiveException()
{
}

const ::std::string&
IceGrid::ReplicaActiveException::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::ReplicaActiveException";
    return typeId;
}

bool
IceGrid::Adapter::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceGrid_Adapter_ids, iceC_IceGrid_Adapter_ids + 2, s);
}

::std::vector<::std::string>
IceGrid::Adapter::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceGrid_Adapter_ids[0], &iceC_IceGrid_Adapter_ids[2]);
}

::std::string
IceGrid::Adapter::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceGrid::Adapter::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::Adapter";
    return typeId;
}

/// \cond INTERNAL
bool
IceGrid::Adapter::_iceD_activate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::shared_ptr<::Ice::ObjectPrx>& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->activateAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Adapter::_iceD_getDirectProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<::Ice::ObjectPrx> ret = this->getDirectProxy(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Adapter::_iceD_setDirectProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Ice::ObjectPrx> iceP_proxy;
    istr->readAll(iceP_proxy);
    inS.endReadParams();
    this->setDirectProxy(::std::move(iceP_proxy), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Adapter::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceGrid_Adapter_ops, iceC_IceGrid_Adapter_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceGrid_Adapter_ops)
    {
        case 0:
        {
            return _iceD_activate(in, current);
        }
        case 1:
        {
            return _iceD_getDirectProxy(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_setDirectProxy(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
IceGrid::FileReader::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceGrid_FileReader_ids, iceC_IceGrid_FileReader_ids + 2, s);
}

::std::vector<::std::string>
IceGrid::FileReader::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceGrid_FileReader_ids[0], &iceC_IceGrid_FileReader_ids[2]);
}

::std::string
IceGrid::FileReader::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceGrid::FileReader::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::FileReader";
    return typeId;
}

/// \cond INTERNAL
bool
IceGrid::FileReader::_iceD_getOffsetFromEnd(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_filename;
    int iceP_lines;
    istr->readAll(iceP_filename, iceP_lines);
    inS.endReadParams();
    long long int ret = this->getOffsetFromEnd(::std::move(iceP_filename), iceP_lines, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::FileReader::_iceD_read(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_filename;
    long long int iceP_pos;
    int iceP_size;
    istr->readAll(iceP_filename, iceP_pos, iceP_size);
    inS.endReadParams();
    long long int iceP_newPos;
    ::Ice::StringSeq iceP_lines;
    bool ret = this->read(::std::move(iceP_filename), iceP_pos, iceP_size, iceP_newPos, iceP_lines, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_newPos, iceP_lines, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::FileReader::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceGrid_FileReader_ops, iceC_IceGrid_FileReader_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceGrid_FileReader_ops)
    {
        case 0:
        {
            return _iceD_getOffsetFromEnd(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_read(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
IceGrid::Server::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceGrid_Server_ids, iceC_IceGrid_Server_ids + 3, s);
}

::std::vector<::std::string>
IceGrid::Server::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceGrid_Server_ids[0], &iceC_IceGrid_Server_ids[3]);
}

::std::string
IceGrid::Server::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceGrid::Server::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::Server";
    return typeId;
}

/// \cond INTERNAL
bool
IceGrid::Server::_iceD_start(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->startAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Server::_iceD_stop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->stopAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Server::_iceD_checkUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<InternalServerDescriptor> iceP_svr;
    bool iceP_noRestart;
    istr->readAll(iceP_svr, iceP_noRestart);
    istr->readPendingValues();
    inS.endReadParams();
    bool ret = this->checkUpdate(::std::move(iceP_svr), iceP_noRestart, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Server::_iceD_setEnabled(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_enable;
    istr->readAll(iceP_enable);
    inS.endReadParams();
    this->setEnabled(iceP_enable, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Server::_iceD_isEnabled(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    bool ret = this->isEnabled(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Server::_iceD_sendSignal(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_signal;
    istr->readAll(iceP_signal);
    inS.endReadParams();
    this->sendSignal(::std::move(iceP_signal), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Server::_iceD_writeMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_message;
    int iceP_fd;
    istr->readAll(iceP_message, iceP_fd);
    inS.endReadParams();
    this->writeMessage(::std::move(iceP_message), iceP_fd, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Server::_iceD_getState(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ServerState ret = this->getState(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Server::_iceD_getPid(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    int ret = this->getPid(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Server::_iceD_setProcess(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Ice::ProcessPrx> iceP_proc;
    istr->readAll(iceP_proc);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->setProcessAsync(::std::move(iceP_proc), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Server::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceGrid_Server_ops, iceC_IceGrid_Server_ops + 16, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceGrid_Server_ops)
    {
        case 0:
        {
            return _iceD_checkUpdate(in, current);
        }
        case 1:
        {
            return _iceD_getOffsetFromEnd(in, current);
        }
        case 2:
        {
            return _iceD_getPid(in, current);
        }
        case 3:
        {
            return _iceD_getState(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_isEnabled(in, current);
        }
        case 9:
        {
            return _iceD_read(in, current);
        }
        case 10:
        {
            return _iceD_sendSignal(in, current);
        }
        case 11:
        {
            return _iceD_setEnabled(in, current);
        }
        case 12:
        {
            return _iceD_setProcess(in, current);
        }
        case 13:
        {
            return _iceD_start(in, current);
        }
        case 14:
        {
            return _iceD_stop(in, current);
        }
        case 15:
        {
            return _iceD_writeMessage(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
IceGrid::ReplicaObserver::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceGrid_ReplicaObserver_ids, iceC_IceGrid_ReplicaObserver_ids + 2, s);
}

::std::vector<::std::string>
IceGrid::ReplicaObserver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceGrid_ReplicaObserver_ids[0], &iceC_IceGrid_ReplicaObserver_ids[2]);
}

::std::string
IceGrid::ReplicaObserver::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceGrid::ReplicaObserver::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::ReplicaObserver";
    return typeId;
}

/// \cond INTERNAL
bool
IceGrid::ReplicaObserver::_iceD_replicaInit(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    InternalRegistryPrxSeq iceP_replicas;
    istr->readAll(iceP_replicas);
    inS.endReadParams();
    this->replicaInit(::std::move(iceP_replicas), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::ReplicaObserver::_iceD_replicaAdded(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<InternalRegistryPrx> iceP_replica;
    istr->readAll(iceP_replica);
    inS.endReadParams();
    this->replicaAdded(::std::move(iceP_replica), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::ReplicaObserver::_iceD_replicaRemoved(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<InternalRegistryPrx> iceP_replica;
    istr->readAll(iceP_replica);
    inS.endReadParams();
    this->replicaRemoved(::std::move(iceP_replica), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::ReplicaObserver::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceGrid_ReplicaObserver_ops, iceC_IceGrid_ReplicaObserver_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceGrid_ReplicaObserver_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_replicaAdded(in, current);
        }
        case 5:
        {
            return _iceD_replicaInit(in, current);
        }
        case 6:
        {
            return _iceD_replicaRemoved(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
IceGrid::PatcherFeedback::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceGrid_PatcherFeedback_ids, iceC_IceGrid_PatcherFeedback_ids + 2, s);
}

::std::vector<::std::string>
IceGrid::PatcherFeedback::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceGrid_PatcherFeedback_ids[0], &iceC_IceGrid_PatcherFeedback_ids[2]);
}

::std::string
IceGrid::PatcherFeedback::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceGrid::PatcherFeedback::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::PatcherFeedback";
    return typeId;
}

/// \cond INTERNAL
bool
IceGrid::PatcherFeedback::_iceD_finished(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->finished(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::PatcherFeedback::_iceD_failed(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_reason;
    istr->readAll(iceP_reason);
    inS.endReadParams();
    this->failed(::std::move(iceP_reason), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::PatcherFeedback::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceGrid_PatcherFeedback_ops, iceC_IceGrid_PatcherFeedback_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceGrid_PatcherFeedback_ops)
    {
        case 0:
        {
            return _iceD_failed(in, current);
        }
        case 1:
        {
            return _iceD_finished(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
IceGrid::Node::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceGrid_Node_ids, iceC_IceGrid_Node_ids + 4, s);
}

::std::vector<::std::string>
IceGrid::Node::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceGrid_Node_ids[0], &iceC_IceGrid_Node_ids[4]);
}

::std::string
IceGrid::Node::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceGrid::Node::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::Node";
    return typeId;
}

/// \cond INTERNAL
bool
IceGrid::Node::_iceD_loadServer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<InternalServerDescriptor> iceP_svr;
    ::std::string iceP_replicaName;
    istr->readAll(iceP_svr, iceP_replicaName);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::shared_ptr<ServerPrx>& ret, const AdapterPrxDict& iceP_adapters, int iceP_actTimeout, int iceP_deactTimeout)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_adapters, iceP_actTimeout, iceP_deactTimeout, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->loadServerAsync(::std::move(iceP_svr), ::std::move(iceP_replicaName), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Node::_iceD_loadServerWithoutRestart(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<InternalServerDescriptor> iceP_svr;
    ::std::string iceP_replicaName;
    istr->readAll(iceP_svr, iceP_replicaName);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::shared_ptr<ServerPrx>& ret, const AdapterPrxDict& iceP_adapters, int iceP_actTimeout, int iceP_deactTimeout)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_adapters, iceP_actTimeout, iceP_deactTimeout, ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->loadServerWithoutRestartAsync(::std::move(iceP_svr), ::std::move(iceP_replicaName), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Node::_iceD_destroyServer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    ::std::string iceP_uuid;
    int iceP_revision;
    ::std::string iceP_replicaName;
    istr->readAll(iceP_name, iceP_uuid, iceP_revision, iceP_replicaName);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->destroyServerAsync(::std::move(iceP_name), ::std::move(iceP_uuid), iceP_revision, ::std::move(iceP_replicaName), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Node::_iceD_destroyServerWithoutRestart(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    ::std::string iceP_uuid;
    int iceP_revision;
    ::std::string iceP_replicaName;
    istr->readAll(iceP_name, iceP_uuid, iceP_revision, iceP_replicaName);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->destroyServerWithoutRestartAsync(::std::move(iceP_name), ::std::move(iceP_uuid), iceP_revision, ::std::move(iceP_replicaName), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Node::_iceD_patch(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<PatcherFeedbackPrx> iceP_feedback;
    ::std::string iceP_application;
    ::std::string iceP_server;
    ::std::shared_ptr<InternalDistributionDescriptor> iceP_appDistrib;
    bool iceP_shutdown;
    istr->readAll(iceP_feedback, iceP_application, iceP_server, iceP_appDistrib, iceP_shutdown);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->patchAsync(::std::move(iceP_feedback), ::std::move(iceP_application), ::std::move(iceP_server), ::std::move(iceP_appDistrib), iceP_shutdown, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Node::_iceD_registerWithReplica(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<InternalRegistryPrx> iceP_replica;
    istr->readAll(iceP_replica);
    inS.endReadParams();
    this->registerWithReplica(::std::move(iceP_replica), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Node::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Node::_iceD_getHostname(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getHostname(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Node::_iceD_getLoad(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    LoadInfo ret = this->getLoad(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Node::_iceD_getProcessorSocketCount(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    int ret = this->getProcessorSocketCount(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Node::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::Node::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceGrid_Node_ops, iceC_IceGrid_Node_ops + 20, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceGrid_Node_ops)
    {
        case 0:
        {
            return _iceD_destroyServer(in, current);
        }
        case 1:
        {
            return _iceD_destroyServerWithoutRestart(in, current);
        }
        case 2:
        {
            return _iceD_getHostname(in, current);
        }
        case 3:
        {
            return _iceD_getLoad(in, current);
        }
        case 4:
        {
            return _iceD_getName(in, current);
        }
        case 5:
        {
            return _iceD_getOffsetFromEnd(in, current);
        }
        case 6:
        {
            return _iceD_getProcessorSocketCount(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        case 11:
        {
            return _iceD_loadServer(in, current);
        }
        case 12:
        {
            return _iceD_loadServerWithoutRestart(in, current);
        }
        case 13:
        {
            return _iceD_patch(in, current);
        }
        case 14:
        {
            return _iceD_read(in, current);
        }
        case 15:
        {
            return _iceD_registerWithReplica(in, current);
        }
        case 16:
        {
            return _iceD_replicaAdded(in, current);
        }
        case 17:
        {
            return _iceD_replicaInit(in, current);
        }
        case 18:
        {
            return _iceD_replicaRemoved(in, current);
        }
        case 19:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
IceGrid::NodeSession::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceGrid_NodeSession_ids, iceC_IceGrid_NodeSession_ids + 2, s);
}

::std::vector<::std::string>
IceGrid::NodeSession::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceGrid_NodeSession_ids[0], &iceC_IceGrid_NodeSession_ids[2]);
}

::std::string
IceGrid::NodeSession::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceGrid::NodeSession::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::NodeSession";
    return typeId;
}

/// \cond INTERNAL
bool
IceGrid::NodeSession::_iceD_keepAlive(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LoadInfo iceP_load;
    istr->readAll(iceP_load);
    inS.endReadParams();
    this->keepAlive(::std::move(iceP_load), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::NodeSession::_iceD_setReplicaObserver(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<ReplicaObserverPrx> iceP_observer;
    istr->readAll(iceP_observer);
    inS.endReadParams();
    this->setReplicaObserver(::std::move(iceP_observer), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::NodeSession::_iceD_getTimeout(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    int ret = this->getTimeout(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::NodeSession::_iceD_getObserver(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<NodeObserverPrx> ret = this->getObserver(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::NodeSession::_iceD_loadServers(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->loadServersAsync(inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::NodeSession::_iceD_getServers(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::Ice::StringSeq ret = this->getServers(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::NodeSession::_iceD_waitForApplicationUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_application;
    int iceP_revision;
    istr->readAll(iceP_application, iceP_revision);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->waitForApplicationUpdateAsync(::std::move(iceP_application), iceP_revision, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::NodeSession::_iceD_destroy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->destroy(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::NodeSession::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceGrid_NodeSession_ops, iceC_IceGrid_NodeSession_ops + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceGrid_NodeSession_ops)
    {
        case 0:
        {
            return _iceD_destroy(in, current);
        }
        case 1:
        {
            return _iceD_getObserver(in, current);
        }
        case 2:
        {
            return _iceD_getServers(in, current);
        }
        case 3:
        {
            return _iceD_getTimeout(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_keepAlive(in, current);
        }
        case 9:
        {
            return _iceD_loadServers(in, current);
        }
        case 10:
        {
            return _iceD_setReplicaObserver(in, current);
        }
        case 11:
        {
            return _iceD_waitForApplicationUpdate(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
IceGrid::DatabaseObserver::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceGrid_DatabaseObserver_ids, iceC_IceGrid_DatabaseObserver_ids + 5, s);
}

::std::vector<::std::string>
IceGrid::DatabaseObserver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceGrid_DatabaseObserver_ids[0], &iceC_IceGrid_DatabaseObserver_ids[5]);
}

::std::string
IceGrid::DatabaseObserver::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceGrid::DatabaseObserver::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::DatabaseObserver";
    return typeId;
}

/// \cond INTERNAL
bool
IceGrid::DatabaseObserver::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceGrid_DatabaseObserver_ops, iceC_IceGrid_DatabaseObserver_ops + 16, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceGrid_DatabaseObserver_ops)
    {
        case 0:
        {
            return _iceD_adapterAdded(in, current);
        }
        case 1:
        {
            return _iceD_adapterInit(in, current);
        }
        case 2:
        {
            return _iceD_adapterRemoved(in, current);
        }
        case 3:
        {
            return _iceD_adapterUpdated(in, current);
        }
        case 4:
        {
            return _iceD_applicationAdded(in, current);
        }
        case 5:
        {
            return _iceD_applicationInit(in, current);
        }
        case 6:
        {
            return _iceD_applicationRemoved(in, current);
        }
        case 7:
        {
            return _iceD_applicationUpdated(in, current);
        }
        case 8:
        {
            return _iceD_ice_id(in, current);
        }
        case 9:
        {
            return _iceD_ice_ids(in, current);
        }
        case 10:
        {
            return _iceD_ice_isA(in, current);
        }
        case 11:
        {
            return _iceD_ice_ping(in, current);
        }
        case 12:
        {
            return _iceD_objectAdded(in, current);
        }
        case 13:
        {
            return _iceD_objectInit(in, current);
        }
        case 14:
        {
            return _iceD_objectRemoved(in, current);
        }
        case 15:
        {
            return _iceD_objectUpdated(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
IceGrid::ReplicaSession::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceGrid_ReplicaSession_ids, iceC_IceGrid_ReplicaSession_ids + 2, s);
}

::std::vector<::std::string>
IceGrid::ReplicaSession::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceGrid_ReplicaSession_ids[0], &iceC_IceGrid_ReplicaSession_ids[2]);
}

::std::string
IceGrid::ReplicaSession::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceGrid::ReplicaSession::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::ReplicaSession";
    return typeId;
}

/// \cond INTERNAL
bool
IceGrid::ReplicaSession::_iceD_keepAlive(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->keepAlive(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::ReplicaSession::_iceD_getTimeout(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    int ret = this->getTimeout(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::ReplicaSession::_iceD_setDatabaseObserver(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<DatabaseObserverPrx> iceP_dbObs;
    std::optional<StringLongDict> iceP_serials;
    istr->readAll(iceP_dbObs);
    istr->readAll({1}, iceP_serials);
    inS.endReadParams();
    this->setDatabaseObserver(::std::move(iceP_dbObs), ::std::move(iceP_serials), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::ReplicaSession::_iceD_setEndpoints(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    StringObjectProxyDict iceP_endpoints;
    istr->readAll(iceP_endpoints);
    inS.endReadParams();
    this->setEndpoints(::std::move(iceP_endpoints), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::ReplicaSession::_iceD_registerWellKnownObjects(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ObjectInfoSeq iceP_objects;
    istr->readAll(iceP_objects);
    inS.endReadParams();
    this->registerWellKnownObjects(::std::move(iceP_objects), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::ReplicaSession::_iceD_setAdapterDirectProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_adapterId;
    ::std::string iceP_replicaGroupId;
    ::std::shared_ptr<::Ice::ObjectPrx> iceP_proxy;
    istr->readAll(iceP_adapterId, iceP_replicaGroupId, iceP_proxy);
    inS.endReadParams();
    this->setAdapterDirectProxy(::std::move(iceP_adapterId), ::std::move(iceP_replicaGroupId), ::std::move(iceP_proxy), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::ReplicaSession::_iceD_receivedUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    TopicName iceP_name;
    int iceP_serial;
    ::std::string iceP_failure;
    istr->readAll(iceP_name, iceP_serial, iceP_failure);
    inS.endReadParams();
    this->receivedUpdate(iceP_name, iceP_serial, ::std::move(iceP_failure), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::ReplicaSession::_iceD_destroy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->destroy(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::ReplicaSession::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceGrid_ReplicaSession_ops, iceC_IceGrid_ReplicaSession_ops + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceGrid_ReplicaSession_ops)
    {
        case 0:
        {
            return _iceD_destroy(in, current);
        }
        case 1:
        {
            return _iceD_getTimeout(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_keepAlive(in, current);
        }
        case 7:
        {
            return _iceD_receivedUpdate(in, current);
        }
        case 8:
        {
            return _iceD_registerWellKnownObjects(in, current);
        }
        case 9:
        {
            return _iceD_setAdapterDirectProxy(in, current);
        }
        case 10:
        {
            return _iceD_setDatabaseObserver(in, current);
        }
        case 11:
        {
            return _iceD_setEndpoints(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
IceGrid::InternalRegistry::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceGrid_InternalRegistry_ids, iceC_IceGrid_InternalRegistry_ids + 3, s);
}

::std::vector<::std::string>
IceGrid::InternalRegistry::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceGrid_InternalRegistry_ids[0], &iceC_IceGrid_InternalRegistry_ids[3]);
}

::std::string
IceGrid::InternalRegistry::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceGrid::InternalRegistry::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::InternalRegistry";
    return typeId;
}

/// \cond INTERNAL
bool
IceGrid::InternalRegistry::_iceD_registerNode(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<InternalNodeInfo> iceP_info;
    ::std::shared_ptr<NodePrx> iceP_prx;
    LoadInfo iceP_loadInf;
    istr->readAll(iceP_info, iceP_prx, iceP_loadInf);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<NodeSessionPrx> ret = this->registerNode(::std::move(iceP_info), ::std::move(iceP_prx), ::std::move(iceP_loadInf), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::InternalRegistry::_iceD_registerReplica(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<InternalReplicaInfo> iceP_info;
    ::std::shared_ptr<InternalRegistryPrx> iceP_prx;
    istr->readAll(iceP_info, iceP_prx);
    istr->readPendingValues();
    inS.endReadParams();
    ::std::shared_ptr<ReplicaSessionPrx> ret = this->registerReplica(::std::move(iceP_info), ::std::move(iceP_prx), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::InternalRegistry::_iceD_registerWithReplica(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<InternalRegistryPrx> iceP_prx;
    istr->readAll(iceP_prx);
    inS.endReadParams();
    this->registerWithReplica(::std::move(iceP_prx), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::InternalRegistry::_iceD_getNodes(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    NodePrxSeq ret = this->getNodes(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::InternalRegistry::_iceD_getReplicas(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    InternalRegistryPrxSeq ret = this->getReplicas(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::InternalRegistry::_iceD_getApplications(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    long long int iceP_serial;
    ApplicationInfoSeq ret = this->getApplications(iceP_serial, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_serial, ret);
    ostr->writePendingValues();
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::InternalRegistry::_iceD_getAdapters(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    long long int iceP_serial;
    AdapterInfoSeq ret = this->getAdapters(iceP_serial, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_serial, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::InternalRegistry::_iceD_getObjects(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    long long int iceP_serial;
    ObjectInfoSeq ret = this->getObjects(iceP_serial, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_serial, ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::InternalRegistry::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceGrid::InternalRegistry::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceGrid_InternalRegistry_ops, iceC_IceGrid_InternalRegistry_ops + 15, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceGrid_InternalRegistry_ops)
    {
        case 0:
        {
            return _iceD_getAdapters(in, current);
        }
        case 1:
        {
            return _iceD_getApplications(in, current);
        }
        case 2:
        {
            return _iceD_getNodes(in, current);
        }
        case 3:
        {
            return _iceD_getObjects(in, current);
        }
        case 4:
        {
            return _iceD_getOffsetFromEnd(in, current);
        }
        case 5:
        {
            return _iceD_getReplicas(in, current);
        }
        case 6:
        {
            return _iceD_ice_id(in, current);
        }
        case 7:
        {
            return _iceD_ice_ids(in, current);
        }
        case 8:
        {
            return _iceD_ice_isA(in, current);
        }
        case 9:
        {
            return _iceD_ice_ping(in, current);
        }
        case 10:
        {
            return _iceD_read(in, current);
        }
        case 11:
        {
            return _iceD_registerNode(in, current);
        }
        case 12:
        {
            return _iceD_registerReplica(in, current);
        }
        case 13:
        {
            return _iceD_registerWithReplica(in, current);
        }
        case 14:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

IceGrid::InternalDbEnvDescriptor::~InternalDbEnvDescriptor()
{
}

const ::std::string&
IceGrid::InternalDbEnvDescriptor::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::InternalDbEnvDescriptor";
    return typeId;
}

IceGrid::InternalAdapterDescriptor::~InternalAdapterDescriptor()
{
}

const ::std::string&
IceGrid::InternalAdapterDescriptor::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::InternalAdapterDescriptor";
    return typeId;
}

IceGrid::InternalDistributionDescriptor::~InternalDistributionDescriptor()
{
}

const ::std::string&
IceGrid::InternalDistributionDescriptor::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::InternalDistributionDescriptor";
    return typeId;
}

IceGrid::InternalServerDescriptor::~InternalServerDescriptor()
{
}

const ::std::string&
IceGrid::InternalServerDescriptor::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::InternalServerDescriptor";
    return typeId;
}

IceGrid::InternalNodeInfo::~InternalNodeInfo()
{
}

const ::std::string&
IceGrid::InternalNodeInfo::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::InternalNodeInfo";
    return typeId;
}

IceGrid::InternalReplicaInfo::~InternalReplicaInfo()
{
}

const ::std::string&
IceGrid::InternalReplicaInfo::ice_staticId()
{
    static const ::std::string typeId = "::IceGrid::InternalReplicaInfo";
    return typeId;
}

/// \cond INTERNAL
void
IceGrid::AdapterPrx::_iceI_activate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::ObjectPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Adapter_activate_name);
    outAsync->invoke(iceC_IceGrid_Adapter_activate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::AdapterPrx::_iceI_getDirectProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Ice::ObjectPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Adapter_getDirectProxy_name);
    outAsync->invoke(iceC_IceGrid_Adapter_getDirectProxy_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AdapterNotActiveException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::AdapterPrx::_iceI_setDirectProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_proxy, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Adapter_setDirectProxy_name);
    outAsync->invoke(iceC_IceGrid_Adapter_setDirectProxy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proxy);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AdapterActiveException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
IceGrid::AdapterPrx::_newInstance() const
{
    return ::IceInternal::createProxy<AdapterPrx>();
}
/// \endcond

const ::std::string&
IceGrid::AdapterPrx::ice_staticId()
{
    return Adapter::ice_staticId();
}

/// \cond INTERNAL
void
IceGrid::FileReaderPrx::_iceI_getOffsetFromEnd(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<long long int>>& outAsync, const ::std::string& iceP_filename, int iceP_lines, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_FileReader_getOffsetFromEnd_name);
    outAsync->invoke(iceC_IceGrid_FileReader_getOffsetFromEnd_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_filename, iceP_lines);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const FileNotAvailableException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::FileReaderPrx::_iceI_read(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<FileReader::ReadResult>>& outAsync, const ::std::string& iceP_filename, long long int iceP_pos, int iceP_size, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_FileReader_read_name);
    outAsync->invoke(iceC_IceGrid_FileReader_read_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_filename, iceP_pos, iceP_size);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const FileNotAvailableException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            FileReader::ReadResult v;
            istr->readAll(v.newPos, v.lines, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
IceGrid::FileReaderPrx::_newInstance() const
{
    return ::IceInternal::createProxy<FileReaderPrx>();
}
/// \endcond

const ::std::string&
IceGrid::FileReaderPrx::ice_staticId()
{
    return FileReader::ice_staticId();
}

/// \cond INTERNAL
void
IceGrid::ServerPrx::_iceI_start(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Server_start_name);
    outAsync->invoke(iceC_IceGrid_Server_start_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ServerStartException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ServerPrx::_iceI_stop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Server_stop_name);
    outAsync->invoke(iceC_IceGrid_Server_stop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ServerStopException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ServerPrx::_iceI_checkUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::shared_ptr<InternalServerDescriptor>& iceP_svr, bool iceP_noRestart, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Server_checkUpdate_name);
    outAsync->invoke(iceC_IceGrid_Server_checkUpdate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_svr, iceP_noRestart);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const DeploymentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ServerPrx::_iceI_setEnabled(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_enable, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_Server_setEnabled_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_enable);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ServerPrx::_iceI_isEnabled(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Server_isEnabled_name);
    outAsync->invoke(iceC_IceGrid_Server_isEnabled_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ServerPrx::_iceI_sendSignal(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_signal, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Server_sendSignal_name);
    outAsync->invoke(iceC_IceGrid_Server_sendSignal_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_signal);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const BadSignalException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ServerPrx::_iceI_writeMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_message, int iceP_fd, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_Server_writeMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_message, iceP_fd);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ServerPrx::_iceI_getState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::IceGrid::ServerState>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Server_getState_name);
    outAsync->invoke(iceC_IceGrid_Server_getState_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ServerPrx::_iceI_getPid(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Server_getPid_name);
    outAsync->invoke(iceC_IceGrid_Server_getPid_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ServerPrx::_iceI_setProcess(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<::Ice::ProcessPrx>& iceP_proc, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_Server_setProcess_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_proc);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
IceGrid::ServerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ServerPrx>();
}
/// \endcond

const ::std::string&
IceGrid::ServerPrx::ice_staticId()
{
    return Server::ice_staticId();
}

/// \cond INTERNAL
void
IceGrid::ReplicaObserverPrx::_iceI_replicaInit(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const InternalRegistryPrxSeq& iceP_replicas, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_ReplicaObserver_replicaInit_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_replicas);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ReplicaObserverPrx::_iceI_replicaAdded(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<InternalRegistryPrx>& iceP_replica, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_ReplicaObserver_replicaAdded_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_replica);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ReplicaObserverPrx::_iceI_replicaRemoved(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<InternalRegistryPrx>& iceP_replica, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_ReplicaObserver_replicaRemoved_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_replica);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
IceGrid::ReplicaObserverPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ReplicaObserverPrx>();
}
/// \endcond

const ::std::string&
IceGrid::ReplicaObserverPrx::ice_staticId()
{
    return ReplicaObserver::ice_staticId();
}

/// \cond INTERNAL
void
IceGrid::PatcherFeedbackPrx::_iceI_finished(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_PatcherFeedback_finished_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::PatcherFeedbackPrx::_iceI_failed(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_reason, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_PatcherFeedback_failed_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_reason);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
IceGrid::PatcherFeedbackPrx::_newInstance() const
{
    return ::IceInternal::createProxy<PatcherFeedbackPrx>();
}
/// \endcond

const ::std::string&
IceGrid::PatcherFeedbackPrx::ice_staticId()
{
    return PatcherFeedback::ice_staticId();
}

/// \cond INTERNAL
void
IceGrid::NodePrx::_iceI_loadServer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Node::LoadServerResult>>& outAsync, const ::std::shared_ptr<InternalServerDescriptor>& iceP_svr, const ::std::string& iceP_replicaName, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Node_loadServer_name);
    outAsync->invoke(iceC_IceGrid_Node_loadServer_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_svr, iceP_replicaName);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const DeploymentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            Node::LoadServerResult v;
            istr->readAll(v.adapters, v.actTimeout, v.deactTimeout, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodePrx::_iceI_loadServerWithoutRestart(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Node::LoadServerWithoutRestartResult>>& outAsync, const ::std::shared_ptr<InternalServerDescriptor>& iceP_svr, const ::std::string& iceP_replicaName, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Node_loadServerWithoutRestart_name);
    outAsync->invoke(iceC_IceGrid_Node_loadServerWithoutRestart_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_svr, iceP_replicaName);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const DeploymentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [](::Ice::InputStream* istr)
        {
            Node::LoadServerWithoutRestartResult v;
            istr->readAll(v.adapters, v.actTimeout, v.deactTimeout, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodePrx::_iceI_destroyServer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_name, const ::std::string& iceP_uuid, int iceP_revision, const ::std::string& iceP_replicaName, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Node_destroyServer_name);
    outAsync->invoke(iceC_IceGrid_Node_destroyServer_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name, iceP_uuid, iceP_revision, iceP_replicaName);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const DeploymentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodePrx::_iceI_destroyServerWithoutRestart(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_name, const ::std::string& iceP_uuid, int iceP_revision, const ::std::string& iceP_replicaName, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Node_destroyServerWithoutRestart_name);
    outAsync->invoke(iceC_IceGrid_Node_destroyServerWithoutRestart_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name, iceP_uuid, iceP_revision, iceP_replicaName);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const DeploymentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodePrx::_iceI_patch(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<PatcherFeedbackPrx>& iceP_feedback, const ::std::string& iceP_application, const ::std::string& iceP_server, const ::std::shared_ptr<InternalDistributionDescriptor>& iceP_appDistrib, bool iceP_shutdown, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_Node_patch_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_feedback, iceP_application, iceP_server, iceP_appDistrib, iceP_shutdown);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodePrx::_iceI_registerWithReplica(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<InternalRegistryPrx>& iceP_replica, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_Node_registerWithReplica_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_replica);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodePrx::_iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Node_getName_name);
    outAsync->invoke(iceC_IceGrid_Node_getName_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodePrx::_iceI_getHostname(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Node_getHostname_name);
    outAsync->invoke(iceC_IceGrid_Node_getHostname_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodePrx::_iceI_getLoad(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::IceGrid::LoadInfo>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Node_getLoad_name);
    outAsync->invoke(iceC_IceGrid_Node_getLoad_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodePrx::_iceI_getProcessorSocketCount(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_Node_getProcessorSocketCount_name);
    outAsync->invoke(iceC_IceGrid_Node_getProcessorSocketCount_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodePrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_Node_shutdown_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
IceGrid::NodePrx::_newInstance() const
{
    return ::IceInternal::createProxy<NodePrx>();
}
/// \endcond

const ::std::string&
IceGrid::NodePrx::ice_staticId()
{
    return Node::ice_staticId();
}

/// \cond INTERNAL
void
IceGrid::NodeSessionPrx::_iceI_keepAlive(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const LoadInfo& iceP_load, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_NodeSession_keepAlive_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_load);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodeSessionPrx::_iceI_setReplicaObserver(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<ReplicaObserverPrx>& iceP_observer, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_NodeSession_setReplicaObserver_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_observer);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodeSessionPrx::_iceI_getTimeout(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_NodeSession_getTimeout_name);
    outAsync->invoke(iceC_IceGrid_NodeSession_getTimeout_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodeSessionPrx::_iceI_getObserver(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::IceGrid::NodeObserverPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_NodeSession_getObserver_name);
    outAsync->invoke(iceC_IceGrid_NodeSession_getObserver_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodeSessionPrx::_iceI_loadServers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_NodeSession_loadServers_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodeSessionPrx::_iceI_getServers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Ice::StringSeq>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_NodeSession_getServers_name);
    outAsync->invoke(iceC_IceGrid_NodeSession_getServers_name, ::Ice::OperationMode::Nonmutating, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodeSessionPrx::_iceI_waitForApplicationUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_application, int iceP_revision, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_NodeSession_waitForApplicationUpdate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_application, iceP_revision);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::NodeSessionPrx::_iceI_destroy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_NodeSession_destroy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
IceGrid::NodeSessionPrx::_newInstance() const
{
    return ::IceInternal::createProxy<NodeSessionPrx>();
}
/// \endcond

const ::std::string&
IceGrid::NodeSessionPrx::ice_staticId()
{
    return NodeSession::ice_staticId();
}

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
IceGrid::DatabaseObserverPrx::_newInstance() const
{
    return ::IceInternal::createProxy<DatabaseObserverPrx>();
}
/// \endcond

const ::std::string&
IceGrid::DatabaseObserverPrx::ice_staticId()
{
    return DatabaseObserver::ice_staticId();
}

/// \cond INTERNAL
void
IceGrid::ReplicaSessionPrx::_iceI_keepAlive(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_ReplicaSession_keepAlive_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ReplicaSessionPrx::_iceI_getTimeout(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_ReplicaSession_getTimeout_name);
    outAsync->invoke(iceC_IceGrid_ReplicaSession_getTimeout_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ReplicaSessionPrx::_iceI_setDatabaseObserver(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<DatabaseObserverPrx>& iceP_dbObs, const std::optional<StringLongDict>& iceP_serials, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_ReplicaSession_setDatabaseObserver_name);
    outAsync->invoke(iceC_IceGrid_ReplicaSession_setDatabaseObserver_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_dbObs);
            ostr->writeAll({1}, iceP_serials);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const DeploymentException&)
            {
                throw;
            }
            catch(const ObserverAlreadyRegisteredException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ReplicaSessionPrx::_iceI_setEndpoints(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const StringObjectProxyDict& iceP_endpoints, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_ReplicaSession_setEndpoints_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_endpoints);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ReplicaSessionPrx::_iceI_registerWellKnownObjects(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ObjectInfoSeq& iceP_objects, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_ReplicaSession_registerWellKnownObjects_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_objects);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ReplicaSessionPrx::_iceI_setAdapterDirectProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_adapterId, const ::std::string& iceP_replicaGroupId, const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_proxy, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_ReplicaSession_setAdapterDirectProxy_name);
    outAsync->invoke(iceC_IceGrid_ReplicaSession_setAdapterDirectProxy_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_adapterId, iceP_replicaGroupId, iceP_proxy);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const AdapterNotExistException&)
            {
                throw;
            }
            catch(const AdapterExistsException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ReplicaSessionPrx::_iceI_receivedUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, TopicName iceP_name, int iceP_serial, const ::std::string& iceP_failure, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_ReplicaSession_receivedUpdate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name, iceP_serial, iceP_failure);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::ReplicaSessionPrx::_iceI_destroy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_ReplicaSession_destroy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
IceGrid::ReplicaSessionPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ReplicaSessionPrx>();
}
/// \endcond

const ::std::string&
IceGrid::ReplicaSessionPrx::ice_staticId()
{
    return ReplicaSession::ice_staticId();
}

/// \cond INTERNAL
void
IceGrid::InternalRegistryPrx::_iceI_registerNode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::IceGrid::NodeSessionPrx>>>& outAsync, const ::std::shared_ptr<InternalNodeInfo>& iceP_info, const ::std::shared_ptr<NodePrx>& iceP_prx, const LoadInfo& iceP_loadInf, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_InternalRegistry_registerNode_name);
    outAsync->invoke(iceC_IceGrid_InternalRegistry_registerNode_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_info, iceP_prx, iceP_loadInf);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const PermissionDeniedException&)
            {
                throw;
            }
            catch(const NodeActiveException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::InternalRegistryPrx::_iceI_registerReplica(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::IceGrid::ReplicaSessionPrx>>>& outAsync, const ::std::shared_ptr<InternalReplicaInfo>& iceP_info, const ::std::shared_ptr<InternalRegistryPrx>& iceP_prx, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_InternalRegistry_registerReplica_name);
    outAsync->invoke(iceC_IceGrid_InternalRegistry_registerReplica_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_info, iceP_prx);
            ostr->writePendingValues();
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const PermissionDeniedException&)
            {
                throw;
            }
            catch(const ReplicaActiveException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::InternalRegistryPrx::_iceI_registerWithReplica(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<InternalRegistryPrx>& iceP_prx, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_InternalRegistry_registerWithReplica_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_prx);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::InternalRegistryPrx::_iceI_getNodes(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::IceGrid::NodePrxSeq>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_InternalRegistry_getNodes_name);
    outAsync->invoke(iceC_IceGrid_InternalRegistry_getNodes_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::InternalRegistryPrx::_iceI_getReplicas(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::IceGrid::InternalRegistryPrxSeq>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_InternalRegistry_getReplicas_name);
    outAsync->invoke(iceC_IceGrid_InternalRegistry_getReplicas_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::InternalRegistryPrx::_iceI_getApplications(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<InternalRegistry::GetApplicationsResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_InternalRegistry_getApplications_name);
    outAsync->invoke(iceC_IceGrid_InternalRegistry_getApplications_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            InternalRegistry::GetApplicationsResult v;
            istr->readAll(v.serial, v.returnValue);
            istr->readPendingValues();
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::InternalRegistryPrx::_iceI_getAdapters(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<InternalRegistry::GetAdaptersResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_InternalRegistry_getAdapters_name);
    outAsync->invoke(iceC_IceGrid_InternalRegistry_getAdapters_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            InternalRegistry::GetAdaptersResult v;
            istr->readAll(v.serial, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::InternalRegistryPrx::_iceI_getObjects(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<InternalRegistry::GetObjectsResult>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_IceGrid_InternalRegistry_getObjects_name);
    outAsync->invoke(iceC_IceGrid_InternalRegistry_getObjects_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr,
        [](::Ice::InputStream* istr)
        {
            InternalRegistry::GetObjectsResult v;
            istr->readAll(v.serial, v.returnValue);
            return v;
        });
}
/// \endcond

/// \cond INTERNAL
void
IceGrid::InternalRegistryPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceGrid_InternalRegistry_shutdown_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
IceGrid::InternalRegistryPrx::_newInstance() const
{
    return ::IceInternal::createProxy<InternalRegistryPrx>();
}
/// \endcond

const ::std::string&
IceGrid::InternalRegistryPrx::ice_staticId()
{
    return InternalRegistry::ice_staticId();
}
