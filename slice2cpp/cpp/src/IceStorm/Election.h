//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `Election.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Election_h__
#define __Election_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Ice/Identity.h>
#include <Ice/BuiltinSequences.h>
#include <SubscriberRecord.h>
#include <LLURecord.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace IceStormElection
{

struct TopicContent;

/**
 * A sequence of topic content.
 */
using TopicContentSeq = ::std::vector<TopicContent>;
class ReplicaObserverPrx;

using ReplicaObserverPrxPtr = ::std::optional<ReplicaObserverPrx>;
class TopicManagerSyncPrx;

using TopicManagerSyncPrxPtr = ::std::optional<TopicManagerSyncPrx>;

/**
 * The node state.
 */
enum class NodeState : unsigned char
{
    /**
     * The node is inactive and awaiting an election.
     */
    NodeStateInactive,
    /**
     * The node is electing a leader.
     */
    NodeStateElection,
    /**
     * The replica group is reorganizing.
     */
    NodeStateReorganization,
    /**
     * The replica group is active & replicating.
     */
    NodeStateNormal
};
class NodePrx;

using NodePrxPtr = ::std::optional<NodePrx>;
struct NodeInfo;

/**
 * A sequence of node info.
 */
using NodeInfoSeq = ::std::vector<NodeInfo>;
struct GroupInfo;

/**
 * A sequence of group info.
 */
using GroupInfoSeq = ::std::vector<GroupInfo>;
struct QueryInfo;

}

namespace IceStormElection
{

/**
 * The replica observer.
 */
class ReplicaObserverPrx : public ::Ice::Proxy<ReplicaObserverPrx, ::Ice::ObjectPrx>
{
public:

    /**
     * Initialize the observer.
     * @param llu The last log update seen by the master.
     * @param content The topic content.
     * @param context The Context map to send with the invocation.
     * @throws IceStormElection::ObserverInconsistencyException Raised if an
     * inconsisency was detected.
     */
    void init(const LogUpdate& llu, const TopicContentSeq& content, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Initialize the observer.
     * @param llu The last log update seen by the master.
     * @param content The topic content.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> initAsync(const LogUpdate& llu, const TopicContentSeq& content, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Initialize the observer.
     * @param llu The last log update seen by the master.
     * @param content The topic content.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    initAsync(const LogUpdate& llu, const TopicContentSeq& content, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_init(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const LogUpdate&, const TopicContentSeq&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Create the topic with the given name.
     * @param llu The log update token.
     * @param name The topic name.
     * @param context The Context map to send with the invocation.
     * @throws IceStormElection::ObserverInconsistencyException Raised if an
     * inconsisency was detected.
     */
    void createTopic(const LogUpdate& llu, ::std::string_view name, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Create the topic with the given name.
     * @param llu The log update token.
     * @param name The topic name.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> createTopicAsync(const LogUpdate& llu, ::std::string_view name, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Create the topic with the given name.
     * @param llu The log update token.
     * @param name The topic name.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    createTopicAsync(const LogUpdate& llu, ::std::string_view name, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_createTopic(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const LogUpdate&, ::std::string_view, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Destroy the topic with the given name.
     * @param llu The log update token.
     * @param name The topic name.
     * @param context The Context map to send with the invocation.
     * @throws IceStormElection::ObserverInconsistencyException Raised if an
     * inconsisency was detected.
     */
    void destroyTopic(const LogUpdate& llu, ::std::string_view name, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Destroy the topic with the given name.
     * @param llu The log update token.
     * @param name The topic name.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> destroyTopicAsync(const LogUpdate& llu, ::std::string_view name, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Destroy the topic with the given name.
     * @param llu The log update token.
     * @param name The topic name.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    destroyTopicAsync(const LogUpdate& llu, ::std::string_view name, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_destroyTopic(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const LogUpdate&, ::std::string_view, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Add a subscriber to a topic.
     * @param llu The log update token.
     * @param topic The topic name to which to add the subscriber.
     * @param record The subscriber information.
     * @param context The Context map to send with the invocation.
     * @throws IceStormElection::ObserverInconsistencyException Raised if an
     * inconsisency was detected.
     */
    void addSubscriber(const LogUpdate& llu, ::std::string_view topic, const ::IceStorm::SubscriberRecord& record, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Add a subscriber to a topic.
     * @param llu The log update token.
     * @param topic The topic name to which to add the subscriber.
     * @param record The subscriber information.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> addSubscriberAsync(const LogUpdate& llu, ::std::string_view topic, const ::IceStorm::SubscriberRecord& record, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Add a subscriber to a topic.
     * @param llu The log update token.
     * @param topic The topic name to which to add the subscriber.
     * @param record The subscriber information.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    addSubscriberAsync(const LogUpdate& llu, ::std::string_view topic, const ::IceStorm::SubscriberRecord& record, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_addSubscriber(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const LogUpdate&, ::std::string_view, const ::IceStorm::SubscriberRecord&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Remove a subscriber from a topic.
     * @param llu The log update token.
     * @param subscribers The identities of the subscribers to remove.
     * @param context The Context map to send with the invocation.
     * @throws IceStormElection::ObserverInconsistencyException Raised if an inconsisency was detected.
     */
    void removeSubscriber(const LogUpdate& llu, ::std::string_view topic, const ::Ice::IdentitySeq& subscribers, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Remove a subscriber from a topic.
     * @param llu The log update token.
     * @param subscribers The identities of the subscribers to remove.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> removeSubscriberAsync(const LogUpdate& llu, ::std::string_view topic, const ::Ice::IdentitySeq& subscribers, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Remove a subscriber from a topic.
     * @param llu The log update token.
     * @param subscribers The identities of the subscribers to remove.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    removeSubscriberAsync(const LogUpdate& llu, ::std::string_view topic, const ::Ice::IdentitySeq& subscribers, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_removeSubscriber(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const LogUpdate&, ::std::string_view, const ::Ice::IdentitySeq&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    explicit ReplicaObserverPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    ReplicaObserverPrx(const ReplicaObserverPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    ReplicaObserverPrx(ReplicaObserverPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    ReplicaObserverPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    ReplicaObserverPrx& operator=(const ReplicaObserverPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    ReplicaObserverPrx& operator=(ReplicaObserverPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static ReplicaObserverPrx _fromReference(::IceInternal::ReferencePtr ref) { return ReplicaObserverPrx(::std::move(ref)); }

protected:

    ReplicaObserverPrx() = default;

    explicit ReplicaObserverPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

/**
 * Interface used to sync topics.
 */
class TopicManagerSyncPrx : public ::Ice::Proxy<TopicManagerSyncPrx, ::Ice::ObjectPrx>
{
public:

    /**
     * Retrieve the topic content.
     * @param llu The last log update token.
     * @param content The topic content.
     * @param context The Context map to send with the invocation.
     */
    void getContent(LogUpdate& llu, TopicContentSeq& content, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Retrieve the topic content.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<::std::tuple<LogUpdate, TopicContentSeq>> getContentAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Retrieve the topic content.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    getContentAsync(::std::function<void(::IceStormElection::LogUpdate, ::IceStormElection::TopicContentSeq)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_getContent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::tuple<LogUpdate, TopicContentSeq>>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    explicit TopicManagerSyncPrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    TopicManagerSyncPrx(const TopicManagerSyncPrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    TopicManagerSyncPrx(TopicManagerSyncPrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    TopicManagerSyncPrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    TopicManagerSyncPrx& operator=(const TopicManagerSyncPrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    TopicManagerSyncPrx& operator=(TopicManagerSyncPrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static TopicManagerSyncPrx _fromReference(::IceInternal::ReferencePtr ref) { return TopicManagerSyncPrx(::std::move(ref)); }

protected:

    TopicManagerSyncPrx() = default;

    explicit TopicManagerSyncPrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

/**
 * A replica node.
 */
class NodePrx : public ::Ice::Proxy<NodePrx, ::Ice::ObjectPrx>
{
public:

    /**
     * Invite the node into a group with the given coordinator and group name.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param context The Context map to send with the invocation.
     */
    void invitation(::std::int32_t j, ::std::string_view gn, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Invite the node into a group with the given coordinator and group name.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> invitationAsync(::std::int32_t j, ::std::string_view gn, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Invite the node into a group with the given coordinator and group name.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    invitationAsync(::std::int32_t j, ::std::string_view gn, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_invitation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, ::std::int32_t, ::std::string_view, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Call from the group coordinator to a node to inform the node that the replica group is active.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param coordinator The proxy to the coordinator.
     * @param max The highest priority node seen by this replica group.
     * @param generation The current generation count.
     * @param context The Context map to send with the invocation.
     */
    void ready(::std::int32_t j, ::std::string_view gn, const ::std::optional<::Ice::ObjectPrx>& coordinator, ::std::int32_t max, ::std::int64_t generation, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Call from the group coordinator to a node to inform the node that the replica group is active.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param coordinator The proxy to the coordinator.
     * @param max The highest priority node seen by this replica group.
     * @param generation The current generation count.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> readyAsync(::std::int32_t j, ::std::string_view gn, const ::std::optional<::Ice::ObjectPrx>& coordinator, ::std::int32_t max, ::std::int64_t generation, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Call from the group coordinator to a node to inform the node that the replica group is active.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param coordinator The proxy to the coordinator.
     * @param max The highest priority node seen by this replica group.
     * @param generation The current generation count.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    readyAsync(::std::int32_t j, ::std::string_view gn, const ::std::optional<::Ice::ObjectPrx>& coordinator, ::std::int32_t max, ::std::int64_t generation, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_ready(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, ::std::int32_t, ::std::string_view, const ::std::optional<::Ice::ObjectPrx>&, ::std::int32_t, ::std::int64_t, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Called to accept an invitation into the given group.
     * @param j The id of the node accepting the invitation.
     * @param gn The group name.
     * @param forwardedInvites The ids of the nodes to which invitations were forwarded.
     * @param observer The observer.
     * @param llu The last log update for the given node.
     * @param max The highest priority node seen by this replica group.
     * @param context The Context map to send with the invocation.
     */
    void accept(::std::int32_t j, ::std::string_view gn, const ::Ice::IntSeq& forwardedInvites, const ::std::optional<::Ice::ObjectPrx>& observer, const LogUpdate& llu, ::std::int32_t max, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Called to accept an invitation into the given group.
     * @param j The id of the node accepting the invitation.
     * @param gn The group name.
     * @param forwardedInvites The ids of the nodes to which invitations were forwarded.
     * @param observer The observer.
     * @param llu The last log update for the given node.
     * @param max The highest priority node seen by this replica group.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<void> acceptAsync(::std::int32_t j, ::std::string_view gn, const ::Ice::IntSeq& forwardedInvites, const ::std::optional<::Ice::ObjectPrx>& observer, const LogUpdate& llu, ::std::int32_t max, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Called to accept an invitation into the given group.
     * @param j The id of the node accepting the invitation.
     * @param gn The group name.
     * @param forwardedInvites The ids of the nodes to which invitations were forwarded.
     * @param observer The observer.
     * @param llu The last log update for the given node.
     * @param max The highest priority node seen by this replica group.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    acceptAsync(::std::int32_t j, ::std::string_view gn, const ::Ice::IntSeq& forwardedInvites, const ::std::optional<::Ice::ObjectPrx>& observer, const LogUpdate& llu, ::std::int32_t max, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_accept(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, ::std::int32_t, ::std::string_view, const ::Ice::IntSeq&, const ::std::optional<::Ice::ObjectPrx>&, const LogUpdate&, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Determine if this node is a coordinator.
     * @param context The Context map to send with the invocation.
     * @return True if the node is a coordinator, false otherwise.
     */
    bool areYouCoordinator(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Determine if this node is a coordinator.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<bool> areYouCoordinatorAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Determine if this node is a coordinator.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    areYouCoordinatorAsync(::std::function<void(bool)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_areYouCoordinator(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Determine if the node is a member of the given group with the given coordinator.
     * @param gn The group name.
     * @param j The group coordinator.
     * @param context The Context map to send with the invocation.
     * @return True if the node is a member, false otherwise.
     */
    bool areYouThere(::std::string_view gn, ::std::int32_t j, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Determine if the node is a member of the given group with the given coordinator.
     * @param gn The group name.
     * @param j The group coordinator.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<bool> areYouThereAsync(::std::string_view gn, ::std::int32_t j, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Determine if the node is a member of the given group with the given coordinator.
     * @param gn The group name.
     * @param j The group coordinator.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    areYouThereAsync(::std::string_view gn, ::std::int32_t j, ::std::function<void(bool)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_areYouThere(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, ::std::string_view, ::std::int32_t, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Get the sync object for the replica hosted by this node.
     * @param context The Context map to send with the invocation.
     * @return The sync object.
     */
    ::std::optional<::Ice::ObjectPrx> sync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Get the sync object for the replica hosted by this node.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<::std::optional<::Ice::ObjectPrx>> syncAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Get the sync object for the replica hosted by this node.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    syncAsync(::std::function<void(::std::optional<::Ice::ObjectPrx>)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_sync(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::Ice::ObjectPrx>>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Get the replication group information.
     * @param context The Context map to send with the invocation.
     * @return The set of configured nodes and the associated priority.
     */
    NodeInfoSeq nodes(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Get the replication group information.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<NodeInfoSeq> nodesAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Get the replication group information.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    nodesAsync(::std::function<void(::IceStormElection::NodeInfoSeq)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_nodes(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<NodeInfoSeq>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Get the query information for the given node.
     * @param context The Context map to send with the invocation.
     * @return The query information.
     */
    QueryInfo query(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Get the query information for the given node.
     * @param context The Context map to send with the invocation.
     * @return The future object for the invocation.
     */
    ::std::future<QueryInfo> queryAsync(const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /**
     * Get the query information for the given node.
     * @param response The response callback.
     * @param ex The exception callback.
     * @param sent The sent callback.
     * @param context The Context map to send with the invocation.
     * @return A function that can be called to cancel the invocation locally.
     */
    ::std::function<void()>
    queryAsync(::std::function<void(::IceStormElection::QueryInfo)> response, ::std::function<void(::std::exception_ptr)> ex = nullptr, ::std::function<void(bool)> sent = nullptr, const ::Ice::Context& context = ::Ice::noExplicitContext) const;

    /// \cond INTERNAL
    void _iceI_query(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<QueryInfo>>&, const ::Ice::Context&) const;
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    explicit NodePrx(const ::Ice::ObjectPrx& other) : ::Ice::ObjectPrx(other)
    {
    }

    NodePrx(const NodePrx& other) noexcept : ::Ice::ObjectPrx(other)
    {
    }

    NodePrx(NodePrx&& other) noexcept : ::Ice::ObjectPrx(::std::move(other))
    {
    }

    NodePrx(const ::std::shared_ptr<::Ice::Communicator>& communicator, const ::std::string& proxyString) :
        ::Ice::ObjectPrx(communicator, proxyString)
    {
    }

    NodePrx& operator=(const NodePrx& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(rhs);
        return *this;
    }

    NodePrx& operator=(NodePrx&& rhs) noexcept
    {
        ::Ice::ObjectPrx::operator=(::std::move(rhs));
        return *this;
    }

    /// \cond INTERNAL
    static NodePrx _fromReference(::IceInternal::ReferencePtr ref) { return NodePrx(::std::move(ref)); }

protected:

    NodePrx() = default;

    explicit NodePrx(::IceInternal::ReferencePtr&& ref) : ::Ice::ObjectPrx(::std::move(ref))
    {
    }
    /// \endcond
};

}

namespace IceStormElection
{

/**
 * The contents of topic.
 */
struct TopicContent
{
    /**
     * The topic identity.
     */
    ::Ice::Identity id;
    /**
     * The topic subscribers.
     */
    ::IceStorm::SubscriberRecordSeq records;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::Ice::Identity&, const ::IceStorm::SubscriberRecordSeq&> ice_tuple() const
    {
        return std::tie(id, records);
    }
};

/**
 * Thrown if an observer detects an inconsistency.
 */
class ObserverInconsistencyException : public ::Ice::UserExceptionHelper<ObserverInconsistencyException, ::Ice::UserException>
{
public:

    virtual ~ObserverInconsistencyException();

    ObserverInconsistencyException(const ObserverInconsistencyException&) = default;

    ObserverInconsistencyException() = default;

    /**
     * One-shot constructor to initialize all data members.
     * @param reason The reason for the inconsistency.
     */
    ObserverInconsistencyException(::std::string_view reason) :
        reason(reason)
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    /**
     * The reason for the inconsistency.
     */
    ::std::string reason;
};

/// \cond INTERNAL
static ObserverInconsistencyException _iceS_ObserverInconsistencyException_init;
/// \endcond

/**
 * All nodes in the replication group.
 */
struct NodeInfo
{
    /**
     * The identity of the node.
     */
    ::std::int32_t id;
    /**
     * The node proxy.
     */
    ::std::optional<::IceStormElection::NodePrx> n;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::optional<::IceStormElection::NodePrx>&> ice_tuple() const
    {
        return std::tie(id, n);
    }
};

/**
 * The group info.
 */
struct GroupInfo
{
    /**
     * The identity of the node.
     */
    ::std::int32_t id;
    /**
     * The last known log update for this node.
     */
    ::IceStormElection::LogUpdate llu;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::IceStormElection::LogUpdate&> ice_tuple() const
    {
        return std::tie(id, llu);
    }
};

struct QueryInfo
{
    /**
     * The node id.
     */
    ::std::int32_t id;
    /**
     * The nodes coordinator.
     */
    ::std::int32_t coord;
    /**
     * The nodes group name.
     */
    ::std::string group;
    /**
     * The replica the node is managing.
     */
    ::std::optional<::Ice::ObjectPrx> replica;
    /**
     * The node state.
     */
    ::IceStormElection::NodeState state;
    /**
     * The sequence of nodes in this nodes group.
     */
    ::IceStormElection::GroupInfoSeq up;
    /**
     * The highest priority node that this node has seen.
     */
    ::std::int32_t max;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int32_t&, const ::std::int32_t&, const ::std::string&, const ::std::optional<::Ice::ObjectPrx>&, const ::IceStormElection::NodeState&, const ::IceStormElection::GroupInfoSeq&, const ::std::int32_t&> ice_tuple() const
    {
        return std::tie(id, coord, group, replica, state, up, max);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace IceStormElection
{

/**
 * The replica observer.
 */
class ReplicaObserver : public virtual ::Ice::Object
{
public:

    using ProxyType = ReplicaObserverPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    /**
     * Initialize the observer.
     * @param llu The last log update seen by the master.
     * @param content The topic content.
     * @param current The Current object for the invocation.
     * @throws IceStormElection::ObserverInconsistencyException Raised if an
     * inconsisency was detected.
     */
    virtual void init(LogUpdate llu, TopicContentSeq content, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_init(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Create the topic with the given name.
     * @param llu The log update token.
     * @param name The topic name.
     * @param current The Current object for the invocation.
     * @throws IceStormElection::ObserverInconsistencyException Raised if an
     * inconsisency was detected.
     */
    virtual void createTopic(LogUpdate llu, ::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_createTopic(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Destroy the topic with the given name.
     * @param llu The log update token.
     * @param name The topic name.
     * @param current The Current object for the invocation.
     * @throws IceStormElection::ObserverInconsistencyException Raised if an
     * inconsisency was detected.
     */
    virtual void destroyTopic(LogUpdate llu, ::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_destroyTopic(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Add a subscriber to a topic.
     * @param llu The log update token.
     * @param topic The topic name to which to add the subscriber.
     * @param record The subscriber information.
     * @param current The Current object for the invocation.
     * @throws IceStormElection::ObserverInconsistencyException Raised if an
     * inconsisency was detected.
     */
    virtual void addSubscriber(LogUpdate llu, ::std::string topic, ::IceStorm::SubscriberRecord record, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_addSubscriber(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Remove a subscriber from a topic.
     * @param llu The log update token.
     * @param subscribers The identities of the subscribers to remove.
     * @param current The Current object for the invocation.
     * @throws IceStormElection::ObserverInconsistencyException Raised if an inconsisency was detected.
     */
    virtual void removeSubscriber(LogUpdate llu, ::std::string topic, ::Ice::IdentitySeq subscribers, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_removeSubscriber(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using ReplicaObserverPtr = ::std::shared_ptr<ReplicaObserver>;

/**
 * Interface used to sync topics.
 */
class TopicManagerSync : public virtual ::Ice::Object
{
public:

    using ProxyType = TopicManagerSyncPrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    /**
     * Retrieve the topic content.
     * @param llu The last log update token.
     * @param content The topic content.
     * @param current The Current object for the invocation.
     */
    virtual void getContent(LogUpdate& llu, TopicContentSeq& content, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getContent(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using TopicManagerSyncPtr = ::std::shared_ptr<TopicManagerSync>;

/**
 * A replica node.
 */
class Node : public virtual ::Ice::Object
{
public:

    using ProxyType = NodePrx;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static ::std::string_view ice_staticId();

    /**
     * Invite the node into a group with the given coordinator and group name.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param current The Current object for the invocation.
     */
    virtual void invitation(::std::int32_t j, ::std::string gn, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_invitation(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Call from the group coordinator to a node to inform the node that the replica group is active.
     * @param j The group coordinator.
     * @param gn The group name.
     * @param coordinator The proxy to the coordinator.
     * @param max The highest priority node seen by this replica group.
     * @param generation The current generation count.
     * @param current The Current object for the invocation.
     */
    virtual void ready(::std::int32_t j, ::std::string gn, ::std::optional<::Ice::ObjectPrx> coordinator, ::std::int32_t max, ::std::int64_t generation, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_ready(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Called to accept an invitation into the given group.
     * @param j The id of the node accepting the invitation.
     * @param gn The group name.
     * @param forwardedInvites The ids of the nodes to which invitations were forwarded.
     * @param observer The observer.
     * @param llu The last log update for the given node.
     * @param max The highest priority node seen by this replica group.
     * @param current The Current object for the invocation.
     */
    virtual void accept(::std::int32_t j, ::std::string gn, ::Ice::IntSeq forwardedInvites, ::std::optional<::Ice::ObjectPrx> observer, LogUpdate llu, ::std::int32_t max, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_accept(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Determine if this node is a coordinator.
     * @param current The Current object for the invocation.
     * @return True if the node is a coordinator, false otherwise.
     */
    virtual bool areYouCoordinator(const ::Ice::Current& current) const = 0;
    /// \cond INTERNAL
    bool _iceD_areYouCoordinator(::IceInternal::Incoming&, const ::Ice::Current&) const;
    /// \endcond

    /**
     * Determine if the node is a member of the given group with the given coordinator.
     * @param gn The group name.
     * @param j The group coordinator.
     * @param current The Current object for the invocation.
     * @return True if the node is a member, false otherwise.
     */
    virtual bool areYouThere(::std::string gn, ::std::int32_t j, const ::Ice::Current& current) const = 0;
    /// \cond INTERNAL
    bool _iceD_areYouThere(::IceInternal::Incoming&, const ::Ice::Current&) const;
    /// \endcond

    /**
     * Get the sync object for the replica hosted by this node.
     * @param current The Current object for the invocation.
     * @return The sync object.
     */
    virtual ::std::optional<::Ice::ObjectPrx> sync(const ::Ice::Current& current) const = 0;
    /// \cond INTERNAL
    bool _iceD_sync(::IceInternal::Incoming&, const ::Ice::Current&) const;
    /// \endcond

    /**
     * Get the replication group information.
     * @param current The Current object for the invocation.
     * @return The set of configured nodes and the associated priority.
     */
    virtual NodeInfoSeq nodes(const ::Ice::Current& current) const = 0;
    /// \cond INTERNAL
    bool _iceD_nodes(::IceInternal::Incoming&, const ::Ice::Current&) const;
    /// \endcond

    /**
     * Get the query information for the given node.
     * @param current The Current object for the invocation.
     * @return The query information.
     */
    virtual QueryInfo query(const ::Ice::Current& current) const = 0;
    /// \cond INTERNAL
    bool _iceD_query(::IceInternal::Incoming&, const ::Ice::Current&) const;
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

using NodePtr = ::std::shared_ptr<Node>;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::IceStormElection::TopicContent>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::IceStormElection::TopicContent, S>
{
    static void read(S* istr, ::IceStormElection::TopicContent& v)
    {
        istr->readAll(v.id, v.records);
    }
};

template<typename S>
struct StreamReader<::IceStormElection::ObserverInconsistencyException, S>
{
    static void read(S* istr, ::IceStormElection::ObserverInconsistencyException& v)
    {
        istr->readAll(v.reason);
    }
};

template<>
struct StreamableTraits< ::IceStormElection::NodeState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::IceStormElection::NodeInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::IceStormElection::NodeInfo, S>
{
    static void read(S* istr, ::IceStormElection::NodeInfo& v)
    {
        istr->readAll(v.id, v.n);
    }
};

template<>
struct StreamableTraits<::IceStormElection::GroupInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 20;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::IceStormElection::GroupInfo, S>
{
    static void read(S* istr, ::IceStormElection::GroupInfo& v)
    {
        istr->readAll(v.id, v.llu);
    }
};

template<>
struct StreamableTraits<::IceStormElection::QueryInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 17;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::IceStormElection::QueryInfo, S>
{
    static void read(S* istr, ::IceStormElection::QueryInfo& v)
    {
        istr->readAll(v.id, v.coord, v.group, v.replica, v.state, v.up, v.max);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
