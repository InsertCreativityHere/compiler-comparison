//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `LLURecord.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __LLURecord_h__
#define __LLURecord_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace IceStormElection
{

struct LogUpdate;

}

namespace IceStormElection
{

/**
 * A struct used for marking the last log update.
 */
struct LogUpdate
{
    /**
     * The generation.
     */
    ::std::int64_t generation;
    /**
     * The iteration within this generation.
     */
    ::std::int64_t iteration;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::int64_t&, const ::std::int64_t&> ice_tuple() const
    {
        return std::tie(generation, iteration);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::IceStormElection::LogUpdate>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::IceStormElection::LogUpdate, S>
{
    static void read(S* istr, ::IceStormElection::LogUpdate& v)
    {
        istr->readAll(v.generation, v.iteration);
    }
};

}
/// \endcond

#include <IceUtil/PopDisableWarnings.h>
#endif
