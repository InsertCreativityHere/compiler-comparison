//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file `IceStormInternal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#define ICE_BUILDING_GENERATED_CODE
#include <IceStormInternal.h>
#include <Ice/OutgoingAsync.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::IceStorm::ReapWouldBlock> iceC_IceStorm_ReapWouldBlock_init("::IceStorm::ReapWouldBlock");

}

void
IceStorm::TopicLinkPrx::forward(const EventDataSeq& iceP_events, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TopicLinkPrx::_iceI_forward, iceP_events, context).get();
}

::std::future<void>
IceStorm::TopicLinkPrx::forwardAsync(const EventDataSeq& iceP_events, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TopicLinkPrx::_iceI_forward, iceP_events, context);
}

::std::function<void()>
IceStorm::TopicLinkPrx::forwardAsync(const EventDataSeq& iceP_events,
                                     ::std::function<void ()> response,
                                     ::std::function<void(::std::exception_ptr)> ex,
                                     ::std::function<void(bool)> sent,
                                     const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &IceStorm::TopicLinkPrx::_iceI_forward, iceP_events, context);
}

/// \cond INTERNAL
void
IceStorm::TopicLinkPrx::_iceI_forward(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const EventDataSeq& iceP_events, const ::Ice::Context& context) const
{
    static const ::std::string operationName = "forward";

    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_events);
        },
        nullptr);
}
/// \endcond

const ::std::string&
IceStorm::TopicLinkPrx::ice_staticId()
{
    static const ::std::string typeId = "::IceStorm::TopicLink";
    return typeId;
}

::std::optional<::IceStorm::TopicLinkPrx>
IceStorm::TopicInternalPrx::getLinkProxy(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<TopicLinkPrx>>(true, this, &TopicInternalPrx::_iceI_getLinkProxy, context).get();
}

::std::future<::std::optional<::IceStorm::TopicLinkPrx>>
IceStorm::TopicInternalPrx::getLinkProxyAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<TopicLinkPrx>>(false, this, &TopicInternalPrx::_iceI_getLinkProxy, context);
}

::std::function<void()>
IceStorm::TopicInternalPrx::getLinkProxyAsync(::std::function<void (::std::optional<::IceStorm::TopicLinkPrx>)> response,
                                              ::std::function<void(::std::exception_ptr)> ex,
                                              ::std::function<void(bool)> sent,
                                              const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<TopicLinkPrx>>(std::move(response), std::move(ex), std::move(sent), this, &IceStorm::TopicInternalPrx::_iceI_getLinkProxy, context);
}

/// \cond INTERNAL
void
IceStorm::TopicInternalPrx::_iceI_getLinkProxy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<TopicLinkPrx>>>& outAsync, const ::Ice::Context& context) const
{
    static const ::std::string operationName = "getLinkProxy";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

void
IceStorm::TopicInternalPrx::reap(const ::Ice::IdentitySeq& iceP_id, const ::Ice::Context& context) const
{
    ::IceInternal::makePromiseOutgoing<void>(true, this, &TopicInternalPrx::_iceI_reap, iceP_id, context).get();
}

::std::future<void>
IceStorm::TopicInternalPrx::reapAsync(const ::Ice::IdentitySeq& iceP_id, const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<void>(false, this, &TopicInternalPrx::_iceI_reap, iceP_id, context);
}

::std::function<void()>
IceStorm::TopicInternalPrx::reapAsync(const ::Ice::IdentitySeq& iceP_id,
                                      ::std::function<void ()> response,
                                      ::std::function<void(::std::exception_ptr)> ex,
                                      ::std::function<void(bool)> sent,
                                      const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &IceStorm::TopicInternalPrx::_iceI_reap, iceP_id, context);
}

/// \cond INTERNAL
void
IceStorm::TopicInternalPrx::_iceI_reap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::IdentitySeq& iceP_id, const ::Ice::Context& context) const
{
    static const ::std::string operationName = "reap";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ReapWouldBlock&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

const ::std::string&
IceStorm::TopicInternalPrx::ice_staticId()
{
    static const ::std::string typeId = "::IceStorm::TopicInternal";
    return typeId;
}

::std::optional<::IceStormElection::NodePrx>
IceStorm::TopicManagerInternalPrx::getReplicaNode(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::IceStormElection::NodePrx>>(true, this, &TopicManagerInternalPrx::_iceI_getReplicaNode, context).get();
}

::std::future<::std::optional<::IceStormElection::NodePrx>>
IceStorm::TopicManagerInternalPrx::getReplicaNodeAsync(const ::Ice::Context& context) const
{
    return ::IceInternal::makePromiseOutgoing<::std::optional<::IceStormElection::NodePrx>>(false, this, &TopicManagerInternalPrx::_iceI_getReplicaNode, context);
}

::std::function<void()>
IceStorm::TopicManagerInternalPrx::getReplicaNodeAsync(::std::function<void (::std::optional<::IceStormElection::NodePrx>)> response,
                                                       ::std::function<void(::std::exception_ptr)> ex,
                                                       ::std::function<void(bool)> sent,
                                                       const ::Ice::Context& context) const
{
    return ::IceInternal::makeLambdaOutgoing<::std::optional<::IceStormElection::NodePrx>>(std::move(response), std::move(ex), std::move(sent), this, &IceStorm::TopicManagerInternalPrx::_iceI_getReplicaNode, context);
}

/// \cond INTERNAL
void
IceStorm::TopicManagerInternalPrx::_iceI_getReplicaNode(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::optional<::IceStormElection::NodePrx>>>& outAsync, const ::Ice::Context& context) const
{
    static const ::std::string operationName = "getReplicaNode";

    _checkTwowayOnly(operationName);
    outAsync->invoke(operationName, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

const ::std::string&
IceStorm::TopicManagerInternalPrx::ice_staticId()
{
    static const ::std::string typeId = "::IceStorm::TopicManagerInternal";
    return typeId;
}

IceStorm::ReapWouldBlock::~ReapWouldBlock()
{
}

const ::std::string&
IceStorm::ReapWouldBlock::ice_staticId()
{
    static const ::std::string typeId = "::IceStorm::ReapWouldBlock";
    return typeId;
}

::std::vector<::std::string>
IceStorm::TopicLink::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = { "::Ice::Object", "::IceStorm::TopicLink" };
    return allTypeIds;
}

::std::string
IceStorm::TopicLink::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceStorm::TopicLink::ice_staticId()
{
    static const ::std::string typeId = "::IceStorm::TopicLink";
    return typeId;
}

/// \cond INTERNAL
bool
IceStorm::TopicLink::_iceD_forward(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    EventDataSeq iceP_events;
    istr->readAll(iceP_events);
    inS.endReadParams();
    this->forward(::std::move(iceP_events), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceStorm::TopicLink::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    static constexpr ::std::string_view allOperations[] = { "forward", "ice_id", "ice_ids", "ice_isA", "ice_ping" };

    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            return _iceD_forward(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

::std::vector<::std::string>
IceStorm::TopicInternal::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = { "::Ice::Object", "::IceStorm::Topic", "::IceStorm::TopicInternal" };
    return allTypeIds;
}

::std::string
IceStorm::TopicInternal::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceStorm::TopicInternal::ice_staticId()
{
    static const ::std::string typeId = "::IceStorm::TopicInternal";
    return typeId;
}

/// \cond INTERNAL
bool
IceStorm::TopicInternal::_iceD_getLinkProxy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::std::optional<TopicLinkPrx> ret = this->getLinkProxy(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceStorm::TopicInternal::_iceD_reap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::IdentitySeq iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    this->reap(::std::move(iceP_id), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceStorm::TopicInternal::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    static constexpr ::std::string_view allOperations[] = { "destroy", "getLinkInfoSeq", "getLinkProxy", "getName", "getNonReplicatedPublisher", "getPublisher", "getSubscribers", "ice_id", "ice_ids", "ice_isA", "ice_ping", "link", "reap", "subscribeAndGetPublisher", "unlink", "unsubscribe" };

    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 16, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            return _iceD_destroy(in, current);
        }
        case 1:
        {
            return _iceD_getLinkInfoSeq(in, current);
        }
        case 2:
        {
            return _iceD_getLinkProxy(in, current);
        }
        case 3:
        {
            return _iceD_getName(in, current);
        }
        case 4:
        {
            return _iceD_getNonReplicatedPublisher(in, current);
        }
        case 5:
        {
            return _iceD_getPublisher(in, current);
        }
        case 6:
        {
            return _iceD_getSubscribers(in, current);
        }
        case 7:
        {
            return _iceD_ice_id(in, current);
        }
        case 8:
        {
            return _iceD_ice_ids(in, current);
        }
        case 9:
        {
            return _iceD_ice_isA(in, current);
        }
        case 10:
        {
            return _iceD_ice_ping(in, current);
        }
        case 11:
        {
            return _iceD_link(in, current);
        }
        case 12:
        {
            return _iceD_reap(in, current);
        }
        case 13:
        {
            return _iceD_subscribeAndGetPublisher(in, current);
        }
        case 14:
        {
            return _iceD_unlink(in, current);
        }
        case 15:
        {
            return _iceD_unsubscribe(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

::std::vector<::std::string>
IceStorm::TopicManagerInternal::ice_ids(const ::Ice::Current&) const
{
    static const ::std::vector<::std::string> allTypeIds = { "::Ice::Object", "::IceStorm::TopicManager", "::IceStorm::TopicManagerInternal" };
    return allTypeIds;
}

::std::string
IceStorm::TopicManagerInternal::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceStorm::TopicManagerInternal::ice_staticId()
{
    static const ::std::string typeId = "::IceStorm::TopicManagerInternal";
    return typeId;
}

/// \cond INTERNAL
bool
IceStorm::TopicManagerInternal::_iceD_getReplicaNode(::IceInternal::Incoming& inS, const ::Ice::Current& current) const
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::std::optional<::IceStormElection::NodePrx> ret = this->getReplicaNode(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
IceStorm::TopicManagerInternal::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    static constexpr ::std::string_view allOperations[] = { "create", "getReplicaNode", "ice_id", "ice_ids", "ice_isA", "ice_ping", "retrieve", "retrieveAll" };

    ::std::pair<const ::std::string_view*, const ::std::string_view*> r = ::std::equal_range(allOperations, allOperations + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - allOperations)
    {
        case 0:
        {
            return _iceD_create(in, current);
        }
        case 1:
        {
            return _iceD_getReplicaNode(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_retrieve(in, current);
        }
        case 7:
        {
            return _iceD_retrieveAll(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond
