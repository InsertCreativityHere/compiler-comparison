// Copyright (c) ZeroC, Inc.
//
// Ice version 3.8.0-alpha.0
//
// <auto-generated>
//
// Generated from file 'LinkRecord.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

// clang-format off

#ifndef LinkRecord_h_
#define LinkRecord_h_

#include <Ice/PushDisableWarnings.h>
#include <Ice/Ice.h>
#include <Ice/Identity.h>
#include "IceStormInternal.h"

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30850
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

// NOLINTBEGIN(modernize-concat-nested-namespaces)

namespace IceStorm
{
    struct LinkRecord;
}

namespace IceStorm
{
    /// Used to store persistent information for Topic federation.
    struct LinkRecord
    {
        /// The topic link object.
        std::optional<::IceStorm::TopicLinkPrx> obj;
        /// The cost.
        std::int32_t cost;
        /// The linked topic for getLinkInfoSeq
        std::optional<::IceStorm::TopicPrx> theTopic;

        /// Obtains a tuple containing all of the struct's data members.
        /// @return The data members in a tuple.
        [[nodiscard]] std::tuple<const std::optional<::IceStorm::TopicLinkPrx>&, const std::int32_t&, const std::optional<::IceStorm::TopicPrx>&> ice_tuple() const
        {
            return std::tie(obj, cost, theTopic);
        }

        /// Outputs the name and value of each field of this instance to the stream.
        /// @param os The output stream.
        void ice_printFields(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream&, const LinkRecord&);

    using Ice::Tuple::operator<;
    using Ice::Tuple::operator<=;
    using Ice::Tuple::operator>;
    using Ice::Tuple::operator>=;
    using Ice::Tuple::operator==;
    using Ice::Tuple::operator!=;
}

/// \cond STREAM
namespace Ice
{
    template<>
    struct StreamableTraits<::IceStorm::LinkRecord>
    {
        static const StreamHelperCategory helper = StreamHelperCategoryStruct;
        static const int minWireSize = 8;
        static const bool fixedLength = false;
    };
    
    template<>
    struct StreamReader<::IceStorm::LinkRecord>
    {
        static void read(InputStream* istr, ::IceStorm::LinkRecord& v)
        {
            istr->readAll(v.obj, v.cost, v.theTopic);
        }
    };
}
/// \endcond

// NOLINTEND(modernize-concat-nested-namespaces)

#include <Ice/PopDisableWarnings.h>
#endif
